{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin4/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/contract/RocketBase.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Rocket Pool\\n/// @author David Rugendyke\\n\\nabstract contract RocketBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    RocketStorageInterface rocketStorage = RocketStorageInterface(address(0));\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered minipool\\n    */\\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"minipool.exists\\\", _minipoolAddress))), \\\"Invalid minipool\\\");\\n        _;\\n    }\\n    \\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == rocketStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Rocket Storage address\\n    constructor(RocketStorageInterface _rocketStorageAddress) {\\n        // Update the contract address\\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Rocket Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\\n\\n    /// @dev Storage arithmetic methods\\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/network/RocketNetworkSnapshotsInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >0.5.0 <0.9.0;\\n\\nstruct Checkpoint224 {\\n    uint32 _block;\\n    uint224 _value;\\n}\\n\\n/// @notice Accounting for snapshotting of values based on block numbers\\ninterface RocketNetworkSnapshotsInterface {\\n    function push(bytes32 _key, uint224 _value) external;\\n    function length(bytes32 _key) external view returns (uint256);\\n    function latest(bytes32 _key) external view returns (bool, uint32, uint224);\\n    function latestBlock(bytes32 _key) external view returns (uint32);\\n    function latestValue(bytes32 _key) external view returns (uint224);\\n    function lookup(bytes32 _key, uint32 _block) external view returns (uint224);\\n    function lookupRecent(bytes32 _key, uint32 _block, uint256 _recency) external view returns (uint224);\\n}\\n\"\r\n    },\r\n    \"contracts/types/MinipoolDeposit.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Represents the type of deposits required by a minipool\\n\\nenum MinipoolDeposit {\\n    None,       // Marks an invalid deposit type\\n    Full,       // The minipool requires 32 ETH from the node operator, 16 ETH of which will be refinanced from user deposits\\n    Half,       // The minipool required 16 ETH from the node operator to be matched with 16 ETH from user deposits\\n    Empty,      // The minipool requires 0 ETH from the node operator to be matched with 32 ETH from user deposits (trusted nodes only)\\n    Variable    // Indicates this minipool is of the new generation that supports a variable deposit amount\\n}\\n\"\r\n    },\r\n    \"contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsMinipoolInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../../../types/MinipoolDeposit.sol\\\";\\n\\ninterface RocketDAOProtocolSettingsMinipoolInterface {\\n    function getLaunchBalance() external view returns (uint256);\\n    function getPreLaunchValue() external pure returns (uint256);\\n    function getDepositUserAmount(MinipoolDeposit _depositType) external view returns (uint256);\\n    function getFullDepositUserAmount() external view returns (uint256);\\n    function getHalfDepositUserAmount() external view returns (uint256);\\n    function getVariableDepositAmount() external view returns (uint256);\\n    function getSubmitWithdrawableEnabled() external view returns (bool);\\n    function getBondReductionEnabled() external view returns (bool);\\n    function getLaunchTimeout() external view returns (uint256);\\n    function getMaximumCount() external view returns (uint256);\\n    function isWithinUserDistributeWindow(uint256 _time) external view returns (bool);\\n    function hasUserDistributeWindowPassed(uint256 _time) external view returns (bool);\\n    function getUserDistributeWindowStart() external view returns (uint256);\\n    function getUserDistributeWindowLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/node/RocketNodeStakingInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface RocketNodeStakingInterface {\\n    function getTotalRPLStake() external view returns (uint256);\\n    function getNodeRPLStake(address _nodeAddress) external view returns (uint256);\\n    function getNodeETHMatched(address _nodeAddress) external view returns (uint256);\\n    function getNodeETHProvided(address _nodeAddress) external view returns (uint256);\\n    function getNodeETHCollateralisationRatio(address _nodeAddress) external view returns (uint256);\\n    function getNodeRPLStakedTime(address _nodeAddress) external view returns (uint256);\\n    function getNodeEffectiveRPLStake(address _nodeAddress) external view returns (uint256);\\n    function getNodeMinimumRPLStake(address _nodeAddress) external view returns (uint256);\\n    function getNodeMaximumRPLStake(address _nodeAddress) external view returns (uint256);\\n    function getNodeETHMatchedLimit(address _nodeAddress) external view returns (uint256);\\n    function getRPLLockingAllowed(address _nodeAddress) external view returns (bool);\\n    function stakeRPL(uint256 _amount) external;\\n    function stakeRPLFor(address _nodeAddress, uint256 _amount) external;\\n    function setRPLLockingAllowed(address _nodeAddress, bool _allowed) external;\\n    function setStakeRPLForAllowed(address _caller, bool _allowed) external;\\n    function setStakeRPLForAllowed(address _nodeAddress, address _caller, bool _allowed) external;\\n    function getNodeRPLLocked(address _nodeAddress) external view returns (uint256);\\n    function lockRPL(address _nodeAddress, uint256 _amount) external;\\n    function unlockRPL(address _nodeAddress, uint256 _amount) external;\\n    function transferRPL(address _from, address _to, uint256 _amount) external;\\n    function withdrawRPL(uint256 _amount) external;\\n    function withdrawRPL(address _nodeAddress, uint256 _amount) external;\\n    function slashRPL(address _nodeAddress, uint256 _ethSlashAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsNodeInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProtocolSettingsNodeInterface {\\n    function getRegistrationEnabled() external view returns (bool);\\n    function getSmoothingPoolRegistrationEnabled() external view returns (bool);\\n    function getDepositEnabled() external view returns (bool);\\n    function getVacantMinipoolsEnabled() external view returns (bool);\\n    function getMinimumPerMinipoolStake() external view returns (uint256);\\n    function getMaximumPerMinipoolStake() external view returns (uint256);\\n    function getMaximumStakeForVotingPower() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/network/RocketNetworkPricesInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\ninterface RocketNetworkPricesInterface {\\n    function getPricesBlock() external view returns (uint256);\\n    function getRPLPrice() external view returns (uint256);\\n    function submitPrices(uint256 _block, uint256 _slotTimestamp, uint256 _rplPrice) external;\\n    function executeUpdatePrices(uint256 _block, uint256 _slotTimestamp, uint256 _rplPrice) external;\\n}\\n\"\r\n    },\r\n    \"contracts/types/MinipoolStatus.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Represents a minipool's status within the network\\n\\nenum MinipoolStatus {\\n    Initialised,    // The minipool has been initialised and is awaiting a deposit of user ETH\\n    Prelaunch,      // The minipool has enough ETH to begin staking and is awaiting launch by the node operator\\n    Staking,        // The minipool is currently staking\\n    Withdrawable,   // NO LONGER USED\\n    Dissolved       // The minipool has been dissolved and its user deposited ETH has been returned to the deposit pool\\n}\\n\"\r\n    },\r\n    \"contracts/types/MinipoolDetails.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"./MinipoolDeposit.sol\\\";\\nimport \\\"./MinipoolStatus.sol\\\";\\n\\n// A struct containing all the information on-chain about a specific minipool\\n\\nstruct MinipoolDetails {\\n    bool exists;\\n    address minipoolAddress;\\n    bytes pubkey;\\n    MinipoolStatus status;\\n    uint256 statusBlock;\\n    uint256 statusTime;\\n    bool finalised;\\n    MinipoolDeposit depositType;\\n    uint256 nodeFee;\\n    uint256 nodeDepositBalance;\\n    bool nodeDepositAssigned;\\n    uint256 userDepositBalance;\\n    bool userDepositAssigned;\\n    uint256 userDepositAssignedTime;\\n    bool useLatestDelegate;\\n    address delegate;\\n    address previousDelegate;\\n    address effectiveDelegate;\\n    uint256 penaltyCount;\\n    uint256 penaltyRate;\\n    address nodeAddress;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/minipool/RocketMinipoolInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../types/MinipoolDeposit.sol\\\";\\nimport \\\"../../types/MinipoolStatus.sol\\\";\\nimport \\\"../RocketStorageInterface.sol\\\";\\n\\ninterface RocketMinipoolInterface {\\n    function version() external view returns (uint8);\\n    function initialise(address _nodeAddress) external;\\n    function getStatus() external view returns (MinipoolStatus);\\n    function getFinalised() external view returns (bool);\\n    function getStatusBlock() external view returns (uint256);\\n    function getStatusTime() external view returns (uint256);\\n    function getScrubVoted(address _member) external view returns (bool);\\n    function getDepositType() external view returns (MinipoolDeposit);\\n    function getNodeAddress() external view returns (address);\\n    function getNodeFee() external view returns (uint256);\\n    function getNodeDepositBalance() external view returns (uint256);\\n    function getNodeRefundBalance() external view returns (uint256);\\n    function getNodeDepositAssigned() external view returns (bool);\\n    function getPreLaunchValue() external view returns (uint256);\\n    function getNodeTopUpValue() external view returns (uint256);\\n    function getVacant() external view returns (bool);\\n    function getPreMigrationBalance() external view returns (uint256);\\n    function getUserDistributed() external view returns (bool);\\n    function getUserDepositBalance() external view returns (uint256);\\n    function getUserDepositAssigned() external view returns (bool);\\n    function getUserDepositAssignedTime() external view returns (uint256);\\n    function getTotalScrubVotes() external view returns (uint256);\\n    function calculateNodeShare(uint256 _balance) external view returns (uint256);\\n    function calculateUserShare(uint256 _balance) external view returns (uint256);\\n    function preDeposit(uint256 _bondingValue, bytes calldata _validatorPubkey, bytes calldata _validatorSignature, bytes32 _depositDataRoot) external payable;\\n    function deposit() external payable;\\n    function userDeposit() external payable;\\n    function distributeBalance(bool _rewardsOnly) external;\\n    function beginUserDistribute() external;\\n    function userDistributeAllowed() external view returns (bool);\\n    function refund() external;\\n    function slash() external;\\n    function finalise() external;\\n    function canStake() external view returns (bool);\\n    function canPromote() external view returns (bool);\\n    function stake(bytes calldata _validatorSignature, bytes32 _depositDataRoot) external;\\n    function prepareVacancy(uint256 _bondAmount, uint256 _currentBalance) external;\\n    function promote() external;\\n    function dissolve() external;\\n    function close() external;\\n    function voteScrub() external;\\n    function reduceBondAmount() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/minipool/RocketMinipoolManagerInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../types/MinipoolDeposit.sol\\\";\\nimport \\\"../../types/MinipoolDetails.sol\\\";\\nimport \\\"./RocketMinipoolInterface.sol\\\";\\n\\ninterface RocketMinipoolManagerInterface {\\n    function getMinipoolCount() external view returns (uint256);\\n    function getStakingMinipoolCount() external view returns (uint256);\\n    function getFinalisedMinipoolCount() external view returns (uint256);\\n    function getActiveMinipoolCount() external view returns (uint256);\\n    function getMinipoolRPLSlashed(address _minipoolAddress) external view returns (bool);\\n    function getMinipoolCountPerStatus(uint256 offset, uint256 limit) external view returns (uint256, uint256, uint256, uint256, uint256);\\n    function getPrelaunchMinipools(uint256 offset, uint256 limit) external view returns (address[] memory);\\n    function getMinipoolAt(uint256 _index) external view returns (address);\\n    function getNodeMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeActiveMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeFinalisedMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeStakingMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeStakingMinipoolCountBySize(address _nodeAddress, uint256 _depositSize) external view returns (uint256);\\n    function getNodeMinipoolAt(address _nodeAddress, uint256 _index) external view returns (address);\\n    function getNodeValidatingMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeValidatingMinipoolAt(address _nodeAddress, uint256 _index) external view returns (address);\\n    function getMinipoolByPubkey(bytes calldata _pubkey) external view returns (address);\\n    function getMinipoolExists(address _minipoolAddress) external view returns (bool);\\n    function getMinipoolDestroyed(address _minipoolAddress) external view returns (bool);\\n    function getMinipoolPubkey(address _minipoolAddress) external view returns (bytes memory);\\n    function updateNodeStakingMinipoolCount(uint256 _previousBond, uint256 _newBond, uint256 _previousFee, uint256 _newFee) external;\\n    function getMinipoolWithdrawalCredentials(address _minipoolAddress) external pure returns (bytes memory);\\n    function createMinipool(address _nodeAddress, uint256 _salt) external returns (RocketMinipoolInterface);\\n    function createVacantMinipool(address _nodeAddress, uint256 _salt, bytes calldata _validatorPubkey, uint256 _bondAmount, uint256 _currentBalance) external returns (RocketMinipoolInterface);\\n    function removeVacantMinipool() external;\\n    function getVacantMinipoolCount() external view returns (uint256);\\n    function getVacantMinipoolAt(uint256 _index) external view returns (address);\\n    function destroyMinipool() external;\\n    function incrementNodeStakingMinipoolCount(address _nodeAddress) external;\\n    function decrementNodeStakingMinipoolCount(address _nodeAddress) external;\\n    function tryDistribute(address _nodeAddress) external;\\n    function incrementNodeFinalisedMinipoolCount(address _nodeAddress) external;\\n    function setMinipoolPubkey(bytes calldata _pubkey) external;\\n    function getMinipoolDepositType(address _minipoolAddress) external view returns (MinipoolDeposit);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/util/AddressSetStorageInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface AddressSetStorageInterface {\\n    function getCount(bytes32 _key) external view returns (uint);\\n    function getItem(bytes32 _key, uint _index) external view returns (address);\\n    function getIndexOf(bytes32 _key, address _value) external view returns (int);\\n    function addItem(bytes32 _key, address _value) external;\\n    function removeItem(bytes32 _key, address _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/network/RocketNetworkVotingInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface RocketNetworkVotingInterface {\\n    function initialiseVoting() external;\\n    function initialiseVotingWithDelegate(address _delegate) external;\\n    function getVotingInitialised(address _nodeAddress) external view returns (bool);\\n    function getNodeCount(uint32 _block) external view returns (uint256);\\n    function getVotingPower(address _nodeAddress, uint32 _block) external view returns (uint256);\\n    function setDelegate(address _newDelegate) external;\\n    function getDelegate(address _nodeAddress, uint32 _block) external view returns (address);\\n    function getCurrentDelegate(address _nodeAddress) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/types/NodeDetails.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\n// A struct containing all the information on-chain about a specific node\\n\\nstruct NodeDetails {\\n    bool exists;\\n    uint256 registrationTime;\\n    string timezoneLocation;\\n    bool feeDistributorInitialised;\\n    address feeDistributorAddress;\\n    uint256 rewardNetwork;\\n    uint256 rplStake;\\n    uint256 effectiveRPLStake;\\n    uint256 minimumRPLStake;\\n    uint256 maximumRPLStake;\\n    uint256 ethMatched;\\n    uint256 ethMatchedLimit;\\n    uint256 minipoolCount;\\n    uint256 balanceETH;\\n    uint256 balanceRETH;\\n    uint256 balanceRPL;\\n    uint256 balanceOldRPL;\\n    uint256 depositCreditBalance;\\n    uint256 distributorBalanceUserETH;\\n    uint256 distributorBalanceNodeETH;\\n    address withdrawalAddress;\\n    address pendingWithdrawalAddress;\\n    bool smoothingPoolRegistrationState;\\n    uint256 smoothingPoolRegistrationChanged;\\n    address nodeAddress;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/node/RocketNodeManagerInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >0.5.0 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"../../types/NodeDetails.sol\\\";\\n\\ninterface RocketNodeManagerInterface {\\n\\n    // Structs\\n    struct TimezoneCount {\\n        string timezone;\\n        uint256 count;\\n    }\\n\\n    function getNodeCount() external view returns (uint256);\\n    function getNodeCountPerTimezone(uint256 offset, uint256 limit) external view returns (TimezoneCount[] memory);\\n    function getNodeAt(uint256 _index) external view returns (address);\\n    function getNodeExists(address _nodeAddress) external view returns (bool);\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodeRPLWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodeRPLWithdrawalAddressIsSet(address _nodeAddress) external view returns (bool);\\n    function unsetRPLWithdrawalAddress(address _nodeAddress) external;\\n    function setRPLWithdrawalAddress(address _nodeAddress, address _newRPLWithdrawalAddress, bool _confirm) external;\\n    function confirmRPLWithdrawalAddress(address _nodeAddress) external;\\n    function getNodePendingRPLWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodeTimezoneLocation(address _nodeAddress) external view returns (string memory);\\n    function registerNode(string calldata _timezoneLocation) external;\\n    function getNodeRegistrationTime(address _nodeAddress) external view returns (uint256);\\n    function setTimezoneLocation(string calldata _timezoneLocation) external;\\n    function setRewardNetwork(address _nodeAddress, uint256 network) external;\\n    function getRewardNetwork(address _nodeAddress) external view returns (uint256);\\n    function getFeeDistributorInitialised(address _nodeAddress) external view returns (bool);\\n    function initialiseFeeDistributor() external;\\n    function getAverageNodeFee(address _nodeAddress) external view returns (uint256);\\n    function setSmoothingPoolRegistrationState(bool _state) external;\\n    function getSmoothingPoolRegistrationState(address _nodeAddress) external returns (bool);\\n    function getSmoothingPoolRegistrationChanged(address _nodeAddress) external returns (uint256);\\n    function getSmoothingPoolRegisteredNodeCount(uint256 _offset, uint256 _limit) external view returns (uint256);\\n    function getNodeDetails(address _nodeAddress) external view returns (NodeDetails memory);\\n    function getNodeAddresses(uint256 _offset, uint256 _limit) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/contract/network/RocketNetworkVoting.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin4/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../RocketBase.sol\\\";\\nimport \\\"../../interface/network/RocketNetworkSnapshotsInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsMinipoolInterface.sol\\\";\\nimport \\\"../../interface/node/RocketNodeStakingInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsNodeInterface.sol\\\";\\nimport \\\"../../interface/network/RocketNetworkPricesInterface.sol\\\";\\nimport \\\"../../interface/minipool/RocketMinipoolManagerInterface.sol\\\";\\nimport \\\"../../interface/util/AddressSetStorageInterface.sol\\\";\\nimport \\\"../../interface/network/RocketNetworkVotingInterface.sol\\\";\\nimport \\\"../../interface/node/RocketNodeManagerInterface.sol\\\";\\n\\n/// @notice Accounting for snapshotting of governance related values based on block numbers\\ncontract RocketNetworkVoting is RocketBase, RocketNetworkVotingInterface {\\n\\n    // Constants\\n    bytes32 immutable internal priceKey;\\n\\n    // Events\\n    event DelegateSet(address nodeOperator, address delegate, uint256 time);\\n\\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\\n        version = 1;\\n        // Precompute keys\\n        priceKey = keccak256(\\\"network.prices.rpl\\\");\\n    }\\n\\n    /// @notice Unlocks a node operator's voting power (only required for node operators who registered before\\n    ///         governance structure was in place). Sets delegate to self.\\n    function initialiseVoting() onlyRegisteredNode(msg.sender) external override {\\n        _initialiseVoting(msg.sender);\\n    }\\n\\n    /// @notice Unlocks a node operator's voting power (only required for node operators who registered before\\n    ///         governance structure was in place).\\n    /// @param _delegate The node operator's desired delegate for their voting power\\n    function initialiseVotingWithDelegate(address _delegate) onlyRegisteredNode(msg.sender) onlyRegisteredNode(_delegate) external override {\\n        _initialiseVoting(_delegate);\\n    }\\n\\n    /// @dev Initialises the snapshot values for the caller to participate in the on-chain governance\\n    function _initialiseVoting(address _delegate) private {\\n        // Check if already registered\\n        require (!getBool(keccak256(abi.encodePacked(\\\"node.voting.enabled\\\", msg.sender))), \\\"Already registered\\\");\\n        setBool(keccak256(abi.encodePacked(\\\"node.voting.enabled\\\", msg.sender)), true);\\n\\n        // Get contracts\\n        RocketNetworkSnapshotsInterface rocketNetworkSnapshots = RocketNetworkSnapshotsInterface(getContractAddress(\\\"rocketNetworkSnapshots\\\"));\\n        RocketNodeStakingInterface rocketNodeStaking = RocketNodeStakingInterface(getContractAddress(\\\"rocketNodeStaking\\\"));\\n        RocketMinipoolManagerInterface rocketMinipoolManager = RocketMinipoolManagerInterface(getContractAddress(\\\"rocketMinipoolManager\\\"));\\n\\n        bytes32 key;\\n\\n        // ETH matched\\n        key = keccak256(abi.encodePacked(\\\"eth.matched.node.amount\\\", msg.sender));\\n        rocketNetworkSnapshots.push(key, uint224(rocketNodeStaking.getNodeETHMatched(msg.sender)));\\n\\n        // Active minipools\\n        key = keccak256(abi.encodePacked(\\\"minipools.active.count\\\", msg.sender));\\n        rocketNetworkSnapshots.push(key, uint224(rocketMinipoolManager.getNodeActiveMinipoolCount(msg.sender)));\\n\\n        // RPL staked\\n        key = keccak256(abi.encodePacked(\\\"rpl.staked.node.amount\\\", msg.sender));\\n        rocketNetworkSnapshots.push(key, uint224(rocketNodeStaking.getNodeRPLStake(msg.sender)));\\n\\n        // Set starting delegate to themself\\n        key = keccak256(abi.encodePacked(\\\"node.delegate\\\", msg.sender));\\n        rocketNetworkSnapshots.push(key, uint224(uint160(_delegate)));\\n    }\\n\\n    function getVotingInitialised(address _nodeAddress) external override view returns (bool) {\\n        return getBool(keccak256(abi.encodePacked(\\\"node.voting.enabled\\\", _nodeAddress)));\\n    }\\n\\n    /// @notice Returns the number of registered nodes at a given block\\n    /// @param _block Block number to query\\n    function getNodeCount(uint32 _block) external override view returns (uint256) {\\n        // Get contracts\\n        RocketNetworkSnapshotsInterface rocketNetworkSnapshots = RocketNetworkSnapshotsInterface(getContractAddress(\\\"rocketNetworkSnapshots\\\"));\\n        bytes32 key = keccak256(abi.encodePacked(\\\"node.count\\\"));\\n        return uint256(rocketNetworkSnapshots.lookupRecent(key, _block, 10));\\n    }\\n\\n    /// @notice Returns the voting power of a given node operator at a specified block\\n    /// @param _nodeAddress Address of the node operator\\n    /// @param _block Block number to query\\n    function getVotingPower(address _nodeAddress, uint32 _block) external override view returns (uint256) {\\n        // Validate block number\\n        require(_block <= block.number, \\\"Block must be in the past\\\");\\n\\n        // Check if the node operator has enabled voting\\n        if (!getBool(keccak256(abi.encodePacked(\\\"node.voting.enabled\\\", _nodeAddress)))) {\\n            return 0;\\n        }\\n\\n        // Get contracts\\n        RocketNetworkSnapshotsInterface rocketNetworkSnapshots = RocketNetworkSnapshotsInterface(getContractAddress(\\\"rocketNetworkSnapshots\\\"));\\n        RocketDAOProtocolSettingsMinipoolInterface rocketDAOProtocolSettingsMinipool = RocketDAOProtocolSettingsMinipoolInterface(getContractAddress(\\\"rocketDAOProtocolSettingsMinipool\\\"));\\n\\n        // Setup\\n        bytes32 key;\\n\\n        // Get ETH matched\\n        key = keccak256(abi.encodePacked(\\\"eth.matched.node.amount\\\", _nodeAddress));\\n        uint256 ethMatched = uint256(rocketNetworkSnapshots.lookupRecent(key, _block, 5));\\n\\n        // Get active minipools to calculate ETH provided\\n        key = keccak256(abi.encodePacked(\\\"minipools.active.count\\\", _nodeAddress));\\n        uint256 activeMinipools = rocketNetworkSnapshots.lookupRecent(key, _block, 5);\\n        uint256 launchAmount = rocketDAOProtocolSettingsMinipool.getLaunchBalance();\\n        uint256 totalEthStaked = activeMinipools * launchAmount;\\n        uint256 ethProvided = totalEthStaked - ethMatched;\\n\\n        // Get RPL price\\n        uint256 rplPrice = uint256(rocketNetworkSnapshots.lookupRecent(priceKey, _block, 14));\\n\\n        // Get RPL staked by node operator\\n        key = keccak256(abi.encodePacked(\\\"rpl.staked.node.amount\\\", _nodeAddress));\\n        uint256 rplStake = uint256(rocketNetworkSnapshots.lookupRecent(key, _block, 5));\\n\\n        // Get RPL max stake percent\\n        key = keccak256(bytes(\\\"node.voting.power.stake.maximum\\\"));\\n        uint256 maximumStakePercent = uint256(rocketNetworkSnapshots.lookupRecent(key, _block, 2));\\n\\n        return calculateVotingPower(rplStake, ethProvided, rplPrice, maximumStakePercent);\\n    }\\n\\n    /// @dev Calculates and returns a node's voting power based on the given inputs\\n    function calculateVotingPower(uint256 _rplStake, uint256 _providedETH, uint256 _rplPrice, uint256 _maxStakePercent) internal view returns (uint256) {\\n        // Get contracts\\n        uint256 maximumStake = _providedETH * _maxStakePercent / _rplPrice;\\n        if (_rplStake > maximumStake) {\\n            _rplStake = maximumStake;\\n        }\\n        // Return the calculated voting power as the square root of clamped RPL stake\\n        return Math.sqrt(_rplStake * calcBase);\\n    }\\n\\n    function setDelegate(address _newDelegate) external override onlyRegisteredNode(msg.sender) onlyRegisteredNode(_newDelegate) {\\n        RocketNetworkSnapshotsInterface rocketNetworkSnapshots = RocketNetworkSnapshotsInterface(getContractAddress(\\\"rocketNetworkSnapshots\\\"));\\n        bytes32 key = keccak256(abi.encodePacked(\\\"node.delegate\\\", msg.sender));\\n        rocketNetworkSnapshots.push(key, uint224(uint160(_newDelegate)));\\n        emit DelegateSet(msg.sender, _newDelegate, block.timestamp);\\n    }\\n\\n    function getDelegate(address _nodeAddress, uint32 _block) external override view returns (address) {\\n        RocketNetworkSnapshotsInterface rocketNetworkSnapshots = RocketNetworkSnapshotsInterface(getContractAddress(\\\"rocketNetworkSnapshots\\\"));\\n        bytes32 key = keccak256(abi.encodePacked(\\\"node.delegate\\\", _nodeAddress));\\n        return address(uint160(rocketNetworkSnapshots.lookupRecent(key, _block, 10)));\\n    }\\n\\n    function getCurrentDelegate(address _nodeAddress) external override view returns (address) {\\n        RocketNetworkSnapshotsInterface rocketNetworkSnapshots = RocketNetworkSnapshotsInterface(getContractAddress(\\\"rocketNetworkSnapshots\\\"));\\n        bytes32 key = keccak256(abi.encodePacked(\\\"node.delegate\\\", _nodeAddress));\\n        return address(uint160(rocketNetworkSnapshots.latestValue(key)));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DelegateSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getCurrentDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_block\",\"type\":\"uint32\"}],\"name\":\"getDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_block\",\"type\":\"uint32\"}],\"name\":\"getNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getVotingInitialised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_block\",\"type\":\"uint32\"}],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialiseVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"initialiseVotingWithDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDelegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RocketNetworkVoting", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "15000", "ConstructorArguments": "0000000000000000000000001d8f8f00cfa6758d7bE78336684788Fb0ee0Fa46", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}