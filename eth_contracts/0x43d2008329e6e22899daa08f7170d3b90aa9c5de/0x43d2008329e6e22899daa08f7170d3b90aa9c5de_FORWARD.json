{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FORWARD.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: James Jean X KILLSPENCER\u00ae Soccer Ball\\n/// @author: manifold.xyz\\n\\nimport \\\"./manifold/ERC1155Creator.sol\\\";\\n\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                                                          //\\n//                                                                                                                                                                          //\\n//    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    //\\n//    //                                                                                                                                                              //    //\\n//    //                                                                                                                                                              //    //\\n//    //    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKKKKKKKXKXXXXXXKKXXXXXKKKKKKKKKKXXKKKKKKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXN    //    //\\n//    //    XXXXXXXXXXXXXXXKKK0KKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKKKK000KKXXXXXXKXXXXXXKKKXXXXXXXK0OkxxddddxkkOOOOOOOO00KXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXKKKKK0KKKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKKK0000KKXXXXXXXXXKXXXXKKKKXXXXKKOdollldxxO000KKKKKK000OOkkkOKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXKK000KKKXXXXXXXXXXXKKXXXXXXXXXXXXXXXXXXXXK000KKKXXXXXXXXXXXXXXKKXXXXXXXKOdlloxkO0KKKKKXXXXXXKKKKKXXXK0Okkk0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXKKKKKKKKKKKKXXXXXXXKKKKXXXXXXXXXXXXXXXXXXX00KKKXXXXXXXXXXXXXXXXXXXXXKKXKko:cokKKKKXXXXXXNNNNNNNNNNNNXXXXXK0kdxOKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXKKKKKKKKKKXXXXXXXKKKKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKOl:cdOKXXXXXNNNNNNNNNNNNNNXNNNNNNNNXXX0kxk0XXXXXXXKKKKXXXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXKKXXKXXXXXKXXXXXKKKKKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKXXXXXK0x::okKKXXXNNNNNNNNNNNNNNNNNNNNNNNNNNNNXXK0OkOXXXXXXKK00KXXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXXKXXKKKXXXXXXXXXXXXKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKXKKKKKK0dc::d0KKXXXXNNNNNNNNNWWNNNNNNNNNNNNNNNNNXXXXK0xxKXXXXXK00KKXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXXXXXXXXXXXXXXXKKKKKKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKKKKKKOxxo::cx0KKXXXXXNNNNNNNNNNWWNNNNNNNNNNNNNNNNXXXXXX0odKXXXXXXK0KXXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXXXXXXXXXKKKKKK00KKKKKXKKXXXXXXXXXKKKXXXXXXXXKKXXKKKKK00d;,;;:coOKKXXXXXXNNNNNNNNNNWWWWWNNNNNNNNNNNNXXXXXXXXklxKXXXXXK0KKXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXXXXXXKKKKKKKK0KKKKKKKKXXXXXXXXXXKKXXXXXXXXKKKKKKKKKKK0d,;:,:c;oOKKXXXXXXXNNNNNNNNNNWWWNNNNNNNNNNXXXNXXXXXXX0doOXXXXXXK0KXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXXXXXKKXXKKKKKKKKKKKKKXXXXXXXX0kdddollodxkkxxkO000000Kx;;ol;;cldOKKKXXXXXXXNNNNNNNNNNWWNNNNNNNNNNXXXXNNXXXXXKxcdKXXXXX0OKXXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXKKKKXXKKKKKXXKKXKKXXKKKKKK0kdc::;clccccc:ccclllcloodxc;loc,;oxkOKKKXXKXXXXNNNNNNNNNNNNNNNNNNNNXNNXXXNNXXXKKKkccOXXXXX0O0XXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXXXXXXK0KKKK0KKXXXKKKOxdooollllc:;;cooxOKKKKKK00OOOOxol:,,;,;oc;:okOO0XKKXXXXXNNNNNNNNNNNNNNNNNNNNNNXXNXXXXXXXXK00kc:kKKXXX0O0XXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXXXKKXXKKKKK0KXXXXKOdllcccclodxxoc;:oox0KKKXXXXXKKKKKKK0xooo:,,:c;:xO00KXXXKKXXXXNNNNNNNNNNNNNNNXXNNNNXXXXXXXXXXK000x::x0KXXXKO0XXXXXXXXXXXXXXXX    //    //\\n//    //    XXXXXXXKKXXXKKKK00KXXKOxlclxOOOOO0000OxlcodxO0KKKXKKKXKKXXXK0OxxOkxo::cccdkO0KKKXKKKXXXXXXXXNXXXXXXNNXXXXXNXXXXXXXXXK000OOd;:d0KXXK0k0XXXXXXXXXXXKKXXX    //    //\\n//    //    XXXXXKKKKXXKKKK0kxdxdlcoxOKKKKKKKKKK0Oo:oxx000KKKXKKKKKXXXK0kkkO00kxdccccokO0KKKKKKXXXXXXXXXXXXXXXXXXXXXNXXXXXXKKXKK0000Oko;:x0KKXKOOKXXXXXKKKXXK0KXXX    //    //\\n//    //    XXXXK0KXXXK00KOo;,',:dO0KKKXXKKKKK000klcxxk0O0KKKKKKKKXXXK0OkkO000OOkd:,:okkO0KK0OOKKXXXXXXXXKXXKKXXXXXXXXXXXXXKKK0OOO0Okxc;cx0KKXKO0XXXXXXKKKKX00KXXX    //    //\\n//    //    XXKK0KXXK0OOOdc,;,,lk0KKXXXKXKKKKK000OlckkO0OO00KKKKKKXXK0OOO0KK000K0xc,;okxkO0K0xok0KKKKKKXXKKKKKKKKKXXXKKKXKK000OOOOOkxl;;lkKXXKO0KXXXXXKKKKXK00XXXX    //    //\\n//    //    XXK0KXKK0OOd;''lo:oxOKKK00KKKK000OOkxxocdkO0OO00KKKKKKKKOOO00KKK0OKK0kl,;lddxkO00klcdO0KKKKKKKKKKKKKKKKKKKXKK0000OOOOkxxo:;:xKKXKOOKXXXXX00KXXK00KKKKX    //    //\\n//    //    XK00KKKKOxc,;ccoxcldxkOOkkOOkkkxdollccc:cdxOO0KO0KKKKKK0OO0K00KKKO0K0ko:;cdxxkOOOkdc:lxO0K0000KK0KKKK0000KK00OOOOOOOkdxdc;:d0XXK0O0XKKXXK0KXK0O0KKKKKX    //    //\\n//    //    K0000KK0kc,ck0kdxl;:llllccc::ccllloddxkkolodxxkkOOO0KKK000KKKKKKK0OKKkdl;:oxxkOOOkkxocloxOOO000O0KK000000OO0000OOOOkxdlcccxKKXK000KXKKK00KK0O0KKKKKXXX    //    //\\n//    //    K00O0K0Ol;:dKXX0kdc:;,'';ldkOO000KXXXXXK0Oxddolccoxk00K000KKKKK000O0KOxdc;codkkkkkkOkkkkxkO00OOOO00O0000OOO000OOkkxdl::cdOKKKK0000KKK0000OOO0KKKKXXXXX    //    //\\n//    //    XKOO0K0l,,;dXNNNXKkl,.,oOKKKKXXKKKKXXXXKKKK0kl:lxkk0K0OxddoolldkOOkO00kxd:;;cdxkkkOO00000OO00000OO00O000OO000OOkxdoc;:okKKK000000K00OOOOO00KKKKKXXXXXX    //    //\\n//    //    XK0O00x;,';xNNNNNKd;',dKXXXKXXKXXKXXXXXXXKKkllk0K000Oo:;cdxxxdoooooxO00kdo:,;coxxdxO0KK00KKKK0000000OOOOOOkOOkxoc:;:oOKKK0000OOOOOOkkkO000KKKXXKKKXXXX    //    //\\n//    //    XK00KOc,:,;ONNNKd;':c:dKXXXXXXXXXXXXXXXXXKxcd0K0KKOxl;;oddddddodddolok00kdooc;:odo:lxO000000000OOkkkkkkkkxxdoc:;:ldOKKKK0OOOkxOOkkOOOOOO00KKKKKKKXXXXK    //    //\\n//    //    XK0K0l,ld:c0NX0o,,lddx0XXXXXXXXKKXXXKKKK0dlkKKKKKOxdc,:odkkkxddxk0Kkclk0Okdddo:;coo::codxO00OOxdlc;;:cc:::;;:codk00000K0kkxxkOOOO00K000000KKKKKKKXXXXK    //    //\\n//    //    XK00o;oko;c0X0ololxXXXXXXXXXXXKKXXXKKKK0olOKKKKKOddl:cxKXXXK0O0KXNXOc;okkkkxdooc::cllllcodxxxxxddl:;,',;codxkk0000OOOkkkkOOOOOOO0000KKKKK00KKKXXKKKXXK    //    //\\n//    //    XKkc;ldl:,c0Xx:odoOKXXXXXXXXXKXXKXXXKXKdlOKKXKKKOko;:d0XXXKKK00KXNKx:,;ldddxxollc:;,,;;::::;;,,,,'..'coxOkkO0KK0OkkkxxxdooollllodkOO00000KK0KKKXK00KKK    //    //\\n//    //    KKkoddddocoK0l:odkKXXXXXXXXXXKKKKXXXX0ocOKXXKXK0KKkollxkkdolldx0XX0o;;,,:llloooollc:;:clooolc:::;,'.;dkO00000Okkdlcllcclll::cl::llclodxO000000KKK000K0    //    //\\n//    //    OO00KKKKxloxodO00KXXXXXXXXXXXXKKKXXXKo:kKKXXKKKKKKOkdcdOKK0000KKXKxlc;,:coolooll:::clldxkOOO0Okxo:,'ckO000Okkxl::;:lodxxdccdO0OkxdxkxooodkOO000KK00O00    //    //\\n//    //    OxxOKXXKOxxxOKXXXXXXXXXXXXXXXXXXXXXKo:xXXXXXKKKK0Okkdlloddoodxxkkxolc;;:lxOOOOkxxxdoccllldxkkOkkdc,;dkOOOOxdc;,,;:clolc:;cOXXXNNX0dxOOOxoclxO000000O00    //    //\\n//    //    KOdx0XXKXXXXXXXXXXXXXXXXXXXXXXXXXXKd:dXXKK00Oxdddooolcc::::,,,:oddoc:,,:okO0000KKKKOOkdlccodxxxxd:,lxxOkxdc;,:odl::ldxkkxox0NNNNN0kO0Okxolllok00OO0000    //    //\\n//    //    00xok0XXXXXXXXXXXXXXXXXXXXXXXXXKK0dco0XK0Okxdddlcc:;,;;;;;:::,';::,',;cdkO0000KKKKKKKK0Okdl:cdxol;:xxxxddl,,coxd:cx0KKXXNKxdOKKKOxKWWNK0ocxxl:dOOkOO0O    //    //\\n//    //    kkdokKXXXXXXXXXXXXXKKKXXXXXXXXK0Oocx0K0OOOOxll:;;:;;:::::;;;;,,,,,,,,;:coxkkO0KK00KKKKK0Okxc;:ddc,lkxddoc''codo:;d0KKXXNN0xOXNWWN00NWNX0xcokdc:oOOkOOO    //    //\\n//    //    K000KXXXXXKKXXXXK0KKKKXXXXXXK0Oko:lkO00kdl::;,:lcclddxxxxxdddlcllllc:;,,;;;;:loxkO000000kkxl;',lc,lkdodc',:cll;,lddxkkOOxoxKNNNNNXO0XXKkxoddolc;okxkOk    //    //\\n//    //    XXXXXXXXXX0OOKXXX00KK00KXXK000kocokxolcc,,:lc,;ldxxxkkOOOkkkxxxxolc;;:clddoollllllodxkOkxxdc,..,;:xkdxd;'coll:,;cldxO0000kdx0KK000Oddkxdk00kdlc::oxO0k    //    //\\n//    //    XKKKKXXXXXK0k0XXX0O0KXKOOkxddoc;:cc;,'';:lol::dkkxxkOOOOOOOkkxxdoc,'cxOOkxkOkxxkkkxlclooooc;'..';oOkxko',codc:lc:ldxOKKXXKOocoxkkkOd:cd0XKK0klll:cdO0k    //    //\\n//    //    OOK00O0KXXXXXXXXXKOOKK0kxdl:::cc:::;:,';cll:ckOxxxkO0OOOkkkkddxo,.,oO0OOOO000OOkxdolc:;;:;,'''';oOOOOkl,,:oo;codocldxkOOOOo:oOKXXX0ddOxdxO0Odcoo::oO0k    //    //\\n//    //    OKKKK0OOOKXXXXXKKKOO0K00Oxxdoccc::c:c:,;ccloloxdxkO0O00kxkkxdxd;.,lkOOO0000K0Oxl:colllc;,'';,;lxkO00kOd,';c;;cldkdlloooodl:lkO000OdlOX0kdoccc:ll;;oO0k    //    //\\n//    //    0KXXXXK0OkOKXXKKKK0000000KK0Oxl:::lccc,;ccldxocldxxxOOkxxkOkxx:,,:dxk00000kxdccoxOOkxdlcc:;:okOO000OOkx;';;;;;clodo;:cloolccdxxkkdcdKK0Oxl;cool:,:dOOO    //    //\\n//    //    XKKKKKKKK0kk0KKKKXX00K0KKKK000Oo:lolol:;:c:lxocloolooooodxxdxo;,;lxxxkO0Oxl::cx00Odlclloolc:o0000OOOkkxl,,:cc,,;;,,',;:::::;:cldxocokOOko:;lolc,,cxkOO    //    //\\n//    //    KXXXXXXK000OkOKXXXXK00OKK00K00KOxoooolc::::cddddxxxkkxkOOOkxx:,;:cdddxxkxl;;lxkkdcldxO0OO0kocokOOOOkxxxxo:;,';:,,::ldxdool:;,;cdkkxdccl:;,;lo:,':okOOO    //    //\\n//    //    0KKXXXXKKKK0kxOKXXKK0kk00000KK0KKOkkxxxdl;:cldxdxk00OOOOOOkkd;';::clododo:codxoclxOKK000Okdl::cllcccc:;,;;,;oxl,;cdOkoloxdl;',;:dkkxl,,clc;::,';lk0OOO    //    //\\n//    //    XK0kOKXKKXXK0kxk0KKKkxkkO0000O0KKKK0000Oko::cldddxkOOkkxxkkxo;';cccccccc;:clol:lxk00Okdoccccc;',:ccccloodclkxc;:oxxkkl;lxoc:,,;:lllc,'cxdl::,';ok00Okx    //    //\\n//    //    XXX0xd0KXXXKK0kxk0X0kkkkkkOOkO0KKK0OOO00O0Ooc;:lloxkOkxxxdxdl:,:loollodo:,:c::ldxkOkl:coxOOkc',ldl:lk00Ollkd:;:dOklcclodo::;',;;,,,;',loc:;,,cxO0OOOxx    //    //\\n//    //    XXXX0do0XKKKKK0kdkO0K0OkxkxxkOO000OkkO000000d,':cclooddoodxddl,,:cccoddo;':c;:loxxl::lxOOkxc',cooldk00xlodc;;:dOOkdxdddoc;;;';ccccc:,,;,',;cdOOOOOkxdk    //    //\\n//    //    XXXK0dlx0KKKKKKOdodOK00OxodxOOOOOxxkOOO000Okd;;dkkxdllc::ccc:::;,;;;::,''',,,:cll:;:oxxdddl,,::oOOOollldo:,:dO000xokx:cl;:oo;,;,,,,,,;::ldk000OOOOxokO    //    //\\n//    //    XXXKkooxxOKK00OOdodx00OkddxxxkkdodxxxxkOkkkkxl,ck000OOOOOOxxdlc:;,,'',,;:;'.';cl;,:loolll:,;dooOKOddxdo:;,:odxO00xc:;',cc;colccll:codkOO00000O00OxdxOk    //    //\\n//    //    XXKKK0kdodOK0OkOkdddxOxxkOkddxdlodddddxdodxko,':okOOO000K000OOkdlllccccc:,''..,;,,;::;;,,,cxkdkOdoxkdc:colcdxclOOkdc:;:;;:dkkkO0OxdO0Okxxk00O000kooxkO    //    //\\n//    //    XKKXKK0Odco0KOOOkddddk00Okddooddddddoollll:;';xkodk00KK00OOkkxdooollc::;'.,;,'.;::cc;;,,:dOOxddooxocldxxdc:clc:oxko:;cl;:x00000KKkxxxdxkddO00K0koldO0k    //    //\\n//    //    KKKKKKK0kocdO0Okxoooox00kdolcloddl:;;;'';::cdk00OddxkO000Okxddoooolc:;'.'cdxo;';loolccloxxxxxkxdolldxkOkxoodoloddl:;:loc:OK0KK0KKkooxO0koxO0KOdlldOkkk    //    //\\n//    //    XKXKKKKOOOdlok0kdooookOdc::;:c:;'.,:c;cxO00K00KKK0kolloodoooooolc:;;'..;lxkOko:,,;:llodxkxkkxdoooddxkO00Oxddoc:c;;okOkkdoO0kkO0K0xdk00kooO00koloxkkkO0    //    //\\n//    //    KKKKKKK000kocoO0xllc::;'.'....,;,lOkccOKKKKKKKKXK00Oxdolc:;:::;,'..',codxkOOO0d;',:dxdodxxolcodoldkxx00kxolc;'',;l000K0xk0xdxxOKOkO00klokKOdclxkkO00K0    //    //\\n//    //    xxxkkkOOO0OolldOxc;''',;'..''cocckKklxKKKKKKKKXXXKKK0Oxdolc::,..',;ldxkk0Oxxddd:'':locclc:cdOOkl:ldllxdlcc;;cllooxO0K0xk00xodk00OO0OxlcxOxlloxkk0KKKK0    //    //\\n//    //    dk0000Okxxkxlcoxl,';cc:'.;;;okdcoOOdlx000KKKKKKKKKK00OOxdoc:,'':oxxOOOOkxoc:lxkkl,;;;cl:;:oxO0kkdc::loc;;ldxxk0K00KKKkk0KKOkO0K0OOkoccxxolodxO0KKXKKKK    //    //\\n//    //    0KKKK00Okxddo:c:'.:lll,.;c::xko:lkko:okkOO000OOOOkkxxxoc:;'';lxkkkkkxxxxkkkkkO0Oko;',;;:::lccdxxdoc:::,;x0OkOK0O0KKOkk0K00KKKK000kl:collodxO0KKKKXXKK0    //    //\\n//    //    00O00KK00Oxoc;;;';olcl;';cccdxoccdxdc;ldxxkOOkxxxdol:;,'.':okkkxxxxxkO0KKK00KKOxkko;.'lxoc:;;lxxocc::l;;xkO00O0KKKOxkO0O0KKKKOOOo:;cllodkO0KKKKKKKXKK0    //    //\\n//    //    kkkkkxxOK0kxl;:c:;clcc;,;:ccoxdoolodo:;:lloolllc:;''''';cdkOkkkkOO000KKKK0OkOOkxxxxo;,:ldxdc:ooclxkOdllxO0OOOKKK0OxkOOO0KKKOOOdc;:coxkkO0KKKKKKKKXXKOO    //    //\\n//    //    xO0K0OkxxO00xc:ll;;lol;',::ccldddollolc:::;;,,,,'';cldxkOOkkOOO00000000OOkkxxkxxkOOOxocccclc;clcx0kdxO0OOO0KK00OkkOOOO0KK0Okdc::coxOO0KKKKKKKKKKKK0OO0    //    //\\n//    //    d0kxxdxxoloO0d:co:':ll;'',,,:ccc::c:,',,,,,;;:cloxkOOOOOkkOOOOOOO0OOkkkOOOOkkOkkkOO0000OOOOOkxooxxkO0OOO0KK00OOkkOO00KK0kxolcldxxO0KKKKKKKKXXXK0OO0K0O    //    //\\n//    //    loldO0koloccdxl::,':lol:coolcllc:;;'...;ldxxxxkkxxxxkOOO0000OOOOOOOOOOOOOOOkkkkkO00KKXKKK000OOkxkOOOO0KK0OkkOxxO00KK0OdllccoxkO00KKKKKKKXKKXKOkkOKKOxk    //    //\\n//    //    d::xO0kooOOocccc;.'cddoloxxkkxkOkxd:'':odddxxkxxdodxkkkOOOOkkxkO00O000OOOOkkkO0K00K0000OO0OOOxooxO0KKK0OkkkkO0KKKKOxolcclodk00KKKKKKKKKKK00OkkO00kkk00    //    //\\n//    //    docoO0kdox00x::c,',cdxoldxxxddxxddc,,;cllccllodxkkOOOO000xllokOO0OOkkxkkO00OO0OO0OO0000K00kxxdxk0000OkkxxO0KXXKOxolclodxk000KKKKKKKKKK0kkkk0KKkxxkKKK0    //    //\\n//    //    kooooxOkdoxOOd:,'';oxdlcdkxxdollol;,,,coo::ldxO0KKKK000Oo:coxkxxkkkxkO00KK0OOOkO000000OxddxkO000Okxxxxk0KKKKOko::ldxO00OOOOOk0KKKK0Okkkk0KX0xodOKKXK00    //    //\\n//    //    X0xdolokkdlldkd,.'':llllloooodddxkddoc;:cok0000000O0OxollodxkkkO00000KKK0kkOOkkO000OxdddkO00OxxxxxkO0KKK0kdoccoodxxxxkkkkkxkO0OkkkkOO0KK0OxddO000KKK0O    //    //\\n//    //    KKK0xoccoodocldc,,;:clodooxkkOOOOOOOOOkdooodkOOO0K0kolloddxkkk0KKKKX0OkkkkkkkxxkkkkkkkkxxddddxkOKKKOxdolcc::codxxkkOOOkkkxxkOkkk0KKKK0kxxdk0K0OkO00000    //    //\\n//    //    XKKKKOdlccllllcc:;,,:oxxxxxdxxkO00000Okkxdc:llx000xolldkOOkxxk0K0OkkkkkkxooodxxdddddddddxkO00Okxolc:;;;:loddxk0KK0kdooodkkOO0KXKK0OxdodkO00OkkkkO00K00    //    //\\n//    //    0KXKKKK0kdc:cllccc::::lodoccodkO00Okxdollllcc;:dkkkkkO0OkdoxOOxdxkkkkxolcccloooooddddxxdddoolc:cccodxxkO0KKK0OxxddddkO00KKKKK0OxddddkOOOxxddkOOO0KKK00    //    //\\n//    //    kkkO0KKK00Oxollcloolc:;:c:;:llcclooooollc;'..':dkOO00K0OOkxdoooddddoollodddodddddddolloddxxkkO00KKXXXKK000OkkxkO0KXXXKKK0OkkxxxxxkkkdoddxkOOO000KKKK00    //    //\\n//    //    0kxddxk0KKK0Okxddoooolc::::::;,;:ccc:;,,,,,;coxxkkOOOOkxdolooooooodxkkkOOkkkkkkOOO0000000KKKKKKKKKKK0000000KKKKKKKKK0OkxxxddxxxdddoddxkOO000000KKKKK0O    //    //\\n//    //    K0Okkdodxxk0K00Okxddoollllollc::cccc::::cclddddxxxxxxxxkkkOOOO00000K0000000OOOO00000000000KKKKKKKKKKKKKKKXXKKK0OOkkxxxxxxxxxxxxxkkOO000000KK0K00KKK0OO    //    //\\n//    //    KKK00OkkkxxxxkO00OxddxxxxxxdddddxdxxxxxxxxkkkkOO0000KK00000000KKK00KK00KKKKKKKKKKKKKKKKKKKKXXXXXKKKKKK000OOOOOkxxkkkkOOkkkkkO0OO0000000000OOOOOO00KK0O    //    //\\n//    //    XXXKK000OkkOkkkkkkOkxddxxkkkkOOOOOOOOOOOkkOOOO0000000KKKKK00000000KKKKKKKKKKKKKKKKKKKKKKK000000000000O0OOOO00OOO00OO00000000KKKK00O000OOOOOO000KKKKK00    //    //\\n//    //    XXXXKKKK000OkkO00kkxkkxxxxxxxkOO0KKKKK000OOOOO0000O0KK0KKK000000KKKKKKKKKKK00000000OOOOOOOOOO0000KKXXKKK00OOO000KKKKXKKXXKKKK00OOOOO00000KKK000KKKKKK0    //    //\\n//    //                                                                                                                                                              //    //\\n//    //                                                                                                                                                              //    //\\n//    //                                                                                                                                                              //    //\\n//    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    //\\n//                                                                                                                                                                          //\\n//                                                                                                                                                                          //\\n//                                                                                                                                                                          //\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\ncontract FORWARD is ERC1155Creator {\\n    constructor() ERC1155Creator(unicode\\\"James Jean X KILLSPENCER\u00ae Soccer Ball\\\", \\\"FORWARD\\\") {}\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/ERC1155Creator.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\ncontract ERC1155Creator is Proxy {\\n\\n    constructor(string memory name, string memory symbol) {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x6bf5ed59dE0E19999d264746843FF931c0133090;\\n        Address.functionDelegateCall(\\n            0x6bf5ed59dE0E19999d264746843FF931c0133090,\\n            abi.encodeWithSignature(\\\"initialize(string,string)\\\", name, symbol)\\n        );\\n    }\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n     function implementation() public view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function _implementation() internal override view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FORWARD", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x6bf5ed59de0e19999d264746843ff931c0133090", "SwarmSource": ""}