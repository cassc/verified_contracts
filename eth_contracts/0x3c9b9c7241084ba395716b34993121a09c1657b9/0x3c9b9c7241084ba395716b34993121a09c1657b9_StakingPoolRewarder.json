{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingPoolRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPoolRewarder.sol\\\";\\r\\nimport \\\"../libraries/TransferHelper.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StakingPoolRewarder\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @notice An upgradeable contract for releasing rewards based on a vesting schedule.\\r\\n * @dev Utilizes OpenZeppelin's upgradeable contracts for basic contract controls and math operations.\\r\\n *      It uses a reentrancy block to prevent reentrancy attacks.\\r\\n */\\r\\ncontract StakingPoolRewarder is OwnableUpgradeable, IStakingPoolRewarder {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a new vesting schedule is added for a user\\r\\n     * @dev The event signals the addition of a new vesting schedule, providing the address of the user, amount to be vested, start time, end time, and vesting step\\r\\n     * @param user The address of the user\\r\\n     * @param amount The total amount that will be vested\\r\\n     * @param startTime The start time of the vesting period\\r\\n     * @param endTime The end time of the vesting period\\r\\n     * @param step The interval at which vestable amounts are accumulated\\r\\n     */\\r\\n    event VestingScheduleAdded(address indexed user, uint256 amount, uint256 startTime, uint256 endTime, uint256 step);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the vesting settings are changed\\r\\n     * @dev The event signals the change in vesting settings, providing the new percentage allocated to vesting, new claim duration, and new claim step\\r\\n     * @param percentageToVestingSchedule The new percentage of rewards that will be locked in the vesting schedule\\r\\n     * @param claimDuration The new duration of claims\\r\\n     * @param claimStep The new interval at which claims can be made\\r\\n     */\\r\\n    event VestingSettingChanged(uint8 percentageToVestingSchedule, uint256 claimDuration, uint256 claimStep);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are vested by a user from a pool\\r\\n     * @dev The event signals the vesting of tokens, providing the user address, the pool id, and the amount vested\\r\\n     * @param user The address of the user\\r\\n     * @param poolId The id of the pool from which the tokens were vested\\r\\n     * @param amount The amount of tokens vested\\r\\n     */\\r\\n    event TokenVested(address indexed user, uint256 poolId, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Struct to represent a vesting schedule for a user\\r\\n     * @dev Defines a vesting schedule with the amount to be vested, start and end times, vesting step, and the last claim time\\r\\n     * @param amount Total amount to be vested over the complete period\\r\\n     * @param startTime Unix timestamp in seconds for the period start time\\r\\n     * @param endTime Unix timestamp in seconds for the period end time\\r\\n     * @param step Interval in seconds at which vestable amounts are accumulated\\r\\n     * @param lastClaimTime Unix timestamp in seconds for the last claim time\\r\\n     */\\r\\n    struct VestingSchedule {\\r\\n        uint128 amount;\\r\\n        uint32 startTime;\\r\\n        uint32 endTime;\\r\\n        uint32 step;\\r\\n        uint32 lastClaimTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of vesting schedules for each user per staking pool\\r\\n     * @dev Maps each user address to a mapping of pool ids to vesting schedules\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => VestingSchedule)) public vestingSchedules;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of claimable amounts for each user per staking pool\\r\\n     * @dev Maps each user address to a mapping of pool ids to claimable amounts\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => uint256)) public claimableAmounts;\\r\\n\\r\\n    /**\\r\\n     * @notice The address of the staking pools\\r\\n     * @dev The staking pool contract's address\\r\\n     */\\r\\n    address public stakingPools;\\r\\n\\r\\n    /**\\r\\n     * @notice The token to be used as rewards\\r\\n     * @dev The contract address of the ERC20 token to be used as rewards\\r\\n     */\\r\\n    address public rewardToken;\\r\\n\\r\\n    /**\\r\\n     * @notice The dispatcher of the rewards\\r\\n     * @dev The contract address of the reward dispatcher\\r\\n     */\\r\\n    address public rewardDispatcher;\\r\\n\\r\\n    /**\\r\\n     * @notice The percentage of the rewards to be locked in the vesting schedule\\r\\n     * @dev The proportion (out of 100) of rewards that will be vested over time\\r\\n     */\\r\\n    uint8 public percentageToVestingSchedule;\\r\\n\\r\\n    /**\\r\\n     * @notice The duration of the claims in seconds\\r\\n     * @dev The total duration of the vesting period\\r\\n     */\\r\\n    uint256 public claimDuration;\\r\\n\\r\\n    /**\\r\\n     * @notice The interval at which the claims can be made\\r\\n     * @dev The step (in seconds) at which the user can claim vested tokens\\r\\n     */\\r\\n    uint256 public claimStep;\\r\\n\\r\\n    /**\\r\\n     * @notice Flag to block reentrancy\\r\\n     * @dev Used as a guard to prevent reentrancy attacks\\r\\n     */\\r\\n    bool private locked;\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to block reentrancy attacks\\r\\n     * @dev Requires that the contract is not currently executing a state-changing external function call\\r\\n     */\\r\\n    modifier blockReentrancy() {\\r\\n        require(!locked, \\\"Reentrancy is blocked\\\");\\r\\n        locked = true;\\r\\n        _;\\r\\n        locked = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the StakingPoolRewarder contract\\r\\n     * @dev Initializes the contract with the given parameters. Requires that the addresses are not zero addresses.\\r\\n     * @param _stakingPools The address of the staking pools\\r\\n     * @param _rewardToken The token to be used as rewards\\r\\n     * @param _rewardDispatcher The dispatcher of the rewards\\r\\n     * @param _percentageToVestingSchedule The percentage of the rewards to be locked in the vesting schedule\\r\\n     * @param _claimDuration The duration of the claims in seconds\\r\\n     * @param _claimStep The interval at which the claims can be made\\r\\n     */\\r\\n    function __StakingPoolRewarder_init(\\r\\n        address _stakingPools,\\r\\n        address _rewardToken,\\r\\n        address _rewardDispatcher,\\r\\n        uint8 _percentageToVestingSchedule,\\r\\n        uint256 _claimDuration,\\r\\n        uint256 _claimStep\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n        require(_stakingPools != address(0), \\\"StakingPoolRewarder: stakingPools zero address\\\");\\r\\n        require(_rewardToken != address(0), \\\"StakingPoolRewarder: rewardToken zero address\\\");\\r\\n        require(_rewardDispatcher != address(0), \\\"StakingPoolRewarder: rewardDispatcher zero address\\\");\\r\\n\\r\\n        stakingPools = _stakingPools;\\r\\n        rewardToken = _rewardToken;\\r\\n        rewardDispatcher = _rewardDispatcher;\\r\\n\\r\\n        percentageToVestingSchedule = _percentageToVestingSchedule;\\r\\n        claimDuration = _claimDuration;\\r\\n        claimStep = _claimStep;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to allow only the staking pools to execute a function\\r\\n     * @dev Requires that the caller is the staking pools\\r\\n     */\\r\\n    modifier onlyStakingPools() {\\r\\n        require(msg.sender == stakingPools, \\\"StakingPoolRewarder: only StakingPools allowed to call\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the vesting setting\\r\\n     * @dev Allows the owner to change the percentage of the rewards that go to the vesting schedule and the duration and interval of the claims. Emits the VestingSettingChanged event.\\r\\n     * @param _percentageToVestingSchedule The new percentage of the rewards to be locked in the vesting schedule\\r\\n     * @param _claimDuration The new duration of the claims in seconds\\r\\n     * @param _claimStep The new interval at which the claims can be made\\r\\n     */\\r\\n    function updateVestingSetting(\\r\\n        uint8 _percentageToVestingSchedule,\\r\\n        uint256 _claimDuration,\\r\\n        uint256 _claimStep\\r\\n    ) external onlyOwner {\\r\\n        percentageToVestingSchedule = _percentageToVestingSchedule;\\r\\n        claimDuration = _claimDuration;\\r\\n        claimStep = _claimStep;\\r\\n\\r\\n        emit VestingSettingChanged(_percentageToVestingSchedule, _claimDuration, _claimStep);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the reward dispatcher\\r\\n     * @dev Allows the owner to change the address of the reward dispatcher. Requires that the new address is not a zero address.\\r\\n     * @param _rewardDispatcher The new address of the reward dispatcher\\r\\n     */\\r\\n    function setRewardDispatcher(address _rewardDispatcher) external onlyOwner {\\r\\n        require(_rewardDispatcher != address(0), \\\"StakingPoolRewarder: rewardDispatcher zero address\\\");\\r\\n        rewardDispatcher = _rewardDispatcher;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the vesting schedule for a user.\\r\\n     * @dev Updates the vesting schedule for a given user with new parameters. Emits a VestingScheduleAdded event.\\r\\n     * @param user Address of the user.\\r\\n     * @param poolId The id of the staking pool.\\r\\n     * @param amount Total amount to be vested over the period.\\r\\n     * @param startTime Unix timestamp in seconds for the period start time.\\r\\n     * @param endTime Unix timestamp in seconds for the period end time.\\r\\n     * @param step Interval in seconds at which vestable amounts are accumulated.\\r\\n     */\\r\\n    function updateVestingSchedule(\\r\\n        address user,\\r\\n        uint256 poolId,\\r\\n        uint256 amount,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        uint256 step\\r\\n    ) private {\\r\\n        require(user != address(0), \\\"StakingPoolRewarder: zero address\\\");\\r\\n        require(amount > 0, \\\"StakingPoolRewarder: zero amount\\\");\\r\\n        require(startTime < endTime, \\\"StakingPoolRewarder: invalid time range\\\");\\r\\n        require(step > 0 && endTime.sub(startTime) % step == 0, \\\"StakingPoolRewarder: invalid step\\\");\\r\\n\\r\\n        // Overflow checks\\r\\n        require(uint256(uint128(amount)) == amount, \\\"StakingPoolRewarder: amount overflow\\\");\\r\\n        require(uint256(uint32(startTime)) == startTime, \\\"StakingPoolRewarder: startTime overflow\\\");\\r\\n        require(uint256(uint32(endTime)) == endTime, \\\"StakingPoolRewarder: endTime overflow\\\");\\r\\n        require(uint256(uint32(step)) == step, \\\"StakingPoolRewarder: step overflow\\\");\\r\\n\\r\\n        vestingSchedules[user][poolId] = VestingSchedule({\\r\\n            amount: uint128(amount),\\r\\n            startTime: uint32(startTime),\\r\\n            endTime: uint32(endTime),\\r\\n            step: uint32(step),\\r\\n            lastClaimTime: uint32(startTime)\\r\\n        });\\r\\n\\r\\n        emit VestingScheduleAdded(user, amount, startTime, endTime, step);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the total reward for a user.\\r\\n     * @dev It calculates the total amount of reward that a user could claim at this moment. It includes withdrawableFromVesting, unvestedAmount, and claimableAmount. Overrides the function in the parent contract.\\r\\n     * @param user Address of the user.\\r\\n     * @param poolId The id of the staking pool.\\r\\n     * @return total The total reward amount that user could claim at this moment.\\r\\n     */\\r\\n    function calculateTotalReward(address user, uint256 poolId) external view override returns (uint256 total) {\\r\\n        (uint256 withdrawableFromVesting, , ) = _calculateWithdrawableFromVesting(user, poolId, block.timestamp);\\r\\n        uint256 claimableAmount = claimableAmounts[user][poolId];\\r\\n        uint256 unvestedAmount = _calculateUnvestedAmountAtCurrentStep(user, poolId, block.timestamp);\\r\\n        return withdrawableFromVesting.add(unvestedAmount).add(claimableAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the withdrawable reward for a user.\\r\\n     * @dev It calculates the total amount of reward that a user could withdraw at this moment. It includes withdrawableFromVesting and claimableAmount. Overrides the function in the parent contract.\\r\\n     * @param user Address of the user.\\r\\n     * @param poolId The id of the staking pool.\\r\\n     * @return total The total reward amount that user could withdraw at this moment.\\r\\n     */\\r\\n    function calculateWithdrawableReward(address user, uint256 poolId) external view override returns (uint256 total) {\\r\\n        (uint256 withdrawableFromVesting, , ) = _calculateWithdrawableFromVesting(user, poolId, block.timestamp);\\r\\n        uint256 claimableAmount = claimableAmounts[user][poolId];\\r\\n        return withdrawableFromVesting.add(claimableAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the amount withdrawable from vesting for a user.\\r\\n     * @dev Returns the amount that can be withdrawn from the vesting schedule for a given user at the current block timestamp.\\r\\n     * @param user Address of the user.\\r\\n     * @param poolId The id of the staking pool.\\r\\n     * @return amount The amount withdrawable from vesting at this moment.\\r\\n     */\\r\\n    function calculateWithdrawableFromVesting(address user, uint256 poolId) external view returns (uint256 amount) {\\r\\n        (uint256 withdrawable, , ) = _calculateWithdrawableFromVesting(user, poolId, block.timestamp);\\r\\n        return withdrawable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the amount withdrawable from vesting for a user.\\r\\n     * @dev Calculates the amount that can be withdrawn from the vesting schedule for a given user, the new claim time, and whether all amounts have been vested. If the amount or vesting schedule is zero, or the timestamp is before the start time or the current step time is before or equal to the last claim time, it returns zero. If all amounts have been vested, it returns the total amount to vest minus the amount already vested. If it's partially vested, it returns the amount to vest for the steps to vest.\\r\\n     * @param user Address of the user.\\r\\n     * @param poolId The id of the staking pool.\\r\\n     * @param timestamp Current timestamp.\\r\\n     * @return amount The amount withdrawable from vesting at this moment.\\r\\n     * @return newClaimTime The new claim time.\\r\\n     * @return allVested Whether all amounts have been vested.\\r\\n     */\\r\\n    function _calculateWithdrawableFromVesting(\\r\\n        address user,\\r\\n        uint256 poolId,\\r\\n        uint256 timestamp\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount,\\r\\n            uint256 newClaimTime,\\r\\n            bool allVested\\r\\n        )\\r\\n    {\\r\\n        VestingSchedule memory vestingSchedule = vestingSchedules[user][poolId];\\r\\n        if (vestingSchedule.amount == 0) return (0, 0, false);\\r\\n        if (timestamp <= uint256(vestingSchedule.startTime)) return (0, 0, false);\\r\\n\\r\\n        uint256 currentStepTime = MathUpgradeable.min(\\r\\n            timestamp\\r\\n            .sub(uint256(vestingSchedule.startTime))\\r\\n            .div(uint256(vestingSchedule.step))\\r\\n            .mul(uint256(vestingSchedule.step))\\r\\n            .add(uint256(vestingSchedule.startTime)),\\r\\n            uint256(vestingSchedule.endTime)\\r\\n        );\\r\\n\\r\\n        if (currentStepTime <= uint256(vestingSchedule.lastClaimTime)) return (0, 0, false);\\r\\n\\r\\n        uint256 totalSteps = uint256(vestingSchedule.endTime).sub(uint256(vestingSchedule.startTime)).div(\\r\\n            vestingSchedule.step\\r\\n        );\\r\\n\\r\\n        if (currentStepTime == uint256(vestingSchedule.endTime)) {\\r\\n            // All vested\\r\\n            uint256 stepsVested = uint256(vestingSchedule.lastClaimTime).sub(uint256(vestingSchedule.startTime)).div(\\r\\n                vestingSchedule.step\\r\\n            );\\r\\n            uint256 amountToVest = uint256(vestingSchedule.amount).sub(\\r\\n                uint256(vestingSchedule.amount).div(totalSteps).mul(stepsVested)\\r\\n            );\\r\\n            return (amountToVest, currentStepTime, true);\\r\\n        } else {\\r\\n            // Partially vested\\r\\n            uint256 stepsToVest = currentStepTime.sub(uint256(vestingSchedule.lastClaimTime)).div(vestingSchedule.step);\\r\\n            uint256 amountToVest = uint256(vestingSchedule.amount).div(totalSteps).mul(stepsToVest);\\r\\n            return (amountToVest, currentStepTime, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount of tokens that haven't vested at the current step for a specific user and pool.\\r\\n     * @dev This function uses the timestamp to identify the current step and returns the unvested amount of tokens.\\r\\n     * @param user The address of the user.\\r\\n     * @param poolId The id of the pool.\\r\\n     * @param timestamp The current timestamp.\\r\\n     * @return The unvested amount.\\r\\n     */\\r\\n    function _calculateUnvestedAmountAtCurrentStep(\\r\\n        address user,\\r\\n        uint256 poolId,\\r\\n        uint256 timestamp\\r\\n    ) private view returns (uint256) {\\r\\n        if (timestamp < uint256(vestingSchedules[user][poolId].startTime) || vestingSchedules[user][poolId].amount == 0)\\r\\n            return 0;\\r\\n        uint256 currentStepTime = MathUpgradeable.min(\\r\\n            timestamp\\r\\n            .sub(uint256(vestingSchedules[user][poolId].startTime))\\r\\n            .div(uint256(vestingSchedules[user][poolId].step))\\r\\n            .mul(uint256(vestingSchedules[user][poolId].step))\\r\\n            .add(uint256(vestingSchedules[user][poolId].startTime)),\\r\\n            uint256(vestingSchedules[user][poolId].endTime)\\r\\n        );\\r\\n        return _calculateUnvestedAmount(user, poolId, currentStepTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount of tokens that haven't vested at a given step time for a specific user and pool.\\r\\n     * @dev This function uses the stepTime to identify the current step and returns the unvested amount of tokens.\\r\\n     * @param user The address of the user.\\r\\n     * @param poolId The id of the pool.\\r\\n     * @param stepTime The step time.\\r\\n     * @return The unvested amount.\\r\\n     */\\r\\n    function _calculateUnvestedAmount(\\r\\n        address user,\\r\\n        uint256 poolId,\\r\\n        uint256 stepTime\\r\\n    ) private view returns (uint256) {\\r\\n        if (vestingSchedules[user][poolId].amount == 0) return 0;\\r\\n\\r\\n        uint256 totalSteps = uint256(vestingSchedules[user][poolId].endTime)\\r\\n        .sub(uint256(vestingSchedules[user][poolId].startTime))\\r\\n        .div(vestingSchedules[user][poolId].step);\\r\\n        uint256 stepsVested = stepTime.sub(uint256(vestingSchedules[user][poolId].startTime)).div(\\r\\n            vestingSchedules[user][poolId].step\\r\\n        );\\r\\n        return\\r\\n            uint256(vestingSchedules[user][poolId].amount).sub(\\r\\n                uint256(vestingSchedules[user][poolId].amount).div(totalSteps).mul(stepsVested)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to withdraw vested tokens for a specific user and pool at a given timestamp.\\r\\n     * @dev This function calculates the amount that can be withdrawn, updates the vesting schedule if necessary, and returns the withdrawn amount.\\r\\n     * @param user The address of the user.\\r\\n     * @param poolId The id of the pool.\\r\\n     * @param timestamp The timestamp at which to perform the withdrawal.\\r\\n     * @return The amount of tokens withdrawn.\\r\\n     */\\r\\n    function _withdrawFromVesting(\\r\\n        address user,\\r\\n        uint256 poolId,\\r\\n        uint256 timestamp\\r\\n    ) private returns (uint256) {\\r\\n        (uint256 lastVestedAmount, uint256 newClaimTime, bool allVested) = _calculateWithdrawableFromVesting(\\r\\n            user,\\r\\n            poolId,\\r\\n            timestamp\\r\\n        );\\r\\n        if (lastVestedAmount > 0) {\\r\\n            if (allVested) {\\r\\n                delete vestingSchedules[user][poolId];\\r\\n            } else {\\r\\n                vestingSchedules[user][poolId].lastClaimTime = uint32(newClaimTime);\\r\\n            }\\r\\n        }\\r\\n        return lastVestedAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Handles the reward event for a specific user and pool.\\r\\n     * @dev This function is called when a user earns rewards from staking in a pool. It simply calls the internal _onReward function.\\r\\n     * @param poolId The id of the pool.\\r\\n     * @param user The address of the user.\\r\\n     * @param amount The amount of tokens rewarded.\\r\\n     * @param entryTime The timestamp at which the reward was earned.\\r\\n     */\\r\\n    function onReward(\\r\\n        uint256 poolId,\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 entryTime\\r\\n    ) external override onlyStakingPools {\\r\\n        _onReward(poolId, user, amount, entryTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function that handles the reward event for a specific user and pool.\\r\\n     * @dev This function calculates the vested and unvested amounts of the reward, updates the vesting schedule and claimable amounts, and emits a TokenVested event.\\r\\n     * @param poolId The id of the pool.\\r\\n     * @param user The address of the user.\\r\\n     * @param amount The amount of tokens rewarded.\\r\\n     * @param entryTime The timestamp at which the reward was earned.\\r\\n     */\\r\\n    function _onReward(\\r\\n        uint256 poolId,\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 entryTime\\r\\n    ) private blockReentrancy {\\r\\n        require(user != address(0), \\\"StakingPoolRewarder: zero address\\\");\\r\\n\\r\\n        uint256 lastVestedAmount = _withdrawFromVesting(user, poolId, entryTime);\\r\\n\\r\\n        uint256 newUnvestedAmount = 0;\\r\\n        uint256 newVestedAmount = 0;\\r\\n        if (amount > 0) {\\r\\n            newUnvestedAmount = amount.mul(uint256(percentageToVestingSchedule)).div(100);\\r\\n            newVestedAmount = amount.sub(newUnvestedAmount);\\r\\n        }\\r\\n\\r\\n        if (newUnvestedAmount > 0) {\\r\\n            uint256 lastUnvestedAmount = _calculateUnvestedAmountAtCurrentStep(user, poolId, entryTime);\\r\\n            updateVestingSchedule(\\r\\n                user,\\r\\n                poolId,\\r\\n                newUnvestedAmount.add(lastUnvestedAmount),\\r\\n                entryTime,\\r\\n                entryTime.add(claimDuration),\\r\\n                claimStep\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 newEntryVestedAmount = _withdrawFromVesting(user, poolId, block.timestamp);\\r\\n        uint256 totalVested = lastVestedAmount.add(newVestedAmount).add(newEntryVestedAmount);\\r\\n        claimableAmounts[user][poolId] = claimableAmounts[user][poolId].add(totalVested);\\r\\n        emit TokenVested(user, poolId, totalVested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim vested rewards from a specific pool.\\r\\n     * @dev This function checks if there are claimable rewards, transfers the rewards to the user, and returns the claimed amount.\\r\\n     * @param poolId The id of the pool.\\r\\n     * @param user The address of the user.\\r\\n     * @return The amount of tokens claimed.\\r\\n     */\\r\\n    function claimVestedReward(uint256 poolId, address user)\\r\\n        external\\r\\n        override\\r\\n        onlyStakingPools\\r\\n        blockReentrancy\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(poolId > 0, \\\"StakingPoolRewarder: poolId is 0\\\");\\r\\n        uint256 claimableAmount = claimableAmounts[user][poolId];\\r\\n        claimableAmounts[user][poolId] = 0;\\r\\n        if (claimableAmount > 0) {\\r\\n            TransferHelper.safeTransferFrom(rewardToken, rewardDispatcher, user, claimableAmount);\\r\\n        }\\r\\n\\r\\n        return claimableAmount;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPoolRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IStakingPoolRewarder interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for calculating and distributing staking pool rewards\\r\\n */\\r\\ninterface IStakingPoolRewarder {\\r\\n    /**\\r\\n     * @notice Calculate the total amount of reward tokens for the specified user and pool ID\\r\\n     * @dev Calculates the total amount of reward tokens for the specified user and pool ID\\r\\n     * @param user The address of the user to calculate rewards for\\r\\n     * @param poolId The ID of the staking pool to calculate rewards for\\r\\n     * @return The total amount of reward tokens for the specified user and pool ID\\r\\n     */\\r\\n    function calculateTotalReward(address user, uint256 poolId) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     * @dev Calculates the amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     * @param user The address of the user to calculate rewards for\\r\\n     * @param poolId The ID of the staking pool to calculate rewards for\\r\\n     * @return The amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     */\\r\\n    function calculateWithdrawableReward(address user, uint256 poolId) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Update the vesting schedule and claimable amounts for the specified user and pool ID\\r\\n     * @dev Calculates and updates the user's vested and unvested token amounts based on their staking activity, and adds any vested tokens to the user's claimable amounts.\\r\\n     * @param poolId The ID of the staking pool to update vesting schedule and claimable amounts for\\r\\n     * @param user The address of the user to update vesting schedule and claimable amounts for\\r\\n     * @param amount The amount of reward tokens earned by the user\\r\\n     * @param entryTime The timestamp of the user's entry into the staking pool\\r\\n     */\\r\\n    function onReward(uint256 poolId, address user, uint256 amount, uint256 entryTime) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Claim vested reward tokens for the specified user and pool ID\\r\\n     * @dev Claims vested reward tokens for the specified user and pool ID\\r\\n     * @param poolId The ID of the staking pool to claim rewards from\\r\\n     * @param user The address of the user to claim rewards for\\r\\n     * @return The amount of vested reward tokens claimed by the specified user and pool ID\\r\\n     */\\r\\n    function claimVestedReward(uint256 poolId, address user) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title TransferHelper library\\r\\n * @author DeOrderBook\\r\\n * @custom:license Adapted from Uniswap's V3 TransferHelper.sol\\r\\n *\\r\\n *                Copyright (c) 2023 DeOrderBook\\r\\n *\\r\\n *           This program is free software; you can redistribute it and/or\\r\\n *           modify it under the terms of the GNU General Public License\\r\\n *           as published by the Free Software Foundation; either version 2\\r\\n *           of the License, or (at your option) any later version.\\r\\n *\\r\\n *           This program is distributed in the hope that it will be useful,\\r\\n *           but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n *           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n *           GNU General Public License for more details.\\r\\n *\\r\\n *           You should have received a copy of the GNU General Public License\\r\\n *           along with this program; if not, write to the Free Software\\r\\n *           Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\\r\\n *\\r\\n * @notice Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\n * @dev This library provides safe wrappers around ERC20 token operations and ETH transfers, checking for success and throwing appropriate errors if needed.\\r\\n */\\r\\nlibrary TransferHelper {\\r\\n    /**\\r\\n     * @notice Approve spending of an ERC20 token by another address\\r\\n     * @dev Approves spending of an ERC20 token by another address, checking the return value and handling potential errors\\r\\n     * @param token The address of the ERC20 token\\r\\n     * @param to The address to approve spending for\\r\\n     * @param value The amount to approve spending for\\r\\n     */\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ERC20 tokens to another address\\r\\n     * @dev Transfers ERC20 tokens to another address, checking the return value and handling potential errors\\r\\n     * @param token The address of the ERC20 token\\r\\n     * @param to The address to transfer tokens to\\r\\n     * @param value The amount of tokens to transfer\\r\\n     */\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ERC20 tokens from one address to another\\r\\n     * @dev Transfers ERC20 tokens from one address to another, checking the return value and handling potential errors\\r\\n     * @param token The address of the ERC20 token\\r\\n     * @param from The address to transfer tokens from\\r\\n     * @param to The address to transfer tokens to\\r\\n     * @param value The amount of tokens to transfer\\r\\n     */\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ETH to another address\\r\\n     * @dev Transfers ETH to another address, checking for success and handling potential errors, such as out-of-gas or revert\\r\\n     * @param to The address to transfer ETH to\\r\\n     * @param value The amount of ETH to transfer\\r\\n     */\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"percentageToVestingSchedule\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimStep\",\"type\":\"uint256\"}],\"name\":\"VestingSettingChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPools\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDispatcher\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentageToVestingSchedule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_claimDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimStep\",\"type\":\"uint256\"}],\"name\":\"__StakingPoolRewarder_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"calculateTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawableFromVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimVestedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageToVestingSchedule\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDispatcher\",\"type\":\"address\"}],\"name\":\"setRewardDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentageToVestingSchedule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_claimDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimStep\",\"type\":\"uint256\"}],\"name\":\"updateVestingSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"step\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastClaimTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingPoolRewarder", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}