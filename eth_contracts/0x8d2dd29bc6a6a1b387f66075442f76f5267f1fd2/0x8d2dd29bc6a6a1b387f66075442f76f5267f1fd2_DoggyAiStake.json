{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IPreSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface IpreSale{\\r\\n    function getUserToken(address userAddress) external view returns (uint);\\r\\n    function transferToStaking(uint amount) external returns(bool);\\r\\n    function getEndTime() external view returns(uint);\\r\\n}\"\r\n    },\r\n    \"contracts/stakingTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IPreSale.sol\\\";\\r\\n\\r\\ncontract DoggyAiStake is Ownable, ReentrancyGuard {\\r\\n    IERC20 public stakingToken;\\r\\n    uint256 public minStake = 10 * 10 ** 18;\\r\\n    uint256 public stakePeriod;\\r\\n    uint256 public totalStaked;\\r\\n    uint public constantTotalFunds;\\r\\n    uint public totalFund;\\r\\n    uint public rewardRate;\\r\\n    IpreSale preSaleData;\\r\\n\\r\\n    event Staked(address indexed, uint256 amount);\\r\\n    event Claimed(address indexed, uint256 amount);\\r\\n    event Withdrawn(address indexed, uint256 amount);\\r\\n    event PoolRefilled(\\r\\n        address indexed,\\r\\n        uint256 amount,\\r\\n        uint256 newStakePeriod,\\r\\n        uint256 amountMinStake\\r\\n    );\\r\\n\\r\\n    struct Stake {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        uint256 lastClaimTimestamp;\\r\\n    }\\r\\n    struct RewardRateChange {\\r\\n        uint256 timestamp;\\r\\n        uint256 rewardRate;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    RewardRateChange[]public rewardRateHistory;\\r\\n    mapping(address => Stake[]) public stakes;\\r\\n    mapping(address => uint256) public userTotalStaked;\\r\\n\\r\\n    function _checkRewardRate() internal {\\r\\n        if (totalStaked == 0) {\\r\\n            rewardRate = (totalFund / stakePeriod) / (minStake / 1e18) ;\\r\\n            rewardRateHistory.push(RewardRateChange({timestamp: block.timestamp + 1, rewardRate: rewardRate,totalStaked: minStake }));\\r\\n        } else {\\r\\n            rewardRate = (totalFund / stakePeriod) / (totalStaked / 1e18);\\r\\n            rewardRateHistory.push(RewardRateChange({timestamp: block.timestamp + 1, rewardRate: rewardRate,totalStaked: totalStaked}));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address DoggyAi,\\r\\n        address initialOwner,\\r\\n        uint256 _stakePeriod,\\r\\n        uint amountToFill,\\r\\n        uint _timestamp,\\r\\n        address _preSaleData\\r\\n    ) Ownable(initialOwner) {\\r\\n        stakingToken = IERC20(DoggyAi);\\r\\n        stakePeriod = _stakePeriod * 1 days;\\r\\n        constantTotalFunds = amountToFill;\\r\\n        totalFund = constantTotalFunds;\\r\\n        rewardRate = ((totalFund /  stakePeriod) / (minStake / 1e18));\\r\\n        preSaleData  =  IpreSale(_preSaleData);\\r\\n        rewardRateHistory.push(RewardRateChange({timestamp: _timestamp, rewardRate: rewardRate, totalStaked: minStake }));\\r\\n    }\\r\\n\\r\\n    function getStakes(\\r\\n        address user,\\r\\n        uint stakesIndex\\r\\n    ) public view returns (Stake memory) {\\r\\n        return stakes[user][stakesIndex];\\r\\n    }\\r\\n\\r\\n    function setPresale(address _preSaleData) public onlyOwner{\\r\\n        preSaleData = IpreSale(_preSaleData);\\r\\n    }\\r\\n\\r\\n    function calculateReward(\\r\\n        address userAddress,\\r\\n        uint256 stakeIndex\\r\\n    ) public view returns (uint256) {\\r\\n        Stake storage userStake = stakes[userAddress][stakeIndex];\\r\\n        uint rewardSum;\\r\\n        uint8 triger;\\r\\n        for(uint i; i<rewardRateHistory.length; i++){\\r\\n            unchecked{\\r\\n                uint elapsedSeconds;\\r\\n                if(rewardRateHistory[i].timestamp > userStake.lastClaimTimestamp){\\r\\n                triger++;\\r\\n                    if(triger == 1){\\r\\n                    uint ternarResult = i == rewardRateHistory.length - 1? block.timestamp + 1: rewardRateHistory[i + 1].timestamp;\\r\\n                    elapsedSeconds =  ternarResult - rewardRateHistory[i].timestamp;\\r\\n                    uint rewardRateAct = (rewardRateHistory[i].rewardRate) * ((userStake.amount / (rewardRateHistory[i].totalStaked / 1e18))) / 1e18; \\r\\n                    rewardSum += (userStake.amount * elapsedSeconds * rewardRateAct) / 1e18;\\r\\n                    } else if(i == rewardRateHistory.length - 1){\\r\\n                    elapsedSeconds = block.timestamp + 1 - rewardRateHistory[i].timestamp;\\r\\n                    uint rewardRateAct = (rewardRateHistory[i].rewardRate) * ((userStake.amount / (rewardRateHistory[i].totalStaked / 1e18))) / 1e18; \\r\\n                    rewardSum += (userStake.amount * elapsedSeconds * rewardRateAct) / 1e18;\\r\\n                    } else {\\r\\n                    elapsedSeconds = rewardRateHistory[i].timestamp - rewardRateHistory[i - 1].timestamp;\\r\\n                    uint rewardRateAct = (rewardRateHistory[i].rewardRate) * ((userStake.amount / (rewardRateHistory[i].totalStaked / 1e18))) / 1e18; \\r\\n                    rewardSum += (userStake.amount * elapsedSeconds * rewardRateAct) / 1e18;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n    return rewardSum;\\r\\n    }\\r\\n\\r\\n    function getUserStakes(\\r\\n        address userAddress\\r\\n    ) external view returns (Stake[] memory userStakes) {\\r\\n        return stakes[userAddress];\\r\\n    }\\r\\n\\r\\n    function setNewRewardToken(address newTokenAddress) external onlyOwner{\\r\\n        stakingToken = IERC20(newTokenAddress);\\r\\n    }\\r\\n    \\r\\n    function setStakers(address[] memory _stakerAddress, uint[] memory _amount, uint[] memory timestamp) public onlyOwner{\\r\\n        require(_stakerAddress.length == _amount.length && _amount.length == timestamp.length, \\\"All arrays length should be equal\\\");\\r\\n        for(uint i; i<_stakerAddress.length; i++){\\r\\n            stakes[_stakerAddress[i]].push(Stake(_amount[i], timestamp[i], timestamp[i]));\\r\\n            userTotalStaked[_stakerAddress[i]] += _amount[i];\\r\\n            totalStaked += _amount[i];\\r\\n            rewardRate = (totalFund / stakePeriod) / (totalStaked / 1e18);\\r\\n            rewardRateHistory.push(RewardRateChange({timestamp: timestamp[i] + 1, rewardRate: rewardRate,totalStaked: totalStaked}));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferPool() public onlyOwner{\\r\\n        stakingToken.transfer(owner(), totalFund);\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) public {\\r\\n        require(\\r\\n            _amount >= minStake,\\r\\n            \\\"The amount must be greater than minimum 10 tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            preSaleData.transferToStaking(_amount),\\r\\n            \\\"Token transfer failed\\\"\\r\\n        );\\r\\n        require(totalStaked + _amount <= totalFund, \\\"You can't stake above than total fund\\\");\\r\\n        stakes[msg.sender].push(\\r\\n            Stake(_amount, block.timestamp, block.timestamp)\\r\\n        );\\r\\n        totalStaked += _amount;\\r\\n        userTotalStaked[msg.sender] += _amount;\\r\\n        emit Staked(msg.sender, _amount);\\r\\n        _checkRewardRate();\\r\\n    }\\r\\n\\r\\n    function calculatePoolPercentage() external view returns (uint256) {\\r\\n        return (totalFund / constantTotalFunds) * 100;\\r\\n    }\\r\\n\\r\\n    function claimReward(uint256 stakeIndex) public {\\r\\n        Stake storage userStake = stakes[msg.sender][stakeIndex];\\r\\n        uint256 rewardAmount = calculateReward(msg.sender, stakeIndex);\\r\\n        require(rewardAmount > 0, \\\"No reward available\\\");\\r\\n        require(rewardAmount <= totalFund, \\\"Not enough funds in contract\\\");\\r\\n        userStake.lastClaimTimestamp = block.timestamp;\\r\\n\\r\\n        require(\\r\\n            stakingToken.transfer(msg.sender, rewardAmount),\\r\\n            \\\"Token transfer failed\\\"\\r\\n        );\\r\\n        totalFund -= rewardAmount;\\r\\n        _checkRewardRate();\\r\\n        emit Claimed(msg.sender, rewardAmount);\\r\\n    }\\r\\n\\r\\n    function claimAllRewards() external nonReentrant{\\r\\n        require(block.timestamp >= preSaleData.getEndTime(), \\\"Early claim is not allowed\\\");\\r\\n        Stake[] memory userStakes = stakes[msg.sender];\\r\\n        for (uint256 i; i < userStakes.length; i++) {\\r\\n            claimReward(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimAndStake() public nonReentrant  {\\r\\n        require(block.timestamp >= preSaleData.getEndTime(), \\\"Early claim is not allowed\\\");\\r\\n        uint reward;\\r\\n        for (uint256 i; i < stakes[msg.sender].length; i++) {\\r\\n            reward += calculateReward(msg.sender, i);\\r\\n            require(reward >= minStake, \\\"Reward is too less to stake\\\");\\r\\n            require(reward > 0, \\\"No reward available\\\");\\r\\n            require(\\r\\n                totalStaked + reward <= totalFund,\\r\\n                \\\"Not enough funds in contract\\\"\\r\\n            );\\r\\n        }\\r\\n        stakes[msg.sender].push(\\r\\n                Stake(reward, block.timestamp, block.timestamp)\\r\\n            );\\r\\n        totalFund -= reward;\\r\\n        totalStaked += reward;\\r\\n        userTotalStaked[msg.sender] += reward;\\r\\n        _checkRewardRate();\\r\\n    }\\r\\n\\r\\n    function withdraw() public nonReentrant {\\r\\n        require(block.timestamp >= preSaleData.getEndTime(), \\\"Early claim is not allowed\\\");\\r\\n        Stake[] storage userStake = stakes[msg.sender];\\r\\n        for (uint i; i < userStake.length; i++) {\\r\\n            uint256 rewardAmount = calculateReward(msg.sender, i);\\r\\n            require(\\r\\n                stakingToken.transfer(\\r\\n                    msg.sender,\\r\\n                    userStake[i].amount + rewardAmount\\r\\n                ),\\r\\n                \\\"Token transfer failed\\\"\\r\\n            );\\r\\n            totalStaked -= userStake[i].amount;\\r\\n            userTotalStaked[msg.sender] -= userStake[i].amount;\\r\\n            totalFund -= rewardAmount;\\r\\n            emit Withdrawn(msg.sender, userStake[i].amount + rewardAmount);\\r\\n            delete stakes[msg.sender];\\r\\n        }\\r\\n        _checkRewardRate();\\r\\n    }\\r\\n\\r\\n    function refillPool(\\r\\n        uint256 amountToRefill,\\r\\n        uint256 newStakePeriod,\\r\\n        uint256 newMinStake\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            newStakePeriod > 0,\\r\\n            \\\"New stake period should be greater than 0\\\"\\r\\n        );\\r\\n        require(amountToRefill > 0, \\\"Amount to refill must be greater than 0\\\");\\r\\n        require(\\r\\n            stakingToken.transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amountToRefill\\r\\n            ),\\r\\n            \\\"Your transaction is not valid\\\"\\r\\n        );\\r\\n        stakePeriod = newStakePeriod * 1 days;\\r\\n        setMinStake(minStake);\\r\\n        constantTotalFunds = amountToRefill + totalFund;\\r\\n        totalFund = constantTotalFunds;\\r\\n        _checkRewardRate();\\r\\n        emit PoolRefilled(\\r\\n            msg.sender,\\r\\n            amountToRefill,\\r\\n            newStakePeriod,\\r\\n            newMinStake\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinStake(uint256 newMinStake) public onlyOwner {\\r\\n        minStake = newMinStake;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DoggyAi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_preSaleData\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinStake\",\"type\":\"uint256\"}],\"name\":\"PoolRefilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculatePoolPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"constantTotalFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakesIndex\",\"type\":\"uint256\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DoggyAiStake.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DoggyAiStake.Stake[]\",\"name\":\"userStakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRefill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"refillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRateHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"setNewRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_preSaleData\",\"type\":\"address\"}],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakerAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamp\",\"type\":\"uint256[]\"}],\"name\":\"setStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DoggyAiStake", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fa8964243dd24c816c291ae7e7004ab5692dfa01000000000000000000000000785135f4d46fcd4b866783483112313d22000e4200000000000000000000000000000000000000000000000000000000000002da00000000000000000000000000000000000000002c9717ab03d6e9aee8000000000000000000000000000000000000000000000000000000000000006661c89b0000000000000000000000009dd34a2980d4c29efee4298346b172f7892c3dfe", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}