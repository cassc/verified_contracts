{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev The contract has an owner address, and provides basic authorization control whitch\\r\\n * simplifies the implementation of user permissions. This contract is based on the source code at:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\\r\\n */\\r\\ncontract Ownable\\r\\n{\\r\\n\\r\\n  /**\\r\\n   * @dev Error constants.\\r\\n   */\\r\\n  string public constant NOT_CURRENT_OWNER = \\\"018001\\\";\\r\\n  string public constant CANNOT_TRANSFER_TO_ZERO_ADDRESS = \\\"018002\\\";\\r\\n\\r\\n  /**\\r\\n   * @dev Current owner address.\\r\\n   */\\r\\n  address public owner;\\r\\n\\r\\n  /**\\r\\n   * @dev An event which is triggered when the owner is changed.\\r\\n   * @param previousOwner The address of the previous owner.\\r\\n   * @param newOwner The address of the new owner.\\r\\n   */\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\\r\\n   */\\r\\n  constructor()\\r\\n  {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner()\\r\\n  {\\r\\n    require(msg.sender == owner, NOT_CURRENT_OWNER);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(owner, address(0));\\r\\n        owner = address(0);\\r\\n    }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param _newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function transferOwnership(\\r\\n    address _newOwner\\r\\n  )\\r\\n    public\\r\\n    onlyOwner\\r\\n  {\\r\\n    require(_newOwner != address(0), CANNOT_TRANSFER_TO_ZERO_ADDRESS);\\r\\n    emit OwnershipTransferred(owner, _newOwner);\\r\\n    owner = _newOwner;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function subwithlesszero(uint256 a,uint256 b) internal pure returns (uint256)\\r\\n    {\\r\\n        if(b\\u003ea)\\r\\n            return 0;\\r\\n        else\\r\\n            return a-b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransferBNB(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\u0027TransferHelper: BNB_TRANSFER_FAILED\\u0027);\\r\\n    }\\r\\n}\\r\\n\"},\"ZusToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity \\u003e=0.6.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IRouter\\r\\n{\\r\\n     function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract AutoBuyPool \\r\\n{\\r\\n    address _router=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address _weth=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address _token;\\r\\n    address _owner;\\r\\n    address _feeowner=0x1e80051014CbeE4A30a01d77F54b75a2CDc59E44;\\r\\n    constructor(address token,address owner)\\r\\n    {\\r\\n        _token=token;\\r\\n        _owner=owner;\\r\\n        IERC20(_token).approve(_router, 1e40);\\r\\n        IERC20(_weth).approve(_router, 1e40);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerA \\r\\n    {\\r\\n        require(msg.sender==_owner || msg.sender==_token,\\\"req\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setFeeowner(address owner) public onlyOwnerA\\r\\n    {\\r\\n        _feeowner= owner;\\r\\n    }\\r\\n\\r\\n    function AutoSellAll() public onlyOwnerA\\r\\n    {\\r\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\r\\n        if(balance \\u003e1)\\r\\n          AutoSell(balance);\\r\\n    }\\r\\n\\r\\n    function AutoSell(uint256 amount) private\\r\\n    {\\r\\n         uint256 balance = IERC20(_token).balanceOf(address(this));\\r\\n         if(amount \\u003e balance)\\r\\n            amount=balance;\\r\\n       \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0]= _token;\\r\\n        path[1]= _weth;\\r\\n        if(amount \\u003e 0)\\r\\n          IRouter(_router).swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, _owner, 1e40); \\r\\n    }\\r\\n\\r\\n    function AutoSellB(uint256 amount) public onlyOwnerA\\r\\n    {\\r\\n        if(amount \\u003e 1)\\r\\n            AutoSell(amount);\\r\\n    }\\r\\n \\r\\n    function AutoBuyAtFirst() public onlyOwnerA\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0]= _weth;\\r\\n        path[1]= _token;\\r\\n        uint256 balance = address(this).balance;\\r\\n        address to=0xfa88b122Dd442cEBA0c54362151d61caBc11fE82;\\r\\n        IRouter(_router).swapExactETHForTokensSupportingFeeOnTransferTokens{value : balance}(0, path,to , 1e40) ;\\r\\n    }\\r\\n\\r\\n    function TakeOutEth(address payable target,uint256 amount) public onlyOwnerA \\r\\n    {\\r\\n        target.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function charge() payable public\\r\\n    {\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n contract ZusToken is Ownable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n \\r\\n    string  _name=\\\"ZUS\\\";\\r\\n    string  _symbol=\\\"ZUS\\\";\\r\\n    uint8  _decimals=12;\\r\\n    uint256 _totalsupply;\\r\\n \\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping(address=\\u003euint256) _balances;\\r\\n    mapping(address=\\u003ebool) _ex;\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    bool allowTrade=false;\\r\\n    bool FirstbuyExecuted=false;\\r\\n    uint256 startblock;\\r\\n    address _ammpool;\\r\\n    uint256 _feepct=10;\\r\\n    uint256 _buyfee=10;\\r\\n    uint256 _sellfee=10;\\r\\n    address _feeowner;\\r\\n    AutoBuyPool _autopool;\\r\\n    mapping(uint256=\\u003eaddress) public _autopools;\\r\\n    uint256 public createdautopool;\\r\\n\\r\\n    bool raiseopen=false;\\r\\n    bool decreseopen=false;\\r\\n\\r\\n    uint256 randseed;\\r\\n \\r\\n  \\r\\n    constructor( )\\r\\n    {\\r\\n        _feeowner=0x63F237A09D1928Bd2bA157F6212F07aef83a0ba0;\\r\\n        _ex[msg.sender]=true;\\r\\n        _ex[0xfa88b122Dd442cEBA0c54362151d61caBc11fE82]=true;\\r\\n        _ex[0x2E592D76f04305032E46adDC3F6d080B52fd5bb0]=true;\\r\\n        _balances[msg.sender] = 42e24;\\r\\n        _totalsupply=42e24;\\r\\n        emit Transfer(address(0), msg.sender, 42e24);\\r\\n    }\\r\\n\\r\\n    function openRaise(bool ok) public onlyOwner \\r\\n    {\\r\\n        raiseopen=ok;\\r\\n    }\\r\\n\\r\\n    function openDecrease(bool ok) public onlyOwner \\r\\n    {\\r\\n        decreseopen=ok;\\r\\n    }\\r\\n\\r\\n    function CreateAutoPool() public onlyOwner \\r\\n    {\\r\\n        if(address(_autopool)== address(0))\\r\\n        {\\r\\n             _autopool = new AutoBuyPool(address(this),msg.sender);\\r\\n            _ex[address(_autopool)]=true;\\r\\n        }\\r\\n           \\r\\n        else{\\r\\n                \\r\\n                AutoBuyPool apool =  new AutoBuyPool(address(this),msg.sender);\\r\\n                _autopools[createdautopool] =  address(apool);\\r\\n                _ex[address(apool)]=true;\\r\\n                createdautopool ++;\\r\\n\\r\\n                _balances[msg.sender] = _balances[msg.sender].sub(14e22);\\r\\n                _balances[address(apool)] = _balances[address(apool)].add(14e22);\\r\\n                emit Transfer(msg.sender, address(apool), 14e22);\\r\\n            }\\r\\n    }\\r\\n    function getAutoPool() public view returns(address)\\r\\n    {\\r\\n        return address(_autopool);\\r\\n    }\\r\\n    function setEx(address user,bool ok) public onlyOwner \\r\\n    {\\r\\n        _ex[user]=ok;\\r\\n    }\\r\\n\\r\\n    function setAmmpool(address ammpool) public onlyOwner \\r\\n    {\\r\\n        _ammpool = ammpool;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 buyfee,uint256 sellfee,uint256 transferfee) public onlyOwner \\r\\n    {\\r\\n        _buyfee=buyfee;\\r\\n        _sellfee=sellfee;\\r\\n        _feepct=transferfee;\\r\\n    }\\r\\n\\r\\n    function startTrade() public onlyOwner \\r\\n    {\\r\\n        _autopool.AutoBuyAtFirst();\\r\\n        allowTrade=true;\\r\\n    }\\r\\n \\r\\n    function name() public view  returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public  view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view  returns (uint256) {\\r\\n        return _totalsupply;\\r\\n    }\\r\\n\\r\\n \\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view  returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n \\r\\n    function allowance(address owner, address spender) public view  returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public  returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {\\r\\n         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        _transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   function transfer(address recipient, uint256 amount) public  returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burnFrom(address sender, uint256 amount) public   returns (bool)\\r\\n    {\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        _burn(sender,amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public  returns (bool)\\r\\n    {\\r\\n        _burn(msg.sender,amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function _burn(address sender,uint256 tAmount) private\\r\\n    {\\r\\n         require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n        _balances[address(0)] = _balances[address(0)].add(tAmount);\\r\\n         emit Transfer(sender, address(0), tAmount);\\r\\n    }\\r\\n\\r\\n    function rand(uint256 _length,address sender ) private returns(uint256) {\\r\\n        randseed++;\\r\\n        uint256 random1 = uint256(keccak256(abi.encodePacked(sender,block.coinbase, randseed)));\\r\\n        return  random1 % _length;\\r\\n    }\\r\\n\\r\\n    function randAddress(address sender) private  returns(address)\\r\\n    {\\r\\n        randseed++;\\r\\n        uint160 rr=uint160(uint256(keccak256(abi.encodePacked(sender, randseed,block.timestamp))));\\r\\n        address random1 = address(rr);\\r\\n        return random1;\\r\\n    }\\r\\n\\r\\n    function getRandPool() public returns(address)\\r\\n    {\\r\\n        uint256 cc= rand(createdautopool,msg.sender);\\r\\n        return _autopools[cc];\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e= 3,\\\"minamount\\\");\\r\\n        if(amount== _balances[sender])\\r\\n            amount=amount.sub(1);\\r\\n\\r\\n        _balances[sender]= _balances[sender].sub(amount);\\r\\n        uint256 toamount=amount;\\r\\n        if(!_ex[sender] \\u0026\\u0026 !_ex[recipient])\\r\\n        {\\r\\n            require(allowTrade,\\\"not start\\\");\\r\\n            address pool = address(_autopool);\\r\\n            if(sender==_ammpool)\\r\\n            {\\r\\n                uint256 fee= amount.mul(_buyfee).div(1000);\\r\\n                toamount= toamount.sub(fee);\\r\\n                _balances[pool]= _balances[pool].add(fee);\\r\\n                emit Transfer(sender, pool, fee);\\r\\n            }\\r\\n            else if(recipient==_ammpool)\\r\\n            {\\r\\n                if(decreseopen)\\r\\n                {\\r\\n                    address poolE = getRandPool();\\r\\n                    AutoBuyPool(poolE).AutoSellB(toamount.mul(60).div(100));\\r\\n                }\\r\\n                uint256 fee= amount.mul(_sellfee).div(1000);\\r\\n                toamount= toamount.sub(fee);\\r\\n                _balances[pool]= _balances[pool].add(fee);\\r\\n                emit Transfer(sender, pool, fee);\\r\\n                toamount=toamount.sub(2);\\r\\n\\r\\n                address air1= randAddress(sender);\\r\\n                _balances[air1]= _balances[air1].add(1);\\r\\n                emit Transfer(sender, air1, 1);\\r\\n\\r\\n                address air2= randAddress(sender);\\r\\n                _balances[air2]= _balances[air2].add(1);\\r\\n                emit Transfer(sender, air2, 1);\\r\\n                _autopool.AutoSellAll();\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                uint256 fee= amount.mul(_feepct).div(1000);\\r\\n                toamount= toamount.sub(fee);\\r\\n                _balances[_feeowner]= _balances[_feeowner].add(fee);\\r\\n                emit Transfer(sender, _feeowner, fee);\\r\\n                _autopool.AutoSellAll();\\r\\n                toamount=toamount.sub(2);\\r\\n                address air1= randAddress(sender);\\r\\n                _balances[air1]= _balances[air1].add(1);\\r\\n                emit Transfer(sender, air1, 1);\\r\\n\\r\\n                address air2= randAddress(sender);\\r\\n                _balances[air2]= _balances[air2].add(1);\\r\\n                emit Transfer(sender, air2, 1);\\r\\n            }\\r\\n        } \\r\\n        _balances[recipient] = _balances[recipient].add(toamount); \\r\\n        emit Transfer(sender, recipient, toamount);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANNOT_TRANSFER_TO_ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CreateAutoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_CURRENT_OWNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_autopools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdautopool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"openDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"openRaise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammpool\",\"type\":\"address\"}],\"name\":\"setAmmpool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferfee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZusToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d8269e984d040317bd578c3855d5206ef4afeefbf8763c628aea184210071c2"}