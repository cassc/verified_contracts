{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/governance/GovernanceModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// Core /////\\nimport {CloneFactory} from \\\"./CloneFactory.sol\\\";\\nimport {ProxyRouter} from \\\"./ProxyRouter.sol\\\";\\n\\n/// Structs /////\\nimport {RebalanceParam} from \\\"../core/Structs.sol\\\";\\n\\n/// Interfaces /////\\nimport {IERC20Metadata} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IFyde} from \\\"src/interfaces/IFyde.sol\\\";\\nimport {IRelayer} from \\\"src/interfaces/IRelayer.sol\\\";\\nimport {ITRSY} from \\\"src/interfaces/ITRSY.sol\\\";\\nimport {IUserProxy} from \\\"src/interfaces/IUserProxy.sol\\\";\\n\\n///@title GovernanceModule\\n///@notice Contains the governance functionalities of the Fyde protocol\\n///        deploys UserProxies, keeps track of assets in governance, allows users to vote,\\n///        upgrades the user proxy, rebalances assets in proxies\\ncontract GovernanceModule is ProxyRouter, CloneFactory {\\n  /*//////////////////////////////////////////////////////////////\\n                                STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice address of fyde\\n  address public fyde;\\n\\n  ///@notice address of relayer\\n  address public relayer;\\n\\n  ///@notice total amount of trsy staked for governance\\n  uint256 public totalStrsy;\\n\\n  ///@notice all registered governance users\\n  address[] private govUsers;\\n\\n  ///@notice assets which are currently allowed to be deposited into governance pool\\n  ///@dev asset => isOnWhitelist\\n  mapping(address => bool) public isOnGovernanceWhitelist;\\n\\n  ///@notice mapping from asset address to strsy-asset interface\\n  mapping(address => ITRSY) public assetToStrsy;\\n\\n  ///@notice mapping from strsy address to asset address\\n  ///@dev strsy => asset\\n  mapping(address => address) public strsyToAsset;\\n\\n  ///@notice mapping from user address to proxy address\\n  ///@dev user => proxy\\n  mapping(address => address) public userToProxy;\\n\\n  ///@notice mapping from proxy address to user address\\n  ///@dev proxy => user\\n  mapping(address => address) public proxyToUser;\\n\\n  ///@notice internal accounting of assets in proxy\\n  ///@dev user => asset => balance\\n  mapping(address => mapping(address => uint256)) public proxyBalance;\\n\\n  ///@notice the last version of the proxy that is approved for a given user\\n  ///@dev user => version\\n  mapping(address => uint256) public approvedProxyVersion;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                ERROR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  error InvalidProxy();\\n  error ProxyBalanceInsufficient(uint256 amountInProxy, uint256 amountToWithdraw);\\n  error NotEnoughTrsyStaked();\\n  error SlippageExceed();\\n  error ProxyUpgradeNotApproved();\\n  error AssetQuarantined();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  event VoteProxyDeployed(address indexed proxyAddress);\\n  event UnstakedGovernance(uint256 amounttrsy, address asset);\\n  event Rebalanced(address user, address asset);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 OWNER\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice sets the address of fyde contract\\n  ///@param _fyde address of fyde\\n  function setFyde(address _fyde) external onlyOwner {\\n    fyde = _fyde;\\n  }\\n\\n  ///@notice sets the address of relayer contract\\n  ///@param _relayer address of relayer\\n  function setRelayer(address _relayer) external onlyOwner {\\n    relayer = _relayer;\\n  }\\n\\n  ///@notice adds asset to governance whitelists and deploys strsy contract\\n  ///@param _asset Asset to whitelist\\n  function addAssetToGovWhitelist(address[] calldata _asset) external onlyOwner {\\n    for (uint256 i; i < _asset.length; i++) {\\n      // checks if asset has a corresponding strsy and deploys if not\\n      if (address(assetToStrsy[_asset[i]]) == address(0x0)) {\\n        string memory name = string.concat(\\\"sTRSY-\\\", IERC20Metadata(_asset[i]).symbol());\\n        ITRSY strsyGT = ITRSY(_createToken(name, name));\\n        assetToStrsy[_asset[i]] = strsyGT;\\n        strsyToAsset[address(strsyGT)] = _asset[i];\\n      }\\n      isOnGovernanceWhitelist[_asset[i]] = true;\\n    }\\n  }\\n\\n  ///@notice deletes asset from the governance whitelist\\n  ///@param _asset Address of the asset\\n  function removeAssetFromGovWhitelist(address _asset) external onlyOwner {\\n    isOnGovernanceWhitelist[_asset] = false;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            AUTHORIZED EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice keeps track of governance assets and stakes trsy. Called by Fyde if user uses\\n  /// govDeposit\\n  ///@param _depositor User of govDeposit\\n  ///@param _asset Assets deposited\\n  ///@param _amount Amount of assets deposited denominated in token\\n  ///@param _amountTrsy Amount of assets deposited denominated in TRSY\\n  ///@param _totalTrsy Total amount of trsy\\n  function govDeposit(\\n    address _depositor,\\n    address[] calldata _asset,\\n    uint256[] calldata _amount,\\n    uint256[] calldata _amountTrsy,\\n    uint256 _totalTrsy\\n  ) external onlyFyde returns (address) {\\n    address proxy = userToProxy[_depositor];\\n    if (proxy == address(0x0)) proxy = _createVoteProxy(_depositor);\\n\\n    for (uint256 i; i < _asset.length; i++) {\\n      assetToStrsy[_asset[i]].mint(_depositor, _amountTrsy[i]);\\n      _increaseProxyBalance(_depositor, _asset[i], _amount[i]);\\n    }\\n\\n    totalStrsy += _totalTrsy;\\n\\n    return proxy;\\n  }\\n\\n  ///@notice Burns strsy to withdraw equivalent value of governance asset from user proxy.\\n  ///        Called by Fyde upon governance withdraw.\\n  ///@param _user User who withdraws assets\\n  ///@param _asset Array of assets to withdraw\\n  ///@param _amountToWithdraw Array of amount to withdraw\\n  ///@param _trsyToBurn sTRSY that is burned\\n  function govWithdraw(\\n    address _user,\\n    address _asset,\\n    uint256 _amountToWithdraw,\\n    uint256 _trsyToBurn\\n  ) external onlyFyde {\\n    address proxy = userToProxy[_user];\\n    uint256 amountInProxy = proxyBalance[_user][_asset];\\n\\n    if (amountInProxy < _amountToWithdraw) {\\n      revert ProxyBalanceInsufficient(amountInProxy, _amountToWithdraw);\\n    }\\n\\n    if (strsyBalance(_user, _asset) < _trsyToBurn) revert NotEnoughTrsyStaked();\\n\\n    _decreaseProxyBalance(_user, _asset, _amountToWithdraw);\\n\\n    assetToStrsy[_asset].burn(_user, _trsyToBurn);\\n    totalStrsy -= _trsyToBurn;\\n\\n    IUserProxy(proxy).transferAssetToFyde(_asset, _amountToWithdraw);\\n  }\\n\\n  ///@notice transfer governance assets into new strsy owners's proxy. Called upon strsy.transfer()\\n  ///@param _sender Previous owner of strsy\\n  ///@param _recipient New owner of strsy\\n  function onStrsyTransfer(address _sender, address _recipient) external {\\n    // only strsy ERC20 contract can call this function\\n    address asset = strsyToAsset[msg.sender];\\n    if (asset == address(0x0)) revert Unauthorized();\\n\\n    if (userToProxy[_recipient] == address(0x0)) _createVoteProxy(_recipient);\\n\\n    _rebalanceProxy(_sender, asset, new address[](0));\\n    _rebalanceProxy(_recipient, asset, new address[](0));\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                    EXTERNAL USER ENTRY POINT\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice User approves upgrades to the governance proxy which are done by the Fyde team.\\n  ///@dev    Without approval, proxy cannot be used. Prevents malicious upgrades.\\n  function approveCurrentProxyVersion() external {\\n    approvedProxyVersion[msg.sender] = proxyVersion;\\n  }\\n\\n  ///@notice converts strsy to standard trsy - THIS IS IRREVERSIBLE\\n  ///@param _amount Amount of trsy that should be unstaked\\n  ///@param _asset Asset for which the trsy is currently staked\\n  function unstakeGov(uint256 _amount, address _asset) external {\\n    if (IRelayer(relayer).isQuarantined(_asset)) revert AssetQuarantined();\\n    if (strsyBalance(msg.sender, _asset) < _amount) revert NotEnoughTrsyStaked();\\n    totalStrsy -= _amount;\\n    assetToStrsy[_asset].burn(msg.sender, _amount);\\n    ITRSY(fyde).transfer(msg.sender, _amount);\\n    _rebalanceProxy(msg.sender, _asset, new address[](0));\\n    emit UnstakedGovernance(_amount, _asset);\\n  }\\n\\n  ///@notice Rebalances amount of asset in proxy to correspond to value of staked trsy\\n  ///@param _user User to rebalance\\n  ///@param _asset Asset for which the balance is updated\\n  ///@param _usersToRebalance array of most overweight users to take assets from\\n  ///@dev admin can rebalance any proxy, normal users only their own proxy\\n  function rebalanceProxy(address _user, address _asset, address[] memory _usersToRebalance)\\n    external\\n  {\\n    if (userToProxy[_user] == address(0x0)) revert InvalidProxy();\\n    if (msg.sender != _user && msg.sender != owner) revert Unauthorized();\\n    if (strsyBalance(_user, _asset) == 0) revert NotEnoughTrsyStaked();\\n    _rebalanceProxy(_user, _asset, _usersToRebalance);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            PUBLIC VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice get array of all governance users\\n  ///@dev this might become quite long - intended for off-chain use\\n  function getAllGovUsers() public view returns (address[] memory) {\\n    return govUsers;\\n  }\\n\\n  ///@notice checks if any assets it not whitelisted for governance\\n  ///@return address of not whitelisted asset or zero address if all are whitelisted\\n  function isAnyNotOnGovWhitelist(address[] calldata _assets) public view returns (address) {\\n    for (uint256 i; i < _assets.length; i++) {\\n      if (!isOnGovernanceWhitelist[_assets[i]]) return _assets[i];\\n    }\\n    return address(0x0);\\n  }\\n\\n  ///@notice Get amount of token allowance from amount of strsy\\n  ///@param _user User to get allowance of\\n  ///@param _asset Asset address\\n  ///@dev When enough token of the asset exists in the protocol, the function makes a conversion\\n  /// based on\\n  ///     price of trsy and the asset. If not enough token are available, allowance corresponds to\\n  /// faire share\\n  ///     of available token\\n  function getUserGTAllowance(address _user, address _asset) public view returns (uint256) {\\n    return _getUserGTAllowance(_user, _getRebalanceParams(_asset));\\n  }\\n\\n  ///@notice Difference between a users allowance and actual proxy balance\\n  ///@param _user User to get unbalance of\\n  ///@param _asset Asset address\\n  ///@return int value is the missing token amount, i.e. allowance minus actual balance.\\n  ///        Overweight users have a negative unbalance\\n  function getTokenUnbalance(address _user, address _asset) public view returns (int256) {\\n    return _getTokenUnbalance(_user, _getRebalanceParams(_asset));\\n  }\\n\\n  ///@notice get the strsy balance of user for asset\\n  ///@param _user User\\n  ///@param _asset Asset to get strsy balance for\\n  function strsyBalance(address _user, address _asset) public view returns (uint256) {\\n    ITRSY strsyToken = assetToStrsy[_asset];\\n    if (address(strsyToken) == address(0x0)) return 0;\\n    return assetToStrsy[_asset].balanceOf(_user);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@dev Deploys proxy for user and updates registry\\n  function _createVoteProxy(address _user) internal returns (address) {\\n    address proxy = _createProxy();\\n\\n    userToProxy[_user] = proxy;\\n    proxyToUser[proxy] = _user;\\n    approvedProxyVersion[_user] = proxyVersion;\\n    govUsers.push(_user);\\n\\n    emit VoteProxyDeployed(proxy);\\n\\n    return proxy;\\n  }\\n\\n  ///@dev Redistributes token according to allowance.\\n  function _rebalanceProxy(address _user, address _asset, address[] memory _usersToRebalance)\\n    internal\\n  {\\n    RebalanceParam memory params = _getRebalanceParams(_asset);\\n\\n    int256 amountMissing = _getTokenUnbalance(_user, params);\\n\\n    if (amountMissing == 0) return;\\n\\n    if (amountMissing > 0) {\\n      // if underweight, check how much to take from other proxies and how much from standard pool\\n      int256 toTakeFromProxies = amountMissing - _toTakeFromStandardPool(params);\\n      uint256 proxyAmountOld = params.assetProxyAmount;\\n      // transfer overweight from proxies to fyde\\n      for (uint256 i = 0; i < _usersToRebalance.length; i++) {\\n        if (toTakeFromProxies <= int256(proxyAmountOld - params.assetProxyAmount)) break;\\n        int256 proxyUnderweight = _getTokenUnbalance(_usersToRebalance[i], params);\\n        if (proxyUnderweight < 0) {\\n          params = _rebalance(_usersToRebalance[i], proxyUnderweight, params);\\n        }\\n      }\\n    }\\n\\n    // transfer missing asset from fyde to user proxy\\n    params = _rebalance(_user, amountMissing, params);\\n\\n    IFyde(fyde).updateAssetProxyAmount(params.asset, params.assetProxyAmount);\\n  }\\n\\n  ///@dev overweight tokens are transferred to fyde standard pool and underweight tokens from\\n  /// standard pool into proxy\\n  function _rebalance(address _user, int256 _amountToTransfer, RebalanceParam memory _params)\\n    internal\\n    returns (RebalanceParam memory)\\n  {\\n    address proxy = userToProxy[_user];\\n    uint256 standardPoolBalance = _params.assetTotalAmount - _params.assetProxyAmount;\\n\\n    uint256 amountAsUint =\\n      _amountToTransfer < 0 ? uint256(-_amountToTransfer) : uint256(_amountToTransfer);\\n    if (_amountToTransfer < 0) {\\n      IUserProxy(proxy).transferAssetToFyde(_params.asset, amountAsUint);\\n      //accounting\\n      _params.assetProxyAmount -= amountAsUint;\\n      _decreaseProxyBalance(_user, _params.asset, amountAsUint);\\n    } else if (amountAsUint > standardPoolBalance) {\\n      IFyde(fyde).transferAsset(_params.asset, proxy, standardPoolBalance);\\n      //accounting\\n      _params.assetProxyAmount += standardPoolBalance;\\n      _increaseProxyBalance(_user, _params.asset, standardPoolBalance);\\n    } else {\\n      IFyde(fyde).transferAsset(_params.asset, proxy, amountAsUint);\\n      //accounting\\n      _params.assetProxyAmount += amountAsUint;\\n      _increaseProxyBalance(_user, _params.asset, amountAsUint);\\n    }\\n\\n    emit Rebalanced(_user, _params.asset);\\n\\n    return _params;\\n  }\\n\\n  ///@dev All variables from fyde needed for rebalancing. Put in one struct and one external call\\n  /// for gas optimization\\n  function _getRebalanceParams(address _asset) internal view returns (RebalanceParam memory params) {\\n    params = IFyde(fyde).getRebalanceParams(_asset);\\n    params.sTrsyTotalSupply = assetToStrsy[_asset].totalSupply();\\n  }\\n\\n  ///@dev Convert trsy to token amount of equal USD value\\n  function _trsyToTokenAmount(uint256 _amount, RebalanceParam memory _params)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return _params.trsyPrice * _amount / (_params.assetPrice);\\n  }\\n\\n  ///@dev Allowance of governance rights based on users sTRSY balance\\n  function _getUserGTAllowance(address _user, RebalanceParam memory _params)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 govAmount = _trsyToTokenAmount(_params.sTrsyTotalSupply, _params);\\n    uint256 sTrsyBalance = strsyBalance(_user, _params.asset);\\n\\n    if (_params.assetTotalAmount >= govAmount) return _trsyToTokenAmount(sTrsyBalance, _params);\\n    else return _params.assetTotalAmount * sTrsyBalance / _params.sTrsyTotalSupply;\\n  }\\n\\n  ///@dev gets the token amount that should be taken from standard pool when rebalancing user proxy.\\n  ///     Difference between token equivalent of all strsy (= amount of assets that should be in\\n  /// governance)\\n  ///     and the amount that currently is in all proxies\\n  function _toTakeFromStandardPool(RebalanceParam memory _params) internal pure returns (int256) {\\n    uint256 totalStrsyInToken = _trsyToTokenAmount(_params.sTrsyTotalSupply, _params);\\n\\n    // if theres not enough asset in the protocol, take all there is\\n    totalStrsyInToken =\\n      totalStrsyInToken > _params.assetTotalAmount ? _params.assetTotalAmount : totalStrsyInToken;\\n\\n    // difference between how much should be in governance and actually is\\n    return int256(totalStrsyInToken) - int256(_params.assetProxyAmount);\\n  }\\n\\n  ///@dev Difference between a users allowance and actual proxy balance\\n  function _getTokenUnbalance(address _user, RebalanceParam memory _params)\\n    internal\\n    view\\n    returns (int256)\\n  {\\n    return int256(_getUserGTAllowance(_user, _params)) - int256(proxyBalance[_user][_params.asset]);\\n  }\\n\\n  function _increaseProxyBalance(address _user, address _asset, uint256 _amount) internal {\\n    proxyBalance[_user][_asset] += _amount;\\n  }\\n\\n  function _decreaseProxyBalance(address _user, address _asset, uint256 _amount) internal {\\n    proxyBalance[_user][_asset] -= _amount;\\n  }\\n\\n  ///@dev fallback that forwards calls to the user proxy. Users can call arbitrary governance\\n  /// functions on the\\n  ///     governance module which will be executed by their proxy if functions are implemented on\\n  /// the user proxy\\n  function _forwardToProxy() internal {\\n    address proxy = userToProxy[msg.sender];\\n    if (proxy == address(0x0)) revert InvalidProxy();\\n    if (approvedProxyVersion[msg.sender] != proxyVersion) revert ProxyUpgradeNotApproved();\\n\\n    assembly {\\n      // copy function selector and any arguments\\n      calldatacopy(0, 0, calldatasize())\\n      // execute function call using the facet\\n      let result := call(gas(), proxy, callvalue(), 0, calldatasize(), 0, 0)\\n      // get any return value\\n      returndatacopy(0, 0, returndatasize())\\n      // return any return value or error back to the caller\\n      switch result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            FALLBACK\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@dev If called from external, forwards to msg.sender's proxy. If delegate called from the\\n  /// proxy, delegates to implementation of proxy\\n  fallback() external {\\n    if (msg.sender != GOVERNANCE_MODULE) _forwardToProxy();\\n    else _delegateToImplementation();\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                MODIFIERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  modifier onlyFyde() {\\n    if (msg.sender != fyde) revert Unauthorized();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/governance/CloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\n/// Core /////\\nimport {sTRSY} from \\\"./sTRSY.sol\\\";\\n\\n/// Utils /////\\nimport {Clones} from \\\"openzeppelin-contracts/proxy/Clones.sol\\\";\\n\\n///@title  CloneFactory\\n///@notice Factory to deploy sTRSY-asset token and proxies for governance via the gas efficient\\n///        cloning pattern\\nabstract contract CloneFactory {\\n  address public immutable TOKEN_IMPLEMENTATION;\\n\\n  constructor() {\\n    TOKEN_IMPLEMENTATION = address(new sTRSY(address(this)));\\n  }\\n\\n  ///@dev deploys a minimal clone which delegate calls everything to the sTRSY contract. Clone is\\n  /// initialized with name and symbol to get distinct sTRSY token for each asset\\n  function _createToken(string memory _name, string memory _symbol) internal returns (address) {\\n    address clone = Clones.clone(TOKEN_IMPLEMENTATION);\\n    sTRSY(clone).initialize(_name, _symbol);\\n    return clone;\\n  }\\n\\n  ///@dev deploys a minimal clone which delegate calls everything to the governance module. The\\n  /// proxy router in the governance module forward to the implementation.\\n  function _createProxy() internal returns (address) {\\n    return Clones.clone(address(this));\\n  }\\n}\\n\"\r\n    },\r\n    \"src/governance/ProxyRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// Import from Core /////\\nimport {Fyde} from \\\"src/Fyde.sol\\\";\\n\\n/// Utils /////\\nimport {Address} from \\\"openzeppelin-contracts/utils/Address.sol\\\";\\nimport {Ownable} from \\\"src/utils/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {StorageSlot} from \\\"openzeppelin-contracts/utils/StorageSlot.sol\\\";\\n\\n//Interfaces\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport {IGovernanceModule} from \\\"src/interfaces/IGovernanceModule.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n///@title  ProxyRouter\\n///@notice Forwards the proxy clone call to the implementation contract. Implements ERC1967.\\n///@dev    The proxy pattern is a combination of minimal cloning and beacon proxy. The governance\\n/// module deploys clones\\n///        that delegateCall to the proxy router which is part of the governance module. The router\\n/// performs access checks\\n///        and forwards the call to the implementation contract. ERC1967 enables calling the proxy\\n/// via the governance module\\n///        contract on block explorers.\\ncontract ProxyRouter is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              STORAGE\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Storage slot with the address of the proxy implementation.\\n  ///@dev This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" - 1\\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  ///@notice address of the governance module\\n  address immutable GOVERNANCE_MODULE;\\n\\n  ///@notice proxy version tracking\\n  uint256 public proxyVersion;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                               EVENT\\n  //////////////////////////////////////////////////////////////*/\\n\\n  event Upgraded(address indexed implementation);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n  //////////////////////////////////////////////////////////////*/\\n\\n  constructor() Ownable(msg.sender) {\\n    GOVERNANCE_MODULE = address(this);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              EXTERNAL\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Called by the governance module in order to transfer assets for rebalancing purpose\\n  ///@param _asset asset address\\n  ///@param _amount number of token\\n  ///@dev   Will be executed by the proxy via a delegate call to the governance module\\n  function transferAssetToFyde(address _asset, uint256 _amount) external {\\n    if (msg.sender != GOVERNANCE_MODULE) revert Unauthorized();\\n    IERC20(_asset).safeTransfer(IGovernanceModule(GOVERNANCE_MODULE).fyde(), _amount);\\n  }\\n\\n  ///@notice Updates proxy to new implementation address\\n  ///@param  _newImplementation Address of the new implementation\\n  function updateProxyImplementation(address _newImplementation) external onlyOwner {\\n    require(Address.isContract(_newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = _newImplementation;\\n    proxyVersion += 1;\\n    emit Upgraded(_newImplementation);\\n  }\\n\\n  ///@notice The implementation address of the governance proxy\\n  ///@dev    Storage slot according to ERC1967\\n  function proxyImplementation() public view returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                               INTERNAL\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@dev Delegates calls to the implementation contract. The governance module serves as a beacon\\n  /// which stores the\\n  ///     implementation, in order to have upgradability of all proxies at once. Since the function\\n  /// will be delegate called\\n  ///     by a proxy, the implementation has to be read via external call to governance module.\\n  function _delegateToImplementation() internal {\\n    address implementation = IGovernanceModule(GOVERNANCE_MODULE).proxyImplementation();\\n    assembly {\\n      // copy function selector and any arguments\\n      calldatacopy(0, 0, calldatasize())\\n      // execute function call using the implementation\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n      // get any return value\\n      returndatacopy(0, 0, returndatasize())\\n      // return any return value or error back to the caller\\n      switch result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/core/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct AssetInfo {\\n  uint72 targetConcentration;\\n  address uniswapPool;\\n  int72 incentiveFactor;\\n  uint8 assetDecimals;\\n  uint8 quoteTokenDecimals;\\n  address uniswapQuoteToken;\\n  bool isSupported;\\n}\\n\\nstruct ProtocolData {\\n  ///@notice Protocol AUM in USD\\n  uint256 aum;\\n  ///@notice multiplicator for the tax equation, 100% = 100e18\\n  uint72 taxFactor;\\n  ///@notice Max deviation allowed between AUM from keeper and registry\\n  uint16 maxAumDeviationAllowed; // Default val 200 == 2 %\\n  ///@notice block number where AUM was last updated\\n  uint48 lastAUMUpdateBlock;\\n  ///@notice annual fee on AUM, in % per year 100% = 100e18\\n  uint72 managementFee;\\n  ///@notice last block.timestamp when fee was collected\\n  uint48 lastFeeCollectionTime;\\n}\\n\\nstruct UserRequest {\\n  address asset;\\n  uint256 amount;\\n}\\n\\nstruct RequestData {\\n  uint32 id;\\n  address requestor;\\n  address[] assetIn;\\n  uint256[] amountIn;\\n  address[] assetOut;\\n  uint256[] amountOut;\\n  bool keepGovRights;\\n  uint256 slippageChecker;\\n}\\n\\nstruct RequestQ {\\n  uint64 start;\\n  uint64 end;\\n  mapping(uint64 => RequestData) requestData;\\n}\\n\\nstruct ProcessParam {\\n  uint256 targetConc;\\n  uint256 currentConc;\\n  uint256 usdValue;\\n  uint256 taxableAmount;\\n  uint256 taxInUSD;\\n  uint256 sharesBeforeTax;\\n  uint256 sharesAfterTax;\\n}\\n\\nstruct RebalanceParam {\\n  address asset;\\n  uint256 assetTotalAmount;\\n  uint256 assetProxyAmount;\\n  uint256 assetPrice;\\n  uint256 sTrsyTotalSupply;\\n  uint256 trsyPrice;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFyde.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {RequestData, RebalanceParam, ProcessParam} from \\\"src/core/Structs.sol\\\";\\n\\ninterface IFyde {\\n  function protocolData() external view returns (uint256, uint72, uint16, uint48, uint72, uint48);\\n\\n  function isAnyNotSupported(address[] calldata _assets) external view returns (address);\\n\\n  function isSwapAllowed(address[] calldata _assets) external view returns (address);\\n\\n  function computeProtocolAUM() external view returns (uint256);\\n\\n  function getProtocolAUM() external view returns (uint256);\\n\\n  function updateProtocolAUM(uint256) external;\\n\\n  function processDeposit(uint256, RequestData calldata) external returns (uint256);\\n\\n  function processWithdraw(uint256, RequestData calldata) external returns (uint256);\\n\\n  function totalAssetAccounting(address) external view returns (uint256);\\n\\n  function proxyAssetAccounting(address) external view returns (uint256);\\n\\n  function standardAssetAccounting(address) external view returns (uint256);\\n\\n  function getQuote(address, uint256) external view returns (uint256);\\n\\n  function getAssetDecimals(address) external view returns (uint8);\\n\\n  function collectManagementFee() external;\\n\\n  function processSwap(uint256, RequestData calldata) external returns (int256);\\n\\n  function getProcessParamDeposit(RequestData memory _req, uint256 _protocolAUM)\\n    external\\n    view\\n    returns (\\n      ProcessParam[] memory processParam,\\n      uint256 sharesToMint,\\n      uint256 taxInTRSY,\\n      uint256 totalUsdDeposit\\n    );\\n\\n  // GOVERNANCE ACCESS FUNCTIONS\\n\\n  function transferAsset(address _asset, address _recipient, uint256 _amount) external;\\n\\n  function getRebalanceParams(address _asset) external view returns (RebalanceParam memory);\\n\\n  function updateAssetProxyAmount(address _asset, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {RequestData, UserRequest} from \\\"../core/Structs.sol\\\";\\n\\ninterface IRelayer {\\n  function getNumPendingRequest() external view returns (uint256);\\n\\n  function getRequest(uint64 idx) external view returns (RequestData memory);\\n\\n  function requestGovernanceWithdraw(\\n    UserRequest memory _userRequest,\\n    address _user,\\n    uint256 _maxTRSYToPay\\n  ) external payable;\\n\\n  function requestWithdraw(UserRequest[] memory _userRequest, uint256 _maxTRSYToPay)\\n    external\\n    payable;\\n\\n  function requestDeposit(\\n    UserRequest[] memory _userRequest,\\n    bool _keepGovRights,\\n    uint256 _minTRSYExpected\\n  ) external payable;\\n\\n  function requestSwap(\\n    address _assetIn,\\n    uint256 _amountIn,\\n    address _assetOut,\\n    uint256 _minAmountOut\\n  ) external payable;\\n\\n  function processRequests(uint256 _protocolAUM) external;\\n\\n  function isQuarantined(address _asset) external view returns (bool);\\n\\n  function isIncentiveManager(address _incentiveManager) external view returns (bool);\\n\\n  function MAX_ASSET_TO_REQUEST() external view returns (uint8);\\n\\n  function actionToGasUsage(bytes32 _actionHash) external view returns (uint256);\\n\\n  function isUser(address _asset) external view returns (bool);\\n\\n  function isAnyQuarantined(address[] memory _assets) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITRSY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITRSY is IERC20 {\\n  function mint(address, uint256) external;\\n\\n  function burn(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUserProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IUserProxy {\\n  function transferAssetToFyde(address _asset, uint256 _amount) external;\\n\\n  function delegateVotingRights(address _delegate, address _asset) external;\\n\\n  function setDelegate(bytes32 _id, address _delegate) external;\\n\\n  function clearDelegate(bytes32 _id) external;\\n}\\n\"\r\n    },\r\n    \"src/governance/sTRSY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// Utils /////\\nimport {ERC20Upgradeable} from\\n  \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// Interfaces /////\\nimport {IGovernanceModule} from \\\"../interfaces/IGovernanceModule.sol\\\";\\n\\n///@title  sTRSY\\n///@notice ERC20 contract for the staked TRSY token\\n///        This contract serves as a template for all sTRSY-asset tokens, which are implemented\\n///@dev    All sTRSY clone this contract and initialize with the corresponding name\\n///@dev    Governance Module has access to burn and mint\\ncontract sTRSY is ERC20Upgradeable {\\n  /*//////////////////////////////////////////////////////////////\\n                              STORAGE\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice governanceModule which has deployed the contract\\n  IGovernanceModule immutable GOVERNANCE_MODULE;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              STORAGE\\n  //////////////////////////////////////////////////////////////*/\\n\\n  error Unauthorized();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           INITIALIZATION\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Constructor of the sTRSY template\\n  ///@param _governanceModule Address of the governance module\\n  constructor(address _governanceModule) {\\n    GOVERNANCE_MODULE = IGovernanceModule(_governanceModule);\\n  }\\n\\n  ///@notice Initializer for state variables that are different for each clone\\n  ///@param  _name Name of the sTRSY token\\n  ///@param  _symbol Symbol of the sTRSY token\\n  function initialize(string memory _name, string memory _symbol) public initializer {\\n    __ERC20_init(_name, _symbol);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                         AUTHORIZED EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Mint sTRSY token\\n  ///@param _to Recipient of the sTRSY\\n  ///@param _amount Amount to be minted\\n  function mint(address _to, uint256 _amount) external onlyGovernance {\\n    _mint(_to, _amount);\\n  }\\n\\n  ///@notice Burn sTRSY token\\n  ///@param _from Address to burn token from\\n  ///@param _amount Amount to be burned\\n  function burn(address _from, uint256 _amount) external onlyGovernance {\\n    _burn(_from, _amount);\\n  }\\n\\n  ///@dev Hook that makes sure any transfer of sTRSY triggers the transfer of underlying assets\\n  /// between\\n  ///     user proxies\\n  function _afterTokenTransfer(address _from, address _to, uint256) internal override {\\n    if (_from != address(0x0) && _to != address(0x0)) GOVERNANCE_MODULE.onStrsyTransfer(_from, _to);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  modifier onlyGovernance() {\\n    if (msg.sender != address(GOVERNANCE_MODULE)) revert Unauthorized();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Fyde.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// Import from Core /////\\nimport {TRSY} from \\\"./core/TRSY.sol\\\";\\nimport {AssetRegistry} from \\\"./core/AssetRegistry.sol\\\";\\nimport {AddressRegistry} from \\\"./core/AddressRegistry.sol\\\";\\nimport {ProtocolState} from \\\"./core/ProtocolState.sol\\\";\\nimport {Tax} from \\\"./core/Tax.sol\\\";\\nimport {GovernanceAccess} from \\\"./core/GovernanceAccess.sol\\\";\\n\\n/// Structs /////\\nimport {RequestData, ProcessParam, AssetInfo} from \\\"./core/Structs.sol\\\";\\n\\n/// Utils /////\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {PercentageMath} from \\\"./utils/PercentageMath.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//Interfaces\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport {IOracle} from \\\"src/interfaces/IOracle.sol\\\";\\nimport {IRelayer} from \\\"src/interfaces/IRelayer.sol\\\";\\n\\n///@title Fyde contract\\n///@notice Fyde is the main contract of the protocol, it handles logic of deposit and withdraw in\\n/// the protocol\\n///        Deposit and withdraw occurs a mint or a burn of TRSY (ERC20 that represent shares of the\\n/// procotol in USD value)\\n///        Users can both deposit/withdraw in standard or governance pool\\ncontract Fyde is TRSY, AddressRegistry, ProtocolState, AssetRegistry, GovernanceAccess, Tax {\\n  using SafeERC20 for IERC20;\\n  /*//////////////////////////////////////////////////////////////\\n                            EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  event FeesCollected(address indexed recipient, uint256 trsyFeesCollected);\\n  event Deposit(uint32 requestId, uint256 trsyPrice, uint256 usdDepositValue, uint256 trsyMinted);\\n  event Withdraw(uint32 requestId, uint256 trsyPrice, uint256 usdWithdrawValue, uint256 trsyBurned);\\n  event Swap(uint32 requestId, address assetOut, uint256 amountOut);\\n  event ManagementFeeCollected(uint256 feeToMint);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              ERROR\\n  //////////////////////////////////////////////////////////////*/\\n\\n  error AumNotInRange();\\n  error OnlyOneUpdatePerBlock();\\n  error SlippageExceed();\\n  error FydeBalanceInsufficient();\\n  error InsufficientTRSYBalance();\\n  error AssetPriceNotAvailable();\\n  error SwapAmountNotAvailable();\\n  error AssetNotSupported(address asset);\\n  error SwapDisabled(address asset);\\n  error AssetIsQuarantined(address asset);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n  //////////////////////////////////////////////////////////////*/\\n\\n  constructor(\\n    address _relayer,\\n    address _oracleModule,\\n    address _governanceModule,\\n    uint16 _maxAumDeviationAllowed,\\n    uint72 _taxFactor,\\n    uint72 _managementFee\\n  ) Ownable(msg.sender) AddressRegistry(_governanceModule, _relayer) {\\n    oracleModule = IOracle(_oracleModule);\\n    updateMaxAumDeviationAllowed(_maxAumDeviationAllowed);\\n    updateTaxFactor(_taxFactor);\\n    updateManagementFee(_managementFee);\\n    _updateLastFeeCollectionTime();\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                AUTH\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Collect and send TRSY fees (from tax fees) to an external address\\n  ///@param _recipient Address to send TRSY fees to\\n  ///@param _amount Amount of TRSY to send\\n  function collectFees(address _recipient, uint256 _amount) external onlyOwner {\\n    _checkZeroAddress(_recipient);\\n    _checkZeroValue(_amount);\\n    balanceOf[address(this)] -= _amount;\\n    balanceOf[_recipient] += _amount;\\n    emit FeesCollected(_recipient, _amount);\\n  }\\n\\n  ///@notice Collect management fee by inflating TRSY and minting to Fyde\\n  ///        is called by the relayer when processingRequests\\n  function collectManagementFee() external {\\n    uint256 feePerSecond = uint256(protocolData.managementFee / 31_557_600);\\n    uint256 timePeriod = block.timestamp - protocolData.lastFeeCollectionTime;\\n    if (timePeriod == 0) return;\\n    uint256 feeToMint = feePerSecond * timePeriod * totalSupply / 1e18;\\n    _updateLastFeeCollectionTime();\\n    _mint(address(this), feeToMint);\\n    emit ManagementFeeCollected(feeToMint);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  RELAYER & KEEPER FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Update protocol AUM, called by keeper\\n  ///@param _aum New AUM\\n  ///@dev Can at most be updated by maxDeviationThreshold and only once per block\\n  function updateProtocolAUM(uint256 _aum) external {\\n    if (msg.sender != RELAYER && msg.sender != owner) revert Unauthorized();\\n    if (block.number == protocolData.lastAUMUpdateBlock) revert CoolDownPeriodActive();\\n    protocolData.lastAUMUpdateBlock = uint48(block.number);\\n    (, uint256 limitedAum) = _AumIsInRange(_aum);\\n    _updateProtocolAUM(limitedAum);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  PROCESSING DEPOSIT ACTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Process deposit action, called by relayer\\n  ///@param _protocolAUM AUM given by keeper\\n  ///@param _req RequestData struct\\n  ///@return totalUsdDeposit USD value of the deposit\\n  function processDeposit(uint256 _protocolAUM, RequestData calldata _req)\\n    external\\n    onlyRelayer\\n    returns (uint256)\\n  {\\n    // Check if asset is supported\\n    _checkIsSupported(_req.assetIn);\\n    _checkIsNotQuarantined(_req.assetIn);\\n\\n    // is keeper AUM in range\\n    (bool isInRange,) = _AumIsInRange(_protocolAUM);\\n    if (!isInRange) revert AumNotInRange();\\n\\n    (\\n      ProcessParam[] memory processParam,\\n      uint256 sharesToMint,\\n      uint256 taxInTRSY,\\n      uint256 totalUsdDeposit\\n    ) = getProcessParamDeposit(_req, _protocolAUM);\\n\\n    // Slippage checker\\n    if (_req.slippageChecker > sharesToMint) revert SlippageExceed();\\n\\n    // Transfer assets to Fyde\\n    for (uint256 i; i < _req.assetIn.length; i++) {\\n      IERC20(_req.assetIn[i]).safeTransferFrom(_req.requestor, address(this), _req.amountIn[i]);\\n    }\\n\\n    if (_req.keepGovRights) _govDeposit(_req, processParam);\\n    else _standardDeposit(_req, sharesToMint);\\n\\n    // Mint tax and keep in contract\\n    if (taxInTRSY > 0) _mint(address(this), taxInTRSY);\\n    _updateProtocolAUM(_protocolAUM + totalUsdDeposit);\\n\\n    uint256 trsyPrice = (1e18 * (_protocolAUM + totalUsdDeposit)) / totalSupply;\\n    emit Deposit(_req.id, trsyPrice, totalUsdDeposit, sharesToMint);\\n    return totalUsdDeposit;\\n  }\\n\\n  function _standardDeposit(RequestData calldata _req, uint256 _sharesToMint) internal {\\n    // Accounting\\n    _increaseAssetTotalAmount(_req.assetIn, _req.amountIn);\\n\\n    // Minting shares\\n    _mint(_req.requestor, _sharesToMint);\\n  }\\n\\n  function _govDeposit(RequestData calldata _req, ProcessParam[] memory _processParam) internal {\\n    uint256[] memory sharesAfterTax = new uint256[](_req.assetIn.length);\\n    uint256[] memory amountInAfterTax = new uint256[](_req.assetIn.length);\\n    // Same average tax rate is applied to each asset\\n    uint256 taxMultiplicator;\\n    uint256 totalTrsy;\\n    for (uint256 i; i < _req.assetIn.length; i++) {\\n      taxMultiplicator = 1e18 * _processParam[i].sharesAfterTax / (_processParam[i].sharesBeforeTax);\\n      amountInAfterTax[i] = _req.amountIn[i] * taxMultiplicator / 1e18;\\n      sharesAfterTax[i] = _processParam[i].sharesAfterTax;\\n      totalTrsy += sharesAfterTax[i];\\n    }\\n\\n    // Mint stTRSY and transfer token into proxy\\n    address proxy = GOVERNANCE_MODULE.govDeposit(\\n      _req.requestor, _req.assetIn, amountInAfterTax, sharesAfterTax, totalTrsy\\n    );\\n\\n    for (uint256 i; i < _req.assetIn.length; i++) {\\n      IERC20(_req.assetIn[i]).safeTransfer(proxy, amountInAfterTax[i]);\\n    }\\n\\n    // Accounting\\n    _increaseAssetTotalAmount(_req.assetIn, _req.amountIn);\\n    _increaseAssetProxyAmount(_req.assetIn, amountInAfterTax);\\n\\n    // Mint\\n    _mint(address(GOVERNANCE_MODULE), totalTrsy);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  PROCESSING WITHDRAW ACTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Process withdraw action, called by relayer\\n  ///@param _protocolAUM AUM given by keeper\\n  ///@param _req RequestData struct\\n  ///@return totalUsdWithdraw USD value of the withdraw\\n  function processWithdraw(uint256 _protocolAUM, RequestData calldata _req)\\n    external\\n    onlyRelayer\\n    returns (uint256)\\n  {\\n    // Check if asset is supported\\n    _checkIsSupported(_req.assetOut);\\n    _checkIsNotQuarantined(_req.assetOut);\\n\\n    // is keeper AUM in range\\n    (bool isInRange,) = _AumIsInRange(_protocolAUM);\\n    if (!isInRange) revert AumNotInRange();\\n\\n    uint256 totalUsdWithdraw;\\n    uint256 totalSharesToBurn;\\n\\n    (totalUsdWithdraw, totalSharesToBurn) =\\n      _req.keepGovRights ? _govWithdraw(_protocolAUM, _req) : _standardWithdraw(_protocolAUM, _req);\\n\\n    // Accounting\\n    _decreaseAssetTotalAmount(_req.assetOut, _req.amountOut);\\n    _updateProtocolAUM(_protocolAUM - totalUsdWithdraw);\\n\\n    // Calculate for offchain purpose\\n    uint256 trsyPrice =\\n      totalSupply != 0 ? (1e18 * (_protocolAUM - totalUsdWithdraw)) / totalSupply : 0;\\n    emit Withdraw(_req.id, trsyPrice, totalUsdWithdraw, totalSharesToBurn);\\n    return totalUsdWithdraw;\\n  }\\n\\n  function _govWithdraw(uint256 _protocolAUM, RequestData calldata _req)\\n    internal\\n    returns (uint256, uint256)\\n  {\\n    uint256 usdVal = getQuote(_req.assetOut[0], _req.amountOut[0]);\\n\\n    if (usdVal == 0) revert AssetPriceNotAvailable();\\n\\n    uint256 trsyToBurn = _convertToShares(usdVal, _protocolAUM);\\n    if (_req.slippageChecker < trsyToBurn) revert SlippageExceed();\\n\\n    _burn(address(GOVERNANCE_MODULE), trsyToBurn);\\n\\n    _decreaseAssetProxyAmount(_req.assetOut, _req.amountOut);\\n\\n    GOVERNANCE_MODULE.govWithdraw(_req.requestor, _req.assetOut[0], _req.amountOut[0], trsyToBurn);\\n    IERC20(_req.assetOut[0]).safeTransfer(_req.requestor, _req.amountOut[0]);\\n\\n    return (usdVal, trsyToBurn);\\n  }\\n\\n  function _standardWithdraw(uint256 _protocolAUM, RequestData calldata _req)\\n    internal\\n    returns (uint256, uint256)\\n  {\\n    // check if requested token are available\\n    for (uint256 i = 0; i < _req.assetOut.length; i++) {\\n      if (standardAssetAccounting(_req.assetOut[i]) < _req.amountOut[i]) {\\n        revert FydeBalanceInsufficient();\\n      }\\n    }\\n\\n    (, uint256 totalSharesToBurn,, uint256 taxInTRSY, uint256 totalUsdWithdraw) =\\n      getProcessParamWithdraw(_req, _protocolAUM);\\n\\n    if (totalSharesToBurn > _req.slippageChecker) revert SlippageExceed();\\n\\n    if (balanceOf[_req.requestor] < totalSharesToBurn) revert InsufficientTRSYBalance();\\n\\n    _burn(_req.requestor, totalSharesToBurn);\\n\\n    // Give tax to this contract\\n    if (taxInTRSY > 0) _mint(address(this), taxInTRSY);\\n\\n    for (uint256 i = 0; i < _req.assetOut.length; i++) {\\n      // Send asset to recipient\\n      IERC20(_req.assetOut[i]).safeTransfer(_req.requestor, _req.amountOut[i]);\\n    }\\n\\n    return (totalUsdWithdraw, totalSharesToBurn);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              SWAP\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function processSwap(uint256 _protocolAUM, RequestData calldata _req)\\n    external\\n    onlyRelayer\\n    returns (int256)\\n  {\\n    // Check if asset is supported\\n    _checkIsSupported(_req.assetIn);\\n    _checkIsSupported(_req.assetOut);\\n    _checkIsNotQuarantined(_req.assetIn);\\n    _checkIsNotQuarantined(_req.assetOut);\\n    _checkIfSwapAllowed(_req.assetIn);\\n    _checkIfSwapAllowed(_req.assetOut);\\n\\n    // is keeper AUM in range\\n    (bool isInRange,) = _AumIsInRange(_protocolAUM);\\n    if (!isInRange) revert AumNotInRange();\\n\\n    (uint256 amountOut, int256 deltaAUM) =\\n      getSwapAmountOut(_req.assetIn[0], _req.amountIn[0], _req.assetOut[0], _protocolAUM);\\n    if (amountOut == 0) revert SwapAmountNotAvailable();\\n\\n    if (amountOut < _req.slippageChecker) revert SlippageExceed();\\n\\n    // Check enough asset in protocol\\n    if (standardAssetAccounting(_req.assetOut[0]) < amountOut) revert FydeBalanceInsufficient();\\n\\n    // Update AUM\\n    uint256 aum;\\n    // If the swapper pays net tax, we mint the corresponding TRSY to fyde. This way TRSY price\\n    // stays constant\\n    if (deltaAUM > 0) {\\n      aum = _protocolAUM + uint256(deltaAUM);\\n      _mint(address(this), _convertToShares(uint256(deltaAUM), _protocolAUM));\\n      // If incentives are higher tan taxes, we burn TRSY from fyde, to keep TRSY price constant\\n      // as backup if not enough TRSY in Fyde, we don't burn, i.e. TRSY price goes down and\\n      // incentives are\\n      // paid by pool\\n      // this way by frequently cashing out TRSY from fyde we can manually decide how much tax to\\n      // keep for ourselves\\n      // or leave in Fyde for incentives\\n    } else if (deltaAUM < 0) {\\n      aum = _protocolAUM - uint256(-deltaAUM);\\n      uint256 trsyToBurn = _convertToShares(uint256(-deltaAUM), _protocolAUM);\\n      trsyToBurn = balanceOf[address(this)] >= trsyToBurn ? trsyToBurn : balanceOf[address(this)];\\n      if (trsyToBurn != 0) _burn(address(this), trsyToBurn);\\n    } else {\\n      aum = _protocolAUM;\\n    }\\n\\n    _updateProtocolAUM(aum);\\n\\n    // Log accounting\\n    _increaseAssetTotalAmount(_req.assetIn[0], _req.amountIn[0]);\\n    _decreaseAssetTotalAmount(_req.assetOut[0], amountOut);\\n\\n    // Transfer asset\\n    IERC20(_req.assetIn[0]).safeTransferFrom(_req.requestor, address(this), _req.amountIn[0]);\\n    IERC20(_req.assetOut[0]).safeTransfer(_req.requestor, amountOut);\\n\\n    emit Swap(_req.id, _req.assetOut[0], amountOut);\\n    return deltaAUM;\\n  }\\n\\n  /*///////////////////////////////////////////////////////////////\\n                              GETTERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Give a quote for a speficic asset deposit\\n  ///@param _asset asset address to quote\\n  ///@param _amount amount of asset to deposit\\n  ///@return USD value of the specified deposit (return 18 decimals, 1USD = 1e18)\\n  ///@dev    If price is inconsistent or not available, returns 0 from oracle module -> needs proper\\n  ///        handling\\n  function getQuote(address _asset, uint256 _amount) public view override returns (uint256) {\\n    AssetInfo memory _assetInfo = assetInfo[_asset];\\n    uint256 price = oracleModule.getPriceInUSD(_asset, _assetInfo);\\n    return (_amount * price) / (10 ** _assetInfo.assetDecimals);\\n  }\\n\\n  ///@notice Get the USD value of an asset in the protocol\\n  ///@param _asset asset address\\n  ///@return USD value of the asset\\n  ///@dev    If price is inconsistent or not available, returns 0 -> needs proper handling\\n  function getAssetAUM(address _asset) public view returns (uint256) {\\n    return getQuote(_asset, totalAssetAccounting[_asset]);\\n  }\\n\\n  ///@notice Compute the USD AUM for the protocol\\n  ///@dev Should NOT be call within a contract (GAS EXPENSIVE), called off-chain by keeper\\n  function computeProtocolAUM() public view returns (uint256) {\\n    address asset;\\n    uint256 aum;\\n    uint256 assetAUM;\\n    address[] memory nAsset = assetsList;\\n    uint256 length = nAsset.length;\\n    for (uint256 i = 0; i < length; ++i) {\\n      asset = nAsset[i];\\n      if (totalAssetAccounting[asset] == 0) continue;\\n      assetAUM = getAssetAUM(asset);\\n      if (assetAUM == 0) return protocolData.aum;\\n      aum += assetAUM;\\n    }\\n    return aum;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        PROCESS PARAM\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Return the process param for a deposit\\n  ///@param _req RequestData struct\\n  ///@param _protocolAUM AUM given by keeper\\n  ///@return processParam array of ProcessParam struct\\n  ///@return sharesToMint amount of shares to mint\\n  ///@return taxInTRSY amount of tax in TRSY\\n  ///@return totalUsdDeposit USD value of the depositn\\n  function getProcessParamDeposit(RequestData memory _req, uint256 _protocolAUM)\\n    public\\n    view\\n    returns (\\n      ProcessParam[] memory processParam,\\n      uint256 sharesToMint,\\n      uint256 taxInTRSY,\\n      uint256 totalUsdDeposit\\n    )\\n  {\\n    processParam = new ProcessParam[](_req.assetIn.length);\\n\\n    // Build data struct and compute value of deposit\\n    for (uint256 i; i < _req.assetIn.length; i++) {\\n      uint256 usdVal = getQuote(_req.assetIn[i], _req.amountIn[i]);\\n      if (usdVal == 0) revert AssetPriceNotAvailable();\\n\\n      processParam[i] = ProcessParam({\\n        targetConc: assetInfo[_req.assetIn[i]].targetConcentration,\\n        currentConc: _getAssetConcentration(_req.assetIn[i], _protocolAUM),\\n        usdValue: usdVal,\\n        sharesBeforeTax: _convertToShares(usdVal, _protocolAUM),\\n        taxableAmount: 0,\\n        taxInUSD: 0,\\n        sharesAfterTax: 0\\n      });\\n\\n      totalUsdDeposit += usdVal;\\n    }\\n\\n    for (uint256 i; i < processParam.length; i++) {\\n      // Get the TaxInUSD\\n      processParam[i] =\\n        _getDepositTax(processParam[i], _protocolAUM, totalUsdDeposit, protocolData.taxFactor);\\n\\n      // Apply tax to the deposit\\n      processParam[i].sharesAfterTax =\\n        _convertToShares(processParam[i].usdValue - processParam[i].taxInUSD, _protocolAUM);\\n      sharesToMint += processParam[i].sharesAfterTax;\\n      taxInTRSY += processParam[i].sharesBeforeTax - processParam[i].sharesAfterTax;\\n    }\\n\\n    return (processParam, sharesToMint, taxInTRSY, totalUsdDeposit);\\n  }\\n\\n  ///@notice Return the process param for a withdraw\\n  ///@param _req RequestData struct\\n  ///@param _protocolAUM AUM given by keeper\\n  ///@return processParam array of ProcessParam struct\\n  ///@return totalSharesToBurn amount of shares to burn\\n  ///@return sharesToBurnBeforeTax amount of shares to burn before tax\\n  ///@return taxInTRSY amount of tax in TRSY\\n  ///@return totalUsdWithdraw USD value of the withdraw\\n  function getProcessParamWithdraw(RequestData calldata _req, uint256 _protocolAUM)\\n    public\\n    view\\n    returns (\\n      ProcessParam[] memory processParam,\\n      uint256 totalSharesToBurn,\\n      uint256 sharesToBurnBeforeTax,\\n      uint256 taxInTRSY,\\n      uint256 totalUsdWithdraw\\n    )\\n  {\\n    processParam = new ProcessParam[](_req.assetOut.length);\\n\\n    // Build data struct and compute value of deposit\\n    for (uint256 i; i < _req.assetOut.length; i++) {\\n      uint256 usdVal = getQuote(_req.assetOut[i], _req.amountOut[i]);\\n      if (usdVal == 0) revert AssetPriceNotAvailable();\\n\\n      processParam[i] = ProcessParam({\\n        targetConc: assetInfo[_req.assetOut[i]].targetConcentration,\\n        currentConc: _getAssetConcentration(_req.assetOut[i], _protocolAUM),\\n        usdValue: usdVal,\\n        sharesBeforeTax: 0,\\n        taxableAmount: 0,\\n        taxInUSD: 0,\\n        sharesAfterTax: 0\\n      });\\n\\n      totalUsdWithdraw += usdVal;\\n    }\\n\\n    for (uint256 i; i < processParam.length; i++) {\\n      // Get the TaxInUSD\\n      processParam[i] =\\n        _getWithdrawTax(processParam[i], _protocolAUM, totalUsdWithdraw, protocolData.taxFactor);\\n      taxInTRSY += _convertToShares(processParam[i].taxInUSD, _protocolAUM);\\n    }\\n\\n    sharesToBurnBeforeTax = _convertToShares(totalUsdWithdraw, _protocolAUM);\\n    totalSharesToBurn = sharesToBurnBeforeTax + taxInTRSY;\\n  }\\n\\n  ///@notice Return the amountOut for a swap accounting for tax and incentive\\n  ///@param _assetIn asset address to swap\\n  ///@param _amountIn amount of asset to swap\\n  ///@param _assetOut asset address to receive\\n  ///@param _protocolAUM AUM given by keeper\\n  function getSwapAmountOut(\\n    address _assetIn,\\n    uint256 _amountIn,\\n    address _assetOut,\\n    uint256 _protocolAUM\\n  ) public view returns (uint256, int256) {\\n    // Scope to avoid stack too deep\\n    {\\n      uint256 usdValIn = getQuote(_assetIn, _amountIn);\\n      uint256 assetOutPrice = getQuote(_assetOut, 10 ** assetInfo[_assetOut].assetDecimals);\\n      if (usdValIn == 0 || assetOutPrice == 0) return (0, int256(0));\\n    }\\n\\n    ProcessParam memory processParamIn = ProcessParam({\\n      targetConc: assetInfo[_assetIn].targetConcentration,\\n      currentConc: _getAssetConcentration(_assetIn, _protocolAUM),\\n      usdValue: getQuote(_assetIn, _amountIn),\\n      sharesBeforeTax: 0,\\n      taxableAmount: 0,\\n      taxInUSD: 0,\\n      sharesAfterTax: 0\\n    });\\n\\n    ProcessParam memory processParamOut = ProcessParam({\\n      targetConc: assetInfo[_assetOut].targetConcentration,\\n      currentConc: _getAssetConcentration(_assetOut, _protocolAUM),\\n      usdValue: 0,\\n      sharesBeforeTax: 0,\\n      taxableAmount: 0,\\n      taxInUSD: 0,\\n      sharesAfterTax: 0\\n    });\\n\\n    uint256 usdAmountOut = _getSwapRate(\\n      processParamIn,\\n      processParamOut,\\n      _protocolAUM,\\n      protocolData.taxFactor,\\n      assetInfo[_assetIn].incentiveFactor,\\n      assetInfo[_assetOut].incentiveFactor\\n    );\\n\\n    return (\\n      1e18 * usdAmountOut / getQuote(_assetOut, 1e18),\\n      int256(processParamIn.usdValue) - int256(usdAmountOut)\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            INTERNAL\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Return asset concentration with keeper AUM\\n  ///@param _asset asset address\\n  ///@param _protocolAUM AUM given by keeper\\n  ///@return current concentration for an asset\\n  ///@dev    If price is inconsistent or not available, returns 0 -> needs proper handling\\n  function _getAssetConcentration(address _asset, uint256 _protocolAUM)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // To avoid division by 0\\n    if (_protocolAUM == 0 && protocolData.aum == 0) return 0;\\n    return (1e20 * getAssetAUM(_asset)) / _protocolAUM;\\n  }\\n\\n  ///@notice Perform the comparison between AUM registry and one given by Keeper, return limited AUM\\n  /// if out of bounds\\n  function _AumIsInRange(uint256 _keeperAUM) internal view returns (bool, uint256) {\\n    uint16 maxAumDeviationAllowed = protocolData.maxAumDeviationAllowed;\\n    uint256 currAum = protocolData.aum;\\n    uint256 lowerBound = PercentageMath.percentSub(currAum, maxAumDeviationAllowed);\\n    uint256 upperBound = PercentageMath.percentAdd(currAum, maxAumDeviationAllowed);\\n    if (_keeperAUM < lowerBound) return (false, lowerBound);\\n    if (_keeperAUM > upperBound) return (false, upperBound);\\n    return (true, _keeperAUM);\\n  }\\n\\n  function _checkIsSupported(address[] memory _assets) internal view {\\n    address notSupportedAsset = isAnyNotSupported(_assets);\\n    if (notSupportedAsset != address(0x0)) revert AssetNotSupported(notSupportedAsset);\\n  }\\n\\n  function _checkIsNotQuarantined(address[] memory _assets) internal view {\\n    address quarantinedAsset = IRelayer(RELAYER).isAnyQuarantined(_assets);\\n    if (quarantinedAsset != address(0x0)) revert AssetIsQuarantined(quarantinedAsset);\\n  }\\n\\n  function _checkIfSwapAllowed(address[] memory _assets) internal view {\\n    address notAllowedAsset = isSwapAllowed(_assets);\\n    if (notAllowedAsset != address(0x0)) revert SwapDisabled(notAllowedAsset);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            MODIFIERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  modifier onlyRelayer() {\\n    if (msg.sender != RELAYER) revert Unauthorized();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\n///@title Ownable contract\\n/// @notice Simple 2step owner authorization combining solmate and OZ implementation\\nabstract contract Ownable {\\n  /*//////////////////////////////////////////////////////////////\\n                             STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Address of the owner\\n  address public owner;\\n\\n  ///@notice Address of the pending owner\\n  address public pendingOwner;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  event OwnershipTransferred(address indexed user, address indexed newOner);\\n  event OwnershipTransferStarted(address indexed user, address indexed newOwner);\\n  event OwnershipTransferCanceled(address indexed pendingOwner);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 ERROR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  error Unauthorized();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  constructor(address _owner) {\\n    owner = _owner;\\n\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Transfer ownership to a new address\\n  ///@param newOwner address of the new owner\\n  ///@dev newOwner have to acceptOwnership\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    pendingOwner = newOwner;\\n    emit OwnershipTransferStarted(msg.sender, pendingOwner);\\n  }\\n\\n  ///@notice NewOwner accept the ownership, it transfer the ownership to newOwner\\n  function acceptOwnership() external {\\n    if (msg.sender != pendingOwner) revert Unauthorized();\\n    address oldOwner = owner;\\n    owner = pendingOwner;\\n    delete pendingOwner;\\n    emit OwnershipTransferred(oldOwner, owner);\\n  }\\n\\n  ///@notice Cancel the ownership transfer\\n  function cancelTransferOwnership() external onlyOwner {\\n    emit OwnershipTransferCanceled(pendingOwner);\\n    delete pendingOwner;\\n  }\\n\\n  modifier onlyOwner() {\\n    if (msg.sender != owner) revert Unauthorized();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernanceModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IGovernanceModule {\\n  function fyde() external view returns (address);\\n\\n  function proxyImplementation() external view returns (address);\\n\\n  function proxyBalance(address proxy, address asset) external view returns (uint256);\\n\\n  function strsyBalance(address _user, address _govToken) external view returns (uint256 balance);\\n\\n  function assetToStrsy(address _asset) external view returns (address);\\n\\n  function userToProxy(address _user) external view returns (address);\\n\\n  function proxyToUser(address _proxy) external view returns (address);\\n\\n  function isOnGovernanceWhitelist(address _asset) external view returns (bool);\\n\\n  function getAllGovUsers() external view returns (address[] memory);\\n\\n  function isAnyNotOnGovWhitelist(address[] calldata _assets) external view returns (address);\\n\\n  function getUserGTAllowance(uint256 _TRSYAmount, address _token) external view returns (uint256);\\n\\n  function govDeposit(\\n    address _depositor,\\n    address[] calldata _govToken,\\n    uint256[] calldata _amount,\\n    uint256[] calldata _amountTRSY,\\n    uint256 _totalTRSY\\n  ) external returns (address proxy);\\n\\n  function govWithdraw(\\n    address _user,\\n    address _asset,\\n    uint256 _amountToWithdraw,\\n    uint256 _trsyToBurn\\n  ) external;\\n\\n  function onStrsyTransfer(address sender, address _recipient) external;\\n\\n  function unstakeGov(uint256 _amount, address _asset) external;\\n\\n  function rebalanceProxy(address _proxy, address _asset, address[] memory _usersToRebalance)\\n    external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/core/TRSY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\n///@title TRSY contract\\n///@notice Handle the logic for minting and burning TRSY shares\\nabstract contract TRSY is ERC20 {\\n  /*//////////////////////////////////////////////////////////////\\n                                 CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  constructor() ERC20(\\\"TRSY\\\", \\\"TRSY\\\", 18) {}\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Convert the value of deposit into share of the protocol\\n  ///@param _usdValue usd value of the deposit\\n  ///@param _usdAUM AUM of the protocol in USD (given by keeper)\\n  ///@return TSRY share for an USD deposit\\n  function _convertToShares(uint256 _usdValue, uint256 _usdAUM) internal view returns (uint256) {\\n    uint256 supply = totalSupply;\\n    return supply == 0 ? _usdValue : (_usdValue * supply) / _usdAUM;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/core/AssetRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AssetInfo} from \\\"./Structs.sol\\\";\\nimport {AddressRegistry} from \\\"./AddressRegistry.sol\\\";\\nimport {ProtocolState} from \\\"./ProtocolState.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {BaseChecker} from \\\"../utils/BaseChecker.sol\\\";\\nimport {IERC20Metadata} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IUniswapV3PoolImmutables} from\\n  \\\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\\\";\\n\\nimport {IRelayer} from \\\"src/interfaces/IRelayer.sol\\\";\\n\\n///@title AssetRegistry contract\\n///@notice Handle logic and state for logging informations regarding the assets\\nabstract contract AssetRegistry is Ownable, BaseChecker, AddressRegistry, ProtocolState {\\n  /*//////////////////////////////////////////////////////////////\\n                                 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Asset list;\\n  address[] public assetsList;\\n\\n  ///@notice last block incentiveFactor was updated, safety measure\\n  uint128 public lastIncentiveUpdateBlock;\\n  int128 public incentiveCap;\\n\\n  ///@notice Map asset address to struct containing info\\n  mapping(address => AssetInfo) public assetInfo;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 ERROR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  error PoolNotValid();\\n  error AssetSupported(address asset);\\n  error NotNormalized();\\n  error NotZero();\\n  error CoolDownPeriodActive();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  event AssetAdded(address _asset);\\n  event IncentiveFactorUpdated(address indexed asset, int72 incentiveFactor);\\n  event TargetConcentrationsUpdated();\\n  event UniswapPoolUpdated(address indexed asset, address uniswapPool);\\n  event AssetRemoved(address indexed asset);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 ADD ASSETS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Add assets in batch\\n  ///@param _assets Array of assets to add\\n  ///@param _uniswapPools Array of address of uniswap Pool\\n  ///@dev   only uniswap pool and incentive factor are relevant in assetsInfo, the rest is retrieved\\n  /// on-chain\\n  function addAssets(address[] calldata _assets, address[] calldata _uniswapPools)\\n    external\\n    onlyOwner\\n  {\\n    if (_assets.length != _uniswapPools.length) revert InconsistentLengths();\\n\\n    for (uint256 i; i < _assets.length; ++i) {\\n      _addAsset(_assets[i], _uniswapPools[i]);\\n    }\\n  }\\n\\n  function _addAsset(address _asset, address _uniswapPool) private {\\n    if (assetInfo[_asset].isSupported) revert AssetSupported(_asset);\\n\\n    assetInfo[_asset].isSupported = true;\\n    assetInfo[_asset].assetDecimals = IERC20Metadata(_asset).decimals();\\n\\n    setUniswapPool(_asset, _uniswapPool);\\n\\n    assetsList.push(_asset);\\n\\n    emit AssetAdded(_asset);\\n  }\\n\\n  ///@notice Removes asset from the protocol whitelist\\n  ///@param _assetIdx index of the asset in the assets array\\n  ///@dev only possible if there are no tokens of the asset held by the protocol anymore\\n  function removeAsset(uint256 _assetIdx) external onlyOwner {\\n    address asset = assetsList[_assetIdx];\\n    if (totalAssetAccounting[asset] != 0) revert NotZero();\\n    if (assetInfo[asset].targetConcentration != 0) revert NotZero();\\n    delete assetInfo[asset];\\n    assetsList[_assetIdx] = assetsList[assetsList.length - 1];\\n    assetsList.pop();\\n    emit AssetRemoved(asset);\\n  }\\n  /*//////////////////////////////////////////////////////////////\\n                                 SETTER\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Set target concentration for all asset\\n  ///@param _targetConcentrations Target concentration (1e18 -> 1%)\\n  ///@dev 1e18 = 1%\\n  ///@dev targetConcentrations must have same length as assetsList -> can only update all conc at\\n  // once to enforce normalization\\n  function setTargetConcentrations(uint72[] calldata _targetConcentrations) external onlyOwner {\\n    if (_targetConcentrations.length != assetsList.length) revert InconsistentLengths();\\n    uint72 sum;\\n    for (uint256 i; i < _targetConcentrations.length; i++) {\\n      sum += _targetConcentrations[i];\\n    }\\n    if (sum > (1e20 + 1e10) || sum < (1e20 - 1e10)) revert NotNormalized();\\n\\n    for (uint256 i; i < _targetConcentrations.length; i++) {\\n      assetInfo[assetsList[i]].targetConcentration = _targetConcentrations[i];\\n    }\\n    emit TargetConcentrationsUpdated();\\n  }\\n\\n  ///@notice Set target concentration for an asset\\n  ///@param _asset Asset address\\n  ///@param _incentiveFactor IncentiveFactor (1e18 -> 1%)\\n  ///@dev 1e18 = 1%, max incentiveCap\\n  ///@dev Can only be called every 5 blocks, safety measure in case of compromised IncentiveManager\\n  function setIncentiveFactor(address _asset, int72 _incentiveFactor) external onlyIncentiveManager {\\n    if (int128(_incentiveFactor) > incentiveCap) revert ValueOutOfBounds();\\n    if (block.number < uint256(lastIncentiveUpdateBlock) + 5) revert CoolDownPeriodActive();\\n    lastIncentiveUpdateBlock = uint128(block.number);\\n    assetInfo[_asset].incentiveFactor = _incentiveFactor;\\n    emit IncentiveFactorUpdated(_asset, _incentiveFactor);\\n  }\\n\\n  ///@notice Set maximum incentive factor\\n  ///@param _incentiveCap maximum incentive factor\\n  ///@dev Capped at 1e20 == 100%\\n  function setIncentiveCap(int128 _incentiveCap) external onlyOwner {\\n    if (_incentiveCap > 1e20) revert ValueOutOfBounds();\\n    incentiveCap = _incentiveCap;\\n  }\\n\\n  ///@notice Set uniswap pool for an asset\\n  ///@param _asset Asset address\\n  ///@param _uniswapPool Uniswap pool address\\n  function setUniswapPool(address _asset, address _uniswapPool) public onlyOwner {\\n    if (_uniswapPool == address(0x0)) {\\n      assetInfo[_asset].uniswapPool = _uniswapPool;\\n    } else {\\n      address token0 = IUniswapV3PoolImmutables(_uniswapPool).token0();\\n      address token1 = IUniswapV3PoolImmutables(_uniswapPool).token1();\\n      address quoteToken;\\n\\n      if (token0 == _asset) quoteToken = token1;\\n      else if (token1 == _asset) quoteToken = token0;\\n      else revert PoolNotValid();\\n\\n      assetInfo[_asset].uniswapPool = _uniswapPool;\\n      assetInfo[_asset].uniswapQuoteToken = quoteToken;\\n      assetInfo[_asset].quoteTokenDecimals = IERC20Metadata(quoteToken).decimals();\\n    }\\n    emit UniswapPoolUpdated(_asset, _uniswapPool);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                GETTER\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Get isSupported for an asset\\n  ///@param _assets asset addresses\\n  ///@return address of first not supported asset or address(0x0) if all supported\\n  function isAnyNotSupported(address[] memory _assets) public view returns (address) {\\n    for (uint256 i; i < _assets.length; i++) {\\n      if (!assetInfo[_assets[i]].isSupported) return _assets[i];\\n    }\\n    return address(0x0);\\n  }\\n\\n  ///@notice Get isSwapAllowed for an asset array\\n  ///@param _assets asset addresses\\n  ///@return address of first not supported asset or address(0x0) if all supported\\n  function isSwapAllowed(address[] memory _assets) public view returns (address) {\\n    for (uint256 i; i < _assets.length; i++) {\\n      if (assetInfo[_assets[i]].incentiveFactor == -100e18) return _assets[i];\\n    }\\n    return address(0x0);\\n  }\\n\\n  ///@notice Get number of asset decimals\\n  ///@param _asset Asset address\\n  ///@return number of decimals\\n  function getAssetDecimals(address _asset) external view returns (uint8) {\\n    return assetInfo[_asset].assetDecimals;\\n  }\\n\\n  ///@notice Get number of assets in protocol\\n  function getAssetsListLength() public view returns (uint256) {\\n    return assetsList.length;\\n  }\\n\\n  ///@dev caller has to be whitelisted manager on relayer\\n  modifier onlyIncentiveManager() {\\n    if (!IRelayer(RELAYER).isIncentiveManager(msg.sender)) revert Unauthorized();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/core/AddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// Utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport {IGovernanceModule} from \\\"../interfaces/IGovernanceModule.sol\\\";\\n\\n///@title AddressRegistry contract\\n///@notice Handle state and logic for external authorized call (mainly keeper) and the oracle module\\nabstract contract AddressRegistry is Ownable {\\n  /*//////////////////////////////////////////////////////////////\\n                            STORAGE\\n  //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Address of the oracle module\\n  IOracle public oracleModule;\\n\\n  ///@notice Governance Registry contract address interface\\n  IGovernanceModule public immutable GOVERNANCE_MODULE;\\n\\n  address public RELAYER;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  event OracleModuleUpdated(address indexed oracleModule);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        CONSTRUCTOR\\n  //////////////////////////////////////////////////////////////*/\\n\\n  constructor(address _govModule, address _relayer) {\\n    GOVERNANCE_MODULE = IGovernanceModule(_govModule);\\n    RELAYER = _relayer;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            ACCESS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function setRelayer(address _relayer) external onlyOwner {\\n    RELAYER = _relayer;\\n  }\\n\\n  ///@notice Set the oracle address\\n  function setOracleModule(address _oracle) public onlyOwner {\\n    oracleModule = IOracle(_oracle);\\n    emit OracleModuleUpdated(_oracle);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/core/ProtocolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolData} from \\\"./Structs.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n///@title ProtocolState contract\\n///@notice Protocol data storage\\nabstract contract ProtocolState is Ownable {\\n  /*//////////////////////////////////////////////////////////////\\n                                 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Protocol data\\n  ProtocolData public protocolData;\\n\\n  ///@notice Number of token in the protocol\\n  mapping(address => uint256) public totalAssetAccounting;\\n\\n  ///@notice Number of token in the proxy\\n  mapping(address => uint256) public proxyAssetAccounting;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  error ValueOutOfBounds();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  event ProtocolAumUpdated(uint256);\\n  event MaxAumDeviationAllowedUpdated(uint16);\\n  event TaxFactorUpdated(uint72);\\n  event ManagementFeeUpdated(uint72);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 GETTER\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Get number of token in the standard pool\\n  ///@param _asset asset address\\n  ///@return number of token in standard pool\\n  function standardAssetAccounting(address _asset) public view returns (uint256) {\\n    return totalAssetAccounting[_asset] - proxyAssetAccounting[_asset];\\n  }\\n\\n  ///@notice Get protocolAUM in USD\\n  ///@return protocol AUM\\n  function getProtocolAUM() external view returns (uint256) {\\n    return protocolData.aum;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 SETTER\\n    //////////////////////////////////////////////////////////////*/\\n\\n  ///@notice Change the AUM's comparison deviation threshold\\n  ///@param threshold new threshold\\n  ///@dev 200 = 2 % of deviation\\n  function updateMaxAumDeviationAllowed(uint16 threshold) public onlyOwner {\\n    // We bound the threshold to 0.1 % to 5%\\n    if (threshold < 10 || threshold > 500) revert ValueOutOfBounds();\\n    protocolData.maxAumDeviationAllowed = threshold;\\n    emit MaxAumDeviationAllowedUpdated(threshold);\\n  }\\n\\n  ///@notice set the tax factor\\n  ///@param _taxFactor new tax factor\\n  ///@dev 100% = 100e18\\n  function updateTaxFactor(uint72 _taxFactor) public onlyOwner {\\n    if (_taxFactor > 100e18) revert ValueOutOfBounds();\\n    protocolData.taxFactor = _taxFactor;\\n    emit TaxFactorUpdated(_taxFactor);\\n  }\\n\\n  ///@notice change annual management fee\\n  ///@param _annualFee new annual fee\\n  ///@dev 100% = 1e18\\n  function updateManagementFee(uint72 _annualFee) public onlyOwner {\\n    // We bound the fee to 0 % to 5%\\n    if (_annualFee > 5e16) revert ValueOutOfBounds();\\n    protocolData.managementFee = _annualFee;\\n    emit ManagementFeeUpdated(_annualFee);\\n  }\\n\\n  ///@notice Update last fee collection time to current timestamp\\n  function _updateLastFeeCollectionTime() internal {\\n    protocolData.lastFeeCollectionTime = uint48(block.timestamp);\\n  }\\n\\n  ///@notice Update the protocol AUM\\n  function _updateProtocolAUM(uint256 _aum) internal {\\n    protocolData.aum = _aum;\\n    emit ProtocolAumUpdated(_aum);\\n  }\\n\\n  function _increaseAssetTotalAmount(address[] memory _assets, uint256[] memory _amounts) internal {\\n    for (uint256 i; i < _assets.length; i++) {\\n      _increaseAssetTotalAmount(_assets[i], _amounts[i]);\\n    }\\n  }\\n\\n  function _increaseAssetTotalAmount(address _asset, uint256 _amount) internal {\\n    totalAssetAccounting[_asset] += _amount;\\n  }\\n\\n  function _increaseAssetProxyAmount(address[] memory _assets, uint256[] memory _amounts) internal {\\n    for (uint256 i; i < _assets.length; i++) {\\n      proxyAssetAccounting[_assets[i]] += _amounts[i];\\n    }\\n  }\\n\\n  function _decreaseAssetTotalAmount(address[] memory _assets, uint256[] memory _amounts) internal {\\n    for (uint256 i; i < _assets.length; i++) {\\n      _decreaseAssetTotalAmount(_assets[i], _amounts[i]);\\n    }\\n  }\\n\\n  function _decreaseAssetTotalAmount(address _asset, uint256 _amount) internal {\\n    totalAssetAccounting[_asset] -= _amount;\\n  }\\n\\n  function _decreaseAssetProxyAmount(address[] memory _assets, uint256[] memory _amounts) internal {\\n    for (uint256 i; i < _assets.length; i++) {\\n      proxyAssetAccounting[_assets[i]] -= _amounts[i];\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/core/Tax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProcessParam} from \\\"./Structs.sol\\\";\\nimport {MathUtil} from \\\"../utils/MathUtil.sol\\\";\\nimport \\\"synthetix-v3/utils/core-contracts/contracts/utils/SafeCast.sol\\\";\\n\\n///@title Tax contract\\n///@notice Handle tax logic, for either a deposit or withdraw compute if the action is unabalacing\\n/// the protocol\\n///        if this is the case, the protocol will compute a tax applied on deposit or withdraw by\\n/// reducing the number of shares to mint\\n///        or by increasing the number of shares to burn. This tax is then minted to fyde contract.\\n/// The main logic is that for each action, we compute a taxable amount which is the amount that\\n/// unbalance the protocol for a given deposit or withdraw,\\n/// then we apply the tax on this taxable amount.\\n/// For the swap the logic is the same, we compute the tax and incentive for assetIn and that give\\n/// the value of assetOut,\\n/// for this value we compute the tax and incentive for assetOut.\\n/// SwapRate can be greater for assetOut in case there is no tax and some incentives, the same if no\\n/// tax no incentive, or lower if there is tax and no incentive.\\nabstract contract Tax {\\n  using SafeCastU256 for uint256;\\n  using SafeCastI256 for int256;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 MAIN\\n    //////////////////////////////////////////////////////////////*/\\n\\n  function _getDepositTax(\\n    ProcessParam memory processParam,\\n    uint256 protocolAUM,\\n    uint256 totalUsdDeposit,\\n    uint256 taxFactor\\n  ) internal pure returns (ProcessParam memory) {\\n    if (processParam.targetConc == 0) {\\n      processParam.taxInUSD = processParam.usdValue;\\n      return processParam;\\n    }\\n    if (taxFactor == 0) return processParam;\\n    processParam = _computeDepositTaxableAmount(processParam, protocolAUM, totalUsdDeposit);\\n    if (processParam.taxableAmount == 0) return processParam;\\n    processParam = _computeDepositTaxInUSD(processParam, protocolAUM, totalUsdDeposit, taxFactor);\\n    return processParam;\\n  }\\n\\n  function _getWithdrawTax(\\n    ProcessParam memory processParam,\\n    uint256 protocolAUM,\\n    uint256 totalUsdWithdraw,\\n    uint256 taxFactor\\n  ) internal pure returns (ProcessParam memory) {\\n    if (taxFactor == 0) return processParam;\\n    processParam = _computeWithdrawTaxableAmount(processParam, protocolAUM, totalUsdWithdraw);\\n    if (processParam.taxableAmount == 0) return processParam;\\n    processParam = _computeWithdrawTaxInUSD(processParam, protocolAUM, totalUsdWithdraw, taxFactor);\\n    return processParam;\\n  }\\n\\n  function _getSwapRate(\\n    ProcessParam memory processParamIn,\\n    ProcessParam memory processParamOut,\\n    uint256 protocolAUM,\\n    uint256 taxFactor,\\n    int256 incentiveFactorIn,\\n    int256 incentiveFactorOut\\n  ) internal pure returns (uint256) {\\n    // Compute tax on deposit\\n    processParamIn = _getDepositTax(processParamIn, protocolAUM, 0, taxFactor);\\n\\n    int256 valIn = incentiveFactorIn\\n      * int256(processParamIn.usdValue - processParamIn.taxableAmount) / int256(1e20);\\n\\n    // usdValue adjusted with potential tax and incentive\\n    uint256 withdrawValOut = valIn >= 0\\n      ? processParamIn.usdValue - processParamIn.taxInUSD + valIn.toUint()\\n      : processParamIn.usdValue - processParamIn.taxInUSD - (-1 * valIn).toUint();\\n\\n    processParamOut.usdValue = withdrawValOut;\\n    processParamOut = _getWithdrawTax(processParamOut, protocolAUM, 0, taxFactor);\\n\\n    // usdValueOut adjusted with potential tax and incentive\\n    int256 valOut =\\n      incentiveFactorOut * int256(withdrawValOut - processParamOut.taxableAmount) / 1e20;\\n\\n    uint256 usdValOut = valOut >= 0\\n      ? withdrawValOut - processParamOut.taxInUSD + valOut.toUint()\\n      : withdrawValOut - processParamOut.taxInUSD - (-1 * valOut).toUint();\\n\\n    return usdValOut;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 DEPOSIT\\n    //////////////////////////////////////////////////////////////*/\\n  function _computeDepositTaxableAmount(\\n    ProcessParam memory processParam,\\n    uint256 protocolAUM,\\n    uint256 totalUsdDeposit\\n  ) internal pure returns (ProcessParam memory) {\\n    int256 deltaConc = protocolAUM.toInt()\\n      * (processParam.currentConc.toInt() - processParam.targetConc.toInt()) / 1e20;\\n    int256 targetDeposit = totalUsdDeposit != 0\\n      ? processParam.targetConc.toInt() * totalUsdDeposit.toInt() / 1e20\\n      : int256(0);\\n    int256 tax = processParam.usdValue.toInt() + deltaConc - targetDeposit;\\n    processParam.taxableAmount =\\n      MathUtil.min(processParam.usdValue.toInt(), MathUtil.max(tax, int256(0))).toUint();\\n    return processParam;\\n  }\\n\\n  function _computeDepositTaxInUSD(\\n    ProcessParam memory processParam,\\n    uint256 protocolAUM,\\n    uint256 totalUsdDeposit,\\n    uint256 taxFactor\\n  ) internal pure returns (ProcessParam memory) {\\n    uint256 numerator = (protocolAUM * processParam.currentConc / 1e20) + processParam.usdValue;\\n    uint256 denominator = (protocolAUM + totalUsdDeposit) * processParam.targetConc / 1e20;\\n    uint256 eq = (1e18 * numerator / denominator) - 1e18;\\n    uint256 tmpRes = MathUtil.min(eq, 1e18);\\n    uint256 taxPerc = taxFactor * tmpRes / 1e20; // 1e20 for applying expressing tax as a percentage\\n    processParam.taxInUSD = processParam.taxableAmount * taxPerc / 1e18;\\n    return processParam;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 WITHDRAW\\n    //////////////////////////////////////////////////////////////*/\\n  function _computeWithdrawTaxableAmount(\\n    ProcessParam memory processParam,\\n    uint256 protocolAUM,\\n    uint256 totalUsdWithdraw\\n  ) internal pure returns (ProcessParam memory) {\\n    int256 deltaConc = protocolAUM.toInt()\\n      * (processParam.currentConc.toInt() - processParam.targetConc.toInt()) / 1e20;\\n    int256 targetDeposit = processParam.targetConc.toInt() * totalUsdWithdraw.toInt() / 1e20;\\n    int256 tax = processParam.usdValue.toInt() - deltaConc - targetDeposit;\\n    processParam.taxableAmount =\\n      MathUtil.min(processParam.usdValue.toInt(), MathUtil.max(tax, int256(0))).toUint();\\n    return processParam;\\n  }\\n\\n  function _computeWithdrawTaxInUSD(\\n    ProcessParam memory processParam,\\n    uint256 protocolAUM,\\n    uint256 totalUsdWithdraw,\\n    uint256 taxFactor\\n  ) internal pure returns (ProcessParam memory) {\\n    int256 numerator =\\n      protocolAUM.toInt() * processParam.currentConc.toInt() / 1e20 - processParam.usdValue.toInt();\\n    int256 denominator =\\n      processParam.targetConc.toInt() * (protocolAUM.toInt() - totalUsdWithdraw.toInt()) / 1e20;\\n    int256 tmpRes = 1e18 - (1e18 * numerator / denominator);\\n    uint256 tmpRes2 = MathUtil.min(tmpRes.toUint(), 1e18);\\n    uint256 taxPerc = taxFactor * tmpRes2 / 1e20; // 1e20 for applying expressing tax as a\\n      // percentage\\n    processParam.taxInUSD = processParam.taxableAmount * taxPerc / 1e18;\\n    return processParam;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/core/GovernanceAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// Import from Core /////\\nimport {AddressRegistry} from \\\"./AddressRegistry.sol\\\";\\nimport {AssetRegistry} from \\\"./AssetRegistry.sol\\\";\\nimport {ProtocolState} from \\\"./ProtocolState.sol\\\";\\nimport {TRSY} from \\\"./TRSY.sol\\\";\\n\\n/// Structs /////\\nimport {RebalanceParam} from \\\"./Structs.sol\\\";\\n\\n// Interface\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n///@title GovernanceAccess contract\\n///@notice Exposes functions for the governance module\\nabstract contract GovernanceAccess is TRSY, AddressRegistry, ProtocolState, AssetRegistry {\\n  using SafeERC20 for IERC20;\\n\\n  ///@notice Called by the governance module in order to transfer asset when proxy is funded\\n  ///@param _asset asset address\\n  ///@param _recipient user address\\n  ///@param _amount number of token\\n  function transferAsset(address _asset, address _recipient, uint256 _amount)\\n    external\\n    onlyGovernance\\n  {\\n    IERC20(_asset).safeTransfer(_recipient, _amount);\\n  }\\n\\n  ///@notice Called by the governance module in order to update proxy Accounting after rebalancing\\n  ///@param _asset asset address\\n  ///@param _amount number of token\\n  function updateAssetProxyAmount(address _asset, uint256 _amount) external onlyGovernance {\\n    proxyAssetAccounting[_asset] = _amount;\\n  }\\n\\n  ///@notice Called by the governance module in order get all variables for rebalancing in one call\\n  /// (save gas)\\n  ///@param _asset asset address\\n  ///@return RebalanceParam struct with rebalance parameters\\n  function getRebalanceParams(address _asset) external view returns (RebalanceParam memory) {\\n    return RebalanceParam(\\n      _asset,\\n      totalAssetAccounting[_asset],\\n      proxyAssetAccounting[_asset],\\n      getQuote(_asset, 1e18),\\n      0,\\n      1e18 * protocolData.aum / totalSupply\\n    );\\n  }\\n\\n  function getQuote(address _asset, uint256 _amount) public view virtual returns (uint256);\\n\\n  modifier onlyGovernance() {\\n    if (msg.sender != address(GOVERNANCE_MODULE)) revert Unauthorized();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/utils/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary PercentageMath {\\n  ///\\tCONSTANTS ///\\n\\n  uint256 internal constant PERCENTAGE_FACTOR = 1e4; // 100.00%\\n  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4; // 50.00%\\n  uint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\\n  uint256 internal constant MAX_UINT256_MINUS_HALF_PERCENTAGE = 2 ** 256 - 1 - 0.5e4;\\n\\n  /// INTERNAL ///\\n\\n  ///@notice Check if value are within the range\\n  function _isInRange(uint256 valA, uint256 valB, uint256 deviationThreshold)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    uint256 lowerBound = percentSub(valA, deviationThreshold);\\n    uint256 upperBound = percentAdd(valA, deviationThreshold);\\n    if (valB < lowerBound || valB > upperBound) return false;\\n    else return true;\\n  }\\n\\n  /// @notice Executes a percentage addition (x * (1 + p)), rounded up.\\n  /// @param x The value to which to add the percentage.\\n  /// @param percentage The percentage of the value to add.\\n  /// @return y The result of the addition.\\n  function percentAdd(uint256 x, uint256 percentage) internal pure returns (uint256 y) {\\n    // Must revert if\\n    // PERCENTAGE_FACTOR + percentage > type(uint256).max\\n    //     or x * (PERCENTAGE_FACTOR + percentage) + HALF_PERCENTAGE_FACTOR > type(uint256).max\\n    // <=> percentage > type(uint256).max - PERCENTAGE_FACTOR\\n    //     or x > (type(uint256).max - HALF_PERCENTAGE_FACTOR) / (PERCENTAGE_FACTOR + percentage)\\n    // Note: PERCENTAGE_FACTOR + percentage >= PERCENTAGE_FACTOR > 0\\n    assembly {\\n      y := add(PERCENTAGE_FACTOR, percentage) // Temporary assignment to save gas.\\n\\n      if or(\\n        gt(percentage, sub(MAX_UINT256, PERCENTAGE_FACTOR)),\\n        gt(x, div(MAX_UINT256_MINUS_HALF_PERCENTAGE, y))\\n      ) { revert(0, 0) }\\n\\n      y := div(add(mul(x, y), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n    }\\n  }\\n\\n  /// @notice Executes a percentage subtraction (x * (1 - p)), rounded up.\\n  /// @param x The value to which to subtract the percentage.\\n  /// @param percentage The percentage of the value to subtract.\\n  /// @return y The result of the subtraction.\\n  function percentSub(uint256 x, uint256 percentage) internal pure returns (uint256 y) {\\n    // Must revert if\\n    // percentage > PERCENTAGE_FACTOR\\n    //     or x * (PERCENTAGE_FACTOR - percentage) + HALF_PERCENTAGE_FACTOR > type(uint256).max\\n    // <=> percentage > PERCENTAGE_FACTOR\\n    //     or ((PERCENTAGE_FACTOR - percentage) > 0 and x > (type(uint256).max -\\n    // HALF_PERCENTAGE_FACTOR) / (PERCENTAGE_FACTOR - percentage))\\n    assembly {\\n      y := sub(PERCENTAGE_FACTOR, percentage) // Temporary assignment to save gas.\\n\\n      if or(\\n        gt(percentage, PERCENTAGE_FACTOR), mul(y, gt(x, div(MAX_UINT256_MINUS_HALF_PERCENTAGE, y)))\\n      ) { revert(0, 0) }\\n\\n      y := div(add(mul(x, y), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {AssetInfo} from \\\"../core/Structs.sol\\\";\\n\\ninterface IOracle {\\n  function getPriceInUSD(address, AssetInfo calldata) external view returns (uint256);\\n\\n  function getGweiPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/BaseChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nabstract contract BaseChecker {\\n  error ZeroParameter();\\n  error InconsistentLengths();\\n\\n  function _checkZeroValue(uint256 val) internal pure {\\n    if (val == 0) revert ZeroParameter();\\n  }\\n\\n  function _checkZeroAddress(address addr) internal pure {\\n    if (addr == address(0x0)) revert ZeroParameter();\\n  }\\n\\n  function _checkForConsistentLength(address[] memory arr1, uint256[] memory arr2) internal pure {\\n    if (arr1.length != arr2.length) revert InconsistentLengths();\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"src/utils/MathUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(int256 a, int256 b) internal pure returns (int256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(int256 a, int256 b) internal pure returns (int256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * Utilities that convert numeric types avoiding silent overflows.\\n */\\nimport \\\"./SafeCast/SafeCastU32.sol\\\";\\nimport \\\"./SafeCast/SafeCastI32.sol\\\";\\nimport \\\"./SafeCast/SafeCastI24.sol\\\";\\nimport \\\"./SafeCast/SafeCastU56.sol\\\";\\nimport \\\"./SafeCast/SafeCastI56.sol\\\";\\nimport \\\"./SafeCast/SafeCastU64.sol\\\";\\nimport \\\"./SafeCast/SafeCastI128.sol\\\";\\nimport \\\"./SafeCast/SafeCastI256.sol\\\";\\nimport \\\"./SafeCast/SafeCastU128.sol\\\";\\nimport \\\"./SafeCast/SafeCastU160.sol\\\";\\nimport \\\"./SafeCast/SafeCastU256.sol\\\";\\nimport \\\"./SafeCast/SafeCastAddress.sol\\\";\\nimport \\\"./SafeCast/SafeCastBytes32.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastU32.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastU32 {\\n    error OverflowUint32ToInt32();\\n\\n    function toInt(uint32 x) internal pure returns (int32) {\\n        // -------------------------------o=========>----------------------\\n        // ----------------------<========o========>x----------------------\\n        if (x > uint32(type(int32).max)) {\\n            revert OverflowUint32ToInt32();\\n        }\\n\\n        return int32(x);\\n    }\\n\\n    function to256(uint32 x) internal pure returns (uint256) {\\n        return uint256(x);\\n    }\\n\\n    function to56(uint32 x) internal pure returns (uint56) {\\n        return uint56(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastI32.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastI32 {\\n    error OverflowInt32ToUint32();\\n\\n    function toUint(int32 x) internal pure returns (uint32) {\\n        // ----------------------<========o========>----------------------\\n        // ----------------------xxxxxxxxxo=========>----------------------\\n        if (x < 0) {\\n            revert OverflowInt32ToUint32();\\n        }\\n\\n        return uint32(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastI24.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastI24 {\\n    function to256(int24 x) internal pure returns (int256) {\\n        return int256(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastU56.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastU56 {\\n    error OverflowUint56ToInt56();\\n\\n    function toInt(uint56 x) internal pure returns (int56) {\\n        // -------------------------------o=========>----------------------\\n        // ----------------------<========o========>x----------------------\\n        if (x > uint56(type(int56).max)) {\\n            revert OverflowUint56ToInt56();\\n        }\\n\\n        return int56(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastI56.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastI56 {\\n    error OverflowInt56ToInt24();\\n\\n    function to24(int56 x) internal pure returns (int24) {\\n        // ----------------------<========o========>-----------------------\\n        // ----------------------xxx<=====o=====>xxx-----------------------\\n        if (x < int(type(int24).min) || x > int(type(int24).max)) {\\n            revert OverflowInt56ToInt24();\\n        }\\n\\n        return int24(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastU64.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastU64 {\\n    error OverflowUint64ToInt64();\\n\\n    function toInt(uint64 x) internal pure returns (int64) {\\n        // -------------------------------o=========>----------------------\\n        // ----------------------<========o========>x----------------------\\n        if (x > uint64(type(int64).max)) {\\n            revert OverflowUint64ToInt64();\\n        }\\n\\n        return int64(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastI128.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastI128 {\\n    error OverflowInt128ToUint128();\\n    error OverflowInt128ToInt32();\\n\\n    function toUint(int128 x) internal pure returns (uint128) {\\n        // ----------------<==============o==============>-----------------\\n        // ----------------xxxxxxxxxxxxxxxo===============>----------------\\n        if (x < 0) {\\n            revert OverflowInt128ToUint128();\\n        }\\n\\n        return uint128(x);\\n    }\\n\\n    function to256(int128 x) internal pure returns (int256) {\\n        return int256(x);\\n    }\\n\\n    function to32(int128 x) internal pure returns (int32) {\\n        // ----------------<==============o==============>-----------------\\n        // ----------------xxxxxxxxxxxx<==o==>xxxxxxxxxxxx-----------------\\n        if (x < int(type(int32).min) || x > int(type(int32).max)) {\\n            revert OverflowInt128ToInt32();\\n        }\\n\\n        return int32(x);\\n    }\\n\\n    function zero() internal pure returns (int128) {\\n        return int128(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastI256.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastI256 {\\n    error OverflowInt256ToUint256();\\n    error OverflowInt256ToInt128();\\n    error OverflowInt256ToInt24();\\n\\n    function to128(int256 x) internal pure returns (int128) {\\n        // ----<==========================o===========================>----\\n        // ----xxxxxxxxxxxx<==============o==============>xxxxxxxxxxxxx----\\n        if (x < int256(type(int128).min) || x > int256(type(int128).max)) {\\n            revert OverflowInt256ToInt128();\\n        }\\n\\n        return int128(x);\\n    }\\n\\n    function to24(int256 x) internal pure returns (int24) {\\n        // ----<==========================o===========================>----\\n        // ----xxxxxxxxxxxxxxxxxxxx<======o=======>xxxxxxxxxxxxxxxxxxxx----\\n        if (x < int256(type(int24).min) || x > int256(type(int24).max)) {\\n            revert OverflowInt256ToInt24();\\n        }\\n\\n        return int24(x);\\n    }\\n\\n    function toUint(int256 x) internal pure returns (uint256) {\\n        // ----<==========================o===========================>----\\n        // ----xxxxxxxxxxxxxxxxxxxxxxxxxxxo===============================>\\n        if (x < 0) {\\n            revert OverflowInt256ToUint256();\\n        }\\n\\n        return uint256(x);\\n    }\\n\\n    function zero() internal pure returns (int256) {\\n        return int256(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastU128.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastU128 {\\n    error OverflowUint128ToInt128();\\n\\n    function to256(uint128 x) internal pure returns (uint256) {\\n        return uint256(x);\\n    }\\n\\n    function toInt(uint128 x) internal pure returns (int128) {\\n        // -------------------------------o===============>----------------\\n        // ----------------<==============o==============>x----------------\\n        if (x > uint128(type(int128).max)) {\\n            revert OverflowUint128ToInt128();\\n        }\\n\\n        return int128(x);\\n    }\\n\\n    function toBytes32(uint128 x) internal pure returns (bytes32) {\\n        return bytes32(uint256(x));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastU160.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastU160 {\\n    function to256(uint160 x) internal pure returns (uint256) {\\n        return uint256(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastU256.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastU256 {\\n    error OverflowUint256ToUint128();\\n    error OverflowUint256ToInt256();\\n    error OverflowUint256ToUint64();\\n    error OverflowUint256ToUint32();\\n    error OverflowUint256ToUint160();\\n\\n    function to128(uint256 x) internal pure returns (uint128) {\\n        // -------------------------------o===============================>\\n        // -------------------------------o===============>xxxxxxxxxxxxxxxx\\n        if (x > type(uint128).max) {\\n            revert OverflowUint256ToUint128();\\n        }\\n\\n        return uint128(x);\\n    }\\n\\n    function to64(uint256 x) internal pure returns (uint64) {\\n        // -------------------------------o===============================>\\n        // -------------------------------o======>xxxxxxxxxxxxxxxxxxxxxxxxx\\n        if (x > type(uint64).max) {\\n            revert OverflowUint256ToUint64();\\n        }\\n\\n        return uint64(x);\\n    }\\n\\n    function to32(uint256 x) internal pure returns (uint32) {\\n        // -------------------------------o===============================>\\n        // -------------------------------o===>xxxxxxxxxxxxxxxxxxxxxxxxxxxx\\n        if (x > type(uint32).max) {\\n            revert OverflowUint256ToUint32();\\n        }\\n\\n        return uint32(x);\\n    }\\n\\n    function to160(uint256 x) internal pure returns (uint160) {\\n        // -------------------------------o===============================>\\n        // -------------------------------o==================>xxxxxxxxxxxxx\\n        if (x > type(uint160).max) {\\n            revert OverflowUint256ToUint160();\\n        }\\n\\n        return uint160(x);\\n    }\\n\\n    function toBytes32(uint256 x) internal pure returns (bytes32) {\\n        return bytes32(x);\\n    }\\n\\n    function toInt(uint256 x) internal pure returns (int256) {\\n        // -------------------------------o===============================>\\n        // ----<==========================o===========================>xxxx\\n        if (x > uint256(type(int256).max)) {\\n            revert OverflowUint256ToInt256();\\n        }\\n\\n        return int256(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastAddress {\\n    function toBytes32(address x) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(x)));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/synthetix-v3/utils/core-contracts/contracts/utils/SafeCast/SafeCastBytes32.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title See SafeCast.sol.\\n */\\nlibrary SafeCastBytes32 {\\n    function toAddress(bytes32 x) internal pure returns (address) {\\n        return address(uint160(uint256(x)));\\n    }\\n\\n    function toUint(bytes32 x) internal pure returns (uint) {\\n        return uint(x);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"synthetix-v3/=lib/synthetix-v3/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AssetQuarantined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTrsyStaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInProxy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"ProxyBalanceInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyUpgradeNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageExceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amounttrsy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"UnstakedGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"VoteProxyDeployed\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"TOKEN_IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_asset\",\"type\":\"address[]\"}],\"name\":\"addAssetToGovWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveCurrentProxyVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedProxyVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToStrsy\",\"outputs\":[{\"internalType\":\"contract ITRSY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fyde\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllGovUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getTokenUnbalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getUserGTAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_asset\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountTrsy\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalTrsy\",\"type\":\"uint256\"}],\"name\":\"govDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trsyToBurn\",\"type\":\"uint256\"}],\"name\":\"govWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"isAnyNotOnGovWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOnGovernanceWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"onStrsyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_usersToRebalance\",\"type\":\"address[]\"}],\"name\":\"rebalanceProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"removeAssetFromGovWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fyde\",\"type\":\"address\"}],\"name\":\"setFyde\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"strsyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strsyToAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrsy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAssetToFyde\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"unstakeGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"updateProxyImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GovernanceModule", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x68bb55f0bc0b9a37cd4afb5ec4794fc61651c5a7", "SwarmSource": ""}