/* 
//SPDX-License-Identifier: MIT 

THIS IS NOT FOR THE WEAK


        ===           ===               
        (o o)         (o o)              
    ooO--(_)--Ooo-ooO--(_)--Ooo
  ____     _   _   __  __    ____    
 |  _"\ U |"|u| |U|' \/ '|uU|  _"\ u 
/| | | | \| |\| |\| |\/| |/\| |_) |/ 
 | |_| |\ | |_| | | |  | |  |  __/   
 |____/ u<<\___/  |_|  |_|  |_|      
  |||_  (__) )(  <<,-,,-.   ||>>_    
 (__)_)     (__)  (./  \.) (__)__)   

 
THERE IS A LIQUIDITY GENERATION PRESALE FOR THIS $DUMP TOKEN, IT IS STILL OPEN

DEV GOT 0.15 AT TIME OF DEPLOY,  STARTING TO DO IT NOW; BECAUSE WAITING FOR PRESALE TO FILL IS FOR PUSSIES. 

HOW TO GET PRESALE ? 
SEND ETH TO CONTRACT CREATOR WALLET, 
IF YOU CANNOT FIND IT, 
YOU DO NOT KNOW HOW THIS WORK, 
YOU ARE TOO STUPID TO BE HERE, 
GO AWAY . 
THIS PROJECT IS NOT FOR SMALL BRAIN JEETS.

HOW MUCH TO SEND? 
UP TO YOU NO RULES. 0.001 OR 10E WHATEVER GETS YOU ON


THERE IS NO AIRDROP 
THIS IS THE NEW WAY; WE FUND THE LIQUIDITY POOL, 
THEN YOU GET TO BUY SOME EARLY WHEN LP LAUNCHES.

WE WILL VERIFY CONTRACT, SO YOU CAN READ THIS
WE BURN LIQUIDITY FOREVER AND EVER, LOCK IT FOR 1000 YEARS 
THE ONLY OBJECTIVE OF THIS TOKEN IS TO $DUMP IT

IF YOU WANT AIRDROPS - DO NOT FUND THIS
YOU WILL NOT GET AIRDROPS

FUNDING THIS, YOU ARE JUST FUNDING A COMMUNITY PROJECT.

THERE IS NO OFFICIAL TWITTER, BUT YOU CAN SEE DEV PREVIOUS PROJECT $FUD AT:
https://www.twitter.com/fudcoin420 

DEV TRIED TO MAKE TOKEN THAT WILL GO TO ZERO, BUT IT DID NOT WORK; IT ALMOST MADE MOON THOUGH; BUT STUPID ALPHA CALL FUQ DEV HARD IN THE BACK; THEY COME PUMP AND DUMP.
SO THIS TIME WE WILL BE CAERFUL OF ALPHA CALLS - THEY BAD PEOPLE; TAKE DEV MONEY; ADN DUMP ON COMMUNITY


WE DONT NEED A TWITTER, YOU ALL HAVE A TWITTER, USE IT - THIS WAY EVERYONE IS $DUMP
YOU CAN WORK FOR YOUR BAGS.



DEV IS ONLY GOING TO DEPLOY CONTRACT,  AND LOCK LIQUIDITY FOREVER
EVERYONE BUYS FAIR LAUNCH, BUT DEV HAS 69 TOKENS | ITS FOR CEX

YOU FUND THE PROJECT WITH YOUR EHTERUMS, DEVELOPER FUNDS THE PROJECT WITH HIS TIME FOR CONTRACT AND THINGS

SUPPLY: 69,069
LIQUIDITY POOL: 69000
DEV KEEPING: 69 FOR MEMORIES, MAYBE THIS WILL BE WORTH MORE THAN BTC; AND GIVE GENERATIONAL WEALTH , OR JUST USE IT FOR CEX.

THIS IS AS DECENTRALIZED AS IT GETS

ARE YOU DEGEN ENOUGH ? 

THIS LAUNCH IS STEALTH AF

ANY LEFT OVER ETHEREUMS, DEV WILL DECIDE WHAT TO DO WITH IT.
COULD BE MARKETING, COULD BE FOR EATING RAMEN, COULD BE BUYBACK & BURN, OR COULD BE JUST THROWING IT IN LIQ POOL, BUT  WILL NOT EAT YOUR ETHEREUM
PINKY PROMISE.

BUT DEV HAS ONLY 69 TOKENS, SO HE CANNOTT DUMP ON YOU; IT IS 0.001 OF SUPPLY OK?
LP LOCK FOREVER, SO NO RUG PULL
CONTRACT RENOUNCE, AFTER BLACKLIST FUNCTION IS INVOKED TO KILL SNIPER BOTS/MEV BOTS.
WE LET THEM PUMP OUR BAGS OK? YOU CAN READ, YOU UNDERSTAND. IF YOU METNION CONTRACT NOT RENOUNCE - WE BAN YOU; AND BLACKLSIT YOU.

ALL SAFETY NETS WILL BE IN PLACE

ARE YOU DEGEN ENOUGH ? IF YOU ARE, FUND THE PRESALE BOYS

TEMPORARY TG CHAT : https://t.me/+lQ7bTvdDKvUyYzhl

WEN PRESALE END ? DONT KNOW. WHEN DEV ADD LIQUIDITY - STOP SENDING MONEY .

*/
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


contract DUMP is Ownable, ERC20 {
    address public uniswapV2Pair;
    mapping(address => bool) public blacklists;

    constructor() ERC20("$DUMP", "DUMP") {
        //69000 THE REST IS DECIMALS
        _mint(msg.sender, 69069000000000000000000);
    }

    function setRule(address _uniswapV2Pair) external onlyOwner {
        uniswapV2Pair = _uniswapV2Pair;
    }

    function blacklist(address _address, bool _isBlacklist) external onlyOwner {
        blacklists[_address] = _isBlacklist;
    }

    function _beforeTokenTransfer(
    address from,
    address to,
    uint256 /* amount */
    ) override internal virtual {
        require(!blacklists[to] && !blacklists[from], "BOT PROTECTION");

        if (uniswapV2Pair == address(0)) {
            require(from == owner() || to == owner(), "SNIPER PROTECTIONS");
            return;
        }
    }
}