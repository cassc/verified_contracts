{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DROPS/MetaSkynet/ERC20/Lexor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ERC20Burnable, ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../../../utils/WriteAccessControl.sol\\\";\\r\\nimport \\\"../../../Platform/MetaUnit/ERC20/IMetaUnit.sol\\\";\\r\\n\\r\\ncontract Lexor is\\r\\n    ERC20Burnable,\\r\\n    ReentrancyGuard,\\r\\n    WriteAccessControl,\\r\\n    ERC721Holder\\r\\n{\\r\\n    enum VotingType {\\r\\n        lexorPerMEU,\\r\\n        percentage,\\r\\n        addElegibleNFT,\\r\\n        removeElegibleNFT,\\r\\n        changeMEUAddress,\\r\\n        changeMUTDAddress\\r\\n    }\\r\\n\\r\\n    struct Staking {\\r\\n        uint256 uid;\\r\\n        uint256 metaunit_staking_amount;\\r\\n        uint256 start_day;\\r\\n        uint256 end_day;\\r\\n        uint256 rewardPerDay;\\r\\n        bool finished;\\r\\n    }\\r\\n\\r\\n    struct Activated {\\r\\n        uint256 uid;\\r\\n        address owner_of;\\r\\n        address eligibleNFT;\\r\\n        uint256 nft_id;\\r\\n        uint256 crystal_id;\\r\\n        address meu_address;\\r\\n        uint256 metaunit_amount;\\r\\n        uint256 percentage;\\r\\n        bool activated;\\r\\n        bool isNFT;\\r\\n    }\\r\\n    struct Proposal {\\r\\n        VotingType voting_type;\\r\\n        bytes20 value;\\r\\n        uint256 start_time;\\r\\n        bool resolved;\\r\\n    }\\r\\n    struct Voice {\\r\\n        address eth_address;\\r\\n        bool voice;\\r\\n    }\\r\\n\\r\\n    uint256 public lexorPerMeu = 3;\\r\\n    uint256 public startTime;\\r\\n    uint256 public stakingUid;\\r\\n    uint256 public activatedCount;\\r\\n    uint256 private totalCrystalRewardPercentage;\\r\\n    Activated[] public _activated;\\r\\n    Proposal[] public _proposals;\\r\\n    uint256 public _percentage = 10;\\r\\n    uint256 private _min_amount = 1000000 ether;\\r\\n    uint256 private _max_amount = 5000000 ether;\\r\\n\\r\\n    mapping(address => mapping(uint256 => uint256)) public _activated_addresses;\\r\\n    mapping(address => uint256) public _activated_addr_bal;\\r\\n    mapping(address => uint256) public _activated_addr_bal_meu;\\r\\n    mapping(address => uint256) public _activated_addr_bal_meu_dt;\\r\\n    mapping(uint256 => mapping(address => bool)) private _is_voted;\\r\\n    mapping(uint256 => Voice[]) private _voices;\\r\\n    address public meta_unit_address;\\r\\n    address public meta_unit_dt_address;\\r\\n    address public promotion_crystal_address;\\r\\n\\r\\n    mapping(uint256 => uint256) public globalToLocalStakeUids;\\r\\n    mapping(address => Staking[]) public stakings;\\r\\n    mapping(address => mapping(uint => mapping(uint => bool)))\\r\\n        public hasStakeRewardClaimed;\\r\\n\\r\\n    address[] private eligibleActivateNFTContracts;\\r\\n\\r\\n    modifier checkCrystalHolder() {\\r\\n        require(\\r\\n            IERC721(promotion_crystal_address).balanceOf(msg.sender) >\\r\\n                0 ||\\r\\n                _activated_addr_bal[msg.sender] > 0, \\\"017\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _mint_to,\\r\\n        address _meta_unit_address,\\r\\n        address _meta_unit_dt_address,\\r\\n        address _promotion_crystal_address\\r\\n    ) ERC20(\\\"Light Elixir\\\", \\\"LEXOR\\\") {\\r\\n        _mint(_mint_to, 700000000 * 10 ** 18);\\r\\n        meta_unit_address = _meta_unit_address;\\r\\n        meta_unit_dt_address = _meta_unit_dt_address;\\r\\n        promotion_crystal_address = _promotion_crystal_address;\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    event proposalCreated(\\r\\n        uint256 uid,\\r\\n        VotingType voting_type,\\r\\n        bytes20 value,\\r\\n        uint256 start_time,\\r\\n        uint256 end_time\\r\\n    );\\r\\n    event voiceSubmited(address eth_address, bool voice);\\r\\n    event proposalResolved(uint256 uid, bool submited);\\r\\n    event crystalActivated(\\r\\n        uint256 uid,\\r\\n        address owner_of,\\r\\n        address token_address,\\r\\n        uint256 token_id,\\r\\n        uint256 crystal_id,\\r\\n        address meu_address,\\r\\n        uint256 amount,\\r\\n        uint256 percentage,\\r\\n        bool useNFT\\r\\n    );\\r\\n    event crystalDeactivated(uint256 uid);\\r\\n    event stakingCreated(\\r\\n        uint256 uid,\\r\\n        uint256 metaunit_staking_amount,\\r\\n        uint256 start_day,\\r\\n        uint256 end_day,\\r\\n        address owner_of,\\r\\n        bool finished\\r\\n    );\\r\\n    event claimed(uint256 uid, uint256 day, uint256 claimed, address owner_of);\\r\\n    event claimedFromCrystal(uint256 uid, uint256 claimed, address owner_of);\\r\\n\\r\\n    function addEligibleActivateNFTs(address _contract) public checkAccess {\\r\\n        eligibleActivateNFTContracts.push(_contract);\\r\\n    }\\r\\n\\r\\n    function viewEligibleNFTs()\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return eligibleActivateNFTContracts;\\r\\n    }\\r\\n\\r\\n    function removeEligibleActivateNFTs(uint arrayNum) public checkAccess {\\r\\n        delete eligibleActivateNFTContracts[arrayNum];\\r\\n    }\\r\\n\\r\\n    function createProposal(\\r\\n        VotingType voting_type_,\\r\\n        bytes20 value_\\r\\n    ) external isEOA checkCrystalHolder {\\r\\n        if (voting_type_ == VotingType.lexorPerMEU) {\\r\\n            require(uint160(value_) >= 1 ether, \\\"006\\\");\\r\\n        } else if (voting_type_ == VotingType.percentage) {\\r\\n            require(uint160(value_) <= 100, \\\"005\\\");\\r\\n        } else if (voting_type_ == VotingType.changeMEUAddress || voting_type_ == VotingType.changeMUTDAddress) {\\r\\n            // no checks needed\\r\\n        } else {\\r\\n            require(IERC721(address(value_)).supportsInterface(0x80ac58cd), \\\"016\\\");\\r\\n        }\\r\\n        uint256 newProposalUid = _proposals.length;\\r\\n        _proposals.push(\\r\\n            Proposal(voting_type_, value_, block.timestamp, false)\\r\\n        );\\r\\n        emit proposalCreated(\\r\\n            newProposalUid,\\r\\n            voting_type_,\\r\\n            value_,\\r\\n            block.timestamp,\\r\\n            block.timestamp + 5 days\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function vote(\\r\\n        uint256 uid_,\\r\\n        bool voice_\\r\\n    ) public nonReentrant isEOA checkCrystalHolder {\\r\\n        require(\\r\\n            !_is_voted[uid_][msg.sender] &&\\r\\n                block.timestamp < _proposals[uid_].start_time + 5 days &&\\r\\n                balanceOf(msg.sender) > 0,\\r\\n            \\\"011\\\"\\r\\n        );\\r\\n        _voices[uid_].push(Voice(msg.sender, voice_));\\r\\n        emit voiceSubmited(msg.sender, voice_);\\r\\n        _is_voted[uid_][msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function resolve(\\r\\n        uint256 uid_\\r\\n    ) external nonReentrant isEOA checkCrystalHolder {\\r\\n        Proposal memory proposal = _proposals[uid_];\\r\\n        require(\\r\\n            !_proposals[uid_].resolved &&\\r\\n                block.timestamp > proposal.start_time + 5 days,\\r\\n            \\\"008\\\"\\r\\n        );\\r\\n        uint256 voices_for;\\r\\n        uint256 voices_against;\\r\\n        for (uint256 i = 0; i < _voices[uid_].length; i++) {\\r\\n            Voice memory voice = _voices[uid_][i];\\r\\n            uint256 balance = balanceOf(voice.eth_address);\\r\\n            if (voice.voice) voices_for += balance;\\r\\n            else voices_against += balance;\\r\\n        }\\r\\n        bool submited = voices_for > voices_against;\\r\\n        if (submited) {\\r\\n            if (proposal.voting_type == VotingType.lexorPerMEU)\\r\\n                lexorPerMeu = uint256(uint160(proposal.value));\\r\\n            else if (proposal.voting_type == VotingType.percentage)\\r\\n                _percentage = uint256(uint160(proposal.value));\\r\\n            else if (proposal.voting_type == VotingType.addElegibleNFT)\\r\\n                eligibleActivateNFTContracts.push(address(proposal.value));\\r\\n            else if (proposal.voting_type == VotingType.removeElegibleNFT) {\\r\\n                for (uint256 i; i < eligibleActivateNFTContracts.length; i++) {\\r\\n                    if (eligibleActivateNFTContracts[i] == address(proposal.value)) {\\r\\n                        delete eligibleActivateNFTContracts[i];\\r\\n                    }\\r\\n                }\\r\\n            } else if (proposal.voting_type == VotingType.changeMEUAddress) {\\r\\n                meta_unit_address = address(proposal.value);\\r\\n            } else if (proposal.voting_type == VotingType.changeMUTDAddress) {\\r\\n                meta_unit_dt_address = address(proposal.value);\\r\\n            }\\r\\n        }\\r\\n        emit proposalResolved(uid_, submited);\\r\\n        _proposals[uid_].resolved = true;\\r\\n    }\\r\\n\\r\\n    function hasEligibleNFT(address _contract) public view returns (bool) {\\r\\n        for (uint i = 0; i < eligibleActivateNFTContracts.length; i++) {\\r\\n            if (_contract == eligibleActivateNFTContracts[i]) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function activateCrystal(\\r\\n        address eligible_nft_token_address,\\r\\n        uint256 eligible_nft_token_id,\\r\\n        address meu_address,\\r\\n        uint256 meu_amount,\\r\\n        uint256 crystal_id,\\r\\n        uint256 percentage,\\r\\n        bool useNFT\\r\\n    ) external nonReentrant isEOA {\\r\\n        require(percentage <= _percentage, \\\"012\\\");\\r\\n        require(meu_address == meta_unit_address || meu_address == meta_unit_dt_address, \\\"015\\\");\\r\\n        require(\\r\\n            IERC721(promotion_crystal_address).ownerOf(crystal_id) ==\\r\\n                msg.sender,\\r\\n            \\\"013\\\"\\r\\n        );\\r\\n        uint256 stake_amount = useNFT ? _max_amount : meu_amount;\\r\\n        if (useNFT) {\\r\\n            require(hasEligibleNFT(eligible_nft_token_address), \\\"004\\\");\\r\\n            IERC721(eligible_nft_token_address).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                eligible_nft_token_id\\r\\n            );\\r\\n            uint256 refund_amount = _activated_addr_bal_meu[msg.sender];\\r\\n            if (refund_amount > 0) {\\r\\n                _activated_addr_bal_meu[msg.sender] = 0;\\r\\n                IERC20(meta_unit_address).transfer(\\r\\n                    msg.sender,\\r\\n                    refund_amount\\r\\n                );\\r\\n            }\\r\\n            uint256 dt_refund_amount = _activated_addr_bal_meu_dt[msg.sender];\\r\\n            if (dt_refund_amount > 0) {\\r\\n                _activated_addr_bal_meu_dt[msg.sender] = 0;\\r\\n                IERC20(meta_unit_dt_address).transfer(\\r\\n                    msg.sender,\\r\\n                    dt_refund_amount\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            if (meu_amount == 0) {\\r\\n                // second and following activations can be free\\r\\n                require(_activated_addr_bal[msg.sender] > 0, \\\"003\\\");\\r\\n            } else {\\r\\n                require(\\r\\n                    meu_amount >= _min_amount && meu_amount <= _max_amount,\\r\\n                    \\\"014\\\"\\r\\n                );\\r\\n                IERC20(meu_address).transferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    meu_amount\\r\\n                );\\r\\n                if (meu_address == meta_unit_address) {\\r\\n                    _activated_addr_bal_meu[msg.sender] += meu_amount;\\r\\n                } else {\\r\\n                    _activated_addr_bal_meu_dt[msg.sender] += meu_amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        IERC721(promotion_crystal_address).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            crystal_id\\r\\n        );\\r\\n        _activated_addr_bal[msg.sender] += stake_amount;\\r\\n        activatedCount++;\\r\\n        totalCrystalRewardPercentage += percentage;\\r\\n\\r\\n        uint256 new_activated_uid = _activated.length;\\r\\n        _activated.push(\\r\\n            Activated(\\r\\n                new_activated_uid,\\r\\n                msg.sender,\\r\\n                eligible_nft_token_address,\\r\\n                eligible_nft_token_id,\\r\\n                crystal_id,\\r\\n                meu_address,\\r\\n                stake_amount,\\r\\n                percentage,\\r\\n                true,\\r\\n                useNFT\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit crystalActivated(\\r\\n            new_activated_uid,\\r\\n            msg.sender,\\r\\n            eligible_nft_token_address,\\r\\n            eligible_nft_token_id,\\r\\n            crystal_id,\\r\\n            meu_address,\\r\\n            stake_amount,\\r\\n            percentage,\\r\\n            useNFT\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deactivateCrystal(uint256 uid) external nonReentrant isEOA {\\r\\n        require(uid < _activated.length, \\\"002\\\");\\r\\n        Activated memory activated = _activated[uid];\\r\\n        require(activated.activated, \\\"010\\\");\\r\\n        require(msg.sender == activated.owner_of, \\\"009\\\");\\r\\n        uint256 stake_amount = activated.isNFT ? _max_amount : activated.metaunit_amount;\\r\\n        _activated_addr_bal[msg.sender] -= stake_amount;\\r\\n        if (activated.isNFT) {\\r\\n            IERC721(activated.eligibleNFT).transferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                activated.nft_id\\r\\n            );\\r\\n        } else {\\r\\n            if (activated.meu_address == meta_unit_address) {\\r\\n                if (_activated_addr_bal_meu[msg.sender] > 0) {\\r\\n                    // only transfer tokens back if not already refunded\\r\\n                    _activated_addr_bal_meu[msg.sender] -= stake_amount;\\r\\n                    IERC20(meta_unit_address).transfer(msg.sender, stake_amount);\\r\\n                }\\r\\n            } else {\\r\\n                if (_activated_addr_bal_meu_dt[msg.sender] > 0) {\\r\\n                    _activated_addr_bal_meu_dt[msg.sender] -= stake_amount;\\r\\n                    IERC20(meta_unit_dt_address).transfer(msg.sender, stake_amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        totalCrystalRewardPercentage -= activated.percentage;\\r\\n        activatedCount--;\\r\\n        delete _activated[uid]; // sets activated.activated to false\\r\\n        emit crystalDeactivated(uid);\\r\\n    }\\r\\n\\r\\n    function getActivatedList()\\r\\n        public\\r\\n        view\\r\\n        returns (Activated[] memory activated)\\r\\n    {\\r\\n        uint256 activated_len = activatedCount;\\r\\n        uint256 last_pushed_id;\\r\\n        activated = new Activated[](activated_len);\\r\\n        for (uint256 i = 0; i < _activated.length; i++) {\\r\\n            if (_activated[i].activated) {\\r\\n                activated[last_pushed_id] = _activated[i];\\r\\n                last_pushed_id++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAveragePercent() public view returns (uint256) {\\r\\n        if (activatedCount == 0) return 0;\\r\\n        return totalCrystalRewardPercentage / activatedCount;\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount) external nonReentrant isEOA {\\r\\n        Activated[] memory activated = getActivatedList();\\r\\n        require(activated.length >= 3, \\\"001\\\");\\r\\n        require(amount >= 100 ether, \\\"022\\\");\\r\\n        IMetaUnit(meta_unit_address).burnFrom(msg.sender, amount);\\r\\n        uint256 averagePercent = getAveragePercent();\\r\\n        uint256 _amount = (lexorPerMeu *\\r\\n            ((amount * (100 - averagePercent)) / 100)) / 30;\\r\\n        uint256 localStakingUid = stakings[msg.sender].length;\\r\\n        stakings[msg.sender].push(\\r\\n            Staking(stakingUid, amount, today(), today() + 29, _amount, false)\\r\\n        );\\r\\n        globalToLocalStakeUids[stakingUid] = localStakingUid;\\r\\n        emit stakingCreated(\\r\\n            stakingUid,\\r\\n            amount,\\r\\n            block.timestamp,\\r\\n            block.timestamp + 29 days,\\r\\n            msg.sender,\\r\\n            false\\r\\n        );\\r\\n        stakingUid++;\\r\\n        uint256 nftActiveAmount = (lexorPerMeu * amount * averagePercent) / 100;\\r\\n        for (uint256 i; i < activated.length; i++) {\\r\\n            uint256 activatedBal = _activated_addr_bal[activated[i].owner_of];\\r\\n            _activated_addresses[activated[i].owner_of][activated[i].uid] +=\\r\\n                (nftActiveAmount * \\r\\n                    (activatedBal > _max_amount ? _max_amount : activatedBal)\\r\\n                ) / (activatedCount * _max_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim(uint uid) public isEOA {\\r\\n        require(uid <= stakingUid, \\\"007\\\");\\r\\n        Staking memory staking = stakings[msg.sender][\\r\\n            globalToLocalStakeUids[uid]\\r\\n        ];\\r\\n        uint256 _today = today();\\r\\n        uint256 total_amount;\\r\\n        for (uint i = staking.start_day; i <= staking.end_day; i++) {\\r\\n            if (!hasStakeRewardClaimed[msg.sender][uid][i] && _today >= i) {\\r\\n                hasStakeRewardClaimed[msg.sender][uid][i] = true;\\r\\n                total_amount += staking.rewardPerDay;\\r\\n                emit claimed(uid, i, staking.rewardPerDay, msg.sender);\\r\\n            }\\r\\n        }\\r\\n        if (total_amount > 0) _mint(msg.sender, total_amount);\\r\\n        if (_today - staking.start_day > 29) {\\r\\n            stakings[msg.sender][globalToLocalStakeUids[uid]].finished = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimAll() external isEOA {\\r\\n        for (uint256 i; i < stakings[msg.sender].length; i++) {\\r\\n            if (!stakings[msg.sender][i].finished) {\\r\\n                claim(stakings[msg.sender][i].uid);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakerClaimable(uint uid, uint day) public view returns (uint) {\\r\\n        if (hasStakeRewardClaimed[msg.sender][uid][day]) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return\\r\\n                stakings[msg.sender][globalToLocalStakeUids[uid]].rewardPerDay;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakerClaimableUidTotal(\\r\\n        uint uid\\r\\n    ) public view returns (uint256 total) {\\r\\n        Staking memory staking = stakings[msg.sender][\\r\\n            globalToLocalStakeUids[uid]\\r\\n        ];\\r\\n        uint256 _today = today();\\r\\n        for (uint i = staking.start_day; i <= staking.end_day; i++) {\\r\\n            if (i > _today) return total;\\r\\n            total += stakerClaimable(uid, i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimActivatedRewardsTotal() external isEOA nonReentrant {\\r\\n        Activated[] memory activated = getActivatedList();\\r\\n        uint256 amount;\\r\\n        for (uint256 i; i < activated.length; i++) {\\r\\n            if (activated[i].owner_of == msg.sender && activated[i].activated) {\\r\\n                uint256 uid_amount = _activated_addresses[msg.sender][activated[i].uid];\\r\\n                amount += uid_amount;\\r\\n                if (amount > 0) {\\r\\n                    _activated_addresses[msg.sender][activated[i].uid] = 0;\\r\\n                    emit claimedFromCrystal(\\r\\n                        activated[i].uid,\\r\\n                        uid_amount,\\r\\n                        msg.sender\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        require(amount > 0, \\\"028\\\");\\r\\n        _mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function claimActivatedRewards(uint256 uid) external isEOA nonReentrant {\\r\\n        require(_activated_addresses[msg.sender][uid] > 0, \\\"028\\\");\\r\\n        uint256 amount = _activated_addresses[msg.sender][uid];\\r\\n        _activated_addresses[msg.sender][uid] = 0;\\r\\n        _mint(msg.sender, amount);\\r\\n        emit claimedFromCrystal(uid, amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function today() public view returns (uint) {\\r\\n        uint256 timeStamp = block.timestamp;\\r\\n        return\\r\\n            timeStamp < startTime ? 0 : (timeStamp - startTime) / 24 hours + 1;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/utils/WriteAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\r\\n\\r\\ncontract WriteAccessControl is Ownable{\\r\\n\\r\\n  bool public checkEnabled;\\r\\n  mapping(address => bool) internal accessList;\\r\\n\\r\\n  event AddedAccess(address user);\\r\\n  event RemovedAccess(address user);\\r\\n  event CheckAccessEnabled();\\r\\n  event CheckAccessDisabled();\\r\\n\\r\\n  constructor()\\r\\n  {\\r\\n    checkEnabled = true;\\r\\n  }\\r\\n\\r\\n  function hasAccess(\\r\\n    address _user\\r\\n  )\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    return accessList[_user] || !checkEnabled;\\r\\n  }\\r\\n\\r\\n  function addAccess(address _user)\\r\\n    external\\r\\n    onlyOwner()\\r\\n  {\\r\\n    if (!accessList[_user]) {\\r\\n      accessList[_user] = true;\\r\\n\\r\\n      emit AddedAccess(_user);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeAccess(address _user)\\r\\n    external\\r\\n    onlyOwner()\\r\\n  {\\r\\n    if (accessList[_user]) {\\r\\n      accessList[_user] = false;\\r\\n\\r\\n      emit RemovedAccess(_user);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function enableAccessCheck()\\r\\n    external\\r\\n    onlyOwner()\\r\\n  {\\r\\n    if (!checkEnabled) {\\r\\n      checkEnabled = true;\\r\\n\\r\\n      emit CheckAccessEnabled();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function disableAccessCheck()\\r\\n    external\\r\\n    onlyOwner()\\r\\n  {\\r\\n    if (checkEnabled) {\\r\\n      checkEnabled = false;\\r\\n\\r\\n      emit CheckAccessDisabled();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  modifier checkAccess() {\\r\\n    require(hasAccess(msg.sender), \\\"No access\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isEOA(){\\r\\n    require(msg.sender == tx.origin, \\\"user is not Ethereum Outer Address\\\");\\r\\n    _;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\ncontract Ownable {\\r\\n\\r\\n  address public owner;\\r\\n  address private pendingOwner;\\r\\n\\r\\n  event OwnershipTransferRequested(\\r\\n    address indexed from,\\r\\n    address indexed to\\r\\n  );\\r\\n  event OwnershipTransferred(\\r\\n    address indexed from,\\r\\n    address indexed to\\r\\n  );\\r\\n\\r\\n  constructor() {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address _to)\\r\\n    external\\r\\n    onlyOwner()\\r\\n  {\\r\\n    pendingOwner = _to;\\r\\n\\r\\n    emit OwnershipTransferRequested(owner, _to);\\r\\n  }\\r\\n\\r\\n  function acceptOwnership()\\r\\n    external\\r\\n  {\\r\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\r\\n\\r\\n    address oldOwner = owner;\\r\\n    owner = msg.sender;\\r\\n    pendingOwner = address(0);\\r\\n\\r\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface IAccessControl {\\r\\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/Platform/MetaUnit/ERC20/IMetaUnit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMetaUnit {\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mint_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_meta_unit_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_meta_unit_dt_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_promotion_crystal_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"}],\"name\":\"claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"}],\"name\":\"claimedFromCrystal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crystal_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"meu_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useNFT\",\"type\":\"bool\"}],\"name\":\"crystalActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"crystalDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Lexor.VotingType\",\"name\":\"voting_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"value\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"}],\"name\":\"proposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"submited\",\"type\":\"bool\"}],\"name\":\"proposalResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metaunit_staking_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end_day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"stakingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eth_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voice\",\"type\":\"bool\"}],\"name\":\"voiceSubmited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_activated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eligibleNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crystal_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"meu_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metaunit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNFT\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_activated_addr_bal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_activated_addr_bal_meu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_activated_addr_bal_meu_dt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_activated_addresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"enum Lexor.VotingType\",\"name\":\"voting_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes20\",\"name\":\"value\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eligible_nft_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eligible_nft_token_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"meu_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"meu_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crystal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useNFT\",\"type\":\"bool\"}],\"name\":\"activateCrystal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activatedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addEligibleActivateNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"claimActivatedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActivatedRewardsTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Lexor.VotingType\",\"name\":\"voting_type_\",\"type\":\"uint8\"},{\"internalType\":\"bytes20\",\"name\":\"value_\",\"type\":\"bytes20\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"deactivateCrystal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivatedList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eligibleNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crystal_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"meu_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metaunit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNFT\",\"type\":\"bool\"}],\"internalType\":\"struct Lexor.Activated[]\",\"name\":\"activated\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAveragePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalToLocalStakeUids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"hasEligibleNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasStakeRewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lexorPerMeu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meta_unit_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meta_unit_dt_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotion_crystal_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arrayNum\",\"type\":\"uint256\"}],\"name\":\"removeEligibleActivateNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid_\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"stakerClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"stakerClaimableUidTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingUid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metaunit_staking_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerDay\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEligibleNFTs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voice_\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lexor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008e66691515badbaca6ee686d74c8ef29e1afe57f0000000000000000000000006e975115250b05c828ecb8ededb091975fc20a5d00000000000000000000000066f2e7cf74b80f5199c42a02b2717c179b876663000000000000000000000000434d6209881b11b9e3b0b988805bf9ec71f15556", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}