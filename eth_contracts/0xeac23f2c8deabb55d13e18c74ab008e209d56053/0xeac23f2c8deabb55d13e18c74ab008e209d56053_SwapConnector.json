{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.18;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external;\\r\\n\\r\\n    function allowance(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function approve(address sender, uint256 amount) external;\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    event Approval(address indexed from, address indexed to, uint256 amount);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISwapCentral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >= 0.8.16;\\r\\n\\r\\ninterface ISwapCentral{\\r\\n    function V2GetEstimatedOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint[] memory);\\r\\n\\r\\n    function V2GetEstimatedIn(uint amountOutDesired, address tokenIn, address tokenOut) external view returns (uint[] memory);\\r\\n\\r\\n    function V2SwapExactTokensForTokens(\\r\\n        address caller,\\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function V2SwapTokensForExactTokens(\\r\\n        address caller, \\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountOutDesired,\\r\\n        uint amountInMax,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function V2SwapExactETHForTokens(\\r\\n        address caller, \\r\\n        address tokenOut, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function V2SwapTokensForExactETH(\\r\\n        address caller, \\r\\n        address tokenIn, \\r\\n        uint amountOut, \\r\\n        uint amountInMax,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function V2SwapExactTokensForETH(\\r\\n        address caller, \\r\\n        address tokenIn, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function V2SwapETHForExactTokens(\\r\\n        address caller, \\r\\n        address tokenOut, \\r\\n        uint amountOut,\\r\\n        uint deadlineInSeconds\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function V2SwapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        address caller, \\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external;\\r\\n\\r\\n    function V2SwapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        address caller, \\r\\n        address tokenOut, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external payable;   \\r\\n\\r\\n    function V2SwapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        address caller, \\r\\n        address tokenIn, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external;\\r\\n\\r\\n    function V3SwapExactInputSingleHop(\\r\\n        address caller, \\r\\n        address tokenIn, \\r\\n        address tokenOut,\\r\\n        uint24 fee, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin, \\r\\n        uint deadlineInSeconds,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n    ) external returns (uint amountOut);\\r\\n\\r\\n    function V3SwapExactOutputSingleHop(\\r\\n        address caller, \\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint24 fee, \\r\\n        uint amountOut, \\r\\n        uint amountInMax,\\r\\n        uint deadlineInSeconds,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n    ) external returns (uint amountIn); \\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.16;\\r\\n\\r\\nimport '../interfaces/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) =\\r\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SwapConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >= 0.8.16;\\r\\n\\r\\nimport \\\"./interfaces/ISwapCentral.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\ncontract SwapConnector{\\r\\n    ISwapCentral private swap;\\r\\n\\r\\n    event NewOwner(address indexed newOwner, uint time);\\r\\n    event WithdrawETH(uint amount, uint time);\\r\\n    event WithdrawToken(address indexed token, uint amount, uint time);\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n        require(msg.sender == owner, \\\"you're not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(address swapCentral){\\r\\n        swap = ISwapCentral(swapCentral);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    //---------------Uniswap V2 Starts Here----------------------//\\r\\n    function V2GetEstimatedOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint[] memory){\\r\\n        return swap.V2GetEstimatedOut(amountIn, tokenIn, tokenOut);\\r\\n    }\\r\\n\\r\\n    function V2GetEstimatedIn(uint amountOutDesired, address tokenIn, address tokenOut) external view returns (uint[] memory){\\r\\n        return swap.V2GetEstimatedIn(amountOutDesired, tokenIn, tokenOut);\\r\\n    }\\r\\n\\r\\n    function V2SwapExactTokensForTokens(\\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external\\r\\n    {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountIn);\\r\\n\\r\\n        swap.V2SwapExactTokensForTokens(\\r\\n            msg.sender,\\r\\n            tokenIn, \\r\\n            tokenOut, \\r\\n            amountIn, \\r\\n            amountOutMin,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V2SwapTokensForExactTokens(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountOutDesired,\\r\\n        uint amountInMax,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountInMax);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountInMax);\\r\\n\\r\\n        amounts = swap.V2SwapTokensForExactTokens(\\r\\n            msg.sender, \\r\\n            tokenIn,\\r\\n            tokenOut,\\r\\n            amountOutDesired,\\r\\n            amountInMax,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V2SwapExactETHForTokens(\\r\\n        address tokenOut, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external payable returns (uint[] memory amounts)\\r\\n    {\\r\\n        amounts = swap.V2SwapExactETHForTokens{value: msg.value}(\\r\\n            msg.sender, \\r\\n            tokenOut, \\r\\n            amountOutMin,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V2SwapTokensForExactETH(\\r\\n        address tokenIn, \\r\\n        uint amountOut, \\r\\n        uint amountInMax,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts)\\r\\n    {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountInMax);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountInMax);\\r\\n\\r\\n        amounts = swap.V2SwapTokensForExactETH(\\r\\n            msg.sender, \\r\\n            tokenIn, \\r\\n            amountOut, \\r\\n            amountInMax,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V2SwapExactTokensForETH(\\r\\n        address tokenIn, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external returns (uint[] memory amounts)\\r\\n    {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountIn);\\r\\n\\r\\n        amounts = swap.V2SwapExactTokensForETH(\\r\\n            msg.sender, \\r\\n            tokenIn, \\r\\n            amountIn, \\r\\n            amountOutMin,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V2SwapETHForExactTokens(\\r\\n        address tokenOut, \\r\\n        uint amountOut,\\r\\n        uint deadlineInSeconds\\r\\n    ) external payable returns (uint[] memory amounts)\\r\\n    {\\r\\n        amounts = swap.V2SwapETHForExactTokens{value: msg.value}(\\r\\n        msg.sender, \\r\\n        tokenOut, \\r\\n        amountOut,\\r\\n        deadlineInSeconds\\r\\n        );\\r\\n    } \\r\\n\\r\\n    function V2SwapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external \\r\\n    {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountIn);\\r\\n\\r\\n        swap.V2SwapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            msg.sender, \\r\\n            tokenIn, \\r\\n            tokenOut, \\r\\n            amountIn, \\r\\n            amountOutMin,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }    \\r\\n\\r\\n    function V2SwapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        address tokenOut, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external payable\\r\\n    {\\r\\n        swap.V2SwapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\r\\n            msg.sender, \\r\\n            tokenOut, \\r\\n            amountOutMin,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V2SwapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        address tokenIn, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds\\r\\n    ) external\\r\\n    {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountIn);\\r\\n        swap.V2SwapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            msg.sender,\\r\\n            tokenIn,\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            deadlineInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    //---------------Uniswap V3 Starts Here----------------------//\\r\\n    function V3SwapExactInputSingleHop(\\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint24 fee, \\r\\n        uint amountIn, \\r\\n        uint amountOutMin,\\r\\n        uint deadlineInSeconds,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n        ) external {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountIn);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountIn);\\r\\n\\r\\n        swap.V3SwapExactInputSingleHop(\\r\\n            msg.sender, \\r\\n            tokenIn, \\r\\n            tokenOut,\\r\\n            fee,\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            deadlineInSeconds,\\r\\n            sqrtPriceLimitX96\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function V3SwapExactOutputSingleHop(\\r\\n        address tokenIn, \\r\\n        address tokenOut, \\r\\n        uint24 fee,\\r\\n        uint amountOut, \\r\\n        uint amountInMax,\\r\\n        uint deadlineInSeconds,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n        ) external {\\r\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amountInMax);\\r\\n        TransferHelper.safeApprove(tokenIn, address(swap), amountInMax);\\r\\n\\r\\n        swap.V3SwapExactOutputSingleHop(\\r\\n            msg.sender, \\r\\n            tokenIn, \\r\\n            tokenOut, \\r\\n            fee, \\r\\n            amountOut, \\r\\n            amountInMax, \\r\\n            deadlineInSeconds,\\r\\n            sqrtPriceLimitX96\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //---------------Universal Getter Functions----------------------//\\r\\n    \\r\\n    function checkETHBalance() external view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function checkTokenBalance(address token) external view returns (uint){\\r\\n        return IERC20(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function withdrawETH() external onlyOwner {\\r\\n        uint amount = address(this).balance;\\r\\n\\r\\n        emit WithdrawETH(amount, block.timestamp);\\r\\n        TransferHelper.safeTransferETH(owner, amount);  \\r\\n    }\\r\\n\\r\\n    function withdrawToken(address token) external onlyOwner {\\r\\n        uint amount = IERC20(token).balanceOf(address(this));\\r\\n    \\r\\n        emit WithdrawToken(token, amount, block.timestamp);\\r\\n        TransferHelper.safeTransfer(token, owner, amount);    \\r\\n    }\\r\\n\\r\\n    function changeOwner(address newOwner) external onlyOwner {      \\r\\n        require(newOwner != address(0), \\\"new candidate can't be address zero\\\");\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit NewOwner(newOwner, block.timestamp);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapCentral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutDesired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"V2GetEstimatedIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"V2GetEstimatedOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"}],\"name\":\"V2SwapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"V3SwapExactInputSingleHop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"V3SwapExactOutputSingleHop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapConnector", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ace00eee06b03873a266ec798d099a74363b941c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}