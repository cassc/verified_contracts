{"SourceCode": "/*\r\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588\u2588    \u2588\u2588   \u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588  *\r\n * \u2588\u2588      \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588  \u2588\u2588  \u2588\u2588  \u2588\u2588   \u2588\u2588 \u2588\u2588     \r\n * \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588  \r\n * \u2588\u2588      \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588     \r\n * \u2588\u2588      \u2588\u2588 \u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    \r\n    error OwnableUnauthorizedAccount(address account);\r\n    error OwnableInvalidOwner(address owner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20Errors {\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n    error ERC20InvalidSender(address sender);\r\n    error ERC20InvalidReceiver(address receiver);\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n    error ERC20InvalidApprover(address approver);\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    error AddressInsufficientBalance(address account);\r\n    error FailedInnerCall();\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Taxable is Context {\r\n    event TaxOn(address account); \r\n    event TaxOff(address account); \r\n    event TaxRecipientChanged(address account); \r\n    event ExemptTax(address account);\r\n    event ExemptTaxFrom(address account);\r\n    event ExemptTaxTo(address account);\r\n    event RevokeTaxExemption(address account);\r\n    event RevokeTaxExemptionFrom(address account);\r\n    event RevokeTaxExemptionTo(address account);\r\n\r\n    bool private _taxed; \r\n    uint private _taxPoints; \r\n    uint private _burnPoints; \r\n    address private _taxRecipient;\r\n    mapping (address => bool) private _taxExemption;\r\n    mapping (address => bool) private _taxExemptionFrom;\r\n    mapping (address => bool) private _taxExemptionTo;\r\n\r\n    constructor(bool __taxed, uint __taxPoints, uint __burnPoints, address __taxRecipient) {\r\n        _taxed = __taxed; \r\n        _taxPoints = __taxPoints; \r\n        _burnPoints = __burnPoints; \r\n        _taxRecipient = __taxRecipient; \r\n    }\r\n\r\n    modifier whenNotTaxed() { \r\n        _requireNotTaxed();\r\n        _;\r\n    }\r\n\r\n    modifier whenTaxed() { \r\n        _requireTaxed();\r\n        _;\r\n    }\r\n\r\n    function isTaxed() public view virtual returns (bool) {\r\n        return _taxed; \r\n    }\r\n\r\n    function taxPoints() public view virtual returns (uint) {\r\n        return _taxPoints;\r\n    }\r\n\r\n    function burnPoints() public view virtual returns (uint) {\r\n        return _burnPoints;\r\n    }\r\n\r\n    function taxRecipient() public view virtual returns (address) {\r\n        return _taxRecipient;\r\n    }\r\n\r\n    function isTaxExempted(address account) public view virtual returns (bool) { \r\n        return _taxExemption[account];\r\n    }\r\n\r\n    function isTaxExemptedFrom(address account) public view virtual returns (bool) { \r\n        return _taxExemptionFrom[account];\r\n    }\r\n\r\n    function isTaxExemptedTo(address account) public view virtual returns (bool) { \r\n        return _taxExemptionTo[account];\r\n    }\r\n\r\n    function _requireNotTaxed() internal view virtual {\r\n        require(!isTaxed(), \"Taxable: taxed\");\r\n    }\r\n\r\n    function _requireTaxed() internal view virtual { \r\n        require(isTaxed(), \"Taxable: not taxed\");\r\n    }\r\n\r\n    function _taxOn() internal virtual whenNotTaxed {\r\n        _taxed = true;\r\n        emit TaxOn(_msgSender());\r\n    }\r\n\r\n    function _taxOff() internal virtual whenTaxed {\r\n        _taxed = false;\r\n        emit TaxOff(_msgSender());\r\n    }\r\n\r\n    function _updateTaxRecipient(address newRecipient) internal virtual {\r\n        _taxRecipient = newRecipient;\r\n        emit TaxRecipientChanged(_msgSender());\r\n    }\r\n\r\n    function _exemptTax(address account) internal virtual {\r\n        require(!_taxExemption[account], \"Account is already exempted\");\r\n        _taxExemption[account] = true;\r\n        emit ExemptTax(account);\r\n    }\r\n\r\n    function _revokeTaxExemption(address account) internal virtual {\r\n        require(_taxExemption[account], \"Account is not exempted\");\r\n        _taxExemption[account] = false;\r\n        emit RevokeTaxExemption(account);\r\n    }\r\n\r\n    function _exemptTaxFrom(address account) internal virtual {\r\n        require(!_taxExemptionFrom[account], \"Account is already exempted\");\r\n        _taxExemptionFrom[account] = true;\r\n        emit ExemptTaxFrom(account);\r\n    }\r\n\r\n    function _revokeTaxExemptionFrom(address account) internal virtual {\r\n        require(_taxExemptionFrom[account], \"Account is not exempted\");\r\n        _taxExemptionFrom[account] = false;\r\n        emit RevokeTaxExemptionFrom(account);\r\n    }\r\n\r\n    function _exemptTaxTo(address account) internal virtual {\r\n        require(!_taxExemptionTo[account], \"Account is already exempted\");\r\n        _taxExemptionTo[account] = true;\r\n        emit ExemptTaxTo(account);\r\n    }\r\n\r\n    function _revokeTaxExemptionTo(address account) internal virtual {\r\n        require(_taxExemptionTo[account], \"Account is not exempted\");\r\n        _taxExemptionTo[account] = false;\r\n        emit RevokeTaxExemptionTo(account);\r\n    }\r\n}\r\n\r\ncontract Finape is ERC20, Taxable, Ownable {\r\n    using Address for address payable;\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n    bool _interlock;\r\n\r\n    modifier lockTheSwap() {\r\n        _interlock = true;\r\n        _;\r\n        _interlock = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory __name,\r\n        string memory __symbol,\r\n        address __routerAddress,\r\n        bool __taxed,\r\n        uint __taxPoints,\r\n        uint __burnPoints,\r\n        address __taxRecipient \r\n        )\r\n        ERC20(__name, __symbol)\r\n        Taxable(__taxed, __taxPoints, __burnPoints, __taxRecipient)\r\n        Ownable(msg.sender)\r\n    {\r\n        require(__burnPoints > 0, \"BurnPoints must be greater than 0 basis point\");\r\n        require(__taxPoints >= __burnPoints, \"TaxPoints must be greater than BurnPoints\");\r\n        require(__taxPoints <= 1000, \"TaxPoints must not exceed 1,000 basis points (10%)\");\r\n        require(__burnPoints <= 1000, \"BurnPoints must not exceed 1,000 basis points (10%)\");\r\n\r\n        IRouter _router = IRouter(__routerAddress);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router;\r\n        pair = _pair;\r\n\r\n        _approve(address(this), address(router), type(uint).max);\r\n\r\n        exemptTax(msg.sender);\r\n        \r\n        _mint(msg.sender, 1_000_000_000 * 10**decimals());\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTax() public onlyOwner {\r\n        _taxOn();\r\n    }\r\n\r\n    function disableTax() public onlyOwner {\r\n        _taxOff();\r\n    }\r\n\r\n    function updateTaxRecipient(address newRecipient) public onlyOwner {\r\n        _updateTaxRecipient(newRecipient);\r\n    }\r\n\r\n    function exemptTax(address account) public onlyOwner {\r\n        _exemptTax(account);\r\n    }\r\n\r\n    function revokeTaxExemption(address account) public onlyOwner {\r\n        _revokeTaxExemption(account);\r\n    }\r\n\r\n    function exemptTaxFrom(address account) public onlyOwner {\r\n        _exemptTaxFrom(account);\r\n    }\r\n\r\n    function revokeTaxExemptionFrom(address account) public onlyOwner {\r\n        _revokeTaxExemptionFrom(account);\r\n    }\r\n\r\n    function exemptTaxTo(address account) public onlyOwner {\r\n        _exemptTaxTo(account);\r\n    }\r\n\r\n    function revokeTaxExemptionTo(address account) public onlyOwner {\r\n        _revokeTaxExemptionTo(account);\r\n    }\r\n\r\n    function rescueFund() public onlyOwner {\r\n        payable(taxRecipient()).sendValue(address(this).balance);\r\n    }\r\n\r\n    function _update(address from, address to, uint amount)\r\n        internal\r\n        override\r\n    {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if (_interlock || !isTaxed() || isTaxExempted(from) || isTaxExempted(to) || isTaxExemptedFrom(from) || isTaxExemptedTo(to) || (from != pair && to != pair)) {\r\n            super._update(from, to, amount);\r\n        } else {\r\n            \r\n            uint taxPortion = amount * taxPoints() / 10000;\r\n            uint userPortion = amount - taxPortion;\r\n\r\n            super._update(from, address(this), taxPortion); \r\n\r\n            if (from != pair) {\r\n                liquify();\r\n            }\r\n\r\n            super._update(from, to, userPortion);\r\n        }\r\n    }\r\n\r\n    function liquify() private lockTheSwap {\r\n        uint contractTokenBalance = balanceOf(address(this));\r\n\r\n        uint toBurn = contractTokenBalance * burnPoints() / taxPoints();\r\n        uint toSwap = contractTokenBalance - toBurn;\r\n\r\n        if (toSwap > 0) {\r\n            swapTokensForEth(toSwap);\r\n        }\r\n\r\n        if (toBurn > 0) {\r\n            super._update(address(this), address(0xdead), toBurn); \r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            taxRecipient(),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"__routerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"__taxed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"__taxPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__burnPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__taxRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExemptTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExemptTaxFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExemptTaxTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RevokeTaxExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RevokeTaxExemptionFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RevokeTaxExemptionTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TaxOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TaxOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TaxRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exemptTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exemptTaxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exemptTaxTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxExemptedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxExemptedTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTaxed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTaxExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTaxExemptionFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTaxExemptionTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"updateTaxRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Finape", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000abe84d157ed2463817af0934ef838f2e6c7aacf000000000000000000000000000000000000000000000000000000000000000666696e6170650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646494e4150450000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b58bac82a9423441828a4add281a956ac0757212cd850fb43ec5f0fc5fe088fd"}