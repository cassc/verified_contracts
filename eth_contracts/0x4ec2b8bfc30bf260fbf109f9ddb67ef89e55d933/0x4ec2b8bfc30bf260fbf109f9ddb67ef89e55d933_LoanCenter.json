{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressProvider.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\ninterface IAddressProvider {\\n    function setLendingMarket(address market) external;\\n\\n    function getLendingMarket() external view returns (address);\\n\\n    function setTradingPoolFactory(address tradingPoolFactory) external;\\n\\n    function getTradingPoolFactory() external view returns (address);\\n\\n    function setSwapRouter(address swapRouter) external;\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function setGaugeController(address gaugeController) external;\\n\\n    function getGaugeController() external view returns (address);\\n\\n    function setLoanCenter(address loancenter) external;\\n\\n    function getLoanCenter() external view returns (address);\\n\\n    function setVotingEscrow(address nativeTokenVault) external;\\n\\n    function getVotingEscrow() external view returns (address);\\n\\n    function setNativeToken(address nativeToken) external;\\n\\n    function getNativeToken() external view returns (address);\\n\\n    function getNativeTokenVesting() external view returns (address);\\n\\n    function setInterestRate(address interestRate) external;\\n\\n    function getInterestRate() external view returns (address);\\n\\n    function setNFTOracle(address nftOracle) external;\\n\\n    function getNFTOracle() external view returns (address);\\n\\n    function setTokenOracle(address tokenOracle) external;\\n\\n    function getTokenOracle() external view returns (address);\\n\\n    function setFeeDistributor(address feeDistributor) external;\\n\\n    function getFeeDistributor() external view returns (address);\\n\\n    function setGenesisNFT(address genesisNFT) external;\\n\\n    function getGenesisNFT() external view returns (address);\\n\\n    function setWETH(address weth) external;\\n\\n    function getWETH() external view returns (address);\\n\\n    function setBribes(address bribes) external;\\n\\n    function getBribes() external view returns (address);\\n\\n    function setLiquidityPairMetadata(address liquidityPairMetadata) external;\\n\\n    function getLiquidityPairMetadata() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {ConfigTypes} from \\\"../libraries/types/ConfigTypes.sol\\\";\\n\\ninterface ILendingPool {\\n    event UpdatedBorrowRate(uint256 borrowRate);\\n\\n    function getUnderlyingBalance() external view returns (uint256);\\n\\n    function transferUnderlying(\\n        address to,\\n        uint256 amount,\\n        uint256 borrowRate\\n    ) external;\\n\\n    function receiveUnderlying(\\n        address from,\\n        uint256 amount,\\n        uint256 borrowRate,\\n        uint256 interest\\n    ) external;\\n\\n    function receiveUnderlyingDefaulted(\\n        address from,\\n        uint256 amount,\\n        uint256 borrowRate,\\n        uint256 defaultedDebt\\n    ) external;\\n\\n    function getSupplyRate() external view returns (uint256);\\n\\n    function getDebt() external view returns (uint256);\\n\\n    function getBorrowRate() external view returns (uint256);\\n\\n    function getUtilizationRate() external view returns (uint256);\\n\\n    function getPoolConfig()\\n        external\\n        view\\n        returns (ConfigTypes.LendingPoolConfig memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoanCenter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {Trustus} from \\\"../protocol/Trustus/Trustus.sol\\\";\\n\\ninterface ILoanCenter {\\n    function createLoan(\\n        address owner,\\n        address lendingPool,\\n        uint256 amount,\\n        uint256 genesisNFTId,\\n        address nftAddress,\\n        uint256[] memory nftTokenIds,\\n        uint256 borrowRate\\n    ) external returns (uint256);\\n\\n    function getLoan(\\n        uint256 loanId\\n    ) external view returns (DataTypes.LoanData memory);\\n\\n    function getLoanState(\\n        uint256 loanId\\n    ) external view returns (DataTypes.LoanState);\\n\\n    function getLoanLiquidationData(\\n        uint256 loanId\\n    ) external view returns (DataTypes.LoanLiquidationData memory);\\n\\n    function getLoanAuctioneerFee(\\n        uint256 loanId\\n    ) external view returns (uint256);\\n\\n    function repayLoan(uint256 loanId) external;\\n\\n    function liquidateLoan(uint256 loanId) external;\\n\\n    function auctionLoan(uint256 loanId, address user, uint256 bid) external;\\n\\n    function updateLoanAuctionBid(\\n        uint256 loanId,\\n        address user,\\n        uint256 bid\\n    ) external;\\n\\n    function getLoansCount() external view returns (uint256);\\n\\n    function getNFTLoanId(\\n        address nftAddress,\\n        uint256 nftTokenID\\n    ) external view returns (uint256);\\n\\n    function getLoanLendingPool(uint256 loanId) external view returns (address);\\n\\n    function getLoanMaxDebt(\\n        uint256 loanId,\\n        uint256 tokensPrice\\n    ) external view returns (uint256);\\n\\n    function getLoanDebt(uint256 loanId) external view returns (uint256);\\n\\n    function getLoanInterest(uint256 loanId) external view returns (uint256);\\n\\n    function getLoanTokenIds(\\n        uint256 loanId\\n    ) external view returns (uint256[] memory);\\n\\n    function getLoanCollectionAddress(\\n        uint256 loanId\\n    ) external view returns (address);\\n\\n    function updateLoanDebtTimestamp(\\n        uint256 loanId,\\n        uint256 newDebtTimestamp\\n    ) external;\\n\\n    function updateLoanAmount(uint256 loanId, uint256 newAmount) external;\\n\\n    function getCollectionLiquidationThreshold(\\n        address collection\\n    ) external view returns (uint256);\\n\\n    function getCollectionMaxLTV(\\n        address collection\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/ConfigTypes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\n/// @title ConfigTypes library\\n/// @author leNFT\\n/// @notice Defines the types used as configuration parameters of the protocol\\n/// @dev Library with the types used as configuration parameters throughout the protocol\\nlibrary ConfigTypes {\\n    /// @param maxLiquidatorDiscount The maximum discount liquidators can get when liquidating a certain collateral with a certain price (10000 = 100%)\\n    /// @param auctioneerFee The fee borrowers have to pay to the auctioneer when repaying a loan after liquidation (% of debt, 10000 = 100%)\\n    /// @param liquidationFee The fee liquidators have to pay to the protocol when liquidating a loan (10000 = 100%)\\n    /// @param maxUtilizationRate The maximum utilization rate of the pool for withdrawals\\n    struct LendingPoolConfig {\\n        uint64 maxLiquidatorDiscount;\\n        uint64 auctioneerFeeRate;\\n        uint64 liquidationFeeRate;\\n        uint64 maxUtilizationRate;\\n    }\\n\\n    /// @param optimalUtilization The optimal utilization rate for the market (10000 = 100%)\\n    /// @param baseBorrowRate The market's base borrow rate (10000 = 100%)\\n    /// @param lowSlope The slope of the interest rate model when utilization rate is below the optimal utilization rate (10000 = 100%)\\n    /// @param highSlope The slope of the interest rate model when utilization rate is above the optimal utilization rate (10000 = 100%)\\n    struct InterestRateConfig {\\n        uint64 optimalUtilizationRate;\\n        uint64 optimalBorrowRate;\\n        uint64 baseBorrowRate;\\n        uint64 lowSlope;\\n        uint64 highSlope;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {Trustus} from \\\"../../protocol/Trustus/Trustus.sol\\\";\\n\\n/// @title DataTypes library\\n/// @author leNFT\\n/// @notice Defines the data types used in the protocol\\n/// @dev Library with the data types used in the protocol\\nlibrary DataTypes {\\n    /// @notice Struct to store the price data of an array of assets from the same collection\\n    /// @param collection The address of the collection\\n    /// @param tokenIds The tokenIds of the assets\\n    /// @param amount The price of the assets\\n    struct AssetsPrice {\\n        address collection;\\n        uint256[] tokenIds;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the risk parameters for a collection\\n    /// @param maxLTV The maximum loan to value ratio\\n    /// @param liquidationThreshold The threshold at which the loan can be liquidated\\n    struct CollectionRiskParameters {\\n        uint16 maxLTV;\\n        uint16 liquidationThreshold;\\n    }\\n\\n    /// @notice Enum of the liquidity pair types\\n    /// @dev Trade: Can buy and sell and price can increase and decrease\\n    /// @dev TradeUp: Can buy and sell and price can only increase\\n    /// @dev TradeDown: Can buy and sell and price can only decrease\\n    /// @dev Buy: Can only buy (price will only decrease)\\n    /// @dev Sell: Can only sell (price will only increase)\\n    enum LPType {\\n        Trade,\\n        TradeUp,\\n        TradeDown,\\n        Buy,\\n        Sell\\n    }\\n\\n    /// @notice Struct to store the liquidity pair data\\n    /// @param nftIds The tokenIds of the assets\\n    /// @param tokenAmount The amount of tokens in the liquidity pair\\n    /// @param spotPrice The spot price of the liquidity pair\\n    /// @param curve The address of the curve\\n    /// @param delta The delta of the curve\\n    /// @param fee The fee for the buy/sell trades\\n    /// @param lpType The type of liquidity pair\\n    struct LiquidityPair {\\n        uint256[] nftIds;\\n        uint128 tokenAmount;\\n        uint128 spotPrice;\\n        uint128 delta;\\n        address curve;\\n        uint16 fee;\\n        LPType lpType;\\n    }\\n\\n    /// @notice Struct serving as a pointer from an NFT to a liquidity pair\\n    /// @param liquidityPair The index of the liquidity pair\\n    /// @param index The index of the NFT in the liquidity pair\\n    struct NftToLp {\\n        uint128 liquidityPair;\\n        uint128 index;\\n    }\\n\\n    /// @notice Struct to store the working balance in gauges\\n    /// @param amount The amount of tokens\\n    /// @param weight The weight of the tokens\\n    /// @param timestamp The timestamp of the update\\n    struct WorkingBalance {\\n        uint128 amount;\\n        uint128 weight;\\n        uint40 timestamp;\\n    }\\n\\n    /// @notice Struct to store the locked balance in the voting escrow\\n    /// @param amount The amount of tokens\\n    /// @param end The timestamp of the end of the lock\\n    struct LockedBalance {\\n        uint128 amount;\\n        uint40 end;\\n    }\\n\\n    /// @notice Struct to store an abstract point in a weight curve\\n    /// @param bias The bias of the point\\n    /// @param slope The slope of the point\\n    /// @param timestamp The timestamp of the point\\n    struct Point {\\n        uint128 bias;\\n        uint128 slope;\\n        uint40 timestamp;\\n    }\\n\\n    /// @notice Enum of all the states a loan can be in\\n    /// @dev State change flow: None -> Active -> Repaid -> Auction -> Liquidated\\n    /// @dev None (Default Value): We need a default that is not 'Active' - this is the zero value\\n    /// @dev Active: The loan has been initialized; funds have been delivered to the borrower and the collateral is held.\\n    /// @dev Repaid: The loan has been repaid; and the collateral has been returned to the borrower.\\n    /// @dev Auctioned: The loan's collateral has been auctioned off and its in the process of being liquidated.\\n    /// @dev Liquidated: The loan's collateral was claimed by the liquidator.\\n    enum LoanState {\\n        None,\\n        Active,\\n        Repaid,\\n        Auctioned,\\n        Liquidated\\n    }\\n\\n    /// @notice Stores the data for a loan\\n    /// @param owner The owner of the loan\\n    /// @param amount The amount borrowed\\n    /// @param nftTokenIds The tokenIds of the NFT collaterals\\n    /// @param nftAsset The address of the NFT asset\\n    /// @param borrowRate The interest rate at which the loan was written\\n    /// @param initTimestamp The timestamp for the initial creation of the loan\\n    /// @param debtTimestamp The timestamp for debt computation\\n    /// @param pool The address of the lending pool associated with the loan\\n    /// @param genesisNFTId The genesis NFT id for the boost (0 if not used)\\n    /// @param state The current state of the loan\\n    struct LoanData {\\n        address owner;\\n        uint256 amount;\\n        uint256[] nftTokenIds;\\n        address nftAsset;\\n        uint16 borrowRate;\\n        uint40 initTimestamp;\\n        uint40 debtTimestamp;\\n        address pool;\\n        uint16 genesisNFTId;\\n        LoanState state;\\n    }\\n\\n    /// @notice Stores the data for a loan auction\\n    /// @param auctioneer The address of the auctioneer (user who first auctioned the loan)\\n    /// @param liquidator The address of the liquidator (user with the highest bid)\\n    /// @param auctionStartTimestamp The timestamp for the start of the auction\\n    /// @param auctionMaxBid The maximum bid for the auction\\n    struct LoanLiquidationData {\\n        address auctioneer;\\n        address liquidator;\\n        uint40 auctionStartTimestamp;\\n        uint256 auctionMaxBid;\\n    }\\n\\n    /// @notice Struct to store mint details for each Genesis NFT\\n    /// @param timestamp The timestamp of the mint\\n    /// @param locktime The locktime of the mint\\n    /// @param lpAmount The amount of LP tokens minted\\n    struct MintDetails {\\n        uint40 timestamp;\\n        uint40 locktime;\\n        uint128 lpAmount;\\n    }\\n\\n    /// @notice Struct to store the parameters for a borrow call\\n    /// @param caller The caller of the borrow function\\n    /// @param onBehalfOf The address of the user on whose behalf the caller is borrowing\\n    /// @param asset The address of the asset being borrowed\\n    /// @param amount The amount of the asset being borrowed\\n    /// @param nftAddress The address of the NFT asset\\n    /// @param nftTokenIds The tokenIds of the NFT collaterals\\n    /// @param genesisNFTId The genesis NFT id for the boost (0 if not used)\\n    /// @param request The request ID for the borrow\\n    /// @param packet The Trustus packet for the borrow\\n    struct BorrowParams {\\n        address caller;\\n        address onBehalfOf;\\n        address asset;\\n        uint256 amount;\\n        address nftAddress;\\n        uint256[] nftTokenIds;\\n        uint256 genesisNFTId;\\n        bytes32 request;\\n        Trustus.TrustusPacket packet;\\n    }\\n\\n    /// @notice Struct to store the parameters for a repay call\\n    /// @param caller The caller of the repay function\\n    /// @param loanId The ID of the loan being repaid\\n    /// @param amount The amount of debt being repaid\\n    struct RepayParams {\\n        address caller;\\n        uint256 loanId;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the parameters for a create auction (liquidate) call\\n    /// @param caller The caller of the create auction function\\n    /// @param onBehalfOf The address of the user on whose behalf the caller is liquidating\\n    /// @param loanId The ID of the loan being liquidated\\n    /// @param bid The bid for the auction\\n    /// @param request The request ID for the liquidation\\n    /// @param packet The Trustus packet for the liquidation\\n    struct CreateAuctionParams {\\n        address caller;\\n        address onBehalfOf;\\n        uint256 loanId;\\n        uint256 bid;\\n        bytes32 request;\\n        Trustus.TrustusPacket packet;\\n    }\\n\\n    /// @notice Struct to store the parameters for an auction bid call\\n    /// @param caller The caller of the auction bid function\\n    /// @param onBehalfOf The address of the user on whose behalf the caller is bidding\\n    /// @param loanId The ID of the loan being liquidated\\n    /// @param bid The bid for the auction\\n    struct BidAuctionParams {\\n        address caller;\\n        address onBehalfOf;\\n        uint256 loanId;\\n        uint256 bid;\\n    }\\n\\n    /// @notice Struct to store the parameters for a claim liquidation call\\n    /// @param loanId The ID of the loan whose liquidation is being claimed\\n    struct ClaimLiquidationParams {\\n        uint256 loanId;\\n    }\\n\\n    /// @notice Struct to store the parameters a user's VestingParams\\n    /// @param timestamp The timestamp of the vesting start\\n    /// @param period The vesting period\\n    /// @param cliff The vesting cliff\\n    /// @param amount The amount of tokens to vest\\n    struct VestingParams {\\n        uint256 timestamp;\\n        uint256 period;\\n        uint256 cliff;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the parameters for the Genesis NFT balancer pool\\n    /// @param poolId The ID of the balancer pool\\n    /// @param pool The address of the balancer pool\\n    /// @param vault The address of the balancer vault\\n    /// @param queries The address of the balancer queries contract\\n    struct BalancerDetails {\\n        bytes32 poolId;\\n        address pool;\\n        address vault;\\n        address queries;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\n/// @title SafeCast library\\n/// @author leNFT\\n/// @notice Casting utilities\\n/// @dev This library is used to safely cast between uint256 and smaller sized unsigned integers\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint32, revert on overflow\\n    /// @param value The uint256 value to be casted\\n    /// @return The uint32 value casted from uint256\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SC:CAST16_OVERFLOW\\\");\\n        return uint16(value);\\n    }\\n\\n    /// @notice Cast a uint256 to a uint40, revert on overflow\\n    /// @param value The uint256 value to be casted\\n    /// @return The uint40 value casted from uint256\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SC:CAST40_OVERFLOW\\\");\\n        return uint40(value);\\n    }\\n\\n    /// @notice Cast a uint256 to a uint64, revert on overflow\\n    /// @param value The uint256 value to be casted\\n    /// @return The uint64 value casted from uint256\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SC:CAST64_OVERFLOW\\\");\\n        return uint64(value);\\n    }\\n\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SC:CAST128_OVERFLOW\\\");\\n        return uint128(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/Lending/LoanCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nimport {ILoanCenter} from \\\"../../interfaces/ILoanCenter.sol\\\";\\nimport {PercentageMath} from \\\"../../libraries/utils/PercentageMath.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {SafeCast} from \\\"../../libraries/utils/SafeCast.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\n\\n/// @title LoanCenter contract\\n/// @author leNFT\\n/// @notice Manages loans\\n/// @dev Keeps the list of loans, their states and their liquidation data\\ncontract LoanCenter is ILoanCenter, OwnableUpgradeable {\\n    // NFT address + NFT ID to loan ID mapping\\n    mapping(address => mapping(uint256 => uint256)) private _nftToLoanId;\\n\\n    // Loan ID to loan info mapping\\n    mapping(uint256 => DataTypes.LoanData) private _loans;\\n\\n    // Loan id to liquidation data\\n    mapping(uint256 => DataTypes.LoanLiquidationData)\\n        private _loansLiquidationData;\\n\\n    uint256 private _loansCount;\\n    IAddressProvider private immutable _addressProvider;\\n\\n    // Collection to CollectionRiskParameters (max LTV and liquidation threshold)\\n    mapping(address => DataTypes.CollectionRiskParameters)\\n        private _collectionsRiskParameters;\\n\\n    // Default values for Collection Risk Parameters\\n    uint256 private _defaultLiquidationThreshold;\\n    uint256 private _defaultMaxLTV;\\n\\n    // Mapping from address to active loans\\n    mapping(address => uint256[]) private _activeLoans;\\n\\n    modifier onlyMarket() {\\n        _requireOnlyMarket();\\n        _;\\n    }\\n\\n    modifier loanExists(uint256 loanId) {\\n        _requireLoanExists(loanId);\\n        _;\\n    }\\n\\n    modifier loanAuctioned(uint256 loanId) {\\n        _requireLoanAuctioned(loanId);\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(IAddressProvider addressProvider) {\\n        _addressProvider = addressProvider;\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract\\n    /// @param defaultLiquidationThreshold The default liquidation threshold\\n    /// @param defaultMaxLTV The default max LTV\\n    function initialize(\\n        uint256 defaultLiquidationThreshold,\\n        uint256 defaultMaxLTV\\n    ) external initializer {\\n        __Ownable_init();\\n        _defaultLiquidationThreshold = defaultLiquidationThreshold;\\n        _defaultMaxLTV = defaultMaxLTV;\\n    }\\n\\n    /// @notice Create a new loan with the specified parameters and add it to the loans list\\n    /// @dev Only the market contract can call this function\\n    /// @param borrower The address of the borrower\\n    /// @param pool The address of the lending pool\\n    /// @param amount The amount of the lending pool token to be borrowed\\n    /// @param genesisNFTId The ID of the genesis NFT\\n    /// @param nftAddress The address of the NFT contract\\n    /// @param nftTokenIds An array of NFT token IDs that will be used as collateral\\n    /// @param borrowRate The interest rate for the loan\\n    /// @return The ID of the newly created loan\\n    function createLoan(\\n        address borrower,\\n        address pool,\\n        uint256 amount,\\n        uint256 genesisNFTId,\\n        address nftAddress,\\n        uint256[] calldata nftTokenIds,\\n        uint256 borrowRate\\n    ) external override onlyMarket returns (uint256) {\\n        _loans[_loansCount] = DataTypes.LoanData({\\n            owner: borrower,\\n            amount: amount,\\n            nftTokenIds: nftTokenIds,\\n            nftAsset: nftAddress,\\n            borrowRate: SafeCast.toUint16(borrowRate),\\n            initTimestamp: SafeCast.toUint40(block.timestamp),\\n            debtTimestamp: SafeCast.toUint40(block.timestamp),\\n            pool: pool,\\n            genesisNFTId: SafeCast.toUint16(genesisNFTId),\\n            state: DataTypes.LoanState.Active\\n        });\\n\\n        // Add NFT to loanId mapping\\n        for (uint256 i = 0; i < nftTokenIds.length; i++) {\\n            _nftToLoanId[nftAddress][nftTokenIds[i]] = _loansCount;\\n        }\\n\\n        // Add loan to active loans\\n        _activeLoans[borrower].push(_loansCount);\\n\\n        // Increment the loans count and then return it\\n        return _loansCount++;\\n    }\\n\\n    /// @notice Repay a loan by setting its state to Repaid\\n    /// @dev Only the market contract can call this function\\n    /// @param loanId The ID of the loan to be repaid\\n    function repayLoan(uint256 loanId) external override onlyMarket {\\n        // Update loan state\\n        _loans[loanId].state = DataTypes.LoanState.Repaid;\\n\\n        // Close the loan\\n        _closeLoan(loanId);\\n    }\\n\\n    /// @notice Liquidate a loan by setting its state to Liquidated and freeing up the NFT collateral pointers\\n    /// @dev Only the market contract can call this function\\n    /// @param loanId The ID of the loan to be liquidated\\n    function liquidateLoan(uint256 loanId) external override onlyMarket {\\n        // Update loan state\\n        _loans[loanId].state = DataTypes.LoanState.Liquidated;\\n\\n        // Close the loan\\n        _closeLoan(loanId);\\n    }\\n\\n    /// @notice Start an auction for a loan\\n    /// @dev Sets its state to Auctioned and creates the liquidation data\\n    /// @dev Only the market contract can call this function\\n    /// @param loanId The ID of the loan to be auctioned\\n    /// @param user The address of the user who started the auction\\n    /// @param bid The initial bid for the auction\\n    function auctionLoan(\\n        uint256 loanId,\\n        address user,\\n        uint256 bid\\n    ) external override onlyMarket {\\n        // Update state\\n        _loans[loanId].state = DataTypes.LoanState.Auctioned;\\n\\n        // Create the liquidation data\\n        _loansLiquidationData[loanId] = DataTypes.LoanLiquidationData({\\n            auctioneer: user,\\n            liquidator: user,\\n            auctionStartTimestamp: SafeCast.toUint40(block.timestamp),\\n            auctionMaxBid: bid\\n        });\\n    }\\n\\n    /// @notice Update the auction data for a loan\\n    /// @dev Only the market contract can call this function\\n    /// @param loanId The ID of the loan to be updated\\n    /// @param user The address of the user who updated the auction\\n    /// @param bid The new bid for the auction\\n    function updateLoanAuctionBid(\\n        uint256 loanId,\\n        address user,\\n        uint256 bid\\n    ) external override onlyMarket {\\n        // Update the liquidation data\\n        _loansLiquidationData[loanId].liquidator = user;\\n        _loansLiquidationData[loanId].auctionMaxBid = bid;\\n    }\\n\\n    /// @notice Changes the Risk Parameters for a collection.\\n    /// @param collection The address of the collection to change the max collaterization price for.\\n    /// @param maxLTV The new max LTV to set (10000 = 100%).\\n    /// @param liquidationThreshold The new liquidation Threshold to set (10000 = 100%).\\n    function setCollectionRiskParameters(\\n        address collection,\\n        uint256 maxLTV,\\n        uint256 liquidationThreshold\\n    ) external onlyOwner {\\n        //Set the max collaterization\\n        _collectionsRiskParameters[collection] = DataTypes\\n            .CollectionRiskParameters({\\n                maxLTV: SafeCast.toUint16(maxLTV),\\n                liquidationThreshold: SafeCast.toUint16(liquidationThreshold)\\n            });\\n    }\\n\\n    /// @notice Updates the debt timestamp of a loan.\\n    /// @param loanId The ID of the loan to update.\\n    /// @param newDebtTimestamp The new debt timestamp to set.\\n    function updateLoanDebtTimestamp(\\n        uint256 loanId,\\n        uint256 newDebtTimestamp\\n    ) external override onlyMarket {\\n        _loans[loanId].debtTimestamp = uint40(newDebtTimestamp);\\n    }\\n\\n    /// @notice Updates the amount of a loan.\\n    /// @param loanId The ID of the loan to update.\\n    /// @param newAmount The new amount to set.\\n    function updateLoanAmount(\\n        uint256 loanId,\\n        uint256 newAmount\\n    ) external override onlyMarket {\\n        _loans[loanId].amount = newAmount;\\n    }\\n\\n    /// @notice Get the number of loans in the loans list\\n    /// @return The number of loans\\n    function getLoansCount() external view override returns (uint256) {\\n        return _loansCount;\\n    }\\n\\n    /// @notice Get the active loans for a user\\n    /// @param user The address of the user\\n    /// @return An array of loan IDs\\n    function getUserActiveLoans(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return _activeLoans[user];\\n    }\\n\\n    /// @notice Get a loan by its ID\\n    /// @param loanId The ID of the loan to be retrieved\\n    /// @return The loan data\\n    function getLoan(\\n        uint256 loanId\\n    )\\n        external\\n        view\\n        override\\n        loanExists(loanId)\\n        returns (DataTypes.LoanData memory)\\n    {\\n        return _loans[loanId];\\n    }\\n\\n    /// @notice Get the liquidation data for a loan\\n    /// @param loanId The loan ID associated with the liquidation data to be retrieved\\n    function getLoanLiquidationData(\\n        uint256 loanId\\n    )\\n        external\\n        view\\n        override\\n        loanExists(loanId)\\n        loanAuctioned(loanId)\\n        returns (DataTypes.LoanLiquidationData memory)\\n    {\\n        return _loansLiquidationData[loanId];\\n    }\\n\\n    /// @notice Get the maximum debt a loan can reach before entering the liquidation zone\\n    /// @param loanId The ID of the loan to be queried\\n    /// @param collateralPrice The price of the tokens collateralizing the loan\\n    /// @return The maximum debt quoted in the same asset as the price of the collateral tokens\\n    function getLoanMaxDebt(\\n        uint256 loanId,\\n        uint256 collateralPrice\\n    ) external view override loanExists(loanId) returns (uint256) {\\n        return\\n            PercentageMath.percentMul(\\n                collateralPrice,\\n                getCollectionLiquidationThreshold(_loans[loanId].nftAsset)\\n            );\\n    }\\n\\n    /// @notice Get the loan ID associated with the specified NFT\\n    /// @param nftAddress The address of the NFT contract\\n    /// @param nftTokenId The ID of the NFT\\n    /// @return The ID of the loan associated with the NFT\\n    function getNFTLoanId(\\n        address nftAddress,\\n        uint256 nftTokenId\\n    ) external view override returns (uint256) {\\n        return _nftToLoanId[nftAddress][nftTokenId];\\n    }\\n\\n    /// @notice Get the debt owed on a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The total amount of debt owed on the loan quoted in the same asset of the loan's lending pool\\n    function getLoanDebt(\\n        uint256 loanId\\n    ) external view override loanExists(loanId) returns (uint256) {\\n        return _getLoanDebt(loanId);\\n    }\\n\\n    /// @notice Get the interest owed on a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The amount of interest owed on the loan\\n    function getLoanInterest(\\n        uint256 loanId\\n    ) external view override loanExists(loanId) returns (uint256) {\\n        return _getLoanInterest(loanId, block.timestamp);\\n    }\\n\\n    /// @notice Get the NFT token IDs associated with a loan\\n    /// @param loanId The ID of the loan\\n    /// @return An array of the NFT token IDs associated with the loan\\n    function getLoanTokenIds(\\n        uint256 loanId\\n    ) external view override loanExists(loanId) returns (uint256[] memory) {\\n        return _loans[loanId].nftTokenIds;\\n    }\\n\\n    /// @notice Get the NFT contract address associated with a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The address of the NFT contract associated with the loan\\n    function getLoanCollectionAddress(\\n        uint256 loanId\\n    ) external view override loanExists(loanId) returns (address) {\\n        return _loans[loanId].nftAsset;\\n    }\\n\\n    /// @notice Get the lending pool address associated with a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The address of the lending pool associated with the loan\\n    function getLoanLendingPool(\\n        uint256 loanId\\n    ) external view override loanExists(loanId) returns (address) {\\n        return _loans[loanId].pool;\\n    }\\n\\n    /// @notice Get the state of a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The state of the loan\\n    function getLoanState(\\n        uint256 loanId\\n    ) external view override returns (DataTypes.LoanState) {\\n        return _loans[loanId].state;\\n    }\\n\\n    /// @notice Get auctioner fee for a repayment of an auctioned loan\\n    /// @param loanId The ID of the loan\\n    /// @return The auctioner fee\\n    function getLoanAuctioneerFee(\\n        uint256 loanId\\n    ) external view loanExists(loanId) loanAuctioned(loanId) returns (uint256) {\\n        return\\n            PercentageMath.percentMul(\\n                _getLoanDebt(loanId),\\n                ILendingPool(_loans[loanId].pool)\\n                    .getPoolConfig()\\n                    .auctioneerFeeRate\\n            );\\n    }\\n\\n    /// @notice Get the owner of a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The address of the owner of the loan\\n    function getLoanOwner(\\n        uint256 loanId\\n    ) external view loanExists(loanId) returns (address) {\\n        return _loans[loanId].owner;\\n    }\\n\\n    /// @notice Gets the Max LTV for a collection, this is the maximum amount of debt that can be taken out against a collection in a borrow operation.\\n    /// @param collection The address of the collection to get the max collaterization price for.\\n    /// @return The Max LTV for the collection (10000 = 100%).\\n    function getCollectionMaxLTV(\\n        address collection\\n    ) external view override returns (uint256) {\\n        if (_collectionsRiskParameters[collection].maxLTV == 0) {\\n            return _defaultMaxLTV;\\n        }\\n        return _collectionsRiskParameters[collection].maxLTV;\\n    }\\n\\n    /// @notice Gets the Liquidation Threshold for a collection.\\n    /// @param collection The address of the collection to get the max collaterization price for.\\n    /// @return The Liquidation Threshold for the collection (10000 = 100%).\\n    function getCollectionLiquidationThreshold(\\n        address collection\\n    ) public view override returns (uint256) {\\n        if (_collectionsRiskParameters[collection].maxLTV == 0) {\\n            return _defaultLiquidationThreshold;\\n        }\\n        return _collectionsRiskParameters[collection].liquidationThreshold;\\n    }\\n\\n    /// @notice Auxiliary function to close the loan\\n    /// @param loanId The ID of the loan to close\\n    function _closeLoan(uint256 loanId) internal {\\n        // Cache loan NFTs array\\n        uint256[] memory loanTokenIds = _loans[loanId].nftTokenIds;\\n        // Get loans nft mapping\\n        address loanCollection = _loans[loanId].nftAsset;\\n\\n        // Remove nft to loan id mapping\\n        for (uint256 i = 0; i < loanTokenIds.length; i++) {\\n            delete _nftToLoanId[loanCollection][loanTokenIds[i]];\\n        }\\n\\n        // Remove loan from user active loans\\n        address loanOwner = _loans[loanId].owner;\\n        uint256[] memory userActiveLoans = _activeLoans[loanOwner];\\n        for (uint256 i = 0; i < userActiveLoans.length; i++) {\\n            if (userActiveLoans[i] == loanId) {\\n                _activeLoans[loanOwner][i] = userActiveLoans[\\n                    userActiveLoans.length - 1\\n                ];\\n                _activeLoans[loanOwner].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice GEts the loan interest for a given timestamp\\n    /// @param loanId The ID of the loan\\n    /// @param timestamp The timestamp to get the interest for\\n    /// @return The amount of interest owed on the loan\\n    function _getLoanInterest(\\n        uint256 loanId,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        //Interest increases every 30 minutes\\n        uint256 incrementalTimestamp = (((timestamp - 1) / (30 * 60)) + 1) *\\n            (30 * 60);\\n        DataTypes.LoanData memory loan = _loans[loanId];\\n\\n        return\\n            (loan.amount *\\n                uint256(loan.borrowRate) *\\n                (incrementalTimestamp - uint256(loan.debtTimestamp))) /\\n            (PercentageMath.PERCENTAGE_FACTOR * 365 days);\\n    }\\n\\n    /// @notice Internal function to get the debt owed on a loan\\n    /// @param loanId The ID of the loan\\n    /// @return The total amount of debt owed on the loan\\n    function _getLoanDebt(uint256 loanId) internal view returns (uint256) {\\n        return\\n            _getLoanInterest(loanId, block.timestamp) + _loans[loanId].amount;\\n    }\\n\\n    function _requireOnlyMarket() internal view {\\n        require(\\n            msg.sender == _addressProvider.getLendingMarket(),\\n            \\\"LC:NOT_MARKET\\\"\\n        );\\n    }\\n\\n    function _requireLoanExists(uint256 loanId) internal view {\\n        require(\\n            _loans[loanId].state != DataTypes.LoanState.None,\\n            \\\"LC:UNEXISTENT_LOAN\\\"\\n        );\\n    }\\n\\n    function _requireLoanAuctioned(uint256 loanId) internal view {\\n        require(\\n            _loans[loanId].state == DataTypes.LoanState.Auctioned,\\n            \\\"LC:NOT_AUCTIONED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/Trustus/Trustus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\n/// @title Trustus\\n/// @author zefram.eth\\n/// @notice Trust-minimized method for accessing offchain data onchain\\nabstract contract Trustus {\\n    /// -----------------------------------------------------------------------\\n    /// Structs\\n    /// -----------------------------------------------------------------------\\n\\n    /// @param v Part of the ECDSA signature\\n    /// @param r Part of the ECDSA signature\\n    /// @param s Part of the ECDSA signature\\n    /// @param request Identifier for verifying the packet is what is desired\\n    /// , rather than a packet for some other function/contract\\n    /// @param deadline The Unix timestamp (in seconds) after which the packet\\n    /// should be rejected by the contract\\n    /// @param payload The payload of the packet\\n    struct TrustusPacket {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes32 request;\\n        uint256 deadline;\\n        bytes payload;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Immutable parameters\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The chain ID used by EIP-712\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    /// @notice The domain separator used by EIP-712\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Records whether an address is trusted as a packet provider\\n    /// @dev provider => value\\n    mapping(address => bool) internal isTrusted;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Modifiers\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Verifies whether a packet is valid and returns the result.\\n    /// Will revert if the packet is invalid.\\n    /// @dev The deadline, request, and signature are verified.\\n    /// @param request The identifier for the requested payload\\n    /// @param packet The packet provided by the offchain data provider\\n    modifier verifyPacket(bytes32 request, TrustusPacket calldata packet) {\\n        _verifyPacket(request, packet);\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor() {\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Packet verification\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Verifies whether a packet is valid and returns the result.\\n    /// @dev The deadline, request, and signature are verified.\\n    /// @param request The identifier for the requested payload\\n    /// @param packet The packet provided by the offchain data provider\\n    function _verifyPacket(\\n        bytes32 request,\\n        TrustusPacket calldata packet\\n    ) internal view virtual {\\n        // verify deadline\\n        require(block.timestamp < packet.deadline, \\\"T:V:DEADLINE_EXCEEDED\\\");\\n\\n        // verify request\\n        require(request == packet.request, \\\"T:V:INVALID_REQUEST\\\");\\n\\n        // verify signature\\n        address recoveredAddress = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            keccak256(\\n                                \\\"VerifyPacket(bytes32 request,uint256 deadline,bytes payload)\\\"\\n                            ),\\n                            packet.request,\\n                            packet.deadline,\\n                            keccak256(packet.payload)\\n                        )\\n                    )\\n                )\\n            ),\\n            packet.v,\\n            packet.r,\\n            packet.s\\n        );\\n\\n        require(\\n            recoveredAddress != address(0) && isTrusted[recoveredAddress],\\n            \\\"T:V:INVALID_SIGNATURE\\\"\\n        );\\n    }\\n\\n    /// @notice Sets the trusted status of an offchain data provider.\\n    /// @param signer The data provider's ECDSA public key as an Ethereum address\\n    /// @param isTrusted_ The desired trusted status to set\\n    function _setIsTrusted(address signer, bool isTrusted_) internal virtual {\\n        isTrusted[signer] = isTrusted_;\\n    }\\n\\n    function _isTrusted(address signer) internal view virtual returns (bool) {\\n        return (isTrusted[signer]);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-712 compliance\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The domain separator used by EIP-712\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return\\n            block.chainid == INITIAL_CHAIN_ID\\n                ? INITIAL_DOMAIN_SEPARATOR\\n                : _computeDomainSeparator();\\n    }\\n\\n    /// @notice Computes the domain separator used by EIP-712\\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(\\\"leNFT\\\"),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": false,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"auctionLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesisNFTId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionMaxLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"borrowRate\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"initTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"debtTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"genesisNFTId\",\"type\":\"uint16\"},{\"internalType\":\"enum DataTypes.LoanState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanAuctioneerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanLiquidationData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"auctioneer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"auctionStartTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"auctionMaxBid\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.LoanLiquidationData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPrice\",\"type\":\"uint256\"}],\"name\":\"getLoanMaxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanState\",\"outputs\":[{\"internalType\":\"enum DataTypes.LoanState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoansCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserActiveLoans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultMaxLTV\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"}],\"name\":\"setCollectionRiskParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateLoanAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"updateLoanAuctionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDebtTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateLoanDebtTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LoanCenter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004df583e7d80336cb9ee91c381a939aee58404567", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}