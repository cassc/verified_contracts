{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IAggregatorV3Interface.sol\\\";\\nimport \\\"../dependencies/WenMath.sol\\\";\\nimport \\\"../dependencies/WenOwnable.sol\\\";\\n\\n/**\\n    @title Wen Multi Token Price Feed\\n    @notice Based on Gravita's PriceFeed:\\n            https://github.com/Gravita-Protocol/Gravita-SmartContracts/blob/9b69d555f3567622b0f84df8c7f1bb5cd9323573/contracts/PriceFeed.sol\\n\\n            Wen's implementation additionally caches price values within a block and incorporates exchange rate settings for derivative tokens (e.g. stETH -> wstETH).\\n */\\ncontract PriceFeed is WenOwnable {\\n\\tstruct OracleRecord {\\n\\t\\tIAggregatorV3Interface chainLinkOracle;\\n\\t\\tuint8 decimals;\\n\\t\\tuint32 heartbeat;\\n\\t\\tbytes4 sharePriceSignature;\\n\\t\\tuint8 sharePriceDecimals;\\n\\t\\tbool isFeedWorking;\\n\\t\\tbool isEthIndexed;\\n\\t}\\n\\n\\tstruct PriceRecord {\\n\\t\\tuint96 scaledPrice;\\n\\t\\tuint32 timestamp;\\n\\t\\tuint32 lastUpdated;\\n\\t\\tuint80 roundId;\\n\\t}\\n\\n\\tstruct FeedResponse {\\n\\t\\tuint80 roundId;\\n\\t\\tint256 answer;\\n\\t\\tuint256 timestamp;\\n\\t\\tbool success;\\n\\t}\\n\\n\\t// Custom Errors --------------------------------------------------------------------------------------------------\\n\\n\\terror PriceFeed__InvalidFeedResponseError(address token);\\n\\terror PriceFeed__FeedFrozenError(address token);\\n\\terror PriceFeed__UnknownFeedError(address token);\\n\\terror PriceFeed__HeartbeatOutOfBoundsError();\\n\\n\\t// Events ---------------------------------------------------------------------------------------------------------\\n\\n\\tevent NewOracleRegistered(address token, address chainlinkAggregator, bool isEthIndexed);\\n\\tevent PriceFeedStatusUpdated(address token, address oracle, bool isWorking);\\n\\tevent PriceRecordUpdated(address indexed token, uint256 _price);\\n\\n\\t/** Constants ---------------------------------------------------------------------------------------------------- */\\n\\n\\t// Used to convert a chainlink price answer to an 18-digit precision uint\\n\\tuint256 public constant TARGET_DIGITS = 18;\\n\\n\\t// Responses are considered stale this many seconds after the oracle's heartbeat\\n\\tuint256 public constant RESPONSE_TIMEOUT_BUFFER = 1 hours;\\n\\n\\t// Maximum deviation allowed between two consecutive Chainlink oracle prices. 18-digit precision.\\n\\tuint256 public constant MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND = 5e17; // 50%\\n\\n\\t// State ------------------------------------------------------------------------------------------------------------\\n\\n\\tmapping(address => OracleRecord) public oracleRecords;\\n\\tmapping(address => PriceRecord) public priceRecords;\\n\\n\\tconstructor(IWenCore _WenCore) WenOwnable(_WenCore) {}\\n\\n\\t// Admin routines ---------------------------------------------------------------------------------------------------\\n\\n\\t/**\\n        @notice Set the oracle for a specific token\\n        @param _token Address of the LST to set the oracle for\\n        @param _chainlinkOracle Address of the chainlink oracle for this LST\\n        @param _heartbeat Oracle heartbeat, in seconds\\n        @param sharePriceSignature Four byte function selector to be used when calling `_collateral`, in order to obtain the share price\\n        @param sharePriceDecimals Decimal precision used in the returned share price\\n        @param _isEthIndexed True if the base currency is ETH\\n     */\\n\\tfunction setOracle(address _token, address _chainlinkOracle, uint32 _heartbeat, bytes4 sharePriceSignature, uint8 sharePriceDecimals, bool _isEthIndexed) public onlyOwner {\\n\\t\\tif (_heartbeat > 86400) revert PriceFeed__HeartbeatOutOfBoundsError();\\n\\t\\tIAggregatorV3Interface newFeed = IAggregatorV3Interface(_chainlinkOracle);\\n\\t\\t(FeedResponse memory currResponse, FeedResponse memory prevResponse, ) = _fetchFeedResponses(newFeed, 0);\\n\\n\\t\\tif (!_isFeedWorking(currResponse, prevResponse)) {\\n\\t\\t\\trevert PriceFeed__InvalidFeedResponseError(_token);\\n\\t\\t}\\n\\t\\tif (_isPriceStale(currResponse.timestamp, _heartbeat)) {\\n\\t\\t\\trevert PriceFeed__FeedFrozenError(_token);\\n\\t\\t}\\n\\n\\t\\tOracleRecord memory record = OracleRecord({ chainLinkOracle: newFeed, decimals: newFeed.decimals(), heartbeat: _heartbeat, sharePriceSignature: sharePriceSignature, sharePriceDecimals: sharePriceDecimals, isFeedWorking: true, isEthIndexed: _isEthIndexed });\\n\\n\\t\\toracleRecords[_token] = record;\\n\\t\\tPriceRecord memory _priceRecord = priceRecords[_token];\\n\\n\\t\\t_processFeedResponses(_token, record, currResponse, prevResponse, _priceRecord);\\n\\t\\temit NewOracleRegistered(_token, _chainlinkOracle, _isEthIndexed);\\n\\t}\\n\\n\\t// Public functions -------------------------------------------------------------------------------------------------\\n\\n\\t/**\\n        @notice Get the latest price returned from the oracle\\n        @dev You can obtain these values by calling `TroveManager.fetchPrice()`\\n             rather than directly interacting with this contract.\\n        @param _token Token to fetch the price for\\n        @return The latest valid price for the requested token\\n     */\\n\\tfunction fetchPrice(address _token) public returns (uint256) {\\n\\t\\tPriceRecord memory priceRecord = priceRecords[_token];\\n\\t\\tif (priceRecord.lastUpdated == block.timestamp) {\\n\\t\\t\\t// We short-circuit only if the price was already correct in the current block\\n\\t\\t\\treturn priceRecord.scaledPrice;\\n\\t\\t}\\n\\t\\tif (priceRecord.lastUpdated == 0) {\\n\\t\\t\\trevert PriceFeed__UnknownFeedError(_token);\\n\\t\\t}\\n\\n\\t\\tOracleRecord storage oracle = oracleRecords[_token];\\n\\n\\t\\t(FeedResponse memory currResponse, FeedResponse memory prevResponse, bool updated) = _fetchFeedResponses(oracle.chainLinkOracle, priceRecord.roundId);\\n\\n\\t\\tif (!updated) {\\n\\t\\t\\tif (_isPriceStale(priceRecord.timestamp, oracle.heartbeat)) {\\n\\t\\t\\t\\trevert PriceFeed__FeedFrozenError(_token);\\n\\t\\t\\t}\\n\\t\\t\\treturn priceRecord.scaledPrice;\\n\\t\\t}\\n\\n\\t\\treturn _processFeedResponses(_token, oracle, currResponse, prevResponse, priceRecord);\\n\\t}\\n\\n\\t// Internal functions -----------------------------------------------------------------------------------------------\\n\\n\\tfunction _processFeedResponses(address _token, OracleRecord memory oracle, FeedResponse memory _currResponse, FeedResponse memory _prevResponse, PriceRecord memory priceRecord) internal returns (uint256) {\\n\\t\\tuint8 decimals = oracle.decimals;\\n\\t\\tbool isValidResponse = _isFeedWorking(_currResponse, _prevResponse) && !_isPriceStale(_currResponse.timestamp, oracle.heartbeat) && !_isPriceChangeAboveMaxDeviation(_currResponse, _prevResponse, decimals);\\n\\t\\tif (isValidResponse) {\\n\\t\\t\\tuint256 scaledPrice = _scalePriceByDigits(uint256(_currResponse.answer), decimals);\\n\\t\\t\\tif (oracle.sharePriceSignature != 0) {\\n\\t\\t\\t\\t(bool success, bytes memory returnData) = _token.staticcall(abi.encode(oracle.sharePriceSignature));\\n\\t\\t\\t\\trequire(success, \\\"Share price not available\\\");\\n\\t\\t\\t\\tscaledPrice = (scaledPrice * abi.decode(returnData, (uint256))) / (10 ** oracle.sharePriceDecimals);\\n\\t\\t\\t}\\n\\t\\t\\tif (oracle.isEthIndexed) {\\n\\t\\t\\t\\t// Oracle returns ETH price, need to convert to USD\\n\\t\\t\\t\\tscaledPrice = _calcEthPrice(scaledPrice);\\n\\t\\t\\t}\\n\\t\\t\\tif (!oracle.isFeedWorking) {\\n\\t\\t\\t\\t_updateFeedStatus(_token, oracle, true);\\n\\t\\t\\t}\\n\\t\\t\\t_storePrice(_token, scaledPrice, _currResponse.timestamp, _currResponse.roundId);\\n\\t\\t\\treturn scaledPrice;\\n\\t\\t} else {\\n\\t\\t\\tif (oracle.isFeedWorking) {\\n\\t\\t\\t\\t_updateFeedStatus(_token, oracle, false);\\n\\t\\t\\t}\\n\\t\\t\\tif (_isPriceStale(priceRecord.timestamp, oracle.heartbeat)) {\\n\\t\\t\\t\\trevert PriceFeed__FeedFrozenError(_token);\\n\\t\\t\\t}\\n\\t\\t\\treturn priceRecord.scaledPrice;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _calcEthPrice(uint256 ethAmount) internal returns (uint256) {\\n\\t\\tuint256 ethPrice = fetchPrice(address(0));\\n\\t\\treturn (ethPrice * ethAmount) / 1 ether;\\n\\t}\\n\\n\\tfunction _fetchFeedResponses(IAggregatorV3Interface oracle, uint80 lastRoundId) internal view returns (FeedResponse memory currResponse, FeedResponse memory prevResponse, bool updated) {\\n\\t\\tcurrResponse = _fetchCurrentFeedResponse(oracle);\\n\\t\\tif (lastRoundId == 0 || currResponse.roundId > lastRoundId) {\\n\\t\\t\\tprevResponse = _fetchPrevFeedResponse(oracle, currResponse.roundId);\\n\\t\\t\\tupdated = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _isPriceStale(uint256 _priceTimestamp, uint256 _heartbeat) internal view returns (bool) {\\n\\t\\treturn block.timestamp - _priceTimestamp > _heartbeat + RESPONSE_TIMEOUT_BUFFER;\\n\\t}\\n\\n\\tfunction _isFeedWorking(FeedResponse memory _currentResponse, FeedResponse memory _prevResponse) internal view returns (bool) {\\n\\t\\treturn _isValidResponse(_currentResponse) && _isValidResponse(_prevResponse);\\n\\t}\\n\\n\\tfunction _isValidResponse(FeedResponse memory _response) internal view returns (bool) {\\n\\t\\treturn (_response.success) && (_response.roundId != 0) && (_response.timestamp != 0) && (_response.timestamp <= block.timestamp) && (_response.answer != 0);\\n\\t}\\n\\n\\tfunction _isPriceChangeAboveMaxDeviation(FeedResponse memory _currResponse, FeedResponse memory _prevResponse, uint8 decimals) internal pure returns (bool) {\\n\\t\\tuint256 currentScaledPrice = _scalePriceByDigits(uint256(_currResponse.answer), decimals);\\n\\t\\tuint256 prevScaledPrice = _scalePriceByDigits(uint256(_prevResponse.answer), decimals);\\n\\n\\t\\tuint256 minPrice = WenMath._min(currentScaledPrice, prevScaledPrice);\\n\\t\\tuint256 maxPrice = WenMath._max(currentScaledPrice, prevScaledPrice);\\n\\n\\t\\t/*\\n\\t\\t * Use the larger price as the denominator:\\n\\t\\t * - If price decreased, the percentage deviation is in relation to the previous price.\\n\\t\\t * - If price increased, the percentage deviation is in relation to the current price.\\n\\t\\t */\\n\\t\\tuint256 percentDeviation = ((maxPrice - minPrice) * WenMath.DECIMAL_PRECISION) / maxPrice;\\n\\n\\t\\treturn percentDeviation > MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND;\\n\\t}\\n\\n\\tfunction _scalePriceByDigits(uint256 _price, uint256 _answerDigits) internal pure returns (uint256) {\\n\\t\\tif (_answerDigits == TARGET_DIGITS) {\\n\\t\\t\\treturn _price;\\n\\t\\t} else if (_answerDigits < TARGET_DIGITS) {\\n\\t\\t\\t// Scale the returned price value up to target precision\\n\\t\\t\\treturn _price * (10 ** (TARGET_DIGITS - _answerDigits));\\n\\t\\t} else {\\n\\t\\t\\t// Scale the returned price value down to target precision\\n\\t\\t\\treturn _price / (10 ** (_answerDigits - TARGET_DIGITS));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _updateFeedStatus(address _token, OracleRecord memory _oracle, bool _isWorking) internal {\\n\\t\\toracleRecords[_token].isFeedWorking = _isWorking;\\n\\t\\temit PriceFeedStatusUpdated(_token, address(_oracle.chainLinkOracle), _isWorking);\\n\\t}\\n\\n\\tfunction _storePrice(address _token, uint256 _price, uint256 _timestamp, uint80 roundId) internal {\\n\\t\\tpriceRecords[_token] = PriceRecord({ scaledPrice: uint96(_price), timestamp: uint32(_timestamp), lastUpdated: uint32(block.timestamp), roundId: roundId });\\n\\t\\temit PriceRecordUpdated(_token, _price);\\n\\t}\\n\\n\\tfunction _fetchCurrentFeedResponse(IAggregatorV3Interface _priceAggregator) internal view returns (FeedResponse memory response) {\\n\\t\\ttry _priceAggregator.latestRoundData() returns (uint80 roundId, int256 answer, uint256 /* startedAt */, uint256 timestamp, uint80 /* answeredInRound */) {\\n\\t\\t\\t// If call to Chainlink succeeds, return the response and success = true\\n\\t\\t\\tresponse.roundId = roundId;\\n\\t\\t\\tresponse.answer = answer;\\n\\t\\t\\tresponse.timestamp = timestamp;\\n\\t\\t\\tresponse.success = true;\\n\\t\\t} catch {\\n\\t\\t\\t// If call to Chainlink aggregator reverts, return a zero response with success = false\\n\\t\\t\\treturn response;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _fetchPrevFeedResponse(IAggregatorV3Interface _priceAggregator, uint80 _currentRoundId) internal view returns (FeedResponse memory prevResponse) {\\n\\t\\tif (_currentRoundId == 0) {\\n\\t\\t\\treturn prevResponse;\\n\\t\\t}\\n\\t\\tunchecked {\\n\\t\\t\\ttry _priceAggregator.getRoundData(_currentRoundId - 1) returns (uint80 roundId, int256 answer, uint256 /* startedAt */, uint256 timestamp, uint80 /* answeredInRound */) {\\n\\t\\t\\t\\tprevResponse.roundId = roundId;\\n\\t\\t\\t\\tprevResponse.answer = answer;\\n\\t\\t\\t\\tprevResponse.timestamp = timestamp;\\n\\t\\t\\t\\tprevResponse.success = true;\\n\\t\\t\\t} catch {}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/WenMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary WenMath {\\n\\tuint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n\\t/* Precision for Nominal ICR (independent of price). Rationale for the value:\\n\\t *\\n\\t * - Making it \u201ctoo high\u201d could lead to overflows.\\n\\t * - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n\\t *\\n\\t * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39,\\n\\t * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n\\t *\\n\\t */\\n\\tuint256 internal constant NICR_PRECISION = 1e20;\\n\\n\\tfunction _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a < _b) ? _a : _b;\\n\\t}\\n\\n\\tfunction _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a : _b;\\n\\t}\\n\\n\\t/*\\n\\t * Multiply two decimal numbers and use normal rounding rules:\\n\\t * -round product up if 19'th mantissa digit >= 5\\n\\t * -round product down if 19'th mantissa digit < 5\\n\\t *\\n\\t * Used only inside the exponentiation, _decPow().\\n\\t */\\n\\tfunction decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n\\t\\tuint256 prod_xy = x * y;\\n\\n\\t\\tdecProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n\\t}\\n\\n\\t/*\\n\\t * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n\\t *\\n\\t * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n\\t *\\n\\t * TroveManager._calcDecayedBaseRate\\n\\t *\\n\\t * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n\\t * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n\\t *\\n\\t * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n\\t * negligibly different from just passing the cap, since:\\n\\t *\\n\\t * the decayed base rate will be 0 for 1000 years or > 1000 years\\n\\t */\\n\\tfunction _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n\\t\\tif (_minutes > 525600000) {\\n\\t\\t\\t_minutes = 525600000;\\n\\t\\t} // cap to avoid overflow\\n\\n\\t\\tif (_minutes == 0) {\\n\\t\\t\\treturn DECIMAL_PRECISION;\\n\\t\\t}\\n\\n\\t\\tuint256 y = DECIMAL_PRECISION;\\n\\t\\tuint256 x = _base;\\n\\t\\tuint256 n = _minutes;\\n\\n\\t\\t// Exponentiation-by-squaring\\n\\t\\twhile (n > 1) {\\n\\t\\t\\tif (n % 2 == 0) {\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = n / 2;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if (n % 2 != 0)\\n\\t\\t\\t\\ty = decMul(x, y);\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = (n - 1) / 2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn decMul(x, y);\\n\\t}\\n\\n\\tfunction _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a - _b : _b - _a;\\n\\t}\\n\\n\\tfunction _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\treturn (_coll * NICR_PRECISION) / _debt;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2 ** 256 - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = (_coll * _price) / _debt;\\n\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = (_coll) / _debt;\\n\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/WenOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IWenCore.sol\\\";\\n\\n/**\\n    @title Wen Ownable\\n    @notice Contracts inheriting `WenOwnable` have the same owner as `WenCore`.\\n            The ownership cannot be independently modified or renounced.\\n */\\ncontract WenOwnable {\\n\\tIWenCore public immutable WenCore;\\n\\n\\tconstructor(IWenCore _WenCore) {\\n\\t\\tWenCore = _WenCore;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == WenCore.owner(), \\\"Only owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn WenCore.owner();\\n\\t}\\n\\n\\tfunction guardian() public view returns (address) {\\n\\t\\treturn WenCore.guardian();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.19;\\n\\ninterface IAggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(uint80 _roundId) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWenCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IWenCore {\\n\\tevent FeeReceiverSet(address feeReceiver);\\n\\tevent GuardianSet(address guardian);\\n\\tevent NewOwnerAccepted(address oldOwner, address owner);\\n\\tevent NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\\n\\tevent NewOwnerRevoked(address owner, address revokedOwner);\\n\\tevent Paused();\\n\\tevent PriceFeedSet(address priceFeed);\\n\\tevent Unpaused();\\n\\n\\tfunction acceptTransferOwnership() external;\\n\\n\\tfunction commitTransferOwnership(address newOwner) external;\\n\\n\\tfunction revokeTransferOwnership() external;\\n\\n\\tfunction setFeeReceiver(address _feeReceiver) external;\\n\\n\\tfunction setGuardian(address _guardian) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction setPriceFeed(address _priceFeed) external;\\n\\n\\tfunction OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\\n\\n\\tfunction feeReceiver() external view returns (address);\\n\\n\\tfunction guardian() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction ownershipTransferDeadline() external view returns (uint256);\\n\\n\\tfunction paused() external view returns (bool);\\n\\n\\tfunction pendingOwner() external view returns (address);\\n\\n\\tfunction startTime() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWenCore\",\"name\":\"_WenCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__FeedFrozenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeed__HeartbeatOutOfBoundsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__InvalidFeedResponseError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__UnknownFeedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"chainlinkAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"name\":\"NewOracleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWorking\",\"type\":\"bool\"}],\"name\":\"PriceFeedStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceRecordUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESPONSE_TIMEOUT_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WenCore\",\"outputs\":[{\"internalType\":\"contract IWenCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleRecords\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"chainLinkOracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"},{\"internalType\":\"bytes4\",\"name\":\"sharePriceSignature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"sharePriceDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFeedWorking\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceRecords\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"scaledPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkOracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_heartbeat\",\"type\":\"uint32\"},{\"internalType\":\"bytes4\",\"name\":\"sharePriceSignature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"sharePriceDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isEthIndexed\",\"type\":\"bool\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceFeed", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000000b68e02b6ab80a2975d2358d869e50a9d9947ab9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}