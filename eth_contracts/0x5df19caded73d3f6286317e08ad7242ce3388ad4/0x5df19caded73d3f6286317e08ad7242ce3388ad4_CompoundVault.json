{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/vaults/CompoundVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { VaultErrors } from \\\"../libraries/VaultErrors.sol\\\";\\nimport { Vault } from \\\"./Vault.sol\\\";\\n\\n/**\\n * @title Dollet CompoundVault contract\\n * @author Dollet Team\\n * @notice An implementation of the CompoundVault contract. Compounds are executed on each deposit/withdrawal operation.\\n */\\ncontract CompoundVault is Vault {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes this contract with initial values.\\n     * @param _adminStructure AdminStructure contract address.\\n     * @param _strategy Strategy contract address.\\n     * @param _weth WETH token contract address.\\n     * @param _calculations Calculations contract address.\\n     * @param _depositAllowedTokens Deposit allowed tokens list.\\n     * @param _withdrawalAllowedTokens Withdrawal allowed tokens list.\\n     * @param _depositLimits Deposit limits list in deposit allowed tokens.\\n     */\\n    function initialize(\\n        address _adminStructure,\\n        address _strategy,\\n        address _weth,\\n        address _calculations,\\n        address[] calldata _depositAllowedTokens,\\n        address[] calldata _withdrawalAllowedTokens,\\n        DepositLimit[] calldata _depositLimits\\n    )\\n        external\\n        initializer\\n    {\\n        _vaultInitUnchained(\\n            _adminStructure,\\n            _strategy,\\n            _weth,\\n            _calculations,\\n            _depositAllowedTokens,\\n            _withdrawalAllowedTokens,\\n            _depositLimits\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposit to the strategy.\\n     * @param _user Address of the user providing the deposit tokens.\\n     * @param _token Address of the token to deposit.\\n     * @param _amount Amount of tokens to deposit.\\n     * @param _additionalData Additional encoded data for the deposit.\\n     */\\n    function _deposit(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _additionalData\\n    )\\n        internal\\n        override\\n    {\\n        strategy.deposit(_user, _token, _amount, _additionalData);\\n    }\\n\\n    /**\\n     * @notice Withdraw from the strategy.\\n     * @param _recipient Address of the recipient to receive tokens.\\n     * @param _user Address of the user who deposited.\\n     * @param _originalToken Address of the original token, useful on ETH deposits.\\n     * @param _token Address of the token to withdraw.\\n     * @param _wantToWithdraw Amount of want tokens to withdraw.\\n     * @param _maxUserWant Maximum available user want.\\n     * @param _additionalData Additional encoded data for the withdrawal.\\n     */\\n    function _withdraw(\\n        address _recipient,\\n        address _user,\\n        address _originalToken,\\n        address _token,\\n        uint256 _wantToWithdraw,\\n        uint256 _maxUserWant,\\n        bytes calldata _additionalData\\n    )\\n        internal\\n        override\\n    {\\n        if (_wantToWithdraw == 0) revert VaultErrors.WrongAmount();\\n\\n        strategy.withdraw(_recipient, _user, _originalToken, _token, _wantToWithdraw, _maxUserWant, _additionalData);\\n    }\\n\\n    /**\\n     * @notice CompoundVault specific implementation of the compound method that should be executed in the time of\\n     *         deposit.\\n     */\\n    function _depositCompound() internal virtual override {\\n        strategy.compound(hex\\\"\\\");\\n    }\\n\\n    /**\\n     * @notice CompoundVault specific implementation of the compound method that should be executed in the time of\\n     *         withdraw.\\n     */\\n    function _withdrawCompound() internal virtual override {\\n        strategy.compound(hex\\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/VaultErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IVault } from \\\"../interfaces/dollet/IVault.sol\\\";\\n\\n/**\\n * @title Dollet VaultErrors library\\n * @author Dollet Team\\n * @notice Library with all Vault errors.\\n */\\nlibrary VaultErrors {\\n    error TokenWontChange(IVault.TokenType _tokenType, address _token);\\n    error ErrorWithNativeTokenTransfer(address _to, uint256 _amount);\\n    error InvalidDepositAmount(address _token, uint256 _amount);\\n    error MustKeepOneToken(IVault.TokenType _tokenType);\\n    error NotAllowedWithdrawalToken(address _token);\\n    error NotAllowedDepositToken(address _token);\\n    error WrongWithdrawalAllowedTokensCount();\\n    error DuplicateWithdrawalAllowedToken();\\n    error WrongDepositAllowedTokensCount();\\n    error DuplicateDepositAllowedToken();\\n    error WithdrawStuckWrongToken();\\n    error ValueAndAmountMismatch();\\n    error WantToWithdrawTooHigh();\\n    error ZeroMinDepositAmount();\\n    error InsufficientAmount();\\n    error InvalidTokenStatus();\\n    error WrongAmount();\\n}\\n\"\r\n    },\r\n    \"src/vaults/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IAdminStructure } from \\\"../interfaces/dollet/IAdminStructure.sol\\\";\\nimport { ICalculations } from \\\"./../interfaces/dollet/ICalculations.sol\\\";\\nimport { ERC20Lib, Signature } from \\\"../libraries/ERC20Lib.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/dollet/IStrategy.sol\\\";\\nimport { AddressUtils } from \\\"../libraries/AddressUtils.sol\\\";\\nimport { VaultErrors } from \\\"../libraries/VaultErrors.sol\\\";\\nimport { IVault } from \\\"../interfaces/dollet/IVault.sol\\\";\\nimport { IWETH } from \\\"./../interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Dollet Vault contract\\n * @author Dollet Team\\n * @notice Abstract Vault contract. All Vaults should inherit from it because it contains the common logic for all\\n *         Vaults.\\n */\\nabstract contract Vault is Initializable, PausableUpgradeable, ReentrancyGuardUpgradeable, IVault {\\n    using AddressUtils for address;\\n\\n    uint256 private constant _ALLOWED = 1;\\n\\n    mapping(address user => uint256 amount) public userShares;\\n    mapping(address token => uint256 isAllowed) public depositAllowedTokens;\\n    mapping(address token => uint256 isAllowed) public withdrawalAllowedTokens;\\n    mapping(address token => DepositLimit limit) public depositLimit;\\n    address[] public listDepositAllowedTokens;\\n    address[] public listWithdrawalAllowedTokens;\\n    IAdminStructure public adminStructure;\\n    ICalculations public calculations;\\n    IStrategy public strategy;\\n    IWETH public weth;\\n    uint256 public totalShares;\\n\\n    /// @inheritdoc IVault\\n    function deposit(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _additionalData\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        Signature memory _signature;\\n\\n        _processDeposit(_user, _token, _amount, _additionalData, _signature);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function depositWithPermit(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _additionalData,\\n        Signature calldata _signature\\n    )\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _processDeposit(_user, _token, _amount, _additionalData, _signature);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdraw(\\n        address _recipient,\\n        address _token,\\n        uint256 _amountShares,\\n        bytes calldata _additionalData\\n    )\\n        external\\n        nonReentrant\\n    {\\n        if (withdrawalAllowedTokens[_token] != _ALLOWED) revert VaultErrors.NotAllowedWithdrawalToken(_token);\\n\\n        uint256 _userShares = userShares[msg.sender];\\n\\n        if (_userShares < _amountShares) revert VaultErrors.InsufficientAmount();\\n\\n        _withdrawCompound();\\n\\n        address _originalToken = _token;\\n\\n        _token = _token == address(0) ? address(weth) : _token;\\n\\n        _withdraw(\\n            _recipient,\\n            msg.sender,\\n            _originalToken,\\n            _token,\\n            sharesToWant(_amountShares),\\n            sharesToWant(_userShares),\\n            _additionalData\\n        );\\n\\n        unchecked {\\n            userShares[msg.sender] -= _amountShares;\\n            totalShares -= _amountShares;\\n        }\\n    }\\n\\n    /// @inheritdoc IVault\\n    function setAdminStructure(address _adminStructure) external {\\n        _onlySuperAdmin();\\n\\n        AddressUtils.onlyContract(_adminStructure);\\n\\n        adminStructure = IAdminStructure(_adminStructure);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function editDepositAllowedTokens(address _token, uint256 _status) external {\\n        _onlySuperAdmin();\\n        _editAllowedTokens(depositAllowedTokens, listDepositAllowedTokens, _token, _status, TokenType.Deposit);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function editWithdrawalAllowedTokens(address _token, uint256 _status) external {\\n        _onlySuperAdmin();\\n\\n        if (listWithdrawalAllowedTokens.length == 1 && _status != _ALLOWED) {\\n            revert VaultErrors.MustKeepOneToken(TokenType.Withdrawal);\\n        }\\n\\n        _editAllowedTokens(withdrawalAllowedTokens, listWithdrawalAllowedTokens, _token, _status, TokenType.Withdrawal);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function editDepositLimit(DepositLimit[] calldata _depositLimits) external {\\n        _onlyAdmin();\\n        _setDepositLimits(_depositLimits);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function togglePause() external {\\n        _onlyAdmin();\\n\\n        bool _isPaused = paused();\\n\\n        if (_isPaused) _unpause();\\n        else _pause();\\n\\n        emit PauseStatusChanged(!_isPaused);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function inCaseTokensGetStuck(address _token) external {\\n        _onlyAdmin();\\n\\n        if (_token == address(strategy.want())) revert VaultErrors.WithdrawStuckWrongToken();\\n\\n        uint256 _amount = IERC20Upgradeable(_token).balanceOf(address(this));\\n\\n        ERC20Lib.push(_token, adminStructure.superAdmin(), _amount);\\n\\n        emit WithdrawStuckTokens(msg.sender, _token, _amount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getListAllowedTokens(TokenType _tokenType) external view returns (address[] memory) {\\n        if (_tokenType == TokenType.Deposit) return listDepositAllowedTokens;\\n        else return listWithdrawalAllowedTokens;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function wantToShares(uint256 _wantAmount) external view returns (uint256) {\\n        uint256 _totalShares = totalShares;\\n\\n        if (_totalShares == 0) return _wantAmount;\\n\\n        return (_wantAmount * _totalShares) / balance();\\n    }\\n\\n    /// @inheritdoc IVault\\n    function userDeposit(address _user, address _token) external view returns (uint256) {\\n        if (depositAllowedTokens[_token] != _ALLOWED) revert VaultErrors.NotAllowedDepositToken(_token);\\n        if (_token == address(0)) _token = address(weth);\\n\\n        return calculations.userDeposit(_user, _token);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function totalDeposits(address _token) external view returns (uint256) {\\n        if (depositAllowedTokens[_token] != _ALLOWED) revert VaultErrors.NotAllowedDepositToken(_token);\\n        if (_token == address(0)) _token = address(weth);\\n\\n        return calculations.totalDeposits(_token);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getUserMaxWant(address _user) external view returns (uint256) {\\n        return sharesToWant(userShares[_user]);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function calculateSharesToWithdraw(\\n        address _user,\\n        uint256 _wantToWithdraw,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData,\\n        bool _withdrawAll\\n    )\\n        external\\n        view\\n        returns (uint256 _sharesToWithdraw)\\n    {\\n        uint256 _userShares = userShares[_user];\\n\\n        if (_withdrawAll) return _userShares;\\n        if (_wantToWithdraw == 0) return 0;\\n\\n        ICalculations.WithdrawalEstimation memory _withdrawalEstimation =\\n            _estimateWithdrawal(_user, _slippageTolerance, _addionalData, address(0));\\n        uint256 _wantDeposit = _withdrawalEstimation.wantDeposit;\\n        uint256 _wantRewards = _withdrawalEstimation.wantRewards;\\n        uint256 _wantDepositAfterFee = _withdrawalEstimation.wantDepositAfterFee;\\n        uint256 _wantRewardsAfterFee = _withdrawalEstimation.wantRewardsAfterFee;\\n\\n        if (_wantDepositAfterFee + _wantRewardsAfterFee < _wantToWithdraw) revert VaultErrors.WantToWithdrawTooHigh();\\n\\n        uint256 _wantRemaining;\\n        uint256 _wantRewardsAfterFeePercentage;\\n\\n        if (_wantToWithdraw >= _wantRewardsAfterFee) {\\n            // Withdraw full rewards\\n            _wantRewardsAfterFeePercentage = 1e18;\\n            _wantRemaining = _wantToWithdraw - _wantRewardsAfterFee;\\n        } else {\\n            // Withdraw some rewards\\n            _wantRewardsAfterFeePercentage = (_wantToWithdraw * 1e18) / _wantRewardsAfterFee;\\n        }\\n\\n        uint256 _wantUsed = (_wantRewards * _wantRewardsAfterFeePercentage) / 1e18;\\n\\n        if (_wantRemaining != 0) {\\n            uint256 _wantDepositAfterFeePercentage = (_wantRemaining * 1e18) / _wantDepositAfterFee;\\n\\n            _wantUsed += (_wantDeposit * _wantDepositAfterFeePercentage) / 1e18;\\n        }\\n\\n        uint256 _totalWant = _wantDeposit + _wantRewards;\\n        uint256 _totalPercentageUsed = (_wantUsed * 1e18) / (_totalWant);\\n\\n        return (_userShares * _totalPercentageUsed) / 1e18;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getDepositLimit(address _token) external view returns (DepositLimit memory) {\\n        return depositLimit[_token];\\n    }\\n\\n    /// @inheritdoc IVault\\n    function estimateDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint16 _slippageTolerance,\\n        bytes calldata _data,\\n        bytes calldata _addionalData\\n    )\\n        external\\n        view\\n        returns (uint256 _amountShares, uint256 _amountWant)\\n    {\\n        if (depositAllowedTokens[_token] != _ALLOWED) revert VaultErrors.NotAllowedDepositToken(_token);\\n        if (_token == address(0)) _token = address(weth);\\n\\n        ICalculations _calculations = calculations;\\n\\n        uint256 _before = _calculations.estimateWantAfterCompound(_slippageTolerance, _addionalData);\\n\\n        _amountWant = _calculations.estimateDeposit(_token, _amount, _slippageTolerance, _data);\\n\\n        uint256 _totalShares = totalShares;\\n\\n        if (_totalShares == 0) _amountShares = _amountWant;\\n        else _amountShares = _amountWant * _totalShares / _before;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function sharesToWant(uint256 _sharesAmount) public view returns (uint256) {\\n        return (_sharesAmount * balance()) / totalShares;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function sharesToWantAfterCompound(\\n        uint256 _sharesAmount,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (_sharesAmount * calculations.estimateWantAfterCompound(_slippageTolerance, _addionalData)) / totalShares;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getUserMaxWantWithCompound(\\n        address _user,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // Calculates the amount for a specific user or for the entire strategy\\n        uint256 _userShares = _user == address(strategy) ? totalShares : userShares[_user];\\n\\n        if (_userShares == 0) return 0;\\n\\n        return sharesToWantAfterCompound(_userShares, _slippageTolerance, _addionalData);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function estimateWithdrawal(\\n        address _user,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData,\\n        address _token\\n    )\\n        public\\n        view\\n        returns (ICalculations.WithdrawalEstimation memory)\\n    {\\n        if (withdrawalAllowedTokens[_token] != _ALLOWED) revert VaultErrors.NotAllowedWithdrawalToken(_token);\\n        if (_token == address(0)) _token = address(weth);\\n\\n        return _estimateWithdrawal(_user, _slippageTolerance, _addionalData, _token);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function balance() public view returns (uint256) {\\n        return strategy.balance();\\n    }\\n\\n    /**\\n     * @notice Initializes this Vault contract.\\n     * @param _adminStructure AdminStructure contract address.\\n     * @param _strategy Strategy contract address.\\n     * @param _weth WETH token contract address.\\n     * @param _calculations Calculations contract address.\\n     * @param _depositAllowedTokens A list of tokens that will be allowed for deposits.\\n     * @param _withdrawalAllowedTokens A list of tokens that will be allowed for withdrawals.\\n     */\\n    function _vaultInitUnchained(\\n        address _adminStructure,\\n        address _strategy,\\n        address _weth,\\n        address _calculations,\\n        address[] calldata _depositAllowedTokens,\\n        address[] calldata _withdrawalAllowedTokens,\\n        DepositLimit[] calldata _depositLimits\\n    )\\n        internal\\n        onlyInitializing\\n    {\\n        AddressUtils.onlyContract(_adminStructure);\\n        AddressUtils.onlyContract(_strategy);\\n        AddressUtils.onlyContract(_weth);\\n        AddressUtils.onlyContract(_calculations);\\n\\n        adminStructure = IAdminStructure(_adminStructure);\\n        strategy = IStrategy(_strategy);\\n        weth = IWETH(_weth);\\n        calculations = ICalculations(_calculations);\\n\\n        uint256 _depositAllowedTokensLength = _depositAllowedTokens.length;\\n        uint256 _withdrawalAllowedTokensLength = _withdrawalAllowedTokens.length;\\n\\n        if (_depositAllowedTokensLength == 0) revert VaultErrors.WrongDepositAllowedTokensCount();\\n        if (_withdrawalAllowedTokensLength == 0) revert VaultErrors.WrongWithdrawalAllowedTokensCount();\\n\\n        for (uint256 _i; _i < _depositAllowedTokensLength;) {\\n            AddressUtils.onlyTokenContract(_depositAllowedTokens[_i]);\\n            if (depositAllowedTokens[_depositAllowedTokens[_i]] == _ALLOWED) {\\n                revert VaultErrors.DuplicateDepositAllowedToken();\\n            }\\n            depositAllowedTokens[_depositAllowedTokens[_i]] = _ALLOWED;\\n            listDepositAllowedTokens.push(_depositAllowedTokens[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n\\n        for (uint256 _i; _i < _withdrawalAllowedTokensLength;) {\\n            AddressUtils.onlyTokenContract(_withdrawalAllowedTokens[_i]);\\n            if (withdrawalAllowedTokens[_withdrawalAllowedTokens[_i]] == _ALLOWED) {\\n                revert VaultErrors.DuplicateWithdrawalAllowedToken();\\n            }\\n            withdrawalAllowedTokens[_withdrawalAllowedTokens[_i]] = _ALLOWED;\\n            listWithdrawalAllowedTokens.push(_withdrawalAllowedTokens[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n\\n        _setDepositLimits(_depositLimits);\\n    }\\n\\n    /**\\n     * @notice Validates if the amount of native tokens attached to the transaction is valid. Then converts ETH to WETH\\n     *         and transfers it to the strategy contract.\\n     * @param _amount An amount of ETH tokens to validate and to convert to WETH.\\n     */\\n    function _pullNative(uint256 _amount) internal {\\n        if (msg.value != _amount) revert VaultErrors.ValueAndAmountMismatch();\\n\\n        weth.deposit{ value: _amount }();\\n        ERC20Lib.push(address(weth), address(strategy), _amount);\\n    }\\n\\n    /**\\n     * @notice Edits a specified list of allowed tokens.\\n     * @param allowedTokens A mapping of allowed tokens to modify.\\n     * @param listAllowedTokens A list of allowed tokens to modify.\\n     * @param _token A token to allow/disallow.\\n     * @param _status An indicator (true or false) that allows/disallows specified token.\\n     * @param _tokenType A type of the token to allow/disallow.\\n     */\\n    function _editAllowedTokens(\\n        mapping(address => uint256) storage allowedTokens,\\n        address[] storage listAllowedTokens,\\n        address _token,\\n        uint256 _status,\\n        TokenType _tokenType\\n    )\\n        internal\\n    {\\n        address[] memory _tokensList = listAllowedTokens;\\n        uint256 _tokensLength = _tokensList.length;\\n\\n        if (_status > _ALLOWED) revert VaultErrors.InvalidTokenStatus();\\n        if (_status == allowedTokens[_token]) revert VaultErrors.TokenWontChange(_tokenType, _token);\\n\\n        if (_status == _ALLOWED) {\\n            allowedTokens[_token] = _ALLOWED;\\n            listAllowedTokens.push(_token);\\n        } else {\\n            for (uint256 _i; _i < _tokensLength;) {\\n                if (_token != _tokensList[_i]) {\\n                    unchecked {\\n                        ++_i;\\n                    }\\n\\n                    continue;\\n                }\\n\\n                delete allowedTokens[_token];\\n\\n                listAllowedTokens[_i] = _tokensList[_tokensLength - 1];\\n                listAllowedTokens.pop();\\n\\n                unchecked {\\n                    ++_i;\\n                }\\n\\n                break;\\n            }\\n        }\\n\\n        emit TokenStatusChanged(_tokenType, _token, _status);\\n    }\\n\\n    /**\\n     * @notice Prototype of the _deposit method that should be implemented in each vault.\\n     * @param _user Address of the user providing the deposit tokens.\\n     * @param _token Address of the token to deposit.\\n     * @param _amount Amount of tokens to deposit.\\n     * @param _additionalData Additional encoded data for the deposit.\\n     */\\n    function _deposit(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _additionalData\\n    )\\n        internal\\n        virtual;\\n\\n    /**\\n     * @notice Prototype of the _withdraw method that should be implemented in each vault.\\n     * @param _recipient Address of the recipient to receive tokens.\\n     * @param _user Address of the user who deposited.\\n     * @param _originalToken Address of the original token, useful on ETH deposits.\\n     * @param _token Address of the token to withdraw.\\n     * @param _wantToWithdraw Amount of want tokens to withdraw.\\n     * @param _maxUserWant Maximum available user want.\\n     * @param _additionalData Additional encoded data for the withdrawal.\\n     */\\n    function _withdraw(\\n        address _recipient,\\n        address _user,\\n        address _originalToken,\\n        address _token,\\n        uint256 _wantToWithdraw,\\n        uint256 _maxUserWant,\\n        bytes calldata _additionalData\\n    )\\n        internal\\n        virtual;\\n\\n    /**\\n     * @notice Prototype of the _depositCompound method that should be implemented in each vault.\\n     */\\n    function _depositCompound() internal virtual;\\n\\n    /**\\n     * @notice Prototype of the _withdrawCompound method that should be implemented in each vault.\\n     */\\n    function _withdrawCompound() internal virtual;\\n\\n    /**\\n     * @notice Checks if a transaction sender is a super admin.\\n     */\\n    function _onlySuperAdmin() internal view {\\n        adminStructure.isValidSuperAdmin(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Checks if a transaction sender is an admin.\\n     */\\n    function _onlyAdmin() internal view {\\n        adminStructure.isValidAdmin(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Internal method to process deposits.\\n     * @param _user Address of the user providing the deposit tokens.\\n     * @param _token Address of the token to deposit.\\n     * @param _amount Amount of tokens to deposit.\\n     * @param _additionalData Additional encoded data for the deposit.\\n     * @param _signature Signature to allow deposits with a permit.\\n     */\\n    function _processDeposit(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _additionalData,\\n        Signature memory _signature\\n    )\\n        private\\n    {\\n        if (depositAllowedTokens[_token] != _ALLOWED) revert VaultErrors.NotAllowedDepositToken(_token);\\n\\n        _depositCompound();\\n\\n        if (depositLimit[_token].minAmount > _amount) revert VaultErrors.InvalidDepositAmount(_token, _amount);\\n\\n        IStrategy _strategy = strategy;\\n\\n        if (_signature.r != bytes32(0)) {\\n            ERC20Lib.pullPermit(_token, msg.sender, address(_strategy), _amount, _signature);\\n        } else {\\n            if (_token == address(0)) _pullNative(_amount);\\n            else ERC20Lib.pull(_token, msg.sender, address(_strategy), _amount);\\n        }\\n\\n        uint256 _before = balance();\\n\\n        _deposit(_user, _token == address(0) ? address(weth) : _token, _amount, _additionalData);\\n\\n        uint256 _provided = balance() - _before;\\n        uint256 _shares = _provided;\\n        uint256 _totalShares = totalShares;\\n\\n        if (_totalShares != 0) _shares = (_provided * _totalShares) / _before;\\n\\n        totalShares += _shares;\\n        unchecked {\\n            userShares[_user] += _shares;\\n        }\\n    }\\n\\n    /**\\n     * @notice Edits the deposit limits for specific tokens.\\n     * @param _depositLimits The array of DepositLimit structs representing the new deposit limits.\\n     */\\n    function _setDepositLimits(DepositLimit[] calldata _depositLimits) private {\\n        uint256 _depositLimitsLength = _depositLimits.length;\\n\\n        for (uint256 _i; _i < _depositLimitsLength;) {\\n            if (_depositLimits[_i].minAmount == 0) revert VaultErrors.ZeroMinDepositAmount();\\n            if (depositAllowedTokens[_depositLimits[_i].token] != _ALLOWED) {\\n                revert VaultErrors.NotAllowedDepositToken(_depositLimits[_i].token);\\n            }\\n\\n            emit DepositLimitsSet(depositLimit[_depositLimits[_i].token], _depositLimits[_i]);\\n\\n            depositLimit[_depositLimits[_i].token] = _depositLimits[_i];\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the maximum withdrawable amounts in the specified token.\\n     * @param _user The user to be analyzed.\\n     * @param _slippageTolerance The slippage tolerance for the compounding.\\n     * @param _addionalData Encoded bytes with information about the reward tokens.\\n     * @param _token The token to use for the withdrawal.\\n     * @return WithdrawalEstimation a struct including the data about the withdrawal:\\n     * wantDepositUsed Portion of the total want tokens that belongs to the deposit of the user.\\n     * wantRewardsUsed Portion of the total want tokens that belongs to the rewards of the user.\\n     * wantDepositAfterFee Portion of the total want tokens after fee that belongs to the deposit of the user.\\n     * wantRewardsAfterFee Portion of the total want tokens after fee that belongs to the rewards of the user.\\n     * depositInToken Deposit amount valued in token.\\n     * rewardsInToken Deposit amount valued in token.\\n     */\\n    function _estimateWithdrawal(\\n        address _user,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData,\\n        address _token\\n    )\\n        private\\n        view\\n        returns (ICalculations.WithdrawalEstimation memory)\\n    {\\n        uint256 _maxUserWantWithCompound = getUserMaxWantWithCompound(_user, _slippageTolerance, _addionalData);\\n\\n        return calculations.getWithdrawableAmount(\\n            _user, _maxUserWantWithCompound, _maxUserWantWithCompound, _token, _slippageTolerance\\n        );\\n    }\\n\\n    uint256[100] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { Signature } from \\\"../../libraries/ERC20Lib.sol\\\";\\nimport { IAdminStructure } from \\\"./IAdminStructure.sol\\\";\\nimport { IStrategy } from \\\"./IStrategy.sol\\\";\\nimport { IWETH } from \\\"../IWETH.sol\\\";\\nimport { ICalculations } from \\\"../../interfaces/dollet/ICalculations.sol\\\";\\n\\n/**\\n * @title Dollet IVault\\n * @author Dollet Team\\n * @notice Interface with all types, events, external, and public methods for the Vault contract.\\n */\\ninterface IVault {\\n    /**\\n     * @notice Token types enumeration.\\n     */\\n    enum TokenType {\\n        Deposit,\\n        Withdrawal\\n    }\\n\\n    /**\\n     * @notice Structure of the values to store the token min deposit limit.\\n     */\\n    struct DepositLimit {\\n        address token;\\n        uint256 minAmount;\\n    }\\n\\n    /**\\n     * @notice Logs information when token changes its status (allowed/disallowed).\\n     * @param _tokenType A type of the token.\\n     * @param _token A token address.\\n     * @param _status A new status of the token.\\n     */\\n    event TokenStatusChanged(TokenType _tokenType, address _token, uint256 _status);\\n\\n    /**\\n     * @notice Logs information when the pause status is changed.\\n     * @param _status The new pause status (true or false).\\n     */\\n    event PauseStatusChanged(bool _status);\\n\\n    /**\\n     * @notice Logs information about the withdrawal of stuck tokens.\\n     * @param _caller An address of the admin who executed the withdrawal operation.\\n     * @param _token An address of a token that was withdrawn.\\n     * @param _amount An amount of tokens that were withdrawn.\\n     */\\n    event WithdrawStuckTokens(address _caller, address _token, uint256 _amount);\\n\\n    /**\\n     * @notice Logs when the deposit limit of a token has been set.\\n     * @param _limitBefore The deposit limit before.\\n     * @param _limitAfter The deposit limit after.\\n     */\\n    event DepositLimitsSet(DepositLimit _limitBefore, DepositLimit _limitAfter);\\n\\n    /**\\n     * @notice Deposit to the strategy.\\n     * @param _user Address of the user providing the deposit tokens.\\n     * @param _token Address of the token to deposit.\\n     * @param _amount Amount of tokens to deposit.\\n     * @param _additionalData Additional encoded data for the deposit.\\n     */\\n    function deposit(address _user, address _token, uint256 _amount, bytes calldata _additionalData) external payable;\\n\\n    /**\\n     * @notice Deposit to the strategy.\\n     * @param _user Address of the user providing the deposit tokens.\\n     * @param _token Address of the token to deposit.\\n     * @param _amount Amount of tokens to deposit.\\n     * @param _additionalData Additional encoded data for the deposit.\\n     * @param _signature Signature to make a deposit with permit.\\n     */\\n    function depositWithPermit(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _additionalData,\\n        Signature calldata _signature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Withdraw from the strategy.\\n     * @param _recipient Address of the recipient to receive the tokens.\\n     * @param _token Address of the token to withdraw.\\n     * @param _amountShares Amount of shares to withdraw from the user.\\n     * @param _additionalData Additional encoded data for the withdrawal.\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _token,\\n        uint256 _amountShares,\\n        bytes calldata _additionalData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Allows the super admin to change the admin structure contract address.\\n     * @param _adminStructure admin structure contract address.\\n     */\\n    function setAdminStructure(address _adminStructure) external;\\n\\n    /**\\n     * @notice Edits deposit allowed tokens list.\\n     * @param _token An address of the token to allow/disallow.\\n     * @param _status A marker (true/false) that indicates if to allow/disallow a token.\\n     */\\n    function editDepositAllowedTokens(address _token, uint256 _status) external;\\n\\n    /**\\n     * @notice Edits withdrawal allowed tokens list.\\n     * @param _token An address of the token to allow/disallow.\\n     * @param _status A marker (true/false) that indicates if to allow/disallow a token.\\n     */\\n    function editWithdrawalAllowedTokens(address _token, uint256 _status) external;\\n\\n    /**\\n     * @notice Edits the deposit limits for specific tokens.\\n     * @param _depositLimits The array of DepositLimit struct to set.\\n     */\\n    function editDepositLimit(DepositLimit[] calldata _depositLimits) external;\\n\\n    /**\\n     * @notice Pauses and unpauses the contract deposits.\\n     * @dev Sets the opposite of the current state of the pause.\\n     */\\n    function togglePause() external;\\n\\n    /**\\n     * @notice Handles the case where tokens get stuck in the contract. Allows the admin to send the tokens to the super\\n     *         admin.\\n     * @param _token The address of the stuck token.\\n     */\\n    function inCaseTokensGetStuck(address _token) external;\\n\\n    /**\\n     * @notice Returns a list of allowed tokens for a specified token type.\\n     * @param _tokenType A token type for which to return a list of tokens.\\n     * @return A list of allowed tokens for a specified token type.\\n     */\\n    function getListAllowedTokens(TokenType _tokenType) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Converts want tokens to vault shares.\\n     * @param _wantAmount An amount of want tokens to convert to vault shares.\\n     * @return An amount of vault shares in the specified want tokens amount.\\n     */\\n    function wantToShares(uint256 _wantAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of the user deposit in terms of the token specified when possible, or in terms of want\\n     *         (to be processed off-chain).\\n     * @param _user The address of the user to get the deposit value for.\\n     * @param _token The address of the token to use.\\n     * @return The user deposit in the provided token.\\n     */\\n    function userDeposit(address _user, address _token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of the total deposits in terms of the token specified when possible, or in terms of\\n     *         want (to be processed off-chain).\\n     * @param _token The address of the token to use.\\n     * @return The total deposit in the provided token.\\n     */\\n    function totalDeposits(address _token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maximum number of want tokens that the user can withdraw.\\n     * @param _user A user address for whom to calculate the maximum number of want tokens that the user can withdraw.\\n     * @return The maximum number of want tokens that the user can withdraw.\\n     */\\n    function getUserMaxWant(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Helper function to calculate the required share to withdraw a specific amount of want tokens.\\n     * @dev The _wantToWithdraw must be taken from the function `estimateWithdrawal()`, the maximum amount is equivalent\\n     *      to `(_wantDepositAfterFee + _wantRewardsAfterFee)`.\\n     * @dev The flag `_withdrawAll` helps to avoid leaving remaining funds due to changes in the estimate since the user\\n     *      called `estimateWithdrawal()`.\\n     * @param _user The user to calculate the withdraw for.\\n     * @param _wantToWithdraw The amount of want tokens to withdraw (after compound and fees charging).\\n     * @param _slippageTolerance Slippage to use for the calculation.\\n     * @param _addionalData Encoded bytes with information about the reward tokens and slippage tolerance.\\n     * @param _withdrawAll Indicated whether to make a full withdrawal.\\n     * @return _sharesToWithdraw The amount of shares to withdraw for the specified amount of want tokens.\\n     */\\n    function calculateSharesToWithdraw(\\n        address _user,\\n        uint256 _wantToWithdraw,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData,\\n        bool _withdrawAll\\n    )\\n        external\\n        view\\n        returns (uint256 _sharesToWithdraw);\\n\\n    /**\\n     * @notice Returns the deposit limit for a token.\\n     * @param _token The address of the token.\\n     * @return _limit The deposit limit for the specified token.\\n     */\\n    function getDepositLimit(address _token) external view returns (DepositLimit memory _limit);\\n\\n    /**\\n     * @notice Estimates the deposit details for a specific token and amount.\\n     * @param _token The address to deposit.\\n     * @param _amount The amount of tokens to deposit.\\n     * @param _slippageTolerance The allowed slippage percentage.\\n     * @param _data Extra information used to estimate.\\n     * @param _addionalData Encoded bytes with information about the reward tokens and slippage tolerance.\\n     * @return _amountShares The amount of shares to receive from the vault.\\n     * @return _amountWant The minimum amount of LP tokens to get.\\n     */\\n    function estimateDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint16 _slippageTolerance,\\n        bytes calldata _data,\\n        bytes calldata _addionalData\\n    )\\n        external\\n        view\\n        returns (uint256 _amountShares, uint256 _amountWant);\\n\\n    /**\\n     * @notice Converts vault shares to want tokens.\\n     * @param _sharesAmount An amount of vault shares to convert to want tokens.\\n     * @return An amount of want tokens in the specified vault shares amount.\\n     */\\n    function sharesToWant(uint256 _sharesAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Shows the equivalent amount of shares converted to want tokens, considering compounding.\\n     * @dev Since this function uses slippage the actual result after a real compound might be slightly different.\\n     * @dev The result does not consider the system fees.\\n     * @param _sharesAmount The amount of shares.\\n     * @param _slippageTolerance The slippage for the compounding.\\n     * @param _addionalData Encoded bytes with information about the reward tokens and slippage tolerance.\\n     * @return The amount of want tokens equivalent to the shares considering compounding.\\n     */\\n    function sharesToWantAfterCompound(\\n        uint256 _sharesAmount,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Shows the maximum want tokens that a user could obtain considering compounding.\\n     * @dev Since this function uses slippage the actual result after a real compound might be slightly different.\\n     * @dev The result does not consider the system fees.\\n     * @param _user The user to be analyzed. Use strategy address to calculate for all users.\\n     * @param _slippageTolerance The slippage for the compounding.\\n     * @param _addionalData Encoded bytes with information about the reward tokens and slippage tolerance.\\n     * @return The maximum amount of want tokens that the user has.\\n     */\\n    function getUserMaxWantWithCompound(\\n        address _user,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Shows the maximum want tokens from the deposit and rewards that the user has, it estimates the want\\n     *         tokens that the user can withdraw after compounding and fees. Use strategy address to calculate for all\\n     *         users.\\n     * @dev Combine this function with the function `calculateSharesToWithdraw()`.\\n     * @dev Since this function uses slippage tolerance the actual result after a real compound might be slightly\\n     *      different.\\n     * @param _user The user to be analyzed.\\n     * @param _slippageTolerance The slippage tolerance for the compounding.\\n     * @param _addionalData Encoded bytes with information about the reward tokens and slippage tolerance.\\n     * @param _token The token to use for the withdrawal.\\n     * @return WithdrawalEstimation a struct including the data about the withdrawal:\\n     * wantDepositUsed Portion of the total want tokens that belongs to the deposit of the user.\\n     * wantRewardsUsed Portion of the total want tokens that belongs to the rewards of the user.\\n     * wantDepositAfterFee Portion of the total want tokens after fee that belongs to the deposit of the user.\\n     * wantRewardsAfterFee Portion of the total want tokens after fee that belongs to the rewards of the user.\\n     * depositInToken Deposit amount valued in token.\\n     * rewardsInToken Rewards amount valued in token.\\n     * depositInTokenAfterFee Deposit after fee amount valued in token.\\n     * rewardsInTokenAfterFee Rewards after fee amount valued in token.\\n     */\\n    function estimateWithdrawal(\\n        address _user,\\n        uint16 _slippageTolerance,\\n        bytes calldata _addionalData,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (ICalculations.WithdrawalEstimation memory);\\n\\n    /**\\n     * @notice Calculates the total balance of the want token that belong to the startegy. It takes into account the\\n     *         strategy contract balance and any underlying protocol that holds the want tokens.\\n     * @return The total balance of the want token.\\n     */\\n    function balance() external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping to track the amount of shares owned by each user.\\n     * @return An amount of shares dedicated for a user.\\n     */\\n    function userShares(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping to check if a token is allowed for deposit (1 - allowed, 2 - not allowed).\\n     * @return A flag that indicates if the token is allowed for deposits or not.\\n     */\\n    function depositAllowedTokens(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping to check if a token is allowed for withdrawal (1 - allowed, 2 - not allowed).\\n     * @return A flag that indicates if the token is allowed for withdrawals or not.\\n     */\\n    function withdrawalAllowedTokens(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a list of tokens allowed for deposit.\\n     * @return A list of tokens allowed for deposit.\\n     */\\n    function listDepositAllowedTokens(uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice Returns a list of tokens allowed for withdrawal.\\n     * @return A list of tokens allowed for withdrawal.\\n     */\\n    function listWithdrawalAllowedTokens(uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice Returns an address of the AdminStructure contract.\\n     * @return An address of the AdminStructure contract.\\n     */\\n    function adminStructure() external view returns (IAdminStructure);\\n\\n    /**\\n     * @notice Returns an address of the Strategy contract.\\n     * @return An address of the Strategy contract.\\n     */\\n    function strategy() external view returns (IStrategy);\\n\\n    /**\\n     * @notice Returns an address of the WETH token contract.\\n     * @return An address of the WETH token contract.\\n     */\\n    function weth() external view returns (IWETH);\\n\\n    /**\\n     * @notice Returns total number of shares across all users.\\n     * @return Total number of shares across all users.\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns calculation contract.\\n     * @return An address of the calculations contract.\\n     */\\n    function calculations() external view returns (ICalculations);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IAdminStructure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Dollet ISuperAdmin\\n * @author Dollet Team\\n * @notice Interface for managing the super admin role.\\n */\\ninterface ISuperAdmin {\\n    /**\\n     * @notice Logs the information about nomination of a potential super admin.\\n     * @param _potentialSuperAdmin The address of the potential super admin.\\n     */\\n    event SuperAdminNominated(address _potentialSuperAdmin);\\n\\n    /**\\n     * @notice Logs the information when the super admin role is transferred.\\n     * @param _oldSuperAdmin The address of the old super admin.\\n     * @param _newSuperAdmin The address of the new super admin.\\n     */\\n    event SuperAdminChanged(address _oldSuperAdmin, address _newSuperAdmin);\\n\\n    /**\\n     * @notice Transfers the super admin role to a potential super admin address using pull-over-push pattern.\\n     * @param _superAdmin An address of a potential super admin.\\n     */\\n    function transferSuperAdmin(address _superAdmin) external;\\n\\n    /**\\n     * @notice Accepts the super admin role by a potential super admin.\\n     */\\n    function acceptSuperAdmin() external;\\n\\n    /**\\n     * @notice Returns the address of the super admin.\\n     * @return The address of the super admin.\\n     */\\n    function superAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the potential super admin.\\n     * @return The address of the potential super admin.\\n     */\\n    function potentialSuperAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Checks if the caller is a valid super admin.\\n     * @param caller The address to check.\\n     */\\n    function isValidSuperAdmin(address caller) external view;\\n}\\n\\n/**\\n * @title Dollet IAdminStructure\\n * @author Dollet Team\\n * @notice Interface for managing admin roles.\\n */\\ninterface IAdminStructure is ISuperAdmin {\\n    /**\\n     * @notice Logs the information when an admin is added.\\n     * @param admin The address of the added admin.\\n     */\\n    event AddedAdmin(address admin);\\n\\n    /**\\n     * @notice Logs the information when an admin is removed.\\n     * @param admin The address of the removed admin.\\n     */\\n    event RemovedAdmin(address admin);\\n\\n    /**\\n     * @notice Adds multiple addresses as admins.\\n     * @param _admins The addresses to add as admins.\\n     */\\n    function addAdmins(address[] calldata _admins) external;\\n\\n    /**\\n     * @notice Removes multiple addresses from admins.\\n     * @param _admins The addresses to remove from admins.\\n     */\\n    function removeAdmins(address[] calldata _admins) external;\\n\\n    /**\\n     * @notice Checks if the caller is a valid admin.\\n     * @param caller The address to check.\\n     */\\n    function isValidAdmin(address caller) external view;\\n\\n    /**\\n     * @notice Checks if an account is an admin.\\n     * @param account The address to check.\\n     * @return A boolean indicating if the account is an admin.\\n     */\\n    function isAdmin(address account) external view returns (bool);\\n\\n    /**\\n     * @notice Returns all the admin addresses.\\n     * @return An array of admin addresses.\\n     */\\n    function getAllAdmins() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/ICalculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IAdminStructure } from \\\"./IAdminStructure.sol\\\";\\nimport { IStrategyHelper } from \\\"./IStrategyHelper.sol\\\";\\n\\n/**\\n * @title Dollet ICalculations\\n * @author Dollet Team\\n * @notice Interface for Calculations contract.\\n */\\ninterface ICalculations {\\n    /**\\n     * @param wantDeposit Portion of the total want tokens that belongs to the deposit of the user.\\n     * @param wantRewards Portion of the total want tokens that belongs to the rewards of the user.\\n     * @param wantDepositAfterFee Portion of the total want tokens after fee that belongs to the deposit of the user.\\n     * @param wantRewardsAfterFee Portion of the total want tokens after fee that belongs to the rewards of the user.\\n     * @param depositInToken Deposit amount valued in token.\\n     * @param rewardsInToken Rewards amount valued in token.\\n     * @param depositInTokenAfterFee Deposit after fee amount valued in token.\\n     * @param rewardsInTokenAfterFee Rewards after fee amount valued in token.\\n     */\\n    struct WithdrawalEstimation {\\n        uint256 wantDeposit;\\n        uint256 wantRewards;\\n        uint256 wantDepositAfterFee;\\n        uint256 wantRewardsAfterFee;\\n        uint256 depositInToken;\\n        uint256 rewardsInToken;\\n        uint256 depositInTokenAfterFee;\\n        uint256 rewardsInTokenAfterFee;\\n    }\\n\\n    /**\\n     * @notice Logs information when a Strategy contract is set.\\n     * @param _strategy Strategy contract address.\\n     */\\n    event StrategySet(address _strategy);\\n\\n    /**\\n     * @notice Logs information when a StrategyHelper contract is set.\\n     * @param _strategyHelper StrategyHelper contract address.\\n     */\\n    event StrategyHelperSet(address _strategyHelper);\\n\\n    /**\\n     * @notice Allows the super admin to set the strategy values (Strategy and StrategyHelper contracts' addresses).\\n     * @param _strategy Address of the Strategy contract.\\n     */\\n    function setStrategyValues(address _strategy) external;\\n\\n    /**\\n     * @notice Returns the value of 100% with 2 decimals.\\n     * @return The value of 100% with 2 decimals.\\n     */\\n    function ONE_HUNDRED_PERCENTS() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns AdminStructure contract address.\\n     * @return AdminStructure contract address.\\n     */\\n    function adminStructure() external view returns (IAdminStructure);\\n\\n    /**\\n     * @notice Returns StrategyHelper contract address.\\n     * @return StrategyHelper contract address.\\n     */\\n    function strategyHelper() external view returns (IStrategyHelper);\\n\\n    /**\\n     * @notice Returns the Strategy contract address.\\n     * @return Strategy contract address.\\n     */\\n    function strategy() external view returns (address);\\n\\n    /**\\n     * @notice Returns the amount of the user deposit in terms of the token specified.\\n     * @param _user The address of the user to get the deposit value for.\\n     * @param _token The address of the token to use.\\n     * @return The estimated user deposit in the specified token.\\n     */\\n    function userDeposit(address _user, address _token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of the total deposits in terms of the token specified.\\n     * @param _token The address of the token to use.\\n     * @return The amount of total deposit in the specified token.\\n     */\\n    function totalDeposits(address _token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token of the strategy after making a compound.\\n     * @param _slippageTolerance Slippage to use for the calculation.\\n     * @param _rewardData Encoded bytes with information about the reward tokens.\\n     * @return The want token balance after a compound.\\n     */\\n    function estimateWantAfterCompound(\\n        uint16 _slippageTolerance,\\n        bytes calldata _rewardData\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected amount of want tokens to be obtained from a deposit.\\n     * @param _token The token to be used for deposit.\\n     * @param _amount The amount of tokens to be deposited.\\n     * @param _slippageTolerance The slippage tolerance for the deposit.\\n     * @param _data Extra information used to estimate.\\n     * @return The minimum want tokens expected to be obtained from the deposit.\\n     */\\n    function estimateDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippageTolerance,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Estimates the price of an amount of want tokens in the specified token.\\n     * @param _token The address of the token.\\n     * @param _amount The amount of want tokens.\\n     * @param _slippageTolerance The allowed slippage percentage.\\n     * @return _amountInToken The minimum amount of tokens to get from the want amount.\\n     */\\n    function estimateWantToToken(\\n        address _token,\\n        uint256 _amount,\\n        uint16 _slippageTolerance\\n    )\\n        external\\n        view\\n        returns (uint256 _amountInToken);\\n\\n    /**\\n     * @notice Calculates the withdrawable amount of a user.\\n     * @param _user The address of the user to get the withdrawable amount. (Use strategy address to calculate for all\\n     *              users).\\n     * @param _wantToWithdraw The amount of want to withdraw.\\n     * @param _maxUserWant The maximum amount of want that the user can withdraw.\\n     * @param _token Address of the to use for the calculation.\\n     * @param _slippageTolerance Slippage to use for the calculation.\\n     * @return _estimation WithdrawalEstimation struct including the data about the withdrawal:\\n     *         wantDepositUsed Portion of the total want tokens that belongs to the deposit of the user.\\n     *         wantRewardsUsed Portion of the total want tokens that belongs to the rewards of the user.\\n     *         wantDepositAfterFee Portion of the total want tokens after fee that belongs to the deposit of the user.\\n     *         wantRewardsAfterFee Portion of the total want tokens after fee that belongs to the rewards of the user.\\n     *         depositInToken Deposit amount valued in token.\\n     *         rewardsInToken Rewards amount valued in token.\\n     *         depositInTokenAfterFee Deposit after fee amount valued in token.\\n     *         rewardsInTokenAfterFee Rewards after fee amount valued in token.\\n     */\\n    function getWithdrawableAmount(\\n        address _user,\\n        uint256 _wantToWithdraw,\\n        uint256 _maxUserWant,\\n        address _token,\\n        uint16 _slippageTolerance\\n    )\\n        external\\n        view\\n        returns (WithdrawalEstimation memory _estimation);\\n\\n    /**\\n     * @notice Calculates the used amounts from a given token amount on a withdrawal.\\n     * @param _user User to read the information from. (Use strategy address to calculate for all users).\\n     * @param _wantToWithdraw Amount from the total want tokens of the user wants to withdraw.\\n     * @param _maxUserWant The maximum user want to withdraw.\\n     * @param _withdrawalTokenOut The expected amount of tokens for the want tokens withdrawn.\\n     * @return _depositUsed Distibution of the token out amount that belongs to the deposit.\\n     * @return _rewardsUsed Distibution of the token out amount that belongs to the rewards.\\n     * @return _wantDepositUsed Portion the total want tokens that belongs to the deposit of the user.\\n     * @return _wantRewardsUsed Portion the total want tokens that belongs to the rewards of the user.\\n     */\\n    function calculateUsedAmounts(\\n        address _user,\\n        uint256 _wantToWithdraw,\\n        uint256 _maxUserWant,\\n        uint256 _withdrawalTokenOut\\n    )\\n        external\\n        view\\n        returns (uint256 _depositUsed, uint256 _rewardsUsed, uint256 _wantDepositUsed, uint256 _wantRewardsUsed);\\n\\n    /**\\n     * @notice Calculates the withdrawable distribution of a user.\\n     * @param _user A user to read the proportional distribution. (Use strategy address to calculate for all users).\\n     * @param _wantToWithdraw Amount from the total want tokens of the user wants to withdraw.\\n     * @param _maxUserWant The maximum user want to withdraw.\\n     * @return _wantDepositUsed Portion the total want tokens that belongs to the deposit of the user.\\n     * @return _wantRewardsUsed Portion the total want tokens that belongs to the rewards of the user.\\n     */\\n    function calculateWithdrawalDistribution(\\n        address _user,\\n        uint256 _wantToWithdraw,\\n        uint256 _maxUserWant\\n    )\\n        external\\n        view\\n        returns (uint256 _wantDepositUsed, uint256 _wantRewardsUsed);\\n\\n    /**\\n     * @notice Calculates the minimum output amount applying a slippage tolerance percentage to the amount.\\n     * @param _amount The amount of tokens to use.\\n     * @param _minusPercentage The percentage to reduce from the amount.\\n     * @return _result The minimum output amount.\\n     */\\n    function getMinimumOutputAmount(\\n        uint256 _amount,\\n        uint256 _minusPercentage\\n    )\\n        external\\n        pure\\n        returns (uint256 _result);\\n}\\n\"\r\n    },\r\n    \"src/libraries/ERC20Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { IERC20PermitUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\\\";\\n\\n/**\\n * @notice Secp256k1 signature values.\\n * @param deadline Timestamp at which the signature expires.\\n * @param v `v` portion of the signature.\\n * @param r `r` portion of the signature.\\n * @param s `s` portion of the signature.\\n */\\nstruct Signature {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/**\\n * @title Dollet ERC20Lib\\n * @author Dollet Team\\n * @notice Helper library that implements some additional methods for interacting with ERC-20 tokens.\\n */\\nlibrary ERC20Lib {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /**\\n     * @notice Transfers specified amount of token from `_from` to `_to`.\\n     * @param _token A token to transfer.\\n     * @param _from A sender of tokens.\\n     * @param _to A recipient of tokens.\\n     * @param _amount A number of tokens to transfer.\\n     */\\n    function pull(address _token, address _from, address _to, uint256 _amount) internal {\\n        IERC20Upgradeable(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfers specified amount of token from `_from` to `_to` using permit.\\n     * @param _token A token to transfer.\\n     * @param _from A sender of tokens.\\n     * @param _to A recipient of tokens.\\n     * @param _amount A number of tokens to transfer.\\n     * @param _signature A signature of the permit to use at the time of transfer.\\n     */\\n    function pullPermit(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        Signature memory _signature\\n    )\\n        internal\\n    {\\n        IERC20PermitUpgradeable(_token).permit(\\n            _from, address(this), _amount, _signature.deadline, _signature.v, _signature.r, _signature.s\\n        );\\n        pull(_token, _from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfers a specified amount of ERC-20 tokens to `_to`.\\n     * @param _token A token to transfer.\\n     * @param _to A recipient of tokens.\\n     * @param _amount A number of tokens to transfer.\\n     */\\n    function push(address _token, address _to, uint256 _amount) internal {\\n        IERC20Upgradeable(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfers the current balance of ERC-20 tokens to `_to`.\\n     * @param _token A token to transfer.\\n     * @param _to A recipient of tokens.\\n     */\\n    function pushAll(address _token, address _to) internal {\\n        uint256 _amount = IERC20Upgradeable(_token).balanceOf(address(this));\\n\\n        IERC20Upgradeable(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Executes a safe approval operation on a token. If the previous allowance is GT 0, it sets it to 0 and\\n     *         then executes a new approval.\\n     * @param _token A token to approve.\\n     * @param _spender A spender of the token to approve for.\\n     * @param _amount An amount of tokens to approve.\\n     */\\n    function safeApprove(address _token, address _spender, uint256 _amount) internal {\\n        if (IERC20Upgradeable(_token).allowance(address(this), _spender) != 0) {\\n            IERC20Upgradeable(_token).safeApprove(_spender, 0);\\n        }\\n\\n        IERC20Upgradeable(_token).safeApprove(_spender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IAdminStructure } from \\\"./IAdminStructure.sol\\\";\\nimport { IStrategyHelper } from \\\"./IStrategyHelper.sol\\\";\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\nimport { IVault } from \\\"./IVault.sol\\\";\\nimport { IWETH } from \\\"../IWETH.sol\\\";\\n\\n/**\\n * @title Dollet IStrategy\\n * @author Dollet Team\\n * @notice Interface with all types, events, external, and public methods for the Strategy contract.\\n */\\ninterface IStrategy {\\n    struct MinimumToCompound {\\n        address token;\\n        uint256 minAmount;\\n    }\\n\\n    /**\\n     * @notice Logs information about deposit operation.\\n     * @param _token A token address that was used at the time of deposit.\\n     * @param _amount An amount of tokens that were deposited.\\n     * @param _user A user address who executed a deposit operation.\\n     * @param _depositedWant An amount of want tokens that were deposited in the underlying protocol.\\n     */\\n    event Deposit(address _token, uint256 _amount, address _user, uint256 _depositedWant);\\n\\n    /**\\n     * @notice Logs information about withdrawal operation.\\n     * @param _token A token address that was used at the time of withdrawal.\\n     * @param _amount An amount of tokens that were withdrawn.\\n     * @param _user A user address who executed a withdraw operation.\\n     * @param _withdrawnWant An amount of want tokens that were withdrawn from the underlying protocol.\\n     */\\n    event Withdraw(address _token, uint256 _amount, address _user, uint256 _withdrawnWant);\\n\\n    /**\\n     * @notice Logs information about compound operation.\\n     * @param _amount An amount of want tokens that were compounded and deposited in the underlying protocol.\\n     */\\n    event Compounded(uint256 _amount);\\n\\n    /**\\n     * @notice Logs information when a new Vault contract address was set.\\n     * @param _vault A new Vault contract address.\\n     */\\n    event VaultSet(address indexed _vault);\\n\\n    /**\\n     * @notice Logs information about the withdrawal of stuck tokens.\\n     * @param _caller An address of the admin who executed the withdrawal operation.\\n     * @param _token An address of a token that was withdrawn.\\n     * @param _amount An amount of tokens that were withdrawn.\\n     */\\n    event WithdrawStuckTokens(address _caller, address _token, uint256 _amount);\\n\\n    /**\\n     * @notice Logs information about new slippage tolerance.\\n     * @param _slippageTolerance A new slippage tolerance that was set.\\n     */\\n    event SlippageToleranceSet(uint16 _slippageTolerance);\\n\\n    /**\\n     * @notice Logs information when a fee is charged.\\n     * @param _feeType A type of fee charged.\\n     * @param _feeAmount An amount of fee charged.\\n     * @param _feeRecipient A recipient of the charged fee.\\n     * @param _token The addres of the token used.\\n     */\\n    event ChargedFees(IFeeManager.FeeType _feeType, uint256 _feeAmount, address _feeRecipient, address _token);\\n\\n    /**\\n     * @notice Logs information when the minimum amount to compound is changed.\\n     * @param _token The address of the token.\\n     * @param _minimum The new minimum amount to compound.\\n     */\\n    event MinimumToCompoundChanged(address _token, uint256 _minimum);\\n\\n    /**\\n     * @notice Deposit to the strategy.\\n     * @param _user Address of the user providing the deposit tokens.\\n     * @param _token Address of the token to deposit.\\n     * @param _amount Amount of tokens to deposit.\\n     * @param _additionalData Additional encoded data for the deposit.\\n     */\\n    function deposit(address _user, address _token, uint256 _amount, bytes calldata _additionalData) external;\\n\\n    /**\\n     * @notice Withdraw from the strategy.\\n     * @param _recipient Address of the recipient to receive the tokens.\\n     * @param _user Address of the owner of the deposit (shares).\\n     * @param _originalToken Address of the token deposited (useful when using ETH).\\n     * @param _token Address of the token to withdraw.\\n     * @param _wantToWithdraw Amount of want tokens to withdraw from the strategy.\\n     * @param _maxUserWant Maximum user want tokens available to withdraw.\\n     * @param _additionalData Additional encoded data for the withdrawal.\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _user,\\n        address _originalToken,\\n        address _token,\\n        uint256 _wantToWithdraw,\\n        uint256 _maxUserWant,\\n        bytes calldata _additionalData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Executes a compound on the strategy.\\n     * @param _data Encoded data which will be used in the time of compound.\\n     */\\n    function compound(bytes calldata _data) external;\\n\\n    /**\\n     * @notice Allows the super admin to change the admin structure.\\n     * @param _adminStructure Admin structure contract address.\\n     */\\n    function setAdminStructure(address _adminStructure) external;\\n\\n    /**\\n     * @notice Sets a Vault contract address. Only super admin is able to set a new Vault address.\\n     * @param _vault A new Vault contract address.\\n     */\\n    function setVault(address _vault) external;\\n\\n    /**\\n     * @notice Sets a new slippage tolerance by super admin.\\n     * @param _slippageTolerance A new slippage tolerance (with 2 decimals).\\n     */\\n    function setSlippageTolerance(uint16 _slippageTolerance) external;\\n\\n    /**\\n     * @notice Handles the case where tokens get stuck in the contract. Allows the admin to send the tokens to the super\\n     *         admin.\\n     * @param _token The address of the stuck token.\\n     */\\n    function inCaseTokensGetStuck(address _token) external;\\n\\n    /**\\n     * @notice Edits the minimum token compound amounts.\\n     * @param _tokens An array of token addresses to edit.\\n     * @param _minAmounts An array of minimum harvest amounts corresponding to the tokens.\\n     */\\n    function editMinimumTokenCompound(address[] calldata _tokens, uint256[] calldata _minAmounts) external;\\n\\n    /**\\n     * @notice Returns the balance of the strategy held in the strategy or underlying protocols.\\n     * @return The balance of the strategy.\\n     */\\n    function balance() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total deposited want token amount by a user.\\n     * @param _user A user address to get the total deposited want token amount for.\\n     * @return The total deposited want token amount by a user.\\n     */\\n    function userWantDeposit(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the minimum amount required to execute reinvestment for a specific token.\\n     * @param _token The address of the token.\\n     * @return The minimum amount required for reinvestment.\\n     */\\n    function minimumToCompound(address _token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns AdminStructure contract address.\\n     * @return AdminStructure contract address.\\n     */\\n    function adminStructure() external view returns (IAdminStructure);\\n\\n    /**\\n     * @notice Returns StrategyHelper contract address.\\n     * @return StrategyHelper contract address.\\n     */\\n    function strategyHelper() external view returns (IStrategyHelper);\\n\\n    /**\\n     * @notice Returns FeeManager contract address.\\n     * @return FeeManager contract address.\\n     */\\n    function feeManager() external view returns (IFeeManager);\\n\\n    /**\\n     * @notice Returns Vault contract address.\\n     * @return Vault contract address.\\n     */\\n    function vault() external view returns (IVault);\\n\\n    /**\\n     * @notice Returns WETH token contract address.\\n     * @return WETH token contract address.\\n     */\\n    function weth() external view returns (IWETH);\\n\\n    /**\\n     * @notice Returns total deposited want token amount.\\n     * @return Total deposited want token amount.\\n     */\\n    function totalWantDeposits() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token address that should be deposited in the underlying protocol.\\n     * @return The token address that should be deposited in the underlying protocol.\\n     */\\n    function want() external view returns (address);\\n\\n    /**\\n     * @notice Returns a default slippage tolerance percentage (with 2 decimals).\\n     * @return A default slippage tolerance percentage (with 2 decimals).\\n     */\\n    function slippageTolerance() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns maximum slipage tolerance value (with two decimals).\\n     * @return Maximum slipage tolerance value (with two decimals).\\n     */\\n    function MAX_SLIPPAGE_TOLERANCE() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns 100% value (with two decimals).\\n     * @return 100% value (with two decimals).\\n     */\\n    function ONE_HUNDRED_PERCENTS() external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"src/libraries/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title Dollet AddressUtils library\\n * @author Dollet Team\\n * @notice A collection of helpers related to the address type.\\n */\\nlibrary AddressUtils {\\n    using AddressUpgradeable for address;\\n\\n    error NotContract(address _address);\\n    error ZeroAddress();\\n\\n    /**\\n     * @notice Checks if an address is a contract.\\n     * @param _address An address to check.\\n     */\\n    function onlyContract(address _address) internal view {\\n        if (!_address.isContract()) revert NotContract(_address);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is not zero address.\\n     * @param _address An address to check.\\n     */\\n    function onlyNonZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) revert ZeroAddress();\\n    }\\n\\n    /**\\n     * @notice Checks if a token address is a contract or native token.\\n     * @param _address An address to check.\\n     */\\n    function onlyTokenContract(address _address) internal view {\\n        if (_address == address(0)) return; // ETH\\n        if (!_address.isContract()) revert NotContract(_address);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title Dollet IWETH\\n * @author Dollet Team\\n * @notice Wrapped Ether (WETH) Interface. This interface defines the functions for interacting with the Wrapped Ether\\n *         (WETH) contract.\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @notice Deposits ETH to mint WETH tokens. This function is payable, and the amount of ETH sent will be converted\\n     *         to WETH.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraws WETH and receives ETH.\\n     * @param _amount The amount of WETH to burn, represented in wei.\\n     */\\n    function withdraw(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IStrategyHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IAdminStructure } from \\\"./IAdminStructure.sol\\\";\\n\\n/**\\n * @title Dollet IStrategyHelper\\n * @author Dollet Team\\n * @notice Interface for StrategyHelper contract.\\n */\\ninterface IStrategyHelper {\\n    /**\\n     * Structure for storing of swap path and the swap venue.\\n     */\\n    struct Path {\\n        address venue;\\n        bytes path;\\n    }\\n\\n    /**\\n     * @notice Logs information when a new oracle was set.\\n     * @param _asset An asset address for which oracle was set.\\n     * @param _oracle A new oracle address.\\n     */\\n    event OracleSet(address indexed _asset, address indexed _oracle);\\n\\n    /**\\n     * @notice Logs information when a new swap path was set.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _venue A venue which swap path was used.\\n     * @param _path A swap path itself.\\n     */\\n    event PathSet(address indexed _from, address indexed _to, address indexed _venue, bytes _path);\\n\\n    /**\\n     * @notice Allows the super admin to change the admin structure contract.\\n     * @param _adminStructure Admin structure contract address.\\n     */\\n    function setAdminStructure(address _adminStructure) external;\\n\\n    /**\\n     * @notice Sets a new oracle for the specified asset.\\n     * @param _asset An asset address for which to set an oracle.\\n     * @param _oracle A new oracle address.\\n     */\\n    function setOracle(address _asset, address _oracle) external;\\n\\n    /**\\n     * @notice Sets a new swap path for two assets.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _venue A venue which swap path is used.\\n     * @param _path A swap path itself.\\n     */\\n    function setPath(address _from, address _to, address _venue, bytes calldata _path) external;\\n\\n    /**\\n     * @notice Executes a swap of two assets.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _amount Amount of the first asset to swap.\\n     * @param _slippageTolerance Slippage tolerance percentage (with 2 decimals).\\n     * @param _recipient Recipient of the second asset.\\n     * @return _amountOut The second asset output amount.\\n     */\\n    function swap(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint16 _slippageTolerance,\\n        address _recipient\\n    )\\n        external\\n        returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Returns an oracle address for the specified asset.\\n     * @param _asset An address of the asset for which to get the oracle address.\\n     * @return _oracle An oracle address for the specified asset.\\n     */\\n    function oracles(address _asset) external view returns (address _oracle);\\n\\n    /**\\n     * @notice Returns the address of the venue where the swap should be executed and the swap path.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @return _venue The address of the venue where the swap should be executed.\\n     * @return _path The swap path.\\n     */\\n    function paths(address _from, address _to) external view returns (address _venue, bytes memory _path);\\n\\n    /**\\n     * @notice Returns AdminStructure contract address.\\n     * @return _adminStructure AdminStructure contract address.\\n     */\\n    function adminStructure() external returns (IAdminStructure _adminStructure);\\n\\n    /**\\n     * @notice Returns the price of the specified asset.\\n     * @param _asset The asset to get the price for.\\n     * @return _price The price of the specified asset.\\n     */\\n    function price(address _asset) external view returns (uint256 _price);\\n\\n    /**\\n     * @notice Returns the value of the specified amount of the asset.\\n     * @param _asset The asset to value.\\n     * @param _amount The amount of asset to value.\\n     * @return _value The value of the specified amount of the asset.\\n     */\\n    function value(address _asset, uint256 _amount) external view returns (uint256 _value);\\n\\n    /**\\n     * @notice Converts the first asset to the second asset.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _amount Amount of the first asset to convert.\\n     * @return _amountOut Amount of the second asset after the conversion.\\n     */\\n    function convert(address _from, address _to, uint256 _amount) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Returns 100.00% constant value (with to decimals).\\n     * @return 100.00% constant value (with to decimals).\\n     */\\n    function ONE_HUNDRED_PERCENTS() external pure returns (uint16);\\n}\\n\\n/**\\n * @title Dollet IStrategyHelperVenue\\n * @author Dollet Team\\n * @notice Interface for StrategyHelperVenue contracts.\\n */\\ninterface IStrategyHelperVenue {\\n    /**\\n     * @notice Executes a swap of two assets.\\n     * @param _asset First asset.\\n     * @param _path Path of the swap.\\n     * @param _amount Amount of the first asset to swap.\\n     * @param _minAmountOut Minimum output amount of the second asset.\\n     * @param _recipient Recipient of the second asset.\\n     * @param _deadline Deadline of the swap.\\n     */\\n    function swap(\\n        address _asset,\\n        bytes calldata _path,\\n        uint256 _amount,\\n        uint256 _minAmountOut,\\n        address _recipient,\\n        uint256 _deadline\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IAdminStructure } from \\\"./IAdminStructure.sol\\\";\\n\\n/**\\n * @title Dollet IFeeManager\\n * @author Dollet Team\\n * @notice Interface for FeeManager contract.\\n */\\ninterface IFeeManager {\\n    /**\\n     * @notice Fee type enumeration.\\n     * @param MANAGEMENT Fee type: management\\n     * @param PERFORMANCE Fee type: performance\\n     */\\n    enum FeeType {\\n        MANAGEMENT, // 0\\n        PERFORMANCE // 1\\n    }\\n\\n    /**\\n     * @notice Fee structure.\\n     * @param recipient recipient of the fee.\\n     * @param fee The fee (as percentage with 2 decimals).\\n     */\\n    struct Fee {\\n        address recipient;\\n        uint16 fee;\\n    }\\n\\n    /**\\n     * @notice Logs the information when a new fee is set.\\n     * @param _strategy Strategy contract address for which the fee is set.\\n     * @param _feeType Type of the fee.\\n     * @param _fee The fee structure itself.\\n     */\\n    event FeeSet(address indexed _strategy, FeeType indexed _feeType, Fee _fee);\\n\\n    /**\\n     * @notice Allows the super admin to change the admin structure contract.\\n     * @param _adminStructure Admin structure contract address.\\n     */\\n    function setAdminStructure(address _adminStructure) external;\\n\\n    /**\\n     * @notice Sets a new fee to provided strategy.\\n     * @param _strategy The strategy contract address to set a new fee for.\\n     * @param _feeType The fee type to set.\\n     * @param _recipient The recipient of the fee.\\n     * @param _fee The fee (as percentage with 2 decimals).\\n     */\\n    function setFee(address _strategy, FeeType _feeType, address _recipient, uint16 _fee) external;\\n\\n    /**\\n     * @notice Retrieves a fee and its recipient for the provided strategy and fee type.\\n     * @param _strategy The strategy contract address to get the fee for.\\n     * @param _feeType The fee type to get the fee for.\\n     * @return _recipient The recipient of the fee.\\n     * @return _fee The fee (as percentage with 2 decimals).\\n     */\\n    function fees(address _strategy, FeeType _feeType) external view returns (address _recipient, uint16 _fee);\\n\\n    /**\\n     * @notice Returns an address of the AdminStructure contract.\\n     * @return The address of the AdminStructure contract.\\n     */\\n    function adminStructure() external returns (IAdminStructure);\\n\\n    /**\\n     * @notice Returns MAX_FEE constant value (with two decimals).\\n     * @return MAX_FEE constant value (with two decimals).\\n     */\\n    function MAX_FEE() external pure returns (uint16);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Dollet IERC20\\n * @author Dollet Team\\n * @notice Default IERC20 interface with additional view methods.\\n */\\ninterface IERC20 is IERC20Upgradeable {\\n    /**\\n     * @notice Returns the number of decimals used by the token.\\n     * @return The number of decimals used by the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     * @return A string representing the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the symbol of the token.\\n     * @return A string representing the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@pendle/core-v2/contracts/=lib/pendle-core-v2-public/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap/v2-periphery/contracts/=lib/v2-periphery/contracts/\",\r\n      \"@uniswap/v3-periphery/contracts/=lib/v3-periphery/contracts/\",\r\n      \"@uniswap/v2-core/contracts/=lib/v2-core/contracts/\",\r\n      \"@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 8000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateDepositAllowedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateWithdrawalAllowedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"InvalidDepositAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenStatus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IVault.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"MustKeepOneToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NotAllowedDepositToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NotAllowedWithdrawalToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IVault.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenWontChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueAndAmountMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WantToWithdrawTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawStuckWrongToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongDepositAllowedTokensCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongWithdrawalAllowedTokensCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMinDepositAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVault.DepositLimit\",\"name\":\"_limitBefore\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVault.DepositLimit\",\"name\":\"_limitAfter\",\"type\":\"tuple\"}],\"name\":\"DepositLimitsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IVault.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"TokenStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminStructure\",\"outputs\":[{\"internalType\":\"contract IAdminStructure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippageTolerance\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_addionalData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withdrawAll\",\"type\":\"bool\"}],\"name\":\"calculateSharesToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesToWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculations\",\"outputs\":[{\"internalType\":\"contract ICalculations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_additionalData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositAllowedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_additionalData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"editDepositAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.DepositLimit[]\",\"name\":\"_depositLimits\",\"type\":\"tuple[]\"}],\"name\":\"editDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"editWithdrawalAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippageTolerance\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_addionalData\",\"type\":\"bytes\"}],\"name\":\"estimateDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWant\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippageTolerance\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_addionalData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"estimateWithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wantDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantDepositAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantRewardsAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositInToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsInToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositInTokenAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsInTokenAfterFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICalculations.WithdrawalEstimation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDepositLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.DepositLimit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"getListAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserMaxWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippageTolerance\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_addionalData\",\"type\":\"bytes\"}],\"name\":\"getUserMaxWantWithCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminStructure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculations\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_depositAllowedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_withdrawalAllowedTokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.DepositLimit[]\",\"name\":\"_depositLimits\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listDepositAllowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listWithdrawalAllowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminStructure\",\"type\":\"address\"}],\"name\":\"setAdminStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"sharesToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippageTolerance\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_addionalData\",\"type\":\"bytes\"}],\"name\":\"sharesToWantAfterCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmount\",\"type\":\"uint256\"}],\"name\":\"wantToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountShares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_additionalData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawalAllowedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CompoundVault", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "8000", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}