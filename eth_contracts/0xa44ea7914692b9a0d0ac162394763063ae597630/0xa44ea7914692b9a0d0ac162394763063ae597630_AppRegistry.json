{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/apps/AppRegistry.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { Ownable2Step, Ownable } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport { IAppBeaconBase } from \\\"src/interfaces/apps/base/IAppBeaconBase.sol\\\";\\nimport { IAppRegistry } from \\\"src/interfaces/apps/IAppRegistry.sol\\\";\\nimport { IAppAccountBase } from \\\"src/interfaces/apps/base/IAppAccountBase.sol\\\";\\nimport { IAppBeaconBase } from \\\"src/interfaces/apps/base/IAppBeaconBase.sol\\\";\\n\\ncontract AppRegistry is IAppRegistry, Ownable2Step {\\n    mapping(address appBeacon => bool isValid) public appBeacons;\\n    bytes4 public appAccountInterface;\\n    bytes4 public appBeaconInterface;\\n\\n    constructor(address _owner) Ownable(_owner) {\\n        appAccountInterface = type(IAppAccountBase).interfaceId;\\n        appBeaconInterface = type(IAppBeaconBase).interfaceId;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the current status of an app beacon, if active or not.\\n     * @param _appBeacon the address of the app beacon set.\\n     * @return The status of the app beacon.\\n     */\\n    function isValidAppBeacon(address _appBeacon) external view returns (bool) {\\n        return appBeacons[_appBeacon];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the status of an app beacon in the registry if it's valid or not.\\n     * @param _appBeacon the address of the app beacon to be set.\\n     * @param _isValid the validity of the app beacon to be set.\\n     */\\n    function setAppBeaconStatus(address _appBeacon, bool _isValid) public onlyOwner {\\n        if (_isValid) {\\n            if (!IERC165(_appBeacon).supportsInterface(appBeaconInterface) || IAppBeaconBase(_appBeacon).getLatestAppBeacon() != _appBeacon) { \\n                revert InvalidAppBeacon();\\n            }\\n            if (!IERC165(IAppBeaconBase(_appBeacon).getLatestAppImplementation()).supportsInterface(appAccountInterface)) {\\n                revert InvalidAppAccountImplementation();\\n            }\\n        }\\n        emit AppBeaconSet(_appBeacon, _isValid);\\n        appBeacons[_appBeacon] = _isValid;\\n    }\\n\\n    /**\\n     * @notice Sets the status of an app beacon in the registry if it's valid or not, batched.\\n     * @param _appBeacons The addresses of the app beacons to be set.\\n     * @param _isValid the validity of the app beacon to be set.\\n     */\\n    function setAppBeaconStatusBatch(address[] memory _appBeacons, bool _isValid) external onlyOwner {\\n        if (_appBeacons.length == 0) revert InvalidLength();\\n        for (uint256 i; i < _appBeacons.length; i++) {\\n            setAppBeaconStatus(_appBeacons[i], _isValid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the interface that the app account must support.\\n     * @param _interface the interface that the app account must support.\\n     */\\n    function setAppAccountInterface(bytes4 _interface) external onlyOwner {\\n        emit AppAccountInterfaceSet(_interface);\\n        appAccountInterface = _interface;\\n    }\\n\\n    /**\\n     * @notice Sets the interface that the app beacon must support.\\n     * @param _interface the interface that the app beacon must support.\\n     */\\n    function setAppBeaconInterface(bytes4 _interface) external onlyOwner {\\n        emit AppBeaconInterfaceSet(_interface);\\n        appBeaconInterface = _interface;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/apps/IAppRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IAppRegistry\\n * @notice Interface for the App Registry\\n */\\ninterface IAppRegistry {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event AppBeaconSet(address indexed appBeacon, bool isValid);\\n    event AppAccountInterfaceSet(bytes4 interfaceId);\\n    event AppBeaconInterfaceSet(bytes4 interfaceId);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InvalidAppBeacon();\\n    error InvalidLength();\\n    error InvalidAppAccountImplementation();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the current status of an app beacon, if active or not.\\n     * @param _appBeacon the address of the app beacon set.\\n     * @return The status of the app beacon.\\n     */\\n    function isValidAppBeacon(address _appBeacon) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the interface that the app account must support.\\n     */\\n    function appAccountInterface() external view returns (bytes4);\\n\\n    /**\\n     * @notice Gets the interface that the app beacon must support.\\n     */\\n    function appBeaconInterface() external view returns (bytes4);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the status of an app beacon in the registry if it's valid or not.\\n     * @param _appBeacon the address of the app beacon to be set.\\n     * @param _isValid the validity of the app beacon to be set.\\n     */\\n    function setAppBeaconStatus(address _appBeacon, bool _isValid) external;\\n\\n    /**\\n     * @notice Sets the status of an app beacon in the registry if it's valid or not, batched.\\n     * @param _appBeacons The addresses of the app beacons to be set.\\n     * @param _isValid the validity of the app beacon to be set.\\n     */\\n    function setAppBeaconStatusBatch(address[] memory _appBeacons, bool _isValid) external;\\n\\n    /**\\n     * @notice Sets the interface that the app beacon must support.\\n     * @param _interface the interface that the app beacon must support.\\n     */\\n    function setAppBeaconInterface(bytes4 _interface) external;\\n\\n    /**\\n     * @notice Sets the interface that the app account must support.\\n     * @param _interface the interface that the app account must support.\\n     */\\n    function setAppAccountInterface(bytes4 _interface) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/apps/base/IAppAccountBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IAppAccountBase\\n * @notice Interface for the App Account Base\\n */\\ninterface IAppAccountBase {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event EtherTransferredToMainAccount(uint256 amount);\\n    event ERC20TransferredToMainAccount(address indexed token, uint256 amount);\\n    event ERC721TransferredToMainAccount(address indexed token, uint256 tokenId);\\n    event ERC1155TransferredToMainAccount(address indexed token, uint256 tokenId, uint256 amount, bytes data);\\n    event ERC1155BatchTransferredToMainAccount(address indexed token, uint256[] _ids, uint256[] _values, bytes _data);\\n    event EtherRecoveredToMainAccount(uint256 amount);\\n    event ERC20RecoveredToMainAccount(address indexed token, uint256 amount);\\n    event ERC721RecoveredToMainAccount(address indexed token, uint256 tokenId);\\n    event ERC1155RecoveredToMainAccount(address indexed token, uint256 tokenId, uint256 amount, bytes data);\\n    event ERC1155BatchRecoveredToMainAccount(address indexed token, uint256[] tokenIds, uint256[] amounts, bytes _data);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error SameAddress();\\n    error InvalidAppBeacon();\\n    error ImplementationMismatch(address implementation, address latestImplementation);\\n    error ETHTransferFailed();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 \\t\\tINITIALIZER\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initialize the app account with the main account and the app beacon.\\n     * @param _mainAccount the address of the main account, this is the owner of the app.\\n     * @param _appBeacon the beacon for the app account.\\n     */\\n    function initialize(address _mainAccount, address _appBeacon) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the app version number of the app account.\\n     * @return A uint64 representing the version of the app.\\n     * @dev NOTE: This number must be updated whenever a new version is deployed.\\n     * The number should always only be incremented by 1.\\n     */\\n    function appVersion() external pure returns (uint64);\\n\\n    /**\\n     * @notice Get the app's main account.\\n     * @return The main account associated with this app.\\n     */\\n    function getMainAccount() external view returns (address);\\n\\n    /**\\n     * @notice Get the app config beacon.\\n     * @return The app config beacon address.\\n     */\\n    function getAppBeacon() external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Transfer Ether to the main account from the app account.\\n     * @param _amount The amount of Ether to transfer.\\n     */\\n    function transferEtherToMainAccount(uint256 _amount) external;\\n\\n    /**\\n     * @notice Transfer ERC20 tokens to the main account from the app account.\\n     * @param _token The address of the ERC20 token.\\n     * @param _amount The amount of tokens to transfer.\\n     */\\n    function transferERC20ToMainAccount(address _token, uint256 _amount) external;\\n\\n    /**\\n     * @notice Transfer ERC721 tokens to the main account from the app account.\\n     * @param _token The address of the ERC721 token.\\n     * @param _tokenId The ID of the ERC721 token.\\n     */\\n    function transferERC721ToMainAccount(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Transfer ERC1155 tokens to the main account from the app account.\\n     * @param _token The address of the ERC1155 token.\\n     * @param _tokenId The ID of the ERC1155 token.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _data Data to send with the transfer.\\n     */\\n    function transferERC1155ToMainAccount(address _token, uint256 _tokenId, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @notice Transfers batch ERC1155 tokens to the main account from the app account.\\n     * @param _token The address of the ERC1155 token.\\n     * @param _ids The IDs of the ERC1155 tokens.\\n     * @param _amounts The amounts of the ERC1155 tokens.\\n     * @param _data Data to send with the transfer.\\n     */\\n    function transferERC1155BatchToMainAccount(\\n        address _token,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Recovers all ether in the app account to the main account.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverEtherToMainAccount() external;\\n\\n    /**\\n     * @notice Recovers the full balance of an ERC20 token to the main account.\\n     * @param _token The address of the token to be recovered to the main account.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverERC20ToMainAccount(address _token) external;\\n\\n    /**\\n     * @notice Recovers a specified ERC721 token to the main account.\\n     * @param _token The ERC721 token address to recover.\\n     * @param _tokenId The ID of the ERC721 token to recover.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverERC721ToMainAccount(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Recovers all the tokens of a specified ERC1155 token to the main account.\\n     * @param _token The ERC1155 token address to recover.\\n     * @param _tokenId The id of the token to recover.\\n     * @param _data The data for the transaction.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverERC1155ToMainAccount(address _token, uint256 _tokenId, bytes calldata _data) external;\\n\\n    /**\\n     * @notice Recovers batch ERC1155 tokens to the main account.\\n     * @param _token The address of the ERC1155 token.\\n     * @param _ids The IDs of the ERC1155 tokens.\\n     * @param _values The values of the ERC1155 tokens.\\n     * @param _data Data to send with the transfer.\\n     */\\n    function recoverERC1155BatchToMainAccount(\\n        address _token,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Upgrade the app account to the latest implementation and beacon.\\n     * @param _appBeacon The address of the new app beacon.\\n     * @dev Requires the sender to be the main account.\\n     */\\n    function upgradeAppVersion(address _appBeacon) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/apps/base/IAppBeaconBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IAppBeaconBase\\n * @notice Interface for the App Beacon Base\\n */\\ninterface IAppBeaconBase {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tSTRUCTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Struct containing the config for the app beacon.\\n     * @param appName The name of the app.\\n     * @param latestAppBeacon The address of the latest app beacon.\\n     */\\n    struct AppBeaconConfig {\\n        string appName;\\n        address latestAppBeacon;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error ZeroAddress();\\n    error InvalidAppAccountImplementation();\\n    error InvalidAppBeacon();\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event LatestAppImplementationSet(address latestAppImplementation);\\n    event LatestAppBeaconSet(address latestAppBeacon);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the app implementation.\\n     * @return The address of the app implementation.\\n     */\\n    function APP_IMPLEMENTATION() external view returns (address);\\n\\n    /**\\n     * @notice Gets the name of the app associated to the beacon.\\n     * @return The name of the app beacon.\\n     */\\n    function getAppName() external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the app implementation.\\n     * @return The address of the app implementation.\\n     */\\n    function getLatestAppImplementation() external view returns (address);\\n\\n    /**\\n     * @notice Gets the latest beacon address for the app.\\n     * @return The address of the latest app beacon.\\n     */\\n    function getLatestAppBeacon() external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t    MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the latest app beacon address.\\n     * @param _latestAppBeacon The address of the latest app beacon associated with the app.\\n     */\\n    function setLatestAppBeacon(address _latestAppBeacon) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@pythnetwork/entropy-sdk-solidity/=node_modules/@pythnetwork/entropy-sdk-solidity/\",\r\n      \"@synthetixio/core-contracts/=node_modules/@synthetixio/core-contracts/\",\r\n      \"@synthetixio/core-modules/=node_modules/@synthetixio/core-modules/\",\r\n      \"@synthetixio/main/=node_modules/@synthetixio/main/\",\r\n      \"@synthetixio/oracle-manager/=node_modules/@synthetixio/oracle-manager/\",\r\n      \"@synthetixio/perps-market/=node_modules/@synthetixio/perps-market/\",\r\n      \"@synthetixio/spot-market/=node_modules/@synthetixio/spot-market/\",\r\n      \"cannon-std/=lib/cannon-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"wormhole-circle-integration/=lib/wormhole-circle-integration/evm/src/\",\r\n      \"wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/\",\r\n      \"wormhole/=lib/wormhole-circle-integration/evm/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAppAccountImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAppBeacon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"AppAccountInterfaceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"AppBeaconInterfaceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"appBeacon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"AppBeaconSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appAccountInterface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appBeaconInterface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appBeacon\",\"type\":\"address\"}],\"name\":\"appBeacons\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_appBeacon\",\"type\":\"address\"}],\"name\":\"isValidAppBeacon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interface\",\"type\":\"bytes4\"}],\"name\":\"setAppAccountInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interface\",\"type\":\"bytes4\"}],\"name\":\"setAppBeaconInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_appBeacon\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"setAppBeaconStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_appBeacons\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"setAppBeaconStatusBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AppRegistry", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006298551d56f825b3b6c3350d32129ffd3cfb198c", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}