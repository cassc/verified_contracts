{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ethereum/TimeLockContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract TimeLockContract {\\n    address public beneficiary;\\n    uint256 public releaseTime;\\n\\n    // Store the locked token balance for an account in `lockedBalanceOf[account][token]`\\n    // `token = 0x0` means ETH\\n    mapping(address => mapping(address => uint256)) public lockedBalanceOf;\\n\\n    // Constructor sets the beneficiary address and release time (in Unix timestamp)\\n    // `beneficiary` is a multi-sig address\\n    constructor(address _beneficiary, uint256 _releaseTime) {\\n        require(_releaseTime > block.timestamp, \\\"Release time must be in the future\\\");\\n        require(_releaseTime < block.timestamp + 90 days, \\\"Release time must be within 3 months\\\");\\n        beneficiary = _beneficiary;\\n        releaseTime = _releaseTime;\\n    }\\n\\n    // TODO: extend release time\\n\\n    // Function to receive ETH deposits\\n    receive() external payable {\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"Deposit amount must be greater than zero\\\");\\n\\n        lockedBalanceOf[msg.sender][address(0x0)] += amount;\\n        emit TokenLocked(msg.sender, address(0x0), amount);\\n    }\\n\\n    // Function to receive ERC20 tokens\\n    function lockERC20(address token, uint256 amount) public {\\n        require(amount > 0, \\\"Deposit amount must be greater than zero\\\");\\n\\n        lockedBalanceOf[msg.sender][token] += amount;\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        emit TokenLocked(msg.sender, token, amount);\\n    }\\n\\n    // Function to withdraw ETH, only available after release time and only to the beneficiary\\n    function withdrawETH(uint256 amount) public {\\n        require(block.timestamp >= releaseTime, \\\"Current time is before release time\\\");\\n        require(msg.sender == beneficiary, \\\"Only beneficiary can withdraw\\\");\\n\\n        uint256 balance = address(this).balance;\\n        require(balance >= amount, \\\"Insufficient ETH balance\\\");\\n\\n        payable(beneficiary).transfer(amount);\\n        emit TokenWithdrawn(address(0x0), amount);\\n    }\\n\\n    // Function to withdraw ERC20 tokens, only available after release time and only to the beneficiary\\n    function withdrawERC20(address token, uint256 amount) public {\\n        require(block.timestamp >= releaseTime, \\\"Current time is before release time\\\");\\n        require(msg.sender == beneficiary, \\\"Only beneficiary can withdraw\\\");\\n\\n        IERC20 tokenContract = IERC20(token);\\n        uint256 balance = tokenContract.balanceOf(address(this));\\n        require(balance >= amount, \\\"Insufficient token balance\\\");\\n\\n        tokenContract.transfer(beneficiary, amount);\\n        emit TokenWithdrawn(token, amount);\\n    }\\n\\n    event TokenLocked(address indexed account, address token, uint256 amount);\\n    event TokenWithdrawn(address token, uint256 amount);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TimeLockContract", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000147a198d803d4a02b8bec7cc78be1abe0c3d93e50000000000000000000000000000000000000000000000000000000066230580", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "none"}