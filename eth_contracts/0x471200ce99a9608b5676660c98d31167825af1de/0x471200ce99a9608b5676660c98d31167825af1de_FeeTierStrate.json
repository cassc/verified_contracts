{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/FeeTierStrate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n  function _msgData() internal view virtual returns (bytes calldata) {\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  constructor() {\\r\\n    _transferOwnership(_msgSender());\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    _checkOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  function _checkOwner() internal view virtual {\\r\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  function _transferOwnership(address newOwner) internal virtual {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract FeeTierStrate is Ownable {\\r\\n  struct FeeRecObj {\\r\\n    uint256 index;\\r\\n    string title;\\r\\n    address account;\\r\\n    uint256 feePercent;\\r\\n    bool exist;\\r\\n  }\\r\\n\\r\\n  struct ManagerObj {\\r\\n    uint256 index;\\r\\n    bool exist;\\r\\n  }\\r\\n\\r\\n  uint256 public MAX_FEE = 1000000;\\r\\n  uint256 public MAX_INDEX = 1;\\r\\n  mapping (uint256 => uint256) private depositFee;\\r\\n  mapping (uint256 => uint256) private totalFee;\\r\\n  mapping (uint256 => uint256) private withdrawlFee;\\r\\n  uint256 private baseFee = 1000000;\\r\\n\\r\\n  mapping (uint256 => FeeRecObj) private _feeTier;\\r\\n  uint256[] private _tierIndex;\\r\\n\\r\\n  mapping (address => ManagerObj) private _manageAccess;\\r\\n  address[] private _feeManager;\\r\\n\\r\\n  modifier onlyManager() {\\r\\n    require(msg.sender == owner() || _manageAccess[msg.sender].exist, \\\"!manager\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor () {\\r\\n    totalFee[0] = 100000;\\r\\n    totalFee[1] = 100000;\\r\\n    totalFee[2] = 100000;\\r\\n    totalFee[3] = 100000;\\r\\n    totalFee[4] = 100000;\\r\\n    totalFee[5] = 100000;\\r\\n    totalFee[6] = 100000;\\r\\n    totalFee[7] = 100000;\\r\\n    totalFee[8] = 100000;\\r\\n  }\\r\\n\\r\\n  function getAllManager() public view returns(address[] memory) {\\r\\n    return _feeManager;\\r\\n  }\\r\\n\\r\\n  function setManager(address usraddress, bool access) public onlyOwner {\\r\\n    if (access == true) {\\r\\n      if ( ! _manageAccess[usraddress].exist) {\\r\\n        uint256 newId = _feeManager.length;\\r\\n        _manageAccess[usraddress] = ManagerObj(newId, true);\\r\\n        _feeManager.push(usraddress);\\r\\n      }\\r\\n    }\\r\\n    else {\\r\\n      if (_manageAccess[usraddress].exist) {\\r\\n        address lastObj = _feeManager[_feeManager.length - 1];\\r\\n        _feeManager[_manageAccess[usraddress].index] = _feeManager[_manageAccess[lastObj].index];\\r\\n        _feeManager.pop();\\r\\n        delete _manageAccess[usraddress];\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getMaxFee() public view returns(uint256) {\\r\\n    return MAX_FEE;\\r\\n  }\\r\\n\\r\\n  function setMaxFee(uint256 newFee) public onlyManager {\\r\\n    MAX_FEE = newFee;\\r\\n  }\\r\\n\\r\\n  function setDepositFee(uint256 id, uint256 newFee) public onlyManager {\\r\\n    depositFee[id] = newFee;\\r\\n  }\\r\\n\\r\\n  function setTotalFee(uint256 id, uint256 newFee) public onlyManager {\\r\\n    totalFee[id] = newFee;\\r\\n  }\\r\\n\\r\\n  function setWithdrawFee(uint256 id, uint256 newFee) public onlyManager {\\r\\n    withdrawlFee[id] = newFee;\\r\\n  }\\r\\n\\r\\n  function setBaseFee(uint256 newFee) public onlyManager {\\r\\n    baseFee = newFee;\\r\\n  }\\r\\n\\r\\n  function getDepositFee(uint256 id) public view returns(uint256, uint256) {\\r\\n    return (depositFee[id], baseFee);\\r\\n  }\\r\\n\\r\\n  function getTotalFee(uint256 id) public view returns(uint256, uint256) {\\r\\n    return (totalFee[id], baseFee);\\r\\n  }\\r\\n\\r\\n  function getWithdrawFee(uint256 id) public view returns(uint256, uint256) {\\r\\n    return (withdrawlFee[id], baseFee);\\r\\n  }\\r\\n\\r\\n  function getAllTier() public view returns(uint256[] memory) {\\r\\n    return _tierIndex;\\r\\n  }\\r\\n\\r\\n  function insertTier(string memory title, address account, uint256 fee) public onlyManager {\\r\\n    require(fee <= MAX_FEE, \\\"Fee tier value is overflowed\\\");\\r\\n    _tierIndex.push(MAX_INDEX);\\r\\n    _feeTier[MAX_INDEX] = FeeRecObj(_tierIndex.length - 1, title, account, fee, true);\\r\\n    MAX_INDEX = MAX_INDEX + 1;\\r\\n  }\\r\\n\\r\\n  function getTier(uint256 index) public view returns(address, string memory, uint256) {\\r\\n    require(_feeTier[index].exist, \\\"Only existing tier can be loaded\\\");\\r\\n    FeeRecObj memory tierItem = _feeTier[index];\\r\\n    return (tierItem.account, tierItem.title, tierItem.feePercent);\\r\\n  }\\r\\n\\r\\n  function updateTier(uint256 index, string memory title, address account, uint256 fee) public onlyManager {\\r\\n    require(_feeTier[index].exist, \\\"Only existing tier can be loaded\\\");\\r\\n    require(fee <= MAX_FEE, \\\"Fee tier value is overflowed\\\");\\r\\n    _feeTier[index].title = title;\\r\\n    _feeTier[index].account = account;\\r\\n    _feeTier[index].feePercent = fee;\\r\\n  }\\r\\n\\r\\n  function removeTier(uint256 index) public onlyManager {\\r\\n    require(_feeTier[index].exist, \\\"Only existing tier can be removed\\\");\\r\\n    uint256 arr_index = _feeTier[index].index;\\r\\n    uint256 last_index = _tierIndex[_tierIndex.length-1];\\r\\n    \\r\\n    FeeRecObj memory changedObj = _feeTier[last_index];\\r\\n    _feeTier[last_index] = FeeRecObj(arr_index, changedObj.title, changedObj.account, changedObj.feePercent, true);\\r\\n    _tierIndex[arr_index] = last_index;\\r\\n    _tierIndex.pop();\\r\\n    delete _feeTier[index];\\r\\n  }\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllManager\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTier\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"insertTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usraddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setMaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setTotalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeeTierStrate", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}