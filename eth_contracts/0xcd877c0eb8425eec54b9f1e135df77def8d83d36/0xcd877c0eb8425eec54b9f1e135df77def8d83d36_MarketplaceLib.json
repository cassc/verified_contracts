{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/marketplace/libs/MarketplaceLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\\\";\\n\\nimport \\\"../ILazyDelivery.sol\\\";\\n\\nimport \\\"./TokenLib.sol\\\";\\n\\n/**\\n * Interface for Ownable contracts\\n */\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\\n/**\\n * @dev Marketplace libraries\\n */\\nlibrary MarketplaceLib {\\n    using AddressUpgradeable for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Events\\n    event CreateListing(\\n        uint40 indexed listingId,\\n        uint16 marketplaceBPS,\\n        uint8 listingType,\\n        uint24 totalAvailable,\\n        uint24 editionSize,\\n        uint48 startTime,\\n        uint48 endTime,\\n        uint256 initialAmount,\\n        uint16 extensionInterval,\\n        uint16 minIncrementBPS,\\n        address erc20\\n    );\\n    event CreateListingTokenDetails(\\n        uint40 indexed listingId,\\n        uint256 id,\\n        address address_,\\n        uint8 spec,\\n        bool lazy\\n    );\\n    event CreateListingFees(\\n        uint40 indexed listingId,\\n        uint16 deliverBPS,\\n        uint240 deliverFixed\\n    );\\n\\n    event PurchaseEvent(\\n        uint40 indexed listingId,\\n        address buyer,\\n        uint24 count,\\n        uint256 amount\\n    );\\n    event BidEvent(uint40 indexed listingId, address bidder, uint256 amount);\\n    event OfferEvent(uint40 indexed listingId, address oferrer, uint256 amount);\\n    event RescindOfferEvent(\\n        uint40 indexed listingId,\\n        address oferrer,\\n        uint256 amount\\n    );\\n    event AcceptOfferEvent(\\n        uint40 indexed listingId,\\n        address oferrer,\\n        uint256 amount\\n    );\\n    event ModifyListing(\\n        uint40 indexed listingId,\\n        uint256 initialAmount,\\n        uint48 startTime,\\n        uint48 endTime\\n    );\\n    event CancelListing(\\n        uint40 indexed listingId,\\n        address requestor,\\n        uint16 holdbackBPS\\n    );\\n    event FinalizeListing(uint40 indexed listingId);\\n\\n    // Listing types\\n    enum ListingType {\\n        INVALID,\\n        FIXED_PRICE,\\n        OFFERS_ONLY,\\n        INDIVIDUAL_AUCTION,\\n        RANKED_AUCTION,\\n        LINEAR_DUTCH_AUCTION,\\n        EXPO_DUTCH_AUCTION,\\n        SETTLEMENT_DUTCH_AUCTION\\n    }\\n\\n    /**\\n     * @dev Listing structure\\n     *\\n     * @param seller          - the selling party\\n     * @param flags           - bit flag (hasBid, finalized, tokenCreator).  See FLAG_MASK_*\\n     * @param totalSold       - total number of items sold.\\n     * @param marketplaceBPS  - Marketplace fee BPS\\n     * @param curationBPS     - curation fee BPS\\n     * @param bidCount        - bid count\\n     * @param details         - ListingDetails.  Contains listing configuration\\n     * @param token           - TokenDetails.  Contains the details of token being sold\\n     * @param receivers       - Array of ListingReceiver structs.  If provided, will distribute sales proceeds to receivers accordingly.\\n     * @param fees            - DeliveryFees.  Contains the delivery fee configuration for the listing\\n     * @param markleRoot      - MerkleRoot for whitelisted listing\\n     */\\n    struct Listing {\\n        address payable seller;\\n        uint8 flags;\\n        uint24 totalSold;\\n        uint16 marketplaceBPS;\\n        uint16 curationBPS;\\n        uint16 bidCount;\\n        ListingDetails details;\\n        TokenDetails token;\\n        ListingReceiver[] receivers;\\n        DeliveryFees fees;\\n        bytes32 merkleRoot;\\n    }\\n\\n    uint8 internal constant FLAG_MASK_HAS_BID = 0x1;\\n    uint8 internal constant FLAG_MASK_FINALIZED = 0x2;\\n    uint8 internal constant FLAG_MASK_TOKEN_CREATOR = 0x4;\\n    uint8 internal constant FLAG_MASK_ACCEPT_OFFERS = 0x8;\\n    uint8 internal constant FLAG_MASK_FINALIZED_LOGICALLY = 0x10;\\n\\n    /**\\n     * @dev Listing details structure\\n     *\\n     * @param initialAmount     - The initial amount of the listing. For auctions, it represents the reserve price.\\n     * @param restingAmount     - The resting amount of the listing.\\n     * @param dutchDecAmount    - The reduction amount of the dutch auction.\\n     * @param type_             - Listing type\\n     * @param totalAvailable    - Total number of tokens available.\\n     * @param editionSize       - Total number of winners.\\n     * @param extensionInterval - Only valid for *_AUCTION types. Indicates how long an auction will extend if a bid is made within the last <extensionInterval> seconds of the auction.\\n     * @param minIncrementBPS   - Only valid for *_AUCTION types. Indicates the minimum bid increase required\\n     * @param erc20             - If not 0x0, it indicates the erc20 token accepted for this sale\\n     * @param startTime         - The start time of the sale.  If set to 0, startTime will be set to the first bid/purchase.\\n     * @param endTime           - The end time of the sale.  If startTime is 0, represents the duration of the listing upon first bid/purchase.\\n     */\\n    struct ListingDetails {\\n        uint256 initialAmount;\\n        uint256 restingAmount;\\n        uint256 dutchDecAmount;\\n        ListingType type_;\\n        uint24 totalAvailable;\\n        uint16 editionSize;\\n        uint16 extensionInterval;\\n        uint16 minIncrementBPS;\\n        uint16 dutchInterval;\\n        address erc20;\\n        uint48 startTime;\\n        uint48 endTime;\\n    }\\n\\n    /**\\n     * @dev Token detail structure\\n     *\\n     * @param address_  - The contract address of the token\\n     * @param id        - The token id (or for a lazy asset, the asset id)\\n     * @param spec      - The spec of the token.  If it's a lazy token, it must be blank.\\n     * @param lazy      - True if token is to be lazy minted, false otherwise.  If lazy, the contract address must support ILazyDelivery\\n     */\\n    struct TokenDetails {\\n        uint256 id;\\n        address address_;\\n        TokenLib.Spec spec;\\n        bool lazy;\\n    }\\n\\n    /**\\n     * @dev Fee configuration for listing\\n     *\\n     * @param deliverBPS         - Additional fee needed to deliver the token (BPS)\\n     * @param deliverFixed       - Additional fee needed to deliver the token (fixed)\\n     */\\n    struct DeliveryFees {\\n        uint16 deliverBPS;\\n        uint240 deliverFixed;\\n    }\\n\\n    /**\\n     * Listing receiver.  The array of listing receivers must add up to 10000 BPS if provided.\\n     */\\n    struct ListingReceiver {\\n        address payable receiver;\\n        uint16 receiverBPS;\\n    }\\n\\n    /**\\n     * Represents an active bid\\n     *\\n     * @param amount       - The bid amount\\n     * @param bidder       - The bidder\\n     * @param delivered    - Whether or not the token has been delivered.\\n     * @param settled      - Whether or not the seller has been paid\\n     * @param refunded     - Whether or not the bid has been refunded\\n     * @param timestamp    - Timestamp of bid\\n     */\\n    struct Bid {\\n        uint256 amount;\\n        address payable bidder;\\n        bool delivered;\\n        bool settled;\\n        bool refunded;\\n        uint48 timestamp;\\n    }\\n\\n    /**\\n     * Represents an active offer\\n     *\\n     * @param amount        - The offer amount\\n     * @param timestamp     - Timestamp of offer\\n     * @param accepted      - Whether or not the offer was accepted (seller was paid)\\n     * @param erc20         - Currently unused.\\n     *                        Offers can only be made on the listing currency\\n     */\\n    struct Offer {\\n        uint200 amount;\\n        uint48 timestamp;\\n        bool accepted;\\n        address erc20;\\n    }\\n\\n    /**\\n     * Construct a marketplace listing\\n     */\\n    function constructListing(\\n        address seller,\\n        uint40 listingId,\\n        Listing storage listing,\\n        ListingDetails calldata listingDetails,\\n        TokenDetails calldata tokenDetails,\\n        DeliveryFees calldata deliveryFees,\\n        ListingReceiver[] calldata listingReceivers,\\n        bool acceptOffers,\\n        bool intake\\n    ) public {\\n        require(\\n            tokenDetails.address_.isContract(),\\n            \\\"Token address must be a contract\\\"\\n        );\\n        require(\\n            listingDetails.endTime > listingDetails.startTime,\\n            \\\"End time must be after start time\\\"\\n        );\\n        require(\\n            listingDetails.startTime == 0 ||\\n                listingDetails.startTime > block.timestamp,\\n            \\\"Start and end time cannot occur in the past\\\"\\n        );\\n        require(\\n            listingDetails.totalAvailable % listingDetails.editionSize == 0,\\n            \\\"Invalid token config\\\"\\n        );\\n        require(\\n            !acceptOffers ||\\n                listingDetails.type_ == ListingType.INDIVIDUAL_AUCTION ||\\n                listingDetails.type_ == ListingType.RANKED_AUCTION ||\\n                listingDetails.type_ == ListingType.LINEAR_DUTCH_AUCTION ||\\n                listingDetails.type_ == ListingType.EXPO_DUTCH_AUCTION ||\\n                listingDetails.type_ == ListingType.SETTLEMENT_DUTCH_AUCTION,\\n            \\\"Type cannot accept offers\\\"\\n        );\\n\\n        if (listingReceivers.length > 0) {\\n            uint256 totalBPS;\\n            for (uint i; i < listingReceivers.length; ) {\\n                listing.receivers.push(listingReceivers[i]);\\n                totalBPS += listingReceivers[i].receiverBPS;\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            require(totalBPS == 10000, \\\"Invalid receiver config\\\");\\n        }\\n\\n        if (listingDetails.type_ == ListingType.INDIVIDUAL_AUCTION) {\\n            require(listingDetails.editionSize == 1, \\\"Invalid token config\\\");\\n        } else if (listingDetails.type_ == ListingType.OFFERS_ONLY) {\\n            require(\\n                listingDetails.initialAmount == 0 &&\\n                    listingDetails.startTime > block.timestamp,\\n                \\\"Invalid listing config\\\"\\n            );\\n        }\\n\\n        // Purchase types\\n        if (isPurchase(listingDetails.type_) || isOffer(listingDetails.type_)) {\\n            require(\\n                deliveryFees.deliverBPS == 0 &&\\n                    deliveryFees.deliverFixed == 0 &&\\n                    listingDetails.extensionInterval == 0 &&\\n                    listingDetails.minIncrementBPS == 0,\\n                \\\"Invalid listing config\\\"\\n            );\\n        }\\n\\n        if (tokenDetails.lazy) {\\n            require(\\n                ERC165Checker.supportsInterface(\\n                    tokenDetails.address_,\\n                    type(ILazyDelivery).interfaceId\\n                ),\\n                \\\"Lazy delivery requires token address to implement ILazyDelivery\\\"\\n            );\\n        } else {\\n            require(\\n                listingDetails.type_ == ListingType.INDIVIDUAL_AUCTION ||\\n                    listingDetails.type_ == ListingType.RANKED_AUCTION ||\\n                    listingDetails.type_ == ListingType.LINEAR_DUTCH_AUCTION ||\\n                    listingDetails.type_ == ListingType.EXPO_DUTCH_AUCTION ||\\n                    listingDetails.type_ ==\\n                    ListingType.SETTLEMENT_DUTCH_AUCTION ||\\n                    listingDetails.type_ == ListingType.OFFERS_ONLY ||\\n                    listingDetails.type_ == ListingType.FIXED_PRICE,\\n                \\\"Invalid type\\\"\\n            );\\n            if (intake) {\\n                _intakeToken(\\n                    tokenDetails.spec,\\n                    tokenDetails.address_,\\n                    tokenDetails.id,\\n                    listingDetails.totalAvailable,\\n                    seller\\n                );\\n            }\\n        }\\n\\n        // Set Listing Data\\n        listing.seller = payable(seller);\\n        listing.details = listingDetails;\\n        listing.token = tokenDetails;\\n        listing.fees = deliveryFees;\\n\\n        // Token ownership check\\n        if (\\n            ERC165Checker.supportsInterface(\\n                tokenDetails.address_,\\n                type(IAdminControl).interfaceId\\n            ) && IAdminControl(tokenDetails.address_).isAdmin(seller)\\n        ) {\\n            listing.flags |= FLAG_MASK_TOKEN_CREATOR;\\n        } else {\\n            try IOwnable(tokenDetails.address_).owner() returns (\\n                address owner\\n            ) {\\n                if (owner == seller) listing.flags |= FLAG_MASK_TOKEN_CREATOR;\\n            } catch {}\\n        }\\n\\n        if (acceptOffers) {\\n            listing.flags |= FLAG_MASK_ACCEPT_OFFERS;\\n        }\\n\\n        _emitCreateListing(listingId, listing);\\n    }\\n\\n    function _emitCreateListing(\\n        uint40 listingId,\\n        Listing storage listing\\n    ) private {\\n        emit CreateListing(\\n            listingId,\\n            listing.marketplaceBPS,\\n            uint8(listing.details.type_),\\n            listing.details.totalAvailable,\\n            listing.details.editionSize,\\n            listing.details.startTime,\\n            listing.details.endTime,\\n            listing.details.initialAmount,\\n            listing.details.extensionInterval,\\n            listing.details.minIncrementBPS,\\n            listing.details.erc20\\n        );\\n        emit CreateListingTokenDetails(\\n            listingId,\\n            listing.token.id,\\n            listing.token.address_,\\n            uint8(listing.token.spec),\\n            listing.token.lazy\\n        );\\n        if (listing.fees.deliverBPS > 0 || listing.fees.deliverFixed > 0) {\\n            emit CreateListingFees(\\n                listingId,\\n                listing.fees.deliverBPS,\\n                listing.fees.deliverFixed\\n            );\\n        }\\n    }\\n\\n    function _intakeToken(\\n        TokenLib.Spec tokenSpec,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 tokensToTransfer,\\n        address from\\n    ) private {\\n        if (tokenSpec == TokenLib.Spec.ERC721) {\\n            require(\\n                tokensToTransfer == 1,\\n                \\\"ERC721 invalid number of tokens to transfer\\\"\\n            );\\n            TokenLib._erc721Transfer(\\n                tokenAddress,\\n                tokenId,\\n                from,\\n                address(this)\\n            );\\n        } else if (tokenSpec == TokenLib.Spec.ERC1155) {\\n            TokenLib._erc1155Transfer(\\n                tokenAddress,\\n                tokenId,\\n                tokensToTransfer,\\n                from,\\n                address(this)\\n            );\\n        } else {\\n            revert(\\\"Unsupported token spec\\\");\\n        }\\n    }\\n\\n    function isAuction(ListingType type_) internal pure returns (bool) {\\n        return (type_ == ListingType.INDIVIDUAL_AUCTION ||\\n            type_ == ListingType.RANKED_AUCTION ||\\n            type_ == ListingType.SETTLEMENT_DUTCH_AUCTION);\\n    }\\n\\n    function isPurchase(ListingType type_) internal pure returns (bool) {\\n        return (type_ == ListingType.FIXED_PRICE ||\\n            type_ == ListingType.LINEAR_DUTCH_AUCTION ||\\n            type_ == ListingType.EXPO_DUTCH_AUCTION);\\n    }\\n\\n    function isOffer(ListingType type_) internal pure returns (bool) {\\n        return (type_ == ListingType.OFFERS_ONLY);\\n    }\\n\\n    function canOffer(\\n        ListingType type_,\\n        uint8 listingFlags\\n    ) internal pure returns (bool) {\\n        // Can only make an offer if:\\n        // 1. Listing is an OFFERS_ONLY type\\n        // 2. Listing is an INDIVIDUAL_AUCTION that has offers enabled and no bids\\n        return (isOffer(type_) ||\\n            (isAuction(type_) &&\\n                (listingFlags & FLAG_MASK_ACCEPT_OFFERS) != 0 &&\\n                !hasBid(listingFlags)));\\n    }\\n\\n    function hasBid(uint8 listingFlags) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_HAS_BID != 0;\\n    }\\n\\n    function isFinalized(uint8 listingFlags) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_FINALIZED != 0;\\n    }\\n\\n    function isFinalizedLogically(uint8 listingFlags) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_FINALIZED_LOGICALLY != 0;\\n    }\\n\\n    function sellerIsTokenCreator(\\n        uint8 listingFlags\\n    ) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_TOKEN_CREATOR != 0;\\n    }\\n\\n    function modifyListing(\\n        uint40 listingId,\\n        Listing storage listing,\\n        uint256 initialAmount,\\n        uint48 startTime,\\n        uint48 endTime\\n    ) public {\\n        require(listing.seller == msg.sender, \\\"Permission denied\\\");\\n        require(endTime > startTime, \\\"End time must be after start time\\\");\\n        require(\\n            startTime == 0 ||\\n                (startTime == listing.details.startTime &&\\n                    endTime > block.timestamp) ||\\n                startTime > block.timestamp,\\n            \\\"Start and end time cannot occur in the past\\\"\\n        );\\n        require(\\n            !isFinalized(listing.flags) &&\\n                ((!isAuction(listing.details.type_) &&\\n                    listing.totalSold == 0) ||\\n                    (isAuction(listing.details.type_) &&\\n                        listing.bidCount == 0)),\\n            \\\"Cannot modify listing that has already started or completed\\\"\\n        );\\n        listing.details.initialAmount = initialAmount;\\n        listing.details.startTime = startTime;\\n        listing.details.endTime = endTime;\\n\\n        emit ModifyListing(listingId, initialAmount, startTime, endTime);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/marketplace/ILazyDelivery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyDelivery is IERC165 {\\n    /**\\n     *  @dev Deliver an asset and deliver to the specified party\\n     *  When implementing this interface, please ensure you restrict access.\\n     *  If using LazyDeliver.sol, you can use authorizedDelivererRequired modifier to restrict access.\\n     *  Delivery can be for an existing asset or newly minted assets.\\n     *\\n     *  @param listingId      The listingId associated with this delivery.  Useful for permissioning.\\n     *  @param to             The address to deliver the asset to\\n     *  @param assetId        The assetId to deliver\\n     *  @param payableCount   The number of assets to deliver\\n     *  @param payableAmount  The amount seller will receive upon delivery of asset\\n     *  @param payableERC20   The erc20 token address of the amount (0x0 if ETH)\\n     *  @param index          (Optional): Index value for certain sales methods\\n     *\\n     *  Suggestion: If determining a refund amount based on total sales data, do not enable this function\\n     *              until the sales data is finalized and recorded in contract\\n     *\\n     *  Exploit Prevention for dynamic/random assignment\\n     *  1. Ensure attributes are not assigned until AFTER underlying mint if using _safeMint.\\n     *     This is to ensure a receiver cannot check attribute values on receive and revert transaction.\\n     *     However, even if this is the case, the recipient can wrap its mint in a contract that checks\\n     *     post mint completion and reverts if unsuccessful.\\n     *  2. Ensure that \\\"to\\\" is not a contract address. This prevents a contract from doing the lazy\\n     *     mint, which could exploit random assignment by reverting if they do not receive the desired\\n     *     item post mint.\\n     */\\n    function deliver(\\n        uint40 listingId,\\n        address to,\\n        uint256 assetId,\\n        uint24 payableCount,\\n        uint256 payableAmount,\\n        address payableERC20,\\n        uint256 index\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/libs/TokenLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @dev Token specs and functions\\n */\\nlibrary TokenLib {\\n    // Spec types\\n    enum Spec {\\n        NONE,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    function _erc721Transfer(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal {\\n        // Transfer token\\n        IERC721(tokenAddress).transferFrom(from, to, tokenId);\\n    }\\n\\n    function _erc1155Transfer(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value,\\n        address from,\\n        address to\\n    ) internal {\\n        // Transfer token\\n        IERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, value, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oferrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptOfferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"holdbackBPS\",\"type\":\"uint16\"}],\"name\":\"CancelListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"marketplaceBPS\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"totalAvailable\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"editionSize\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"extensionInterval\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minIncrementBPS\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"CreateListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"deliverBPS\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint240\",\"name\":\"deliverFixed\",\"type\":\"uint240\"}],\"name\":\"CreateListingFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"spec\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lazy\",\"type\":\"bool\"}],\"name\":\"CreateListingTokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"FinalizeListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"}],\"name\":\"ModifyListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oferrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OfferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"count\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oferrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescindOfferEvent\",\"type\":\"event\"}]", "ContractName": "MarketplaceLib", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}