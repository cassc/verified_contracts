{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollateralLiquidationReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface to a Collateral Liquidation Receiver\\n */\\ninterface ICollateralLiquidationReceiver {\\n    /**\\n     * @notice Callback on collateral liquidated\\n     * @dev Pre-conditions: 1) proceeds were transferred, and 2) transferred amount >= proceeds\\n     * @param liquidationContext Liquidation context\\n     * @param proceeds Liquidation proceeds in currency tokens\\n     */\\n    function onCollateralLiquidated(bytes calldata liquidationContext, uint256 proceeds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollateralLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface to a Collateral Liquidator\\n */\\ninterface ICollateralLiquidator {\\n    /**\\n     * @notice Get collateral liquidator name\\n     * @return Collateral liquidator name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice Liquidate collateral\\n     * @param currencyToken Currency token\\n     * @param collateralToken Collateral token, either underlying token or collateral wrapper\\n     * @param collateralTokenId Collateral token ID\\n     * @param collateralWrapperContext Collateral wrapper context\\n     * @param liquidationContext Liquidation callback context\\n     */\\n    function liquidate(\\n        address currencyToken,\\n        address collateralToken,\\n        uint256 collateralTokenId,\\n        bytes calldata collateralWrapperContext,\\n        bytes calldata liquidationContext\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollateralWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface to a Collateral Wrapper\\n */\\ninterface ICollateralWrapper {\\n    /**************************************************************************/\\n    /* API */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Get collateral wrapper name\\n     * @return Collateral wrapper name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice Enumerate wrapped collateral\\n     * @param tokenId Collateral wrapper token ID\\n     * @param context Implementation-specific context\\n     * @return token Token address\\n     * @return tokenIds List of token ids\\n     */\\n    function enumerate(\\n        uint256 tokenId,\\n        bytes calldata context\\n    ) external view returns (address token, uint256[] memory tokenIds);\\n\\n    /*\\n     * Unwrap collateral\\n     * @param tokenId Collateral wrapper token ID\\n     * @param context Implementation-specific context\\n     */\\n    function unwrap(uint256 tokenId, bytes calldata context) external;\\n}\\n\"\r\n    },\r\n    \"contracts/liquidators/EnglishAuctionCollateralLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"../interfaces/ICollateralLiquidationReceiver.sol\\\";\\nimport \\\"../interfaces/ICollateralLiquidator.sol\\\";\\nimport \\\"../interfaces/ICollateralWrapper.sol\\\";\\n\\n/**\\n * @title English Auction Collateral Liquidator\\n * @author MetaStreet Labs\\n */\\ncontract EnglishAuctionCollateralLiquidator is ICollateralLiquidator, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /**************************************************************************/\\n    /* Constants */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Implementation version\\n     */\\n    string public constant IMPLEMENTATION_VERSION = \\\"1.1\\\";\\n\\n    /**\\n     * @notice Basis points scale\\n     */\\n    uint256 internal constant BASIS_POINTS_SCALE = 10_000;\\n\\n    /**************************************************************************/\\n    /* Errors */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Invalid parameters\\n     */\\n    error InvalidParameters();\\n\\n    /**\\n     * @notice Invalid token\\n     */\\n    error InvalidToken();\\n\\n    /**\\n     * @notice Invalid auction\\n     */\\n    error InvalidAuction();\\n\\n    /**\\n     * @notice Invalid liquidation\\n     */\\n    error InvalidLiquidation();\\n\\n    /**\\n     * @notice Invalid bid\\n     */\\n    error InvalidBid();\\n\\n    /**\\n     * @notice Invalid collateral claim\\n     */\\n    error InvalidClaim();\\n\\n    /**************************************************************************/\\n    /* Structures */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Auction\\n     * @param liquidationHash Liquidation hash\\n     * @param endTime Auction end time\\n     * @param highestBidder Highest bidder\\n     * @param highestBid Highest bid\\n     */\\n    struct Auction {\\n        bytes32 liquidationHash;\\n        uint64 endTime;\\n        address highestBidder;\\n        uint256 highestBid;\\n    }\\n\\n    /**\\n     * @notice Liquidation\\n     * @param source Address the liquidation came from\\n     * @param currencyToken Currency token\\n     * @param auctionCount Number of auctions that have not ended\\n     * @param liquidationContextHash Liquidation context hash\\n     * @param proceeds Proceeds from liquidations\\n     */\\n    struct Liquidation {\\n        address source;\\n        address currencyToken;\\n        uint16 auctionCount;\\n        bytes32 liquidationContextHash;\\n        uint256 proceeds;\\n    }\\n\\n    /**************************************************************************/\\n    /* Events */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Emitted when a liquidation is started\\n     * @param liquidationHash Liquidation hash\\n     * @param source Liquidation source\\n     * @param liquidationContextHash Liquidation context hash\\n     * @param currencyToken Currency token\\n     * @param auctionCount Auction count\\n     */\\n    event LiquidationStarted(\\n        bytes32 indexed liquidationHash,\\n        address indexed source,\\n        bytes32 indexed liquidationContextHash,\\n        address currencyToken,\\n        uint16 auctionCount\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction is created\\n     * @param liquidationHash Liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     */\\n    event AuctionCreated(\\n        bytes32 indexed liquidationHash,\\n        address indexed collateralToken,\\n        uint256 indexed collateralTokenId\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction is started\\n     * @param liquidationHash Liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @param endTime Auction end time\\n     */\\n    event AuctionStarted(\\n        bytes32 indexed liquidationHash,\\n        address indexed collateralToken,\\n        uint256 indexed collateralTokenId,\\n        uint64 endTime\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction is extended\\n     * @param liquidationHash Liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @param endTime Auction end time\\n     */\\n    event AuctionExtended(\\n        bytes32 indexed liquidationHash,\\n        address indexed collateralToken,\\n        uint256 indexed collateralTokenId,\\n        uint64 endTime\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction receives a bid\\n     * @param liquidationHash Liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @param bidder Bidder\\n     * @param amount Bid amount\\n     */\\n    event AuctionBid(\\n        bytes32 indexed liquidationHash,\\n        address indexed collateralToken,\\n        uint256 indexed collateralTokenId,\\n        address bidder,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction is ended and collateral is claimed by winner\\n     * @param liquidationHash Liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @param winner Winner of auction\\n     * @param proceeds Proceeds in currency tokens\\n     */\\n    event AuctionEnded(\\n        bytes32 indexed liquidationHash,\\n        address indexed collateralToken,\\n        uint256 indexed collateralTokenId,\\n        address winner,\\n        uint256 proceeds\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation is ended\\n     * @param liquidationHash Liquidation hash\\n     * @param proceeds Proceeds in currency tokens\\n     */\\n    event LiquidationEnded(bytes32 indexed liquidationHash, uint256 proceeds);\\n\\n    /**************************************************************************/\\n    /* State */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Initialized boolean\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @notice Auction duration\\n     */\\n    uint64 private _auctionDuration;\\n\\n    /**\\n     * @notice Duration window before an auction's end time\\n     */\\n    uint64 private _timeExtensionWindow;\\n\\n    /**\\n     * @notice Time extension of auction when a new bid is made within _timeExtensionWindow\\n     */\\n    uint64 private _timeExtension;\\n\\n    /**\\n     * @notice Minimum bid increment from previous bid\\n     */\\n    uint64 private _minimumBidBasisPoints;\\n\\n    /**\\n     * @notice Collateral wrappers (max 5)\\n     */\\n    address internal immutable _collateralWrapper1;\\n    address internal immutable _collateralWrapper2;\\n    address internal immutable _collateralWrapper3;\\n    address internal immutable _collateralWrapper4;\\n    address internal immutable _collateralWrapper5;\\n\\n    /**\\n     * @dev Collateral auctions\\n     */\\n    mapping(address => mapping(uint256 => Auction)) private _auctions;\\n\\n    /**\\n     * @dev Liquidation tracker\\n     */\\n    mapping(bytes32 => Liquidation) private _liquidations;\\n\\n    /**************************************************************************/\\n    /* Constructor */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice EnglishAuctionCollateralLiquidator constructor\\n     */\\n    constructor(address[] memory collateralWrappers_) {\\n        /* Validate number of collateral wrappers */\\n        if (collateralWrappers_.length > 5) revert InvalidParameters();\\n\\n        /* Assign collateral wrappers */\\n        _collateralWrapper1 = (collateralWrappers_.length > 0) ? collateralWrappers_[0] : address(0);\\n        _collateralWrapper2 = (collateralWrappers_.length > 1) ? collateralWrappers_[1] : address(0);\\n        _collateralWrapper3 = (collateralWrappers_.length > 2) ? collateralWrappers_[2] : address(0);\\n        _collateralWrapper4 = (collateralWrappers_.length > 3) ? collateralWrappers_[3] : address(0);\\n        _collateralWrapper5 = (collateralWrappers_.length > 4) ? collateralWrappers_[4] : address(0);\\n\\n        /* Disable initialization of implementation contract */\\n        _initialized = true;\\n    }\\n\\n    /**************************************************************************/\\n    /* Initializer */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Initializer\\n     * @dev Fee-on-transfer currency tokens are not supported\\n     */\\n    function initialize(\\n        uint64 auctionDuration_,\\n        uint64 timeExtensionWindow_,\\n        uint64 timeExtension_,\\n        uint64 minimumBidBasisPoints_\\n    ) external {\\n        require(!_initialized, \\\"Already initialized\\\");\\n        if (auctionDuration_ <= timeExtensionWindow_) revert InvalidParameters();\\n        if (timeExtension_ <= timeExtensionWindow_) revert InvalidParameters();\\n        if (auctionDuration_ == 0) revert InvalidParameters();\\n\\n        _initialized = true;\\n        _auctionDuration = auctionDuration_;\\n        _timeExtensionWindow = timeExtensionWindow_;\\n        _timeExtension = timeExtension_;\\n        _minimumBidBasisPoints = minimumBidBasisPoints_;\\n    }\\n\\n    /**************************************************************************/\\n    /* Getters */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Get auction duration\\n     * @return Auction duration\\n     */\\n    function auctionDuration() external view returns (uint64) {\\n        return _auctionDuration;\\n    }\\n\\n    /**\\n     * @notice Get time extension window\\n     * @return Time extension window\\n     */\\n    function timeExtensionWindow() external view returns (uint64) {\\n        return _timeExtensionWindow;\\n    }\\n\\n    /**\\n     * @notice Get time extension\\n     * @return Time extension\\n     */\\n    function timeExtension() external view returns (uint64) {\\n        return _timeExtension;\\n    }\\n\\n    /**\\n     * @notice Get minimum bid basis points\\n     * @return Minimum bid basis points\\n     */\\n    function minimumBidBasisPoints() external view returns (uint64) {\\n        return _minimumBidBasisPoints;\\n    }\\n\\n    /**\\n     * Get liquidation details\\n     * @param liquidationHash Liquidation hash\\n     * @return Liquidation Liquidation details\\n     */\\n    function liquidations(bytes32 liquidationHash) external view returns (Liquidation memory) {\\n        return _liquidations[liquidationHash];\\n    }\\n\\n    /**\\n     * Get auction details\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @return Auction Auction details\\n     */\\n    function auctions(address collateralToken, uint256 collateralTokenId) external view returns (Auction memory) {\\n        return _auctions[collateralToken][collateralTokenId];\\n    }\\n\\n    /**************************************************************************/\\n    /* Helper Functions */\\n    /**************************************************************************/\\n\\n    /**\\n     * @notice Helper function to check if collateral token is a collateral wrapper\\n     * @param collateralToken Collateral token\\n     */\\n    function _isCollateralWrapper(address collateralToken) internal view returns (bool) {\\n        return\\n            collateralToken == _collateralWrapper1 ||\\n            collateralToken == _collateralWrapper2 ||\\n            collateralToken == _collateralWrapper3 ||\\n            collateralToken == _collateralWrapper4 ||\\n            collateralToken == _collateralWrapper5;\\n    }\\n\\n    /**\\n     * @notice Helper function to compute liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     */\\n    function _liquidationHash(address collateralToken, uint256 collateralTokenId) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(block.chainid, collateralToken, collateralTokenId, block.timestamp));\\n    }\\n\\n    /**\\n     * @notice Helper function to compute liquidation context hash\\n     * @param liquidationContext Liquidation context\\n     */\\n    function _liquidationContextHash(bytes calldata liquidationContext) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(block.chainid, liquidationContext));\\n    }\\n\\n    /**\\n     * @notice Helper function to create an auction\\n     *\\n     * Emits a {AuctionCreated} event.\\n     *\\n     * @param liquidationHash Liquidation hash\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     */\\n    function _createAuction(bytes32 liquidationHash, address collateralToken, uint256 collateralTokenId) internal {\\n        /* Validate auction does not exists */\\n        if (_auctions[collateralToken][collateralTokenId].liquidationHash != bytes32(0)) revert InvalidAuction();\\n\\n        /* Create collateral auction */\\n        _auctions[collateralToken][collateralTokenId] = Auction({\\n            liquidationHash: liquidationHash,\\n            endTime: 0,\\n            highestBidder: address(0),\\n            highestBid: 0\\n        });\\n\\n        /* Emit AuctionCreated */\\n        emit AuctionCreated(liquidationHash, collateralToken, collateralTokenId);\\n    }\\n\\n    /**\\n     * @notice Helper function to process a collateral liquidation\\n     *\\n     * Emits a {CollateralLiquidated} event.\\n     *\\n     * @param auction_ Auction\\n     * @param liquidationContext Liquidation context\\n     */\\n    function _processLiquidation(Auction memory auction_, bytes calldata liquidationContext) internal {\\n        /* Get liquidation */\\n        Liquidation memory liquidation_ = _liquidations[auction_.liquidationHash];\\n\\n        /* Validate liquidation exists */\\n        if (liquidation_.source == address(0)) revert InvalidClaim();\\n\\n        /* Validate liquidation context */\\n        if (liquidation_.liquidationContextHash != _liquidationContextHash(liquidationContext)) revert InvalidClaim();\\n\\n        /* Liquidate if all auctions for the liquidation are completed */\\n        if (liquidation_.auctionCount - 1 == 0) {\\n            /* Compute total proceeds */\\n            uint256 proceeds = liquidation_.proceeds + auction_.highestBid;\\n\\n            /* Transfer proceeds from this contract to source */\\n            IERC20(liquidation_.currencyToken).safeTransfer(liquidation_.source, proceeds);\\n\\n            /* If source is a contract that implements ICollateralLiquidationReceiver, make collateral liquidation callback */\\n            if (\\n                Address.isContract(liquidation_.source) &&\\n                ERC165Checker.supportsInterface(liquidation_.source, type(ICollateralLiquidationReceiver).interfaceId)\\n            ) ICollateralLiquidationReceiver(liquidation_.source).onCollateralLiquidated(liquidationContext, proceeds);\\n\\n            /* Delete liquidation since all auctions are completed */\\n            delete _liquidations[auction_.liquidationHash];\\n\\n            /* Emit LiquidationEnded */\\n            emit LiquidationEnded(auction_.liquidationHash, proceeds);\\n        } else {\\n            /* Update liquidation proceeds */\\n            _liquidations[auction_.liquidationHash].proceeds += auction_.highestBid;\\n\\n            /* Update liquidation active auctions */\\n            _liquidations[auction_.liquidationHash].auctionCount -= 1;\\n        }\\n    }\\n\\n    /**************************************************************************/\\n    /* Implementation */\\n    /**************************************************************************/\\n\\n    /**\\n     * @inheritdoc ICollateralLiquidator\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"EnglishAuctionCollateralLiquidator\\\";\\n    }\\n\\n    /**\\n     * @inheritdoc ICollateralLiquidator\\n     */\\n    function liquidate(\\n        address currencyToken,\\n        address collateralToken,\\n        uint256 collateralTokenId,\\n        bytes calldata collateralWrapperContext,\\n        bytes calldata liquidationContext\\n    ) external nonReentrant {\\n        /* Check collateral token and currency token is not zero address */\\n        if (collateralToken == address(0) || currencyToken == address(0)) revert InvalidToken();\\n\\n        /* Compute liquidation hash */\\n        bytes32 liquidationHash = _liquidationHash(collateralToken, collateralTokenId);\\n\\n        /* Validate liquidation does not exist */\\n        if (_liquidations[liquidationHash].source != address(0)) revert InvalidLiquidation();\\n\\n        /* Declare underlying collateral token address and IDs */\\n        address underlyingCollateralToken;\\n        uint256[] memory underlyingCollateralTokenIds;\\n\\n        /* Cache check for collateral wrapper  */\\n        bool isCollateralWrapper = _isCollateralWrapper(collateralToken);\\n\\n        /* Determine if collateral token is a whitelisted collateral wrapper */\\n        if (isCollateralWrapper) {\\n            /* Get underlying collateral token and underlying collateral token IDs */\\n            (underlyingCollateralToken, underlyingCollateralTokenIds) = ICollateralWrapper(collateralToken).enumerate(\\n                collateralTokenId,\\n                collateralWrapperContext\\n            );\\n        } else {\\n            /* Assign collateral token address and ID */\\n            underlyingCollateralToken = collateralToken;\\n            underlyingCollateralTokenIds = new uint256[](1);\\n            underlyingCollateralTokenIds[0] = collateralTokenId;\\n        }\\n\\n        /* Compute liquidation context hash */\\n        bytes32 liquidationContextHash = _liquidationContextHash(liquidationContext);\\n\\n        /* Emit LiquidationStarted */\\n        emit LiquidationStarted(\\n            liquidationHash,\\n            msg.sender,\\n            liquidationContextHash,\\n            currencyToken,\\n            uint16(underlyingCollateralTokenIds.length)\\n        );\\n\\n        /* Iterate through underlying collaterals to create an auction for each underlying collateral */\\n        for (uint16 i = 0; i < underlyingCollateralTokenIds.length; i++) {\\n            _createAuction(liquidationHash, underlyingCollateralToken, underlyingCollateralTokenIds[i]);\\n        }\\n\\n        /* Create liquidation */\\n        _liquidations[liquidationHash] = Liquidation({\\n            source: msg.sender,\\n            currencyToken: currencyToken,\\n            auctionCount: uint16(underlyingCollateralTokenIds.length),\\n            liquidationContextHash: liquidationContextHash,\\n            proceeds: 0\\n        });\\n\\n        /* Transfer collateral token from source to this contract */\\n        IERC721(collateralToken).transferFrom(msg.sender, address(this), collateralTokenId);\\n\\n        /* Unwrap if collateral token is a collateral wrapper */\\n        if (isCollateralWrapper)\\n            ICollateralWrapper(collateralToken).unwrap(collateralTokenId, collateralWrapperContext);\\n    }\\n\\n    /**\\n     * @notice Bid on an auction\\n     *\\n     * Emits a {AuctionBid} event.\\n     *\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @param amount Bid amount\\n     */\\n    function bid(address collateralToken, uint256 collateralTokenId, uint256 amount) external nonReentrant {\\n        /* Get auction */\\n        Auction memory auction_ = _auctions[collateralToken][collateralTokenId];\\n\\n        /* Get liquidation */\\n        Liquidation memory liquidation_ = _liquidations[auction_.liquidationHash];\\n\\n        /* Validate liquidation exists */\\n        if (liquidation_.source == address(0)) revert InvalidAuction();\\n\\n        /* Validate that auction exists */\\n        if (auction_.liquidationHash == bytes32(0)) revert InvalidAuction();\\n\\n        /* Validate auction has not ended */\\n        if (auction_.endTime != 0 && auction_.endTime < uint64(block.timestamp)) revert InvalidBid();\\n\\n        /* Validate bid amount is bigger than the minimum bid amount */\\n        if (\\n            amount <= auction_.highestBid ||\\n            amount - auction_.highestBid < (auction_.highestBid * _minimumBidBasisPoints) / BASIS_POINTS_SCALE\\n        ) revert InvalidBid();\\n\\n        /* If auction has not started */\\n        if (auction_.endTime == 0) {\\n            /* Calculate end time */\\n            uint64 endTime = uint64(block.timestamp) + _auctionDuration;\\n\\n            /* Start auction */\\n            _auctions[collateralToken][collateralTokenId].endTime = endTime;\\n\\n            /* Emit AuctionStarted */\\n            emit AuctionStarted(auction_.liquidationHash, collateralToken, collateralTokenId, endTime);\\n        } else if (auction_.endTime - uint64(block.timestamp) <= _timeExtensionWindow) {\\n            /* Calculate new end time */\\n            uint64 endTime = uint64(block.timestamp) + _timeExtension;\\n\\n            /* Update end time if auction is already in progress and within\\n             * time extension window */\\n            _auctions[collateralToken][collateralTokenId].endTime = endTime;\\n\\n            /* Emit AuctionExtended */\\n            emit AuctionExtended(auction_.liquidationHash, collateralToken, collateralTokenId, endTime);\\n        }\\n\\n        /* Update auction with new bid */\\n        _auctions[collateralToken][collateralTokenId].highestBidder = msg.sender;\\n        _auctions[collateralToken][collateralTokenId].highestBid = amount;\\n\\n        /* If not first bidder */\\n        if (auction_.highestBidder != address(0)) {\\n            /* Transfer previous bid back from collateral liquidator to previous bidder */\\n            IERC20(liquidation_.currencyToken).safeTransfer(auction_.highestBidder, auction_.highestBid);\\n        }\\n\\n        /* Transfer bid amount from bidder to collateral liquidator */\\n        IERC20(liquidation_.currencyToken).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        /* Emit AuctionBid */\\n        emit AuctionBid(auction_.liquidationHash, collateralToken, collateralTokenId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Claim collateral and liquidate if possible\\n     *\\n     * Emits a {CollateralLiquidated} event.\\n     * Emits a {AuctionEnded} event.\\n     *\\n     * @param collateralToken Collateral token\\n     * @param collateralTokenId Collateral token ID\\n     * @param liquidationContext Liquidation context\\n     */\\n    function claim(\\n        address collateralToken,\\n        uint256 collateralTokenId,\\n        bytes calldata liquidationContext\\n    ) external nonReentrant {\\n        /* Get auction */\\n        Auction memory auction_ = _auctions[collateralToken][collateralTokenId];\\n\\n        /* Validate that auction exists */\\n        if (auction_.liquidationHash == bytes32(0)) revert InvalidAuction();\\n\\n        /* Validate that auction was started */\\n        if (auction_.highestBidder == address(0)) revert InvalidClaim();\\n\\n        /* Validate that auction has ended */\\n        if (uint64(block.timestamp) <= auction_.endTime) revert InvalidClaim();\\n\\n        /* Process liquidation proceeds */\\n        _processLiquidation(auction_, liquidationContext);\\n\\n        /* Delete auction */\\n        delete _auctions[collateralToken][collateralTokenId];\\n\\n        /* Transfer collateral from contract to auction winner */\\n        IERC721(collateralToken).transferFrom(address(this), auction_.highestBidder, collateralTokenId);\\n\\n        /* Emit AuctionEnded */\\n        emit AuctionEnded(\\n            auction_.liquidationHash,\\n            collateralToken,\\n            collateralTokenId,\\n            auction_.highestBidder,\\n            auction_.highestBid\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralWrappers_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proceeds\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proceeds\",\"type\":\"uint256\"}],\"name\":\"LiquidationEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"liquidationContextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"auctionCount\",\"type\":\"uint16\"}],\"name\":\"LiquidationStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"}],\"internalType\":\"struct EnglishAuctionCollateralLiquidator.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"liquidationContext\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"auctionDuration_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeExtensionWindow_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeExtension_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minimumBidBasisPoints_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currencyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"collateralWrapperContext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"liquidationContext\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"liquidationHash\",\"type\":\"bytes32\"}],\"name\":\"liquidations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"auctionCount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"liquidationContextHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"proceeds\",\"type\":\"uint256\"}],\"internalType\":\"struct EnglishAuctionCollateralLiquidator.Liquidation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidBasisPoints\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeExtension\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeExtensionWindow\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EnglishAuctionCollateralLiquidator", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c4dc9ef8763433aae26635bc5a09e362605fad180000000000000000000000005f264625e6400102a2f5e9a5d6e006c7a6d41285", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}