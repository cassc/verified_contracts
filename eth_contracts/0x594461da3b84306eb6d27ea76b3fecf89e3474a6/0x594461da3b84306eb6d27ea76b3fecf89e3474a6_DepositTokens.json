{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.14;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n// This contract keeps track of the deposits made by users and sends those to the sandwich contract so they can recover those when necessary\r\ncontract DepositTokens {\r\n    event DepositMade(address indexed user, address indexed token, uint256 indexed amount, uint256 timestamp);\r\n    event Extract(address indexed user, address indexed token, uint256 indexed amount, uint256 timestamp);\r\n\r\n    struct Deposit {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n    // User => token => amount\r\n    mapping (address => mapping(address => uint256)) public deposits;\r\n    // User address => tokes deposited for the `deposits` variable this will contain duplicate items to save on gas, you can remove duplicates in the frontend only used for view functions\r\n    mapping (address => address[]) public tokensDeposited;\r\n    address public owner;\r\n    address public sandwichContract;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _sandwichContract) {\r\n        sandwichContract = _sandwichContract;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeSandwichContract(address _newSandwichContract) external onlyOwner {\r\n        sandwichContract = _newSandwichContract;\r\n    }\r\n\r\n    function depositMultiple(address[] memory _tokens, uint256[] memory _amounts) public {\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            address token = _tokens[i];\r\n            uint256 amount = _amounts[i];\r\n            deposits[msg.sender][token] += amount;\r\n            IERC20(token).transferFrom(msg.sender, sandwichContract, amount);\r\n            tokensDeposited[msg.sender].push(token);\r\n\r\n            emit DepositMade(msg.sender, token, amount, block.timestamp);\r\n        }\r\n    }\r\n\r\n    // The tokens and amounts must be sorted meaning _tokens[i] => _amounts[i]\r\n    // The tokens must be moved to this contract first in order to receive the withdraw (probably using a wallet signature to signal intent)\r\n    function withdraw(address[] memory _tokens, uint256[] memory _amounts) public {\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            address token = _tokens[i];\r\n            uint256 amount = _amounts[i];\r\n            require(deposits[msg.sender][token] >= amount, \"Can't withdraw more than you have\");\r\n            deposits[msg.sender][token] -= amount;\r\n            IERC20(token).transfer(msg.sender, amount);\r\n\r\n            emit Extract(msg.sender, token, amount, block.timestamp);\r\n        }\r\n    }\r\n\r\n    // Returns the tokens the user deposited (may have been withdrawn)\r\n    function getDeposits(address _user) public view returns(address[] memory) {\r\n        return tokensDeposited[_user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sandwichContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Extract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSandwichContract\",\"type\":\"address\"}],\"name\":\"changeSandwichContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sandwichContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensDeposited\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DepositTokens", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000d51bdfadfe0c4329094b6c7d2872e96d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47434c3c54a016771f359cff4ce7e462d4e2d3e66336b9d610b37db99cbcb97e"}