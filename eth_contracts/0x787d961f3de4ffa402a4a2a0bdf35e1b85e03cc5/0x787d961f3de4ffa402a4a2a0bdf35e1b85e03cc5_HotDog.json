{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/HotDog.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {IMultiTokenBurnRegistry} from \\\"./common/IMultiTokenBurnRegistry.sol\\\";\\nimport {IMultiTokenMintRegistry} from \\\"./common/IMultiTokenMintRegistry.sol\\\";\\nimport {IERC20CustomErrors} from \\\"./ERC20/extensions/IERC20CustomErrors.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ERC20/extensions/ERC20ProofOfBurn.sol\\\";\\n\\n/// @title An ERC20 token supporting an external registry.\\n/// @author BillSchumacher\\n/// @custom:security-contact 34168009+BillSchumacher@users.noreply.github.com\\ncontract HotDog is ERC20, Ownable, ERC20ProofOfBurn, ERC20Burnable {\\n    address private _registry;\\n    uint256 private _lastFee;\\n    uint256 private _zeroAddress;\\n    uint256 private _mintFee = 0.01 ether;\\n    string private _description;\\n\\n    error InsufficientMintFee(uint256 mintFee, uint256 msgValue);\\n\\n    constructor(\\n        address registry_,\\n        address[] memory burnAddresses,\\n        address[] memory contractAddresses\\n    )\\n        ERC20(\\\"Hot Dog\\\", \\\"HOTDOG\\\")\\n        Ownable(msg.sender)\\n        ERC20ProofOfBurn(burnAddresses, contractAddresses)\\n    {\\n        _registry = registry_;\\n    }\\n\\n    /// @inheritdoc ERC20\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        if (account == address(0)) return _zeroAddress;\\n        return ERC20.balanceOf(account);\\n    }\\n\\n    /// @notice Get the description of the token.\\n    /// @dev Returns the description of the token.\\n    /// @return (string) - the description of the token.\\n    function description() public view returns (string memory) {\\n        return _description;\\n    }\\n\\n    /// @notice Set the description of the token.\\n    /// @dev Set the description of the token.\\n    /// @param desc (string) - the description of the token.\\n    function setDesc(string calldata desc) public onlyOwner {\\n        _description = desc;\\n    }\\n\\n    /// @inheritdoc ERC20\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override(ERC20) {\\n        ERC20._update(from, to, value);\\n        if (to == address(0)) {\\n            _zeroAddress += value;\\n            this._updateBurnRegistry(from, value);\\n        }\\n        if (from == address(0)) {\\n            this._updateMintRegistry(to, value);\\n        }\\n    }\\n\\n    /// @notice Get the current fee to mint tokens.\\n    /// @dev Returns the current fee to mint tokens.\\n    /// @return (uint256) - the current fee to mint tokens.\\n    function getMintFee() public view returns (uint256) {\\n        return _mintFee;\\n    }\\n\\n    /// @inheritdoc ERC20ProofOfBurn\\n    function beforeMintBurned(\\n        address sender,\\n        address account\\n    ) internal override {\\n        uint256 currentMintFee = _mintFee;\\n        uint256 sentValue = msg.value;\\n        if (sentValue < currentMintFee) {\\n            revert InsufficientMintFee(currentMintFee, sentValue);\\n        }\\n        _mintFee = currentMintFee * 1001 / 1000;\\n        sender;\\n        account;\\n    }\\n\\n    /// @dev Update the burn registry.\\n    /// @param account (address) - the address of the account.\\n    /// @param value (uint256) - the amount of tokens to burn.\\n    function _updateBurnRegistry(address account, uint256 value) external {\\n        if (msg.sender != address(this)) revert OwnableUnauthorizedAccount(msg.sender);\\n        //_registry.call(abi.encodeWithSignature(\\\"updateBurnRegistry(address,uint256)\\\", account, value));\\n        IMultiTokenBurnRegistry(_registry).updateBurnRegistry(account, value);\\n    }\\n\\n    /// @dev Update the mint registry.\\n    /// @param account (address) - the address of the account.\\n    /// @param value (uint256) - the amount of tokens to mint.\\n    function _updateMintRegistry(address account, uint256 value) external {\\n        if (msg.sender != address(this)) revert OwnableUnauthorizedAccount(msg.sender);\\n        //_registry.call(abi.encodeWithSignature(\\\"updateMintRegistry(address,uint256)\\\", account, value));\\n        IMultiTokenMintRegistry(_registry).updateMintRegistry(account, value);\\n    }\\n\\n    /// @notice Allows the token to receive ether.\\n    receive() external payable {}\\n\\n    /// @notice Allows the token to withdraw ether.\\n    /// @dev Allows the token to withdraw ether.\\n    function withdraw() public onlyOwner {\\n        uint256 value = address(this).balance;\\n        address to = owner();\\n        (bool success,) = to.call{value: value}(\\\"\\\");\\n        if (!success) revert IERC20CustomErrors.ERC20TransferFailed(to, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\r\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\r\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * The default value of {decimals} is 18. To change this, you should override\\r\\n * this function so it returns a different value.\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n */\\r\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\r\\n    mapping(address account => uint256) private _balances;\\r\\n\\r\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the default value returned by this function, unless\\r\\n     * it's overridden.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `value`.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `value`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `value`.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, value);\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        if (from == address(0)) {\\r\\n            revert ERC20InvalidSender(address(0));\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            revert ERC20InvalidReceiver(address(0));\\r\\n        }\\r\\n        _update(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\r\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\r\\n     * this function.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _update(address from, address to, uint256 value) internal virtual {\\r\\n        if (from == address(0)) {\\r\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\r\\n            _totalSupply += value;\\r\\n        } else {\\r\\n            uint256 fromBalance = _balances[from];\\r\\n            if (fromBalance < value) {\\r\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\r\\n            }\\r\\n            unchecked {\\r\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\r\\n                _balances[from] = fromBalance - value;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            unchecked {\\r\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\r\\n                _totalSupply -= value;\\r\\n            }\\r\\n        } else {\\r\\n            unchecked {\\r\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\r\\n                _balances[to] += value;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\r\\n     * Relies on the `_update` mechanism\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        if (account == address(0)) {\\r\\n            revert ERC20InvalidReceiver(address(0));\\r\\n        }\\r\\n        _update(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\r\\n     * Relies on the `_update` mechanism.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        if (account == address(0)) {\\r\\n            revert ERC20InvalidSender(address(0));\\r\\n        }\\r\\n        _update(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     *\\r\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        _approve(owner, spender, value, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\r\\n     *\\r\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\r\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\r\\n     * `Approval` event during `transferFrom` operations.\\r\\n     *\\r\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\r\\n     * true using the following override:\\r\\n     * ```\\r\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\r\\n     *     super._approve(owner, spender, value, true);\\r\\n     * }\\r\\n     * ```\\r\\n     *\\r\\n     * Requirements are the same as {_approve}.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\r\\n        if (owner == address(0)) {\\r\\n            revert ERC20InvalidApprover(address(0));\\r\\n        }\\r\\n        if (spender == address(0)) {\\r\\n            revert ERC20InvalidSpender(address(0));\\r\\n        }\\r\\n        _allowances[owner][spender] = value;\\r\\n        if (emitEvent) {\\r\\n            emit Approval(owner, spender, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\r\\n     *\\r\\n     * Does not update the allowance value in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Does not emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            if (currentAllowance < value) {\\r\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\r\\n            }\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - value, false);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\r\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n    /**\\r\\n     * @dev Destroys a `value` amount of tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 value) public virtual {\\r\\n        _burn(_msgSender(), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\r\\n     * the caller's allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n     * `value`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 value) public virtual {\\r\\n        _spendAllowance(account, _msgSender(), value);\\r\\n        _burn(account, value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/common/IMultiTokenBurnRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {ITokenBurnRegistryStats} from \\\"./ITokenBurnRegistryStats.sol\\\";\\n\\n/// @title Multi-token Burn registry interface.\\n/// @author BillSchumacher\\n/// @custom:security-contact 34168009+BillSchumacher@users.noreply.github.com\\ninterface IMultiTokenBurnRegistry is ITokenBurnRegistryStats {\\n    event TokenBurned(\\n        address indexed token,\\n        address indexed account,\\n        uint256 value,\\n        uint256 totalBurned,\\n        uint256 totalBurners\\n    );\\n\\n    /// @notice Get the total amount of burners.\\n    /// @dev Returns the total amount of burners.\\n    /// @param token (address) - the address of the token.\\n    /// @return (uint256) - the total amount of burners.\\n    function totalBurners(address token) external view returns (uint256);\\n\\n    /// @notice Get the address of the burner at the given index.\\n    /// @dev Returns the address of the burner at the given index.\\n    /// @param token (address) - the address of the token.\\n    /// @param index (uint256) - the index of the burner.\\n    /// @return (address) - the address of the burner.\\n    function burner(\\n        address token,\\n        uint256 index\\n    ) external view returns (address);\\n\\n    /// @notice Get the addresses of the first `amount` burners.\\n    /// @dev Returns the addresses of the first `amount` burners.\\n    /// @param token (address) - the address of the token.\\n    /// @param amount (uint256) - the amount of burners.\\n    /// @return (address[] memory) - the addresses of the burners.\\n    function firstBurners(\\n        address token,\\n        uint256 amount\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get the addresses of the last `amount` burners.\\n    /// @dev Returns the addresses of the last `amount` burners.\\n    /// @param token (address) - the address of the token.\\n    /// @param amount (uint256) - the amount of burners.\\n    /// @return (address[] memory) - the addresses of the burners.\\n    function lastBurners(\\n        address token,\\n        uint256 amount\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get the amount of tokens burned by the given address.\\n    /// @dev Returns the amount of tokens burned by the given address.\\n    /// @param token (address) - the address of the token.\\n    /// @param account (address) - the address of the account.\\n    /// @return (uint256) - the total amount of tokens burned.\\n    function burnedFrom(\\n        address token,\\n        address account\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the total amount of burners.\\n    /// @dev Returns the total amount of burners.\\n    /// @param token (address) - the address of the token.\\n    /// @return (uint256) - the total amount of burners.\\n    function burns(address token) external view returns (uint256);\\n\\n    /// @notice Get the total amount of tokens burned.\\n    /// @dev Returns the total amount of tokens burned.\\n    /// @param token (address) - the address of the token.\\n    /// @return (uint256) - the total amount of tokens burned.\\n    function totalBurned(address token) external view returns (uint256);\\n\\n    /// @dev Update the burn registry, uses the sender as the token address.\\n    /// @param account (address) - the address of the account.\\n    /// @param value (uint256) - the amount of tokens to burn.\\n    function updateBurnRegistry(\\n        address account,\\n        uint256 value\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/token/common/IMultiTokenMintRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {ITokenMintRegistryStats} from \\\"./ITokenMintRegistryStats.sol\\\";\\n\\n/// @title Multi-token mint registry interface.\\n/// @author BillSchumacher\\n/// @custom:security-contact 34168009+BillSchumacher@users.noreply.github.com\\ninterface IMultiTokenMintRegistry is ITokenMintRegistryStats {\\n    event TokenMinted(\\n        address indexed token,\\n        address indexed account,\\n        uint256 value,\\n        uint256 totalMinted,\\n        uint256 totalMinters\\n    );\\n    /// @notice Get the address of the minter at the given index.\\n    /// @dev Returns the address of the minter at the given index.\\n    /// @param token (address) - the address of the token.\\n    /// @param index (uint256) - the index of the minter.\\n    /// @return (address) - the address of the minter.\\n\\n    function minter(\\n        address token,\\n        uint256 index\\n    ) external view returns (address);\\n\\n    /// @notice Get the total amount of minters.\\n    /// @dev Returns the total amount of minters.\\n    /// @param token (address) - the address of the token.\\n    /// @return (uint256) - the total amount of minters.\\n    function totalMinters(address token) external view returns (uint256);\\n\\n    /// @notice Get the addresses of the first `amount` minters.\\n    /// @dev Returns the addresses of the first `amount` minters.\\n    /// @param token (address) - the address of the token.\\n    /// @param amount (uint256) - the amount of minters.\\n    /// @return (address[] memory) - the addresses of the minters.\\n    function firstMinters(\\n        address token,\\n        uint256 amount\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get the addresses of the last `amount` minters.\\n    /// @dev Returns the addresses of the last `amount` minters.\\n    /// @param token (address) - the address of the token.\\n    /// @param amount (uint256) - the amount of minters.\\n    /// @return (address[] memory) - the addresses of the minters.\\n    function lastMinters(\\n        address token,\\n        uint256 amount\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Get the amount of tokens minted by the given address.\\n    /// @dev Returns the amount of tokens minted by the given address.\\n    /// @param token (address) - the address of the token.\\n    /// @param account (address) - the address of the account.\\n    /// @return (uint256) - the amount of tokens minted.\\n    function mintedBy(\\n        address token,\\n        address account\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the total amount of tokens minted.\\n    /// @dev Returns the total amount of tokens minted.\\n    /// @param token (address) - the address of the token.\\n    /// @return (uint256) - the total amount of tokens minted.\\n    function totalMinted(address token) external view returns (uint256);\\n\\n    /// @dev Update the mint registry.\\n    /// @param account (address) - the address of the account.\\n    /// @param value (uint256) - the amount of tokens to mint.\\n    function updateMintRegistry(\\n        address account,\\n        uint256 value\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC20/extensions/IERC20CustomErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IERC20CustomErrors {\\n    error ERC20TransferFailed(address to, uint256 balance);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Context} from \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20/extensions/ERC20ProofOfBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {NoTokensToMint} from \\\"./ERC20MintyBurnyErrors.sol\\\";\\n\\n/// @title A smart contract that checks for burned tokens and mints new tokens based on the burned tokens.\\n/// @author BillSchumacher\\n/// @custom:security-contact 34168009+BillSchumacher@users.noreply.github.com\\nabstract contract ERC20ProofOfBurn is Context, ERC20 {\\n    uint256 private _lastBurned;\\n    address[] internal _burnAddresses;\\n    address[] internal _burnContracts;\\n\\n    constructor(\\n        address[] memory burnAddresses,\\n        address[] memory burnContracts\\n    ) {\\n        _burnAddresses = burnAddresses;\\n        _burnContracts = burnContracts;\\n    }\\n\\n    /// @notice Get the last amount of tokens that were burned.\\n    /// @dev Returns the last amount of tokens that were burned.\\n    /// @return (uint256) - the last amount of tokens that were burned.\\n    function lastBurned() public view returns (uint256) {\\n        return _lastBurned;\\n    }\\n\\n    /// @dev Set the last amount of tokens that were burned. Override to customize.\\n    /// @param value (uint256) - the last amount of tokens that were burned.\\n    function setLastBurned(uint256 value) internal virtual {\\n        _lastBurned = value;\\n    }\\n\\n    /// @notice Get the amount of tokens eligible to be minted.\\n    /// @dev Returns the amount of tokens eligible to be minted.\\n    /// @return balance (uint256) - the amount of tokens eligible to be minted.\\n    function getCurrentBurned()\\n        public\\n        payable\\n        virtual\\n        returns (uint256 balance)\\n    {\\n        address[] memory eligibleBurnAddresses = _burnAddresses;\\n        address[] memory eligibleBurnContracts = _burnContracts;\\n        uint256 addressLength = _burnAddresses.length;\\n        uint256 contractLength = _burnContracts.length;\\n        for (uint256 i; i < contractLength;) {\\n            ERC20 tokenContract = ERC20(eligibleBurnContracts[i]);\\n            for (uint256 j; j < addressLength;) {\\n                balance += tokenContract.balanceOf(eligibleBurnAddresses[j]);\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return balance;\\n    }\\n\\n    /// @notice Get the ratio of tokens to mint.\\n    /// @dev Returns the ratio of tokens to mint. Override to customize. Divided by 10000. 5000 = 0.5 (default)\\n    /// @return (uint256) - the ratio of tokens to mint.\\n    function mintRatio() public pure virtual returns (uint256) {\\n        return 5000;\\n    }\\n\\n    /// @notice Get the ratio of tokens to mint for ProofOfBurn.\\n    /// @dev Returns the ratio of tokens to mint for ProofOfBurn. Override to customize. Divided by 10000. 5000 = 0.5 (default)\\n    /// @return (uint256) - the ratio of tokens to mint.\\n    function burnMintRatio() public view virtual returns (uint256) {\\n        return mintRatio();\\n    }\\n\\n    /// @dev Handle access control, accounting, and any conditions here before minting, revert if failed.\\n    /// @param sender (address) - the address of the sender.\\n    /// @param account (address) - the address of the account.\\n    function beforeMintBurned(\\n        address sender,\\n        address account\\n    ) internal virtual {}\\n\\n    /// @dev Update the mint registry or perform other accounting. Override to customize.\\n    /// @param account (address) - the address of the account.\\n    /// @param value (uint256) - the amount of tokens minted.\\n    function afterMintBurned(address account, uint256 value) internal virtual {}\\n\\n    /// @dev Mints the burned tokens for the configured contracts and addresses.\\n    /// @param account (address) - the address of the account.\\n    /// @return (uint256) - the amount of tokens minted.\\n    function _doMintBurned(address account)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 balance = getCurrentBurned();\\n        uint256 tokensLastBurned = lastBurned();\\n        if (balance <= tokensLastBurned) {\\n            revert NoTokensToMint();\\n        }\\n        uint256 tokens = (balance - tokensLastBurned) * burnMintRatio() / 10000;\\n        setLastBurned(balance);\\n        _mint(account, tokens);\\n        return tokens;\\n    }\\n\\n    /// @notice Mints the burned tokens for the configured contracts and addresses.\\n    /// @dev Mints the burned tokens for the configured contracts and addresses.\\n    /// @return tokens (uint256) - the amount of tokens minted.\\n    function mintBurned() public payable virtual returns (uint256 tokens) {\\n        address sender = _msgSender();\\n        beforeMintBurned(sender, sender);\\n        tokens = _doMintBurned(sender);\\n        afterMintBurned(sender, tokens);\\n        return tokens;\\n    }\\n\\n    /// @notice Mints the burned tokens for the configured contracts and addresses.\\n    /// @dev Mints the burned tokens for the configured contracts and addresses.\\n    /// @return tokens (uint256) - the amount of tokens minted.\\n    function mintBurnedFor(address account)\\n        public\\n        payable\\n        virtual\\n        returns (uint256 tokens)\\n    {\\n        address sender = _msgSender();\\n        beforeMintBurned(sender, account);\\n        tokens = _doMintBurned(account);\\n        afterMintBurned(account, tokens);\\n        return tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC20 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\r\\n */\\r\\ninterface IERC20Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC20InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC20InvalidSpender(address spender);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC721 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\r\\n */\\r\\ninterface IERC721Errors {\\r\\n    /**\\r\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\r\\n     * Used in balance queries.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721InvalidOwner(address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721NonexistentToken(uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC721InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC721InvalidOperator(address operator);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC1155 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\r\\n */\\r\\ninterface IERC1155Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC1155InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC1155InvalidOperator(address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\r\\n     * Used in batch transfers.\\r\\n     * @param idsLength Length of the array of token identifiers\\r\\n     * @param valuesLength Length of the array of token amounts\\r\\n     */\\r\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/common/ITokenBurnRegistryStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n/// @title Token Burn registry interface.\\n/// @author BillSchumacher\\n/// @custom:security-contact 34168009+BillSchumacher@users.noreply.github.com\\ninterface ITokenBurnRegistryStats {\\n    struct TokenBurnStats {\\n        uint256 totalBurned;\\n        uint256 totalBurners;\\n        mapping(address account => uint256 value) burned;\\n        mapping(uint256 index => address account) burnAddresses;\\n    }\\n\\n    event Burned(\\n        address indexed account,\\n        uint256 value,\\n        uint256 totalBurned,\\n        uint256 totalBurners\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/token/common/ITokenMintRegistryStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n/// @title Multi-token mint registry interface.\\n/// @author BillSchumacher\\n/// @custom:security-contact 34168009+BillSchumacher@users.noreply.github.com\\ninterface ITokenMintRegistryStats {\\n    struct TokenMintStats {\\n        uint256 totalMinted;\\n        uint256 totalMinters;\\n        mapping(address => uint256) minted;\\n        mapping(uint256 => address) mintAddresses;\\n    }\\n\\n    event Minted(\\n        address indexed account,\\n        uint256 value,\\n        uint256 totalMinted,\\n        uint256 totalMinters\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC20/extensions/ERC20MintyBurnyErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nerror NoTokensToMint();\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\r\n      \"solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\r\n      \"solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"burnAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"InsufficientMintFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensToMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_updateBurnRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_updateMintRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintBurnedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"setDesc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HotDog", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004fbc1714767861e4293ddc4764c2e68fbe1f3856000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dead000000000000000042069420694206942069000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000000000000000000000000000000000000000000100000000000000000000000095ad61b0a150d79219dcf64e1e6cc01f0b64c4ce", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}