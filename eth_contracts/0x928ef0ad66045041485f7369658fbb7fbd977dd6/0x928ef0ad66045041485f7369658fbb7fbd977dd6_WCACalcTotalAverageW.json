{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/WCACalcTotalAverageWWCA.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n\r\ncontract WCACalcTotalAverageWWCA is Ownable {\r\n\tIWCADAOLocking public WCADAOLocking;\r\n\tIWWCA public WWCA;\r\n\r\n\tstring public constant version = \"0.2\";\r\n\r\n\tconstructor(address _WCADAOLocking, address _WWCA) {\r\n\t\tWCADAOLocking = IWCADAOLocking(_WCADAOLocking);\r\n\t\tWWCA = IWWCA(_WWCA);\r\n\t}\r\n\r\n\tfunction setContracts(address _WCADAOLocking, address _WWCA) external onlyOwner {\r\n\t\tWCADAOLocking = IWCADAOLocking(_WCADAOLocking);\r\n\t\tWWCA = IWWCA(_WWCA);\r\n\t}\r\n\r\n\tfunction calcTotalAverageWWCA(\r\n\t\tuint256 fromTimestamp,\r\n\t\tuint256 toTimestamp,\r\n\t\tuint256 daysX4\r\n\t) external view returns (uint256) {\r\n\t\taddress[] memory stakers = WCADAOLocking.getStakers();\r\n\t\taddress[] memory distinctStakers = new address[](stakers.length);\r\n\t\tuint256 wwca = 0;\r\n\t\tfor (uint256 i; i < stakers.length; i++) {\r\n\t\t\tbool found = false;\r\n\t\t\tfor (uint256 j; j < distinctStakers.length; j++) {\r\n\t\t\t\tif (distinctStakers[j] == stakers[i]) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!found) {\r\n\t\t\t\tdistinctStakers[i] = stakers[i];\r\n\t\t\t\twwca += WWCA.calcAverageWWCAByAddress(stakers[i], fromTimestamp, toTimestamp, daysX4);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn wwca;\r\n\t}\r\n}\r\n\r\ninterface IWWCA {\r\n\tfunction calcAverageWWCAByAddress(\r\n\t\taddress _address,\r\n\t\tuint256 fromTimestamp,\r\n\t\tuint256 toTimestamp,\r\n\t\tuint256 daysX4\r\n\t) external view returns (uint256);\r\n}\r\n\r\ninterface IWCADAOLocking {\r\n\tfunction getStakers() external view returns (address[] memory);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WCADAOLocking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WWCA\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WCADAOLocking\",\"outputs\":[{\"internalType\":\"contract IWCADAOLocking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WWCA\",\"outputs\":[{\"internalType\":\"contract IWWCA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysX4\",\"type\":\"uint256\"}],\"name\":\"calcTotalAverageWWCA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WCADAOLocking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WWCA\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WCACalcTotalAverageWWCA", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000edf4574e5cff6afcd7e2d640dfc2ef8f6219a6d0000000000000000000000005c3a473a7babdbe8aec101338d219869eeb524f3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de6d792fc3e8c5886e870a44328d527cdf173c5b2a8d5dacfc83ef0be6019e69"}