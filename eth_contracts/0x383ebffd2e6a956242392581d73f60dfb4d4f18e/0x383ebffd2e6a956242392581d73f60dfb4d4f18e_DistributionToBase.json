{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solarity/solidity-lib/utils/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nuint256 constant PRECISION = 10 ** 25;\\nuint256 constant DECIMAL = 10 ** 18;\\nuint256 constant PERCENTAGE_100 = 10 ** 27;\\n\"\r\n    },\r\n    \"contracts/interfaces/L1/IDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * This is Distribution contract that stores all the pools and users data.\\n * It is used to calculate the user's rewards and operate with overpluses.\\n */\\ninterface IDistribution {\\n    /**\\n     * The structure that stores the core pool's data.\\n     * @param payoutStart The timestamp when the pool starts to pay out rewards.\\n     * @param decreaseInterval The interval in seconds between reward decreases.\\n     * @param withdrawLockPeriod The period in seconds when the user can't withdraw his stake.\\n     * @param withdrawLockPeriodAfterStake The period in seconds when the user can't withdraw his stake after staking.\\n     * @param claimLockPeriod The period in seconds when the user can't claim his rewards.\\n     * @param initialReward The initial reward per interval.\\n     * @param rewardDecrease The reward decrease per interval.\\n     * @param minimalStake The minimal stake amount.\\n     * @param isPublic The flag that indicates if the pool is public.\\n     */\\n    struct Pool {\\n        uint128 payoutStart;\\n        uint128 decreaseInterval;\\n        uint128 withdrawLockPeriod;\\n        uint128 claimLockPeriod;\\n        uint128 withdrawLockPeriodAfterStake;\\n        uint256 initialReward;\\n        uint256 rewardDecrease;\\n        uint256 minimalStake;\\n        bool isPublic;\\n    }\\n\\n    /**\\n     * The structure that stores the pool's rate data.\\n     * @param lastUpdate The timestamp when the pool was updated.\\n     * @param rate The current reward rate.\\n     * @param totalDeposited The total amount of tokens deposited in the pool.\\n     */\\n    struct PoolData {\\n        uint128 lastUpdate;\\n        uint256 rate;\\n        uint256 totalDeposited;\\n    }\\n\\n    /**\\n     * The structure that stores the user's rate data of pool.\\n     * @param lastStake The timestamp when the user last staked tokens.\\n     * @param deposited The amount of tokens deposited in the pool.\\n     * @param rate The current reward rate.\\n     * @param pendingRewards The amount of pending rewards.\\n     */\\n    struct UserData {\\n        uint128 lastStake;\\n        uint256 deposited;\\n        uint256 rate;\\n        uint256 pendingRewards;\\n    }\\n\\n    /**\\n     * The event that is emitted when the pool is created.\\n     * @param poolId The pool's id.\\n     * @param pool The pool's data.\\n     */\\n    event PoolCreated(uint256 indexed poolId, Pool pool);\\n\\n    /**\\n     * The event that is emitted when the pool is edited.\\n     * @param poolId The pool's id.\\n     * @param pool The pool's data.\\n     */\\n    event PoolEdited(uint256 indexed poolId, Pool pool);\\n\\n    /**\\n     * The event that is emitted when the user stakes tokens in the pool.\\n     * @param poolId The pool's id.\\n     * @param user The user's address.\\n     * @param amount The amount of tokens.\\n     */\\n    event UserStaked(uint256 indexed poolId, address indexed user, uint256 amount);\\n\\n    /**\\n     * The event that is emitted when the user claims rewards from the pool.\\n     * @param poolId The pool's id.\\n     * @param user The user's address.\\n     * @param receiver The receiver's address.\\n     * @param amount The amount of tokens.\\n     */\\n    event UserClaimed(uint256 indexed poolId, address indexed user, address receiver, uint256 amount);\\n\\n    /**\\n     * The event that is emitted when the user withdraws tokens from the pool.\\n     * @param poolId The pool's id.\\n     * @param user The user's address.\\n     * @param amount The amount of tokens.\\n     */\\n    event UserWithdrawn(uint256 indexed poolId, address indexed user, uint256 amount);\\n\\n    /**\\n     * The event that is emitted when the overplus of the deposit tokens is bridged to the Arbitrum network.\\n     * @param amount The amount of tokens.\\n     * @param uniqueId The unique identifier for bridge.\\n     */\\n    event OverplusBridgedToArb(uint256 amount, bytes uniqueId);\\n\\n    /**\\n     * The event that is emitted when the overplus of the deposit tokens is bridged to the Base network.\\n     * @param amount The amount of tokens.\\n     * @param bridgeData_ The additional data for the bridge.\\n     */\\n    event OverplusBridgedToBase(uint256 amount, bytes bridgeData_);\\n\\n    /**\\n     * The function to create a new pool.\\n     * @param pool_ The pool's data.\\n     */\\n    function createPool(Pool calldata pool_) external;\\n\\n    /**\\n     * The function to calculate the total pool's reward for the specified period.\\n     * @param poolId_ The pool's id.\\n     * @param startTime_ The start timestamp.\\n     * @param endTime_ The end timestamp.\\n     * @return The total reward amount.\\n     */\\n    function getPeriodReward(uint256 poolId_, uint128 startTime_, uint128 endTime_) external view returns (uint256);\\n\\n    /**\\n     * The function to manage users and their rate in the private pool.\\n     * @param poolId_ The pool's id.\\n     * @param users_ The array of users.\\n     * @param amounts_ The array of amounts.\\n     */\\n    function manageUsersInPrivatePool(uint256 poolId_, address[] calldata users_, uint256[] calldata amounts_) external;\\n\\n    /**\\n     * The function to stake tokens in the public pool.\\n     * @param poolId_ The pool's id.\\n     * @param amount_ The amount of tokens to stake.\\n     */\\n    function stake(uint256 poolId_, uint256 amount_) external;\\n\\n    /**\\n     * The function to claim rewards from the pool.\\n     * @param poolId_ The pool's id.\\n     * @param receiver_ The receiver's address.\\n     */\\n    function claim(uint256 poolId_, address receiver_) external payable;\\n\\n    /**\\n     * The function to withdraw tokens from the pool.\\n     * @param poolId_ The pool's id.\\n     * @param amount_ The amount of tokens to withdraw.\\n     */\\n    function withdraw(uint256 poolId_, uint256 amount_) external;\\n\\n    /**\\n     * The function to get the user's reward for the specified pool.\\n     * @param poolId_ The pool's id.\\n     * @param user_ The user's address.\\n     * @return The user's reward amount.\\n     */\\n    function getCurrentUserReward(uint256 poolId_, address user_) external view returns (uint256);\\n\\n    /**\\n     * The function to calculate the total overplus of the staked deposit tokens.\\n     * @return The total overplus amount.\\n     */\\n    function overplus() external view returns (uint256);\\n\\n    /**\\n     * The function to get the address of deposit token.\\n     * @return The address of deposit token.\\n     */\\n    function depositToken() external view returns (address);\\n\\n    /**\\n     * The function to get the address of bridge contract.\\n     * @return The address of bridge contract.\\n     */\\n    function l1Sender() external view returns (address);\\n\\n    /**\\n     * The function to get the amount of deposit tokens that are staked in all of the public pools.\\n     * @dev The value accumulates the amount amount despite the rate differences.\\n     * @return The amount of deposit tokens.\\n     */\\n    function totalDepositedInPublicPools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/L1/IDistributionToBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IDistribution} from \\\"./IDistribution.sol\\\";\\n\\n/**\\n * This contract used to bridge overplus to Arbitrum network.\\n */\\ninterface IDistributionToBase is IDistribution {\\n    /**\\n     * The function to initialize the contract.\\n     * @param depositToken_ The address of deposit token.\\n     * @param l1Sender_ The address of bridge contract.\\n     * @param feeConfig_ The address of fee config contract.\\n     * @param poolsInfo_ The array of initial pools.\\n     */\\n    function DistributionToBase_init(\\n        address depositToken_,\\n        address l1Sender_,\\n        address feeConfig_,\\n        Pool[] calldata poolsInfo_\\n    ) external;\\n\\n    /**\\n     * The function to bridge the overplus of the staked deposit tokens to the Base network.\\n     * @param gasLimit_ The gas limit.\\n     * @param data_ The additional data for the bridge.\\n     */\\n    function bridgeOverplus(uint24 gasLimit_, bytes memory data_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/L1/IFeeConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * This is FeeConfig contract that stores all the fees and treasury data.\\n */\\ninterface IFeeConfig {\\n    /**\\n     * The function that initializes the contract.\\n     * @param treasury_ The treasury address.\\n     * @param baseFee_ The base fee.\\n     */\\n    function FeeConfig_init(address treasury_, uint256 baseFee_) external;\\n\\n    /**\\n     * The function that returns the treasury address.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * The function that returns the base fee.\\n     */\\n    function baseFee() external view returns (uint256);\\n\\n    /**\\n     * The function that returns the fee for the sender.\\n     * @dev If the fee is 0, the base fee is used.\\n     */\\n    function fees(address sender_) external view returns (uint256);\\n\\n    /**\\n     * The function that returns the fee and treasury address for the sender.\\n     */\\n    function getFeeAndTreasury(address sender_) external view returns (uint256, address);\\n\\n    /**\\n     * The function that sets the fee for the sender.\\n     */\\n    function setFee(address sender_, uint256 fee_) external;\\n\\n    /**\\n     * The function that sets the treasury address.\\n     */\\n    function setTreasury(address treasury_) external;\\n\\n    /**\\n     * The function that sets the base fee.\\n     */\\n    function setBaseFee(uint256 baseFee_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/L1/IL1BaseSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IL1Sender} from \\\"./IL1Sender.sol\\\";\\n\\ninterface IL1BaseSender is IL1Sender {\\n    /**\\n     * The structure that stores the deposit token's data (stETH).\\n     * @param gateway The address of bridge gateway.\\n     * @param l1Token The address of wrapped deposit token on the L1.\\n     * @param l2Token The address of wrapped deposit token on the L2.\\n     * @param receiver The address of wrapped token's receiver on L2.\\n     */\\n    struct DepositTokenConfig {\\n        address gateway;\\n        address l1Token;\\n        address l2Token;\\n        address receiver;\\n    }\\n\\n    /**\\n     * The function to initialize the contract.\\n     * @param distribution_ The address of the distribution contract.\\n     * @param rewardTokenConfig_ The reward token's config.\\n     * @param depositTokenConfig_ The deposit token's config.\\n     */\\n    function L1BaseSender__init(\\n        address distribution_,\\n        RewardTokenConfig calldata rewardTokenConfig_,\\n        DepositTokenConfig calldata depositTokenConfig_\\n    ) external;\\n\\n    /**\\n     * The function to set the deposit token to the L2.\\n     * @param gasLimit_ The gas limit for the transaction on the L2.\\n     * @param data_ The additional data for the bridge.\\n     */\\n    function sendDepositToken(uint32 gasLimit_, bytes calldata data_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/L1/IL1Sender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ninterface IL1Sender is IERC165 {\\n    /**\\n     * The structure that stores the reward token's data.\\n     * @param gateway The address of token's gateway.\\n     * @param receiver The address of token's receiver on L2.\\n     * @param receiverChainId The chain id of receiver.\\n     * @param zroPaymentAddress The address of ZKSync payment contract.\\n     * @param adapterParams The parameters for the adapter.\\n     */\\n    struct RewardTokenConfig {\\n        address gateway;\\n        address receiver;\\n        uint16 receiverChainId;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * The function to get the deposit token's address.\\n     */\\n    function unwrappedDepositToken() external view returns (address);\\n\\n    /**\\n     * The function to send the message of mint of reward token to the L2.\\n     * @param user_ The user's address to mint reward tokens.\\n     * @param amount_ The amount of reward tokens to mint.\\n     * @param refundTo_ The address to refund the overpaid gas.\\n     */\\n    function sendMintMessage(address user_, uint256 amount_, address refundTo_) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/L1/Distribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {PRECISION} from \\\"@solarity/solidity-lib/utils/Globals.sol\\\";\\n\\nimport {LinearDistributionIntervalDecrease} from \\\"../libs/LinearDistributionIntervalDecrease.sol\\\";\\n\\nimport {IDistribution} from \\\"../interfaces/L1/IDistribution.sol\\\";\\nimport {IFeeConfig} from \\\"../interfaces/L1/IFeeConfig.sol\\\";\\nimport {IL1Sender} from \\\"../interfaces/L1/IL1Sender.sol\\\";\\n\\nabstract contract Distribution is IDistribution, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    address public depositToken;\\n    address public l1Sender;\\n    address public feeConfig;\\n\\n    // Pool storage\\n    Pool[] public pools;\\n    mapping(uint256 => PoolData) public poolsData;\\n\\n    // User storage\\n    mapping(address => mapping(uint256 => UserData)) public usersData;\\n\\n    // Total deposited storage\\n    uint256 public totalDepositedInPublicPools;\\n\\n    /**********************************************************************************************/\\n    /*** Modifiers                                                                              ***/\\n    /**********************************************************************************************/\\n    modifier poolExists(uint256 poolId_) {\\n        require(_poolExists(poolId_), \\\"DS: pool doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier poolPublic(uint256 poolId_) {\\n        require(pools[poolId_].isPublic, \\\"DS: pool isn't public\\\");\\n        _;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Init                                                                                   ***/\\n    /**********************************************************************************************/\\n\\n    function __Distribution_init(\\n        address depositToken_,\\n        address l1Sender_,\\n        address feeConfig_,\\n        Pool[] calldata poolsInfo_\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n\\n        for (uint256 i; i < poolsInfo_.length; ++i) {\\n            createPool(poolsInfo_[i]);\\n        }\\n\\n        depositToken = depositToken_;\\n        l1Sender = l1Sender_;\\n        feeConfig = feeConfig_;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Pool management and data retrieval                                                     ***/\\n    /**********************************************************************************************/\\n    function createPool(Pool calldata pool_) public onlyOwner {\\n        require(pool_.payoutStart > block.timestamp, \\\"DS: invalid payout start value\\\");\\n\\n        _validatePool(pool_);\\n        pools.push(pool_);\\n\\n        emit PoolCreated(pools.length - 1, pool_);\\n    }\\n\\n    function getPeriodReward(uint256 poolId_, uint128 startTime_, uint128 endTime_) public view returns (uint256) {\\n        if (!_poolExists(poolId_)) {\\n            return 0;\\n        }\\n\\n        Pool storage pool = pools[poolId_];\\n\\n        return\\n            LinearDistributionIntervalDecrease.getPeriodReward(\\n                pool.initialReward,\\n                pool.rewardDecrease,\\n                pool.payoutStart,\\n                pool.decreaseInterval,\\n                startTime_,\\n                endTime_\\n            );\\n    }\\n\\n    function _validatePool(Pool calldata pool_) private pure {\\n        require(pool_.decreaseInterval > 0, \\\"DS: invalid decrease interval\\\");\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** User management in private pools                                                       ***/\\n    /**********************************************************************************************/\\n    function manageUsersInPrivatePool(\\n        uint256 poolId_,\\n        address[] calldata users_,\\n        uint256[] calldata amounts_\\n    ) external onlyOwner poolExists(poolId_) {\\n        require(!pools[poolId_].isPublic, \\\"DS: pool is public\\\");\\n        require(users_.length == amounts_.length, \\\"DS: invalid length\\\");\\n\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n\\n        for (uint256 i; i < users_.length; ++i) {\\n            address user_ = users_[i];\\n            uint256 amount_ = amounts_[i];\\n\\n            uint256 deposited_ = usersData[user_][poolId_].deposited;\\n\\n            if (deposited_ < amount_) {\\n                _stake(user_, poolId_, amount_ - deposited_, currentPoolRate_);\\n            } else if (deposited_ > amount_) {\\n                _withdraw(user_, poolId_, deposited_ - amount_, currentPoolRate_);\\n            }\\n        }\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Stake, claim, withdraw                                                                 ***/\\n    /**********************************************************************************************/\\n    function stake(uint256 poolId_, uint256 amount_) external poolExists(poolId_) poolPublic(poolId_) {\\n        _stake(_msgSender(), poolId_, amount_, _getCurrentPoolRate(poolId_));\\n    }\\n\\n    function claim(uint256 poolId_, address receiver_) external payable poolExists(poolId_) {\\n        address user_ = _msgSender();\\n\\n        Pool storage pool = pools[poolId_];\\n        PoolData storage poolData = poolsData[poolId_];\\n        UserData storage userData = usersData[user_][poolId_];\\n\\n        require(block.timestamp > pool.payoutStart + pool.claimLockPeriod, \\\"DS: pool claim is locked\\\");\\n\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n        uint256 pendingRewards_ = _getCurrentUserReward(currentPoolRate_, userData);\\n        require(pendingRewards_ > 0, \\\"DS: nothing to claim\\\");\\n\\n        // Update pool data\\n        poolData.lastUpdate = uint128(block.timestamp);\\n        poolData.rate = currentPoolRate_;\\n\\n        // Update user data\\n        userData.rate = currentPoolRate_;\\n        userData.pendingRewards = 0;\\n\\n        // Transfer rewards\\n        IL1Sender(l1Sender).sendMintMessage{value: msg.value}(receiver_, pendingRewards_, user_);\\n\\n        emit UserClaimed(poolId_, user_, receiver_, pendingRewards_);\\n    }\\n\\n    function withdraw(uint256 poolId_, uint256 amount_) external poolExists(poolId_) poolPublic(poolId_) {\\n        _withdraw(_msgSender(), poolId_, amount_, _getCurrentPoolRate(poolId_));\\n    }\\n\\n    function getCurrentUserReward(uint256 poolId_, address user_) external view returns (uint256) {\\n        if (!_poolExists(poolId_)) {\\n            return 0;\\n        }\\n\\n        UserData storage userData = usersData[user_][poolId_];\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n\\n        return _getCurrentUserReward(currentPoolRate_, userData);\\n    }\\n\\n    function _stake(address user_, uint256 poolId_, uint256 amount_, uint256 currentPoolRate_) private {\\n        require(amount_ > 0, \\\"DS: nothing to stake\\\");\\n\\n        Pool storage pool = pools[poolId_];\\n        PoolData storage poolData = poolsData[poolId_];\\n        UserData storage userData = usersData[user_][poolId_];\\n\\n        if (pool.isPublic) {\\n            // https://docs.lido.fi/guides/lido-tokens-integration-guide/#steth-internals-share-mechanics\\n            uint256 balanceBefore_ = IERC20(depositToken).balanceOf(address(this));\\n            IERC20(depositToken).safeTransferFrom(_msgSender(), address(this), amount_);\\n            uint256 balanceAfter_ = IERC20(depositToken).balanceOf(address(this));\\n\\n            amount_ = balanceAfter_ - balanceBefore_;\\n\\n            require(userData.deposited + amount_ >= pool.minimalStake, \\\"DS: amount too low\\\");\\n\\n            totalDepositedInPublicPools += amount_;\\n        }\\n\\n        userData.pendingRewards = _getCurrentUserReward(currentPoolRate_, userData);\\n\\n        // Update pool data\\n        poolData.lastUpdate = uint128(block.timestamp);\\n        poolData.rate = currentPoolRate_;\\n        poolData.totalDeposited += amount_;\\n\\n        // Update user data\\n        userData.lastStake = uint128(block.timestamp);\\n        userData.rate = currentPoolRate_;\\n        userData.deposited += amount_;\\n\\n        emit UserStaked(poolId_, user_, amount_);\\n    }\\n\\n    function _withdraw(address user_, uint256 poolId_, uint256 amount_, uint256 currentPoolRate_) private {\\n        Pool storage pool = pools[poolId_];\\n        PoolData storage poolData = poolsData[poolId_];\\n        UserData storage userData = usersData[user_][poolId_];\\n\\n        uint256 deposited_ = userData.deposited;\\n        require(deposited_ > 0, \\\"DS: user isn't staked\\\");\\n\\n        if (amount_ > deposited_) {\\n            amount_ = deposited_;\\n        }\\n\\n        uint256 newDeposited_;\\n        if (pool.isPublic) {\\n            require(\\n                block.timestamp < pool.payoutStart ||\\n                    (block.timestamp > pool.payoutStart + pool.withdrawLockPeriod &&\\n                        block.timestamp > userData.lastStake + pool.withdrawLockPeriodAfterStake),\\n                \\\"DS: pool withdraw is locked\\\"\\n            );\\n\\n            uint256 depositTokenContractBalance_ = IERC20(depositToken).balanceOf(address(this));\\n            if (amount_ > depositTokenContractBalance_) {\\n                amount_ = depositTokenContractBalance_;\\n            }\\n\\n            newDeposited_ = deposited_ - amount_;\\n\\n            require(amount_ > 0, \\\"DS: nothing to withdraw\\\");\\n            require(newDeposited_ >= pool.minimalStake || newDeposited_ == 0, \\\"DS: invalid withdraw amount\\\");\\n        } else {\\n            newDeposited_ = deposited_ - amount_;\\n        }\\n\\n        uint256 pendingRewards_ = _getCurrentUserReward(currentPoolRate_, userData);\\n\\n        // Update pool data\\n        poolData.lastUpdate = uint128(block.timestamp);\\n        poolData.rate = currentPoolRate_;\\n        poolData.totalDeposited -= amount_;\\n\\n        // Update user data\\n        userData.rate = currentPoolRate_;\\n        userData.deposited = newDeposited_;\\n        userData.pendingRewards = pendingRewards_;\\n\\n        if (pool.isPublic) {\\n            totalDepositedInPublicPools -= amount_;\\n\\n            IERC20(depositToken).safeTransfer(user_, amount_);\\n        }\\n\\n        emit UserWithdrawn(poolId_, user_, amount_);\\n    }\\n\\n    function _getCurrentUserReward(uint256 currentPoolRate_, UserData memory userData_) private pure returns (uint256) {\\n        uint256 newRewards_ = ((currentPoolRate_ - userData_.rate) * userData_.deposited) / PRECISION;\\n\\n        return userData_.pendingRewards + newRewards_;\\n    }\\n\\n    function _getCurrentPoolRate(uint256 poolId_) private view returns (uint256) {\\n        PoolData storage poolData = poolsData[poolId_];\\n\\n        if (poolData.totalDeposited == 0) {\\n            return poolData.rate;\\n        }\\n\\n        uint256 rewards_ = getPeriodReward(poolId_, poolData.lastUpdate, uint128(block.timestamp));\\n\\n        return poolData.rate + (rewards_ * PRECISION) / poolData.totalDeposited;\\n    }\\n\\n    function _poolExists(uint256 poolId_) private view returns (bool) {\\n        return poolId_ < pools.length;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Bridge                                                                                 ***/\\n    /**********************************************************************************************/\\n\\n    function overplus() public view returns (uint256) {\\n        uint256 depositTokenContractBalance_ = IERC20(depositToken).balanceOf(address(this));\\n        if (depositTokenContractBalance_ <= totalDepositedInPublicPools) {\\n            return 0;\\n        }\\n\\n        return depositTokenContractBalance_ - totalDepositedInPublicPools;\\n    }\\n\\n    function _bridgeOverplus() internal returns (uint256) {\\n        uint256 overplus_ = overplus();\\n        require(overplus_ > 0, \\\"DS: overplus is zero\\\");\\n\\n        (uint256 feePercent_, address treasuryAddress_) = IFeeConfig(feeConfig).getFeeAndTreasury(address(this));\\n\\n        uint256 fee_ = (overplus_ * feePercent_) / PRECISION;\\n        if (fee_ != 0) {\\n            IERC20(depositToken).safeTransfer(treasuryAddress_, fee_);\\n\\n            overplus_ -= fee_;\\n        }\\n\\n        IERC20(depositToken).safeTransfer(l1Sender, overplus_);\\n\\n        return overplus_;\\n    }\\n\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/L1/DistributionToBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Distribution} from \\\"./Distribution.sol\\\";\\n\\nimport {IDistributionToBase} from \\\"../interfaces/L1/IDistributionToBase.sol\\\";\\nimport {IL1BaseSender} from \\\"../interfaces/L1/IL1BaseSender.sol\\\";\\n\\ncontract DistributionToBase is IDistributionToBase, Distribution {\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function DistributionToBase_init(\\n        address depositToken_,\\n        address l1Sender_,\\n        address feeConfig_,\\n        Pool[] calldata poolsInfo_\\n    ) external initializer {\\n        __Distribution_init(depositToken_, l1Sender_, feeConfig_, poolsInfo_);\\n    }\\n\\n    function bridgeOverplus(uint24 gasLimit_, bytes memory data_) external onlyOwner {\\n        uint256 overplus_ = _bridgeOverplus();\\n\\n        IL1BaseSender(l1Sender).sendDepositToken(gasLimit_, data_);\\n\\n        emit OverplusBridgedToBase(overplus_, data_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LinearDistributionIntervalDecrease.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * This is the library that calculates the reward for the period with linear distribution and interval decrease.\\n * Supports the constant reward amount (decreaseAmount_ = 0)\\n */\\nlibrary LinearDistributionIntervalDecrease {\\n    /**\\n     * The function to calculate the reward for the period.\\n     * @param initialAmount_ The initial reward amount.\\n     * @param decreaseAmount_ The reward decrease amount.\\n     * @param payoutStart_ The timestamp when the period starts to pay out rewards.\\n     * @param interval_ The interval in seconds between reward decreases.\\n     * @param startTime_ The timestamp when the period starts.\\n     * @param endTime_ The timestamp when the period ends.\\n     * @return The reward amount.\\n     */\\n    function getPeriodReward(\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_,\\n        uint128 payoutStart_,\\n        uint128 interval_,\\n        uint128 startTime_,\\n        uint128 endTime_\\n    ) external pure returns (uint256) {\\n        if (interval_ == 0) {\\n            return 0;\\n        }\\n\\n        // 'startTime_' can't be less than 'payoutStart_'\\n        if (startTime_ < payoutStart_) {\\n            startTime_ = payoutStart_;\\n        }\\n\\n        uint128 maxEndTime_ = _calculateMaxEndTime(payoutStart_, interval_, initialAmount_, decreaseAmount_);\\n\\n        if (endTime_ > maxEndTime_) {\\n            endTime_ = maxEndTime_;\\n        }\\n\\n        // Return 0 when calculation 'startTime_' is bigger then 'endTime_'...\\n        if (startTime_ >= endTime_) {\\n            return 0;\\n        }\\n\\n        // Calculate interval that less then 'interval_' range\\n        uint256 timePassedBefore_ = startTime_ - payoutStart_;\\n        if ((timePassedBefore_ / interval_) == ((endTime_ - payoutStart_) / interval_)) {\\n            uint256 intervalsPassed_ = timePassedBefore_ / interval_;\\n            uint256 intervalFullReward_ = initialAmount_ - intervalsPassed_ * decreaseAmount_;\\n\\n            return (intervalFullReward_ * (endTime_ - startTime_)) / interval_;\\n        }\\n\\n        // Calculate interval that more then 'interval_' range\\n        uint256 firstPeriodReward_ = _calculatePartPeriodReward(\\n            payoutStart_,\\n            startTime_,\\n            interval_,\\n            initialAmount_,\\n            decreaseAmount_,\\n            true\\n        );\\n\\n        uint256 secondPeriodReward_ = _calculateFullPeriodReward(\\n            payoutStart_,\\n            startTime_,\\n            endTime_,\\n            interval_,\\n            initialAmount_,\\n            decreaseAmount_\\n        );\\n\\n        uint256 thirdPeriodReward_ = _calculatePartPeriodReward(\\n            payoutStart_,\\n            endTime_,\\n            interval_,\\n            initialAmount_,\\n            decreaseAmount_,\\n            false\\n        );\\n\\n        return firstPeriodReward_ + secondPeriodReward_ + thirdPeriodReward_;\\n    }\\n\\n    function _calculateMaxEndTime(\\n        uint128 payoutStart_,\\n        uint128 interval_,\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_\\n    ) private pure returns (uint128) {\\n        if (decreaseAmount_ == 0) {\\n            return type(uint128).max;\\n        }\\n\\n        uint256 maxIntervals_ = _divideCeil(initialAmount_, decreaseAmount_);\\n\\n        return uint128(payoutStart_ + maxIntervals_ * interval_);\\n    }\\n\\n    function _calculatePartPeriodReward(\\n        uint128 payoutStart_,\\n        uint128 startTime_,\\n        uint128 interval_,\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_,\\n        bool toEnd_\\n    ) private pure returns (uint256) {\\n        uint256 intervalsPassed_ = (startTime_ - payoutStart_) / interval_;\\n        uint256 decreaseRewardAmount_ = intervalsPassed_ * decreaseAmount_;\\n        if (decreaseRewardAmount_ >= initialAmount_) {\\n            return 0;\\n        }\\n        uint256 intervalFullReward_ = initialAmount_ - decreaseRewardAmount_;\\n\\n        uint256 intervalPart_;\\n        if (toEnd_) {\\n            intervalPart_ = interval_ * (intervalsPassed_ + 1) + payoutStart_ - startTime_;\\n        } else {\\n            intervalPart_ = startTime_ - interval_ * intervalsPassed_ - payoutStart_;\\n        }\\n\\n        if (intervalPart_ == interval_) {\\n            return 0;\\n        }\\n\\n        return (intervalFullReward_ * intervalPart_) / interval_;\\n    }\\n\\n    function _calculateFullPeriodReward(\\n        uint128 payoutStart_,\\n        uint128 startTime_,\\n        uint128 endTime_,\\n        uint128 interval_,\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_\\n    ) private pure returns (uint256) {\\n        // START calculate initial reward when period start\\n        uint256 timePassedBefore_ = startTime_ - payoutStart_;\\n        uint256 intervalsPassedBefore_ = _divideCeil(timePassedBefore_, interval_);\\n\\n        uint256 decreaseRewardAmount_ = intervalsPassedBefore_ * decreaseAmount_;\\n\\n        if (decreaseRewardAmount_ >= initialAmount_) {\\n            return 0;\\n        }\\n\\n        uint256 initialReward_ = initialAmount_ - decreaseRewardAmount_;\\n        // END\\n\\n        // Intervals passed\\n        uint256 ip_ = ((endTime_ - payoutStart_ - intervalsPassedBefore_ * interval_) / interval_);\\n        if (ip_ == 0) {\\n            return 0;\\n        }\\n\\n        return initialReward_ * ip_ - (decreaseAmount_ * (ip_ * (ip_ - 1))) / 2;\\n    }\\n\\n    function _divideCeil(uint256 a_, uint256 b_) private pure returns (uint256) {\\n        return (a_ + b_ - 1) / b_;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libs/LinearDistributionIntervalDecrease.sol\": {\r\n        \"LinearDistributionIntervalDecrease\": \"0x9cbceaeb45e566a95a4a755b1a526874163d41c7\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"uniqueId\",\"type\":\"bytes\"}],\"name\":\"OverplusBridgedToArb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeData_\",\"type\":\"bytes\"}],\"name\":\"OverplusBridgedToBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeConfig_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IDistribution.Pool[]\",\"name\":\"poolsInfo_\",\"type\":\"tuple[]\"}],\"name\":\"DistributionToBase_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"gasLimit_\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"bridgeOverplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool_\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getCurrentUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"startTime_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime_\",\"type\":\"uint128\"}],\"name\":\"getPeriodReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"manageUsersInPrivatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastUpdate\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedInPublicPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DistributionToBase", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}