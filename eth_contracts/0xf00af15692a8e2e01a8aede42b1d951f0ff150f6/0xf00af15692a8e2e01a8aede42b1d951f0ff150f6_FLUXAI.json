{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-04-23\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n//Flux AI - reshaping the future of silicon\r\n\r\n//Website: https://flux.ai/\r\n//Telegram - https://t.me/fluxxai\r\n\r\n\r\npragma solidity 0.8.25;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface InterfaceLP {}\r\n\r\ncontract FLUXAI is Ownable, ERC20 {\r\n\r\n    address WETH;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"Flux AI\";\r\n    string constant _symbol = \"FLUX\";\r\n    uint8 constant _decimals = 18; \r\n  \r\n\r\n    uint256 _totalSupply = 1e8 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount = 1e6 * 10**_decimals;\r\n    uint256 public _maxWalletAmount = 2e6 * 10**_decimals;\r\n    uint256 public swapThreshold = 5e5 * 10**_decimals;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    \r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    uint256 public  buyFee = 30;\r\n    uint256 public  sellFee = 30;\r\n    uint256 private transferFee = 0;\r\n    \r\n    uint256 private lastSwap;\r\n    uint256 private tradingStartTime;\r\n\r\n    address private marketingFeeReceiver;\r\n    address private devFeeReceiver;\r\n    address private infrastructureFeeReceiver;\r\n\r\n    struct TaxRatio {\r\n       uint256 marketing;\r\n       uint256 dev;\r\n       uint256 infrastructure;\r\n    }\r\n\r\n    TaxRatio public taxBreakdown = TaxRatio(40, 30, 30);\r\n    TaxRatio private taxRatio;\r\n\r\n    IDEXRouter public router;\r\n    InterfaceLP private pairContract;\r\n    address public pair;\r\n    \r\n    bool public TradingOpen = false;    \r\n\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    event maxWalletUpdated(uint256 indexed maxWalletAmount);\r\n    event maxTxUpdated(uint256 indexed maxTxAmount);\r\n    event maxLimitsRemoved(uint256 indexed maxWalletToken, uint256 indexed maxTxAmount);\r\n    event exemptFees(address indexed holder, bool indexed exempt);\r\n    event exemptTxLimit(address indexed holder, bool indexed exempt);\r\n    event feesUpdated(uint256 indexed buyFee, uint256 indexed sellFee);\r\n    event feesWalletsUpdated(address indexed marketingFeeReceiver, address indexed devFeeReceiver, address indexed infrastructureFeeReceiver);\r\n    event swapbackSettingsUpdated(bool indexed enabled, uint256 indexed amount);\r\n    event tradingEnabled(bool indexed enabled, uint256 indexed startTime , uint256 indexed lastTokenSwap);\r\n    \r\n    constructor () {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        pairContract = InterfaceLP(pair);\r\n       \r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        marketingFeeReceiver = 0xeA5CeC7Ca2be0cc72Bd3608F01d99757eDEdEEB8;\r\n        devFeeReceiver = 0x1337cEdE27964b91bD47bee8827cbA32db351337;\r\n        infrastructureFeeReceiver = 0x08b96bDA04Ff9f7E119F02e1ed767c6C467A01D7;\r\n\r\n        isFeeExempt[msg.sender] = true; \r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[devFeeReceiver] = true;\r\n        isTxLimitExempt[infrastructureFeeReceiver] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        \r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) {return owner();}\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if(currentAllowance != type(uint256).max){\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _allowances[sender][_msgSender()] = currentAllowance - amount;\r\n            }\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setMaxWallet(uint256 maxWalletAmount) external onlyOwner {\r\n        require(maxWalletAmount >= 1e6, \"Max wallet cannot be less than 1%.\");\r\n        _maxWalletAmount = maxWalletAmount * 10**_decimals;\r\n        emit maxWalletUpdated(_maxWalletAmount);       \r\n    }\r\n\r\n    function setMaxTx(uint256 maxTxAmount) external onlyOwner {\r\n        require(maxTxAmount >= 1e6, \"Max tx cannot be less than 1%.\" ); \r\n        _maxTxAmount = maxTxAmount * 10**_decimals;\r\n        emit maxTxUpdated(_maxTxAmount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(sender != owner()){\r\n            require(TradingOpen,\"Trading not open yet\");\r\n        \r\n           }\r\n       \r\n        if (sender != owner() || (recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && !isTxLimitExempt[recipient])){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletAmount,\"Total Holding is currently limited, you can not buy that much.\");}\r\n            \r\n       \r\n        checkTxLimit(sender, amount);\r\n\r\n        if(\r\n            lastSwap != block.number &&\r\n            _balances[address(this)] >= swapThreshold &&\r\n            swapEnabled &&\r\n            !inSwap &&\r\n            recipient == pair\r\n        ){ \r\n            swapBack();\r\n            lastSwap = block.number;\r\n            }\r\n        \r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n\r\n        uint256 amountReceived = (isFeeExempt[sender] || isFeeExempt[recipient]) ? amount : takeFee(sender, amount, recipient);\r\n        _balances[recipient] += amountReceived;\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"Tx Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, address recipient) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n\r\n        if(recipient == pair) {\r\n            feeAmount = (amount * sellFee) / 100;\r\n        } else if(sender == pair) {\r\n            feeAmount = (amount * buyFee) / 100;\r\n        }else{\r\n            feeAmount = (amount * transferFee) / 100;\r\n        }\r\n\r\n        _balances[address(this)] += feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        uint256 notFeeAmount = amount - feeAmount;\r\n\r\n        return notFeeAmount;\r\n    }\r\n\r\n    function removeMaxLimits() external onlyOwner { \r\n        _maxWalletAmount = _totalSupply;\r\n        _maxTxAmount = _totalSupply;\r\n        emit maxLimitsRemoved(_maxWalletAmount, _maxTxAmount);\r\n    }\r\n\r\n    function clearStuckToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool) {\r\n        require(address(tokenAddress) != address(this), \"Cannot withdraw Flux tokens\");\r\n        if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return ERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n\r\n    function startTrading() external onlyOwner {\r\n        require(!TradingOpen,\"Trading already Enabled.\");\r\n        TradingOpen = true;\r\n        tradingStartTime = block.timestamp;\r\n        lastSwap = block.number;\r\n        emit tradingEnabled(TradingOpen, tradingStartTime, lastSwap);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        if (block.timestamp < tradingStartTime + 10 minutes) {\r\n            taxRatio = TaxRatio(100, 0, 0);\r\n        }else {\r\n            taxRatio = taxBreakdown;\r\n        }\r\n\r\n        uint256 amountToSwap = swapThreshold;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 totalETHFee = address(this).balance;\r\n        uint256 marketingEthAmount = (totalETHFee * taxRatio.marketing) / 100;\r\n        uint256 devEthAmount = (totalETHFee * taxRatio.dev) / 100;\r\n        uint256 infrastructureEthAmount = totalETHFee - marketingEthAmount - devEthAmount;\r\n\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: marketingEthAmount}(\"\");\r\n        (tmpSuccess,) = payable(devFeeReceiver).call{value: devEthAmount}(\"\");\r\n        (tmpSuccess,) = payable(infrastructureFeeReceiver).call{value: infrastructureEthAmount}(\"\");\r\n        \r\n        tmpSuccess = false;\r\n\r\n    }\r\n\r\n    function exemptAll(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(0), \"Holder is the zero address\");\r\n        isFeeExempt[holder] = exempt;\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit exemptFees(holder, exempt);\r\n    }\r\n\r\n    function setTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(0), \"Holder is the zero address\");\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit exemptTxLimit(holder, exempt);\r\n    }\r\n\r\n    function updateFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        require( _buyFee <= 20 && _sellFee <= 20, \"Fees can not be more than 20%\"); \r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n        emit feesUpdated(buyFee, sellFee);\r\n    }\r\n\r\n    function updateFeeWallets( address _marketingFeeReceiver, address _devFeeReceiver, address _infrastructureFeeReceiver) external onlyOwner {\r\n        require(_marketingFeeReceiver != address(0) && _devFeeReceiver != address(0) && _infrastructureFeeReceiver != address(0), \"Fee receiver cannot be zero address\");\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n        infrastructureFeeReceiver = _infrastructureFeeReceiver;\r\n        emit feesWalletsUpdated(marketingFeeReceiver, devFeeReceiver, infrastructureFeeReceiver);\r\n    }\r\n\r\n    function editSwapbackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        require( _amount <= 1e6 && _amount >= 1e5, \"Swap amount can not be more than 1% or less than 0.1%\"); \r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount * 10**_decimals;\r\n        emit swapbackSettingsUpdated(_enabled, _amount);\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD)- balanceOf(ZERO);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"exemptFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"exemptTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"feesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFeeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"devFeeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"infrastructureFeeReceiver\",\"type\":\"address\"}],\"name\":\"feesWalletsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxWalletToken\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"maxLimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"maxTxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"maxWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapbackSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lastTokenSwap\",\"type\":\"uint256\"}],\"name\":\"tradingEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"editSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"exemptAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBreakdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"infrastructure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_infrastructureFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FLUXAI", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://df81d1a56f5c5bec10da49242649b44c476d7ef93ca31c45acc99580f06214d9"}