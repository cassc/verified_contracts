{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/*\r\n\r\n   _____                                __              _____  .___ \r\n  /     \\ _____     ____   ____   _____/  |______      /  _  \\ |   |\r\n /  \\ /  \\\\__  \\   / ___\\_/ __ \\ /    \\   __\\__  \\    /  /_\\  \\|   |\r\n/    Y    \\/ __ \\_/ /_/  >  ___/|   |  \\  |  / __ \\_ /    |    \\   |\r\n\\____|__  (____  /\\___  / \\___  >___|  /__| (____  / \\____|__  /___|\r\n        \\/     \\//_____/      \\/     \\/          \\/          \\/     \r\n\r\nTwitter: https://twitter.com/MagentaProtocol\r\nWebsite: https://magentai.org/\r\nDocs:https://magentaai.gitbook.io/magenta-protocol/\r\nTelegram: https://t.me/magentaprotocol\r\nBot: https://t.me/MagentaAiBot\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = tx.origin;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n/// @title MagentaProtocol - A ERC-20 token with taxces\r\ncontract Magenta is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Payable fallback, so contract can receive ETH \r\n    receive() external payable {}\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                            events                               */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @dev Emmited when the tax is updated\r\n    event TaxUpdated(uint256 _oldTax, uint256 _newTax);\r\n    /// @dev Emmited when the taxed contract status is updated\r\n    event TaxedContractUpdated(address _contract, bool _isSwapContract);\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                            constants                            */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @dev The number of decimal places used by the token.\r\n    uint8 private constant _decimals = 18;\r\n    /// @dev The total amount of the token.\r\n    uint256 private constant _tTotal = 10_000_000 * 10**_decimals;\r\n\r\n    /// @dev Token name.\r\n    string private constant _name = unicode\"Magenta AI\";\r\n    /// @dev Token symbol.\r\n    string private constant _symbol = unicode\"MAGAI\";\r\n\r\n    /// @dev The threshold when collected tax will be swapped to ETH.\r\n    uint256 public _taxTradeThreshold = 5_000 * 10**_decimals;\r\n    /// @dev Greatest number of tokens to swap to ETH at once.\r\n    uint256 public _maxTaxSwap = 100_000 * 10**_decimals;\r\n    /// @dev Greatest amount that can be bought in a single transaction\r\n    uint256 public _maxTxAmount = 4_000 * 10**_decimals;\r\n    /// @dev Greatest amount an address can hold\r\n    uint256 public _maxAddressAmount = 4_000 * 10**_decimals;\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                            mappings                             */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @dev Balance of each address.\r\n    mapping (address => uint256) private _balances;\r\n    /// @dev Allowances one account has given to another.\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    /// @dev Whether an account is excluded from paying fees.\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    /// @dev Whether taxes are charged on transfers to/from an address (used for taxing dex trades).\r\n    mapping (address => bool) private _isTaxedContract;\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                            variables                            */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @dev Addresses that collect taxes.\r\n    address payable public _taxReceiver;\r\n    address payable public _taxReceiver2;\r\n    address payable public _taxReceiver3;\r\n\r\n    /// @dev Custom tax rate (it can be updated), the default tax rate is used if _customTax is 0.\r\n    uint256 public _customTax = 0;\r\n    /// @dev The block number when trading was started.\r\n    uint256 public tradingStartBlock;\r\n\r\n    /// @dev The Uniswap V2 Router used for tax token swaps.\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    /// @dev The Uniswap V2 Pair address for Magenta-ETH liquidity pool.\r\n    address public uniswapV2Pair;\r\n\r\n    /// @dev If trading is open and transfers are possible.\r\n    bool private tradingStarted;\r\n    /// @dev If currently in swap operation (to prevent reentrancy).\r\n    bool private inSwap;\r\n    /// @dev If automatic swapping of taxes to ETH is enabled.\r\n    bool private swapEnabled;\r\n    /// @dev If the maxTxAmount and maxAddressAmount limits are enabled.\r\n    bool public limitsEnabled = true;\r\n\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                   modifiers and constructor                     */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @dev Lock the swap during its execution (to prevent reentrancy).\r\n    modifier swapLock {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyOwnerOrTax {\r\n        require(_msgSender() == owner() || _msgSender() == _taxReceiver || _msgSender() == _taxReceiver2 || _msgSender() == _taxReceiver3, \"only owner or tax wallets\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Initializes contract\r\n    constructor () {\r\n        _balances[tx.origin] = _tTotal;\r\n\r\n        _taxReceiver = payable(0x7db9Be14B458D5fFD5770CfF9fA415e818dc23C3);  //40%\r\n        _taxReceiver2 = payable(0xC76be262eF9926273756E828c953373D69486181); //30%\r\n        _taxReceiver3 = payable(0x6F0C59171C9fABDc4F5291cAF7d9000a85E0a3Be); //30%\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxReceiver] = true;\r\n        _isExcludedFromFee[_taxReceiver2] = true;\r\n        _isExcludedFromFee[_taxReceiver3] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        _isTaxedContract[address(uniswapV2Router)] = true;\r\n        _isTaxedContract[uniswapV2Pair] = true;\r\n\r\n        emit Transfer(address(0), tx.origin, _tTotal);\r\n    }\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                     ERC-20 view functions                       */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                    standard ERC-20 functions                    */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 _taxAmt = 0;\r\n        if (from != owner() && to != owner()) {\r\n            require(tradingStarted, \"ERC20: Trading is not started yet\");\r\n\r\n            if (_isTaxedContract[from] && !_isExcludedFromFee[to] && limitsEnabled){\r\n                require(_balances[to].add(amount) <= _maxAddressAmount, \"Transfer amount exceeds the maxAddressAmount\");\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount\");\r\n            }\r\n               \r\n            if (_isTaxedContract[to] && from != address(this)){\r\n                _taxAmt = amount.mul(_calculateTaxAmount()).div(100);\r\n            } else if (_isTaxedContract[from]){\r\n                _taxAmt = amount.mul(_calculateTaxAmount()).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxTradeThreshold) {\r\n                swapToEth(_getMin(amount, _getMin(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    distributeEthToTaxWallets(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            _taxAmt = 0;\r\n        }\r\n\r\n        if (_taxAmt > 0){\r\n            _balances[address(this)] = _balances[address(this)].add(_taxAmt);\r\n            emit Transfer(from, address(this), _taxAmt);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(_taxAmt));\r\n        emit Transfer(from, to, amount.sub(_taxAmt));\r\n    }\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                         helper functions                        */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @dev Get the tax rate (using the difference between current block number and trading start block)\r\n    /// @return The current percentage tax rate \r\n    function _calculateTaxAmount() internal view returns (uint256) {\r\n        if (_customTax != 0) return _customTax;\r\n\r\n        if (block.number - tradingStartBlock <= 5) {\r\n            return 30;\r\n        } else if (block.number - tradingStartBlock <= 10) {\r\n            return 20;\r\n        } \r\n            \r\n        return 2;\r\n    }\r\n\r\n    /// @dev Function to return the smaller of two values\r\n    /// @param a The first value\r\n    /// @param b The second value\r\n    /// @return The smaller of the values\r\n    function _getMin(uint256 a, uint256 b) private pure returns (uint256){\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    /// @dev Swaps tokens to ETH on Uniswap\r\n    /// @param tokenAmount The token amount to swap for ETH\r\n    function swapToEth(uint256 tokenAmount) private swapLock {\r\n        if (!tradingStarted || tokenAmount == 0) return;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers ETH to the tax receiver addresses\r\n    /// @param amount The ETH amount to transfer\r\n    function distributeEthToTaxWallets(uint256 amount) private {\r\n        _taxReceiver.transfer(amount.mul(40).div(100));\r\n        _taxReceiver2.transfer(amount.mul(30).div(100));\r\n        _taxReceiver3.transfer(amount.mul(30).div(100));\r\n    }\r\n\r\n    /*-----------------------------------------------------------------*/\r\n    /*                         owner functions                         */\r\n    /*-----------------------------------------------------------------*/\r\n\r\n    /// @notice Swap tokens to ETH and sends the received ETH to the tax addresses\r\n    function manualSwap() external onlyOwnerOrTax {\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0){\r\n            swapToEth(tokenBalance);\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0){\r\n            distributeEthToTaxWallets(ethBalance);\r\n        }\r\n    }\r\n\r\n    /// @notice Start trading, enable swaps and transfers\r\n    function startTrading() external onlyOwner {\r\n        require(!tradingStarted, \"Trading is already open\");\r\n\r\n        swapEnabled = true;\r\n        tradingStarted = true;\r\n        tradingStartBlock = block.number;\r\n    }\r\n\r\n    /// @notice Update custom tax rate for token transfers\r\n    /// @param tax New tax rate as a percentage\r\n    function updateCustomTax(uint256 tax) external onlyOwner {\r\n        require(tax <= 50, \"Tax must be less than or equal to 50%\");\r\n        emit TaxUpdated(_customTax, tax);\r\n        _customTax = tax;\r\n    }\r\n\r\n    /// @notice Update address sttaus (if it's excluded from paying taxes on buys and sells)\r\n    function updateIsExcludedFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = !_isExcludedFromFee[account];\r\n    }\r\n\r\n    /// @notice Recovers tokens or ETH that was sent to the contract\r\n    function recoverTokensOrEth(address token, uint256 amount) external onlyOwnerOrTax {\r\n        if (token == address(0)){\r\n            (bool sent, bytes memory data) = payable(msg.sender).call{value: amount}(\"\");\r\n        } else {\r\n            IERC20(token).transfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Updates an address status (if it's recognized as a swap contract)\r\n    /// @param contractAddress The address to update\r\n    function updateTaxedContract(address contractAddress) external onlyOwnerOrTax {\r\n        _isTaxedContract[contractAddress] = !_isTaxedContract[contractAddress];\r\n        emit TaxedContractUpdated(contractAddress, _isTaxedContract[contractAddress]);\r\n    }\r\n\r\n    /// @notice Update status of automatic swaps of taxes to ETH \r\n    function updateSwapEnabled() external onlyOwnerOrTax {\r\n        swapEnabled = !swapEnabled;\r\n    }\r\n\r\n    /// @notice Updates the tax wallet addresses\r\n    function updateTaxWallet(address payable wallet, uint256 index) external onlyOwnerOrTax {\r\n        if (index == 1){\r\n            require(msg.sender == _taxReceiver, \"not valid\");\r\n            _taxReceiver = wallet;\r\n        } else if (index == 2){\r\n            require(msg.sender == _taxReceiver2, \"not valid\");\r\n            _taxReceiver2 = wallet;\r\n        } else if (index == 3){\r\n            require(msg.sender == _taxReceiver3, \"not valid\");\r\n            _taxReceiver3 = wallet;\r\n        }\r\n    }\r\n\r\n    /// @notice Updates the status of maxTxAmount and maxWalletAmount limits\r\n    function updateLimits() external onlyOwner {\r\n        limitsEnabled = !limitsEnabled;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"TaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSwapContract\",\"type\":\"bool\"}],\"name\":\"TaxedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_customTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxAddressAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxReceiver2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxReceiver3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxTradeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokensOrEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateCustomTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"updateTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"updateTaxedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Magenta", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee4a914f1b6db1dead6db52230b25402b8bf51e3ffffb0a0d396d5799e727088"}