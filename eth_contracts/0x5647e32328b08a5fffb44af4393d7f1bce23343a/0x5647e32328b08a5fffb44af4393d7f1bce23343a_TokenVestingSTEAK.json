{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.25;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\ncontract TokenVestingSTEAK is IERC20, Context, ReentrancyGuard {\r\n    IERC20 public constant tokenAddress =\r\n        IERC20(0xC4c244F1dbCA07083feE35220D2169957c275e68);\r\n    struct VestingSchedule {\r\n        bool initialized;\r\n        address beneficiary;\r\n        uint256 cliff;\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 slicePeriodSeconds;\r\n        uint256 amountTotal;\r\n        uint256 released;\r\n    }\r\n\r\n    bytes32[] private _vestingSchedulesIds;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _holdersVestingCount;\r\n    mapping(bytes32 => VestingSchedule) private _vestingSchedules;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    event TokensReleased(address indexed beneficiary, uint256 amount);\r\n    event VestingScheduleCreated(\r\n        address indexed beneficiary,\r\n        uint256 cliff,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 slicePeriodSeconds,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier onlyIfBeneficiaryExists(address beneficiary) {\r\n        require(\r\n            _holdersVestingCount[beneficiary] > 0,\r\n            \"TokenVestingSTEAK: INVALID Beneficiary Address! no vesting schedule exists for that beneficiary\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"Vested STEAK\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"vSTEAK\";\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function getCurrentTime() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(\r\n            owner != address(0),\r\n            \"TokenVestingSTEAK: approve from the zero address\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"TokenVestingSTEAK: approve to the zero address\"\r\n        );\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(\r\n            allowance(sender, _msgSender()) >= amount,\r\n            \"TokenVestingSTEAK: insufficient allowance\"\r\n        );\r\n\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            (allowance(sender, _msgSender()) - amount)\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(\r\n            from != address(0),\r\n            \"TokenVestingSTEAK: transfer from the zero address\"\r\n        );\r\n        require(\r\n            to != address(0),\r\n            \"TokenVestingSTEAK: transfer to the zero address\"\r\n        );\r\n        require(\r\n            _balances[from] >= amount,\r\n            \"TokenVestingSTEAK: transfer amount exceeds balance\"\r\n        );\r\n\r\n        _balances[from] -= amount;\r\n        uint256 transferAmount = amount;\r\n\r\n        uint256 newCliff;\r\n        uint256 newStart;\r\n        uint256 newDuration;\r\n        VestingSchedule storage vestingSchedule;\r\n\r\n        for (\r\n            uint256 i = 0;\r\n            i < getVestingSchedulesCountByBeneficiary(from);\r\n            i++\r\n        ) {\r\n            vestingSchedule = _vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(from, i)\r\n            ];\r\n            (newCliff, newStart, newDuration) = _generateCSD(\r\n                vestingSchedule.cliff,\r\n                vestingSchedule.start,\r\n                vestingSchedule.duration\r\n            );\r\n            uint256 remainingAmount = vestingSchedule.amountTotal -\r\n                vestingSchedule.released;\r\n\r\n            if (transferAmount <= remainingAmount) {\r\n                vestingSchedule.amountTotal -= (transferAmount +\r\n                    vestingSchedule.released);\r\n                vestingSchedule.released = 0;\r\n                vestingSchedule.cliff = newStart + newCliff;\r\n                vestingSchedule.start = newStart;\r\n                vestingSchedule.duration = newDuration;\r\n                _totalSupply -= transferAmount;\r\n\r\n                _createVestingSchedule(\r\n                    to,\r\n                    newStart,\r\n                    newCliff,\r\n                    newDuration,\r\n                    vestingSchedule.slicePeriodSeconds,\r\n                    transferAmount\r\n                );\r\n\r\n                break;\r\n            } else {\r\n                if (remainingAmount == 0) {\r\n                    continue;\r\n                }\r\n\r\n                vestingSchedule.amountTotal = 0;\r\n                vestingSchedule.released = 0;\r\n                _totalSupply -= remainingAmount;\r\n                transferAmount -= remainingAmount;\r\n\r\n                _createVestingSchedule(\r\n                    to,\r\n                    newStart,\r\n                    newCliff,\r\n                    newDuration,\r\n                    vestingSchedule.slicePeriodSeconds,\r\n                    remainingAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _generateCSD(\r\n        uint256 _cliff,\r\n        uint256 _start,\r\n        uint256 _duration\r\n    ) private view returns (uint256, uint256, uint256) {\r\n        uint256 newCliff;\r\n        uint256 newStart;\r\n        uint256 newDuration;\r\n\r\n        uint256 oldCliff = _cliff - _start;\r\n\r\n        uint256 passedCliff = 0;\r\n        uint256 passedDuration = 0;\r\n\r\n        if (block.timestamp < _start) {\r\n            newCliff = oldCliff;\r\n            newDuration = _duration;\r\n        } else {\r\n            if (block.timestamp < _cliff) {\r\n                newCliff = _cliff - block.timestamp;\r\n                newDuration = _duration;\r\n                passedCliff = oldCliff - newCliff;\r\n                passedDuration = 0;\r\n            } else {\r\n                newCliff = 0;\r\n                passedCliff = oldCliff;\r\n                passedDuration = block.timestamp - _cliff;\r\n\r\n                if (passedDuration < _duration) {\r\n                    newDuration = _duration - passedDuration;\r\n                } else {\r\n                    newDuration = 1;\r\n                }\r\n            }\r\n        }\r\n        newStart = _start + passedCliff + passedDuration;\r\n\r\n        return (newCliff, newStart, newDuration);\r\n    }\r\n\r\n    function getVestingIdAtIndex(\r\n        uint256 index\r\n    ) external view returns (bytes32) {\r\n        require(\r\n            index < getVestingSchedulesCount(),\r\n            \"TokenVestingSTEAK: index out of bounds\"\r\n        );\r\n\r\n        return _vestingSchedulesIds[index];\r\n    }\r\n\r\n    function getVestingSchedulesCountByBeneficiary(\r\n        address _beneficiary\r\n    ) public view returns (uint256) {\r\n        return _holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n    function getVestingScheduleByBeneficiaryAndIndex(\r\n        address beneficiary,\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        onlyIfBeneficiaryExists(beneficiary)\r\n        returns (VestingSchedule memory)\r\n    {\r\n        require(\r\n            index < _holdersVestingCount[beneficiary],\r\n            \"TokenVestingSTEAK: INVALID Vesting Schedule Index! no vesting schedule exists at this index for that beneficiary\"\r\n        );\r\n\r\n        return\r\n            getVestingSchedule(\r\n                computeVestingScheduleIdForAddressAndIndex(beneficiary, index)\r\n            );\r\n    }\r\n\r\n    function computeVestingScheduleIdForAddressAndIndex(\r\n        address holder,\r\n        uint256 index\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    function getVestingSchedule(\r\n        bytes32 vestingScheduleId\r\n    ) public view returns (VestingSchedule memory) {\r\n        VestingSchedule storage vestingSchedule = _vestingSchedules[\r\n            vestingScheduleId\r\n        ];\r\n        require(\r\n            vestingSchedule.initialized == true,\r\n            \"TokenVestingSTEAK: INVALID Vesting Schedule ID! no vesting schedule exists for that id\"\r\n        );\r\n\r\n        return vestingSchedule;\r\n    }\r\n\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        uint256 _amount\r\n    ) external returns (bool) {\r\n        require(\r\n            tokenAddress.transferFrom(_msgSender(), address(this), _amount),\r\n            \"TokenVestingSTEAK: token STEAK transferFrom not succeeded\"\r\n        );\r\n        _createVestingSchedule(\r\n            _beneficiary,\r\n            _start,\r\n            _cliff,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _amount\r\n        );\r\n        emit VestingScheduleCreated(\r\n            _beneficiary,\r\n            _cliff,\r\n            _start,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _amount\r\n        );\r\n        emit Transfer(address(0), _beneficiary, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        uint256 _amount\r\n    ) private {\r\n        require(_duration > 0, \"TokenVestingSTEAK: duration must be > 0\");\r\n        require(_amount > 0, \"TokenVestingSTEAK: amount must be > 0\");\r\n        require(\r\n            _slicePeriodSeconds >= 1,\r\n            \"TokenVestingSTEAK: slicePeriodSeconds must be >= 1\"\r\n        );\r\n\r\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\r\n            _beneficiary\r\n        );\r\n        uint256 cliff = _start + _cliff;\r\n        _vestingSchedules[vestingScheduleId] = VestingSchedule(\r\n            true,\r\n            _beneficiary,\r\n            cliff,\r\n            _start,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _amount,\r\n            0\r\n        );\r\n        _balances[_beneficiary] += _amount;\r\n        _totalSupply += _amount;\r\n        _vestingSchedulesIds.push(vestingScheduleId);\r\n        _holdersVestingCount[_beneficiary]++;\r\n    }\r\n\r\n    function computeNextVestingScheduleIdForHolder(\r\n        address holder\r\n    ) private view returns (bytes32) {\r\n        return\r\n            computeVestingScheduleIdForAddressAndIndex(\r\n                holder,\r\n                _holdersVestingCount[holder]\r\n            );\r\n    }\r\n\r\n    function _computeReleasableAmount(\r\n        VestingSchedule memory vestingSchedule\r\n    ) private view returns (uint256) {\r\n        if (block.timestamp < vestingSchedule.cliff) {\r\n            return 0;\r\n        } else if (\r\n            block.timestamp >= vestingSchedule.cliff + vestingSchedule.duration\r\n        ) {\r\n            return (vestingSchedule.amountTotal - vestingSchedule.released);\r\n        } else {\r\n            uint256 timeFromStart = block.timestamp - vestingSchedule.cliff;\r\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 releaseableSlicePeriods = timeFromStart / secondsPerSlice;\r\n            uint256 releaseableSeconds = releaseableSlicePeriods *\r\n                secondsPerSlice;\r\n            uint256 releaseableAmount = (vestingSchedule.amountTotal *\r\n                releaseableSeconds) / vestingSchedule.duration;\r\n            releaseableAmount -= vestingSchedule.released;\r\n\r\n            return releaseableAmount;\r\n        }\r\n    }\r\n\r\n    function claimFromAllVestings()\r\n        external\r\n        nonReentrant\r\n        onlyIfBeneficiaryExists(_msgSender())\r\n        returns (bool)\r\n    {\r\n        address beneficiary = _msgSender();\r\n        uint256 vestingSchedulesCountByBeneficiary = getVestingSchedulesCountByBeneficiary(\r\n                beneficiary\r\n            );\r\n\r\n        VestingSchedule storage vestingSchedule;\r\n        uint256 totalReleaseableAmount = 0;\r\n        uint256 i = 0;\r\n        do {\r\n            vestingSchedule = _vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(beneficiary, i)\r\n            ];\r\n            uint256 releaseableAmount = _computeReleasableAmount(\r\n                vestingSchedule\r\n            );\r\n            vestingSchedule.released += releaseableAmount;\r\n\r\n            totalReleaseableAmount += releaseableAmount;\r\n            i++;\r\n        } while (i < vestingSchedulesCountByBeneficiary);\r\n\r\n        _totalSupply -= totalReleaseableAmount;\r\n        _balances[beneficiary] -= totalReleaseableAmount;\r\n        require(\r\n            tokenAddress.transfer(beneficiary, totalReleaseableAmount),\r\n            \"TokenVestingSTEAK: token STEAK rewards transfer to beneficiary not succeeded\"\r\n        );\r\n\r\n        emit TokensReleased(beneficiary, totalReleaseableAmount);\r\n        emit Transfer(beneficiary, address(0), totalReleaseableAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getVestingSchedulesCount() public view returns (uint256) {\r\n        return _vestingSchedulesIds.length;\r\n    }\r\n\r\n    function getLastVestingScheduleForBeneficiary(\r\n        address beneficiary\r\n    )\r\n        external\r\n        view\r\n        onlyIfBeneficiaryExists(beneficiary)\r\n        returns (VestingSchedule memory)\r\n    {\r\n        return\r\n            _vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(\r\n                    beneficiary,\r\n                    _holdersVestingCount[beneficiary] - 1\r\n                )\r\n            ];\r\n    }\r\n\r\n    function computeAllReleasableAmountForBeneficiary(\r\n        address beneficiary\r\n    ) external view returns (uint256) {\r\n        uint256 vestingSchedulesCountByBeneficiary = getVestingSchedulesCountByBeneficiary(\r\n                beneficiary\r\n            );\r\n\r\n        VestingSchedule memory vestingSchedule;\r\n        uint256 totalReleaseableAmount = 0;\r\n        uint256 i = 0;\r\n        do {\r\n            vestingSchedule = _vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(beneficiary, i)\r\n            ];\r\n            uint256 releaseableAmount = _computeReleasableAmount(\r\n                vestingSchedule\r\n            );\r\n\r\n            totalReleaseableAmount += releaseableAmount;\r\n            i++;\r\n        } while (i < vestingSchedulesCountByBeneficiary);\r\n\r\n        return totalReleaseableAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFromAllVestings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"computeAllReleasableAmountForBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForBeneficiary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingSTEAK.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingSTEAK.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByBeneficiaryAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingSTEAK.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVestingSTEAK", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://743404cc2a9d362b3bda4e8bcd79e3f0f717293b7aa5b81d28490f78dc2098dc"}