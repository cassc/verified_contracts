{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Ntc copy 6.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(\\r\\n            token.transferFrom(sender, recipient, amount),\\r\\n            \\\"SafeERC20: transferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract spot {\\r\\n    using SafeERC20 for IERC20;\\r\\n    struct BorrowDetails {\\r\\n        address lender;\\r\\n        address friend;\\r\\n        address token;\\r\\n        uint256 totalBorrowed;\\r\\n        uint256 outstanding;\\r\\n        uint256 allowable;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => BorrowDetails) public borrowDetails;\\r\\n    mapping(address => bytes32[]) public borrowDetailsByLender;\\r\\n    mapping(address => bytes32[]) public borrowDetailsByFriend;\\r\\n    address payable public feeAddress;\\r\\n    uint public fee;\\r\\n    event BorrowAllowed(\\r\\n        address indexed lender,\\r\\n        address indexed token,\\r\\n        address indexed friend,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Borrowed(\\r\\n        address indexed token,\\r\\n        address indexed lender,\\r\\n        address indexed borrower,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Repaid(\\r\\n        address indexed token,\\r\\n        address indexed lender,\\r\\n        address indexed borrower,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(address payable feeAddrs) {\\r\\n        feeAddress = feeAddrs;\\r\\n    }\\r\\n\\r\\n    function computeHash(\\r\\n        address lender,\\r\\n        address token,\\r\\n        address friend\\r\\n    ) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(lender, token, friend));\\r\\n    }\\r\\n\\r\\n    function allowBorrow(\\r\\n        address token,\\r\\n        address friend,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        bytes32 hash = computeHash(msg.sender, token, friend);\\r\\n        if (borrowDetails[hash].lender == address(0)) {\\r\\n            borrowDetails[hash] = BorrowDetails({\\r\\n                lender: msg.sender,\\r\\n                friend: friend,\\r\\n                token: token,\\r\\n                totalBorrowed: 0,\\r\\n                outstanding: 0,\\r\\n                allowable: amount\\r\\n            });\\r\\n            borrowDetailsByLender[msg.sender].push(hash);\\r\\n            borrowDetailsByFriend[friend].push(hash);\\r\\n        } else {\\r\\n            borrowDetails[hash].allowable = amount;\\r\\n        }\\r\\n        emit BorrowAllowed(msg.sender, token, friend, amount);\\r\\n    }\\r\\n\\r\\n    function borrow(address token, address lender, uint256 amount) external {\\r\\n        bytes32 hash = computeHash(lender, token, msg.sender);\\r\\n        require(\\r\\n            borrowDetails[hash].allowable - borrowDetails[hash].outstanding >=\\r\\n                amount,\\r\\n            \\\"Not enough allowable amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            borrowDetails[hash].friend == msg.sender,\\r\\n            \\\"You are not the friend\\\"\\r\\n        );\\r\\n\\r\\n        borrowDetails[hash].totalBorrowed += amount;\\r\\n        borrowDetails[hash].outstanding += amount;\\r\\n        IERC20(token).safeTransferFrom(lender, msg.sender, amount);\\r\\n\\r\\n        emit Borrowed(token, lender, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function repay(address token, address lender, uint256 amount) external {\\r\\n        bytes32 hash = computeHash(lender, token, msg.sender);\\r\\n        if (fee == 0) {\\r\\n            if (borrowDetails[hash].outstanding <= amount) {\\r\\n                amount = borrowDetails[hash].outstanding;\\r\\n            }\\r\\n\\r\\n            IERC20(token).safeTransferFrom(msg.sender, lender, amount);\\r\\n            borrowDetails[hash].outstanding -= amount;\\r\\n        } else {\\r\\n            if (\\r\\n                borrowDetails[hash].outstanding +\\r\\n                    (borrowDetails[hash].outstanding * fee) /\\r\\n                    1000 <=\\r\\n                amount\\r\\n            ) {\\r\\n                IERC20(token).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    lender,\\r\\n                    borrowDetails[hash].outstanding\\r\\n                );\\r\\n\\r\\n                IERC20(token).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    feeAddress,\\r\\n                    (borrowDetails[hash].outstanding * fee) / 1000\\r\\n                );\\r\\n                borrowDetails[hash].outstanding -= borrowDetails[hash]\\r\\n                    .outstanding;\\r\\n            } else {\\r\\n                IERC20(token).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    lender,\\r\\n                    amount - (amount * fee) / 1000\\r\\n                );\\r\\n                IERC20(token).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    feeAddress,\\r\\n                    (amount * fee) / 1000\\r\\n                );\\r\\n                borrowDetails[hash].outstanding -=\\r\\n                    amount -\\r\\n                    (amount * fee) /\\r\\n                    1000;\\r\\n            }\\r\\n        }\\r\\n        emit Repaid(token, lender, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function viewLenderAllowances(\\r\\n        address lender\\r\\n    ) public view returns (bytes32[] memory) {\\r\\n        return borrowDetailsByLender[lender];\\r\\n    }\\r\\n\\r\\n    function viewFriendAllowances(\\r\\n        address friend\\r\\n    ) public view returns (bytes32[] memory) {\\r\\n        return borrowDetailsByFriend[friend];\\r\\n    }\\r\\n    function setFee(uint _fee, address newfeeAddress) public {\\r\\n        require(msg.sender == feeAddress, \\\"You are not the owner\\\");\\r\\n        fee = _fee <= 50 ? _fee : 50;\\r\\n        newfeeAddress != address(0)\\r\\n            ? feeAddress = payable(newfeeAddress)\\r\\n            : feeAddress = feeAddress;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeAddrs\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allowBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowDetailsByFriend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowDetailsByLender\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"}],\"name\":\"computeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newfeeAddress\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"}],\"name\":\"viewFriendAllowances\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"viewLenderAllowances\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "spot", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009d31e30003f253563ff108bc60b16fdf2c93abb5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}