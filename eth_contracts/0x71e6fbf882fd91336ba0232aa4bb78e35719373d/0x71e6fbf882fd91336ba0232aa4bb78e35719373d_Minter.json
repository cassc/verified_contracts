{"SourceCode": "// SPDX-License-Identifier: UNLISENCED\r\n\r\n/**\r\n * @title NTP Collabs Minter\r\n * @author 0xSumo \r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    address public owner;\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(owner == msg.sender, \"Not Owner\");_; }\r\n    function transferOwnership(address new_) external onlyOwner { address _old = owner; owner = new_; emit OwnershipTransferred(_old, new_); }\r\n}\r\n\r\nabstract contract MerkleProof {\r\n    bytes32 internal _merkleRoot;\r\n    function _setMerkleRoot(bytes32 merkleRoot_) internal virtual { _merkleRoot = merkleRoot_; }\r\n    function isWhitelisted(address address_, bytes32[] memory proof_) public view returns (bool) {\r\n        bytes32 _leaf = keccak256(abi.encodePacked(address_));\r\n        for (uint256 i = 0; i < proof_.length; i++) {\r\n            _leaf = _leaf < proof_[i] ? keccak256(abi.encodePacked(_leaf, proof_[i])) : keccak256(abi.encodePacked(proof_[i], _leaf));\r\n        }\r\n        return _leaf == _merkleRoot;\r\n    }\r\n}\r\n\r\ninterface iToken { \r\n    function mintToken(address to, uint256 id, uint256 amount, bytes memory data) external; \r\n}\r\n\r\ncontract Minter is Ownable, MerkleProof {\r\n\r\n    iToken public Token = iToken(0x68607266e9118B971901239891e6280a8066fCEb);\r\n\r\n    uint256 public constant startTime = 1692360000; //18/08/2023 21pm JST\r\n    uint256 public constant TOKEN_ID = 12;\r\n    mapping(address => uint256) private minted;\r\n\r\n    constructor(bytes32 _merkleRoot) {\r\n        _setMerkleRoot(_merkleRoot);\r\n    }\r\n\r\n    modifier onlySender { require(msg.sender == tx.origin, \"No smart contract\");_; }\r\n\r\n    function mintToken(bytes32[] memory proof_, bytes memory data) external onlySender {\r\n        require(block.timestamp >= startTime, \"Sale has not started yet!\");\r\n        require(isWhitelisted(msg.sender, proof_), \"You are not whitelisted!\");\r\n        require(minted[msg.sender] == 0, \"Exceed max per addy and tx\");\r\n        minted[msg.sender]++;\r\n        Token.mintToken(msg.sender, TOKEN_ID, 1, data);\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 merkleRoot_) external onlyOwner {\r\n        _setMerkleRoot(merkleRoot_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract iToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Minter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "4972d8e7cbe7061ff21ab3b77f9d49911ca0456553761a4930f490896a7a3f77", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0af202b593bf730e84600760ab97f40d29b888d254cdfa5797261c0e63b0767"}