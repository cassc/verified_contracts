/*

░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░                             ░░
░░   ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░   ░░
░░   ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░   ░░
░░   ░░ ░░ ░░ ░░ ░░ ░░ ██ ░░   ░░
░░   ░░ ░░ ░░ ░░ ░░ ██ ░░ ░░   ░░
░░   ░░ ░░ ██ ░░ ██ ░░ ░░ ░░   ░░
░░   ░░ ░░ ░░ ██ ░░ ░░ ░░ ░░   ░░
░░   ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░   ░░
░░   ░░ ░░ ░░ ░░ ░░ ░░ ░░ ░░   ░░
░░                             ░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "erc721a/contracts/ERC721A.sol";
import "@openzeppelin/contracts/utils/Base64.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./Utilities.sol";

contract UintsEditionChanges is ERC721A, Ownable {

    constructor() ERC721A("UINTS Edition Changes", "UEC") {}

    struct Receipt {
        uint counter;
        uint position;
        string color;
        address artist;
        uint uintsId;
        uint timestamp;
    }

    mapping (uint => Receipt) receipts;

    address _editionContract = 0xb1d74122ea8a7F9bAbCf489cF5133837B31878a7;

    function setEditionContract(address contractAddress) public onlyOwner {
        _editionContract = contractAddress;
    }

    function mint(
        uint counter,
        uint position,
        string memory color,
        address artist,
        uint uintsId,
        uint timestamp
        ) external {
        require(msg.sender == _editionContract, 'Unapproved minting source');

        receipts[counter] = Receipt({
            counter: counter,
            position: position,
            color: color,
            artist: artist,
            uintsId: uintsId,
            timestamp: timestamp
        });

        _mint(artist, 1);
    }

    function renderSvg(Receipt memory receipt) public pure returns (string memory) {
        return string(abi.encodePacked(
            '<svg width="900" height="900" viewBox="0 0 300 300" fill="none" xmlns="http://www.w3.org/2000/svg"><rect id="bg" width="300" height="300" fill="#0c0c0c"/><rect class="dark-stroke" x="75.5" y="45.5" width="149" height="211" fill="white"/><g id="logo"><path d="M141.5 59.2886L143 57.7886L144.5 59.2886V69.2889L143 70.789L141.5 69.2889V59.2886Z"/><path d="M155.5 59.2886L157 57.7886L158.5 59.2886V69.2889L157 70.789L155.5 69.2889V59.2886Z"/><path d="M155 69.7887L156.5 71.2887L155 72.7888L145 72.7888L143.5 71.2887L145 69.7887L155 69.7887Z"/></g><line class="dark-stroke" x1="88" y1="84.2347" x2="212" y2="84.2347"/><line class="dark-stroke" x1="88" y1="103.675" x2="212" y2="103.675"/><text font-weight="bold" font-size="6.8"><tspan x="150" y="96.9586">UINTS EDITION - PROOF OF CHANGE</tspan></text><text font-size="12"><tspan x="150" y="119.239">#',
            _toString(receipt.counter),
            '</tspan></text><line class="dashline dark-stroke" x1="88.5" y1="125.481" x2="211.5" y2="125.481"/><text class="line-items"><tspan x="88" y="148.273">POSITION: ',
            _toString(receipt.position),
            '</tspan><tspan x="88" y="164.273">COLOR: ',
            receipt.color,
            '</tspan><tspan x="88" y="180.273">CHANGED BY: ',
            abbreviateAddress(receipt.artist),
            '</tspan><tspan x="88" y="196.273">UINTS USED: #',
            _toString(receipt.uintsId),
            '</tspan><tspan x="88" y="212.273">TIMESTAMP: ',
            _toString(receipt.timestamp),
            '</tspan></text><line class="dashline dark-stroke" x1="88.5" y1="232.787" x2="211.5" y2="232.787"/><text id="NUMBERS ARE ART, AND WE ARE ARTISTS" font-size="5"><tspan x="150" y="245.511">NUMBERS ARE ART, AND WE ARE ARTISTS</tspan></text><style>#bg{fill:',
            receipt.color,
            '}#logo path{fill:#0c0c0c}.dashline{stroke-linecap:square;stroke-dasharray:2 4;}text{font-family:sans-serif;fill:#0c0c0c;text-anchor:middle}.line-items{font-size:8px;text-anchor:start}.dark-stroke{stroke:#0c0c0c}</style></svg>'
        ));
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory result) {
        string memory svg = renderSvg(receipts[tokenId]);
        string memory json = string(abi.encodePacked(
            '{"name": "UINTS Edition Change ',
            _toString(tokenId),
            '", "description": "UINTS Edition Changes are receipts generated by making a change to the UINTS Edition art.", ',
            '"attributes": [{"display_type": "number", "trait_type": "Change number", "value": ',
            _toString(receipts[tokenId].counter),
            '},{"display_type": "number", "trait_type": "Position", "value": ',
            _toString(receipts[tokenId].position),
            '},{"trait_type": "Color", "value": "',
            receipts[tokenId].color,
            '"},{"trait_type": "Changed by", "value": "0x',
            utils.toAsciiString(receipts[tokenId].artist),
            '"},{"display_type": "date", "trait_type": "Date", "value": ',
            _toString(receipts[tokenId].timestamp),
            '}], "image": "data:image/svg+xml;base64,',
            Base64.encode(bytes(svg)),
            '"}'
        ));

        result = string(abi.encodePacked(
            "data:application/json;base64,",
            Base64.encode(bytes(json))
        ));
    }

    function abbreviateAddress(address _address) internal pure returns (string memory) {
        string memory addressStr = utils.toAsciiString(_address);
        uint len = bytes(addressStr).length;
        uint startLen = 3;
        uint endLen = len - 4;
        return string(abi.encodePacked(
            "0x",
            substring(addressStr, 0, startLen),
            "...",
            substring(addressStr, endLen, len)
        ));
    }

    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {
        bytes memory strBytes = bytes(str);
        bytes memory result = new bytes(endIndex - startIndex);
        for (uint i = startIndex; i < endIndex; i++) {
            result[i - startIndex] = strBytes[i];
        }
        return string(result);
    }

    function _startTokenId() internal view virtual override returns (uint256) {
        return 1;
    }

    function withdraw() external onlyOwner {
        require(payable(msg.sender).send(address(this).balance));
    }

}