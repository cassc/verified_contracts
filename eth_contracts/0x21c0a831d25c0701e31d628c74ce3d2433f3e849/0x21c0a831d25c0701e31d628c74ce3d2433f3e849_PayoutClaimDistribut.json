{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@animoca/ethereum-contracts-core/contracts/access/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/**\\n * @title ERC-173 Contract Ownership Standard\\n * Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n */\\ninterface IERC173 {\\n    /**\\n     * Event emited when ownership of a contract changes.\\n     * @param previousOwner the previous owner.\\n     * @param newOwner the new owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * Get the address of the owner\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * Set the address of the new owner of the contract\\n     * Set newOwner to address(0) to renounce any ownership.\\n     * @dev Emits an {OwnershipTransferred} event.\\n     * @param newOwner The address of the new owner of the contract. Using the zero address means renouncing ownership.\\n     */\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {ManagedIdentity} from \\\"../metatx/ManagedIdentity.sol\\\";\\nimport {IERC173} from \\\"./IERC173.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is ManagedIdentity, IERC173 {\\n    address internal _owner;\\n\\n    /**\\n     * Initializes the contract, setting the deployer as the initial owner.\\n     * @dev Emits an {IERC173-OwnershipTransferred(address,address)} event.\\n     */\\n    constructor(address owner_) {\\n        _owner = owner_;\\n        emit OwnershipTransferred(address(0), owner_);\\n    }\\n\\n    /**\\n     * Gets the address of the current contract owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * See {IERC173-transferOwnership(address)}\\n     * @dev Reverts if the sender is not the current contract owner.\\n     * @param newOwner the address of the new owner. Use the zero address to renounce the ownership.\\n     */\\n    function transferOwnership(address newOwner) public virtual override {\\n        _requireOwnership(_msgSender());\\n        _owner = newOwner;\\n        emit OwnershipTransferred(_owner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Reverts if `account` is not the contract owner.\\n     * @param account the account to test.\\n     */\\n    function _requireOwnership(address account) internal virtual {\\n        require(account == this.owner(), \\\"Ownable: not the owner\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/metatx/ManagedIdentity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/*\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner.\\n */\\nabstract contract ManagedIdentity {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/payout/PayoutClaimDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@animoca/ethereum-contracts-core/contracts/access/Ownable.sol\\\";\\n\\n/// @title PayoutClaimDistributor\\n/// @notice Through this contract, users could claim ERC20 token s/he is eligible to claim the rewards.\\n///      - The owner/deployer of the contract could set merkle root, distributor address or lock/unlock the distribution.\\n///      - Owner sets the ERC20 Token address (`token`) when deploying the contract, the owner also\\n///        sets distributor address (`distAddress`) through `setDistributorAddress` function from which to distribute the tokens.\\n///      - Owner should also approve the amount of ERC20 tokens allowed to distribute through this contract.\\n///      - For owner to set new merkle root through `setMerkleRoot` function, contract distribution should be locked though\\n///         `setLocked`.\\n///      - To enable distribution again, it should be unlocked with `setLocked` function.\\n///      - Users could claim the ERC20 token payout when the distributor is unlocked.\\n\\ncontract PayoutClaimDistributor is Ownable {\\n    using MerkleProof for bytes32[];\\n\\n    event SetMerkleRoot(bytes32 indexed merkleRoot);\\n    event ClaimedPayout(address indexed account, uint256 amount, uint256 batch);\\n    event DistributionLocked(bool isLocked);\\n    event SetDistributorAddress(address indexed ownerAddress, address indexed distAddress);\\n\\n    bytes32 public merkleRoot;\\n    IERC20 public token;\\n    address public distAddress;\\n    bool public isLocked;\\n\\n    /*\\n     * Mapping for hash for (address, amount, batch) for claimed status\\n     */\\n    mapping(bytes32 => bool) public claimed;\\n\\n    /// @dev Constructor for setting ERC token address on deployment\\n    /// @param token_ Address for token to distribute\\n    /// @dev `distAddress` deployer address will be distributor address by default\\n    constructor(IERC20 token_) Ownable(msg.sender) {\\n        token = token_;\\n        distAddress = msg.sender;\\n    }\\n\\n    /// @notice Merkle Root for current period to use for payout.\\n    ///    - distributor contract should be locked before setting new merkle root\\n    /// @dev Owner sets merkle hash generated based on the payout set\\n    /// @dev Reverts if the distribution contract is not locked while setting new merkle root\\n    /// @dev Emits SetMerkleRoot event.\\n    /// @param merkleRoot_ bytes32 string of merkle root to set for specific period\\n    function setMerkleRoot(bytes32 merkleRoot_) public {\\n        _requireOwnership(_msgSender());\\n        require(isLocked, \\\"Payout not locked\\\");\\n\\n        merkleRoot = merkleRoot_;\\n        emit SetMerkleRoot(merkleRoot_);\\n    }\\n\\n    /// @notice Set locked/unlocked status  for PayoutClaim Distributor\\n    /// @dev Owner lock/unlock each time new merkle root is being generated\\n    /// @dev Emits DistributionLocked event.\\n    /// @param isLocked_ = true/false status\\n    function setLocked(bool isLocked_) public {\\n        _requireOwnership(_msgSender());\\n        isLocked = isLocked_;\\n        emit DistributionLocked(isLocked_);\\n    }\\n\\n    /// @notice Distributor address in PayoutClaim Distributor\\n    /// @dev Wallet that holds token for distribution\\n    /// @dev Emits SetDistributorAddress event.\\n    /// @param distributorAddress Distributor address used for distribution of `token` token\\n    function setDistributorAddress(address distributorAddress) public {\\n        address msgSender = _msgSender();\\n        _requireOwnership(msgSender);\\n\\n        distAddress = distributorAddress;\\n        emit SetDistributorAddress(msgSender, distributorAddress);\\n    }\\n\\n    /// @notice Payout method that user calls to claim\\n    /// @dev Method user calls for claiming the payout for user\\n    /// @dev Emits ClaimedPayout event.\\n    /// @param account Address of the user to claim the payout\\n    /// @param amount Claimable amount of address\\n    /// @param batch Unique value for each new merkle root generating\\n    /// @param merkleProof Merkle proof of the user based on the merkle root\\n    function claimPayout(address account, uint256 amount, uint256 batch, bytes32[] calldata merkleProof) external {\\n        require(!isLocked, \\\"Payout locked\\\");\\n\\n        bytes32 leafHash = keccak256(abi.encodePacked(account, amount, batch));\\n\\n        require(!claimed[leafHash], \\\"Payout already claimed\\\");\\n        require(merkleProof.verify(merkleRoot, leafHash), \\\"Invalid proof\\\");\\n\\n        claimed[leafHash] = true;\\n\\n        IERC20(token).transferFrom(distAddress, account, amount);\\n\\n        emit ClaimedPayout(account, amount, batch);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"}],\"name\":\"ClaimedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"DistributionLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distAddress\",\"type\":\"address\"}],\"name\":\"SetDistributorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SetMerkleRoot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLocked_\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PayoutClaimDistributor", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ca5b0ae1d104030a9b8f879523508efd86c14483", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}