{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/index.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.15;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IIndexStruct.sol\\\";\\n\\ninterface IDexAggregator {\\n    function bestRateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address to,\\n        uint allowedslippage\\n    ) external returns (uint);\\n\\n    function getRates(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint8 flag\\n    ) external view returns (uint[] memory, uint8);\\n}\\n\\ncontract Index is Ownable, Initializable, ReentrancyGuard, IndexStruct {\\n    using SafeERC20 for IERC20;\\n\\n    ///@notice Stores the current state of the index contract\\n    State public state;\\n\\n    ///@notice structure that stores the fee information(treasury addresses and fee amounts)\\n    FeeData public feeData;\\n\\n    ///@notice stores address of the dex aggregator contract\\n    address public dex;\\n\\n    ///@notice stores the address of the p token\\n    address public ptoken;\\n\\n    ///@notice stores the maximum ptoken deposit allowed in the contract\\n    uint public maxDeposit;\\n\\n    ///@notice minimum value of the ptoken left after purchase that will make the purchase state\\n    uint public minimumPtokenForPurchase;\\n\\n    ///@notice stores the total number withdrawals happened\\n    uint public totalWithdrawals;\\n\\n    /// @notice stores the token holding time\\n    uint public maturityTime;\\n\\n    /// @notice stores the ending time for deposit\\n    uint public depositEndTime;\\n\\n    /// @notice stores the starting time of the index\\n    uint public startingTime;\\n\\n    /// @notice stores the total ptoken deposit by the user\\n    uint public totalDeposit;\\n\\n    ///@notice stores the total ptoken deposit by the user after deducting the management fees\\n    uint public totalDepositAfterFee;\\n\\n    ///@notice stores the total ptoken after sell\\n    uint public totalptokenaftersell;\\n\\n    ///@notice stores the addresses of the depositors\\n    address[] public depositors;\\n\\n    ///@notice stores the percentage fo the current tokens\\n    uint16[] public percentages;\\n\\n    ///@notice stores the percentage fo the current tokens\\n    uint16[] public previousPercentages;\\n\\n    ///@notice stores the current amounts of the tokens after the complete purchase\\n    address[] public tokens;\\n\\n    ///@notice stores 100% in basis points\\n    uint public constant totalBasisPoints = 10_000;\\n\\n    ///stores 10^10 for precision calculation\\n    uint public constant precisionHelper = 10000000000;\\n\\n    ///@notice mapping to store user data\\n    mapping(address => Depositor) Users;\\n\\n    event depositEvent(uint amount, address depositor);\\n\\n    event purchaseEvent(\\n        uint amountin,\\n        uint[] amountout,\\n        address ptoken,\\n        address[] currenttokens\\n    );\\n\\n    event updateIndexFundEvent(\\n        uint16[] percentagescurrent,\\n        uint16[] percentagesprevious\\n    );\\n\\n    event rebalanceSellEvent(\\n        uint[] amountsin,\\n        uint[] amountsout,\\n        uint amountoutsum,\\n        address ptoken\\n    );\\n\\n    event rebalancePurchaseEvent(\\n        uint amountin,\\n        uint[] amountout,\\n        address ptoken,\\n        address[] currentokens\\n    );\\n\\n    event sellEvent(\\n        uint[] amountsin,\\n        uint[] amountsout,\\n        uint amountoutsum,\\n        address[] currenttokens,\\n        address ptoken\\n    );\\n\\n    event distributebeforepurchaseEvent(uint numberofwithdrawers);\\n\\n    event distributeEvent(uint numberofwithdrawers);\\n\\n    ///@notice modifier to check purchase\\n    modifier beforePurchasedCheck() {\\n        if (state.purchased) revert(\\\"Purchased Completed\\\");\\n        _;\\n    }\\n    ///@notice modifier to check purchase\\n    modifier purchasedCheck() {\\n        if (!state.purchased) revert(\\\"Not purchased \\\");\\n        _;\\n    }\\n    ///@notice modifier to check updation\\n    modifier updatedCheck() {\\n        if (!state.updated) revert(\\\"Not updated \\\");\\n        _;\\n    }\\n    /// @notice modifier to check selling\\n    modifier soldCheck() {\\n        if (!state.sold) revert(\\\"Not sold\\\");\\n        _;\\n    }\\n    /// @notice modifier to check distribute before purchase\\n    modifier distributeBeforePurchaseCheck() {\\n        if (state.distributeBeforePurchased)\\n            revert(\\\"Already Distributed Before Purchase\\\");\\n        _;\\n    }\\n\\n    /// @notice This function will update the index configuration with new percentages and tokens\\n    /// @param _percentages The percentage array for the tokens\\n    function udpateIndex(\\n        uint16[] memory _percentages\\n    ) external onlyOwner purchasedCheck nonReentrant {\\n        require(block.timestamp < maturityTime, \\\"Maturity time reached\\\");\\n        previousPercentages = percentages;\\n        percentages = _percentages;\\n        state.updated = true;\\n        emit updateIndexFundEvent(_percentages, previousPercentages);\\n    }\\n\\n    ///@notice will be used to deposit the amount of ptoken in the contract\\n    ///@param amount the total amount deposited by the user on the contract\\n    ///@param depositer the address of the depositer\\n    function deposit(\\n        uint amount,\\n        address depositer\\n    ) external onlyOwner nonReentrant {\\n        require(block.timestamp <= depositEndTime, \\\"deposit time limit passed\\\");\\n\\n        require(\\n            totalDeposit + amount <= maxDeposit,\\n            \\\"amount should be lesser than maxdeposit\\\"\\n        );\\n\\n        uint fees = (feeData.managementFeeBasisPoint * amount) /\\n            totalBasisPoints;\\n        Users[depositer].amount += amount;\\n        totalDeposit += amount;\\n        totalDepositAfterFee += amount - fees;\\n\\n        IERC20(ptoken).safeTransfer(feeData.managementFeeAddress, fees);\\n\\n        if (Users[depositer].status == false) {\\n            depositors.push(depositer);\\n            Users[depositer].status = true;\\n        }\\n\\n        emit depositEvent(amount, depositer);\\n    }\\n\\n    ///@notice it returns the ptokenbalance of the index contract\\n    function pTokenBalance() external view returns (uint) {\\n        return checkBalanceByToken(ptoken, address(this));\\n    }\\n\\n    ///@notice it will return the balance of tokens for the index\\n    function tokensBalances()\\n        external\\n        view\\n        returns (uint[] memory balancearray)\\n    {\\n        uint numberoftokens = tokens.length;\\n        address[] memory _tokens = new address[](numberoftokens);\\n        balancearray = new uint[](numberoftokens);\\n\\n        _tokens = tokens;\\n\\n        for (uint i; i < numberoftokens; i++) {\\n            balancearray[i] = checkBalanceByToken(_tokens[i], address(this));\\n        }\\n\\n        return balancearray;\\n    }\\n\\n    ///@notice internal function to purchase the current tokens\\n    ///@param _amount The amount of token that we want to use for purchasing ptoken\\n    ///@param _slippageallowed The amount of slippage allowed for swap\\n    function _purchase(\\n        uint _amount,\\n        uint[] calldata _slippageallowed\\n    ) internal returns (uint[] memory amounts) {\\n        uint amount;\\n        IERC20(ptoken).safeIncreaseAllowance(dex, _amount);\\n        uint numoftokens = tokens.length;\\n        uint16[] memory _percentages = new uint16[](numoftokens);\\n        address[] memory _tokens = new address[](numoftokens);\\n        amounts = new uint[](numoftokens);\\n\\n        _tokens = tokens;\\n        _percentages = percentages;\\n        for (uint i; i < numoftokens; i++) {\\n            if (_percentages[i] == 0) {\\n                continue;\\n            }\\n            amount = IDexAggregator(dex).bestRateSwap(\\n                ptoken,\\n                _tokens[i],\\n                ((_amount * _percentages[i]) / totalBasisPoints),\\n                address(this),\\n                _slippageallowed[i]\\n            );\\n            amounts[i] = amount;\\n        }\\n    }\\n\\n    ///@notice internal function to sell the tokens for getting ptokens\\n    ///@param _amounts The amounrs of the token that we want sell/swap for ptokens\\n    ///@param _slippageallowed The array of percentage of slippage allowed\\n    function _sell(\\n        uint[] calldata _amounts,\\n        uint[] calldata _slippageallowed\\n    ) internal returns (uint[] memory amounts, uint sum) {\\n        uint numoftokens = tokens.length;\\n\\n        address[] memory _tokens = new address[](numoftokens);\\n        amounts = new uint[](numoftokens);\\n        _tokens = tokens;\\n        uint amount;\\n        for (uint i; i < numoftokens; i++) {\\n            if (\\n                checkBalanceByToken(_tokens[i], address(this)) == 0 ||\\n                _amounts[i] == 0\\n            ) {\\n                continue;\\n            }\\n            IERC20(tokens[i]).safeIncreaseAllowance(dex, _amounts[i]);\\n            amount = IDexAggregator(dex).bestRateSwap(\\n                _tokens[i],\\n                ptoken,\\n                _amounts[i],\\n                address(this),\\n                _slippageallowed[i]\\n            );\\n            sum += amount;\\n            amounts[i] = amount;\\n        }\\n    }\\n\\n    /// @notice Will purchase/swap the index tokens in place of ptokens for the index contract\\n    /// @param _amount The amount of p token that we want to use for purchase/swap index tokens\\n    /// @param _slippageallowed The array of slippage percentages\\n    function purchase(\\n        uint _amount,\\n        uint[] calldata _slippageallowed\\n    ) external onlyOwner distributeBeforePurchaseCheck nonReentrant {\\n        require(\\n            block.timestamp > depositEndTime,\\n            \\\"deposit period,no purchase allowed\\\"\\n        );\\n        require(!state.purchased, \\\"already purchased\\\");\\n        require(\\n            _amount <= checkBalanceByToken(ptoken, address(this)),\\n            \\\"Amount should be less than balance\\\"\\n        );\\n\\n        uint[] memory amounts = _purchase(_amount, _slippageallowed);\\n\\n        if (\\n            checkBalanceByToken(ptoken, address(this)) <\\n            minimumPtokenForPurchase\\n        ) {\\n            state.purchased = true;\\n            maturityTime += block.timestamp;\\n        }\\n\\n        emit purchaseEvent(_amount, amounts, ptoken, tokens);\\n    }\\n\\n    ///@notice main sell function with required checks for selling tokens\\n    /// @param _amounts The array of amounts of index tokens that we want to use for sell/swap for p tokens\\n    /// @param _slippageallowed The array of slippage percentages\\n    function sell(\\n        uint[] calldata _amounts,\\n        uint[] calldata _slippageallowed\\n    ) external onlyOwner purchasedCheck nonReentrant {\\n        require(!state.updated, \\\"updated state\\\");\\n        require(block.timestamp > maturityTime, \\\"The index has not ended yet\\\");\\n        uint purchasetokensum;\\n        uint[] memory amounts;\\n\\n        (amounts, purchasetokensum) = _sell(_amounts, _slippageallowed);\\n\\n        bool flag;\\n\\n        uint num_current_tokens = tokens.length;\\n        address[] memory _tokens = new address[](num_current_tokens);\\n        _tokens = tokens;\\n\\n        for (uint i; i < num_current_tokens; ++i) {\\n            if (checkBalanceByToken(_tokens[i], address(this)) != 0) {\\n                flag = true;\\n\\n                break;\\n            }\\n        }\\n        if (!flag) {\\n            state.sold = true;\\n            totalptokenaftersell = checkBalanceByToken(ptoken, address(this));\\n        }\\n\\n        emit sellEvent(_amounts, amounts, purchasetokensum, tokens, ptoken);\\n    }\\n\\n    ///@notice it will distribute ptokens according to users deposit\\n    ///@param numofwithdrawers The first n number of withdrawers\\n    function distributeAmount(\\n        uint numofwithdrawers\\n    ) external onlyOwner soldCheck nonReentrant {\\n        uint lengthd = depositors.length;\\n\\n        require(\\n            numofwithdrawers + totalWithdrawals <= lengthd,\\n            \\\"Greater than number of withdrawers\\\"\\n        );\\n        uint _totalbalance = totalptokenaftersell;\\n\\n        uint percentage;\\n\\n        address[] memory _depositors = new address[](lengthd);\\n        _depositors = depositors;\\n        uint i = totalWithdrawals;\\n\\n        for (; i < numofwithdrawers + totalWithdrawals; i++) {\\n            percentage =\\n                (Users[depositors[i]].amount * precisionHelper) /\\n                totalDeposit;\\n            IERC20(ptoken).safeTransfer(\\n                _depositors[i],\\n                (percentage * _totalbalance) / precisionHelper\\n            );\\n        }\\n        totalWithdrawals = i;\\n    }\\n\\n    ///@notice it will transfer the fee to the performance treasury\\n    function performaneFeesTransfer()\\n        external\\n        onlyOwner\\n        soldCheck\\n        nonReentrant\\n    {\\n        require(!state.performancefeestransfer, \\\"Fees already disbursed\\\");\\n        uint _totaldeposit = totalDeposit;\\n        uint _totalbalance = checkBalanceByToken(ptoken, address(this));\\n        if (_totalbalance > _totaldeposit) {\\n            uint interest = _totalbalance - _totaldeposit;\\n            uint fees = (interest * feeData.performanceFeeBasisPoint) /\\n                totalBasisPoints;\\n            IERC20(ptoken).safeTransfer(feeData.performanceFeeAddress, fees);\\n            _totalbalance -= fees;\\n        }\\n        state.performancefeestransfer = true;\\n    }\\n\\n    /// @notice Will sell/swap the previous index tokens for ptokens for the index contract\\n    /// @param _amounts The array of amounts of index tokens that we want to use for sell/swap for p tokens\\n    /// @param slippageallowed The array of slippage percentages\\n    function rebalanceSell(\\n        uint[] calldata _amounts,\\n        uint[] calldata slippageallowed\\n    ) external onlyOwner purchasedCheck nonReentrant {\\n        require(state.updated, \\\"not updated\\\");\\n        require(!state.soldprevafterupdate, \\\"already sold after update\\\");\\n        uint purchasetokensum;\\n        uint[] memory amounts;\\n\\n        (amounts, purchasetokensum) = _sell(_amounts, slippageallowed);\\n        bool flag;\\n\\n        uint numoftokens = tokens.length;\\n\\n        address[] memory _tokens = new address[](numoftokens);\\n        _tokens = tokens;\\n\\n        for (uint i; i < numoftokens; i++) {\\n            if (checkBalanceByToken(_tokens[i], address(this)) != 0) {\\n                flag = true;\\n                break;\\n            }\\n        }\\n        if (!flag) {\\n            state.soldprevafterupdate = true;\\n        }\\n        emit rebalanceSellEvent(_amounts, amounts, purchasetokensum, ptoken);\\n    }\\n\\n    /// @notice Will purchase/swap the updated index tokens in place of ptokens for the index contract\\n    /// @param amount The amount of p token that we want to use for purchase/swap index tokens\\n    /// @param slippageallowed The array of slippage percentages\\n    function rebalancePurchase(\\n        uint amount,\\n        uint[] calldata slippageallowed\\n    ) external onlyOwner nonReentrant {\\n        require(state.soldprevafterupdate, \\\"all tokens not sold yet\\\");\\n        require(\\n            amount <= IERC20(ptoken).balanceOf(address(this)),\\n            \\\"Amount should be less than balance\\\"\\n        );\\n        uint[] memory amounts;\\n\\n        amounts = _purchase(amount, slippageallowed);\\n        if (\\n            checkBalanceByToken(ptoken, address(this)) <\\n            minimumPtokenForPurchase\\n        ) {\\n            state.updated = false;\\n            state.soldprevafterupdate = false;\\n        }\\n        emit rebalancePurchaseEvent(amount, amounts, ptoken, tokens);\\n    }\\n\\n    /// @notice This function will check the supplied inputs, creates a new index fund contract\\n    ///inside the indexInstanceArray\\n    ///@param _index The structure containing data for the index fund contract\\n    ///@param _dex The address of the dex contract\\n    ///@param _feedata The structure containing the fee data for the contract\\n    ///@param minPtokenVal The minimum value of ptoken left that allow the purchase state to be true\\n    function initialize(\\n        IndexData calldata _index,\\n        address _dex,\\n        FeeData memory _feedata,\\n        uint minPtokenVal\\n    ) external initializer {\\n        percentages = _index._percentages;\\n        tokens = _index._tokens;\\n        maxDeposit = _index._thresholdamount;\\n        depositEndTime = block.timestamp + _index._depositendingtime;\\n        maturityTime = _index._indexendingtime;\\n        dex = _dex;\\n        ptoken = _index._ptoken;\\n        feeData = _feedata;\\n        minimumPtokenForPurchase = minPtokenVal;\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    ///@notice will return the purchase token for the index contract\\n    function getPurchaseToken() external view returns (address _ptoken) {\\n        _ptoken = ptoken;\\n    }\\n\\n    ///@notice it will return the deposit of the user\\n    ///@param depositer the address of the depositor\\n    function getDepositByUser(address depositer) public view returns (uint) {\\n        return Users[depositer].amount;\\n    }\\n\\n    ///@notice it will distribute the ptoken to the number of withdrawers before purchase state\\n    ///@param numofwithdrawers the first n number of withdrawers that we want to distribute before purchase\\n    function distributeBeforePurchase(\\n        uint numofwithdrawers\\n    ) external onlyOwner beforePurchasedCheck nonReentrant {\\n        uint lengthdepositors = depositors.length;\\n\\n        require(\\n            numofwithdrawers + totalWithdrawals <= lengthdepositors,\\n            \\\"Greater than number of withdrawers\\\"\\n        );\\n\\n        uint _totalbalance = totalDepositAfterFee;\\n\\n        uint percentage;\\n\\n        address[] memory _depositors = new address[](lengthdepositors);\\n\\n        _depositors = depositors;\\n\\n        uint i = totalWithdrawals;\\n\\n        for (; i < numofwithdrawers + totalWithdrawals; i++) {\\n            percentage =\\n                (Users[depositors[i]].amount * precisionHelper) /\\n                totalDeposit;\\n\\n            IERC20(ptoken).safeTransfer(\\n                _depositors[i],\\n                (percentage * _totalbalance) / precisionHelper\\n            );\\n        }\\n\\n        totalWithdrawals = i;\\n        if (totalWithdrawals == lengthdepositors) {\\n            state.distributeBeforePurchased = true;\\n        }\\n        emit distributebeforepurchaseEvent(numofwithdrawers);\\n    }\\n\\n    ///@notice it will update the dex address\\n    ///@param _dex the address of the dex\\n    function updateDex(address _dex) external onlyOwner {\\n        dex = _dex;\\n    }\\n\\n    ///@notice the number of users left to withdraw\\n    function userLeftToWithdraw() external view returns (uint users) {\\n        return depositors.length - totalWithdrawals;\\n    }\\n\\n    ///@notice updates the purchase state\\n    function updatePurchaseState() external onlyOwner nonReentrant {\\n        maturityTime += block.timestamp;\\n        state.purchased = true;\\n    }\\n\\n    ///@notice udpates the updated state\\n    function updateTokenUpdateState() external onlyOwner nonReentrant {\\n        state.updated = true;\\n    }\\n\\n    ///@notice updates rebalance purchase state\\n    function updateRebalancePurchaseState() external onlyOwner nonReentrant {\\n        state.updated = false;\\n        state.soldprevafterupdate = false;\\n    }\\n\\n    ///@notice updates sell state\\n    function updateSellState() external onlyOwner nonReentrant {\\n        totalptokenaftersell = checkBalanceByToken(ptoken, address(this));\\n        state.sold = true;\\n    }\\n\\n    ///@notice udpates the rebalance sell state\\n    function updateRebalanceSellState() external onlyOwner nonReentrant {\\n        state.soldprevafterupdate = true;\\n    }\\n\\n    ///@notice returns balance of the caller address given token address\\n    ///@param _token the adddress of the token of which we want to check balance of\\n    ///@param _whose the address of which we want to check balance of\\n    function checkBalanceByToken(\\n        address _token,\\n        address _whose\\n    ) internal view returns (uint) {\\n        return IERC20(_token).balanceOf(_whose);\\n    }\\n\\n    ///@notice returns current percentages\\n    function currentPercentageArray()\\n        external\\n        view\\n        returns (uint16[] memory _percentages)\\n    {\\n        _percentages = percentages;\\n    }\\n\\n    ///@notice returns previous percentages\\n    function previousPercentageArray()\\n        external\\n        view\\n        returns (uint16[] memory _percentages)\\n    {\\n        _percentages = previousPercentages;\\n    }\\n\\n    ///@notice returns current tokens length\\n    function tokensLength() external view returns (uint tokelength) {\\n        tokelength = tokens.length;\\n    }\\n\\n    ///@notice returns current tokens\\n    function indexTokens() external view returns (address[] memory _tokens) {\\n        _tokens = tokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexStruct.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IndexStruct {\\n    struct FeeData {\\n        address managementFeeAddress;\\n        address performanceFeeAddress;\\n        uint256 managementFeeBasisPoint;\\n        uint256 performanceFeeBasisPoint;\\n    }\\n    ///structure for the index state\\n    struct State {\\n        bool purchased;\\n        bool updated;\\n        bool soldprevafterupdate;\\n        bool staked;\\n        bool unstaked;\\n        bool rewardtokensold;\\n        bool sold;\\n        bool performancefeestransfer;\\n        bool distributeBeforePurchased;\\n    }\\n\\n    struct Depositor {\\n        uint amount;\\n        bool status;\\n    }\\n\\n    struct IndexData {\\n        string _reference;\\n        uint16[] _percentages;\\n        address[] _tokens;\\n        uint256 _depositendingtime;\\n        uint256 _indexendingtime;\\n        address _ptoken;\\n        uint256 _thresholdamount;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"depositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberofwithdrawers\",\"type\":\"uint256\"}],\"name\":\"distributeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberofwithdrawers\",\"type\":\"uint256\"}],\"name\":\"distributebeforepurchaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountout\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currenttokens\",\"type\":\"address[]\"}],\"name\":\"purchaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountout\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currentokens\",\"type\":\"address[]\"}],\"name\":\"rebalancePurchaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsin\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsout\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountoutsum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ptoken\",\"type\":\"address\"}],\"name\":\"rebalanceSellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsin\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsout\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountoutsum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currenttokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ptoken\",\"type\":\"address\"}],\"name\":\"sellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"percentagescurrent\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"percentagesprevious\",\"type\":\"uint16[]\"}],\"name\":\"updateIndexFundEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentPercentageArray\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_percentages\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numofwithdrawers\",\"type\":\"uint256\"}],\"name\":\"distributeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numofwithdrawers\",\"type\":\"uint256\"}],\"name\":\"distributeBeforePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"managementFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"performanceFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managementFeeBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeBasisPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"getDepositByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchaseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_ptoken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_reference\",\"type\":\"string\"},{\"internalType\":\"uint16[]\",\"name\":\"_percentages\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_depositendingtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexendingtime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ptoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdamount\",\"type\":\"uint256\"}],\"internalType\":\"struct IndexStruct.IndexData\",\"name\":\"_index\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"managementFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"performanceFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managementFeeBasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeBasisPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct IndexStruct.FeeData\",\"name\":\"_feedata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minPtokenVal\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumPtokenForPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percentages\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performaneFeesTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precisionHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousPercentageArray\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_percentages\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"previousPercentages\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ptoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slippageallowed\",\"type\":\"uint256[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slippageallowed\",\"type\":\"uint256[]\"}],\"name\":\"rebalancePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slippageallowed\",\"type\":\"uint256[]\"}],\"name\":\"rebalanceSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_slippageallowed\",\"type\":\"uint256[]\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"purchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soldprevafterupdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rewardtokensold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"performancefeestransfer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"distributeBeforePurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancearray\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokelength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalptokenaftersell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_percentages\",\"type\":\"uint16[]\"}],\"name\":\"udpateIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"updateDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePurchaseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRebalancePurchaseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRebalanceSellState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSellState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTokenUpdateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLeftToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"users\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Index", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}