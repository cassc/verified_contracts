{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/contract/RocketBase.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Rocket Pool\\n/// @author David Rugendyke\\n\\nabstract contract RocketBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    RocketStorageInterface rocketStorage = RocketStorageInterface(address(0));\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered minipool\\n    */\\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"minipool.exists\\\", _minipoolAddress))), \\\"Invalid minipool\\\");\\n        _;\\n    }\\n    \\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == rocketStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Rocket Storage address\\n    constructor(RocketStorageInterface _rocketStorageAddress) {\\n        // Update the contract address\\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Rocket Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\\n\\n    /// @dev Storage arithmetic methods\\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\\n}\\n\"\r\n    },\r\n    \"contracts/types/SettingType.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nenum SettingType {\\n  UINT256,\\n  BOOL,\\n  ADDRESS,\\n  STRING,\\n  BYTES,\\n  BYTES32,\\n  INT256\\n}\\n\"\r\n    },\r\n    \"contracts/interface/dao/protocol/RocketDAOProtocolInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"../../../types/SettingType.sol\\\";\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProtocolInterface {\\n    function getMemberLastProposalTime(address _nodeAddress) external view returns (uint256);\\n    function getBootstrapModeDisabled() external view returns (bool);\\n    function bootstrapSettingMulti(string[] memory _settingContractNames, string[] memory _settingPaths, SettingType[] memory _types, bytes[] memory _values) external;\\n    function bootstrapSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) external;\\n    function bootstrapSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) external;\\n    function bootstrapSettingAddress(string memory _settingContractName, string memory _settingPath, address _value) external;\\n    function bootstrapSettingClaimers(uint256 _trustedNodePerc, uint256 _protocolPerc, uint256 _nodePerc) external;\\n    function bootstrapSpendTreasury(string memory _invoiceID, address _recipientAddress, uint256 _amount) external;\\n    function bootstrapTreasuryNewContract(string memory _contractName, address _recipientAddress, uint256 _amountPerPeriod, uint256 _periodLength, uint256 _startTime, uint256 _numPeriods) external;\\n    function bootstrapTreasuryUpdateContract(string memory _contractName, address _recipientAddress, uint256 _amountPerPeriod, uint256 _periodLength, uint256 _numPeriods) external;\\n    function bootstrapSecurityInvite(string memory _id, address _memberAddress) external;\\n    function bootstrapSecurityKick(address _memberAddress) external;\\n    function bootstrapDisable(bool _confirmDisableBootstrapMode) external;\\n    function bootstrapEnableGovernance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/dao/protocol/RocketDAOProtocolProposalsInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >0.5.0 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"../../../types/SettingType.sol\\\";\\n\\ninterface RocketDAOProtocolProposalsInterface {\\n    function proposalSettingMulti(string[] memory _settingContractNames, string[] memory _settingPaths, SettingType[] memory _types, bytes[] memory _data) external;\\n    function proposalSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) external;\\n    function proposalSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) external;\\n    function proposalSettingAddress(string memory _settingContractName, string memory _settingPath, address _value) external;\\n    function proposalSettingRewardsClaimers(uint256 _trustedNodePercent, uint256 _protocolPercent, uint256 _nodePercent) external;\\n\\n    function proposalTreasuryOneTimeSpend(string memory _invoiceID, address _recipientAddress, uint256 _amount) external;\\n    function proposalTreasuryNewContract(string memory _contractName, address _recipientAddress, uint256 _amountPerPeriod, uint256 _periodLength, uint256 _startTime, uint256 _numPeriods) external;\\n    function proposalTreasuryUpdateContract(string memory _contractName, address _recipientAddress, uint256 _amountPerPeriod, uint256 _periodLength, uint256 _numPeriods) external;\\n\\n    function proposalSecurityInvite(string memory _id, address _memberAddress) external;\\n    function proposalSecurityKick(address _memberAddress) external;\\n    function proposalSecurityKickMulti(address[] calldata _memberAddresses) external;\\n    function proposalSecurityReplace(address _existingMemberAddress, string calldata _id, address _newMemberAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/contract/dao/protocol/RocketDAOProtocol.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.18;\\npragma abicoder v2;\\n\\nimport \\\"../../RocketBase.sol\\\";\\nimport \\\"../../../interface/dao/protocol/RocketDAOProtocolInterface.sol\\\";\\nimport \\\"../../../interface/dao/protocol/RocketDAOProtocolProposalsInterface.sol\\\";\\nimport \\\"../../../types/SettingType.sol\\\";\\n\\n/// @notice The Rocket Pool Protocol DAO\\ncontract RocketDAOProtocol is RocketBase, RocketDAOProtocolInterface {\\n\\n    // Events\\n    event BootstrapSettingMulti(string[] settingContractNames, string[] settingPaths, SettingType[] types, bytes[] values, uint256 time);\\n    event BootstrapSettingUint(string settingContractName, string settingPath, uint256 value, uint256 time);\\n    event BootstrapSettingBool(string settingContractName, string settingPath, bool value, uint256 time);\\n    event BootstrapSettingAddress(string settingContractName, string settingPath, address value, uint256 time);\\n    event BootstrapSettingClaimers(uint256 trustedNodePercent, uint256 protocolPercent, uint256 nodePercent, uint256 time);\\n    event BootstrapSpendTreasury(string invoiceID, address recipientAddress, uint256 amount, uint256 time);\\n    event BootstrapTreasuryNewContract(string contractName, address recipientAddress, uint256 amountPerPeriod, uint256 periodLength, uint256 startTime, uint256 numPeriods, uint256 time);\\n    event BootstrapTreasuryUpdateContract(string contractName, address recipientAddress, uint256 amountPerPeriod, uint256 periodLength, uint256 numPeriods, uint256 time);\\n    event BootstrapSecurityInvite(string id, address memberAddress, uint256 time);\\n    event BootstrapSecurityKick(address memberAddress, uint256 time);\\n    event BootstrapDisabled(uint256 time);\\n    event BootstrapProtocolDAOEnabled(uint256 block, uint256 time);\\n\\n    // The namespace for any data stored in the network DAO (do not change)\\n    string constant internal daoNameSpace = \\\"dao.protocol.\\\";\\n\\n    // Only allow bootstrapping when enabled\\n    modifier onlyBootstrapMode() {\\n        require(getBootstrapModeDisabled() == false, \\\"Bootstrap mode not engaged\\\");\\n        _;\\n    }\\n\\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\\n        version = 2;\\n    }\\n\\n    /**** DAO Properties **************/\\n\\n    /// @notice Returns true if bootstrap mode is disabled\\n    function getBootstrapModeDisabled() override public view returns (bool) {\\n        return getBool(keccak256(abi.encodePacked(daoNameSpace, \\\"bootstrapmode.disabled\\\")));\\n    }\\n\\n    /// @notice Get the last time this user made a proposal\\n    function getMemberLastProposalTime(address _nodeAddress) override external view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.proposal.lasttime\\\", _nodeAddress)));\\n    }\\n\\n    /**** Bootstrapping ***************/\\n    // While bootstrap mode is engaged, RP can change settings alongside the DAO. When disabled, only DAO will be able to control settings\\n\\n    /// @notice Bootstrap mode - multi Setting\\n    function bootstrapSettingMulti(string[] memory _settingContractNames, string[] memory _settingPaths, SettingType[] memory _types, bytes[] memory _values) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSettingMulti(_settingContractNames, _settingPaths, _types, _values);\\n        emit BootstrapSettingMulti(_settingContractNames, _settingPaths, _types, _values, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Uint Setting\\n    function bootstrapSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSettingUint(_settingContractName, _settingPath, _value);\\n        emit BootstrapSettingUint(_settingContractName, _settingPath, _value, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Bool Setting\\n    function bootstrapSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSettingBool(_settingContractName, _settingPath, _value);\\n        emit BootstrapSettingBool(_settingContractName, _settingPath, _value, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Address Setting\\n    function bootstrapSettingAddress(string memory _settingContractName, string memory _settingPath, address _value) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSettingAddress(_settingContractName, _settingPath, _value);\\n        emit BootstrapSettingAddress(_settingContractName, _settingPath, _value, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Set a claiming contract to receive a % of RPL inflation rewards\\n    function bootstrapSettingClaimers(uint256 _trustedNodePercent, uint256 _protocolPercent, uint256 _nodePercent) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSettingRewardsClaimers(_trustedNodePercent, _protocolPercent, _nodePercent);\\n        emit BootstrapSettingClaimers(_trustedNodePercent, _protocolPercent, _nodePercent, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Spend DAO treasury\\n    function bootstrapSpendTreasury(string memory _invoiceID, address _recipientAddress, uint256 _amount) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalTreasuryOneTimeSpend(_invoiceID, _recipientAddress, _amount);\\n        emit BootstrapSpendTreasury(_invoiceID, _recipientAddress, _amount, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - New treasury contract\\n    function bootstrapTreasuryNewContract(string memory _contractName, address _recipientAddress, uint256 _amountPerPeriod, uint256 _periodLength, uint256 _startTime, uint256 _numPeriods) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalTreasuryNewContract(_contractName, _recipientAddress, _amountPerPeriod, _periodLength, _startTime, _numPeriods);\\n        emit BootstrapTreasuryNewContract(_contractName, _recipientAddress, _amountPerPeriod, _periodLength, _startTime, _numPeriods, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Update treasury contract\\n    function bootstrapTreasuryUpdateContract(string memory _contractName, address _recipientAddress, uint256 _amountPerPeriod, uint256 _periodLength, uint256 _numPeriods) override external  onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalTreasuryUpdateContract(_contractName, _recipientAddress, _amountPerPeriod, _periodLength, _numPeriods);\\n        emit BootstrapTreasuryUpdateContract(_contractName, _recipientAddress, _amountPerPeriod, _periodLength, _numPeriods, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Invite security council member\\n    function bootstrapSecurityInvite(string memory _id, address _memberAddress) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSecurityInvite(_id, _memberAddress);\\n        emit BootstrapSecurityInvite(_id, _memberAddress, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Kick security council member\\n    function bootstrapSecurityKick(address _memberAddress) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        RocketDAOProtocolProposalsInterface(getContractAddress(\\\"rocketDAOProtocolProposals\\\")).proposalSecurityKick(_memberAddress);\\n        emit BootstrapSecurityKick(_memberAddress, block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Disable RP Access (only RP can call this to hand over full control to the DAO)\\n    function bootstrapDisable(bool _confirmDisableBootstrapMode) override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        // Prevent disabling bootstrap if on-chain governance has not been enabled\\n        require(getUint(keccak256(abi.encodePacked(\\\"protocol.dao.enabled.block\\\"))) > 0, \\\"On-chain governance must be enabled first\\\");\\n        // Disable bootstrap\\n        require(_confirmDisableBootstrapMode == true, \\\"You must confirm disabling bootstrap mode, it can only be done once!\\\");\\n        setBool(keccak256(abi.encodePacked(daoNameSpace, \\\"bootstrapmode.disabled\\\")), true);\\n        emit BootstrapDisabled(block.timestamp);\\n    }\\n\\n    /// @notice Bootstrap mode - Enables on-chain governance proposals\\n    function bootstrapEnableGovernance() override external onlyGuardian onlyBootstrapMode onlyLatestContract(\\\"rocketDAOProtocol\\\", address(this)) {\\n        setUint(keccak256(abi.encodePacked(\\\"protocol.dao.enabled.block\\\")), block.number);\\n        emit BootstrapProtocolDAOEnabled(block.number, block.timestamp);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapProtocolDAOEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSecurityInvite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSecurityKick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settingContractName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settingPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSettingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settingContractName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settingPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSettingBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trustedNodePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSettingClaimers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"settingContractNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"settingPaths\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"enum SettingType[]\",\"name\":\"types\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSettingMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settingContractName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settingPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSettingUint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"invoiceID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapSpendTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapTreasuryNewContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BootstrapTreasuryUpdateContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_confirmDisableBootstrapMode\",\"type\":\"bool\"}],\"name\":\"bootstrapDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEnableGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"bootstrapSecurityInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"bootstrapSecurityKick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_settingContractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_settingPath\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"bootstrapSettingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_settingContractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_settingPath\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"bootstrapSettingBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trustedNodePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodePercent\",\"type\":\"uint256\"}],\"name\":\"bootstrapSettingClaimers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_settingContractNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_settingPaths\",\"type\":\"string[]\"},{\"internalType\":\"enum SettingType[]\",\"name\":\"_types\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_values\",\"type\":\"bytes[]\"}],\"name\":\"bootstrapSettingMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_settingContractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_settingPath\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bootstrapSettingUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_invoiceID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bootstrapSpendTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numPeriods\",\"type\":\"uint256\"}],\"name\":\"bootstrapTreasuryNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numPeriods\",\"type\":\"uint256\"}],\"name\":\"bootstrapTreasuryUpdateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBootstrapModeDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getMemberLastProposalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RocketDAOProtocol", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "15000", "ConstructorArguments": "0000000000000000000000001d8f8f00cfa6758d7bE78336684788Fb0ee0Fa46", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}