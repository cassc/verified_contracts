{"SourceCode": "// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// File: newstaking.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingContract is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public havocToken;\r\n    uint256 public constant PERCENT_DIVIDER = 10000;\r\n\r\n    bool public paused;\r\n    uint256 public totalUsers;\r\n    uint256 public penaltyPercent;\r\n    uint256[3] public totalStakedUsers;\r\n    uint256[3] public totalStakedAmount;\r\n    uint256[3] public totalRewardAmount;\r\n    uint256[3] public totalUnstakedAmount;\r\n\r\n    uint256 public totalRewardCount;\r\n    uint256 public totalPlan1RewardCount;\r\n    uint256 public totalPlan2RewardCount;\r\n    uint256[3] public lockDuration;\r\n    mapping(uint256 => uint256) public totalAddedRewards; // plan => index => amount\r\n    mapping(uint256 => uint256) public totalAddedPlan1Bonus; // plan => index => amount\r\n    mapping(uint256 => uint256) public totalAddedPlan2Bonus; // plan => index => amount\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 endTime;\r\n        uint256 startTime;\r\n        uint256 unstakedAt;\r\n        uint256 lastClaimedAt;\r\n        uint256 lastClaimedCount;\r\n        uint256 lastClaimedBonus1;\r\n        uint256 lastClaimedBonus2;\r\n    }\r\n\r\n    struct User {\r\n        uint256 totalAmountStaked;\r\n        uint256 totalAmountUnstaked;\r\n        uint256 totalStakesCount;\r\n        uint256 lastClaimedBonus1;\r\n        uint256 lastClaimedBonus2;\r\n        uint256 prevRemainingBonus1;\r\n        uint256 prevRemainingBonus2;\r\n        uint256[3] stakeCounts;\r\n        uint256[3] lastClaimedCount;\r\n        uint256[3] lastUnstakedIndex;\r\n        uint256[3] prevRemainingReward;\r\n        mapping(uint256 => mapping(uint256 => Stake)) planStakes;\r\n    }\r\n\r\n    mapping(address => User) public userStakes;\r\n\r\n    struct StakeDetail {\r\n        uint256 totalUsers;\r\n        uint256 totalAmount;\r\n        uint256 addedAt;\r\n    }\r\n\r\n    mapping(uint256 => StakeDetail) public rewardStakeHistory;\r\n    mapping(uint256 => StakeDetail) public plan1BonusHistory;\r\n    mapping(uint256 => StakeDetail) public plan2BonusHistory;\r\n\r\n    event STAKED(address user, uint256 amount, uint256 plan, uint256 at);\r\n    event UNSTAKED(address user, uint256 amount, uint256 plan, uint256 at);\r\n    event REWARD_CLAIMED(address user, uint256 amount, uint256 at);\r\n    event REWARD_DEPOSITED(uint256 amount, uint256 index, uint256 at);\r\n\r\n    modifier notPaused() {\r\n        require(!paused, \"Temporarily Paused\");\r\n        _;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        havocToken = IERC20(0x9F94b198ce85C19A846C2B1a4D523f40A747a850);\r\n        penaltyPercent = 500;\r\n        lockDuration[0] = 30 days;\r\n        lockDuration[1] = 60 days;\r\n        lockDuration[2] = 90 days;\r\n    }\r\n\r\n    function stake(uint256 _plan, uint256 _amount) external {\r\n        require(_plan < lockDuration.length, \"Invalid plan\");\r\n        require(_amount != 0, \"Amount must be greater than 0\");\r\n\r\n        User storage user = userStakes[msg.sender];\r\n        // Update last Reward\r\n        havocToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        // uint256 _curReward = claimableReward(msg.sender, _plan);\r\n        // user.prevRemainingReward[_plan] = _curReward;\r\n        // userStakes[msg.sender].lastClaimedCount[_plan] = totalRewardCount;\r\n\r\n        // update user\r\n        user.totalStakesCount++;\r\n        uint256 currentIndex = ++user.stakeCounts[_plan];\r\n        Stake storage _currentStake = user.planStakes[_plan][currentIndex];\r\n        _currentStake.amount = _amount;\r\n        _currentStake.startTime = block.timestamp;\r\n        _currentStake.endTime = block.timestamp + lockDuration[_plan];\r\n\r\n        // update total staked info\r\n        if (user.totalStakesCount == 1) {\r\n            totalUsers++;\r\n        }\r\n\r\n        if (user.stakeCounts[_plan] == 1) {\r\n            totalStakedUsers[_plan]++;\r\n        }\r\n\r\n        user.totalAmountStaked += _amount;\r\n        totalStakedAmount[_plan] += _amount;\r\n\r\n        emit STAKED(msg.sender, _amount, _plan, block.timestamp);\r\n    }\r\n\r\n    function unstakeUnlocked(\r\n        uint256 _plan,\r\n        uint256 _index\r\n    ) external nonReentrant notPaused {\r\n        User storage user = userStakes[msg.sender];\r\n        require(\r\n            user.stakeCounts[_plan] != 0 && _index <= user.stakeCounts[_plan],\r\n            \"Plan stakes not found!\"\r\n        );\r\n        Stake storage stakeInfo = user.planStakes[_plan][_index];\r\n        require(stakeInfo.unstakedAt == 0, \"Already unstaked!\");\r\n\r\n        uint256 totalStakedHavocs = stakeInfo.amount;\r\n        // Claim reward if available\r\n        if (block.timestamp < stakeInfo.endTime) {\r\n            stakeInfo.lastClaimedAt = block.timestamp;\r\n            stakeInfo.lastClaimedCount = totalRewardCount;\r\n            totalStakedHavocs -=\r\n                (stakeInfo.amount * penaltyPercent) /\r\n                PERCENT_DIVIDER;\r\n        } else {\r\n            _withdrawReward(msg.sender, _plan, _index);\r\n        }\r\n\r\n        stakeInfo.unstakedAt = block.timestamp;\r\n        user.lastUnstakedIndex[_plan] = _index;\r\n        havocToken.safeTransfer(msg.sender, totalStakedHavocs);\r\n\r\n        // update total staked info\r\n        user.totalAmountUnstaked += stakeInfo.amount;\r\n        totalUnstakedAmount[_plan] += stakeInfo.amount;\r\n        emit UNSTAKED(msg.sender, totalStakedHavocs, _plan, block.timestamp);\r\n    }\r\n\r\n    function claimReward(\r\n        uint256 _plan,\r\n        uint256 _index\r\n    ) external nonReentrant notPaused {\r\n        User storage user = userStakes[msg.sender];\r\n        require(\r\n            user.stakeCounts[_plan] != 0 && _index <= user.stakeCounts[_plan],\r\n            \"Stakes not found!\"\r\n        );\r\n\r\n        uint256 rewardSent = _withdrawReward(msg.sender, _plan, _index);\r\n        require(rewardSent != 0, \"Nothing to withdraw!\");\r\n        emit REWARD_CLAIMED(msg.sender, rewardSent, block.timestamp);\r\n    }\r\n\r\n    function claimPlan1Bonus(uint256 _index) external nonReentrant notPaused {\r\n        User storage user = userStakes[msg.sender];\r\n        require(\r\n            user.stakeCounts[1] != 0 && _index <= user.stakeCounts[1],\r\n            \"Stakes not found!\"\r\n        );\r\n\r\n        uint256 rewardSent = _withdrawBonus(msg.sender, 1, _index);\r\n        require(rewardSent != 0, \"Nothing to withdraw!\");\r\n        emit REWARD_CLAIMED(msg.sender, rewardSent, block.timestamp);\r\n    }\r\n\r\n    function claimPlan2Bonus(uint256 _index) external nonReentrant notPaused {\r\n        User storage user = userStakes[msg.sender];\r\n        require(\r\n            user.stakeCounts[2] != 0 && _index <= user.stakeCounts[2],\r\n            \"Stakes not found!\"\r\n        );\r\n\r\n        uint256 rewardSent = _withdrawBonus(msg.sender, 2, _index);\r\n        require(rewardSent != 0, \"Nothing to withdraw!\");\r\n        emit REWARD_CLAIMED(msg.sender, rewardSent, block.timestamp);\r\n    }\r\n\r\n    function _withdrawReward(\r\n        address _user,\r\n        uint256 _plan,\r\n        uint256 _index\r\n    ) private returns (uint256 rewardAmount) {\r\n        rewardAmount = claimableReward(_user, _plan, _index);\r\n\r\n        userStakes[_user].prevRemainingReward[_plan] = 0;\r\n        userStakes[_user].planStakes[_plan][_index].lastClaimedAt = block\r\n            .timestamp;\r\n        userStakes[_user]\r\n        .planStakes[_plan][_index].lastClaimedCount = totalRewardCount;\r\n        // update last claim\r\n        if (rewardAmount != 0) {\r\n            uint256 balance = address(this).balance;\r\n            require(balance >= rewardAmount, \"Insufficient reward in pool\");\r\n\r\n            payable(_user).transfer(rewardAmount);\r\n            totalRewardAmount[_plan] += rewardAmount;\r\n        }\r\n    }\r\n\r\n    function _withdrawBonus(\r\n        address _user,\r\n        uint256 _plan,\r\n        uint256 _index\r\n    ) private returns (uint256 rewardAmount) {\r\n        require(_plan == 1 || _plan == 2, \"Wrong plan\");\r\n        if (_plan == 1) {\r\n            rewardAmount = claimablePlan1Bonus(_user, _index);\r\n            userStakes[_user].prevRemainingBonus1 = 0;\r\n            userStakes[_user]\r\n            .planStakes[_plan][_index]\r\n                .lastClaimedBonus1 = totalPlan1RewardCount;\r\n        } else {\r\n            rewardAmount = claimablePlan2Bonus(_user, _index);\r\n            userStakes[_user].prevRemainingBonus2 = 0;\r\n            userStakes[_user]\r\n            .planStakes[_plan][_index]\r\n                .lastClaimedBonus2 = totalPlan2RewardCount;\r\n        }\r\n\r\n        // update last claim\r\n        if (rewardAmount != 0) {\r\n            require(\r\n                address(this).balance >= rewardAmount,\r\n                \"Insufficient reward in pool\"\r\n            );\r\n\r\n            payable(_user).transfer(rewardAmount);\r\n            totalRewardAmount[_plan] += rewardAmount;\r\n        }\r\n    }\r\n\r\n    function claimableReward(\r\n        address _user,\r\n        uint256 _plan,\r\n        uint256 _index\r\n    ) public view returns (uint256) {\r\n        User storage user = userStakes[_user];\r\n        if (_index == 0 && _index > user.stakeCounts[_plan]) {\r\n            return 0;\r\n        }\r\n\r\n        Stake storage userStake = user.planStakes[_plan][_index];\r\n        uint256 stakedAmount = userStake.amount;\r\n        if (stakedAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 totalReward;\r\n        // Check if token is set as reward\r\n        uint256 totalAddedRewardCount = totalRewardCount;\r\n        uint256 lastUserClaimed = userStake.lastClaimedCount;\r\n        for (uint256 k = lastUserClaimed + 1; k <= totalAddedRewardCount; k++) {\r\n            uint256 totalAddedReward = totalAddedRewards[k];\r\n\r\n            StakeDetail memory _detail = rewardStakeHistory[k];\r\n            if (\r\n                (_detail.addedAt > userStake.startTime &&\r\n                    _detail.addedAt <= userStake.endTime) &&\r\n                _detail.totalAmount != 0\r\n            ) {\r\n                uint256 _claimableReward;\r\n                uint256 currentPercentage = (stakedAmount * PERCENT_DIVIDER) /\r\n                    _detail.totalAmount;\r\n                _claimableReward =\r\n                    (totalAddedReward * currentPercentage) /\r\n                    PERCENT_DIVIDER;\r\n\r\n                totalReward += _claimableReward;\r\n            }\r\n        }\r\n        // totalReward += user.prevRemainingReward[_plan];\r\n\r\n        return totalReward;\r\n    }\r\n\r\n    function claimablePlan1Bonus(\r\n        address _user,\r\n        uint256 _index\r\n    ) public view returns (uint256 totalReward) {\r\n        User storage user = userStakes[_user];\r\n        if (_index == 0 && _index > user.stakeCounts[1]) {\r\n            return 0;\r\n        }\r\n\r\n        Stake storage userStake = user.planStakes[1][_index];\r\n        uint256 stakedAmount = userStake.amount;\r\n\r\n        // Check if token is set as reward\r\n        uint256 totalAddedRewardCount = totalPlan1RewardCount;\r\n        uint256 lastUserClaimed = userStake.lastClaimedBonus1;\r\n        for (uint256 k = lastUserClaimed + 1; k <= totalAddedRewardCount; k++) {\r\n            uint256 totalAddedReward = totalAddedPlan1Bonus[k];\r\n\r\n            StakeDetail memory _detail = plan1BonusHistory[k];\r\n            if (\r\n                (_detail.addedAt > userStake.startTime &&\r\n                    _detail.addedAt <= userStake.endTime) &&\r\n                _detail.totalAmount != 0\r\n            ) {\r\n                uint256 _claimableReward;\r\n                uint256 currentPercentage = (stakedAmount * PERCENT_DIVIDER) /\r\n                    _detail.totalAmount;\r\n                _claimableReward =\r\n                    (totalAddedReward * currentPercentage) /\r\n                    PERCENT_DIVIDER;\r\n\r\n                totalReward += _claimableReward;\r\n            }\r\n        }\r\n\r\n        return totalReward;\r\n    }\r\n\r\n    function claimablePlan2Bonus(\r\n        address _user,\r\n        uint256 _index\r\n    ) public view returns (uint256 totalReward) {\r\n        User storage user = userStakes[_user];\r\n        if (_index == 0 && _index > user.stakeCounts[2]) {\r\n            return 0;\r\n        }\r\n        Stake storage userStake = user.planStakes[2][_index];\r\n        uint256 stakedAmount = userStake.amount;\r\n\r\n        // Check if token is set as reward\r\n        uint256 totalAddedRewardCount = totalPlan2RewardCount;\r\n        uint256 lastUserClaimed = userStake.lastClaimedBonus2;\r\n        for (uint256 k = lastUserClaimed + 1; k <= totalAddedRewardCount; k++) {\r\n            uint256 totalAddedReward = totalAddedPlan2Bonus[k];\r\n\r\n            StakeDetail memory _detail = plan2BonusHistory[k];\r\n            if (\r\n                (_detail.addedAt > userStake.startTime &&\r\n                    _detail.addedAt <= userStake.endTime) &&\r\n                _detail.totalAmount != 0\r\n            ) {\r\n                uint256 _claimableReward;\r\n                uint256 currentPercentage = (stakedAmount * PERCENT_DIVIDER) /\r\n                    _detail.totalAmount;\r\n                _claimableReward =\r\n                    (totalAddedReward * currentPercentage) /\r\n                    PERCENT_DIVIDER;\r\n\r\n                totalReward += _claimableReward;\r\n            }\r\n        }\r\n\r\n        return totalReward;\r\n    }\r\n\r\n    function calculateTotalStakedInfo(\r\n        address _usr,\r\n        uint256 _plan\r\n    ) public view returns (uint256 stakedAmount) {\r\n        for (uint256 i = 1; i <= userStakes[_usr].stakeCounts[_plan]; i++) {\r\n            if (userStakes[_usr].planStakes[_plan][i].unstakedAt == 0) {\r\n                Stake memory stakeInfo = userStakes[_usr].planStakes[_plan][i];\r\n                stakedAmount += stakeInfo.amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getStakeInfo(\r\n        address _usr,\r\n        uint256 _plan,\r\n        uint256 _index\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 staked,\r\n            uint256 stakeTime,\r\n            uint256 endTime,\r\n            uint256 unstakedAt\r\n        )\r\n    {\r\n        require(\r\n            _index != 0 && _index <= userStakes[_usr].stakeCounts[_plan],\r\n            \"Invalid index\"\r\n        );\r\n\r\n        return (\r\n            userStakes[_usr].planStakes[_plan][_index].amount,\r\n            userStakes[_usr].planStakes[_plan][_index].startTime,\r\n            userStakes[_usr].planStakes[_plan][_index].endTime,\r\n            userStakes[_usr].planStakes[_plan][_index].unstakedAt\r\n        );\r\n    }\r\n\r\n    function userStakeCounts(\r\n        address _user,\r\n        uint256 _plan\r\n    ) external view returns (uint256) {\r\n        return userStakes[_user].stakeCounts[_plan];\r\n    }\r\n\r\n    // Deposit rewards into the contract\r\n    function depositRewards() external payable onlyOwner {\r\n        require(msg.value != 0, \"Invalid amount\");\r\n\r\n        totalRewardCount += 1;\r\n        totalAddedRewards[totalRewardCount] = msg.value;\r\n\r\n        rewardStakeHistory[totalRewardCount].totalUsers = totalUsers;\r\n        uint256 stakedAmount = totalStakedAmount[0] +\r\n            totalStakedAmount[1] +\r\n            totalStakedAmount[2];\r\n        uint256 unstakedAmount = totalUnstakedAmount[0] +\r\n            totalUnstakedAmount[1] +\r\n            totalUnstakedAmount[2];\r\n        rewardStakeHistory[totalRewardCount].totalAmount =\r\n            stakedAmount -\r\n            unstakedAmount;\r\n        rewardStakeHistory[totalRewardCount].addedAt = block.timestamp;\r\n\r\n        emit REWARD_DEPOSITED(msg.value, totalRewardCount, block.timestamp);\r\n    }\r\n\r\n    // Deposit rewards into the contract\r\n    function depositPlan1Bonus() external payable onlyOwner {\r\n        require(msg.value != 0, \"Invalid amount\");\r\n\r\n        totalPlan1RewardCount += 1;\r\n        totalAddedPlan1Bonus[totalPlan1RewardCount] = msg.value;\r\n        plan1BonusHistory[totalPlan1RewardCount].totalUsers = totalUsers;\r\n\r\n        uint256 stakedAmount = totalStakedAmount[0] +\r\n            totalStakedAmount[1] +\r\n            totalStakedAmount[2];\r\n        uint256 unstakedAmount = totalUnstakedAmount[0] +\r\n            totalUnstakedAmount[1] +\r\n            totalUnstakedAmount[2];\r\n        plan1BonusHistory[totalPlan1RewardCount].totalAmount =\r\n            stakedAmount -\r\n            unstakedAmount;\r\n        plan1BonusHistory[totalPlan1RewardCount].addedAt = block.timestamp;\r\n\r\n        emit REWARD_DEPOSITED(\r\n            msg.value,\r\n            totalPlan1RewardCount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function depositPlan2Bonus() external payable onlyOwner {\r\n        require(msg.value != 0, \"Invalid amount\");\r\n\r\n        totalPlan2RewardCount += 1;\r\n        totalAddedPlan2Bonus[totalPlan2RewardCount] = msg.value;\r\n        plan2BonusHistory[totalPlan2RewardCount].totalUsers = totalUsers;\r\n\r\n        uint256 stakedAmount = totalStakedAmount[0] +\r\n            totalStakedAmount[1] +\r\n            totalStakedAmount[2];\r\n        uint256 unstakedAmount = totalUnstakedAmount[0] +\r\n            totalUnstakedAmount[1] +\r\n            totalUnstakedAmount[2];\r\n        plan2BonusHistory[totalPlan2RewardCount].totalAmount =\r\n            stakedAmount -\r\n            unstakedAmount;\r\n        plan2BonusHistory[totalPlan2RewardCount].addedAt = block.timestamp;\r\n\r\n        emit REWARD_DEPOSITED(\r\n            msg.value,\r\n            totalPlan2RewardCount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setLockDuration(uint256[3] memory duration) external onlyOwner {\r\n        lockDuration = duration;\r\n    }\r\n\r\n    function setPenaltyPercent(uint256 percent) external onlyOwner {\r\n        require(percent <= 100, \"Invalid penalty percent\");\r\n        penaltyPercent = percent;\r\n    }\r\n\r\n    function setStakingToken(IERC20 _token) external onlyOwner {\r\n        havocToken = _token;\r\n    }\r\n\r\n    function setPauseStatus(bool _pauseStatus) external onlyOwner {\r\n        paused = _pauseStatus;\r\n    }\r\n\r\n    function withdrawStuckTokens(\r\n        IERC20 _token,\r\n        address _receiver,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        _token.safeTransfer(_receiver, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"REWARD_CLAIMED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"REWARD_DEPOSITED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"STAKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"UNSTAKED\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"calculateTotalStakedInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimPlan1Bonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimPlan2Bonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimablePlan1Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimablePlan2Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPlan1Bonus\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPlan2Bonus\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"havocToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plan1BonusHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plan2BonusHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardStakeHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"duration\",\"type\":\"uint256[3]\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pauseStatus\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setPenaltyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAddedPlan1Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAddedPlan2Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAddedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlan1RewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlan2RewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalUnstakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unstakeUnlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"userStakeCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedBonus1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedBonus2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevRemainingBonus1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevRemainingBonus2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://742e3d52f6c676542a0cc00dab94162402b9e45d7e4f9b294d7fadb5b1a996f5"}