{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IUniswapV3Factory {\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n}\r\n\r\ninterface IUniswapV3Pool {\r\n    /// @notice The currently in range liquidity available to the pool\r\n    /// @dev This value has no relationship to the total liquidity across all ticks\r\n    function liquidity() external view returns (uint128);\r\n}\r\n\r\ninterface IERC20 {\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ncontract getPoolLiquidity {\r\n    address constant uniswapV3Factory = \r\n        address(0x1F98431c8aD98523631AE4a59f267346ea31F984);\r\n\r\n    uint24[] fee = [uint24(100), uint24(500), uint24(3000), uint24(10000)];\r\n\r\n    function getPoolLiquidityByInputToken(\r\n        address inputToken,\r\n        address outputToken\r\n    ) external view returns (\r\n        string memory inputTokenSymbol,\r\n        string memory outputTokenSymbol,\r\n        address[] memory poolAddress,\r\n        uint128[] memory poolLiquidity\r\n    ) {\r\n        inputTokenSymbol = IERC20(inputToken).symbol();\r\n        outputTokenSymbol = IERC20(outputToken).symbol();\r\n\r\n        address[] memory _poolAddress = new address[](4);\r\n        uint128[] memory _poolLiquidity = new uint128[](4);\r\n\r\n        for (uint i ; i < 4; i++) {\r\n            address _pool = \r\n                IUniswapV3Factory(uniswapV3Factory).getPool(\r\n                    inputToken, \r\n                    outputToken, \r\n                    fee[i]\r\n                );\r\n            _poolAddress[i] = _pool;\r\n            if (_pool != address(0)) {\r\n                _poolLiquidity[i] = IUniswapV3Pool(_pool).liquidity();\r\n            } else {\r\n                _poolLiquidity[i] = 0;\r\n            }\r\n        }\r\n\r\n        poolAddress = _poolAddress;\r\n        poolLiquidity = _poolLiquidity;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"getPoolLiquidityByInputToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"inputTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outputTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"poolAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"poolLiquidity\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "getPoolLiquidity", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b647a1328949cea53673db36e07193edb4e716628b73fe0d50ff314d8bdb5a11"}