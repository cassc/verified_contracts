{"SourceCode": "/**\r\n\r\nPresenting a groundbreaking innovation - the inaugural token contract featuring an integrated volume AI bot, Xvolumizer, and Xburn. \r\nThis exceptional contract encompasses two distinct bots: a volume bot that activates with each sell order, and a burn bot responsible for regularly reducing the token supply,\r\n resulting in a remarkable Fomo (Fear of Missing Out) effect. Undoubtedly, this tokenimics is unparalleled and holds the potential to skyrocket in value due to the ongoing supply burn. \r\nAlongside our xsnipe and other cutting-edge tools, this token stands as a colossal force in the world of cryptocurrencies. Welcome to the dawn of a new era, where AI and bot technology converge harmoniously.\r\n\r\nWebsite: https://xsniper.io\r\nTwitter: https://twitter.com/xsnipererc20\r\nTelegram: https://t.me/Xsniper_erc\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b > a) return(false, 0); return(true, a - b);}}\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\r\n        if(c / a != b) return(false, 0); return(true, c);}}\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b <= a, errorMessage); return a - b;}}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a / b;}}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a % b;}}}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface stakeIntegration {\r\n    function stakingWithdraw(address depositor, uint256 _amount) external;\r\n    function stakingDeposit(address depositor, uint256 _amount) external;\r\n}\r\n\r\ninterface tokenStaking {\r\n    function deposit(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ninterface AIVolumizer {\r\n    function setMaxAmount(uint256 max) external;\r\n    function setVolumePercentage(uint256 percent) external;\r\n    function volumeTokenManual() external;\r\n    function volumeTokenTransaction() external;\r\n    function swapGasBalance(uint256 percent) external;\r\n    function swapTokenBalance(uint256 percent) external;\r\n    function setParameters(address _token) external;\r\n    function rescueHubETH(address receiver, uint256 percent) external;\r\n    function rescueHubERC20(address token, address receiver, uint256 percent) external;\r\n    function amountTotalPurchased() external view returns (uint256);\r\n    function amountTotalETH() external view returns (uint256);\r\n    function totalVolume() external view returns (uint256);\r\n    function lastVolumeTokens() external view returns (uint256);\r\n    function lastVolumeTimestamp() external view returns (uint256);\r\n}\r\n\r\ninterface IFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract Xsniper is IERC20, tokenStaking, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = 'Xsniper';\r\n    string private constant _symbol = 'XS';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1000000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = ( _totalSupply * 100 ) / 10000;\r\n    uint256 public _maxWalletToken = ( _totalSupply * 100 ) / 10000;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping(address => bool) private isFeeExempt;\r\n    IRouter router;\r\n    address public pair;\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 100;\r\n    uint256 private developmentFee = 100;\r\n    uint256 private gasFee = 50;\r\n    uint256 private volumeFee = 50;\r\n    uint256 private totalFee = 2500;\r\n    uint256 private sellFee = 5000;\r\n    uint256 private transferFee = 0;\r\n    uint256 private denominator = 10000;\r\n    bool private swapEnabled = true;\r\n    bool private tradingAllowed = false;\r\n    bool public volumeToken = true;\r\n    bool private volumeTx;\r\n    uint256 public txGas = 500000;\r\n    uint256 private swapVolumeTimes;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    uint256 private swapVolumeAmount = 1;\r\n    uint256 private swapAmount = 1;\r\n    uint256 private swapThreshold = ( _totalSupply * 500 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    uint256 private minVolumeTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    mapping(address => uint256) public amountStaked;\r\n    uint256 public totalStaked; AIVolumizer volumizer;\r\n    stakeIntegration internal stakingContract;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal development_receiver = 0x8b4150A2019A4451AB2C7799e6D7BB8D01c96506; \r\n    address internal marketing_receiver = 0xb979F35eBC137fA435Be39357A7e42901BE2D69A;\r\n    address internal liquidity_receiver = 0xDbd95E27861ABa1240238Ebdb57F173af9e79f1A;\r\n    address internal burnWallet = 0xc102352DdE1f5E6aBbED5FdF74EDdB59419F0a38;\r\n    bool public burn = true;\r\n    uint256 public burnAmount = ( _totalSupply * 10000 ) / 100000;\r\n    uint256 public burnPercent = 100;\r\n    uint256 public burnTime;\r\n    uint256 public lastBurnTime;\r\n    uint256 public totalBurn;\r\n    uint256 public totalBurnEvents;\r\n    uint256 public burnInterval = 25 minutes;\r\n    bool currentEvent;\r\n    event Deposit(address indexed account, uint256 indexed amount, uint256 indexed timestamp);\r\n    event Withdraw(address indexed account, uint256 indexed amount, uint256 indexed timestamp);\r\n    event SetStakingAddress(address indexed stakingAddress, uint256 indexed timestamp);\r\n    event TradingEnabled(address indexed account, uint256 indexed timestamp);\r\n    event ExcludeFromFees(address indexed account, bool indexed isExcluded, uint256 indexed timestamp);\r\n    event SetInternalAddresses(address indexed marketing, address indexed liquidity, address indexed development, uint256 timestamp);\r\n    event SetSwapBackSettings(uint256 indexed swapAmount, uint256 indexed swapThreshold, uint256 indexed swapMinAmount, uint256 timestamp);\r\n    event SetParameters(uint256 indexed maxTxAmount, uint256 indexed maxWalletToken, uint256 indexed timestamp);\r\n    event SetStructure(uint256 indexed total, uint256 indexed sell, uint256 transfer, uint256 indexed timestamp);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        volumizer = AIVolumizer(0x8b4150A2019A4451AB2C7799e6D7BB8D01c96506);\r\n        burnTime = block.timestamp.add(burnInterval);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router;\r\n        pair = _pair;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[liquidity_receiver] = true;\r\n        isFeeExempt[marketing_receiver] = true;\r\n        isFeeExempt[development_receiver] = true;\r\n        isFeeExempt[address(DEAD)] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[burnWallet] = true;\r\n        isFeeExempt[address(volumizer)] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function availableBalance(address wallet) public view returns (uint256) {return _balances[wallet].sub(amountStaked[wallet]);}\r\n    function circulatingSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"ERC20: below available balance threshold\");\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        preTxCheck(sender, recipient, amount);\r\n        checkTradingAllowed(sender, recipient);\r\n        checkTxLimit(sender, recipient, amount);\r\n        checkMaxWallet(sender, recipient, amount);\r\n        swapbackCounters(sender, recipient, amount);\r\n        swapBack(sender, recipient);\r\n        swapVolume(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function deposit(uint256 amount) override external {\r\n        require(amount <= _balances[msg.sender].sub(amountStaked[msg.sender]), \"ERC20: Cannot stake more than available balance\");\r\n        stakingContract.stakingDeposit(msg.sender, amount);\r\n        amountStaked[msg.sender] = amountStaked[msg.sender].add(amount);\r\n        totalStaked = totalStaked.add(amount);\r\n        emit Deposit(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint256 amount) override external {\r\n        require(amount <= amountStaked[msg.sender], \"ERC20: Cannot unstake more than amount staked\");\r\n        stakingContract.stakingWithdraw(msg.sender, amount);\r\n        amountStaked[msg.sender] = amountStaked[msg.sender].sub(amount);\r\n        totalStaked = totalStaked.sub(amount);\r\n        emit Withdraw(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function setStakingAddress(address _staking) external onlyOwner {\r\n        stakingContract = stakeIntegration(_staking); isFeeExempt[_staking] = true;\r\n        emit SetStakingAddress(_staking, block.timestamp);\r\n    }\r\n\r\n    function setStructure(uint256 _liquidity, uint256 _marketing, uint256 _development, uint256 _gas, uint256 _volume, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        liquidityFee = _liquidity; marketingFee = _marketing; developmentFee = _development; volumeFee = _volume; gasFee = _gas;\r\n        totalFee = _total; sellFee = _sell; transferFee = _trans;\r\n        require(totalFee <= denominator && sellFee <= denominator && transferFee <= denominator, \"ERC20: invalid total entry%\");\r\n        emit SetStructure(_total, _sell, _trans, block.timestamp);\r\n    }\r\n\r\n    function setParameters(uint256 _buy, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = totalSupply().mul(_buy).div(uint256(10000));\r\n        uint256 newWallet = totalSupply().mul(_wallet).div(uint256(10000)); uint256 limit = totalSupply().mul(5).div(10000);\r\n        require(newTx >= limit && newWallet >= limit, \"ERC20: max TXs and max Wallet cannot be less than .5%\");\r\n        _maxTxAmount = newTx; _maxWalletToken = newWallet;\r\n        emit SetParameters(newTx, newWallet, block.timestamp);\r\n    }\r\n\r\n    function checkTradingAllowed(address sender, address recipient) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"ERC20: Trading is not allowed\");}\r\n    }\r\n\r\n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD) && !volumeTx){\r\n            require((_balances[recipient].add(amount)) <= _maxWalletToken, \"ERC20: exceeds maximum wallet amount.\");}\r\n    }\r\n\r\n    function swapbackCounters(address sender, address recipient, uint256 amount) internal {\r\n        if(recipient == pair && !isFeeExempt[sender] && amount >= minTokenAmount && !swapping && !volumeTx){swapTimes += uint256(1);}\r\n    }\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        if(amountStaked[sender] > uint256(0)){require((amount.add(amountStaked[sender])) <= _balances[sender], \"ERC20: exceeds maximum allowed not currently staked.\");}\r\n        if(!volumeTx){require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"ERC20: tx limit exceeded\");}\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (totalFee).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith, liquidity_receiver); }\r\n        uint256 marketingAmount = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmount > uint256(0)){payable(marketing_receiver).transfer(marketingAmount);}\r\n        uint256 gasAmount = unitBalance.mul(2).mul(gasFee);\r\n        if(gasAmount > uint256(0)){payable(address(volumizer)).transfer(gasAmount);}\r\n        uint256 eAmount = address(this).balance;\r\n        if(eAmount > uint256(0)){payable(development_receiver).transfer(eAmount);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount, address receiver) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(receiver),\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient) internal view returns (bool) {\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return !swapping && swapEnabled && tradingAllowed && !isFeeExempt[sender]\r\n            && recipient == pair && swapTimes >= swapAmount && aboveThreshold && !volumeTx;\r\n    }\r\n\r\n    function swapBack(address sender, address recipient) internal {\r\n        if(shouldSwapBack(sender, recipient)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\r\n    }\r\n    \r\n    function volumizing() external onlyOwner {\r\n        tradingAllowed = true;\r\n        emit TradingEnabled(msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setInternalAddresses(address _marketing, address _liquidity, address _development) external onlyOwner {\r\n        marketing_receiver = _marketing; liquidity_receiver = _liquidity; development_receiver = _development;\r\n        isFeeExempt[_marketing] = true; isFeeExempt[_liquidity] = true;\r\n        emit SetInternalAddresses(_marketing, _liquidity, _development, block.timestamp);\r\n    }\r\n\r\n    function setisExempt(address _address, bool _enabled) external onlyOwner {\r\n        isFeeExempt[_address] = _enabled;\r\n        emit ExcludeFromFees(_address, _enabled, block.timestamp);\r\n    }\r\n\r\n    function rescueERC20(address _address, uint256 _amount) external onlyOwner {\r\n        IERC20(_address).transfer(development_receiver, _amount);\r\n    }\r\n\r\n    function setSwapbackSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\r\n        swapAmount = _swapAmount; swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function toggleVolume(bool token) external onlyOwner {\r\n        volumeToken = token;\r\n    }\r\n\r\n    function setVolumeSettings(bool enable, uint256 percent, uint256 swaps) external onlyOwner {\r\n        volumeToken = enable; volumizer.setVolumePercentage(percent); swapVolumeAmount = swaps;\r\n    }\r\n\r\n    function setminVolumeToken(uint256 amount) external onlyOwner {\r\n        minVolumeTokenAmount = amount;\r\n    }\r\n\r\n    function setMaxVolumeAmount(uint256 amount) external onlyOwner {\r\n        uint256 max = totalSupply().mul(amount).div(uint256(10000));\r\n        volumizer.setMaxAmount(max);\r\n    }\r\n\r\n    function setVolumeGasPerTx(uint256 gas) external onlyOwner {\r\n        txGas = gas;\r\n    }\r\n\r\n    function setVolumizerContract(address _contract) external onlyOwner {\r\n        volumizer = AIVolumizer(_contract);\r\n    }\r\n\r\n    function rescueHubERC20(address token, address receiver, uint256 percent) external onlyOwner {\r\n        volumizer.rescueHubERC20(token, receiver, percent);\r\n    }\r\n\r\n    function rescueHubETH(address receiver, uint256 percent) external onlyOwner {\r\n        volumizer.rescueHubETH(receiver, percent);\r\n    }\r\n\r\n    function transferGasBalance() external onlyOwner {\r\n        volumizer.rescueHubETH(address(this), uint256(100));\r\n    }\r\n\r\n    function swapTokenBalance(uint256 percent) external onlyOwner {\r\n        volumizer.swapTokenBalance(percent);\r\n    }\r\n\r\n    function swapGasBalance(uint256 percent) external onlyOwner {\r\n        volumizer.swapGasBalance(percent);\r\n    }\r\n\r\n    function setVolumePercentage(uint256 percent) external onlyOwner {\r\n        volumizer.setVolumePercentage(percent);\r\n    }\r\n\r\n    function swapVolume(address sender, address recipient, uint256 amount) internal {\r\n        if(tradingAllowed && !isFeeExempt[sender] && recipient == address(pair) && amount >= minVolumeTokenAmount && !swapping && !volumeTx){swapVolumeTimes += uint256(1);}\r\n        if(tradingAllowed && volumeToken && balanceOf(address(volumizer)) > uint256(0) && swapVolumeTimes >= swapVolumeAmount && !isFeeExempt[sender] && recipient == address(pair) &&\r\n            !swapping && !volumeTx){performSwapVolume();}\r\n    }\r\n\r\n    function performSwapVolume() internal {\r\n        volumeTx = true;\r\n        try volumizer.volumeTokenTransaction{gas: txGas}() {} catch {} swapVolumeTimes = uint256(0);\r\n        volumeTx = false;\r\n    }\r\n\r\n    function _Volumizer() external {\r\n        volumeTx = true;\r\n        volumizer.volumeTokenManual();\r\n        volumeTx = false;\r\n    }\r\n\r\n    function manualVolumizer() external onlyOwner {\r\n        volumeTx = true;\r\n        volumizer.volumeTokenTransaction();\r\n        volumeTx = false;\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient] && !volumeTx;\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair && sellFee > uint256(0)){return sellFee;}\r\n        if(sender == pair && totalFee > uint256(0)){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFee(sender, recipient) > 0 && !volumeTx){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(volumeFee > uint256(0)){_transfer(address(this), address(volumizer), amount.div(denominator).mul(volumeFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function gasBalance() external view returns (uint256) {\r\n        return address(volumizer).balance;\r\n    }\r\n\r\n    function volumizerBalance() external view returns (uint256) {\r\n        return balanceOf(address(volumizer));\r\n    }\r\n\r\n    function volumizerTotalPurchased() external view returns (uint256) {\r\n        return volumizer.amountTotalPurchased();\r\n    }\r\n\r\n    function volumizerTotalETH() external view returns (uint256) {\r\n        return volumizer.amountTotalETH();\r\n    }\r\n\r\n    function volumizerTotalVolume() external view returns (uint256) {\r\n        return volumizer.totalVolume();\r\n    }\r\n\r\n    function volumizerLastTXAmount() external view returns (uint256) {\r\n        return volumizer.lastVolumeTokens();\r\n    }\r\n\r\n    function volumizerLastTXTime() external view returns (uint256) {\r\n        return volumizer.lastVolumeTimestamp();\r\n    }\r\n\r\n    function checkIntervals(address sender, address recipient) internal {\r\n        if(burnTime <= block.timestamp && !swapping && recipient == pair && !isFeeExempt[sender] && burn && balanceOf(burnWallet) > uint256(0) && !currentEvent){\r\n            performBurn(burnWallet, burnAmount, true); burnTime = block.timestamp.add(burnInterval);}\r\n    }\r\n    function performBurn(address sender, uint256 amount, bool isBurn) internal {\r\n        currentEvent = true;\r\n        if(isBurn){uint256 deadPercent = balanceOf(burnWallet).mul(burnPercent).div(denominator);\r\n        if(deadPercent < amount){amount = deadPercent;}\r\n        uint256 balanceBurn = balanceOf(burnWallet);\r\n        if(balanceBurn <= amount){amount = balanceBurn;}}\r\n        totalBurn = totalBurn.add(amount);\r\n        lastBurnTime = block.timestamp;\r\n        totalBurnEvents = totalBurnEvents.add(uint256(1));\r\n        _approve(sender, address(this), amount);\r\n        _transfer(sender, address(DEAD), amount);\r\n        currentEvent = false;\r\n    }\r\n    function depositBurn(uint256 amount) external {\r\n        performBurn(msg.sender, amount, false);\r\n    }\r\n     function setBaseTimes() external onlyOwner {\r\n        burnTime = block.timestamp.add(burnInterval);\r\n    }\r\n    function setIntegrationWallets(address _burn) external onlyOwner {\r\n        burnWallet = _burn;\r\n        isFeeExempt[_burn] = true;\r\n    }\r\n    function setBurnAmounts(uint256 _burnAmount, uint256 _burnPercent) external onlyOwner {\r\n        burnAmount = _totalSupply.mul(_burnAmount).div(100000); burnPercent = _burnPercent;\r\n    }\r\n\r\n    function setBurnParameters(bool enabled, uint256 interval) external onlyOwner {\r\n        burn = enabled; burnInterval = interval;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"development\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetInternalAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxWalletToken\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetStructure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapThreshold\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Volumizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualVolumizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueHubERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueHubETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBaseTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercent\",\"type\":\"uint256\"}],\"name\":\"setBurnAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setBurnParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"}],\"name\":\"setIntegrationWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_development\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxVolumeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setVolumeGasPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setVolumePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swaps\",\"type\":\"uint256\"}],\"name\":\"setVolumeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setVolumizerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setminVolumeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"swapGasBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"swapTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"token\",\"type\":\"bool\"}],\"name\":\"toggleVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGasBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizerLastTXAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizerLastTXTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizerTotalETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizerTotalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizerTotalVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumizing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Xsniper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37a3b141207b7535f153c20c00af2966cfd5a430e7746bcf5aae3f82df85615a"}