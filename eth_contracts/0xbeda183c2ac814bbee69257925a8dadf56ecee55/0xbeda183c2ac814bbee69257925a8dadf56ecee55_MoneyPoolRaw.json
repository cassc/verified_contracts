{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v2/lib_and_interface/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    // function sendValue(address payable recipient, uint256 amount) internal {\\n        // require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        // (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        // require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    // }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2/lib_and_interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/v2/lib_and_interface/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2/lib_and_interface/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2/satis_core/MoneyPoolRaw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib_and_interface/Address.sol\\\";\\nimport \\\"../lib_and_interface/IERC20.sol\\\";\\nimport \\\"../lib_and_interface/SafeERC20.sol\\\";\\n\\nlibrary MultiSig {\\n    event Debug(string msg);\\n\\n    function recoverSignature(bytes32 _targetHash, bytes memory _targetSignature) internal pure returns(address) {\\n        require (_targetSignature.length == 65, \\\"Incorrect signature length, length must be 65\\\");\\n        \\n        bytes32 _r;\\n        bytes32 _s;\\n        uint8 _v;\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            _r := mload(add(_targetSignature, 32))\\n            // second 32 bytes\\n            _s := mload(add(_targetSignature, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            _v := and(mload(add(_targetSignature, 65)), 255)\\n            //_v := byte(0, mload(add(_targetSignature, 96)))\\n        }\\n\\n        require (_v == 0 || _v == 1 || _v == 27 || _v == 28, \\\"Recover v value is fundamentally wrong\\\");\\n\\n        if (_v < 27) {\\n            _v += 27;\\n        }\\n\\n        require (_v == 27 || _v == 28, \\\"Recover v value error: Not 27 or 28\\\");\\n\\n        return ecrecover(_targetHash, _v, _r, _s);\\n    }\\n\\n    /**\\n     * @dev Hashing message fro ecrevocer function\\n     */\\n    function hashingMessage(bytes32 _messageToBeHashed) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",_messageToBeHashed));\\n    }\\n\\n\\n    /**\\n     * @dev Internal function, convert uint to string\\n     */\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @dev Internal function, convert address to string\\n     */\\n    function address2str(address _addr) internal pure returns(string memory) {\\n        bytes32 value = bytes32(uint256(uint160(_addr)));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(42);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint i = 0; i < 20; i++) {\\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    struct Str {\\n      string sender;\\n      string token;\\n      string withdraw;\\n      string indebt;\\n      string tier;\\n      string chainid;\\n      string pooladdr;\\n      string expblockno;\\n      string ticketid;\\n      string nonce;\\n    }\\n\\n    /**\\n     * @dev Verify signature, internal function\\n     */\\n    // function verifySignature(address _targetAddress, bytes memory _targetSignature, address _clientAddress, address _tokenAddress, uint256 _withdrawValue, uint256 _tier, uint256 _chainId, address _poolAddress, uint256 _nonce) public pure returns(bool) {\\n    function verifySignature(address _targetAddress, bytes memory _targetSignature, address _clientAddress, address _tokenAddress, uint256 _withdrawValue, uint256 _inDebtValue, uint256 _tier, uint256 _chainId, address _poolAddress, uint256 _expBlockNo, string memory _ticketId, uint256 _nonce) public pure returns(bool) {\\n        Str memory str;\\n        str.sender = address2str(_clientAddress);\\n        str.token = address2str(_tokenAddress);\\n        str.withdraw = uint2str(_withdrawValue);\\n        str.indebt = uint2str(_inDebtValue);\\n        str.tier = uint2str(_tier);\\n        str.chainid = uint2str(_chainId);\\n        str.pooladdr = address2str(_poolAddress);\\n        str.expblockno = uint2str(_expBlockNo);\\n        str.ticketid = _ticketId;\\n        str.nonce = uint2str(_nonce);\\n        return recoverSignature(hashingMessage(keccak256(abi.encode(str.nonce, str.sender, str.token, str.withdraw, str.indebt, str.tier, str.chainid, str.pooladdr, str.expblockno, str.ticketid))), _targetSignature) == _targetAddress;\\n    }\\n}\\n\\n/**\\n * This contract is a simple money pool for deposit.\\n * It supports transfer and withdrawal of assets (ETH and ERC20 tokens).\\n *\\n * This contract uses Openzeppelin's library for ERC20 tokens.\\n * When deploying on certain L2s (such as Optimism), it might require slight modifications\\n * of the original ERC20 token library, since some ETH functions might not be supported.\\n */\\n\\n\\ncontract MoneyPoolRaw {\\n\\n    using SafeERC20 for IERC20;\\n\\n    mapping (address => uint256) public totalLockedAssets;\\n    mapping (string => mapping (address => uint256)) public instantWithdrawReserve;\\n    mapping (address => uint256) public clientNonce;\\n    mapping (address => uint256) public satisTokenBalance;\\n    mapping (address => bool) public workerList;\\n\\n    address public owner;\\n    address public signatureWorker;\\n    address public proxy;\\n    address public sigmaProxy;\\n\\n    event WorkerTakeLockedFund(address workerAddress, address tokenAddress, uint256 takeValue);\\n    event WorkerDumpBridgedFund(address workerAddress, address[] clientAddressList, address tokenAddress, uint256[] dumpValueList);\\n    event WorkerDumpInstantWithdrawFund(address workerAddress, address[] _clientAddressList, address _tokenAddress, uint256[] _instantWithdrawValueList);\\n    event OwnerTakeProfit(address tokenAddress, uint256 takeProfitValue);\\n\\n    event ChangeOwnership(address newOwner);\\n    event AddRemoveWorkers(address[] modifyAddrList, uint8 isAdd);\\n    event ChangeSignatureWorker(address newSignatureWorker);\\n    event ChangeProxy(address newProxy);\\n    event ChangeSigmaProxy(address newSigmaProxy);\\n\\n    modifier isOwner() {\\n        require (msg.sender == owner, \\\"Not an admin\\\");\\n        _;\\n    }\\n\\n    modifier isWorker() {\\n        require (workerList[msg.sender] == true, \\\"Not a worker\\\");\\n        _;\\n    }\\n\\n    modifier isProxy() {\\n        require (msg.sender == proxy || msg.sender == sigmaProxy, \\\"Please use proxy contract.\\\");\\n        _;\\n    }\\n\\n    modifier sufficientRebalanceValue(uint256[] memory _queueValueList, uint256 _totalDumpAmount, uint256 _poolAmount) {\\n        require (_totalDumpAmount > 0 || _queueValueList.length > 0, \\\"Zero dump value and zero queue list length\\\");\\n        uint256 _queueValue;\\n        for (uint256 i = 0; i < _queueValueList.length; i++) {\\n            _queueValue += _queueValueList[i];\\n        }\\n        require (_queueValue <= _poolAmount + _totalDumpAmount, \\\"Dump value + pool assets < queue value sum\\\");\\n        _;\\n    }\\n\\n    modifier correctSignatureLength(bytes memory _targetSignature) {\\n        require (_targetSignature.length == 65, \\\"Incorrect signature length, length must be 65\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {owner}, owner is also a worker.\\n     */\\n    constructor(address _initialProxyAddress, address _initialSigmaProxyAddress, address _signatureWorker) {\\n        require(_initialProxyAddress != address(0), \\\"Zero address for proxy\\\");\\n        require(_initialSigmaProxyAddress != address(0), \\\"Zero address for sigma proxy\\\");\\n        owner = msg.sender;\\n        signatureWorker = _signatureWorker;\\n        proxy = _initialProxyAddress;\\n        sigmaProxy = _initialSigmaProxyAddress;\\n    }\\n\\n    /**\\n     * @dev In debt cross-chain amount.\\n     */\\n    function getInstantWithdrawReserve(string[] memory _ticketIdList, address _tokenAddress) public view returns(uint256[] memory) {\\n        uint256[] memory reserveValueList = new uint256[](_ticketIdList.length);\\n        for (uint i = 0; i < _ticketIdList.length; i++) {\\n            reserveValueList[i] = (instantWithdrawReserve[_ticketIdList[i]][_tokenAddress]);\\n        }\\n        return reserveValueList;\\n    }\\n\\n    /**\\n     * @dev Transfer the ownership of this contract.\\n     */\\n    function transferOwnership(address _newOwner) public isOwner {\\n        require(_newOwner != address(0), \\\"Zero address for new owner\\\");\\n        owner = _newOwner;\\n        emit ChangeOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Change to new signature worker.\\n     */\\n    function changeSignatureWorker(address _newSignatureWorker) public isOwner {\\n        require(_newSignatureWorker != address(0), \\\"Zero address for new signature worker\\\");\\n        signatureWorker = _newSignatureWorker;\\n        emit ChangeSignatureWorker(_newSignatureWorker);\\n    }\\n\\n    /**\\n     * @dev Add workers to this contract.\\n     */\\n    function addWorkers(address[] memory _addWorkerList) external isOwner {\\n        for(uint256 i=0; i < _addWorkerList.length; i++) {\\n            workerList[_addWorkerList[i]] = true;\\n        }\\n        emit AddRemoveWorkers(_addWorkerList, 1);\\n    }\\n\\n    /**\\n     * @dev Remove workers from this contract.\\n     */\\n    function removeWorkers(address[] memory _removeWorkerList) external isOwner {\\n        for(uint256 i=0; i < _removeWorkerList.length; i++) {\\n            workerList[_removeWorkerList[i]] = false;\\n        }\\n        emit AddRemoveWorkers(_removeWorkerList, 0);\\n    }\\n\\n    /**\\n     * @dev Update proxy contract address.\\n     */\\n    function updateProxyAddress(address _newProxyAddress) public isOwner {\\n        require(_newProxyAddress != address(0), \\\"Zero address for new proxy\\\");\\n        proxy = _newProxyAddress;\\n        emit ChangeProxy(_newProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Update sigma mining proxy contract address.\\n     */\\n    function updateSigmaProxyAddress(address _newSigmaProxyAddress) public isOwner {\\n        require(_newSigmaProxyAddress != address(0), \\\"Zero address for new sigma proxy\\\");\\n        sigmaProxy = _newSigmaProxyAddress;\\n        emit ChangeSigmaProxy(_newSigmaProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Transfers and lock fund within this contract to support trading positions with optional trading instructions.\\n     */\\n    function addFundWithAction(address _clientAddress, address _tokenAddress, uint256 _addValue) external isProxy returns(bool _isDone) {\\n        IERC20 depositToken = IERC20(_tokenAddress);\\n        depositToken.safeTransferFrom(_clientAddress, address(this), _addValue);\\n        totalLockedAssets[_tokenAddress] += _addValue;\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Worker unlock fund to instant withdrawal reserve.\\n     */\\n    function workerUnlockFund(string[] memory _ticketIdList, address _tokenAddress, uint256[] memory _unlockValueList) public isWorker returns(bool _isDone) {\\n        for (uint i = 0; i < _ticketIdList.length; i++) {\\n            instantWithdrawReserve[_ticketIdList[i]][_tokenAddress] -= _unlockValueList[i];\\n        }\\n        _isDone = true;\\n    }\\n\\n    struct Str {\\n      string sender;\\n      string token;\\n      string withdraw;\\n      string tier;\\n      string chainid;\\n      string pooladdr;\\n      string nonce;\\n    }\\n\\n    /**\\n     * @dev Tier 1 and 3 withdrawal\\n     */\\n    function verifyAndWithdrawFund(bytes memory _targetSignature, address _clientAddress, address _tokenAddress, uint256 _withdrawValue, uint256 _inDebtValue, uint256 _tier, uint256 _chainId, address _poolAddress, uint256 _expBlockNo, string memory _ticketId, uint256 _nonce) public isProxy returns(bool _isDone) {\\n        require (_nonce == clientNonce[_clientAddress], \\\"Wrong withdraw nonce\\\");\\n        require (_poolAddress == address(this) && _chainId == block.chainid, \\\"Wrong chain / target contract\\\");\\n        require (_expBlockNo >= block.number, \\\"Expired signature\\\");\\n        bool _verification = MultiSig.verifySignature(signatureWorker, _targetSignature, _clientAddress, _tokenAddress, _withdrawValue, _inDebtValue, _tier, _chainId, _poolAddress, _expBlockNo, _ticketId, _nonce);\\n        require (_verification, \\\"Signature verification for instant withdrawal fails\\\");\\n        clientNonce[_clientAddress] = _nonce + 1;\\n\\n        // Check if native liquidity is enough for tier 3, and queue for tier 1\\n        IERC20 token = IERC20(_tokenAddress);\\n        require(_withdrawValue <= totalLockedAssets[_tokenAddress], \\\"Native withdraw failed\\\");\\n        if (_tier == 3) {\\n            require(_inDebtValue == 0, \\\"No in-debt value allowed for tier 3 withdraw\\\");\\n            token.safeTransfer(_clientAddress, _withdrawValue);\\n            totalLockedAssets[_tokenAddress] -= _withdrawValue;\\n        } else if (_tier == 1) {\\n            require(_inDebtValue > 0 || _withdrawValue > 0, \\\"Total withdraw amount is 0\\\");\\n            if (_withdrawValue > 0) {\\n                token.safeTransfer(_clientAddress, _withdrawValue);\\n                totalLockedAssets[_tokenAddress] -= _withdrawValue;\\n            }\\n            if (_inDebtValue > 0) {\\n                instantWithdrawReserve[_ticketId][_tokenAddress] += _inDebtValue;\\n            }\\n        } else {\\n            revert(\\\"Invalid tier\\\");\\n        }\\n\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Verify signature for redeeming SATIS token in Sigma Mining\\n     */\\n    function verifyAndRedeemToken(bytes memory _targetSignature, address _clientAddress, address _tokenAddress, uint256 _redeemValue, uint256 _inDebtValue, uint256 _tier, uint256 _chainId, address _poolAddress, uint256 _expBlockNo, string memory _ticketId, uint256 _nonce) external isProxy returns(bool _isDone) {\\n        require (_nonce == clientNonce[_clientAddress], \\\"Wrong withdraw nonce\\\");\\n        require (_poolAddress == address(this) && _chainId == block.chainid, \\\"Wrong chain / target contract\\\");\\n        require (_expBlockNo >= block.number, \\\"Expired signature\\\");\\n        require (_inDebtValue == 0, \\\"No in-debt value allowed for redeeming SATIS token\\\");\\n        bool _verification = MultiSig.verifySignature(signatureWorker, _targetSignature, _clientAddress, _tokenAddress, _redeemValue, _inDebtValue, _tier, _chainId, _poolAddress, _expBlockNo, _ticketId, _nonce);\\n        require (_verification == true, \\\"Signature verification fails\\\");\\n        require (satisTokenBalance[_tokenAddress] >= _redeemValue, \\\"Insifficient SATIS Tokens\\\");\\n        clientNonce[_clientAddress] = _nonce + 1;\\n\\n        //Send redeemed token\\n        IERC20 satisToken = IERC20(_tokenAddress);\\n        satisToken.safeTransfer(_clientAddress, _redeemValue);\\n        satisTokenBalance[_tokenAddress] -= _redeemValue;\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Fund SATIS token to this contract\\n     */\\n    function fundSatisToken(address _tokenAddress, uint256 _fundingValue) external isWorker returns(bool _isDone) {\\n        IERC20 satisToken = IERC20(_tokenAddress);\\n        satisToken.safeTransferFrom(msg.sender, address(this), _fundingValue);\\n        satisTokenBalance[_tokenAddress] += _fundingValue;\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Workers take SATIS token from this contract\\n     */\\n    function workerTakeSatisToken(address _tokenAddress, uint256 _takingValue) external isWorker returns(bool _isDone) {\\n        IERC20 satisToken = IERC20(_tokenAddress);\\n        satisToken.safeTransfer(msg.sender, _takingValue);\\n        satisTokenBalance[_tokenAddress] -= _takingValue;\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Worker taking locked fund for bridging.\\n     */\\n    function workerTakeLockedFund(address _tokenAddress, uint256 _takeValue) external isWorker returns(bool _isDone) {\\n        require(_takeValue <= totalLockedAssets[_tokenAddress], \\\"Taking more than the locked assets in contract\\\");\\n        IERC20 takeToken = IERC20(_tokenAddress);\\n        totalLockedAssets[_tokenAddress] -= _takeValue;\\n        takeToken.safeTransfer(msg.sender, _takeValue);\\n        emit WorkerTakeLockedFund(msg.sender, _tokenAddress, _takeValue);\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Worker dumping fund for instant withdrawal.\\n     */\\n    function workerDumpInstantWithdrawalFund(string[] memory _ticketIdList, address[] memory _clientAddressList, address _tokenAddress, uint256[] memory _instantWithdrawValueList, uint256 _totalDumpAmount) external \\n    isWorker sufficientRebalanceValue(_instantWithdrawValueList, _totalDumpAmount, totalLockedAssets[_tokenAddress]) returns(bool _isDone) {\\n        IERC20 dumpToken = IERC20(_tokenAddress);\\n        if (_totalDumpAmount > 0) {\\n            dumpToken.safeTransferFrom(msg.sender, address(this), _totalDumpAmount);\\n            totalLockedAssets[_tokenAddress] += _totalDumpAmount;\\n        }\\n        for (uint256 i=0; i < _clientAddressList.length; i++) {\\n            dumpToken.safeTransfer(_clientAddressList[i], _instantWithdrawValueList[i]);\\n            totalLockedAssets[_tokenAddress] -= _instantWithdrawValueList[i];\\n            instantWithdrawReserve[_ticketIdList[i]][_tokenAddress] -= _instantWithdrawValueList[i];\\n        }\\n        emit WorkerDumpInstantWithdrawFund(msg.sender, _clientAddressList, _tokenAddress, _instantWithdrawValueList);\\n        _isDone = true;\\n    }\\n\\n    /**\\n     * @dev Owner taking profits (charged withdrawal fees).\\n     */\\n    function ownerTakeProfit(address _tokenAddress, uint256 _takeProfitValue) external isOwner returns(bool _isDone) {\\n        require(_takeProfitValue <= totalLockedAssets[_tokenAddress], \\\"Not enough balance to take\\\");\\n        IERC20 profitToken = IERC20(_tokenAddress);\\n        profitToken.safeTransfer(msg.sender, _takeProfitValue);\\n        totalLockedAssets[_tokenAddress] -= _takeProfitValue;\\n        emit OwnerTakeProfit(_tokenAddress, _takeProfitValue);\\n        _isDone = true;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/v2/satis_core/MoneyPoolRaw.sol\": {\r\n        \"MultiSig\": \"0xdcd3e4b44d8b68bd8d2e4a66f6ca0baf7230b5fc\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialSigmaProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signatureWorker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"modifyAddrList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"isAdd\",\"type\":\"uint8\"}],\"name\":\"AddRemoveWorkers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProxy\",\"type\":\"address\"}],\"name\":\"ChangeProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigmaProxy\",\"type\":\"address\"}],\"name\":\"ChangeSigmaProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSignatureWorker\",\"type\":\"address\"}],\"name\":\"ChangeSignatureWorker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takeProfitValue\",\"type\":\"uint256\"}],\"name\":\"OwnerTakeProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"clientAddressList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"dumpValueList\",\"type\":\"uint256[]\"}],\"name\":\"WorkerDumpBridgedFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_clientAddressList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_instantWithdrawValueList\",\"type\":\"uint256[]\"}],\"name\":\"WorkerDumpInstantWithdrawFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takeValue\",\"type\":\"uint256\"}],\"name\":\"WorkerTakeLockedFund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addValue\",\"type\":\"uint256\"}],\"name\":\"addFundWithAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addWorkerList\",\"type\":\"address[]\"}],\"name\":\"addWorkers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSignatureWorker\",\"type\":\"address\"}],\"name\":\"changeSignatureWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingValue\",\"type\":\"uint256\"}],\"name\":\"fundSatisToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_ticketIdList\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getInstantWithdrawReserve\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instantWithdrawReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_takeProfitValue\",\"type\":\"uint256\"}],\"name\":\"ownerTakeProfit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_removeWorkerList\",\"type\":\"address[]\"}],\"name\":\"removeWorkers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"satisTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigmaProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureWorker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProxyAddress\",\"type\":\"address\"}],\"name\":\"updateProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigmaProxyAddress\",\"type\":\"address\"}],\"name\":\"updateSigmaProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_targetSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ticketId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"verifyAndRedeemToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_targetSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ticketId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"verifyAndWithdrawFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_ticketIdList\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_clientAddressList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_instantWithdrawValueList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalDumpAmount\",\"type\":\"uint256\"}],\"name\":\"workerDumpInstantWithdrawalFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workerList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_takeValue\",\"type\":\"uint256\"}],\"name\":\"workerTakeLockedFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_takingValue\",\"type\":\"uint256\"}],\"name\":\"workerTakeSatisToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_ticketIdList\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockValueList\",\"type\":\"uint256[]\"}],\"name\":\"workerUnlockFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isDone\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoneyPoolRaw", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000ea9bb7b94f91761fbeac0f6b88e21f0557e96c2a000000000000000000000000ea9bb7b94f91761fbeac0f6b88e21f0557e96c2a000000000000000000000000ea9bb7b94f91761fbeac0f6b88e21f0557e96c2a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}