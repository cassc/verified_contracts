{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/destinations/adapters/BalancerBeethovenAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Foundation. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IVault } from \\\"src/interfaces/external/balancer/IVault.sol\\\";\\nimport { IBalancerPool } from \\\"src/interfaces/external/balancer/IBalancerPool.sol\\\";\\nimport { IBalancerComposableStablePool } from \\\"src/interfaces/external/balancer/IBalancerComposableStablePool.sol\\\";\\nimport { LibAdapter } from \\\"src/libs/LibAdapter.sol\\\";\\nimport { BalancerUtilities } from \\\"src/libs/BalancerUtilities.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\nlibrary BalancerBeethovenAdapter {\\n    event DeployLiquidity(\\n        uint256[] amountsDeposited,\\n        address[] tokens,\\n        // 0 - lpMintAmount\\n        // 1 - lpShare\\n        // 2 - lpTotalSupply\\n        uint256[3] lpAmounts,\\n        address poolAddress,\\n        bytes32 poolId\\n    );\\n\\n    event WithdrawLiquidity(\\n        uint256[] amountsWithdrawn,\\n        address[] tokens,\\n        // 0 - lpBurnAmount\\n        // 1 - lpShare\\n        // 2 - lpTotalSupply\\n        uint256[3] lpAmounts,\\n        address poolAddress,\\n        bytes32 poolId\\n    );\\n\\n    error TokenPoolAssetMismatch();\\n    error ArraysLengthMismatch();\\n    error BalanceMustIncrease();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\\n        ADD_TOKEN\\n    }\\n\\n    ///@dev For StablePool and MetaStablePool\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT\\n    }\\n\\n    ///@dev For ComposableStablePool\\n    enum ExitKindComposable {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        EXACT_BPT_IN_FOR_ALL_TOKENS_OUT\\n    }\\n\\n    /**\\n     * @param pool address of Balancer Pool\\n     * @param bptAmount uint256 pool token amount expected back\\n     * @param tokens IERC20[] of tokens to be withdrawn from pool\\n     * @param amountsOut uint256[] min amount of tokens expected on withdrawal\\n     * @param userData bytes data, used for info about kind of pool exit\\n     */\\n    struct WithdrawParams {\\n        address pool;\\n        uint256 bptAmount;\\n        address[] tokens;\\n        uint256[] amountsOut;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @notice Deploy liquidity to Balancer or Beethoven pool\\n     * @dev Calls into external contract. Should be guarded with\\n     * non-reentrant flags in a used contract\\n     * @param vault Balancer Vault contract\\n     * @param pool Balancer or Beethoven Pool to deploy liquidity to\\n     * @param tokens Addresses of tokens to deploy. Should match pool tokens\\n     * @param exactTokenAmounts Array of exact amounts of tokens to be deployed\\n     * @param minLpMintAmount Min amount of LP tokens to mint on deposit\\n     */\\n    function addLiquidity(\\n        IVault vault,\\n        address pool,\\n        address[] calldata tokens,\\n        uint256[] calldata exactTokenAmounts,\\n        uint256 minLpMintAmount\\n    ) public {\\n        uint256 nTokens = tokens.length;\\n        if (nTokens == 0 || nTokens != exactTokenAmounts.length) {\\n            revert ArraysLengthMismatch();\\n        }\\n        Errors.verifyNotZero(address(vault), \\\"vault\\\");\\n        Errors.verifyNotZero(pool, \\\"pool\\\");\\n        Errors.verifyNotZero(minLpMintAmount, \\\"minLpMintAmount\\\");\\n\\n        uint256[] memory assetBalancesBefore = new uint256[](nTokens);\\n        bytes32 poolId = IBalancerPool(pool).getPoolId();\\n\\n        // verify that we're passing correct pool tokens\\n        _ensureTokenOrderAndApprovals(vault, exactTokenAmounts, tokens, poolId, assetBalancesBefore);\\n\\n        // record BPT balances before deposit 0 - balance before; 1 - balance after\\n        uint256[] memory bptBalances = new uint256[](2);\\n        bptBalances[0] = IBalancerPool(pool).balanceOf(address(this));\\n\\n        vault.joinPool(\\n            poolId,\\n            address(this), // sender\\n            address(this), // recipient of BPT token\\n            _getJoinPoolRequest(pool, tokens, exactTokenAmounts, minLpMintAmount)\\n        );\\n\\n        // make sure we received bpt\\n        bptBalances[1] = IBalancerPool(pool).balanceOf(address(this));\\n        if (bptBalances[1] < bptBalances[0] + minLpMintAmount) {\\n            revert BalanceMustIncrease();\\n        }\\n        // make sure we spent exactly how much we wanted\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            //slither-disable-next-line calls-loop\\n            uint256 currentBalance = IERC20(tokens[i]).balanceOf(address(this));\\n\\n            if (currentBalance != assetBalancesBefore[i] - exactTokenAmounts[i]) {\\n                // For composable pools it might be a case that we deposit 0 LP tokens and our LP balance increases\\n                if (address(tokens[i]) != address(pool)) {\\n                    revert InvalidBalanceChange();\\n                }\\n            }\\n        }\\n\\n        _emitDeploy(exactTokenAmounts, tokens, bptBalances, pool, poolId);\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity from Balancer or Beethoven pool\\n     * @dev Calls into external contract. Should be guarded with\\n     * non-reentrant flags in a used contract\\n     * @param vault Balancer Vault contract\\n     * @param pool Balancer or Beethoven Pool to withdrawn liquidity from\\n     * @param tokens Addresses of tokens to withdraw. Should match pool tokens\\n     * @param exactAmountsOut Array of exact amounts of tokens to be withdrawn from pool\\n     * @param maxLpBurnAmount Max amount of LP tokens to burn in the withdrawal\\n     */\\n    function removeLiquidityImbalance(\\n        IVault vault,\\n        address pool,\\n        address[] calldata tokens,\\n        uint256[] calldata exactAmountsOut,\\n        uint256 maxLpBurnAmount\\n    ) public returns (uint256[] memory actualAmounts) {\\n        bytes memory userData = BalancerUtilities.isComposablePool(pool)\\n            ? abi.encode(\\n                ExitKindComposable.BPT_IN_FOR_EXACT_TOKENS_OUT, _getUserAmounts(pool, exactAmountsOut), maxLpBurnAmount\\n            )\\n            : abi.encode(ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, exactAmountsOut, maxLpBurnAmount);\\n\\n        // Verify if at least one non-zero amount is present\\n        bool hasNonZeroAmount = false;\\n        uint256 nTokens = exactAmountsOut.length;\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            if (exactAmountsOut[i] != 0) {\\n                hasNonZeroAmount = true;\\n                break;\\n            }\\n        }\\n        if (!hasNonZeroAmount) {\\n            revert NoNonZeroAmountProvided();\\n        }\\n\\n        actualAmounts = _withdraw(\\n            vault,\\n            WithdrawParams({\\n                pool: pool,\\n                bptAmount: maxLpBurnAmount,\\n                tokens: tokens,\\n                amountsOut: exactAmountsOut,\\n                userData: userData\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity from Balancer V2 pool (specifying exact LP tokens to burn)\\n     * @dev Calls into external contract. Should be guarded with\\n     * non-reentrant flags in a used contract\\n     * @param vault Balancer Vault contract\\n     * @param pool Balancer or Beethoven Pool to liquidity withdrawn from\\n     * @param exactLpBurnAmount Amount of LP tokens to burn in the withdrawal\\n     * @param minAmountsOut Array of minimum amounts of tokens to be withdrawn from pool\\n     */\\n    function removeLiquidity(\\n        IVault vault,\\n        address pool,\\n        address[] memory tokens,\\n        uint256[] memory minAmountsOut,\\n        uint256 exactLpBurnAmount\\n    ) public returns (uint256[] memory withdrawnAmounts) {\\n        bytes memory userData = BalancerUtilities.isComposablePool(pool)\\n            ? abi.encode(ExitKindComposable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT, exactLpBurnAmount)\\n            : abi.encode(ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, exactLpBurnAmount);\\n\\n        withdrawnAmounts = _withdraw(\\n            vault,\\n            WithdrawParams({\\n                pool: pool,\\n                bptAmount: exactLpBurnAmount,\\n                tokens: tokens,\\n                amountsOut: minAmountsOut,\\n                userData: userData\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev This is a helper function to avoid stack-too-deep-errors\\n     */\\n    function _emitDeploy(\\n        uint256[] calldata exactTokenAmounts,\\n        address[] calldata tokens,\\n        uint256[] memory bptBalances,\\n        address pool,\\n        bytes32 poolId\\n    ) private {\\n        emit DeployLiquidity(\\n            exactTokenAmounts,\\n            tokens,\\n            [bptBalances[1] - bptBalances[0], bptBalances[1], IERC20(pool).totalSupply()],\\n            pool,\\n            poolId\\n        );\\n    }\\n\\n    /// @dev Helper method to avoid stack-too-deep-errors\\n    function _withdraw(IVault vault, WithdrawParams memory params) private returns (uint256[] memory amountsOut) {\\n        //slither-disable-start reentrancy-events\\n\\n        address pool = params.pool;\\n        IBalancerPool poolInterface = IBalancerPool(pool);\\n\\n        Errors.verifyNotZero(address(vault), \\\"vault\\\");\\n        Errors.verifyNotZero(pool, \\\"pool\\\");\\n        Errors.verifyNotZero(params.bptAmount, \\\"params.bptAmount\\\");\\n\\n        amountsOut = params.amountsOut;\\n        address[] memory tokens = params.tokens;\\n\\n        uint256 nTokens = tokens.length;\\n        // slither-disable-next-line incorrect-equality\\n        if (nTokens == 0 || nTokens != amountsOut.length) {\\n            revert ArraysLengthMismatch();\\n        }\\n\\n        bytes32 poolId = poolInterface.getPoolId();\\n        // Partial return values are intentionally ignored. This call provides the most efficient way to get the data.\\n        // slither-disable-next-line unused-return\\n        (IERC20[] memory poolTokens,,) = vault.getPoolTokens(poolId);\\n\\n        if (poolTokens.length != nTokens) {\\n            revert ArraysLengthMismatch();\\n        }\\n\\n        // Record balance before withdraw\\n        uint256 bptBalanceBefore = poolInterface.balanceOf(address(this));\\n\\n        uint256[] memory assetBalancesBefore = new uint256[](nTokens);\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            assetBalancesBefore[i] = poolTokens[i].balanceOf(address(this));\\n        }\\n\\n        // As we're exiting the pool we need to make an ExitPoolRequest instead\\n        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest({\\n            assets: tokens,\\n            minAmountsOut: amountsOut,\\n            userData: params.userData,\\n            toInternalBalance: false\\n        });\\n        vault.exitPool(\\n            poolId,\\n            address(this), // sender,\\n            payable(address(this)), // recipient,\\n            request\\n        );\\n\\n        // Make sure we burned BPT, and assets were received\\n        uint256 bptBalanceAfter = poolInterface.balanceOf(address(this));\\n        if (bptBalanceAfter >= bptBalanceBefore) {\\n            revert InvalidBalanceChange();\\n        }\\n\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            uint256 assetBalanceBefore = assetBalancesBefore[i];\\n\\n            IERC20 currentToken = poolTokens[i];\\n            if (address(currentToken) != pool) {\\n                uint256 currentBalance = currentToken.balanceOf(address(this));\\n\\n                if (currentBalance < assetBalanceBefore + amountsOut[i]) {\\n                    revert BalanceMustIncrease();\\n                }\\n                // Get actual amount returned for event, reuse amountsOut array\\n                amountsOut[i] = currentBalance - assetBalanceBefore;\\n            }\\n        }\\n        emit WithdrawLiquidity(\\n            amountsOut,\\n            tokens,\\n            [bptBalanceBefore - bptBalanceAfter, bptBalanceAfter, poolInterface.totalSupply()],\\n            pool,\\n            poolId\\n        );\\n        //slither-disable-end reentrancy-events\\n    }\\n\\n    /**\\n     * @notice Validate that given tokens are relying to the given pool and approve spend\\n     * @dev Separate function to avoid stack-too-deep errors\\n     * and combine gas-costly loop operations into single loop\\n     * @param amounts Amounts of corresponding tokens to approve\\n     * @param poolId Balancer or Beethoven Pool ID\\n     * @param assetBalancesBefore Array to record initial token balances\\n     */\\n    function _ensureTokenOrderAndApprovals(\\n        IVault vault,\\n        uint256[] calldata amounts,\\n        address[] memory tokens,\\n        bytes32 poolId,\\n        uint256[] memory assetBalancesBefore\\n    ) private {\\n        // (two part verification: total number checked here, and individual match check below)\\n\\n        // Partial return values are intentionally ignored. This call provides the most efficient way to get the data.\\n        // slither-disable-next-line unused-return\\n        (IERC20[] memory poolAssets,,) = vault.getPoolTokens(poolId);\\n\\n        uint256 nTokens = amounts.length;\\n\\n        if (poolAssets.length != nTokens) {\\n            revert ArraysLengthMismatch();\\n        }\\n\\n        // run through tokens and make sure we have approvals\\n        // for at least one non-zero amount (and correct token order)\\n        bool hasNonZeroAmount = false;\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            uint256 currentAmount = amounts[i];\\n            IERC20 currentToken = IERC20(tokens[i]);\\n\\n            // make sure asset is supported (and matches the pool's assets)\\n            if (currentToken != poolAssets[i]) {\\n                revert TokenPoolAssetMismatch();\\n            }\\n            // record previous balance for this asset\\n            assetBalancesBefore[i] = currentToken.balanceOf(address(this));\\n\\n            // grant spending approval to balancer's Vault\\n            if (currentAmount != 0) {\\n                hasNonZeroAmount = true;\\n                LibAdapter._approve(currentToken, address(vault), currentAmount);\\n            }\\n        }\\n        if (!hasNonZeroAmount) {\\n            revert NoNonZeroAmountProvided();\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate request for Balancer's Vault to join the pool\\n     * @dev Separate function to avoid stack-too-deep errors\\n     * @param tokens Tokens to be deposited into pool\\n     * @param amounts Amounts of corresponding tokens to deposit\\n     * @param poolAmountOut Expected amount of LP tokens to be minted on deposit\\n     */\\n    function _getJoinPoolRequest(\\n        address pool,\\n        address[] memory tokens,\\n        uint256[] calldata amounts,\\n        uint256 poolAmountOut\\n    ) private view returns (IVault.JoinPoolRequest memory joinRequest) {\\n        uint256[] memory amountsUser = _getUserAmounts(pool, amounts);\\n\\n        joinRequest = IVault.JoinPoolRequest({\\n            assets: tokens,\\n            maxAmountsIn: amounts, // maxAmountsIn,\\n            userData: abi.encode(\\n                IVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\\n                amountsUser, //maxAmountsIn,\\n                poolAmountOut\\n                ),\\n            fromInternalBalance: false\\n        });\\n    }\\n\\n    /**\\n     * @notice We should exclude BPT amount from amounts array for userData in ComposablePools\\n     * @param pool Balancer or Beethoven pool address\\n     * @param amountsOut array of pool token amounts that length-equal with IVault#getPoolTokens array\\n     */\\n    function _getUserAmounts(\\n        address pool,\\n        uint256[] memory amountsOut\\n    ) private view returns (uint256[] memory amountsUser) {\\n        if (BalancerUtilities.isComposablePool(pool)) {\\n            uint256 uix = 0;\\n            uint256 bptIndex = IBalancerComposableStablePool(pool).getBptIndex();\\n            uint256 nTokens = amountsOut.length;\\n            amountsUser = new uint256[](nTokens - 1);\\n            for (uint256 i = 0; i < nTokens; i++) {\\n                if (i != bptIndex) {\\n                    amountsUser[uix] = amountsOut[i];\\n                    uix++;\\n                }\\n            }\\n        } else {\\n            amountsUser = amountsOut;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport { IProtocolFeesCollector } from \\\"src/interfaces/external/balancer/IProtocolFeesCollector.sol\\\";\\nimport { IAsset } from \\\"src/interfaces/external/balancer/IAsset.sol\\\";\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault {\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     *  without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        address asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind {\\n        DEPOSIT_INTERNAL,\\n        WITHDRAW_INTERNAL,\\n        TRANSFER_INTERNAL,\\n        TRANSFER_EXTERNAL\\n    }\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(\\n        bytes32 poolId,\\n        IERC20 token\\n    ) external view returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        address[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId, IERC20 indexed tokenIn, IERC20 indexed tokenOut, uint256 amountIn, uint256 amountOut\\n    );\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IBalancerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IBalancerPool is IERC20Metadata {\\n    /// @notice returns total supply of Balancer pool\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice gets Balancer poolId\\n     * @return bytes32 poolId\\n     */\\n    function getPoolId() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IBalancerComposableStablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalancerComposableStablePool {\\n    function getActualSupply() external view returns (uint256);\\n\\n    function getBptIndex() external view returns (uint256);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getRate() external view returns (uint256);\\n\\n    function getTokenRate(IERC20 token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/libs/LibAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Foundation. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CURVE_REGISTRY_ETH_ADDRESS_POINTER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    error MinLpAmountNotReached();\\n    error LpTokenAmountMismatch();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n\\n    // Utils\\n    function _approve(IERC20 token, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance > 0) {\\n            token.safeDecreaseAllowance(spender, currentAllowance);\\n        }\\n        token.safeIncreaseAllowance(spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libs/BalancerUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Foundation. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IVault } from \\\"src/interfaces/external/balancer/IVault.sol\\\";\\nimport { IBalancerPool } from \\\"src/interfaces/external/balancer/IBalancerPool.sol\\\";\\nimport { IBalancerMetaStablePool } from \\\"src/interfaces/external/balancer/IBalancerMetaStablePool.sol\\\";\\nimport { IBalancerComposableStablePool } from \\\"src/interfaces/external/balancer/IBalancerComposableStablePool.sol\\\";\\n\\nlibrary BalancerUtilities {\\n    error BalancerVaultReentrancy();\\n\\n    // 400 is Balancers Vault REENTRANCY error code\\n    bytes32 internal constant REENTRANCY_ERROR_HASH = keccak256(abi.encodeWithSignature(\\\"Error(string)\\\", \\\"BAL#400\\\"));\\n\\n    /**\\n     * @notice Verifies reentrancy to the Balancer Vault\\n     * @dev Reverts if gets BAL#400 error\\n     */\\n    function checkReentrancy(address balancerVault) external view {\\n        // solhint-disable max-line-length\\n        // https://github.com/balancer/balancer-v2-monorepo/blob/227683919a7031615c0bc7f144666cdf3883d212/pkg/pool-utils/contracts/lib/VaultReentrancyLib.sol\\n        (, bytes memory returnData) = balancerVault.staticcall{ gas: 10_000 }(\\n            abi.encodeWithSelector(IVault.manageUserBalance.selector, new IVault.UserBalanceOp[](0))\\n        );\\n        if (keccak256(returnData) == REENTRANCY_ERROR_HASH) {\\n            revert BalancerVaultReentrancy();\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a given address is Balancer Composable pool\\n     * @dev Using the presence of a getBptIndex() fn as an indicator of pool type\\n     */\\n    function isComposablePool(address pool) public view returns (bool) {\\n        // slither-disable-start low-level-calls\\n        // solhint-disable-next-line no-unused-vars\\n        (bool success, bytes memory data) = pool.staticcall(abi.encodeWithSignature(\\\"getBptIndex()\\\"));\\n        if (success) {\\n            return data.length > 0;\\n        }\\n        // slither-disable-end low-level-calls\\n        return success;\\n    }\\n\\n    /**\\n     * @dev This helper function is a fast and cheap way to convert between IERC20[] and IAsset[] types\\n     */\\n    function _convertERC20sToAddresses(IERC20[] memory tokens) internal pure returns (address[] memory assets) {\\n        //slither-disable-start assembly\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            assets := tokens\\n        }\\n        //slither-disable-end assembly\\n    }\\n\\n    /**\\n     * @dev This helper function to retrieve Balancer pool tokens\\n     */\\n    function _getPoolTokens(\\n        IVault balancerVault,\\n        address balancerPool\\n    ) internal view returns (IERC20[] memory assets, uint256[] memory balances) {\\n        bytes32 poolId = IBalancerPool(balancerPool).getPoolId();\\n\\n        (assets, balances,) = balancerVault.getPoolTokens(poolId);\\n    }\\n\\n    /// @notice This function retrieves tokens (skipping the BPT) from Balancer composable pools\\n    function _getComposablePoolTokensSkipBpt(\\n        IVault balancerVault,\\n        address balancerPool\\n    ) internal view returns (IERC20[] memory tokens, uint256[] memory balances) {\\n        (IERC20[] memory allTokens, uint256[] memory allBalances) =\\n            BalancerUtilities._getPoolTokens(balancerVault, balancerPool);\\n\\n        uint256 nTokens = allTokens.length;\\n        tokens = new IERC20[](nTokens - 1);\\n        balances = new uint256[](nTokens - 1);\\n\\n        uint256 lastIndex = 0;\\n        uint256 bptIndex = IBalancerComposableStablePool(balancerPool).getBptIndex();\\n        for (uint256 i = 0; i < nTokens;) {\\n            // skip pool token\\n            if (i == bptIndex) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            // copy tokens and balances\\n            tokens[lastIndex] = allTokens[i];\\n            balances[lastIndex] = allBalances[i];\\n            unchecked {\\n                ++i;\\n                ++lastIndex;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the virtual price of a Balancer metastable pool with an invariant adjustment\\n     * @dev removes accrued admin fees that haven't been taken yet by Balancer\\n     */\\n    function _getMetaStableVirtualPrice(\\n        IVault balancerVault,\\n        address balancerPool\\n    ) internal view returns (uint256 virtualPrice) {\\n        IBalancerMetaStablePool pool = IBalancerMetaStablePool(balancerPool);\\n        virtualPrice = pool.getRate(); // e18\\n\\n        uint256 totalSupply = pool.totalSupply(); // e18\\n        uint256 unscaledInv = (virtualPrice * totalSupply) / 1e18; // e18\\n        uint256 lastInvariant = pool.getLastInvariant(); // e18\\n        if (unscaledInv > lastInvariant) {\\n            uint256 delta = unscaledInv - lastInvariant; // e18 - e18 -> e18\\n            uint256 swapFee = balancerVault.getProtocolFeesCollector().getSwapFeePercentage(); //e18\\n            uint256 protocolPortion = ((delta * swapFee) / 1e18); // e18\\n            uint256 scaledInv = unscaledInv - protocolPortion; // e18 - e18 -> e18\\n            virtualPrice = scaledInv * 1e18 / totalSupply; // e36 / e18 -> e18\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Foundation. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Address } from \\\"openzeppelin-contracts/utils/Address.sol\\\";\\n\\nlibrary Errors {\\n    using Address for address;\\n    ///////////////////////////////////////////////////////////////////\\n    //                       Set errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error AccessDenied();\\n    error ZeroAddress(string paramName);\\n    error ZeroAmount();\\n    error InsufficientBalance(address token);\\n    error AssetNotAllowed(address token);\\n    error NotImplemented();\\n    error InvalidAddress(address addr);\\n    error InvalidParam(string paramName);\\n    error InvalidParams();\\n    error UnsafePrice(address token, uint256 spotPrice, uint256 safePrice);\\n    error AlreadySet(string param);\\n    error AlreadyRegistered(address param);\\n    error SlippageExceeded(uint256 expected, uint256 actual);\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2, string details);\\n\\n    error ItemNotFound();\\n    error ItemExists();\\n    error MissingRole(bytes32 role, address user);\\n    error RegistryItemMissing(string item);\\n    error NotRegistered();\\n    // Used to check storage slot is empty before setting.\\n    error MustBeZero();\\n    // Used to check storage slot set before deleting.\\n    error MustBeSet();\\n\\n    error ApprovalFailed(address token);\\n    error FlashLoanFailed(address token, uint256 amount);\\n\\n    error SystemMismatch(address source1, address source2);\\n\\n    error InvalidToken(address token);\\n    error UnreachableError();\\n\\n    function verifyNotZero(address addr, string memory paramName) internal pure {\\n        if (addr == address(0)) {\\n            revert ZeroAddress(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(bytes32 key, string memory paramName) internal pure {\\n        if (key == bytes32(0)) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotEmpty(string memory val, string memory paramName) internal pure {\\n        if (bytes(val).length == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(uint256 num, string memory paramName) internal pure {\\n        if (num == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifySystemsMatch(address component1, address component2) internal view {\\n        bytes memory call = abi.encodeWithSignature(\\\"getSystemRegistry()\\\");\\n\\n        address registry1 = abi.decode(component1.functionStaticCall(call), (address));\\n        address registry2 = abi.decode(component2.functionStaticCall(call), (address));\\n\\n        if (registry1 != registry2) {\\n            revert SystemMismatch(component1, component2);\\n        }\\n    }\\n\\n    function verifyArrayLengths(uint256 length1, uint256 length2, string memory details) internal pure {\\n        if (length1 != length2) {\\n            revert ArrayLengthMismatch(length1, length2, details);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IProtocolFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IProtocolFeesCollector {\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n// solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IBalancerMetaStablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IRateProvider } from \\\"src/interfaces/external/balancer/IRateProvider.sol\\\";\\n\\ninterface IBalancerMetaStablePool {\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getRate() external view returns (uint256);\\n\\n    function getLastInvariant() external view returns (uint256);\\n\\n    function getLatest(uint8 x) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getRateProviders() external view returns (IRateProvider[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/balancer/IRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\npragma solidity 0.8.17;\\n\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/erc4626-tests/\",\r\n      \"prb-math/=lib/prb-math/\",\r\n      \"crytic/properties/=lib/properties/\",\r\n      \"ERC4626/=lib/properties/lib/ERC4626/contracts/\",\r\n      \"properties/=lib/properties/contracts/\",\r\n      \"solmate/=lib/properties/lib/solmate/src/\",\r\n      \"usingtellor/=lib/usingtellor/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {\r\n      \"src/destinations/adapters/BalancerBeethovenAdapter.sol\": {\r\n        \"BalancerBeethovenAdapter\": \"0x122cDdB001dF0006D046b2Bf7eC59ad01630fB75\"\r\n      },\r\n      \"src/destinations/adapters/rewards/AuraRewardsAdapter.sol\": {\r\n        \"AuraRewards\": \"0xF5f6dd22538e472ACbE2a1877cE199D0801494c5\"\r\n      },\r\n      \"src/destinations/adapters/staking/AuraAdapter.sol\": {\r\n        \"AuraStaking\": \"0x508633033ba8b810Bbf23677D74FB575bFdc0208\"\r\n      },\r\n      \"src/destinations/adapters/staking/ConvexAdapter.sol\": {\r\n        \"ConvexStaking\": \"0x52Cd2861f3AC5b19F6f8610b47248d9a74FAD63B\"\r\n      },\r\n      \"src/libs/BalancerUtilities.sol\": {\r\n        \"BalancerUtilities\": \"0x04Ae00491cbE37FA3f68b7708E006644464a2915\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceMustIncrease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalanceChange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNonZeroAmountProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenPoolAssetMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsDeposited\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"lpAmounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"DeployLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsWithdrawn\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"lpAmounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"WithdrawLiquidity\",\"type\":\"event\"}]", "ContractName": "BalancerBeethovenAdapter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}