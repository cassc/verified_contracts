{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface ISoulsLocker {\r\n    function getSoulsInHero(uint256 heroId) external view returns (uint16[] memory);\r\n}\r\n\r\ninterface IWrapper {\r\n    function transferFromBatch(address from, address to, uint256[] calldata tokenId) external;\r\n}\r\n\r\ninterface IEditions1155 {\r\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data, uint256 minterIdx) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract SpiritsToEdition is Ownable {\r\n\r\n    // Le Anime v2 tokenId offset (tokenId = editionNr + OFFSETAN2)\r\n    uint256 private constant OFFSETAN2 = 100000;\r\n\r\n    uint256 private constant MINTER_ID = 1;\r\n\r\n    uint256 private constant EDITION_ID = 2;\r\n\r\n    uint256 private constant editionSizeSpirits = 20;\r\n\r\n    uint256 private constant editionSizeEth = 20;\r\n\r\n    address private constant leAnimeAddress = 0x03BEbcf3D62C1e7465f8a095BFA08a79CA2892A1;\r\n\r\n    address private constant locker = 0x1eb4490091bd0fFF6c3973623C014D082936EA03;\r\n\r\n    address private constant talanjiAddress = 0x78C7ac5D41bE409453e3B32E79B7f832D7c0A372;\r\n\r\n    address private constant erc1155editions = 0xfb0EcD5d5cAD8E498f49000A6CE5423763b039EC;\r\n\r\n    uint256 public editionCounterSpirits;\r\n    uint256 public editionCounterEth;\r\n    \r\n    uint256 public ethPrice;\r\n    uint256 public spiritsPrice;\r\n\r\n    bool public dropActive;\r\n\r\n    constructor(){\r\n        ethPrice = 0.1 ether;\r\n        spiritsPrice = 3;\r\n    }\r\n\r\n    /////////\r\n    // OWNER FUNCTIONS\r\n    /////////\r\n\r\n    // Withdraw all ETH to owner address\r\n    function withdrawEth() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    // Activate / Deactivate drop\r\n    function activateDrop(bool activeState) public onlyOwner {\r\n        dropActive = activeState;\r\n    }\r\n\r\n    // Set the prices in ETH and Nr of spirits to sacrifice\r\n    function setPrices(uint256 ethPrice_, uint256 spiritsPrice_) public onlyOwner {\r\n        ethPrice = ethPrice_;\r\n        spiritsPrice = spiritsPrice_;\r\n    }\r\n\r\n    /////////\r\n    // SALE\r\n    /////////\r\n\r\n    function buyWithEth() payable external {\r\n        require(dropActive, \"Not Active\");\r\n        require(editionCounterEth < editionSizeEth, \"Sold Out\");\r\n        require(msg.value == ethPrice, \"Price Not Matching\");\r\n\r\n        editionCounterEth++;\r\n\r\n        IEditions1155(erc1155editions).mint(msg.sender, EDITION_ID, 1, \"\", MINTER_ID);\r\n    }\r\n\r\n    function buyWithSpirits(uint256[] calldata tokenId) external {\r\n        require(dropActive, \"Not Active\");\r\n        require(editionCounterSpirits < editionSizeSpirits, \"Sold out\");\r\n        require(tokenId.length == spiritsPrice, \"Spirits Not Matching\");\r\n\r\n        // temporary variable to store current tokenId\r\n        uint16 currTokenId;\r\n\r\n        for (uint256 i = 0; i < tokenId.length; ++i) {\r\n            currTokenId = uint16(tokenId[i] - OFFSETAN2);\r\n\r\n            // needs to be a Spirit NFT (tokenId >= 1574)\r\n            require(currTokenId > 1573, \"Not a Spirit\");\r\n\r\n            // check that the NFT is not a Hero - it needs to contain 0 NFTs\r\n            require(ISoulsLocker(locker).getSoulsInHero(currTokenId).length == 0, \"Cannot sacrifice a Hero\");\r\n        }\r\n\r\n        // transfer and lock all the sacrificed spirits into talanji\r\n        IWrapper(leAnimeAddress).transferFromBatch(msg.sender, talanjiAddress, tokenId);\r\n\r\n        // add edition to counter\r\n        editionCounterSpirits++;\r\n\r\n        // mint here\r\n        IEditions1155(erc1155editions).mint(msg.sender, EDITION_ID, 1, \"\", MINTER_ID);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"activeState\",\"type\":\"bool\"}],\"name\":\"activateDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"buyWithSpirits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionCounterEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionCounterSpirits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spiritsPrice_\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spiritsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpiritsToEdition", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5dce2e280a01def0adfb1b52f379d57a7f39953f46509dabe924425e87462a7b"}