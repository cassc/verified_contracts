{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IGateway {\\n    /// @return Remote gateway\\n    function getRemoteGateway() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IL2Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {IGateway} from \\\"./IGateway.sol\\\";\\n\\ninterface IL2Gateway is IGateway {\\n    /// @notice Emit when sending a message\\n    event L2GatewayMessageSent(uint256 value, bytes callData);\\n\\n    /// @notice Send message to remote gateway\\n    /// @param _value The msg value\\n    /// @param _callData The call data\\n    function sendMessage(uint256 _value, bytes calldata _callData) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZkLink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ZkLink interface contract\\n/// @author zk.link\\ninterface IZkLink {\\n    /// @notice Send l2 requests sync status to primary chain\\n    /// @param _newTotalSyncedPriorityTxs New sync point\\n    function syncL2Requests(uint256 _newTotalSyncedPriorityTxs) external payable;\\n\\n    /// @notice Receive batch root from primary chain\\n    /// @param _batchNumber The batch number\\n    /// @param _l2LogsRootHash The L2 to L1 log root hash\\n    /// @param _forwardEthAmount The forward eth amount\\n    function syncBatchRoot(uint256 _batchNumber, bytes32 _l2LogsRootHash, uint256 _forwardEthAmount) external payable;\\n\\n    /// @notice Receive range batch root hash from primary chain\\n    /// @param _fromBatchNumber The batch number from\\n    /// @param _toBatchNumber The batch number to\\n    /// @param _rangeBatchRootHash The accumulation hash of l2LogsRootHash in the range [`_fromBatchNumber`, `_toBatchNumber`]\\n    /// @param _forwardEthAmount The forward eth amount\\n    function syncRangeBatchRoot(\\n        uint256 _fromBatchNumber,\\n        uint256 _toBatchNumber,\\n        bytes32 _rangeBatchRootHash,\\n        uint256 _forwardEthAmount\\n    ) external payable;\\n\\n    /// @notice Receive l2 tx hash from primary chain\\n    /// @param _l2TxHash The l2 tx hash on local chain\\n    /// @param _primaryChainL2TxHash The l2 tx hash on primary chain\\n    function syncL2TxHash(bytes32 _l2TxHash, bytes32 _primaryChainL2TxHash) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ZkLink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {AddressAliasHelper} from \\\"./zksync/l1-contracts/vendor/AddressAliasHelper.sol\\\";\\nimport {IZkLink} from \\\"./interfaces/IZkLink.sol\\\";\\nimport {IL2Gateway} from \\\"./interfaces/IL2Gateway.sol\\\";\\nimport {IMailbox, TxStatus} from \\\"./zksync/l1-contracts/zksync/interfaces/IMailbox.sol\\\";\\nimport {IAdmin} from \\\"./zksync/l1-contracts/zksync/interfaces/IAdmin.sol\\\";\\nimport {IZkSync} from \\\"./zksync/l1-contracts/zksync/interfaces/IZkSync.sol\\\";\\nimport {Merkle} from \\\"./zksync/l1-contracts/zksync/libraries/Merkle.sol\\\";\\nimport {TransactionValidator} from \\\"./zksync/l1-contracts/zksync/libraries/TransactionValidator.sol\\\";\\nimport {L2Log, L2Message, PubdataPricingMode, FeeParams, SecondaryChainSyncStatus} from \\\"./zksync/l1-contracts/zksync/Storage.sol\\\";\\nimport {UncheckedMath} from \\\"./zksync/l1-contracts/common/libraries/UncheckedMath.sol\\\";\\nimport {UnsafeBytes} from \\\"./zksync/l1-contracts/common/libraries/UnsafeBytes.sol\\\";\\nimport {REQUIRED_L2_GAS_PRICE_PER_PUBDATA, MAX_NEW_FACTORY_DEPS, L1_GAS_PER_PUBDATA_BYTE, L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH} from \\\"./zksync/l1-contracts/zksync/Config.sol\\\";\\nimport {L2_TO_L1_MESSENGER_SYSTEM_CONTRACT_ADDR, L2_BOOTLOADER_ADDRESS, L2_ETH_TOKEN_SYSTEM_CONTRACT_ADDR} from \\\"./zksync/l1-contracts/common/L2ContractAddresses.sol\\\";\\nimport {IGetters} from \\\"./zksync/l1-contracts/zksync/interfaces/IGetters.sol\\\";\\n\\n/// @title ZkLink contract\\n/// @author zk.link\\ncontract ZkLink is\\n    IZkLink,\\n    IMailbox,\\n    IAdmin,\\n    IGetters,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using UncheckedMath for uint256;\\n\\n    /// @dev The forward request type hash\\n    bytes32 public constant FORWARD_REQUEST_TYPE_HASH =\\n        keccak256(\\n            \\\"ForwardL2Request(address gateway,bool isContractCall,address sender,uint256 txId,address contractAddressL2,uint256 l2Value,bytes32 l2CallDataHash,uint256 l2GasLimit,uint256 l2GasPricePerPubdata,bytes32 factoryDepsHash,address refundRecipient)\\\"\\n        );\\n\\n    /// @dev The length of withdraw message sent to secondary chain\\n    uint256 private constant L2_WITHDRAW_MESSAGE_LENGTH = 108;\\n\\n    /// @dev Whether eth is the gas token\\n    bool public immutable IS_ETH_GAS_TOKEN;\\n\\n    /// @notice The gateway is used for communicating with L1\\n    IL2Gateway public gateway;\\n    /// @notice List of permitted validators\\n    mapping(address validatorAddress => bool isValidator) public validators;\\n    /// @dev The white list allow to send request L2 request\\n    mapping(address contractAddress => bool isPermitToSendL2Request) public allowLists;\\n    /// @dev Gas price of primary chain\\n    uint256 public txGasPrice;\\n    /// @dev Fee params used to derive gasPrice for the L1->L2 transactions. For L2 transactions,\\n    /// the bootloader gives enough freedom to the operator.\\n    FeeParams public feeParams;\\n    /// @dev The total number of priority operations that were added to the priority queue\\n    uint256 public totalPriorityTxs;\\n    /// @dev The total number of synced priority operations\\n    uint256 public totalSyncedPriorityTxs;\\n    /// @dev The sync status for each priority operation\\n    mapping(uint256 priorityOpId => SecondaryChainSyncStatus) public priorityOpSyncStatus;\\n    /// @notice Total number of executed batches i.e. batches[totalBatchesExecuted] points at the latest executed batch\\n    /// (batch 0 is genesis)\\n    uint256 public totalBatchesExecuted;\\n    /// @dev Stored root hashes of L2 -> L1 logs\\n    mapping(uint256 batchNumber => bytes32 l2LogsRootHash) public l2LogsRootHashes;\\n    /// @dev Stored the l2 tx hash map from secondary chain to primary chain\\n    mapping(bytes32 l2TxHash => bytes32 primaryChainL2TxHash) public l2TxHashMap;\\n    /// @dev The total forward fee payed to validator\\n    uint256 public totalValidatorForwardFee;\\n    /// @dev The total forward fee withdrawn by validator\\n    uint256 public totalValidatorForwardFeeWithdrawn;\\n    /// @dev A mapping L2 batch number => message number => flag.\\n    /// @dev The L2 -> L1 log is sent for every withdrawal, so this mapping is serving as\\n    /// a flag to indicate that the message was already processed.\\n    /// @dev Used to indicate that eth withdrawal was already processed\\n    mapping(uint256 l2BatchNumber => mapping(uint256 l2ToL1MessageNumber => bool isFinalized))\\n        public isEthWithdrawalFinalized;\\n    /// @dev The forward fee allocator\\n    address public forwardFeeAllocator;\\n    /// @dev The range batch root hash of [fromBatchNumber, toBatchNumber]\\n    /// The key is keccak256(abi.encodePacked(fromBatchNumber, toBatchNumber))\\n    mapping(bytes32 range => bytes32 rangeBatchRootHash) public rangeBatchRootHashes;\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Gateway init\\n    event InitGateway(IL2Gateway indexed gateway);\\n    /// @notice Contract's permit status changed\\n    event ContractAllowStatusUpdate(address indexed contractAddress, bool isPermit);\\n    /// @notice Tx gas price changed\\n    event TxGasPriceUpdate(uint256 oldTxGasPrice, uint256 newTxGasPrice);\\n    /// @notice Validator's status changed\\n    event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive);\\n    /// @notice Fee params for L1->L2 transactions changed\\n    event NewFeeParams(FeeParams oldFeeParams, FeeParams newFeeParams);\\n    /// @notice New priority request event. Emitted when a request is placed into the priority queue\\n    event NewPriorityRequest(uint256 priorityOpId, ForwardL2Request l2Request);\\n    /// @notice Emitted send sync status to primary chain.\\n    event SyncL2Requests(uint256 totalSyncedPriorityTxs, bytes32 syncHash, uint256 forwardEthAmount);\\n    /// @notice Emitted when receive batch root from primary chain.\\n    event SyncBatchRoot(uint256 batchNumber, bytes32 l2LogsRootHash, uint256 forwardEthAmount);\\n    /// @notice Emitted when receive range batch root hash from primary chain.\\n    event SyncRangeBatchRoot(\\n        uint256 fromBatchNumber,\\n        uint256 toBatchNumber,\\n        bytes32 rangeBatchRootHash,\\n        uint256 forwardEthAmount\\n    );\\n    /// @notice Emitted when open range batch root hash.\\n    event OpenRangeBatchRoot(uint256 fromBatchNumber, uint256 toBatchNumber);\\n    /// @notice Emitted when receive l2 tx hash from primary chain.\\n    event SyncL2TxHash(bytes32 l2TxHash, bytes32 primaryChainL2TxHash);\\n    /// @notice Emitted when validator withdraw forward fee\\n    event WithdrawForwardFee(address indexed receiver, uint256 amount);\\n    /// @notice Emitted when the withdrawal is finalized on L1 and funds are released.\\n    /// @param to The address to which the funds were sent\\n    /// @param amount The amount of funds that were sent\\n    event EthWithdrawalFinalized(address indexed to, uint256 amount);\\n    /// @notice Forward fee allocator changed\\n    event ForwardFeeAllocatorUpdate(address oldAllocator, address newAllocator);\\n\\n    /// @notice Check if msg sender is gateway\\n    modifier onlyGateway() {\\n        require(msg.sender == address(gateway), \\\"Not gateway\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if validator is active\\n    modifier onlyValidator() {\\n        require(validators[msg.sender], \\\"Not validator\\\"); // validator is not active\\n        _;\\n    }\\n\\n    /// @notice Checks if msg sender is forward fee allocator\\n    modifier onlyForwardFeeAllocator() {\\n        require(msg.sender == forwardFeeAllocator, \\\"Not forward fee allocator\\\");\\n        _;\\n    }\\n\\n    constructor(bool _isEthGasToken) {\\n        IS_ETH_GAS_TOKEN = _isEthGasToken;\\n        _disableInitializers();\\n    }\\n\\n    function initialize() external initializer {\\n        __Ownable_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\\n        // can only called by owner\\n    }\\n\\n    /// @dev Pause the contract, can only be called by the owner\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpause the contract, can only be called by the owner\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getGateway() external view returns (IL2Gateway) {\\n        return gateway;\\n    }\\n\\n    function getGovernor() external view returns (address) {\\n        return owner();\\n    }\\n\\n    function getTotalBatchesExecuted() external view returns (uint256) {\\n        return totalBatchesExecuted;\\n    }\\n\\n    function getTotalPriorityTxs() external view returns (uint256) {\\n        return totalPriorityTxs;\\n    }\\n\\n    function isValidator(address _address) external view returns (bool) {\\n        return validators[_address];\\n    }\\n\\n    function l2LogsRootHash(uint256 _batchNumber) external view returns (bytes32 merkleRoot) {\\n        return l2LogsRootHashes[_batchNumber];\\n    }\\n\\n    function getPriorityTxMaxGasLimit() public pure returns (uint256) {\\n        return 72000000;\\n    }\\n\\n    /// @dev Init gateway, can only be called by the owner\\n    function setGateway(IL2Gateway _gateway) external onlyOwner {\\n        require(address(gateway) == address(0), \\\"Duplicate init gateway\\\");\\n        require(address(_gateway) != address(0), \\\"Invalid gateway\\\");\\n        gateway = _gateway;\\n        emit InitGateway(_gateway);\\n    }\\n\\n    /// @dev Update the permit status of contract, can only be called by the owner\\n    function setAllowList(address _contractAddress, bool _permitted) external onlyOwner {\\n        if (allowLists[_contractAddress] != _permitted) {\\n            allowLists[_contractAddress] = _permitted;\\n            emit ContractAllowStatusUpdate(_contractAddress, _permitted);\\n        }\\n    }\\n\\n    /// @dev Update the tx gas price\\n    function setTxGasPrice(uint256 _newTxGasPrice) external onlyOwner {\\n        uint256 oldTxGasPrice = txGasPrice;\\n        if (oldTxGasPrice != _newTxGasPrice) {\\n            txGasPrice = _newTxGasPrice;\\n            emit TxGasPriceUpdate(oldTxGasPrice, _newTxGasPrice);\\n        }\\n    }\\n\\n    function setValidator(address _validator, bool _active) external onlyGateway {\\n        if (validators[_validator] != _active) {\\n            validators[_validator] = _active;\\n            emit ValidatorStatusUpdate(_validator, _active);\\n        }\\n    }\\n\\n    /// @dev https://github.com/matter-labs/era-contracts/blob/e0a33ce73c4decd381446a6eb812b14c2ff69c47/l1-contracts/contracts/zksync/facets/Admin.sol#L88\\n    function changeFeeParams(FeeParams calldata _newFeeParams) external onlyGateway {\\n        // Double checking that the new fee params are valid, i.e.\\n        // the maximal pubdata per batch is not less than the maximal pubdata per priority transaction.\\n        require(_newFeeParams.maxPubdataPerBatch >= _newFeeParams.priorityTxMaxPubdata, \\\"n6\\\");\\n\\n        FeeParams memory oldFeeParams = feeParams;\\n        feeParams = _newFeeParams;\\n\\n        emit NewFeeParams(oldFeeParams, _newFeeParams);\\n    }\\n\\n    /// @dev Update the forward fee allocator\\n    function setForwardFeeAllocator(address _newForwardFeeAllocator) external onlyOwner {\\n        require(_newForwardFeeAllocator != address(0), \\\"Invalid allocator\\\");\\n        address oldAllocator = forwardFeeAllocator;\\n        if (oldAllocator != _newForwardFeeAllocator) {\\n            forwardFeeAllocator = _newForwardFeeAllocator;\\n            emit ForwardFeeAllocatorUpdate(oldAllocator, _newForwardFeeAllocator);\\n        }\\n    }\\n\\n    function l2TransactionBaseCost(\\n        uint256 _gasPrice,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit\\n    ) public view returns (uint256) {\\n        uint256 l2GasPrice = _deriveL2GasPrice(_gasPrice, _l2GasPerPubdataByteLimit);\\n        return l2GasPrice * _l2GasLimit;\\n    }\\n\\n    function requestL2Transaction(\\n        address _contractL2,\\n        uint256 _l2Value,\\n        bytes calldata _calldata,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit,\\n        bytes[] calldata _factoryDeps,\\n        address _refundRecipient\\n    ) external payable nonReentrant whenNotPaused returns (bytes32 canonicalTxHash) {\\n        // Disable l2 value if eth is not the gas token\\n        if (!IS_ETH_GAS_TOKEN) {\\n            require(_l2Value == 0, \\\"Not allow l2 value\\\");\\n        }\\n        // Change the sender address if it is a smart contract to prevent address collision between L1 and L2.\\n        // Please note, currently zkSync address derivation is different from Ethereum one, but it may be changed in the future.\\n        address sender = msg.sender;\\n        bool isContractCall = false;\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (sender != tx.origin) {\\n            // Check contract call is allowed for safe reasons\\n            require(allowLists[sender], \\\"Not allow to send L2 request\\\");\\n            sender = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\\n            isContractCall = true;\\n        } else {\\n            // Temporarily prohibit contract calls from EOA address for safe reasons\\n            require(_calldata.length == 0, \\\"Not allow to call contract\\\");\\n        }\\n\\n        // Enforcing that `_l2GasPerPubdataByteLimit` equals to a certain constant number. This is needed\\n        // to ensure that users do not get used to using \\\"exotic\\\" numbers for _l2GasPerPubdataByteLimit, e.g. 1-2, etc.\\n        // VERY IMPORTANT: nobody should rely on this constant to be fixed and every contract should give their users the ability to provide the\\n        // ability to provide `_l2GasPerPubdataByteLimit` for each independent transaction.\\n        // CHANGING THIS CONSTANT SHOULD BE A CLIENT-SIDE CHANGE.\\n        require(_l2GasPerPubdataByteLimit == REQUIRED_L2_GAS_PRICE_PER_PUBDATA, \\\"Invalid l2GasPerPubdataByteLimit\\\");\\n        require(_factoryDeps.length <= MAX_NEW_FACTORY_DEPS, \\\"Invalid factoryDeps\\\");\\n\\n        // Checking that the user provided enough ether to pay for the transaction.\\n        uint256 l2GasPrice = _deriveL2GasPrice(txGasPrice, _l2GasPerPubdataByteLimit);\\n        uint256 baseCost = l2GasPrice * _l2GasLimit;\\n        require(msg.value == baseCost + _l2Value, \\\"Invalid msg value\\\"); // The `msg.value` doesn't cover the transaction cost\\n        totalValidatorForwardFee = totalValidatorForwardFee + baseCost;\\n\\n        // If the `_refundRecipient` is not provided, we use the `sender` as the recipient.\\n        address refundRecipient = _refundRecipient == address(0) ? sender : _refundRecipient;\\n        // If the `_refundRecipient` is a smart contract, we apply the L1 to L2 alias to prevent foot guns.\\n        if (refundRecipient.code.length > 0) {\\n            refundRecipient = AddressAliasHelper.applyL1ToL2Alias(refundRecipient);\\n        }\\n\\n        // Build l2 request params\\n        uint256 _totalPriorityTxs = totalPriorityTxs;\\n        ForwardL2Request memory request = ForwardL2Request(\\n            gateway.getRemoteGateway(),\\n            isContractCall,\\n            sender,\\n            _totalPriorityTxs,\\n            _contractL2,\\n            _l2Value,\\n            _calldata,\\n            _l2GasLimit,\\n            _l2GasPerPubdataByteLimit,\\n            _factoryDeps,\\n            refundRecipient\\n        );\\n        // Validate l2 transaction\\n        {\\n            L2CanonicalTransaction memory transaction = _serializeL2Transaction(request);\\n            bytes memory transactionEncoding = abi.encode(transaction);\\n            TransactionValidator.validateL1ToL2Transaction(\\n                transaction,\\n                transactionEncoding,\\n                getPriorityTxMaxGasLimit(),\\n                feeParams.priorityTxMaxPubdata\\n            );\\n        }\\n        canonicalTxHash = hashForwardL2Request(request);\\n\\n        // Accumulate sync status\\n        SecondaryChainSyncStatus memory syncStatus;\\n        if (_totalPriorityTxs == 0) {\\n            syncStatus.hash = canonicalTxHash;\\n            syncStatus.amount = _l2Value;\\n        } else {\\n            syncStatus = priorityOpSyncStatus[_totalPriorityTxs - 1];\\n            syncStatus.hash = keccak256(abi.encodePacked(syncStatus.hash, canonicalTxHash));\\n            syncStatus.amount = syncStatus.amount + _l2Value;\\n        }\\n        priorityOpSyncStatus[_totalPriorityTxs] = syncStatus;\\n        totalPriorityTxs = _totalPriorityTxs + 1;\\n\\n        emit NewPriorityRequest(request.txId, request);\\n    }\\n\\n    function finalizeEthWithdrawal(\\n        uint256 _l2BatchNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBatch,\\n        bytes calldata _message,\\n        bytes32[] calldata _merkleProof\\n    ) external nonReentrant {\\n        require(IS_ETH_GAS_TOKEN, \\\"Not allow eth withdraw\\\");\\n        require(!isEthWithdrawalFinalized[_l2BatchNumber][_l2MessageIndex], \\\"jj\\\");\\n\\n        L2Message memory l2ToL1Message = L2Message({\\n            txNumberInBatch: _l2TxNumberInBatch,\\n            sender: L2_ETH_TOKEN_SYSTEM_CONTRACT_ADDR,\\n            data: _message\\n        });\\n\\n        (address _l1Gateway, uint256 _amount, address _l1WithdrawReceiver) = _parseL2WithdrawalMessage(_message);\\n        require(_l1Gateway == gateway.getRemoteGateway(), \\\"rg\\\");\\n\\n        bool proofValid = proveL2MessageInclusion(_l2BatchNumber, _l2MessageIndex, l2ToL1Message, _merkleProof);\\n        require(proofValid, \\\"pi\\\"); // Failed to verify that withdrawal was actually initialized on L2\\n\\n        isEthWithdrawalFinalized[_l2BatchNumber][_l2MessageIndex] = true;\\n        _withdrawFunds(_l1WithdrawReceiver, _amount);\\n\\n        emit EthWithdrawalFinalized(_l1WithdrawReceiver, _amount);\\n    }\\n\\n    function proveL2MessageInclusion(\\n        uint256 _batchNumber,\\n        uint256 _index,\\n        L2Message memory _message,\\n        bytes32[] calldata _proof\\n    ) public view returns (bool) {\\n        return _proveL2LogInclusion(_batchNumber, _index, _L2MessageToLog(_message), _proof);\\n    }\\n\\n    function proveL1ToL2TransactionStatus(\\n        bytes32 _l2TxHash,\\n        uint256 _l2BatchNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBatch,\\n        bytes32[] calldata _merkleProof,\\n        TxStatus _status\\n    ) public view returns (bool) {\\n        // Get l2 tx hash on primary chain\\n        bytes32 primaryChainL2TxHash = l2TxHashMap[_l2TxHash];\\n        require(primaryChainL2TxHash != bytes32(0), \\\"Invalid l2 tx hash\\\");\\n\\n        // Bootloader sends an L2 -> L1 log only after processing the L1 -> L2 transaction.\\n        // Thus, we can verify that the L1 -> L2 transaction was included in the L2 batch with specified status.\\n        //\\n        // The semantics of such L2 -> L1 log is always:\\n        // - sender = L2_BOOTLOADER_ADDRESS\\n        // - key = hash(L1ToL2Transaction)\\n        // - value = status of the processing transaction (1 - success & 0 - fail)\\n        // - isService = true (just a conventional value)\\n        // - l2ShardId = 0 (means that L1 -> L2 transaction was processed in a rollup shard, other shards are not available yet anyway)\\n        // - txNumberInBatch = number of transaction in the batch\\n        L2Log memory l2Log = L2Log({\\n            l2ShardId: 0,\\n            isService: true,\\n            txNumberInBatch: _l2TxNumberInBatch,\\n            sender: L2_BOOTLOADER_ADDRESS,\\n            key: primaryChainL2TxHash,\\n            value: bytes32(uint256(_status))\\n        });\\n        return _proveL2LogInclusion(_l2BatchNumber, _l2MessageIndex, l2Log, _merkleProof);\\n    }\\n\\n    function syncL2Requests(uint256 _newTotalSyncedPriorityTxs) external payable onlyValidator {\\n        // Check newTotalSyncedPriorityTxs\\n        require(\\n            _newTotalSyncedPriorityTxs <= totalPriorityTxs && _newTotalSyncedPriorityTxs > totalSyncedPriorityTxs,\\n            \\\"Invalid sync point\\\"\\n        );\\n\\n        // Forward eth amount is the difference of two accumulate amount\\n        SecondaryChainSyncStatus memory lastSyncStatus;\\n        if (totalSyncedPriorityTxs > 0) {\\n            lastSyncStatus = priorityOpSyncStatus[totalSyncedPriorityTxs - 1];\\n        }\\n        SecondaryChainSyncStatus memory currentSyncStatus = priorityOpSyncStatus[_newTotalSyncedPriorityTxs - 1];\\n        uint256 forwardAmount = currentSyncStatus.amount - lastSyncStatus.amount;\\n\\n        // Update synced priority txs\\n        totalSyncedPriorityTxs = _newTotalSyncedPriorityTxs;\\n\\n        // Send sync status to L1 gateway\\n        bytes memory callData = abi.encodeCall(\\n            IZkSync.syncL2Requests,\\n            (gateway.getRemoteGateway(), _newTotalSyncedPriorityTxs, currentSyncStatus.hash, forwardAmount)\\n        );\\n        gateway.sendMessage{value: msg.value + forwardAmount}(forwardAmount, callData);\\n\\n        emit SyncL2Requests(_newTotalSyncedPriorityTxs, currentSyncStatus.hash, forwardAmount);\\n    }\\n\\n    function syncBatchRoot(\\n        uint256 _batchNumber,\\n        bytes32 _l2LogsRootHash,\\n        uint256 _forwardEthAmount\\n    ) external payable onlyGateway {\\n        require(msg.value == _forwardEthAmount, \\\"Invalid forward amount\\\");\\n        // Allows repeated sending of the forward amount of the batch\\n        if (_batchNumber > totalBatchesExecuted) {\\n            totalBatchesExecuted = _batchNumber;\\n        }\\n        l2LogsRootHashes[_batchNumber] = _l2LogsRootHash;\\n        emit SyncBatchRoot(_batchNumber, _l2LogsRootHash, _forwardEthAmount);\\n    }\\n\\n    function syncRangeBatchRoot(\\n        uint256 _fromBatchNumber,\\n        uint256 _toBatchNumber,\\n        bytes32 _rangeBatchRootHash,\\n        uint256 _forwardEthAmount\\n    ) external payable onlyGateway {\\n        require(_toBatchNumber >= _fromBatchNumber, \\\"Invalid range\\\");\\n        require(msg.value == _forwardEthAmount, \\\"Invalid forward amount\\\");\\n        bytes32 range = keccak256(abi.encodePacked(_fromBatchNumber, _toBatchNumber));\\n        rangeBatchRootHashes[range] = _rangeBatchRootHash;\\n        emit SyncRangeBatchRoot(_fromBatchNumber, _toBatchNumber, _rangeBatchRootHash, _forwardEthAmount);\\n    }\\n\\n    /// @dev Unzip the root hashes in the range\\n    /// @param _fromBatchNumber The batch number from\\n    /// @param _toBatchNumber The batch number to\\n    /// @param _l2LogsRootHashes The l2LogsRootHash list in the range [`_fromBatchNumber`, `_toBatchNumber`]\\n    function openRangeBatchRootHash(\\n        uint256 _fromBatchNumber,\\n        uint256 _toBatchNumber,\\n        bytes32[] calldata _l2LogsRootHashes\\n    ) external onlyValidator {\\n        require(_toBatchNumber >= _fromBatchNumber, \\\"Invalid range\\\");\\n        bytes32 range = keccak256(abi.encodePacked(_fromBatchNumber, _toBatchNumber));\\n        bytes32 rangeBatchRootHash = rangeBatchRootHashes[range];\\n        require(rangeBatchRootHash != bytes32(0), \\\"Range batch root hash not exist\\\");\\n        uint256 rootHashesLength = _l2LogsRootHashes.length;\\n        require(rootHashesLength == _toBatchNumber - _fromBatchNumber + 1, \\\"Invalid root hashes length\\\");\\n        bytes32 _rangeBatchRootHash = _l2LogsRootHashes[0];\\n        l2LogsRootHashes[_fromBatchNumber] = _rangeBatchRootHash;\\n        unchecked {\\n            for (uint256 i = 1; i < rootHashesLength; ++i) {\\n                bytes32 _l2LogsRootHash = _l2LogsRootHashes[i];\\n                l2LogsRootHashes[_fromBatchNumber + i] = _l2LogsRootHash;\\n                _rangeBatchRootHash = Merkle._efficientHash(_rangeBatchRootHash, _l2LogsRootHash);\\n            }\\n        }\\n        require(_rangeBatchRootHash == rangeBatchRootHash, \\\"Incorrect root hash\\\");\\n        delete rangeBatchRootHashes[range];\\n        if (_toBatchNumber > totalBatchesExecuted) {\\n            totalBatchesExecuted = _toBatchNumber;\\n        }\\n        emit OpenRangeBatchRoot(_fromBatchNumber, _toBatchNumber);\\n    }\\n\\n    function syncL2TxHash(bytes32 _l2TxHash, bytes32 _primaryChainL2TxHash) external onlyGateway {\\n        l2TxHashMap[_l2TxHash] = _primaryChainL2TxHash;\\n        emit SyncL2TxHash(_l2TxHash, _primaryChainL2TxHash);\\n    }\\n\\n    function withdrawForwardFee(address _receiver, uint256 _amount) external nonReentrant onlyForwardFeeAllocator {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        uint256 newWithdrawnFee = totalValidatorForwardFeeWithdrawn + _amount;\\n        require(totalValidatorForwardFee >= newWithdrawnFee, \\\"Withdraw exceed\\\");\\n\\n        // Update withdrawn fee\\n        totalValidatorForwardFeeWithdrawn = newWithdrawnFee;\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = _receiver.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Withdraw failed\\\");\\n        emit WithdrawForwardFee(_receiver, _amount);\\n    }\\n\\n    /// @notice Derives the price for L2 gas in ETH to be paid.\\n    /// @dev https://github.com/matter-labs/era-contracts/blob/e0a33ce73c4decd381446a6eb812b14c2ff69c47/l1-contracts/contracts/zksync/facets/Mailbox.sol#L147\\n    /// @param _l1GasPrice The gas price on L1.\\n    /// @param _gasPerPubdata The price for each pubdata byte in L2 gas\\n    /// @return The price of L2 gas in ETH\\n    function _deriveL2GasPrice(uint256 _l1GasPrice, uint256 _gasPerPubdata) internal view returns (uint256) {\\n        FeeParams memory _feeParams = feeParams;\\n\\n        uint256 pubdataPriceETH;\\n        if (_feeParams.pubdataPricingMode == PubdataPricingMode.Rollup) {\\n            pubdataPriceETH = L1_GAS_PER_PUBDATA_BYTE * _l1GasPrice;\\n        }\\n\\n        uint256 batchOverheadETH = uint256(_feeParams.batchOverheadL1Gas) * _l1GasPrice;\\n        uint256 fullPubdataPriceETH = pubdataPriceETH + batchOverheadETH / uint256(_feeParams.maxPubdataPerBatch);\\n\\n        uint256 l2GasPrice = _feeParams.minimalL2GasPrice + batchOverheadETH / uint256(_feeParams.maxL2GasPerBatch);\\n        uint256 minL2GasPriceETH = (fullPubdataPriceETH + _gasPerPubdata - 1) / _gasPerPubdata;\\n\\n        return Math.max(l2GasPrice, minL2GasPriceETH);\\n    }\\n\\n    function _serializeL2Transaction(\\n        ForwardL2Request memory _request\\n    ) internal pure returns (L2CanonicalTransaction memory transaction) {\\n        transaction = L2CanonicalTransaction({\\n            txType: uint256(0),\\n            from: uint256(0),\\n            to: uint256(0),\\n            gasLimit: _request.l2GasLimit, // Used in validate l2 transaction\\n            gasPerPubdataByteLimit: _request.l2GasPricePerPubdata, // Used in validate l2 transaction\\n            maxFeePerGas: uint256(0),\\n            maxPriorityFeePerGas: uint256(0),\\n            paymaster: uint256(0),\\n            nonce: uint256(0),\\n            value: uint256(0),\\n            reserved: [uint256(0), uint256(0), uint256(0), uint256(0)],\\n            data: _request.l2CallData, // Length used in validate l2 transaction\\n            signature: new bytes(0),\\n            factoryDeps: new uint256[](_request.factoryDeps.length), // Length used in validate l2 transaction\\n            paymasterInput: new bytes(0),\\n            reservedDynamic: new bytes(0)\\n        });\\n    }\\n\\n    /// @dev Convert arbitrary-length message to the raw l2 log\\n    function _L2MessageToLog(L2Message memory _message) internal pure returns (L2Log memory) {\\n        return\\n            L2Log({\\n                l2ShardId: 0,\\n                isService: true,\\n                txNumberInBatch: _message.txNumberInBatch,\\n                sender: L2_TO_L1_MESSENGER_SYSTEM_CONTRACT_ADDR,\\n                key: bytes32(uint256(uint160(_message.sender))),\\n                value: keccak256(_message.data)\\n            });\\n    }\\n\\n    /// @dev Prove that a specific L2 log was sent in a specific L2 batch number\\n    function _proveL2LogInclusion(\\n        uint256 _batchNumber,\\n        uint256 _index,\\n        L2Log memory _log,\\n        bytes32[] calldata _proof\\n    ) internal view returns (bool) {\\n        require(_batchNumber <= totalBatchesExecuted, \\\"xx\\\");\\n\\n        bytes32 hashedLog = keccak256(\\n            abi.encodePacked(_log.l2ShardId, _log.isService, _log.txNumberInBatch, _log.sender, _log.key, _log.value)\\n        );\\n        // Check that hashed log is not the default one,\\n        // otherwise it means that the value is out of range of sent L2 -> L1 logs\\n        require(hashedLog != L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH, \\\"tw\\\");\\n\\n        // It is ok to not check length of `_proof` array, as length\\n        // of leaf preimage (which is `L2_TO_L1_LOG_SERIALIZE_SIZE`) is not\\n        // equal to the length of other nodes preimages (which are `2 * 32`)\\n\\n        bytes32 calculatedRootHash = Merkle.calculateRoot(_proof, _index, hashedLog);\\n        bytes32 actualRootHash = l2LogsRootHashes[_batchNumber];\\n\\n        return actualRootHash == calculatedRootHash;\\n    }\\n\\n    /// @dev Decode the withdraw message that came from L2\\n    function _parseL2WithdrawalMessage(\\n        bytes memory _message\\n    ) internal pure returns (address l1Gateway, uint256 amount, address l1Receiver) {\\n        // We check that the message is long enough to read the data.\\n        // Please note that there are two versions of the message:\\n        // 1. The message that is sent by `withdraw(address _l1Receiver)`\\n        // It should be equal to the length of the bytes4 function signature + address l1Receiver + uint256 amount = 4 + 20 + 32 = 56 (bytes).\\n        // 2. The message that is sent by `withdrawWithMessage(address _l1Receiver, bytes calldata _additionalData)`\\n        // It should be equal to the length of the following:\\n        // bytes4 function signature + address l1Gateway + uint256 amount + address l2Sender + bytes _additionalData\\n        // (where the _additionalData = abi.encode(l1Receiver))\\n        // = 4 + 20 + 32 + 20 + 32 == 108 (bytes).\\n        require(_message.length == L2_WITHDRAW_MESSAGE_LENGTH, \\\"pm\\\");\\n\\n        (uint32 functionSignature, uint256 offset) = UnsafeBytes.readUint32(_message, 0);\\n        require(bytes4(functionSignature) == this.finalizeEthWithdrawal.selector, \\\"is\\\");\\n\\n        (l1Gateway, offset) = UnsafeBytes.readAddress(_message, offset);\\n        (amount, offset) = UnsafeBytes.readUint256(_message, offset);\\n        // The additional data is l1 receiver address\\n        (l1Receiver, offset) = UnsafeBytes.readAddress(_message, offset + 32);\\n    }\\n\\n    /// @notice Transfer ether from the contract to the receiver\\n    /// @dev Reverts only if the transfer call failed\\n    function _withdrawFunds(address _to, uint256 _amount) internal {\\n        bool callSuccess;\\n        // Low-level assembly call, to avoid any memory copying (save gas)\\n        assembly {\\n            callSuccess := call(gas(), _to, _amount, 0, 0, 0, 0)\\n        }\\n        require(callSuccess, \\\"pz\\\");\\n    }\\n\\n    function hashForwardL2Request(ForwardL2Request memory _request) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    FORWARD_REQUEST_TYPE_HASH,\\n                    _request.gateway,\\n                    _request.isContractCall,\\n                    _request.sender,\\n                    _request.txId,\\n                    _request.contractAddressL2,\\n                    _request.l2Value,\\n                    keccak256(_request.l2CallData),\\n                    _request.l2GasLimit,\\n                    _request.l2GasPricePerPubdata,\\n                    keccak256(abi.encode(_request.factoryDeps)),\\n                    _request.refundRecipient\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/common/L2ContractAddresses.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev The address of the L2 deployer system contract.\\naddress constant L2_DEPLOYER_SYSTEM_CONTRACT_ADDR = address(0x8006);\\n\\n/// @dev The special reserved L2 address. It is located in the system contracts space but doesn't have deployed\\n/// bytecode.\\n/// @dev The L2 deployer system contract allows changing bytecodes on any address if the `msg.sender` is this address.\\n/// @dev So, whenever the governor wants to redeploy system contracts, it just initiates the L1 upgrade call deployer\\n/// system contract\\n/// via the L1 -> L2 transaction with `sender == L2_FORCE_DEPLOYER_ADDR`. For more details see the\\n/// `diamond-initializers` contracts.\\naddress constant L2_FORCE_DEPLOYER_ADDR = address(0x8007);\\n\\n/// @dev The address of the special smart contract that can send arbitrary length message as an L2 log\\naddress constant L2_TO_L1_MESSENGER_SYSTEM_CONTRACT_ADDR = address(0x8008);\\n\\n/// @dev The formal address of the initial program of the system: the bootloader\\naddress constant L2_BOOTLOADER_ADDRESS = address(0x8001);\\n\\n/// @dev The address of the eth token system contract\\naddress constant L2_ETH_TOKEN_SYSTEM_CONTRACT_ADDR = address(0x800a);\\n\\n/// @dev The address of the known code storage system contract\\naddress constant L2_KNOWN_CODE_STORAGE_SYSTEM_CONTRACT_ADDR = address(0x8004);\\n\\n/// @dev The address of the context system contract\\naddress constant L2_SYSTEM_CONTEXT_SYSTEM_CONTRACT_ADDR = address(0x800b);\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/common/libraries/UncheckedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @author Matter Labs\\n * @custom:security-contact security@matterlabs.dev\\n * @notice The library for unchecked math.\\n */\\nlibrary UncheckedMath {\\n    function uncheckedInc(uint256 _number) internal pure returns (uint256) {\\n        unchecked {\\n            return _number + 1;\\n        }\\n    }\\n\\n    function uncheckedAdd(uint256 _lhs, uint256 _rhs) internal pure returns (uint256) {\\n        unchecked {\\n            return _lhs + _rhs;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/common/libraries/UnsafeBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @author Matter Labs\\n * @custom:security-contact security@matterlabs.dev\\n * @dev The library provides a set of functions that help read data from an \\\"abi.encodePacked\\\" byte array.\\n * @dev Each of the functions accepts the `bytes memory` and the offset where data should be read and returns a value of a certain type.\\n *\\n * @dev WARNING!\\n * 1) Functions don't check the length of the bytes array, so it can go out of bounds.\\n * The user of the library must check for bytes length before using any functions from the library!\\n *\\n * 2) Read variables are not cleaned up - https://docs.soliditylang.org/en/v0.8.16/internals/variable_cleanup.html.\\n * Using data in inline assembly can lead to unexpected behavior!\\n */\\nlibrary UnsafeBytes {\\n    function readUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32 result, uint256 offset) {\\n        assembly {\\n            offset := add(_start, 4)\\n            result := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    function readAddress(bytes memory _bytes, uint256 _start) internal pure returns (address result, uint256 offset) {\\n        assembly {\\n            offset := add(_start, 20)\\n            result := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    function readUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256 result, uint256 offset) {\\n        assembly {\\n            offset := add(_start, 32)\\n            result := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    function readBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32 result, uint256 offset) {\\n        assembly {\\n            offset := add(_start, 32)\\n            result := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // Original source code: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol#L228\\n    // Get slice from bytes arrays\\n    // Returns the newly created 'bytes memory'\\n    // NOTE: theoretically possible overflow of (_start + _length)\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_bytes.length >= (_start + _length), \\\"Z\\\"); // bytes length is less then start byte + length bytes\\n\\n        bytes memory tempBytes = new bytes(_length);\\n\\n        if (_length != 0) {\\n            assembly {\\n                let slice_curr := add(tempBytes, 0x20)\\n                let slice_end := add(slice_curr, _length)\\n\\n                for {\\n                    let array_current := add(_bytes, add(_start, 0x20))\\n                } lt(slice_curr, slice_end) {\\n                    slice_curr := add(slice_curr, 0x20)\\n                    array_current := add(array_current, 0x20)\\n                } {\\n                    mstore(slice_curr, mload(array_current))\\n                }\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/vendor/AddressAliasHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressAliasHelper {\\n    uint160 internal constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function converts the address that submitted a tx\\n    /// to the inbox on L1 to the msg.sender viewed on L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        unchecked {\\n            l2Address = address(uint160(l1Address) + OFFSET);\\n        }\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed on L2 to the\\n    /// address that submitted a tx to the inbox on L1\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        unchecked {\\n            l1Address = address(uint160(l2Address) - OFFSET);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/Config.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev `keccak256(\\\"\\\")`\\nbytes32 constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n/// @dev Bytes in raw L2 log\\n/// @dev Equal to the bytes size of the tuple - (uint8 ShardId, bool isService, uint16 txNumberInBatch, address sender,\\n/// bytes32 key, bytes32 value)\\nuint256 constant L2_TO_L1_LOG_SERIALIZE_SIZE = 88;\\n\\n/// @dev The maximum length of the bytes array with L2 -> L1 logs\\nuint256 constant MAX_L2_TO_L1_LOGS_COMMITMENT_BYTES = 4 + L2_TO_L1_LOG_SERIALIZE_SIZE * 512;\\n\\n/// @dev The value of default leaf hash for L2 -> L1 logs Merkle tree\\n/// @dev An incomplete fixed-size tree is filled with this value to be a full binary tree\\n/// @dev Actually equal to the `keccak256(new bytes(L2_TO_L1_LOG_SERIALIZE_SIZE))`\\nbytes32 constant L2_L1_LOGS_TREE_DEFAULT_LEAF_HASH = 0x72abee45b59e344af8a6e520241c4744aff26ed411f4c4b00f8af09adada43ba;\\n\\n// TODO: change constant to the real root hash of empty Merkle tree (SMA-184)\\nbytes32 constant DEFAULT_L2_LOGS_TREE_ROOT_HASH = bytes32(0);\\n\\n/// @dev Denotes the type of the zkSync transaction that came from L1.\\nuint256 constant PRIORITY_OPERATION_L2_TX_TYPE = 255;\\n\\n/// @dev Denotes the type of the zkSync transaction that is used for system upgrades.\\nuint256 constant SYSTEM_UPGRADE_L2_TX_TYPE = 254;\\n\\n/// @dev The maximal allowed difference between protocol versions in an upgrade. The 100 gap is needed\\n/// in case a protocol version has been tested on testnet, but then not launched on mainnet, e.g.\\n/// due to a bug found.\\nuint256 constant MAX_ALLOWED_PROTOCOL_VERSION_DELTA = 100;\\n\\n/// @dev The amount of time in seconds the validator has to process the priority transaction\\n/// NOTE: The constant is set to zero for the Alpha release period\\nuint256 constant PRIORITY_EXPIRATION = 0 days;\\n\\n/// @dev Timestamp - seconds since unix epoch.\\nuint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 3 days;\\n\\n/// @dev Maximum available error between real commit batch timestamp and analog used in the verifier (in seconds)\\n/// @dev Must be used cause miner's `block.timestamp` value can differ on some small value (as we know - 12 seconds)\\nuint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 1 hours;\\n\\n/// @dev Shift to apply to verify public input before verifying.\\nuint256 constant PUBLIC_INPUT_SHIFT = 32;\\n\\n/// @dev The maximum number of L2 gas that a user can request for an L2 transaction\\nuint256 constant MAX_GAS_PER_TRANSACTION = 80000000;\\n\\n/// @dev Even though the price for 1 byte of pubdata is 16 L1 gas, we have a slightly increased\\n/// value.\\nuint256 constant L1_GAS_PER_PUBDATA_BYTE = 17;\\n\\n/// @dev The intrinsic cost of the L1->l2 transaction in computational L2 gas\\nuint256 constant L1_TX_INTRINSIC_L2_GAS = 167157;\\n\\n/// @dev The intrinsic cost of the L1->l2 transaction in pubdata\\nuint256 constant L1_TX_INTRINSIC_PUBDATA = 88;\\n\\n/// @dev The minimal base price for L1 transaction\\nuint256 constant L1_TX_MIN_L2_GAS_BASE = 173484;\\n\\n/// @dev The number of L2 gas the transaction starts costing more with each 544 bytes of encoding\\nuint256 constant L1_TX_DELTA_544_ENCODING_BYTES = 1656;\\n\\n/// @dev The number of L2 gas an L1->L2 transaction gains with each new factory dependency\\nuint256 constant L1_TX_DELTA_FACTORY_DEPS_L2_GAS = 2473;\\n\\n/// @dev The number of L2 gas an L1->L2 transaction gains with each new factory dependency\\nuint256 constant L1_TX_DELTA_FACTORY_DEPS_PUBDATA = 64;\\n\\n/// @dev The number of pubdata an L1->L2 transaction requires with each new factory dependency\\nuint256 constant MAX_NEW_FACTORY_DEPS = 32;\\n\\n/// @dev The L2 gasPricePerPubdata required to be used in bridges.\\nuint256 constant REQUIRED_L2_GAS_PRICE_PER_PUBDATA = 800;\\n\\n/// @dev The mask which should be applied to the packed batch and L2 block timestamp in order\\n/// to obtain the L2 block timestamp. Applying this mask is equivalent to calculating modulo 2**128\\nuint256 constant PACKED_L2_BLOCK_TIMESTAMP_MASK = 0xffffffffffffffffffffffffffffffff;\\n\\n/// @dev The overhead for a transaction slot in L2 gas.\\n/// It is roughly equal to 80kk/MAX_TRANSACTIONS_IN_BATCH, i.e. how many gas would an L1->L2 transaction\\n/// need to pay to compensate for the batch being closed.\\n/// @dev It is expected that the L1 contracts will enforce that the L2 gas price will be high enough to compensate\\n/// the operator in case the batch is closed because of tx slots filling up.\\nuint256 constant TX_SLOT_OVERHEAD_L2_GAS = 10000;\\n\\n/// @dev The overhead for each byte of the bootloader memory that the encoding of the transaction.\\n/// It is roughly equal to 80kk/BOOTLOADER_MEMORY_FOR_TXS, i.e. how many gas would an L1->L2 transaction\\n/// need to pay to compensate for the batch being closed.\\n/// @dev It is expected that the L1 contracts will enforce that the L2 gas price will be high enough to compensate\\n/// the operator in case the batch is closed because of the memory for transactions being filled up.\\nuint256 constant MEMORY_OVERHEAD_GAS = 10;\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/interfaces/IAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {FeeParams} from \\\"../Storage.sol\\\";\\nimport {IL2Gateway} from \\\"../../../../interfaces/IL2Gateway.sol\\\";\\n\\n/// @title The interface of the Admin Contract that controls access rights for contract management.\\n/// @author Matter Labs\\n/// @custom:security-contact security@matterlabs.dev\\ninterface IAdmin {\\n    /// @notice Init gateway\\n    /// @param _gateway The gateway on local chain\\n    function setGateway(IL2Gateway _gateway) external;\\n\\n    /// @notice Change validator status (active or not active)\\n    /// @param _validator Validator address\\n    /// @param _active Active flag\\n    function setValidator(address _validator, bool _active) external;\\n\\n    /// @notice Change the fee params for L1->L2 transactions\\n    /// @param _newFeeParams The new fee params\\n    function changeFeeParams(FeeParams calldata _newFeeParams) external;\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/interfaces/IGetters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IL2Gateway} from \\\"../../../../interfaces/IL2Gateway.sol\\\";\\n\\n/// @title The interface of the Getters Contract that implements functions for getting contract state from outside the blockchain.\\n/// @author Matter Labs\\n/// @custom:security-contact security@matterlabs.dev\\ninterface IGetters {\\n    /*//////////////////////////////////////////////////////////////\\n                            CUSTOM GETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @return The gateway on local chain\\n    function getGateway() external view returns (IL2Gateway);\\n\\n    /// @return The address of the current governor\\n    function getGovernor() external view returns (address);\\n\\n    /// @return The total number of batches that were committed & verified & executed\\n    function getTotalBatchesExecuted() external view returns (uint256);\\n\\n    /// @return The total number of priority operations that were added to the priority queue, including all processed ones\\n    function getTotalPriorityTxs() external view returns (uint256);\\n\\n    /// @return Whether the address has a validator access\\n    function isValidator(address _address) external view returns (bool);\\n\\n    /// @return merkleRoot Merkle root of the tree with L2 logs for the selected batch\\n    function l2LogsRootHash(uint256 _batchNumber) external view returns (bytes32 merkleRoot);\\n\\n    /// @return The maximum number of L2 gas that a user can request for L1 -> L2 transactions\\n    function getPriorityTxMaxGasLimit() external view returns (uint256);\\n\\n    /// @return Whether a withdrawal has been finalized.\\n    /// @param _l2BatchNumber The L2 batch number within which the withdrawal happened.\\n    /// @param _l2MessageIndex The index of the L2->L1 message denoting the withdrawal.\\n    function isEthWithdrawalFinalized(uint256 _l2BatchNumber, uint256 _l2MessageIndex) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/interfaces/IMailbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {L2Message} from \\\"../Storage.sol\\\";\\n\\n/// @dev The enum that represents the transaction execution status\\n/// @param Failure The transaction execution failed\\n/// @param Success The transaction execution succeeded\\nenum TxStatus {\\n    Failure,\\n    Success\\n}\\n\\n/// @title The interface of the zkSync Mailbox contract that provides interfaces for L1 <-> L2 interaction.\\n/// @author Matter Labs\\n/// @custom:security-contact security@matterlabs.dev\\ninterface IMailbox {\\n    /// @dev Structure that includes all fields of the L2 transaction\\n    /// @dev The hash of this structure is the \\\"canonical L2 transaction hash\\\" and can be used as a unique identifier of a tx\\n    /// @param txType The tx type number, depending on which the L2 transaction can be interpreted differently\\n    /// @param from The sender's address. `uint256` type for possible address format changes and maintaining backward compatibility\\n    /// @param to The recipient's address. `uint256` type for possible address format changes and maintaining backward compatibility\\n    /// @param gasLimit The L2 gas limit for L2 transaction. Analog to the `gasLimit` on an L1 transactions\\n    /// @param gasPerPubdataByteLimit Maximum number of L2 gas that will cost one byte of pubdata (every piece of data that will be stored on L1 as calldata)\\n    /// @param maxFeePerGas The absolute maximum sender willing to pay per unit of L2 gas to get the transaction included in a batch. Analog to the EIP-1559 `maxFeePerGas` on an L1 transactions\\n    /// @param maxPriorityFeePerGas The additional fee that is paid directly to the validator to incentivize them to include the transaction in a batch. Analog to the EIP-1559 `maxPriorityFeePerGas` on an L1 transactions\\n    /// @param paymaster The address of the EIP-4337 paymaster, that will pay fees for the transaction. `uint256` type for possible address format changes and maintaining backward compatibility\\n    /// @param nonce The nonce of the transaction. For L1->L2 transactions it is the priority operation Id.\\n    /// @param value The value to pass with the transaction\\n    /// @param reserved The fixed-length fields for usage in a future extension of transaction formats\\n    /// @param data The calldata that is transmitted for the transaction call\\n    /// @param signature An abstract set of bytes that are used for transaction authorization\\n    /// @param factoryDeps The set of L2 bytecode hashes whose preimages were shown on L1\\n    /// @param paymasterInput The arbitrary-length data that is used as a calldata to the paymaster pre-call\\n    /// @param reservedDynamic The arbitrary-length field for usage in a future extension of transaction formats\\n    struct L2CanonicalTransaction {\\n        uint256 txType;\\n        uint256 from;\\n        uint256 to;\\n        uint256 gasLimit;\\n        uint256 gasPerPubdataByteLimit;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 paymaster;\\n        uint256 nonce;\\n        uint256 value;\\n        // In the future, we might want to add some\\n        // new fields to the struct. The `txData` struct\\n        // is to be passed to account and any changes to its structure\\n        // would mean a breaking change to these accounts. To prevent this,\\n        // we should keep some fields as \\\"reserved\\\".\\n        // It is also recommended that their length is fixed, since\\n        // it would allow easier proof integration (in case we will need\\n        // some special circuit for preprocessing transactions).\\n        uint256[4] reserved;\\n        bytes data;\\n        bytes signature;\\n        uint256[] factoryDeps;\\n        bytes paymasterInput;\\n        // Reserved dynamic type for the future use-case. Using it should be avoided,\\n        // But it is still here, just in case we want to enable some additional functionality.\\n        bytes reservedDynamic;\\n    }\\n\\n    /// @dev Internal structure that contains the parameters for the forwardRequestL2Transaction\\n    /// @param gateway The secondary chain gateway;\\n    /// @param isContractCall It's true when the request come from a contract.\\n    /// @param sender The sender's address.\\n    /// @param txId The id of the priority transaction.\\n    /// @param contractAddressL2 The address of the contract on L2 to call.\\n    /// @param l2Value The msg.value of the L2 transaction.\\n    /// @param l2CallData The call data of the L2 transaction.\\n    /// @param l2GasLimit The limit of the L2 gas for the L2 transaction\\n    /// @param l2GasPrice The price of the L2 gas in Wei to be used for this transaction.\\n    /// @param l2GasPricePerPubdata The price for a single pubdata byte in L2 gas.\\n    /// @param refundRecipient The recipient of the refund for the transaction on L2. If the transaction fails, then\\n    /// this address will receive the `l2Value`.\\n    struct ForwardL2Request {\\n        address gateway;\\n        bool isContractCall;\\n        address sender;\\n        uint256 txId;\\n        address contractAddressL2;\\n        uint256 l2Value;\\n        bytes l2CallData;\\n        uint256 l2GasLimit;\\n        uint256 l2GasPricePerPubdata;\\n        bytes[] factoryDeps;\\n        address refundRecipient;\\n    }\\n\\n    /// @notice Prove that a specific arbitrary-length message was sent in a specific L2 batch number\\n    /// @param _l2BatchNumber The executed L2 batch number in which the message appeared\\n    /// @param _index The position in the L2 logs Merkle tree of the l2Log that was sent with the message\\n    /// @param _message Information about the sent message: sender address, the message itself, tx index in the L2 batch where the message was sent\\n    /// @param _proof Merkle proof for inclusion of L2 log that was sent with the message\\n    /// @return Whether the proof is valid\\n    function proveL2MessageInclusion(\\n        uint256 _l2BatchNumber,\\n        uint256 _index,\\n        L2Message calldata _message,\\n        bytes32[] calldata _proof\\n    ) external view returns (bool);\\n\\n    /// @notice Prove that the L1 -> L2 transaction was processed with the specified status.\\n    /// @param _l2TxHash The L2 canonical transaction hash\\n    /// @param _l2BatchNumber The L2 batch number where the transaction was processed\\n    /// @param _l2MessageIndex The position in the L2 logs Merkle tree of the l2Log that was sent with the message\\n    /// @param _l2TxNumberInBatch The L2 transaction number in the batch, in which the log was sent\\n    /// @param _merkleProof The Merkle proof of the processing L1 -> L2 transaction\\n    /// @param _status The execution status of the L1 -> L2 transaction (true - success & 0 - fail)\\n    /// @return Whether the proof is correct and the transaction was actually executed with provided status\\n    /// NOTE: It may return `false` for incorrect proof, but it doesn't mean that the L1 -> L2 transaction has an opposite status!\\n    function proveL1ToL2TransactionStatus(\\n        bytes32 _l2TxHash,\\n        uint256 _l2BatchNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBatch,\\n        bytes32[] calldata _merkleProof,\\n        TxStatus _status\\n    ) external view returns (bool);\\n\\n    /// @notice Request execution of L2 transaction from L1.\\n    /// @param _contractL2 The L2 receiver address\\n    /// @param _l2Value `msg.value` of L2 transaction\\n    /// @param _calldata The input of the L2 transaction\\n    /// @param _l2GasLimit Maximum amount of L2 gas that transaction can consume during execution on L2\\n    /// @param _l2GasPerPubdataByteLimit The maximum amount L2 gas that the operator may charge the user for single byte of pubdata.\\n    /// @param _factoryDeps An array of L2 bytecodes that will be marked as known on L2\\n    /// @param _refundRecipient The address on L2 that will receive the refund for the transaction.\\n    /// @dev If the L2 deposit finalization transaction fails, the `_refundRecipient` will receive the `_l2Value`.\\n    /// Please note, the contract may change the refund recipient's address to eliminate sending funds to addresses out of control.\\n    /// - If `_refundRecipient` is a contract on L1, the refund will be sent to the aliased `_refundRecipient`.\\n    /// - If `_refundRecipient` is set to `address(0)` and the sender has NO deployed bytecode on L1, the refund will be sent to the `msg.sender` address.\\n    /// - If `_refundRecipient` is set to `address(0)` and the sender has deployed bytecode on L1, the refund will be sent to the aliased `msg.sender` address.\\n    /// @dev The address aliasing of L1 contracts as refund recipient on L2 is necessary to guarantee that the funds are controllable,\\n    /// since address aliasing to the from address for the L2 tx will be applied if the L1 `msg.sender` is a contract.\\n    /// Without address aliasing for L1 contracts as refund recipients they would not be able to make proper L2 tx requests\\n    /// through the Mailbox to use or withdraw the funds from L2, and the funds would be lost.\\n    /// @return canonicalTxHash The hash of the requested L2 transaction. This hash can be used to follow the transaction status\\n    function requestL2Transaction(\\n        address _contractL2,\\n        uint256 _l2Value,\\n        bytes calldata _calldata,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit,\\n        bytes[] calldata _factoryDeps,\\n        address _refundRecipient\\n    ) external payable returns (bytes32 canonicalTxHash);\\n\\n    /// @notice Finalize the withdrawal and release funds\\n    /// @param _l2BatchNumber The L2 batch number where the withdrawal was processed\\n    /// @param _l2MessageIndex The position in the L2 logs Merkle tree of the l2Log that was sent with the message\\n    /// @param _l2TxNumberInBatch The L2 transaction number in a batch, in which the log was sent\\n    /// @param _message The L2 withdraw data, stored in an L2 -> L1 message\\n    /// @param _merkleProof The Merkle proof of the inclusion L2 -> L1 message about withdrawal initialization\\n    function finalizeEthWithdrawal(\\n        uint256 _l2BatchNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBatch,\\n        bytes calldata _message,\\n        bytes32[] calldata _merkleProof\\n    ) external;\\n\\n    /// @notice Estimates the cost in Ether of requesting execution of an L2 transaction from L1\\n    /// @param _gasPrice expected L1 gas price at which the user requests the transaction execution\\n    /// @param _l2GasLimit Maximum amount of L2 gas that transaction can consume during execution on L2\\n    /// @param _l2GasPerPubdataByteLimit The maximum amount of L2 gas that the operator may charge the user for a single byte of pubdata.\\n    /// @return The estimated ETH spent on L2 gas for the transaction\\n    function l2TransactionBaseCost(\\n        uint256 _gasPrice,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/interfaces/IZkSync.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IZkSync {\\n    /// @notice Update secondary chain status\\n    /// @param _gateway The secondary chain gateway\\n    /// @param _active Active flag\\n    function setSecondaryChainGateway(address _gateway, bool _active) external;\\n\\n    /// @notice Receive sync status from secondary chain\\n    /// @param _secondaryChainGateway The secondary chain gateway address\\n    /// @param _newTotalSyncedPriorityTxs New sync point\\n    /// @param _syncHash New sync hash\\n    /// @param _forwardEthAmount The difference eth amount between two sync points\\n    function syncL2Requests(\\n        address _secondaryChainGateway,\\n        uint256 _newTotalSyncedPriorityTxs,\\n        bytes32 _syncHash,\\n        uint256 _forwardEthAmount\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/libraries/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {UncheckedMath} from \\\"../../common/libraries/UncheckedMath.sol\\\";\\n\\n/// @author Matter Labs\\n/// @custom:security-contact security@matterlabs.dev\\nlibrary Merkle {\\n    using UncheckedMath for uint256;\\n\\n    /// @dev Calculate Merkle root by the provided Merkle proof.\\n    /// NOTE: When using this function, check that the _path length is equal to the tree height to prevent shorter/longer paths attack\\n    /// @param _path Merkle path from the leaf to the root\\n    /// @param _index Leaf index in the tree\\n    /// @param _itemHash Hash of leaf content\\n    /// @return The Merkle root\\n    function calculateRoot(\\n        bytes32[] calldata _path,\\n        uint256 _index,\\n        bytes32 _itemHash\\n    ) internal pure returns (bytes32) {\\n        uint256 pathLength = _path.length;\\n        require(pathLength > 0, \\\"xc\\\");\\n        require(pathLength < 256, \\\"bt\\\");\\n        require(_index < (1 << pathLength), \\\"px\\\");\\n\\n        bytes32 currentHash = _itemHash;\\n        for (uint256 i; i < pathLength; i = i.uncheckedInc()) {\\n            currentHash = (_index % 2 == 0)\\n                ? _efficientHash(currentHash, _path[i])\\n                : _efficientHash(_path[i], currentHash);\\n            _index /= 2;\\n        }\\n\\n        return currentHash;\\n    }\\n\\n    /// @dev Keccak hash of the concatenation of two 32-byte words\\n    function _efficientHash(bytes32 _lhs, bytes32 _rhs) internal pure returns (bytes32 result) {\\n        assembly {\\n            mstore(0x00, _lhs)\\n            mstore(0x20, _rhs)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/libraries/TransactionValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {IMailbox} from \\\"../interfaces/IMailbox.sol\\\";\\nimport {TX_SLOT_OVERHEAD_L2_GAS, MEMORY_OVERHEAD_GAS, L1_TX_INTRINSIC_L2_GAS, L1_TX_DELTA_544_ENCODING_BYTES, L1_TX_DELTA_FACTORY_DEPS_L2_GAS, L1_TX_MIN_L2_GAS_BASE, L1_TX_INTRINSIC_PUBDATA, L1_TX_DELTA_FACTORY_DEPS_PUBDATA, MAX_GAS_PER_TRANSACTION} from \\\"../Config.sol\\\";\\n\\n/// @title zkSync Library for validating L1 -> L2 transactions\\n/// @author Matter Labs\\n/// @custom:security-contact security@matterlabs.dev\\nlibrary TransactionValidator {\\n    /// @dev Used to validate key properties of an L1->L2 transaction\\n    /// @param _transaction The transaction to validate\\n    /// @param _encoded The abi encoded bytes of the transaction\\n    /// @param _priorityTxMaxGasLimit The max gas limit, generally provided from Storage.sol\\n    /// @param _priorityTxMaxPubdata The maximal amount of pubdata that a single L1->L2 transaction can emit\\n    function validateL1ToL2Transaction(\\n        IMailbox.L2CanonicalTransaction memory _transaction,\\n        bytes memory _encoded,\\n        uint256 _priorityTxMaxGasLimit,\\n        uint256 _priorityTxMaxPubdata\\n    ) internal pure {\\n        uint256 l2GasForTxBody = getTransactionBodyGasLimit(_transaction.gasLimit, _encoded.length);\\n\\n        // Ensuring that the transaction is provable\\n        require(l2GasForTxBody <= _priorityTxMaxGasLimit, \\\"ui\\\");\\n        // Ensuring that the transaction cannot output more pubdata than is processable\\n        require(l2GasForTxBody / _transaction.gasPerPubdataByteLimit <= _priorityTxMaxPubdata, \\\"uk\\\");\\n\\n        // Ensuring that the transaction covers the minimal costs for its processing:\\n        // hashing its content, publishing the factory dependencies, etc.\\n        require(\\n            getMinimalPriorityTransactionGasLimit(\\n                _encoded.length,\\n                _transaction.factoryDeps.length,\\n                _transaction.gasPerPubdataByteLimit\\n            ) <= l2GasForTxBody,\\n            \\\"up\\\"\\n        );\\n    }\\n\\n    /// @dev Used to validate upgrade transactions\\n    /// @param _transaction The transaction to validate\\n    function validateUpgradeTransaction(IMailbox.L2CanonicalTransaction memory _transaction) internal pure {\\n        // Restrict from to be within system contract range (0...2^16 - 1)\\n        require(_transaction.from <= type(uint16).max, \\\"ua\\\");\\n        require(_transaction.to <= type(uint160).max, \\\"ub\\\");\\n        require(_transaction.paymaster == 0, \\\"uc\\\");\\n        require(_transaction.value == 0, \\\"ud\\\");\\n        require(_transaction.maxFeePerGas == 0, \\\"uq\\\");\\n        require(_transaction.maxPriorityFeePerGas == 0, \\\"ux\\\");\\n        require(_transaction.reserved[0] == 0, \\\"ue\\\");\\n        require(_transaction.reserved[1] <= type(uint160).max, \\\"uf\\\");\\n        require(_transaction.reserved[2] == 0, \\\"ug\\\");\\n        require(_transaction.reserved[3] == 0, \\\"uo\\\");\\n        require(_transaction.signature.length == 0, \\\"uh\\\");\\n        require(_transaction.paymasterInput.length == 0, \\\"ul\\\");\\n        require(_transaction.reservedDynamic.length == 0, \\\"um\\\");\\n    }\\n\\n    /// @dev Calculates the approximate minimum gas limit required for executing a priority transaction.\\n    /// @param _encodingLength The length of the priority transaction encoding in bytes.\\n    /// @param _numberOfFactoryDependencies The number of new factory dependencies that will be added.\\n    /// @param _l2GasPricePerPubdata The L2 gas price for publishing the priority transaction on L2.\\n    /// @return The minimum gas limit required to execute the priority transaction.\\n    /// Note: The calculation includes the main cost of the priority transaction, however, in reality, the operator can spend a little more gas on overheads.\\n    function getMinimalPriorityTransactionGasLimit(\\n        uint256 _encodingLength,\\n        uint256 _numberOfFactoryDependencies,\\n        uint256 _l2GasPricePerPubdata\\n    ) internal pure returns (uint256) {\\n        uint256 costForComputation;\\n        {\\n            // Adding the intrinsic cost for the transaction, i.e. auxiliary prices which cannot be easily accounted for\\n            costForComputation = L1_TX_INTRINSIC_L2_GAS;\\n\\n            // Taking into account the hashing costs that depend on the length of the transaction\\n            // Note that L1_TX_DELTA_544_ENCODING_BYTES is the delta in the price for every 544 bytes of\\n            // the transaction's encoding. It is taken as LCM between 136 and 32 (the length for each keccak256 round\\n            // and the size of each new encoding word).\\n            costForComputation += Math.ceilDiv(_encodingLength * L1_TX_DELTA_544_ENCODING_BYTES, 544);\\n\\n            // Taking into the account the additional costs of providing new factory dependencies\\n            costForComputation += _numberOfFactoryDependencies * L1_TX_DELTA_FACTORY_DEPS_L2_GAS;\\n\\n            // There is a minimal amount of computational L2 gas that the transaction should cover\\n            costForComputation = Math.max(costForComputation, L1_TX_MIN_L2_GAS_BASE);\\n        }\\n\\n        uint256 costForPubdata = 0;\\n        {\\n            // Adding the intrinsic cost for the transaction, i.e. auxiliary prices which cannot be easily accounted for\\n            costForPubdata = L1_TX_INTRINSIC_PUBDATA * _l2GasPricePerPubdata;\\n\\n            // Taking into the account the additional costs of providing new factory dependencies\\n            costForPubdata += _numberOfFactoryDependencies * L1_TX_DELTA_FACTORY_DEPS_PUBDATA * _l2GasPricePerPubdata;\\n        }\\n\\n        return costForComputation + costForPubdata;\\n    }\\n\\n    /// @notice Based on the full L2 gas limit (that includes the batch overhead) and other\\n    /// properties of the transaction, returns the l2GasLimit for the body of the transaction (the actual execution).\\n    /// @param _totalGasLimit The L2 gas limit that includes both the overhead for processing the batch\\n    /// and the L2 gas needed to process the transaction itself (i.e. the actual l2GasLimit that will be used for the transaction).\\n    /// @param _encodingLength The length of the ABI-encoding of the transaction.\\n    function getTransactionBodyGasLimit(\\n        uint256 _totalGasLimit,\\n        uint256 _encodingLength\\n    ) internal pure returns (uint256 txBodyGasLimit) {\\n        uint256 overhead = getOverheadForTransaction(_encodingLength);\\n\\n        require(_totalGasLimit >= overhead, \\\"my\\\"); // provided gas limit doesn't cover transaction overhead\\n        unchecked {\\n            // We enforce the fact that `_totalGasLimit >= overhead` explicitly above.\\n            txBodyGasLimit = _totalGasLimit - overhead;\\n        }\\n    }\\n\\n    /// @notice Based on the total L2 gas limit and several other parameters of the transaction\\n    /// returns the part of the L2 gas that will be spent on the batch's overhead.\\n    /// @dev The details of how this function works can be checked in the documentation\\n    /// of the fee model of zkSync. The appropriate comments are also present\\n    /// in the Rust implementation description of function `get_maximal_allowed_overhead`.\\n    /// @param _encodingLength The length of the binary encoding of the transaction in bytes\\n    function getOverheadForTransaction(\\n        uint256 _encodingLength\\n    ) internal pure returns (uint256 batchOverheadForTransaction) {\\n        // The overhead from taking up the transaction's slot\\n        batchOverheadForTransaction = TX_SLOT_OVERHEAD_L2_GAS;\\n\\n        // The overhead for occupying the bootloader memory can be derived from encoded_len\\n        uint256 overheadForLength = MEMORY_OVERHEAD_GAS * _encodingLength;\\n        batchOverheadForTransaction = Math.max(batchOverheadForTransaction, overheadForLength);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zksync/l1-contracts/zksync/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev The log passed from L2\\n/// @param l2ShardId The shard identifier, 0 - rollup, 1 - porter. All other values are not used but are reserved for\\n/// the future\\n/// @param isService A boolean flag that is part of the log along with `key`, `value`, and `sender` address.\\n/// This field is required formally but does not have any special meaning.\\n/// @param txNumberInBatch The L2 transaction number in the batch, in which the log was sent\\n/// @param sender The L2 address which sent the log\\n/// @param key The 32 bytes of information that was sent in the log\\n/// @param value The 32 bytes of information that was sent in the log\\n// Both `key` and `value` are arbitrary 32-bytes selected by the log sender\\nstruct L2Log {\\n    uint8 l2ShardId;\\n    bool isService;\\n    uint16 txNumberInBatch;\\n    address sender;\\n    bytes32 key;\\n    bytes32 value;\\n}\\n\\n/// @dev An arbitrary length message passed from L2\\n/// @notice Under the hood it is `L2Log` sent from the special system L2 contract\\n/// @param txNumberInBatch The L2 transaction number in the batch, in which the message was sent\\n/// @param sender The address of the L2 account from which the message was passed\\n/// @param data An arbitrary length message\\nstruct L2Message {\\n    uint16 txNumberInBatch;\\n    address sender;\\n    bytes data;\\n}\\n\\n/// @notice The struct that describes whether users will be charged for pubdata for L1->L2 transactions.\\n/// @param Rollup The users are charged for pubdata & it is priced based on the gas price on Ethereum.\\n/// @param Validium The pubdata is considered free with regard to the L1 gas price.\\nenum PubdataPricingMode {\\n    Rollup,\\n    Validium\\n}\\n\\n/// @notice The fee params for L1->L2 transactions for the network.\\n/// @param pubdataPricingMode How the users will charged for pubdata in L1->L2 transactions.\\n/// @param batchOverheadL1Gas The amount of L1 gas required to process the batch (except for the calldata).\\n/// @param maxPubdataPerBatch The maximal number of pubdata that can be emitted per batch.\\n/// @param priorityTxMaxPubdata The maximal amount of pubdata a priority transaction is allowed to publish.\\n/// It can be slightly less than maxPubdataPerBatch in order to have some margin for the bootloader execution.\\n/// @param minimalL2GasPrice The minimal L2 gas price to be used by L1->L2 transactions. It should represent\\n/// the price that a single unit of compute costs.\\nstruct FeeParams {\\n    PubdataPricingMode pubdataPricingMode;\\n    uint32 batchOverheadL1Gas;\\n    uint32 maxPubdataPerBatch;\\n    uint32 maxL2GasPerBatch;\\n    uint32 priorityTxMaxPubdata;\\n    uint64 minimalL2GasPrice;\\n}\\n\\n/// @dev The sync status for priority op of secondary chain\\n/// @param hash The cumulative canonicalTxHash\\n/// @param amount The cumulative l2 value\\nstruct SecondaryChainSyncStatus {\\n    bytes32 hash;\\n    uint256 amount;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEthGasToken\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPermit\",\"type\":\"bool\"}],\"name\":\"ContractAllowStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAllocator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAllocator\",\"type\":\"address\"}],\"name\":\"ForwardFeeAllocatorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IL2Gateway\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"InitGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum PubdataPricingMode\",\"name\":\"pubdataPricingMode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"batchOverheadL1Gas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPubdataPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxL2GasPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priorityTxMaxPubdata\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minimalL2GasPrice\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct FeeParams\",\"name\":\"oldFeeParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PubdataPricingMode\",\"name\":\"pubdataPricingMode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"batchOverheadL1Gas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPubdataPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxL2GasPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priorityTxMaxPubdata\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minimalL2GasPrice\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct FeeParams\",\"name\":\"newFeeParams\",\"type\":\"tuple\"}],\"name\":\"NewFeeParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorityOpId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isContractCall\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddressL2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2Value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"l2CallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPricePerPubdata\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"factoryDeps\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IMailbox.ForwardL2Request\",\"name\":\"l2Request\",\"type\":\"tuple\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromBatchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBatchNumber\",\"type\":\"uint256\"}],\"name\":\"OpenRangeBatchRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"l2LogsRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forwardEthAmount\",\"type\":\"uint256\"}],\"name\":\"SyncBatchRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSyncedPriorityTxs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"syncHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forwardEthAmount\",\"type\":\"uint256\"}],\"name\":\"SyncL2Requests\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"l2TxHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"primaryChainL2TxHash\",\"type\":\"bytes32\"}],\"name\":\"SyncL2TxHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromBatchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBatchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rangeBatchRootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forwardEthAmount\",\"type\":\"uint256\"}],\"name\":\"SyncRangeBatchRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTxGasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxGasPrice\",\"type\":\"uint256\"}],\"name\":\"TxGasPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ValidatorStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawForwardFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FORWARD_REQUEST_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_ETH_GAS_TOKEN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"allowLists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPermitToSendL2Request\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum PubdataPricingMode\",\"name\":\"pubdataPricingMode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"batchOverheadL1Gas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPubdataPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxL2GasPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priorityTxMaxPubdata\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minimalL2GasPrice\",\"type\":\"uint64\"}],\"internalType\":\"struct FeeParams\",\"name\":\"_newFeeParams\",\"type\":\"tuple\"}],\"name\":\"changeFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeParams\",\"outputs\":[{\"internalType\":\"enum PubdataPricingMode\",\"name\":\"pubdataPricingMode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"batchOverheadL1Gas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPubdataPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxL2GasPerBatch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priorityTxMaxPubdata\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minimalL2GasPrice\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2BatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2MessageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_l2TxNumberInBatch\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"finalizeEthWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardFeeAllocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IL2Gateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"contract IL2Gateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriorityTxMaxGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBatchesExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPriorityTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l2BatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2ToL1MessageNumber\",\"type\":\"uint256\"}],\"name\":\"isEthWithdrawalFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"}],\"name\":\"l2LogsRootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"}],\"name\":\"l2LogsRootHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"l2LogsRootHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasPerPubdataByteLimit\",\"type\":\"uint256\"}],\"name\":\"l2TransactionBaseCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"l2TxHash\",\"type\":\"bytes32\"}],\"name\":\"l2TxHashMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"primaryChainL2TxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromBatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_l2LogsRootHashes\",\"type\":\"bytes32[]\"}],\"name\":\"openRangeBatchRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priorityOpId\",\"type\":\"uint256\"}],\"name\":\"priorityOpSyncStatus\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_l2TxHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_l2BatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2MessageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_l2TxNumberInBatch\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum TxStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"proveL1ToL2TransactionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"txNumberInBatch\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct L2Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"proveL2MessageInclusion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"range\",\"type\":\"bytes32\"}],\"name\":\"rangeBatchRootHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rangeBatchRootHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractL2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2Value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasPerPubdataByteLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_factoryDeps\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_refundRecipient\",\"type\":\"address\"}],\"name\":\"requestL2Transaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"canonicalTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_permitted\",\"type\":\"bool\"}],\"name\":\"setAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newForwardFeeAllocator\",\"type\":\"address\"}],\"name\":\"setForwardFeeAllocator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Gateway\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setTxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_l2LogsRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_forwardEthAmount\",\"type\":\"uint256\"}],\"name\":\"syncBatchRoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalSyncedPriorityTxs\",\"type\":\"uint256\"}],\"name\":\"syncL2Requests\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_l2TxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_primaryChainL2TxHash\",\"type\":\"bytes32\"}],\"name\":\"syncL2TxHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromBatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_rangeBatchRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_forwardEthAmount\",\"type\":\"uint256\"}],\"name\":\"syncRangeBatchRoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBatchesExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPriorityTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSyncedPriorityTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidatorForwardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidatorForwardFeeWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForwardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZkLink", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}