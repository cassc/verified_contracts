{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/option/Distributions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IDistributions.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Distributions\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @notice This contract manages different types of fees and their distributions. It is responsible for\\r\\n *         defining fee ratios and their allocations. It is upgradeable and only the contract owner has\\r\\n *         the permission to change these values. The types of fees include Entry, Exercise, Withdraw,\\r\\n *         Redeem, and HODL Withdraw fees. It also manages the ratio of Bullet to Reward and the\\r\\n *         distributions of these fees and bullet rewards.\\r\\n * @dev This contact uses the concept of \\\"ratio\\\" for managing fee ratios and uses an array of Distribution structs for allocating these fees. The\\r\\n *      Distribution struct has two properties: percentage and recipient's address. The contract emits\\r\\n *      various events when fee ratios or distributions are changed.\\r\\n */\\r\\ncontract Distributions is OwnableUpgradeable {\\r\\n    /**\\r\\n     * @notice The ratio of the entry fee for a DeOrder.\\r\\n     * @dev Represents the percentage of the fee taken when a new DeOrder is created. Values are in basis points, so a value of 100 means 1%.\\r\\n     */\\r\\n    uint16 public entryFeeRatio;\\r\\n\\r\\n    /**\\r\\n     * @notice The ratio of the exercise fee.\\r\\n     * @dev Represents the percentage of the fee taken when a DeOrder is exercised. Values are in basis points, so a value of 100 means 1%.\\r\\n     */\\r\\n    uint16 public exerciseFeeRatio;\\r\\n\\r\\n    /**\\r\\n     * @notice The ratio of the withdrawal fee when collecting from a DeOrder.\\r\\n     * @dev Represents the percentage of the fee taken when funds are withdrawn from a DeOrder. Values are in basis points, so a value of 100 means 1%.\\r\\n     */\\r\\n    uint16 public withdrawFeeRatio;\\r\\n\\r\\n    /**\\r\\n     * @notice The ratio of the redeem fee.\\r\\n     * @dev Represents the percentage of the fee taken when a DeOrder is redeemed. Values are in basis points, so a value of 100 means 1%.\\r\\n     */\\r\\n    uint16 public redeemFeeRatio;\\r\\n\\r\\n    /**\\r\\n     * @notice The ratio of bullet to reward.\\r\\n     * @dev This is used to calculate rewards from bullets. For example, a value of 80 means for every 1 bullet, 0.8 rewards are given.\\r\\n     */\\r\\n    uint8 public bulletToRewardRatio;\\r\\n\\r\\n    /**\\r\\n     * @notice The ratio of HODL withdrawal fee.\\r\\n     * @dev Represents the percentage of the fee taken when funds are withdrawn from a HODL. Values are in basis points, so a value of 100 means 1%.\\r\\n     */\\r\\n    uint16 public hodlWithdrawFeeRatio;\\r\\n\\r\\n    /**\\r\\n     * @notice Represents a fee distribution.\\r\\n     * @dev A struct representing a fee distribution, containing the percentage of the fee and the address to which it should be distributed.\\r\\n     */\\r\\n    struct Distribution {\\r\\n        uint8 percentage;\\r\\n        address to;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An array representing the fee distribution.\\r\\n     * @dev An array of Distribution structs representing how the fee is distributed among multiple addresses.\\r\\n     */\\r\\n    Distribution[] public feeDistribution;\\r\\n\\r\\n    /**\\r\\n     * @notice An array representing the bullet distribution.\\r\\n     * @dev An array of Distribution structs representing how the bullet rewards are distributed among multiple addresses.\\r\\n     */\\r\\n    Distribution[] public bulletDistribution;\\r\\n\\r\\n    /**\\r\\n     * @notice An array representing the HODL withdrawal fee distribution.\\r\\n     * @dev An array of Distribution structs representing how the HODL withdrawal fee is distributed among multiple addresses.\\r\\n     */\\r\\n    Distribution[] public hodlWithdrawFeeDistribution;\\r\\n\\r\\n    /**\\r\\n     * @notice The length of the fee distribution array.\\r\\n     * @dev The current length (i.e., the number of recipients) of the fee distribution array.\\r\\n     */\\r\\n    uint256 public feeDistributionLength;\\r\\n\\r\\n    /**\\r\\n     * @notice The length of the bullet distribution array.\\r\\n     * @dev The current length (i.e., the number of recipients) of the bullet distribution array.\\r\\n     */\\r\\n    uint256 public bulletDistributionLength;\\r\\n\\r\\n    /**\\r\\n     * @notice The length of the HODL withdrawal fee distribution array.\\r\\n     * @dev The current length (i.e., the number of recipients) of the HODL withdrawal fee distribution array.\\r\\n     */\\r\\n    uint256 public hodlWithdrawFeeDistributionLength;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the entry fee ratio is updated.\\r\\n     * @dev This event triggers when the existing entry fee ratio changes to a new value.\\r\\n     * @param oldEntryFeeRatio The old entry fee ratio.\\r\\n     * @param newEntryFeeRatio The new entry fee ratio.\\r\\n     */\\r\\n    event EntryFeeRatioChanged(uint16 oldEntryFeeRatio, uint16 newEntryFeeRatio);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the exercise fee ratio is updated.\\r\\n     * @dev This event triggers when the existing exercise fee ratio changes to a new value.\\r\\n     * @param oldExerciseFeeRatio The old exercise fee ratio.\\r\\n     * @param newExerciseFeeRatio The new exercise fee ratio.\\r\\n     */\\r\\n    event ExerciseFeeRatioChanged(uint16 oldExerciseFeeRatio, uint16 newExerciseFeeRatio);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the withdraw fee ratio is updated.\\r\\n     * @dev This event triggers when the existing withdraw fee ratio changes to a new value.\\r\\n     * @param oldWithdrawFeeRatio The old withdraw fee ratio.\\r\\n     * @param newWithdrawFeeRatio The new withdraw fee ratio.\\r\\n     */\\r\\n    event WithdrawFeeRatioChanged(uint16 oldWithdrawFeeRatio, uint16 newWithdrawFeeRatio);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the redeem fee ratio is updated.\\r\\n     * @dev This event triggers when the existing redeem fee ratio changes to a new value.\\r\\n     * @param oldRedeemFeeRatio The old redeem fee ratio.\\r\\n     * @param newRedeemFeeRatio The new redeem fee ratio.\\r\\n     */\\r\\n    event RedeemFeeRatioChanged(uint16 oldRedeemFeeRatio, uint16 newRedeemFeeRatio);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the HODL withdraw fee ratio is updated.\\r\\n     * @dev This event triggers when the existing HODL withdraw fee ratio changes to a new value.\\r\\n     * @param oldHodlWithdrawFeeRatio The old HODL withdraw fee ratio.\\r\\n     * @param newHodlWithdrawFeeRatio The new HODL withdraw fee ratio.\\r\\n     */\\r\\n    event HodlWithdrawFeeRatioChanged(uint16 oldHodlWithdrawFeeRatio, uint16 newHodlWithdrawFeeRatio);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the bullet-to-reward ratio is updated.\\r\\n     * @dev This event triggers when the existing bullet-to-reward ratio changes to a new value.\\r\\n     * @param oldBulletToRewardRatio The old bullet-to-reward ratio.\\r\\n     * @param newBulletToRewardRatio The new bullet-to-reward ratio.\\r\\n     */\\r\\n    event BulletToRewardRatioChanged(uint8 oldBulletToRewardRatio, uint8 newBulletToRewardRatio);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the fee distribution is updated.\\r\\n     * @dev This event triggers when the fee distribution list is changed. It includes the updated percentages and recipient addresses.\\r\\n     * @param percentage The array of fee distribution percentages.\\r\\n     * @param to The array of fee distribution recipients.\\r\\n     */\\r\\n    event FeeDistributionSet(uint8[] percentage, address[] to);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the bullet distribution is updated.\\r\\n     * @dev This event triggers when the bullet distribution list is changed. It includes the updated percentages and recipient addresses.\\r\\n     * @param percentage The array of bullet distribution percentages.\\r\\n     * @param to The array of bullet distribution recipients.\\r\\n     */\\r\\n    event BulletDistributionSet(uint8[] percentage, address[] to);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the HODL withdraw fee distribution is updated.\\r\\n     * @dev This event triggers when the HODL withdraw fee distribution list is changed. It includes the updated percentages and recipient addresses.\\r\\n     * @param percentage The array of HODL withdraw fee distribution percentages.\\r\\n     * @param to The array of HODL withdraw fee distribution recipients.\\r\\n     */\\r\\n    event HodlWithdrawFeeDistributionSet(uint8[] percentage, address[] to);\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the Distributions contract.\\r\\n     * @dev Invokes the initialization function of the parent contract and sets the bulletToRewardRatio to 80.\\r\\n     */\\r\\n    function __Distributions_init() public initializer {\\r\\n        __Ownable_init();\\r\\n        bulletToRewardRatio = 80;\\r\\n        exerciseFeeRatio = 20;\\r\\n        withdrawFeeRatio = 20;\\r\\n        hodlWithdrawFeeRatio = 20;\\r\\n        redeemFeeRatio = 20;\\r\\n        entryFeeRatio = 20;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the exercise fee ratio.\\r\\n     * @param _feeRatio The new exercise fee ratio.\\r\\n     */\\r\\n    function setExerciseFee(uint16 _feeRatio) external onlyOwner {\\r\\n        require(0 <= _feeRatio && _feeRatio < 10000, \\\"Distributions: Illegal value range\\\");\\r\\n\\r\\n        uint16 oldFeeRatio = exerciseFeeRatio;\\r\\n        exerciseFeeRatio = _feeRatio;\\r\\n        emit ExerciseFeeRatioChanged(oldFeeRatio, exerciseFeeRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the withdraw fee ratio.\\r\\n     * @param _feeRatio The new withdraw fee ratio.\\r\\n     */\\r\\n    function setWithdrawFee(uint16 _feeRatio) external onlyOwner {\\r\\n        require(0 <= _feeRatio && _feeRatio < 10000, \\\"Distributions: Illegal value range\\\");\\r\\n\\r\\n        uint16 oldFeeRatio = withdrawFeeRatio;\\r\\n        withdrawFeeRatio = _feeRatio;\\r\\n        emit WithdrawFeeRatioChanged(oldFeeRatio, withdrawFeeRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the redeem fee ratio.\\r\\n     * @param _feeRatio The new redeem fee ratio.\\r\\n     */\\r\\n    function setRedeemFee(uint16 _feeRatio) external onlyOwner {\\r\\n        require(0 <= _feeRatio && _feeRatio < 10000, \\\"Distributions: Illegal value range\\\");\\r\\n\\r\\n        uint16 oldFeeRatio = redeemFeeRatio;\\r\\n        redeemFeeRatio = _feeRatio;\\r\\n        emit RedeemFeeRatioChanged(oldFeeRatio, redeemFeeRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the HODL withdraw fee ratio.\\r\\n     * @param _feeRatio The new HODL withdraw fee ratio.\\r\\n     */\\r\\n    function setHodlWithdrawFee(uint16 _feeRatio) external onlyOwner {\\r\\n        require(0 <= _feeRatio && _feeRatio < 10000, \\\"Distributions: Illegal value range\\\");\\r\\n\\r\\n        uint16 oldFeeRatio = hodlWithdrawFeeRatio;\\r\\n        hodlWithdrawFeeRatio = _feeRatio;\\r\\n        emit HodlWithdrawFeeRatioChanged(oldFeeRatio, hodlWithdrawFeeRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the bullet-to-reward ratio.\\r\\n     * @param _bulletToRewardRatio The new bullet-to-reward ratio.\\r\\n     */\\r\\n    function setBulletToRewardRatio(uint8 _bulletToRewardRatio) external onlyOwner {\\r\\n        require(0 <= _bulletToRewardRatio && _bulletToRewardRatio <= 80, \\\"Distributions: Illegal value range\\\");\\r\\n\\r\\n        uint8 oldBulletToRewardRatio = bulletToRewardRatio;\\r\\n        bulletToRewardRatio = _bulletToRewardRatio;\\r\\n        emit BulletToRewardRatioChanged(oldBulletToRewardRatio, bulletToRewardRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the entry fee ratio.\\r\\n     * @param _feeRatio The new entry fee ratio.\\r\\n     */\\r\\n    function setEntryFee(uint16 _feeRatio) external onlyOwner {\\r\\n        require(0 <= _feeRatio && _feeRatio < 10000, \\\"Distributions: Illegal value range\\\");\\r\\n\\r\\n        uint16 oldFeeRatio = entryFeeRatio;\\r\\n        entryFeeRatio = _feeRatio;\\r\\n        emit EntryFeeRatioChanged(oldFeeRatio, entryFeeRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the fee distribution percentages and recipients.\\r\\n     * @param _percentage The array of fee distribution percentages.\\r\\n     * @param _to The array of fee distribution recipients.\\r\\n     */\\r\\n    function setFeeDistribution(uint8[] memory _percentage, address[] memory _to) external onlyOwner {\\r\\n        require(_percentage.length == _to.length, \\\"Distributions: Array length does not match\\\");\\r\\n        uint8 sum;\\r\\n        for (uint8 i = 0; i < _percentage.length; i++) {\\r\\n            sum += _percentage[i];\\r\\n        }\\r\\n        require(sum == 100, \\\"Distributions: Sum of percentages is not 100\\\");\\r\\n        delete feeDistribution;\\r\\n        for (uint8 j = 0; j < _percentage.length; j++) {\\r\\n            uint8 percentage = _percentage[j];\\r\\n            address to = _to[j];\\r\\n            Distribution memory distribution = Distribution({percentage: percentage, to: to});\\r\\n            feeDistribution.push(distribution);\\r\\n        }\\r\\n        feeDistributionLength = _percentage.length;\\r\\n        emit FeeDistributionSet(_percentage, _to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the bullet distribution percentages and recipients.\\r\\n     * @param _percentage The array of bullet distribution percentages.\\r\\n     * @param _to The array of bullet distribution recipients.\\r\\n     */\\r\\n    function setBulletDistribution(uint8[] memory _percentage, address[] memory _to) external onlyOwner {\\r\\n        require(_percentage.length == _to.length, \\\"Distributions: Array length does not match\\\");\\r\\n        uint8 sum;\\r\\n        for (uint8 i = 0; i < _percentage.length; i++) {\\r\\n            sum += _percentage[i];\\r\\n        }\\r\\n        require(sum == 100, \\\"Distributions: Sum of percentages is not 100\\\");\\r\\n        delete bulletDistribution;\\r\\n        for (uint8 j = 0; j < _percentage.length; j++) {\\r\\n            uint8 percentage = _percentage[j];\\r\\n            address to = _to[j];\\r\\n            Distribution memory distribution = Distribution({percentage: percentage, to: to});\\r\\n            bulletDistribution.push(distribution);\\r\\n        }\\r\\n        bulletDistributionLength = _percentage.length;\\r\\n        emit BulletDistributionSet(_percentage, _to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only the contract owner can call this function.\\r\\n     * @dev Sets the HODL withdraw fee distribution percentages and recipients.\\r\\n     * @param _percentage The array of HODL withdraw fee distribution percentages.\\r\\n     * @param _to The array of HODL withdraw fee distribution recipients.\\r\\n     */\\r\\n    function setHodlWithdrawFeeDistribution(uint8[] memory _percentage, address[] memory _to) external onlyOwner {\\r\\n        require(_percentage.length == _to.length, \\\"Distributions: Array length does not match\\\");\\r\\n        uint8 sum;\\r\\n        for (uint8 i = 0; i < _percentage.length; i++) {\\r\\n            sum += _percentage[i];\\r\\n        }\\r\\n        require(sum == 100, \\\"Distributions: Sum of percentages is not 100\\\");\\r\\n        delete hodlWithdrawFeeDistribution;\\r\\n        for (uint8 j = 0; j < _percentage.length; j++) {\\r\\n            uint8 percentage = _percentage[j];\\r\\n            address to = _to[j];\\r\\n            Distribution memory distribution = Distribution({percentage: percentage, to: to});\\r\\n            hodlWithdrawFeeDistribution.push(distribution);\\r\\n        }\\r\\n        hodlWithdrawFeeDistributionLength = _percentage.length;\\r\\n        emit HodlWithdrawFeeDistributionSet(_percentage, _to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current entry fee ratio.\\r\\n     * @dev Provides access to the value of the `entryFeeRatio` state variable.\\r\\n     * @return The entry fee ratio.\\r\\n     */\\r\\n    function readEntryFeeRatio() public view returns (uint16) {\\r\\n        return entryFeeRatio;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current exercise fee ratio.\\r\\n     * @dev Provides access to the value of the `exerciseFeeRatio` state variable.\\r\\n     * @return The exercise fee ratio.\\r\\n     */\\r\\n    function readExerciseFeeRatio() public view returns (uint16) {\\r\\n        return exerciseFeeRatio;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current withdrawal fee ratio.\\r\\n     * @dev Provides access to the value of the `withdrawFeeRatio` state variable.\\r\\n     * @return The withdraw fee ratio.\\r\\n     */\\r\\n    function readWithdrawFeeRatio() public view returns (uint16) {\\r\\n        return withdrawFeeRatio;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current redeem fee ratio.\\r\\n     * @dev Provides access to the value of the `redeemFeeRatio` state variable.\\r\\n     * @return The redeem fee ratio.\\r\\n     */\\r\\n    function readRedeemFeeRatio() public view returns (uint16) {\\r\\n        return redeemFeeRatio;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current bullet-to-reward ratio.\\r\\n     * @dev Provides access to the value of the `bulletToRewardRatio` state variable.\\r\\n     * @return The bullet-to-reward ratio.\\r\\n     */\\r\\n    function readBulletToRewardRatio() public view returns (uint16) {\\r\\n        return bulletToRewardRatio;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current length of the fee distribution array.\\r\\n     * @dev Provides access to the value of the `feeDistributionLength` state variable.\\r\\n     * @return The length of the fee distribution array.\\r\\n     */\\r\\n    function readFeeDistributionLength() public view returns (uint256) {\\r\\n        return feeDistributionLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the fee distribution at the given index.\\r\\n     * @dev Provides access to the `feeDistribution` array at a given index `i`.\\r\\n     * @param i The index of the fee distribution.\\r\\n     * @return percentage The percentage of the fee distribution.\\r\\n     * @return to The recipient of the fee distribution.\\r\\n     */\\r\\n    function readFeeDistribution(uint256 i) public view returns (uint8 percentage, address to) {\\r\\n        percentage = feeDistribution[i].percentage;\\r\\n        to = feeDistribution[i].to;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current length of the bullet distribution array.\\r\\n     * @dev Provides access to the value of the `bulletDistributionLength` state variable.\\r\\n     * @return The length of the bullet distribution array.\\r\\n     */\\r\\n    function readBulletDistributionLength() public view returns (uint256) {\\r\\n        return bulletDistributionLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the bullet distribution at the given index.\\r\\n     * @dev Provides access to the `bulletDistribution` array at a given index `i`.\\r\\n     * @param i The index of the bullet distribution.\\r\\n     * @return percentage The percentage of the bullet distribution.\\r\\n     * @return to The recipient of the bullet distribution.\\r\\n     */\\r\\n    function readBulletDistribution(uint256 i) public view returns (uint8 percentage, address to) {\\r\\n        percentage = bulletDistribution[i].percentage;\\r\\n        to = bulletDistribution[i].to;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IDistributions interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for managing fee and reward distributions\\r\\n */\\r\\ninterface IDistributions {\\r\\n    /**\\r\\n     * @notice Get the entry fee ratio\\r\\n     * @dev Returns the current entry fee ratio in basis points (i.e., parts per 10,000)\\r\\n     * @return The current entry fee ratio\\r\\n     */\\r\\n    function readEntryFeeRatio() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the exercise fee ratio\\r\\n     * @dev Returns the current exercise fee ratio in basis points (i.e., parts per 10,000)\\r\\n     * @return The current exercise fee ratio\\r\\n     */\\r\\n    function readExerciseFeeRatio() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the withdraw fee ratio\\r\\n     * @dev Returns the current withdraw fee ratio in basis points (i.e., parts per 10,000)\\r\\n     * @return The current withdraw fee ratio\\r\\n     */\\r\\n    function readWithdrawFeeRatio() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the redeem fee ratio\\r\\n     * @dev Returns the current redeem fee ratio in basis points (i.e., parts per 10,000)\\r\\n     * @return The current redeem fee ratio\\r\\n     */\\r\\n    function readRedeemFeeRatio() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the BULLET-to-reward ratio\\r\\n     * @dev Returns the current BULLET-to-reward ratio in percentage points (i.e., parts per 100)\\r\\n     * @return The current BULLET-to-reward ratio\\r\\n     */\\r\\n    function readBulletToRewardRatio() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of fee distribution targets\\r\\n     * @dev Returns the number of fee distribution targets\\r\\n     * @return The number of fee distribution targets\\r\\n     */\\r\\n    function readFeeDistributionLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the fee distribution target at the specified index\\r\\n     * @dev Returns the fee distribution target at the specified index\\r\\n     * @param i The index of the fee distribution target to retrieve\\r\\n     * @return The fee distribution target at the specified index as a tuple (fee ratio, target address)\\r\\n     */\\r\\n    function readFeeDistribution(uint256 i) external view returns (uint8, address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of BULLET distribution targets\\r\\n     * @dev Returns the number of BULLET distribution targets\\r\\n     * @return The number of BULLET distribution targets\\r\\n     */\\r\\n    function readBulletDistributionLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the BULLET distribution target at the specified index\\r\\n     * @dev Returns the BULLET distribution target at the specified index\\r\\n     * @param i The index of the BULLET distribution target to retrieve\\r\\n     * @return The BULLET distribution target at the specified index as a tuple (distribution ratio, target address)\\r\\n     */\\r\\n    function readBulletDistribution(uint256 i) external view returns (uint8, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"percentage\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"BulletDistributionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldBulletToRewardRatio\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newBulletToRewardRatio\",\"type\":\"uint8\"}],\"name\":\"BulletToRewardRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldEntryFeeRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newEntryFeeRatio\",\"type\":\"uint16\"}],\"name\":\"EntryFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldExerciseFeeRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newExerciseFeeRatio\",\"type\":\"uint16\"}],\"name\":\"ExerciseFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"percentage\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"FeeDistributionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"percentage\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"HodlWithdrawFeeDistributionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldHodlWithdrawFeeRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newHodlWithdrawFeeRatio\",\"type\":\"uint16\"}],\"name\":\"HodlWithdrawFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldRedeemFeeRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newRedeemFeeRatio\",\"type\":\"uint16\"}],\"name\":\"RedeemFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldWithdrawFeeRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newWithdrawFeeRatio\",\"type\":\"uint16\"}],\"name\":\"WithdrawFeeRatioChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__Distributions_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bulletDistribution\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bulletDistributionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bulletToRewardRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exerciseFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeDistribution\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hodlWithdrawFeeDistribution\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hodlWithdrawFeeDistributionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hodlWithdrawFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"readBulletDistribution\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readBulletDistributionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readBulletToRewardRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readEntryFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readExerciseFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"readFeeDistribution\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readFeeDistributionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readRedeemFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readWithdrawFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_percentage\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"setBulletDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_bulletToRewardRatio\",\"type\":\"uint8\"}],\"name\":\"setBulletToRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeRatio\",\"type\":\"uint16\"}],\"name\":\"setEntryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeRatio\",\"type\":\"uint16\"}],\"name\":\"setExerciseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_percentage\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"setFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeRatio\",\"type\":\"uint16\"}],\"name\":\"setHodlWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_percentage\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"setHodlWithdrawFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeRatio\",\"type\":\"uint16\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeRatio\",\"type\":\"uint16\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Distributions", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}