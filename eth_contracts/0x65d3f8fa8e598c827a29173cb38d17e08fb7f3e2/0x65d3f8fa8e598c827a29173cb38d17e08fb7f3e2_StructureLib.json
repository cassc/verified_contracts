{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/libraries/StructureLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// external libraries\\nimport {ActionUtil} from \\\"../libraries/ActionUtil.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// interfaces\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {IHashnoteVault} from \\\"../interfaces/IHashnoteVault.sol\\\";\\nimport {IMarginEngine} from \\\"../interfaces/IMarginEngine.sol\\\";\\n\\nimport \\\"../config/constants.sol\\\";\\nimport \\\"../config/errors.sol\\\";\\nimport \\\"../config/types.sol\\\";\\n\\nlibrary StructureLib {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev common action types on margin engines defined locally, original enums locations:\\n     *       - https://github.com/grappafinance/core-cash/blob/master/src/config/enums.sol\\n     *       - https://github.com/grappafinance/core-physical/blob/master/src/config/enums.sol\\n     *\\n     *      These constants are defined to add compatibility between ActionTypes of physical and cash settled margin engines\\n     *      uint8 values correspond to the order (and value) of the enum entries\\n     */\\n\\n    uint8 constant ACTION_COLLATERAL_ADD = 0;\\n    uint8 constant ACTION_COLLATERAL_REMOVE = 1;\\n    uint8 constant ACTION_SETTLE_PHYSICAL = 7;\\n    uint8 constant ACTION_SETTLE_CASH = 8;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n    event WithdrewCollateral(uint256[] amounts, address indexed manager);\\n\\n    /**\\n     * @notice verifies that initial collaterals are present (non-zero)\\n     * @param collaterals is the array of collaterals passed from initParams in initializer\\n     */\\n    function verifyInitialCollaterals(Collateral[] calldata collaterals) external pure {\\n        unchecked {\\n            for (uint256 i; i < collaterals.length; ++i) {\\n                if (collaterals[i].id == 0) revert OV_BadCollateral();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Settles the vaults position(s) in margin account.\\n     * @param marginEngine is the address of the margin engine contract\\n     * @param isCashSettled is the flag that should be true if the options are cash settled\\n     */\\n    function settleOptions(IMarginEngine marginEngine, bool isCashSettled) external {\\n        ActionArgs[] memory actions = new ActionArgs[](1);\\n\\n        actions[0] = ActionArgs({action: isCashSettled ? ACTION_SETTLE_CASH : ACTION_SETTLE_PHYSICAL, data: \\\"\\\"});\\n\\n        marginEngine.execute(address(this), actions);\\n    }\\n\\n    /**\\n     * @notice Deposits collateral into the margin account.\\n     * @param marginEngine is the address of the margin engine contract\\n     */\\n    function depositCollateral(IMarginEngine marginEngine, Collateral[] calldata collaterals) external {\\n        ActionArgs[] memory actions;\\n\\n        // iterates over collateral balances and creates a withdraw action for each\\n        for (uint256 i; i < collaterals.length;) {\\n            IERC20 collateral = IERC20(collaterals[i].addr);\\n\\n            uint256 balance = collateral.balanceOf(address(this));\\n\\n            if (balance > 0) {\\n                collateral.safeApprove(address(marginEngine), balance);\\n\\n                actions = ActionUtil.append(\\n                    actions,\\n                    ActionArgs({\\n                        action: ACTION_COLLATERAL_ADD,\\n                        data: abi.encode(address(this), uint80(balance), collaterals[i].id)\\n                    })\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (actions.length > 0) marginEngine.execute(address(this), actions);\\n    }\\n\\n    /**\\n     * @notice Withdraws all vault collateral(s) from the margin account.\\n     * @param marginEngine is the interface to the the engine contract\\n     */\\n    function withdrawAllCollateral(IMarginEngine marginEngine) external {\\n        // gets the accounts collateral balances\\n        (,, Balance[] memory collaterals) = marginEngine.marginAccounts(address(this));\\n\\n        ActionArgs[] memory actions = new ActionArgs[](collaterals.length);\\n        uint256[] memory withdrawAmounts = new uint256[](collaterals.length);\\n\\n        // iterates over collateral balances and creates a withdraw action for each\\n        for (uint256 i; i < collaterals.length;) {\\n            actions[i] = ActionArgs({\\n                action: ACTION_COLLATERAL_REMOVE,\\n                data: abi.encode(uint80(collaterals[i].amount), address(this), collaterals[i].collateralId)\\n            });\\n\\n            withdrawAmounts[i] = collaterals[i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        marginEngine.execute(address(this), actions);\\n\\n        emit WithdrewCollateral(withdrawAmounts, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraws some of vault collateral(s) from margin account.\\n     * @param marginEngine is the interface to the margin engine contract\\n     */\\n    function withdrawCollaterals(\\n        IMarginEngine marginEngine,\\n        Collateral[] calldata collaterals,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external {\\n        ActionArgs[] memory actions;\\n\\n        // iterates over collateral balances and creates a withdraw action for each\\n        for (uint256 i; i < amounts.length;) {\\n            if (amounts[i] > 0) {\\n                actions = ActionUtil.append(\\n                    actions,\\n                    ActionArgs({\\n                        action: ACTION_COLLATERAL_REMOVE,\\n                        data: abi.encode(uint80(amounts[i]), recipient, collaterals[i].id)\\n                    })\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (actions.length > 0) marginEngine.execute(address(this), actions);\\n    }\\n\\n    /**\\n     * @notice Withdraws assets based on shares from margin account.\\n     * @dev used to send assets from the margin account to recipient at the end of each round\\n     * @param marginEngine is the interface to the margin engine contract\\n     * @param totalSupply is the total amount of outstanding shares\\n     * @param withdrawShares the number of shares being withdrawn\\n     * @param recipient is the destination address for the assets\\n     */\\n    function withdrawWithShares(IMarginEngine marginEngine, uint256 totalSupply, uint256 withdrawShares, address recipient)\\n        external\\n        returns (uint256[] memory amounts)\\n    {\\n        (,, Balance[] memory collaterals) = marginEngine.marginAccounts(address(this));\\n\\n        uint256 collateralLength = collaterals.length;\\n\\n        amounts = new uint256[](collateralLength);\\n        ActionArgs[] memory actions = new ActionArgs[](collateralLength);\\n\\n        for (uint256 i; i < collateralLength;) {\\n            amounts[i] = FixedPointMathLib.mulDivDown(collaterals[i].amount, withdrawShares, totalSupply);\\n\\n            unchecked {\\n                actions[i] = ActionArgs({\\n                    action: ACTION_COLLATERAL_REMOVE,\\n                    data: abi.encode(uint80(amounts[i]), recipient, collaterals[i].collateralId)\\n                });\\n                ++i;\\n            }\\n        }\\n\\n        marginEngine.execute(address(this), actions);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/ActionUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/constants.sol\\\";\\nimport \\\"../config/enums.sol\\\";\\nimport \\\"../config/types.sol\\\";\\n\\n/**\\n * @title libraries to encode action arguments\\n */\\nlibrary ActionUtil {\\n    function concat(ActionArgs[] memory x, ActionArgs[] memory v) internal pure returns (ActionArgs[] memory y) {\\n        y = new ActionArgs[](x.length + v.length);\\n        uint256 z;\\n        uint256 i;\\n        for (i; i < x.length;) {\\n            y[z] = x[i];\\n            unchecked {\\n                ++z;\\n                ++i;\\n            }\\n        }\\n        for (i = 0; i < v.length;) {\\n            y[z] = v[i];\\n            unchecked {\\n                ++z;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function append(ActionArgs[] memory x, ActionArgs memory v) internal pure returns (ActionArgs[] memory y) {\\n        y = new ActionArgs[](x.length + 1);\\n        uint256 i;\\n        for (i; i < x.length;) {\\n            y[i] = x[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        y[i] = v;\\n    }\\n\\n    function append(BatchExecute[] memory x, BatchExecute memory v) internal pure returns (BatchExecute[] memory y) {\\n        y = new BatchExecute[](x.length + 1);\\n        uint256 i;\\n        for (i; i < x.length;) {\\n            y[i] = x[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        y[i] = v;\\n    }\\n\\n    // add a function prefixed with test here so forge coverage will ignore this file\\n    function testChillOnHelper() public {}\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IHashnoteVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IMarginEngine} from \\\"./IMarginEngine.sol\\\";\\nimport {IVaultShare} from \\\"./IVaultShare.sol\\\";\\n\\nimport \\\"../config/types.sol\\\";\\n\\ninterface IHashnoteVault {\\n    function share() external view returns (IVaultShare);\\n\\n    function manager() external view returns (address);\\n\\n    function whitelist() external view returns (address);\\n\\n    function managementFee() external view returns (uint256);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function marginEngine() external view returns (IMarginEngine);\\n\\n    function vaultState() external view returns (VaultState memory);\\n\\n    function _depositReceipts(address subAccount) external view returns (DepositReceipt memory);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function quickWithdraw(uint256 amount) external;\\n\\n    function requestWithdrawFor(address subAccount, uint256 numShares) external;\\n\\n    function collaterals(uint256 index) external view returns (Collateral memory);\\n\\n    function expiry(uint256 round) external view returns (uint256);\\n\\n    function pricePerShare(uint256 round) external view returns (uint256);\\n\\n    function getCollaterals() external view returns (Collateral[] memory);\\n\\n    function getStartingBalances(uint256 round) external view returns (uint256[] memory);\\n\\n    function getCollateralPrices(uint256 round) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMarginEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IGrappa} from \\\"grappa/interfaces/IGrappa.sol\\\";\\nimport {IPomace} from \\\"pomace/interfaces/IPomace.sol\\\";\\n\\nimport {BatchExecute, ActionArgs} from \\\"../config/types.sol\\\";\\n\\nimport \\\"../config/types.sol\\\";\\n\\n/**\\n * @notice Interface for the base margin engine contract\\n */\\ninterface IMarginEngine {\\n    function optionToken() external view returns (address);\\n\\n    function marginAccounts(address)\\n        external\\n        view\\n        returns (Position[] memory shorts, Position[] memory longs, Balance[] memory collaterals);\\n\\n    function previewMinCollateral(Position[] memory shorts, Position[] memory longs) external view returns (Balance[] memory);\\n\\n    function allowedExecutionLeft(uint160 mask, address account) external view returns (uint256);\\n\\n    function batchExecute(BatchExecute[] calldata batchActions) external;\\n\\n    function execute(address account, ActionArgs[] calldata actions) external;\\n\\n    function revokeSelfAccess(address granter) external;\\n\\n    function setAccountAccess(address account, uint256 allowedExecutions) external;\\n\\n    function grappa() external view returns (IGrappa grappa);\\n\\n    function pomace() external view returns (IPomace pomace);\\n\\n    function tokenTracker(uint256 tokenId) external view returns (uint64 issued, uint80 totalDebt, uint80 totalPaid);\\n}\\n\"\r\n    },\r\n    \"src/config/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n///@dev unit scaled used to convert amounts.\\nuint256 constant UNIT = 10 ** 6;\\n\\n// Placeholder uint value to prevent cold writes\\nuint256 constant PLACEHOLDER_UINT = 1;\\n\\n// Fees are 18-decimal places. For example: 20 * 10**18 = 20%\\nuint256 constant PERCENT_MULTIPLIER = 10 ** 18;\\n\\nuint32 constant SECONDS_PER_DAY = 86400;\\nuint32 constant DAYS_PER_YEAR = 365;\\n\"\r\n    },\r\n    \"src/config/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// common\\nerror Unauthorized();\\nerror Overflow();\\nerror BadAddress();\\nerror NotImplemented();\\n\\n// BaseVault\\nerror BV_ActiveRound();\\nerror BV_BadCollateral();\\nerror BV_BadExpiry();\\nerror BV_BadLevRatio();\\nerror BV_ExpiryMismatch();\\nerror BV_MarginEngineMismatch();\\nerror BV_RoundClosed();\\nerror BV_BadFee();\\nerror BV_BadRoundConfig();\\nerror BV_BadPPS();\\nerror BV_BadSB();\\nerror BV_BadCP();\\nerror BV_BadRatios();\\n\\n// Registrar\\nerror REG_BadAmount();\\nerror REG_BadRound();\\nerror REG_BadNumShares();\\nerror REG_BadDepositAmount();\\nerror REG_ExceedsAvailable();\\n\\n// OptionsVault\\nerror OV_ActiveRound();\\nerror OV_BadRound();\\nerror OV_BadCollateral();\\nerror OV_BadPremium();\\nerror OV_RoundClosed();\\nerror OV_NoCollateral();\\nerror OV_OptionNotExpired();\\nerror OV_NoCollateralPending();\\n\\n// PhysicalOptionVault\\nerror POV_CannotRequestWithdraw();\\nerror POV_NotExercised();\\nerror POV_OptionNotExpired();\\nerror POV_VaultExercised();\\nerror POV_BadExerciseWindow();\\n\\n// Fee Utils\\nerror FL_NPSLow();\\n\\n// Vault Utils\\nerror VL_DifferentLengths();\\nerror VL_ExceedsSurplus();\\nerror VL_BadOwnerAddress();\\nerror VL_BadManagerAddress();\\nerror VL_BadFeeAddress();\\nerror VL_BadOracleAddress();\\nerror VL_BadPauserAddress();\\nerror VL_BadFee();\\nerror VL_BadCollateral();\\nerror VL_BadCollateralAddress();\\nerror VL_BadDuration();\\n\\n// StructureLib\\nerror SL_BadExpiryDate();\\n\\n// Vault Pauser\\nerror VP_VaultNotPermissioned();\\nerror VP_PositionPaused();\\nerror VP_Overflow();\\nerror VP_CustomerNotPermissioned();\\nerror VP_RoundOpen();\\n\\n// Vault Share\\nerror VS_SupplyExceeded();\\n\\n// Whitelist Manager\\nerror WL_BadRole();\\nerror WL_Paused();\\n\"\r\n    },\r\n    \"src/config/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Initialization parameters for the vault.\\n * @param _owner is the owner of the vault with critical permissions\\n * @param _manager is the address that is responsible for advancing the vault\\n * @param _feeRecipient is the address to receive vault performance and management fees\\n * @param _oracle is used to calculate NAV\\n * @param _whitelist is used to check address access permissions\\n * @param _managementFee is the management fee pct.\\n * @param _performanceFee is the performance fee pct.\\n * @param _pauser is where withdrawn collateral exists waiting for client to withdraw\\n * @param _collateralRatios is the array of round starting balances to set the initial collateral ratios\\n * @param _collaterals is the assets used in the vault\\n * @param _roundConfig sets the duration and expiration of options\\n * @param _vaultParams set vaultParam struct\\n */\\nstruct InitParams {\\n    address _owner;\\n    address _manager;\\n    address _feeRecipient;\\n    address _oracle;\\n    address _whitelist;\\n    uint256 _managementFee;\\n    uint256 _performanceFee;\\n    address _pauser;\\n    uint256[] _collateralRatios;\\n    Collateral[] _collaterals;\\n    RoundConfig _roundConfig;\\n}\\n\\nstruct Collateral {\\n    // Grappa asset Id\\n    uint8 id;\\n    // ERC20 token address for the required collateral\\n    address addr;\\n    // the amount of decimals or token\\n    uint8 decimals;\\n}\\n\\nstruct VaultState {\\n    // 32 byte slot 1\\n    // Round represents the number of periods elapsed. There's a hard limit of 4,294,967,295 rounds\\n    uint32 round;\\n    // Amount that is currently locked for selling options\\n    uint96 lockedAmount;\\n    // Amount that was locked for selling options in the previous round\\n    // used for calculating performance fee deduction\\n    uint96 lastLockedAmount;\\n    // 32 byte slot 2\\n    // Stores the total tally of how much of `asset` there is\\n    // to be used to mint vault tokens\\n    uint96 totalPending;\\n    // store the number of shares queued for withdraw this round\\n    // zero'ed out at the start of each round, pauser withdraws all queued shares.\\n    uint128 queuedWithdrawShares;\\n}\\n\\nstruct DepositReceipt {\\n    // Round represents the number of periods elapsed. There's a hard limit of 4,294,967,295 rounds\\n    uint32 round;\\n    // Deposit amount, max 79,228,162,514 or 79 Billion ETH deposit\\n    uint96 amount;\\n    // Unredeemed shares balance\\n    uint128 unredeemedShares;\\n}\\n\\nstruct RoundConfig {\\n    // the duration of the option\\n    uint32 duration;\\n    // day of the week the option should expire. 0-8, 0 is sunday, 7 is sunday, 8 is wild\\n    uint8 dayOfWeek;\\n    // hour of the day the option should expire. 0 is midnight\\n    uint8 hourOfDay;\\n}\\n\\n// Used for fee calculations at the end of a round\\nstruct VaultDetails {\\n    // Collaterals of the vault\\n    Collateral[] collaterals;\\n    // Collateral balances at the start of the round\\n    uint256[] startingBalances;\\n    // current balances\\n    uint256[] currentBalances;\\n    // Total pending primary asset\\n    uint256 totalPending;\\n}\\n\\n// Used when rolling funds into a new round\\nstruct NAVDetails {\\n    // Collaterals of the vault\\n    Collateral[] collaterals;\\n    // Collateral balances at the start of the round\\n    uint256[] startingBalances;\\n    // Current collateral balances\\n    uint256[] currentBalances;\\n    // Used to calculate NAV\\n    address oracleAddr;\\n    // Expiry of the round\\n    uint256 expiry;\\n    // Pending deposits\\n    uint256 totalPending;\\n}\\n\\n/**\\n * @dev Position struct\\n * @param tokenId option token id\\n * @param amount number option tokens\\n */\\nstruct Position {\\n    uint256 tokenId;\\n    uint64 amount;\\n}\\n\\n/**\\n * @dev struct representing the current balance for a given collateral\\n * @param collateralId asset id\\n * @param amount amount the asset\\n */\\nstruct Balance {\\n    uint8 collateralId;\\n    uint80 amount;\\n}\\n\\n/**\\n * @dev ActionArgs and BatchExecute are a local definition of the structs defined in:\\n *       - https://github.com/grappafinance/core-cash/blob/master/src/config/types.sol\\n *       - https://github.com/grappafinance/core-physical/blob/master/src/config/types.sol\\n *     they are provided to avoid the need of having separate logic for interacting with the cash settled an\\n *     physically settled margin engines and consolidate them in a single interface\\n */\\n\\n/**\\n * @notice The action type for the execute function\\n * @dev    unitary representation of the ActionArgs struct from the core physical and cash engines\\n */\\nstruct ActionArgs {\\n    // action type represented as uint8 (see enum ActionType)\\n    uint8 action;\\n    // data payload for the action\\n    bytes data;\\n}\\n\\n/**\\n * @notice The batch action type for the execute function\\n * @dev    unitary representation of the BatchExecute struct from the core physical and cash engines\\n */\\nstruct BatchExecute {\\n    // address of the account to execute the batch\\n    address subAccount;\\n    // array of actions to execute\\n    ActionArgs[] actions;\\n}\\n\"\r\n    },\r\n    \"src/config/enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nenum AddressType {\\n    Manager,\\n    FeeRecipient,\\n    Pauser,\\n    Whitelist\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVaultShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"openzeppelin/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IVaultShare is IERC1155 {\\n    /**\\n     * @dev mint option token to an address. Can only be called by corresponding vault\\n     * @param _recipient    where to mint token to\\n     * @param _amount       amount to mint\\n     *\\n     */\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    /**\\n     * @dev burn option token from an address. Can only be called by corresponding vault\\n     * @param _from         account to burn from\\n     * @param _amount       amount to burn\\n     *\\n     */\\n    function burn(address _from, uint256 _amount) external;\\n\\n    /**\\n     * @dev burn option token from addresses. Can only be called by corresponding vault\\n     * @param _from        accounts to burn from\\n     * @param _amounts      amounts to burn\\n     *\\n     */\\n    function batchBurn(address[] memory _from, uint256[] memory _amounts) external;\\n\\n    /**\\n     * @dev returns total supply of a vault\\n     * @param _vault      address of the vault\\n     *\\n     */\\n    function totalSupply(address _vault) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev returns vault share balance for a given holder\\n     * @param _owner      address of token holder\\n     * @param _vault      address of the vault\\n     *\\n     */\\n    function getBalanceOf(address _owner, address _vault) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev exposing transfer method to vault\\n     *\\n     */\\n    function transferVaultOnly(address _from, address _to, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev exposing transfer method to registrar\\n     *\\n     */\\n    function transferRegistrarOnly(address _from, address _to, address _vault, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev helper method to pass in vault address instead of tokenId\\n     *\\n     */\\n    function transferFromWithVault(address _from, address _to, address _vault, uint256 _amount, bytes calldata _data) external;\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/interfaces/IGrappa.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/types.sol\\\";\\n\\ninterface IGrappa {\\n    function getDetailFromProductId(uint40 _productId)\\n        external\\n        view\\n        returns (\\n            address oracle,\\n            address engine,\\n            address underlying,\\n            uint8 underlyingDecimals,\\n            address strike,\\n            uint8 strikeDecimals,\\n            address collateral,\\n            uint8 collateralDecimals\\n        );\\n\\n    function checkEngineAccess(uint256 _tokenId, address _engine) external view;\\n\\n    function checkEngineAccessAndTokenId(uint256 _tokenId, address _engine) external view;\\n\\n    function engineIds(address _engine) external view returns (uint8 id);\\n\\n    function assetIds(address _asset) external view returns (uint8 id);\\n\\n    function assets(uint8 _id) external view returns (address addr, uint8 decimals);\\n\\n    function engines(uint8 _id) external view returns (address engine);\\n\\n    function oracles(uint8 _id) external view returns (address oracle);\\n\\n    function getPayout(uint256 tokenId, uint64 amount)\\n        external\\n        view\\n        returns (address engine, address collateral, uint256 payout);\\n\\n    function getProductId(address oracle, address engine, address underlying, address strike, address collateral)\\n        external\\n        view\\n        returns (uint40 id);\\n\\n    function getTokenId(TokenType tokenType, uint40 productId, uint256 expiry, uint256 longStrike, uint256 shortStrike)\\n        external\\n        view\\n        returns (uint256 id);\\n\\n    /**\\n     * @notice burn option token and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenId  tokenId of option token to burn\\n     * @param _amount   amount to settle\\n     * @return payout amount paid out\\n     */\\n    function settleOption(address _account, uint256 _tokenId, uint256 _amount) external returns (uint256 payout);\\n\\n    /**\\n     * @notice burn array of option tokens and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenIds array of tokenIds to burn\\n     * @param _amounts   array of amounts to burn\\n     */\\n    function batchSettleOptions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts)\\n        external\\n        returns (Balance[] memory payouts);\\n\\n    function batchGetPayouts(uint256[] memory _tokenIds, uint256[] memory _amounts) external returns (Balance[] memory payouts);\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/interfaces/IPomace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/types.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\n\\ninterface IPomace {\\n    function oracle() external view returns (IOracle oracle);\\n\\n    function checkEngineAccess(uint256 _tokenId, address _engine) external view;\\n\\n    function checkEngineAccessAndTokenId(uint256 _tokenId, address _engine) external view;\\n\\n    function engineIds(address _engine) external view returns (uint8 id);\\n\\n    function assetIds(address _asset) external view returns (uint8 id);\\n\\n    function assets(uint8 _id) external view returns (address addr, uint8 decimals);\\n\\n    function engines(uint8 _id) external view returns (address engine);\\n\\n    function isCollateralizable(uint8 _asset0, uint8 _asset1) external view returns (bool);\\n\\n    function isCollateralizable(address _asset0, address _asset1) external view returns (bool);\\n\\n    function getDebtAndPayout(uint256 tokenId, uint64 amount)\\n        external\\n        view\\n        returns (address engine, uint8 debtId, uint256 debt, uint8 payoutId, uint256 payout);\\n\\n    function batchGetDebtAndPayouts(uint256[] calldata tokenId, uint256[] calldata amount)\\n        external\\n        view\\n        returns (Balance[] memory debts, Balance[] memory payouts);\\n\\n    function getProductId(address engine, address underlying, address strike, address collateral)\\n        external\\n        view\\n        returns (uint32 id);\\n\\n    function getTokenId(TokenType tokenType, uint32 productId, uint256 expiry, uint256 strike, uint256 exerciseWindow)\\n        external\\n        view\\n        returns (uint256 id);\\n\\n    function getDetailFromProductId(uint32 _productId)\\n        external\\n        view\\n        returns (\\n            address engine,\\n            address underlying,\\n            uint8 underlyingDecimals,\\n            address strike,\\n            uint8 strikeDecimals,\\n            address collateral,\\n            uint8 collateralDecimals\\n        );\\n\\n    /**\\n     * @notice burn option token and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenId  tokenId of option token to burn\\n     * @param _amount   amount to settle\\n     * @return debt amount collected\\n     * @return payout amount paid out\\n     */\\n    function settleOption(address _account, uint256 _tokenId, uint256 _amount)\\n        external\\n        returns (Balance memory debt, Balance memory payout);\\n\\n    /**\\n     * @notice burn array of option tokens and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenIds array of tokenIds to burn\\n     * @param _amounts   array of amounts to burn\\n     */\\n    function batchSettleOptions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/config/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./enums.sol\\\";\\n\\n/**\\n * @dev struct representing the current balance for a given collateral\\n * @param collateralId grappa asset id\\n * @param amount amount the asset\\n */\\nstruct Balance {\\n    uint8 collateralId;\\n    uint80 amount;\\n}\\n\\n/**\\n * @dev struct containing assets detail for an product\\n * @param underlying    underlying address\\n * @param strike        strike address\\n * @param collateral    collateral address\\n * @param collateralDecimals collateral asset decimals\\n */\\nstruct ProductDetails {\\n    address oracle;\\n    uint8 oracleId;\\n    address engine;\\n    uint8 engineId;\\n    address underlying;\\n    uint8 underlyingId;\\n    uint8 underlyingDecimals;\\n    address strike;\\n    uint8 strikeId;\\n    uint8 strikeDecimals;\\n    address collateral;\\n    uint8 collateralId;\\n    uint8 collateralDecimals;\\n}\\n\\n// todo: update doc\\nstruct ActionArgs {\\n    ActionType action;\\n    bytes data;\\n}\\n\\nstruct BatchExecute {\\n    address subAccount;\\n    ActionArgs[] actions;\\n}\\n\\n/**\\n * @dev asset detail stored per asset id\\n * @param addr address of the asset\\n * @param decimals token decimals\\n */\\nstruct AssetDetail {\\n    address addr;\\n    uint8 decimals;\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/config/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./enums.sol\\\";\\n\\n/**\\n * @dev struct representing the current balance for a given collateral\\n * @param collateralId pomace asset id\\n * @param amount amount the asset\\n */\\nstruct Balance {\\n    uint8 collateralId;\\n    uint80 amount;\\n}\\n\\n/**\\n * @dev struct containing assets detail for an product\\n * @param underlying    underlying address\\n * @param strike        strike address\\n * @param collateral    collateral address\\n * @param collateralDecimals collateral asset decimals\\n */\\nstruct ProductDetails {\\n    address engine;\\n    uint8 engineId;\\n    address underlying;\\n    uint8 underlyingId;\\n    uint8 underlyingDecimals;\\n    address strike;\\n    uint8 strikeId;\\n    uint8 strikeDecimals;\\n    address collateral;\\n    uint8 collateralId;\\n    uint8 collateralDecimals;\\n}\\n\\n// todo: update doc\\nstruct ActionArgs {\\n    ActionType action;\\n    bytes data;\\n}\\n\\nstruct BatchExecute {\\n    address subAccount;\\n    ActionArgs[] actions;\\n}\\n\\n/**\\n * @dev asset detail stored per asset id\\n * @param addr address of the asset\\n * @param decimals token decimals\\n */\\nstruct AssetDetail {\\n    address addr;\\n    uint8 decimals;\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @notice  get spot price of _base, denominated in _quote.\\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @return price with 6 decimals\\n     */\\n    function getSpotPrice(address _base, address _quote) external view returns (uint256);\\n\\n    /**\\n     * @dev get expiry price of underlying, denominated in strike asset.\\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @param _expiry expiry timestamp\\n     *\\n     * @return price with 6 decimals\\n     */\\n    function getPriceAtExpiry(address _base, address _quote, uint256 _expiry)\\n        external\\n        view\\n        returns (uint256 price, bool isFinalized);\\n\\n    /**\\n     * @dev return the maximum dispute period for the oracle\\n     * @dev this will only be checked during oracle registration, as a soft constraint on integrating oracles.\\n     */\\n    function maxDisputePeriod() external view returns (uint256 disputePeriod);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/config/enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum TokenType {\\n    PUT,\\n    PUT_SPREAD,\\n    CALL,\\n    CALL_SPREAD\\n}\\n\\n/**\\n * @dev common action types on margin engines\\n */\\nenum ActionType {\\n    AddCollateral,\\n    RemoveCollateral,\\n    MintShort,\\n    BurnShort,\\n    MergeOptionToken, // These actions are defined in \\\"DebitSpread\\\"\\n    SplitOptionToken, // These actions are defined in \\\"DebitSpread\\\"\\n    AddLong,\\n    RemoveLong,\\n    SettleAccount,\\n    // actions that influence more than one subAccounts:\\n    // These actions are defined in \\\"OptionTransferable\\\"\\n    MintShortIntoAccount, // increase short (debt) position in one subAccount, increase long token directly to another subAccount\\n    TransferCollateral, // transfer collateral directly to another subAccount\\n    TransferLong, // transfer long directly to another subAccount\\n    TransferShort // transfer short directly to another subAccount\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/config/enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum TokenType {\\n    PUT,\\n    CALL\\n}\\n\\n/**\\n * @dev common action types on margin engines\\n */\\nenum ActionType {\\n    AddCollateral,\\n    RemoveCollateral,\\n    MintShort,\\n    BurnShort,\\n    AddLong,\\n    RemoveLong,\\n    ExerciseToken,\\n    SettleAccount,\\n    // actions that influence more than one subAccounts:\\n    // These actions are defined in \\\"OptionTransferable\\\"\\n    MintShortIntoAccount, // increase short (debt) position in one subAccount, increase long token directly to another subAccount\\n    TransferCollateral, // transfer collateral directly to another subAccount\\n    TransferLong, // transfer long directly to another subAccount\\n    TransferShort // transfer short directly to another subAccount\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"array-lib/=lib/array-lib/src/\",\r\n      \"cm-cash-engine/=lib/cross-margin-engine/src/settled-cash/\",\r\n      \"cm-physical-engine/=lib/cross-margin-engine/src/settled-physical/\",\r\n      \"core-cash/=lib/cross-margin-engine/lib/core-cash/\",\r\n      \"core-physical/=lib/cross-margin-engine/lib/core-physical/\",\r\n      \"cross-margin-engine/=lib/cross-margin-engine/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"grappa-test/=lib/cross-margin-engine/lib/core-cash/test/\",\r\n      \"grappa/=lib/cross-margin-engine/lib/core-cash/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"pomace-test/=lib/cross-margin-engine/lib/core-physical/test/\",\r\n      \"pomace/=lib/cross-margin-engine/lib/core-physical/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"src/libraries/FeeLib.sol\": {\r\n        \"FeeLib\": \"0xff9681e29b585abb82d6db0d99c80ae3accbc67e\"\r\n      },\r\n      \"src/libraries/StructureLib.sol\": {\r\n        \"StructureLib\": \"0x65d3f8fa8e598c827a29173cb38d17e08fb7f3e2\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"OV_BadCollateral\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"WithdrewCollateral\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"}],\"name\":\"verifyInitialCollaterals\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "StructureLib", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}