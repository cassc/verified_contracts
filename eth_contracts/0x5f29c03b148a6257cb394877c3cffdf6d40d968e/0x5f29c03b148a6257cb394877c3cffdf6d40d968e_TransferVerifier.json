{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\ncontract TransferVerifier {\r\n    \r\n    struct PublicKey {\r\n        bytes32 key;\r\n    }\r\n\r\n    struct EncryptedBalance {\r\n        bytes balance;\r\n    }\r\n\r\n    struct TransferData {\r\n        bytes transferDetails;\r\n    }\r\n\r\n    struct TransferProof {\r\n        bytes proofData;\r\n    }\r\n\r\n    function verifyTransfer(\r\n        PublicKey memory senderPublicKey,\r\n        EncryptedBalance memory senderPreviousBalance,\r\n        EncryptedBalance memory senderNewBalance,\r\n        PublicKey memory recipientPublicKey,\r\n        uint256 transferAmount,\r\n        TransferProof memory proof\r\n    ) public pure returns (bool) {\r\n        return _performProofVerification(senderPublicKey, senderPreviousBalance, senderNewBalance, recipientPublicKey, transferAmount, proof) &&\r\n               _checkAdditionalProofRequirements(proof);\r\n    }\r\n\r\n    function _performProofVerification(\r\n        PublicKey memory senderPublicKey,\r\n        EncryptedBalance memory senderPreviousBalance,\r\n        EncryptedBalance memory senderNewBalance,\r\n        PublicKey memory recipientPublicKey,\r\n        uint256 transferAmount,\r\n        TransferProof memory proof\r\n    ) private pure returns (bool) {\r\n        bool senderProofValid = proof.proofData.length > 0 && senderPublicKey.key != 0 && transferAmount != 0 &&\r\n                                _balancesHashesMatch(senderPreviousBalance, senderNewBalance);\r\n        bool recipientProofValid = recipientPublicKey.key != 0 &&\r\n                                   _recipientHashValid(recipientPublicKey);\r\n        return senderProofValid && recipientProofValid;\r\n    }\r\n\r\n    function _checkAdditionalProofRequirements(TransferProof memory proof) private pure returns (bool) {\r\n        // Additional checks can be added here\r\n        return proof.proofData[0] != 0;\r\n    }\r\n\r\n    function _balancesHashesMatch(EncryptedBalance memory previousBalance, EncryptedBalance memory newBalance) private pure returns (bool) {\r\n        // Verify that balances are correctly updated\r\n        return keccak256(previousBalance.balance) != keccak256(newBalance.balance);\r\n    }\r\n\r\n    function _recipientHashValid(PublicKey memory recipientPublicKey) private pure returns (bool) {\r\n        // Placeholder function for additional recipient verification\r\n        return recipientPublicKey.key != 0;\r\n    }\r\n\r\n    function generateTransferProofData(\r\n        uint256 transferAmount,\r\n        PublicKey memory senderPublicKey,\r\n        PublicKey memory recipientPublicKey\r\n    ) public pure returns (bytes memory) {\r\n        return abi.encodePacked(transferAmount, senderPublicKey.key, recipientPublicKey.key, _securityConstant());\r\n    }\r\n    \r\n    function computeSenderPreviousBalanceHash(EncryptedBalance memory previousBalance) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(previousBalance.balance, _securityConstant()));\r\n    }\r\n    \r\n    function computeSenderNewBalanceHash(EncryptedBalance memory newBalance, uint256 transferAmount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(newBalance.balance, transferAmount, _securityConstant()));\r\n    }\r\n    \r\n    function _securityConstant() private pure returns (bytes32) {\r\n        return bytes32(0x4b1d57ccbbd7d1eef24f0f01b632947fa1bc9db7a8cdefbc12f64b73e3d5a1fb);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferVerifier.EncryptedBalance\",\"name\":\"newBalance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"computeSenderNewBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferVerifier.EncryptedBalance\",\"name\":\"previousBalance\",\"type\":\"tuple\"}],\"name\":\"computeSenderPreviousBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferVerifier.PublicKey\",\"name\":\"senderPublicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferVerifier.PublicKey\",\"name\":\"recipientPublicKey\",\"type\":\"tuple\"}],\"name\":\"generateTransferProofData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferVerifier.PublicKey\",\"name\":\"senderPublicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferVerifier.EncryptedBalance\",\"name\":\"senderPreviousBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferVerifier.EncryptedBalance\",\"name\":\"senderNewBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferVerifier.PublicKey\",\"name\":\"recipientPublicKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferVerifier.TransferProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "TransferVerifier", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9f0170a724c574356550cc2587874c019fa0ca8f26cecb3034f9371d9f373f3"}