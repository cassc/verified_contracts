{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\n\r\ninterface IERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount)\r\nexternal\r\nreturns (bool);\r\n\r\n\r\nfunction allowance(address owner, address spender)\r\nexternal\r\nview\r\nreturns (uint256);\r\n\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external returns (bool);\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n\r\ninterface IFactory {\r\nfunction createPair(address tokenA, address tokenB)\r\nexternal\r\nreturns (address pair);\r\n\r\n\r\nfunction getPair(address tokenA, address tokenB)\r\nexternal\r\nview\r\nreturns (address pair);\r\n}\r\n\r\n\r\ninterface IRouter {\r\nfunction factory() external pure returns (address);\r\n\r\n\r\nfunction WETH() external pure returns (address);\r\n\r\n\r\nfunction addLiquidityETH(\r\naddress token,\r\nuint256 amountTokenDesired,\r\nuint256 amountTokenMin,\r\nuint256 amountETHMin,\r\naddress to,\r\nuint256 deadline\r\n)\r\nexternal\r\npayable\r\nreturns (\r\nuint256 amountToken,\r\nuint256 amountETH,\r\nuint256 liquidity\r\n);\r\n\r\n\r\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external payable;\r\n\r\n\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\nuint256 amountIn,\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n// benefit is lost if 'b' is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n}\r\n\r\n\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b != 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\n\r\n\r\nlibrary Address {\r\nfunction isContract(address account) internal view returns (bool) {\r\nuint256 size;\r\nassembly {\r\nsize := extcodesize(account)\r\n}\r\nreturn size > 0;\r\n}\r\n\r\n\r\nfunction sendValue(address payable recipient, uint256 amount) internal {\r\nrequire(\r\naddress(this).balance >= amount,\r\n\"Address: insufficient balance\"\r\n);\r\n\r\n\r\n(bool success, ) = recipient.call{value: amount}(\"\");\r\nrequire(\r\nsuccess,\r\n\"Address: unable to send value, recipient may have reverted\"\r\n);\r\n}\r\n\r\n\r\nfunction functionCall(address target, bytes memory data)\r\ninternal\r\nreturns (bytes memory)\r\n{\r\nreturn functionCall(target, data, \"Address: low-level call failed\");\r\n}\r\n\r\n\r\nfunction functionCall(\r\naddress target,\r\nbytes memory data,\r\nstring memory errorMessage\r\n) internal returns (bytes memory) {\r\nreturn functionCallWithValue(target, data, 0, errorMessage);\r\n}\r\n\r\n\r\nfunction functionCallWithValue(\r\naddress target,\r\nbytes memory data,\r\nuint256 value\r\n) internal returns (bytes memory) {\r\nreturn\r\nfunctionCallWithValue(\r\ntarget,\r\ndata,\r\nvalue,\r\n\"Address: low-level call with value failed\"\r\n);\r\n}\r\n\r\n\r\nfunction functionCallWithValue(\r\naddress target,\r\nbytes memory data,\r\nuint256 value,\r\nstring memory errorMessage\r\n) internal returns (bytes memory) {\r\nrequire(\r\naddress(this).balance >= value,\r\n\"Address: insufficient balance for call\"\r\n);\r\nrequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\r\n(bool success, bytes memory returndata) = target.call{value: value}(\r\ndata\r\n);\r\nreturn _verifyCallResult(success, returndata, errorMessage);\r\n}\r\n\r\n\r\nfunction functionStaticCall(address target, bytes memory data)\r\ninternal\r\nview\r\nreturns (bytes memory)\r\n{\r\nreturn\r\nfunctionStaticCall(\r\ntarget,\r\ndata,\r\n\"Address: low-level static call failed\"\r\n);\r\n}\r\n\r\n\r\nfunction functionStaticCall(\r\naddress target,\r\nbytes memory data,\r\nstring memory errorMessage\r\n) internal view returns (bytes memory) {\r\nrequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\r\n(bool success, bytes memory returndata) = target.staticcall(data);\r\nreturn _verifyCallResult(success, returndata, errorMessage);\r\n}\r\n\r\n\r\nfunction functionDelegateCall(address target, bytes memory data)\r\ninternal\r\nreturns (bytes memory)\r\n{\r\nreturn\r\nfunctionDelegateCall(\r\ntarget,\r\ndata,\r\n\"Address: low-level delegate call failed\"\r\n);\r\n}\r\n\r\n\r\nfunction functionDelegateCall(\r\naddress target,\r\nbytes memory data,\r\nstring memory errorMessage\r\n) internal returns (bytes memory) {\r\nrequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\r\n(bool success, bytes memory returndata) = target.delegatecall(data);\r\nreturn _verifyCallResult(success, returndata, errorMessage);\r\n}\r\n\r\n\r\nfunction _verifyCallResult(\r\nbool success,\r\nbytes memory returndata,\r\nstring memory errorMessage\r\n) private pure returns (bytes memory) {\r\nif (success) {\r\nreturn returndata;\r\n} else {\r\nif (returndata.length > 0) {\r\nassembly {\r\nlet returndata_size := mload(returndata)\r\nrevert(add(32, returndata), returndata_size)\r\n}\r\n} else {\r\nrevert(errorMessage);\r\n}\r\n}\r\n}\r\n}\r\n\r\n\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\naddress private _owner;\r\n\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\nconstructor () {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\n\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\n\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\n\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\n\r\n\r\ncontract TheSevenDeadlySins is IERC20, Ownable {\r\nusing Address for address;\r\nusing SafeMath for uint256;\r\n\r\n\r\nIRouter public uniswapV2Router;\r\naddress public immutable uniswapV2Pair;\r\n\r\n\r\nstring private constant _name = \"The Seven Deadly Sins\";\r\nstring private constant _symbol = \"SDS\";\r\nuint8 private constant _decimals = 18;\r\n\r\n\r\nmapping (address => uint256) private _rOwned;\r\nmapping (address => uint256) private _tOwned;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\nuint256 private constant MAX = ~uint256(0);\r\nuint256 private constant _tTotal = 7000000 * 10**18;\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _tFeeTotal;\r\n\r\n\r\nbool public isTradingEnabled;\r\n\r\n\r\n// max wallet is 1.0% of initialSupply\r\nuint256 public maxWalletAmount = _tTotal * 100 / 10000;\r\n\r\n\r\n// max tx is 0.33% of initialSupply\r\nuint256 public maxTxAmount = _tTotal * 100 / 100000;\r\n\r\n\r\nbool private _swapping;\r\n\r\n\r\n// max wallet is 0.025% of initialSupply\r\nuint256 public minimumTokensBeforeSwap = _tTotal * 100 / 1000000;\r\n\r\n\r\naddress private dead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\naddress public liquidityWallet;\r\naddress public marketingWallet;\r\naddress public buyBackWallet;\r\naddress public devWallet;\r\n\r\n\r\nstruct CustomTaxPeriod {\r\nbytes23 periodName;\r\nuint8 blocksInPeriod;\r\nuint256 timeInPeriod;\r\nuint8 liquidityFeeOnBuy;\r\nuint8 liquidityFeeOnSell;\r\nuint8 marketingFeeOnBuy;\r\nuint8 marketingFeeOnSell;\r\nuint8 devFeeOnBuy;\r\nuint8 devFeeOnSell;\r\nuint8 buyBackFeeOnBuy;\r\nuint8 buyBackFeeOnSell;\r\nuint8 holdersFeeOnBuy;\r\nuint8 holdersFeeOnSell;\r\n}\r\n\r\n\r\n// Base taxes\r\nCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,0,0,0,0,0,0,0,0,0,0);\r\n\r\n\r\nuint256 private constant _blockedTimeLimit = 259200;\r\nuint256 private _launchBlockNumber;\r\nuint256 private _launchTimestamp;\r\nmapping (address => bool) private _isBlocked;\r\nmapping (address => bool) private _isExcludedFromFee;\r\nmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\nmapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\nmapping (address => bool) public automatedMarketMakerPairs;\r\nmapping (address => bool) private _isExcludedFromDividends;\r\nmapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\naddress[] private _excludedFromDividends;\r\n\r\n\r\nuint8 private _liquidityFee;\r\nuint8 private _marketingFee;\r\nuint8 private _devFee;\r\nuint8 private _buyBackFee;\r\nuint8 private _holdersFee;\r\nuint8 private _totalFee;\r\n\r\n\r\nevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\nevent AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\nevent BlockedAccountChange(address indexed holder, bool indexed status);\r\nevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\nevent WalletChange(string indexed indentifier, address indexed newWallet, address indexed oldWallet);\r\nevent FeeChange(string indexed identifier, uint8 liquidityFee, uint8 marketingFee, uint8 devFee, uint8 buyBackFee, uint8 holdersFee);\r\nevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\nevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\nevent MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\nevent ExcludeFromDividendsChange(address indexed account, bool isExcluded);\r\nevent ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\nevent ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\r\nevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\nevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\nevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\nevent ClaimETHOverflow(uint256 amount);\r\nevent FeesApplied(uint8 liquidityFee, uint8 marketingFee, uint8 devFee, uint8 buyBackFee, uint8 holdersFee, uint8 totalFee);\r\n\r\n\r\nconstructor() {\r\nliquidityWallet = owner();\r\nmarketingWallet = owner();\r\nbuyBackWallet = owner();\r\ndevWallet = owner();\r\n\r\n\r\nIRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\naddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\naddress(this),\r\n_uniswapV2Router.WETH()\r\n);\r\nuniswapV2Router = _uniswapV2Router;\r\nuniswapV2Pair = _uniswapV2Pair;\r\n_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n\r\n\r\nexcludeFromDividends(address(this), true);\r\nexcludeFromDividends(address(dead), true);\r\nexcludeFromDividends(address(_uniswapV2Router), true);\r\n\r\n\r\n_isAllowedToTradeWhenDisabled[owner()] = true;\r\n_isAllowedToTradeWhenDisabled[address(this)] = true;\r\n\r\n\r\n_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n\r\n_isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n_isExcludedFromMaxTransactionLimit[address(dead)] = true;\r\n_isExcludedFromMaxTransactionLimit[owner()] = true;\r\n\r\n\r\n_rOwned[owner()] = _rTotal;\r\nemit Transfer(address(0), owner(), _tTotal);\r\n}\r\n\r\n\r\nreceive() external payable {}\r\n\r\n\r\n// Setters\r\nfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\nfunction transferFrom( address sender,address recipient,uint256 amount) external override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\nreturn true;\r\n}\r\nfunction increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool){\r\n_approve(_msgSender(),spender,_allowances[_msgSender()][spender].add(addedValue));\r\nreturn true;\r\n}\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n_approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,\"ERC20: decreased allowance below zero\"));\r\nreturn true;\r\n}\r\nfunction _approve(address owner,address spender,uint256 amount) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\nfunction activateTrading() external onlyOwner {\r\nisTradingEnabled = true;\r\nif (_launchTimestamp == 0) {\r\n_launchTimestamp = block.timestamp;\r\n_launchBlockNumber = block.number;\r\n}\r\n}\r\nfunction deactivateTrading() external onlyOwner {\r\nisTradingEnabled = false;\r\n}\r\nfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\nrequire(automatedMarketMakerPairs[pair] != value, \"Seven Deadly Sins: Automated market maker pair is already set to that value\");\r\nautomatedMarketMakerPairs[pair] = value;\r\nemit AutomatedMarketMakerPairChange(pair, value);\r\n}\r\nfunction blockAccount(address account) external onlyOwner {\r\nrequire(!_isBlocked[account], \"Seven Deadly Sins: Account is already blocked\");\r\nrequire((block.timestamp - _launchTimestamp) < _blockedTimeLimit, \"Seven Deadly Sins: Time to block accounts has expired\");\r\n_isBlocked[account] = true;\r\nemit BlockedAccountChange(account, true);\r\n}\r\nfunction unblockAccount(address account) external onlyOwner {\r\nrequire(_isBlocked[account], \"Seven Deadly Sins: Account is not blcoked\");\r\n_isBlocked[account] = false;\r\nemit BlockedAccountChange(account, false);\r\n}\r\nfunction allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n_isAllowedToTradeWhenDisabled[account] = allowed;\r\nemit AllowedWhenTradingDisabledChange(account, allowed);\r\n}\r\nfunction excludeFromFees(address account, bool excluded) external onlyOwner {\r\nrequire(_isExcludedFromFee[account] != excluded, \"Seven Deadly Sins: Account is already the value of 'excluded'\");\r\n_isExcludedFromFee[account] = excluded;\r\nemit ExcludeFromFeesChange(account, excluded);\r\n}\r\nfunction excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\nrequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"Seven Deadly Sins: Account is already the value of 'excluded'\");\r\n_isExcludedFromMaxWalletLimit[account] = excluded;\r\nemit ExcludeFromMaxWalletChange(account, excluded);\r\n}\r\nfunction excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\nrequire(_isExcludedFromMaxTransactionLimit[account] != excluded, \"Seven Deadly Sins: Account is already the value of 'excluded'\");\r\n_isExcludedFromMaxTransactionLimit[account] = excluded;\r\nemit ExcludeFromMaxTransferChange(account, excluded);\r\n}\r\nfunction setWallets(address newLiquidityWallet, address newMarketingWallet, address newDevWallet, address newBuyBackWallet) external onlyOwner {\r\nif(liquidityWallet != newLiquidityWallet) {\r\nrequire(newLiquidityWallet != address(0), \"Seven Deadly Sins: The liquidityWallet cannot be 0\");\r\nemit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\nliquidityWallet = newLiquidityWallet;\r\n}\r\nif(marketingWallet != newMarketingWallet) {\r\nrequire(newMarketingWallet != address(0), \"Seven Deadly Sins: The marketingWallet cannot be 0\");\r\nemit WalletChange('marketingWallet', newMarketingWallet, marketingWallet);\r\nmarketingWallet = newMarketingWallet;\r\n}\r\nif(devWallet != newDevWallet) {\r\nrequire(newDevWallet != address(0), \"Seven Deadly Sins: The devWallet cannot be 0\");\r\nemit WalletChange('devWallet', newDevWallet, devWallet);\r\ndevWallet = newDevWallet;\r\n}\r\nif(buyBackWallet != newBuyBackWallet) {\r\nrequire(newBuyBackWallet != address(0), \"Seven Deadly Sins: The buyBackWallet cannot be 0\");\r\nemit WalletChange('buyBackWallet', newBuyBackWallet, buyBackWallet);\r\nbuyBackWallet = newBuyBackWallet;\r\n}\r\n}\r\n// Base fees\r\nfunction setBaseFeesOnBuy(uint8 _liquidityFeeOnBuy, uint8 _marketingFeeOnBuy, uint8 _devFeeOnBuy, uint8 _buyBackFeeOnBuy, uint8 _holdersFeeOnBuy) external onlyOwner {\r\n_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy, _holdersFeeOnBuy);\r\nemit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy, _holdersFeeOnBuy);\r\n}\r\nfunction setBaseFeesOnSell(uint8 _liquidityFeeOnSell, uint8 _marketingFeeOnSell, uint8 _devFeeOnSell, uint8 _buyBackFeeOnSell, uint8 _holdersFeeOnSell) external onlyOwner {\r\n_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell, _holdersFeeOnSell);\r\nemit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell, _holdersFeeOnSell);\r\n}\r\nfunction setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\nrequire(newValue != maxWalletAmount, \"Seven Deadly Sins: Cannot update maxWalletAmount to same value\");\r\nemit MaxWalletAmountChange(newValue, maxWalletAmount);\r\nmaxWalletAmount = newValue;\r\n}\r\nfunction setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\nrequire(newValue != maxTxAmount, \"Seven Deadly Sins: Cannot update maxTxAmount to same value\");\r\nemit MaxTransactionAmountChange(newValue, maxTxAmount);\r\nmaxTxAmount = newValue;\r\n}\r\nfunction excludeFromDividends(address account, bool excluded) public onlyOwner {\r\nrequire(_isExcludedFromDividends[account] != excluded, \"Seven Deadly Sins: Account is already the value of 'excluded'\");\r\nif(excluded) {\r\nif(_rOwned[account] > 0) {\r\n_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n}\r\n_isExcludedFromDividends[account] = excluded;\r\n_excludedFromDividends.push(account);\r\n} else {\r\nfor (uint256 i = 0; i < _excludedFromDividends.length; i++) {\r\nif (_excludedFromDividends[i] == account) {\r\n_excludedFromDividends[i] = _excludedFromDividends[_excludedFromDividends.length - 1];\r\n_tOwned[account] = 0;\r\n_isExcludedFromDividends[account] = false;\r\n_excludedFromDividends.pop();\r\nbreak;\r\n}\r\n}\r\n}\r\nemit ExcludeFromDividendsChange(account, excluded);\r\n}\r\nfunction setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\nrequire(newValue != minimumTokensBeforeSwap, \"Seven Deadly Sins: Cannot update minimumTokensBeforeSwap to same value\");\r\nemit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\nminimumTokensBeforeSwap = newValue;\r\n}\r\nfunction claimETHOverflow() external onlyOwner {\r\nrequire(address(this).balance > 0, \"Seven Deadly Sins: Cannot send more than contract balance\");\r\nuint256 amount = address(this).balance;\r\n(bool success,) = address(owner()).call{value : amount}(\"\");\r\nif (success){\r\nemit ClaimETHOverflow(amount);\r\n}\r\n}\r\n\r\n\r\n// Getters\r\nfunction name() external pure returns (string memory) {\r\nreturn _name;\r\n}\r\nfunction symbol() external pure returns (string memory) {\r\nreturn _symbol;\r\n}\r\nfunction decimals() external view virtual returns (uint8) {\r\nreturn _decimals;\r\n}\r\nfunction totalSupply() external pure override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nif (_isExcludedFromDividends[account]) return _tOwned[account];\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\nfunction totalFees() external view returns (uint256) {\r\nreturn _tFeeTotal;\r\n}\r\nfunction allowance(address owner, address spender) external view override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\nfunction getBaseBuyFees() external view returns (uint8, uint8, uint8, uint8, uint8){\r\nreturn (_base.liquidityFeeOnBuy, _base.marketingFeeOnBuy, _base.devFeeOnBuy, _base.buyBackFeeOnBuy, _base.holdersFeeOnBuy);\r\n}\r\nfunction getBaseSellFees() external view returns (uint8, uint8, uint8, uint8, uint8){\r\nreturn (_base.liquidityFeeOnSell, _base.marketingFeeOnSell, _base.devFeeOnSell, _base.buyBackFeeOnSell, _base.holdersFeeOnSell);\r\n}\r\nfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\nrequire(rAmount <= _rTotal, \"Seven Deadly Sins: Amount must be less than total reflections\");\r\nuint256 currentRate = _getRate();\r\nreturn rAmount / currentRate;\r\n}\r\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns (uint256) {\r\nrequire(tAmount <= _tTotal, \"Seven Deadly Sins: Amount must be less than supply\");\r\nuint256 currentRate = _getRate();\r\nuint256 rAmount = tAmount * currentRate;\r\nif (!deductTransferFee) {\r\nreturn rAmount;\r\n}\r\nelse {\r\nuint256 rTotalFee = tAmount * _totalFee / 100 * currentRate;\r\nuint256 rTransferAmount = rAmount - rTotalFee;\r\nreturn rTransferAmount;\r\n}\r\n}\r\n\r\n\r\n// Main\r\nfunction _transfer(\r\naddress from,\r\naddress to,\r\nuint256 amount\r\n) internal {\r\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\nrequire(amount <= balanceOf(from), \"Seven Deadly Sins: Cannot transfer more than balance\");\r\n\r\n\r\nbool isBuyFromLp = automatedMarketMakerPairs[from];\r\nbool isSelltoLp = automatedMarketMakerPairs[to];\r\n\r\n\r\nif(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\nrequire(isTradingEnabled, \"Seven Deadly Sins: Trading is currently disabled.\");\r\nrequire(!_isBlocked[to], \"Seven Deadly Sins: Account is blocked\");\r\nrequire(!_isBlocked[from], \"Seven Deadly Sins: Account is blocked\");\r\nif (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\nrequire(amount <= maxTxAmount, \"Seven Deadly Sins: Transfer amount exceeds the maxTxAmount.\");\r\n}\r\nif (!_isExcludedFromMaxWalletLimit[to]) {\r\nrequire((balanceOf(to) + amount) <= maxWalletAmount, \"Seven Deadly Sins: Expected wallet amount exceeds the maxWalletAmount.\");\r\n}\r\n}\r\n\r\n\r\n_adjustTaxes(isBuyFromLp, isSelltoLp);\r\nbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n\r\nif (\r\nisTradingEnabled &&\r\ncanSwap &&\r\n!_swapping &&\r\n_totalFee > 0 &&\r\nautomatedMarketMakerPairs[to]\r\n) {\r\n_swapping = true;\r\n_swapAndLiquify();\r\n_swapping = false;\r\n}\r\n\r\n\r\nbool takeFee = !_swapping && isTradingEnabled;\r\n\r\n\r\nif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\ntakeFee = false;\r\n}\r\n_tokenTransfer(from, to, amount, takeFee);\r\n}\r\nfunction _tokenTransfer(address sender,address recipient, uint256 tAmount, bool takeFee) private {\r\n(uint256 tTransferAmount,uint256 tFee, uint256 tOther) = _getTValues(tAmount, takeFee);\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rOther) = _getRValues(tAmount, tFee, tOther, _getRate());\r\n\r\n\r\nif (_isExcludedFromDividends[sender]) {\r\n_tOwned[sender] = _tOwned[sender] - tAmount;\r\n}\r\nif (_isExcludedFromDividends[recipient]) {\r\n_tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n}\r\n_rOwned[sender] = _rOwned[sender] - rAmount;\r\n_rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n_takeContractFees(rOther, tOther);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal -= rFee;\r\n_tFeeTotal += tFee;\r\n}\r\nfunction _getTValues(uint256 tAmount, bool takeFee) private view returns (uint256,uint256,uint256){\r\nif (!takeFee) {\r\nreturn (tAmount, 0, 0);\r\n}\r\nelse {\r\nuint256 tFee = tAmount * _holdersFee / 100;\r\nuint256 tOther = tAmount * (_liquidityFee + _devFee + _marketingFee + _buyBackFee) / 100;\r\nuint256 tTransferAmount = tAmount - (tFee + tOther);\r\nreturn (tTransferAmount, tFee, tOther);\r\n}\r\n}\r\nfunction _getRValues(\r\nuint256 tAmount,\r\nuint256 tFee,\r\nuint256 tOther,\r\nuint256 currentRate\r\n) private pure returns ( uint256, uint256, uint256, uint256) {\r\nuint256 rAmount = tAmount * currentRate;\r\nuint256 rFee = tFee * currentRate;\r\nuint256 rOther = tOther * currentRate;\r\nuint256 rTransferAmount = rAmount - (rFee + rOther);\r\nreturn (rAmount, rTransferAmount, rFee, rOther);\r\n}\r\nfunction _getRate() private view returns (uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\nfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nfor (uint256 i = 0; i < _excludedFromDividends.length; i++) {\r\nif (\r\n_rOwned[_excludedFromDividends[i]] > rSupply ||\r\n_tOwned[_excludedFromDividends[i]] > tSupply\r\n) return (_rTotal, _tTotal);\r\nrSupply = rSupply - _rOwned[_excludedFromDividends[i]];\r\ntSupply = tSupply - _tOwned[_excludedFromDividends[i]];\r\n}\r\nif (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\nfunction _takeContractFees(uint256 rOther, uint256 tOther) private {\r\nif (_isExcludedFromDividends[address(this)]) {\r\n_tOwned[address(this)] += tOther;\r\n}\r\n_rOwned[address(this)] += rOther;\r\n}\r\nfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp) private {\r\n_liquidityFee = 0;\r\n_devFee = 0;\r\n_marketingFee = 0;\r\n_buyBackFee = 0;\r\n_holdersFee = 0;\r\n\r\n\r\nif (isBuyFromLp) {\r\nif ((block.number - _launchBlockNumber) <= 5) {\r\n_liquidityFee = 100;\r\n} else {\r\n_liquidityFee = _base.liquidityFeeOnBuy;\r\n_devFee = _base.devFeeOnBuy;\r\n_marketingFee = _base.marketingFeeOnBuy;\r\n_buyBackFee = _base.buyBackFeeOnBuy;\r\n_holdersFee = _base.holdersFeeOnBuy;\r\n}\r\n}\r\nif (isSelltoLp) {\r\n_liquidityFee = _base.liquidityFeeOnSell;\r\n_devFee = _base.devFeeOnSell;\r\n_marketingFee = _base.marketingFeeOnSell;\r\n_buyBackFee = _base.buyBackFeeOnSell;\r\n_holdersFee = _base.holdersFeeOnSell;\r\n\r\n\r\nif (block.timestamp - _launchTimestamp <= 259200) {\r\n_liquidityFee = 2;\r\n_devFee = 3;\r\n_marketingFee = 10;\r\n_buyBackFee = 8;\r\n_holdersFee = 2;\r\n}\r\n}\r\n_totalFee = _liquidityFee + _marketingFee + _devFee + _buyBackFee + _holdersFee;\r\nemit FeesApplied(_liquidityFee, _marketingFee, _devFee, _buyBackFee, _holdersFee, _totalFee);\r\n}\r\nfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\nuint8 _liquidityFeeOnSell,\r\nuint8 _marketingFeeOnSell,\r\nuint8 _devFeeOnSell,\r\nuint8 _buyBackFeeOnSell,\r\nuint8 _holdersFeeOnSell\r\n) private {\r\nif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\nemit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\nmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n}\r\nif (map.marketingFeeOnSell != _marketingFeeOnSell) {\r\nemit CustomTaxPeriodChange(_marketingFeeOnSell, map.marketingFeeOnSell, 'marketingFeeOnSell', map.periodName);\r\nmap.marketingFeeOnSell = _marketingFeeOnSell;\r\n}\r\nif (map.devFeeOnSell != _devFeeOnSell) {\r\nemit CustomTaxPeriodChange(_devFeeOnSell, map.devFeeOnSell, 'devFeeOnSell', map.periodName);\r\nmap.devFeeOnSell = _devFeeOnSell;\r\n}\r\nif (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\nemit CustomTaxPeriodChange(_buyBackFeeOnSell, map.buyBackFeeOnSell, 'buyBackFeeOnSell', map.periodName);\r\nmap.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n}\r\nif (map.holdersFeeOnSell != _holdersFeeOnSell) {\r\nemit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\r\nmap.holdersFeeOnSell = _holdersFeeOnSell;\r\n}\r\n}\r\nfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\nuint8 _liquidityFeeOnBuy,\r\nuint8 _marketingFeeOnBuy,\r\nuint8 _devFeeOnBuy,\r\nuint8 _buyBackFeeOnBuy,\r\nuint8 _holdersFeeOnBuy\r\n) private {\r\nif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\nemit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\nmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n}\r\nif (map.marketingFeeOnBuy != _marketingFeeOnBuy) {\r\nemit CustomTaxPeriodChange(_marketingFeeOnBuy, map.marketingFeeOnBuy, 'marketingFeeOnBuy', map.periodName);\r\nmap.marketingFeeOnBuy = _marketingFeeOnBuy;\r\n}\r\nif (map.devFeeOnBuy != _devFeeOnBuy) {\r\nemit CustomTaxPeriodChange(_devFeeOnBuy, map.devFeeOnBuy, 'devFeeOnBuy', map.periodName);\r\nmap.devFeeOnBuy = _devFeeOnBuy;\r\n}\r\nif (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\nemit CustomTaxPeriodChange(_buyBackFeeOnBuy, map.buyBackFeeOnBuy, 'buyBackFeeOnBuy', map.periodName);\r\nmap.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n}\r\nif (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\r\nemit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\r\nmap.holdersFeeOnBuy = _holdersFeeOnBuy;\r\n}\r\n}\r\nfunction _swapAndLiquify() private {\r\nuint256 contractBalance = balanceOf(address(this));\r\nuint256 initialETHBalance = address(this).balance;\r\n\r\n\r\nuint8 totalFeePrior = _totalFee;\r\nuint8 liquidityFeePrior = _liquidityFee;\r\nuint8 marketingFeePrior = _marketingFee;\r\nuint8 devFeePrior = _devFee;\r\nuint8 buyBackFeePrior = _buyBackFee;\r\nuint8 holdersFeePrior = _holdersFee;\r\n\r\n\r\nuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\nuint256 amountToSwapForETH = contractBalance - amountToLiquify;\r\n\r\n\r\n_swapTokensForETH(amountToSwapForETH);\r\n\r\n\r\nuint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\nuint256 totalETHFee = totalFeePrior - (liquidityFeePrior / 2) - (holdersFeePrior);\r\nuint256 amountETHLiquidity = ETHBalanceAfterSwap * liquidityFeePrior / totalETHFee / 2;\r\nuint256 amountETHDev = ETHBalanceAfterSwap * devFeePrior / totalETHFee;\r\nuint256 amountETHBuyBack = ETHBalanceAfterSwap * buyBackFeePrior / totalETHFee;\r\nuint256 amountETHMarketing = ETHBalanceAfterSwap - (amountETHLiquidity + amountETHDev + amountETHBuyBack);\r\n\r\n\r\npayable(marketingWallet).transfer(amountETHMarketing);\r\npayable(devWallet).transfer(amountETHDev);\r\npayable(buyBackWallet).transfer(amountETHBuyBack);\r\n\r\n\r\nif (amountToLiquify > 0) {\r\n_addLiquidity(amountToLiquify, amountETHLiquidity);\r\nemit SwapAndLiquify(amountToSwapForETH, amountETHLiquidity, amountToLiquify);\r\n}\r\n_totalFee = totalFeePrior;\r\n_liquidityFee = liquidityFeePrior;\r\n_marketingFee = marketingFeePrior;\r\n_devFee = devFeePrior;\r\n_buyBackFee = buyBackFeePrior;\r\n_holdersFee = holdersFeePrior;\r\n}\r\nfunction _swapTokensForETH(uint256 tokenAmount) private {\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0, // accept any amount of ETH\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n);\r\n}\r\nfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\naddress(this),\r\ntokenAmount,\r\n0, // slippage is unavoidable\r\n0, // slippage is unavoidable\r\nliquidityWallet,\r\nblock.timestamp\r\n);\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimETHOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TheSevenDeadlySins", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1779630db5889baaa1c50bd954c983d4bee7bb54f01e27d16ac3033f9f0a2491"}