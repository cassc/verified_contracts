{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// website\uff1ahttps://www.berc20.cash/\r\n\r\n//'########::'########:'########:::'######:::'#######::::'#####:::\r\n//##.... ##: ##.....:: ##.... ##:'##... ##:'##.... ##::'##.. ##::\r\n//##:::: ##: ##::::::: ##:::: ##: ##:::..::..::::: ##:'##:::: ##:\r\n//########:: ######::: ########:: ##::::::::'#######:: ##:::: ##:\r\n//##.... ##: ##...:::: ##.. ##::: ##:::::::'##:::::::: ##:::: ##:\r\n//##:::: ##: ##::::::: ##::. ##:: ##::: ##: ##::::::::. ##:: ##::\r\n//########:: ########: ##:::. ##:. ######:: #########::. #####:::\r\n//........:::........::..:::::..:::......:::.........::::.....::::\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Lucky is Ownable {\r\n\r\n    struct LuckyRound {\r\n        uint256 round;\r\n        uint256 luckyCounts;\r\n        address tokenAddress;\r\n        uint256 totalAmounts;\r\n        address winner;\r\n        uint256 startTime;\r\n        bool ended;\r\n    }\r\n\r\n    uint256 private nonce;\r\n\r\n    LuckyRound[] public luckyRounds;\r\n    uint256 public currentRound; \r\n    uint256 public luckyMinAmount=100000000000000000000;\r\n\r\n    address public bercAddress = 0xbC8E35221904F61b4200Ca44a08e4daC387Ac83A;\r\n    address public devAddress = 0x26F24d1EeC2Cc9454e174803E44a7627E318aE09;\r\n    address public blackAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public winnerPer=60;\r\n    uint256 public devPer=10;\r\n    uint256 public blackAdsPer=10;\r\n    uint256 public nextRundPer=20;\r\n\r\n    uint256 private lastRandomNumber;\r\n\r\n    mapping(uint256 => address[]) public roundParticipants;\r\n    uint256 public maxLuckyCounts=1000;\r\n\r\n    event LotteryStarted(uint256 round, uint256 requiredTokens, uint256 winningNumber);\r\n    event LotteryEnded(uint256 round, address winner, uint256 winningNumber, uint256 tokensWon);\r\n\r\n    constructor() {\r\n        currentRound = 1;\r\n        luckyRounds.push(LuckyRound(currentRound,maxLuckyCounts,bercAddress, 0, address(0),block.timestamp, false));\r\n    }\r\n\r\n    function lucky(uint256 count,uint randm) external {\r\n        require(count > 0, \"Count must be greater than zero.\");\r\n        IERC20 token = IERC20(bercAddress);\r\n        require(token.transferFrom(msg.sender, address(this), count*luckyMinAmount), \"Insufficient balance $berc!\");\r\n        LuckyRound storage currentLuncky = luckyRounds[currentRound - 1];\r\n        if (currentLuncky.ended) {\r\n            currentRound++;\r\n            currentLuncky = luckyRounds[currentRound-1];\r\n        }\r\n        currentLuncky.totalAmounts += count*luckyMinAmount;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            roundParticipants[currentLuncky.round].push(msg.sender); \r\n        }\r\n        if(roundParticipants[currentLuncky.round].length>maxLuckyCounts){\r\n            uint256 lunckyNumber = random(roundParticipants[currentLuncky.round].length,msg.sender,randm);\r\n            address lunckyAddress = roundParticipants[currentLuncky.round][lunckyNumber];\r\n\r\n            currentLuncky.winner = lunckyAddress;\r\n            currentLuncky.ended = true;\r\n\r\n            token.transfer(lunckyAddress, currentLuncky.totalAmounts * winnerPer / 100);\r\n            token.transfer(devAddress, currentLuncky.totalAmounts * devPer / 100);\r\n            token.transfer(blackAddress, currentLuncky.totalAmounts * blackAdsPer / 100);\r\n\r\n            currentRound++;\r\n            luckyRounds.push(LuckyRound(currentRound,maxLuckyCounts,bercAddress, currentLuncky.totalAmounts*nextRundPer/100, address(0),block.timestamp, false));\r\n        }\r\n    }\r\n\r\n    function addToPrizePool(uint256 amount) external {\r\n        IERC20 token = IERC20(bercAddress);\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Failed to transfer funds to the prize pool.\");\r\n        LuckyRound storage currentLucky = luckyRounds[currentRound - 1];\r\n        require(!currentLucky.ended, \"Cannot add funds to the ended round.\");\r\n        currentLucky.totalAmounts += amount;\r\n    }\r\n\r\n    function getLastNRounds(uint256 n) public view returns (LuckyRound[] memory) {\r\n        uint256 totalRounds = luckyRounds.length;\r\n        uint256 startIndex = totalRounds > n ? totalRounds - n : 0;\r\n        uint256 resultSize = totalRounds - startIndex;\r\n\r\n        LuckyRound[] memory result = new LuckyRound[](resultSize);\r\n\r\n        for (uint256 i = 0; i < resultSize; i++) {\r\n            result[resultSize - i - 1] = luckyRounds[startIndex + i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getCurrentRound() public view returns (LuckyRound memory) {\r\n        return luckyRounds[currentRound - 1];\r\n    }\r\n\r\n    function random(uint number,address ads,uint256 nonce) public view returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(block.timestamp,nonce,block.difficulty,  \r\n            ads))) % number;\r\n    }\r\n\r\n    function getLastRandomNumber() public view returns (uint256) {\r\n        return lastRandomNumber;\r\n    }\r\n\r\n    function setBercAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Invalid address\");\r\n        bercAddress = newAddress;\r\n    }\r\n\r\n    function setDevAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Invalid address\");\r\n        devAddress = newAddress;\r\n    }\r\n\r\n    function setBlackAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Invalid address\");\r\n        blackAddress = newAddress;\r\n    }\r\n\r\n    function setWinnerPer(uint256 newWinnerPer) external onlyOwner {\r\n        require(newWinnerPer <= 100, \"Invalid percentage\");\r\n        winnerPer = newWinnerPer;\r\n    }\r\n\r\n    function setNextRundPer(uint256 newNextRundPer) external onlyOwner {\r\n        require(nextRundPer <= 100, \"Invalid nextRundPer\");\r\n        nextRundPer = newNextRundPer;\r\n    }\r\n\r\n    function setDevPer(uint256 newDevPer) external onlyOwner {\r\n        require(newDevPer <= 100, \"Invalid percentage\");\r\n        devPer = newDevPer;\r\n    }\r\n\r\n    function setMaxLuckyCounts(uint256 _maxLuckyCounts) external onlyOwner {\r\n        require(maxLuckyCounts > 10, \"Invalid maxLuckyCounts\");\r\n        maxLuckyCounts = _maxLuckyCounts;\r\n    }\r\n    \r\n    function setBlackAdsPer(uint256 newBlackAdsPer) external onlyOwner {\r\n        require(newBlackAdsPer <= 100, \"Invalid percentage\");\r\n        blackAdsPer = newBlackAdsPer;\r\n    }\r\n\r\n    function setLuckyMinAmount(uint256 amount) external onlyOwner{\r\n        luckyMinAmount = amount;\r\n    }\r\n\r\n    function getRoundParticipants(uint256 round) public view returns (address[] memory) {\r\n        return roundParticipants[round];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensWon\",\"type\":\"uint256\"}],\"name\":\"LotteryEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningNumber\",\"type\":\"uint256\"}],\"name\":\"LotteryStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bercAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackAdsPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyCounts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmounts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct Lucky.LuckyRound\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getLastNRounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyCounts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmounts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct Lucky.LuckyRound[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getRoundParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randm\",\"type\":\"uint256\"}],\"name\":\"lucky\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyCounts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmounts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLuckyCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRundPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ads\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBercAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBlackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlackAdsPer\",\"type\":\"uint256\"}],\"name\":\"setBlackAdsPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDevPer\",\"type\":\"uint256\"}],\"name\":\"setDevPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLuckyMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLuckyCounts\",\"type\":\"uint256\"}],\"name\":\"setMaxLuckyCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNextRundPer\",\"type\":\"uint256\"}],\"name\":\"setNextRundPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWinnerPer\",\"type\":\"uint256\"}],\"name\":\"setWinnerPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lucky", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c9d872f1daec4f9e05f07581cbc0cdbf782fdb6d329c58d1536dc9653836928"}