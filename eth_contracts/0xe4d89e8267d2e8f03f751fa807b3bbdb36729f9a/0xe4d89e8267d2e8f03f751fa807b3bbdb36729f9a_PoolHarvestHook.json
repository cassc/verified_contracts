{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PoolHarvestHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IBooster.sol\\\";\\nimport \\\"./interfaces/IBoosterAdmin.sol\\\";\\nimport \\\"./interfaces/IBoosterRewardManager.sol\\\";\\nimport \\\"./interfaces/IRewards.sol\\\";\\nimport \\\"./interfaces/IRewardHook.sol\\\";\\nimport \\\"./interfaces/IPoolAddHook.sol\\\";\\nimport \\\"./interfaces/IRewardHookExtended.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/*\\n    A Hook that forces harvests to happen once period finish is complete\\n*/\\ncontract PoolHarvestHook is IRewardHook, IPoolAddHook{\\n\\n    address public constant booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    address public constant boosterOwner = address(0x256e1bbA846611C37CF89844a02435E6C098b86D);\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    address public immutable poolManager;\\n    address public immutable poolHook;\\n    address public immutable owner;\\n\\n    mapping(address => bool) public operators;\\n    mapping(address => address) public stashMap;\\n    uint256 public timebuffer;\\n\\n    bool private isOperator;\\n\\n    event AddOperator(address indexed _op, bool _valid);\\n    event ChangeBuffer(uint256 _buffer);\\n\\n    constructor(address _owner, address _poolManager, address _poolHook) public {\\n        owner = _owner;\\n        poolManager = _poolManager;\\n        poolHook = _poolHook;\\n        operators[msg.sender] = true;\\n        timebuffer = 1 hours;\\n        emit AddOperator(msg.sender, true);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender] || owner == msg.sender, \\\"!op\\\");\\n        _;\\n    }\\n\\n    //set operator\\n    function setOperators(address _op, bool _valid) external onlyOwner{\\n        operators[_op] = _valid;\\n        emit AddOperator(_op, _valid);\\n    }\\n\\n    //set time buffer\\n    function setBuffer(uint256 _seconds) external onlyOwner{\\n        timebuffer = _seconds;\\n        emit ChangeBuffer(_seconds);\\n    }\\n\\n    //disable hook by removing all crv on this address\\n    function disable() external onlyOwner{\\n        IERC20(crv).transfer(address(0x1389388d01708118b497f59521f6943Be2541bb7), IERC20(crv).balanceOf(address(this)));\\n    }\\n\\n    function setStashMap(uint256 _pid) public{\\n        //get stash address and crvrewards address\\n        (,,,address crvRewards, address stash,) = IBooster(booster).poolInfo(_pid);\\n\\n        //add mapping stash -> rewards\\n        stashMap[stash] = crvRewards;\\n    }\\n\\n    function setMultiStashMap(uint256[] calldata _pids) public{\\n        uint256 l = _pids.length;\\n        for(uint256 p = 0; p < l; ++p){\\n            //get stash address and crvrewards address\\n            (,,,address crvRewards, address stash,) = IBooster(booster).poolInfo(_pids[p]);\\n\\n            //add mapping stash -> rewards\\n            stashMap[stash] = crvRewards;\\n        }\\n    }\\n\\n    function poolAdded(address /*_gauge*/, uint256 /*_stashVersion*/, uint256 _poolId) external override{\\n        //require called from pool manager\\n        require(msg.sender == poolManager, \\\"!poolMng\\\");\\n\\n        // set stash map\\n        setStashMap(_poolId);\\n\\n        // tell booster owner reward manager to initialize pool (add cvx reward and stash hook)\\n        address rewardmanager = IBoosterAdmin(boosterOwner).stashRewardManager();\\n        IBoosterRewardManager(rewardmanager).initializePool(_poolId);\\n    }\\n\\n    function earmarkRewards(uint256 _pid) external onlyOperator returns(bool){\\n        uint256 crvb = IERC20(crv).balanceOf(address(this));\\n        isOperator = true;\\n        IBooster(booster).earmarkRewards(_pid);\\n        isOperator = false;\\n        IERC20(crv).transfer(msg.sender, IERC20(crv).balanceOf(address(this))-crvb);\\n        return true;\\n    }\\n\\n    //hook from stash\\n    function onRewardClaim() external override{\\n        //msg.sender is a proper stash if in the stash map\\n        _onHarvest(stashMap[msg.sender]);\\n    }\\n\\n    //hook from PoolRewardHook\\n    function getReward(address _stash) public{\\n        require(msg.sender == poolHook, \\\"!hook\\\");\\n        //can trust the stash address given by PoolRewardHook\\n        _onHarvest(stashMap[_stash]);\\n    }\\n\\n    function _onHarvest(address _crvRewards) internal{\\n\\n        //if not set or operator, return\\n        if(_crvRewards == address(0) || isOperator){\\n            return;\\n        }\\n\\n        //check period finish on crvrewards\\n        if (block.timestamp >= IRewards(_crvRewards).periodFinish()+timebuffer) {\\n            return;\\n        }\\n\\n        // //check if there is more crv rewards waiting to be claimed than the current reward epoch\\n        uint256 currentRewards = IRewards(_crvRewards).currentRewards();\\n        uint256 balanceOnBooster = IERC20(crv).balanceOf(booster);\\n        if(balanceOnBooster > currentRewards * 2){\\n            return;\\n        }\\n\\n        //if fail, send 1 wei of crv to booster\\n        IERC20(crv).transfer(booster, 1);\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRewards{\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function setWeight(address _pool, uint256 _amount) external returns(bool);\\n    function setWeights(address[] calldata _account, uint256[] calldata _amount) external;\\n    function setDistributor(address _distro, bool _valid) external;\\n    function getReward(address) external;\\n    function queueNewRewards(uint256) external;\\n    function addExtraReward(address) external;\\n    function setRewardHook(address) external;\\n    function user_checkpoint(address _account) external returns(bool);\\n    function periodFinish() external view returns(uint256);\\n    function currentRewards() external view returns(uint256);\\n    function rewardToken() external view returns(address);\\n    function rewardMap(address) external view returns(bool);\\n    function earned(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardHookExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardHookExtended {\\n    function onRewardClaim() external;\\n    function poolRewardLength(address _pool) external view returns(uint256);\\n    function poolRewardList(address _pool, uint256 _index) external view returns(address _rewardContract);\\n    function addPoolReward(address _pool, address _rewardContract) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPoolAddHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPoolAddHook {\\n    function poolAdded(address _gauge, uint256 _stashVersion, uint256 _poolId) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBoosterRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBoosterRewardManager {\\n    function defaultHook() external view returns(address);\\n    function initializePool(uint256 _pid) external;\\n    function setStashRewardManager(address _mng) external;\\n    function setStashExtraReward(uint256 _pid, address _token) external;\\n    function setStashRewardHook(uint256 _pid, address _hook) external;\\n    function setMultiStashRewardHook(uint256[] calldata _pids, address _hook) external;\\n    function setStashTokenIsValid(address stashToken, bool isValid) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBoosterAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBoosterAdmin {\\n    function owner() external view returns(address);\\n    function stashRewardManager() external view returns(address);\\n    function setStashRewardManager(address _mng) external;\\n    function acceptStashRewardManager() external;\\n    function setStashExtraReward(uint256 _pid, address _token) external;\\n    function setStashRewardHook(uint256 _pid, address _hook) external;\\n    function setStashTokenIsValid(address stashToken, bool isValid) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBooster {\\n    function owner() external view returns(address);\\n    function feeToken() external view returns(address);\\n    function feeDistro() external view returns(address);\\n    function lockFees() external view returns(address);\\n    function stakerRewards() external view returns(address);\\n    function lockRewards() external view returns(address);\\n    function setVoteDelegate(address _voteDelegate) external;\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool);\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool);\\n    function poolInfo(uint256 _pid) external view returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\\n    function earmarkRewards(uint256 _pid) external returns(bool);\\n    function earmarkFees() external returns(bool);\\n    function isShutdown() external view returns(bool);\\n    function poolLength() external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolHook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"AddOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"ChangeBuffer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onRewardClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"poolAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"setMultiStashMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setStashMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stashMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timebuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolHarvestHook", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a3c5a1e09150b75ff251c1a7815a07182c3de2fb0000000000000000000000006d3a388e310aaa498430d1fe541d6d64ddb423de000000000000000000000000723f9aa67fdd9b0e375ef8553eb2afc28ecd4a96", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}