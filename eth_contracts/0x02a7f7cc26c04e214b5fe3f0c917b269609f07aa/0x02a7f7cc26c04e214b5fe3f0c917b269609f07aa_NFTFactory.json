{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/PullPayment.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/EscrowUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/development-recommendations/general/external-calls/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract PullPaymentUpgradeable is Initializable {\\n    EscrowUpgradeable private _escrow;\\n\\n    function __PullPayment_init() internal onlyInitializing {\\n        __PullPayment_init_unchained();\\n    }\\n\\n    function __PullPayment_init_unchained() internal onlyInitializing {\\n        _escrow = new EscrowUpgradeable();\\n        _escrow.initialize();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     *\\n     * Causes the `escrow` to emit a {Withdrawn} event.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     *\\n     * Causes the `escrow` to emit a {Deposited} event.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport { Initializable } from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/escrow/EscrowUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/OwnableUpgradeable.sol\\\";\\nimport \\\"../AddressUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract EscrowUpgradeable is Initializable, OwnableUpgradeable {\\n    using AddressUpgradeable for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function __Escrow_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Escrow_init_unchained() internal onlyInitializing {\\n    }\\n    function initialize() public virtual initializer {\\n        __Escrow_init();\\n    }\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     *\\n     * Emits a {Deposited} event.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     *\\n     * Emits a {Withdrawn} event.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICSENSED\\npragma solidity 0.8.18;\\n\\ninterface IFeeDistributor {\\n    /**\\n     * @dev Defines a fee item during a fee distribution request. It specifies\\n     * the following fields:\\n     * - `payee` who should receve a fee transfer\\n     * - `token` symbol (e.g. ETH, MATIC, USDC, APE)\\n     * - `amount` which the `payee` should receive\\n     */\\n    struct Fee {\\n        address payable payee;\\n        bytes32 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Emitted when some Ether amount received by the current contract.\\n     */\\n    event EtherReceived(address sender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when a limit of fee item count is set for a given caller.\\n     */\\n    event FeeCountLimitSet(uint256 feeCountLimit);\\n\\n    /**\\n     * @dev Emitted when a native token (e.g. Ether) for the blockchain is set.\\n     */\\n    event NativeTokenSet(bytes32 indexed nativeToken);\\n\\n    /**\\n     * @dev Emitted when an ERC20 token used for fee distribution is registered.\\n     */\\n    event TokenAddressSet(bytes32 tokenSymbol, address tokenAddress);\\n\\n    /**\\n     * @dev Emitted when fees are distributed for a given caller.\\n     */\\n    event FeesDistributed(uint256 feeCount);\\n\\n    /**\\n     * @dev Fee item count exceeded an upper boundary for a given caller.\\n     */\\n    error FeeCountLimitExceeded(uint256 feeCount);\\n\\n    /**\\n     * @dev A fee token name is not registered in the contract.\\n     */\\n    error UnsupportedToken(bytes32 feeToken);\\n\\n    /**\\n     * @dev Sets a native token (e.g. Ether) for the blockchain where the contract\\n     * is deployed.\\n     *\\n     * Emits a {NativeTokenSet} event.\\n     */\\n    function setNativeToken(bytes32 nativeToken) external;\\n\\n    /**\\n     * @dev Sets an item limit for each fee distribution request. The limit is specific for\\n     * each caller. If the limit is not set, the contract-wide default value is used.\\n     *\\n     * Emits a {FeeCountLimitSet} event.\\n     */\\n    function setFeeCountLimit(address contractAddress, uint256 feeCountLimit) external;\\n\\n    /**\\n     * @dev Set an ERC20 token which is allowed to be used for fee distribution.\\n     *\\n     * Emits a {TokenAddressSet} event.\\n     */\\n    function setTokenAddress(bytes32 tokenSymbol, address tokenAddress) external;\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Distributes fees, which can be expressed both in a native token\\n     * (e.g. Ether, Matic) and/or in a registered ERC20 token. Native and ERC20 fee\\n     * distributions can be intermixed in a single request.\\n     *\\n     * Requirements:\\n     *\\n     * - the `fees` item count is limited for each caller. If the limit for a caller\\n     * is not specified, the contract-wide default value is used.\\n     *\\n     * WARNING: If a caller sends some excessive native token amount, it is locked up\\n     * in an escrow. This amount can be released further by executing\\n     * `withdrawPayments` method for the given caller.\\n     *\\n     * Emits a {FeeDistributed} event.\\n     *\\n     * Also, can emit a {EtherReceived} event if a caller sends an execessive native\\n     * token amount.\\n     */\\n    function distributeFees(Fee[] calldata fees) external payable;\\n\\n    function tokenAddresses(bytes32 tokenSymbol) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIncinerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport { IFeeDistributor } from \\\"./IFeeDistributor.sol\\\";\\n\\ninterface IIncinerator {\\n    /**\\n     * @dev Defines data required to burn a token within an NFT collection\\n     *  - `collection` is the address of an NFT collection.\\n     *  - `tokenId` is the token identifier within this NFT collection.\\n     */\\n    struct NFTItem {\\n        address collection;\\n        uint256 tokenId;\\n    }\\n\\n    /**\\n     * @dev Defines data required to burn items with a permit. See\\n     * the {permitBurnItems} method for more details.\\n     *  - `hash` is a hash signed by a user.\\n     *  - `signature` is a user's signatured.\\n     */\\n    struct Message {\\n        bytes32 hash;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @dev Emitted when some Ether amount received by the current contract.\\n     */\\n    event EtherReceived(address sender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the address of a verifier contract is set.\\n     */\\n    event VerifierSet(address indexed verifier);\\n\\n    /**\\n     * @dev Emitted when an allowed range of tokens to be burnt.\\n     *\\n     * Emits an {NFTItemRangeSet} event.\\n     */\\n    event NFTItemRangeSet(uint8[2] nftItemRange);\\n\\n    /**\\n     * @dev Emitted when the address of a NFT operator contract is set.\\n     */\\n    event NFTOperatorSet(address indexed nftOperator);\\n\\n    /**\\n     * @dev Emitted when the address of a fee distributor contract is set.\\n     */\\n    event FeeDistributorSet(address indexed feeDistributor);\\n\\n    /**\\n     * @dev Emitted when a group of tokens burnt within an NFT collection.\\n     */\\n    event TokensBurnt(uint256 nftItemCount);\\n\\n    /**\\n     * @dev Emitted when a group of tokens burnt within an NFT collection.\\n     */\\n    event TransactionProcessed(uint256 indexed transactionId);\\n\\n    /**\\n     * @dev The zero address of a verifier contract is given.\\n     */\\n    error ZeroVerifier();\\n\\n    /**\\n     * @dev The zero address of an NFT operator contract is given.\\n     */\\n    error ZeroNFTOperator();\\n\\n    /**\\n     * @dev The zero address of a fee distributor contract is given.\\n     */\\n    error ZeroFeeDistributor();\\n\\n    /**\\n     * @dev The item count is out of an allowed range.\\n     */\\n    error NFTItemRangeMissed(uint8[2] nftItemRange, uint256 currentNFTItemCount);\\n\\n    /**\\n     * @dev The lower boundary of an item range is greater than the upper one.\\n     */\\n    error InconsistentNFTItemRange(uint8[2] nftItemRange);\\n\\n    /**\\n     * @dev The upper boundary for token burns within a certain deduplication group\\n     * identifier is reached.\\n     */\\n    error MaxItemUsageReached(uint256 deduplicationId, uint256 currentUsage);\\n\\n    /**\\n     * @dev An invalid NFT owner attempts to burn a token with a permit.\\n     */\\n    error InvalidNFTOwner(address collection, uint256 tokenId, address currentOwner, address claimedOnwer);\\n\\n    /**\\n     * @dev Sets the address of a verifier contract, which allows to verify\\n     * signatures restricted to authorized callers only.\\n     *\\n     * Emits a {VerifierSet} event.\\n     */\\n    function setVerifier(address verifier) external;\\n\\n    /**\\n     * @dev Sets an allowed range of tokens to be burnt.\\n     *\\n     * Emits an {NFTItemRangeSet} event.\\n     */\\n    function setNFTItemRange(uint8[2] calldata nftItemRange) external;\\n\\n    /**\\n     * @dev Sets the address of an NFT oeperator contract, which manages token\\n     * approvals.\\n     *\\n     * Emits an {NFTOperatorSet} event.\\n     */\\n    function setNFTOperator(address nftOperator) external;\\n\\n    /**\\n     * @dev Sets the address of a fee distributor contract, which handles fee\\n     * distribution from a caller.\\n     *\\n     * Emits a {FeeDistributor} event.\\n     */\\n    function setFeeDistributor(address feeDistributor) external;\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Handles token burning within an NFT collection.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {TokensBurnt} and {TransactionProcessed} events.\\n     */\\n    function burnItems(\\n        uint256 transactionId,\\n        uint256 deduplicationId,\\n        uint256 maxUsage,\\n        NFTItem[] calldata nftItems,\\n        IFeeDistributor.Fee[] calldata fees,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    /**\\n     * @dev Handles token burning within an NFT collection with a permit, i.e. it\\n     * it is required to provide a user's signatures to enable gasless transactions.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {TokensBurnt} and {TransactionProcessed} events.\\n     */\\n    function permitBurnItems(\\n        uint256 transactionId,\\n        uint256 deduplicationId,\\n        uint256 maxUsage,\\n        NFTItem[] calldata nftItems,\\n        IFeeDistributor.Fee[] calldata fees,\\n        Message calldata message,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to burn items.\\n     */\\n    function burnItemsHash(\\n        uint256 transactionId,\\n        uint256 deduplicationId,\\n        uint256 maxUsage,\\n        NFTItem[] calldata nftItems,\\n        IFeeDistributor.Fee[] calldata fees,\\n        address sender\\n    ) external pure returns (bytes32);\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to burn items with a permit.\\n     */\\n    function permitBurnItemsHash(\\n        uint256 transactionId,\\n        uint256 deduplicationId,\\n        uint256 maxUsage,\\n        NFTItem[] calldata nftItems,\\n        IFeeDistributor.Fee[] calldata fees,\\n        Message calldata message,\\n        address sender\\n    ) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport { INFTRegistry } from \\\"./INFTRegistry.sol\\\";\\nimport { INFTOperator } from \\\"./INFTOperator.sol\\\";\\n\\ninterface INFT is IERC721Upgradeable {\\n    /**\\n     * @dev Emitted when the address of an NFT registry contract is set.\\n     */\\n    event RegistrySet(INFTRegistry indexed registry);\\n\\n    /**\\n     * @dev Emitted when a disablement status of an NFT reigstry contract is changed.\\n     */\\n    event RegistryDisabled(bool indexed registryDisabled);\\n\\n    /**\\n     * @dev Emitted when the address of an NFT operator contract is set.\\n     */\\n    event OperatorSet(INFTOperator indexed operator);\\n\\n    /**\\n     * @dev Emitted when a default (collection wide) royalty percentage is set.\\n     */\\n    event DefaultRoyaltySet(address indexed receiver, uint96 feeNumerator);\\n\\n    /**\\n     * @dev Emitted when a token's royalty percentage is set.\\n     */\\n    event TokenRoyaltySet(uint256 indexed tokenId, address indexed receiver, uint96 feeNumerator);\\n\\n    /**\\n     * @dev Initializes a new NFT collection.\\n     */\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        INFTRegistry registry,\\n        INFTOperator operator\\n    ) external;\\n\\n    /**\\n     * @dev Sets the address of an NFT registry contract, which allows to whitelist\\n     * or blacklist token transfers.\\n     *\\n     * Emits an {RegistrySet} event.\\n     */\\n    function setRegistry(INFTRegistry registry) external;\\n\\n    /**\\n     * @dev Sets a disablement status for an NFT registry contract, which allows to\\n     * whitelist or blacklist token transfers.\\n     *\\n     * Emits an {RegistryDisabledSet} event.\\n     */\\n    function setRegistryDisabled(bool registryDisabled) external;\\n\\n    /**\\n     * @dev Sets the address of an NFT operator contract which is authorized to peform\\n     * preapproved token transfers.\\n     *\\n     * Emits an {OperatorSet} event.\\n     */\\n    function setOperator(INFTOperator operator) external;\\n\\n    /**\\n     * @dev Sets a default (collection wide) royalty percentage for a given receiver.\\n     *\\n     * Emits an {DefaultRoyaltySet} event.\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * @dev Sets a token's royalty percentage for a given receiver.\\n     *\\n     * Emits an {TokenRoyaltySet} event.\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * @dev Mints a token.\\n     *\\n     * Requirements:\\n     *\\n     * - A token can be solely minted by an NFT factory contract which owns this\\n     * contract.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function mint(uint256 tokenId, address receiver, string calldata tokenURI) external;\\n\\n    /**\\n     * @dev Transfers ownership from an NFT factory contract to a new owner.\\n     *\\n     * Emits an {OwnershipTransferred} event.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @dev Burns a token by the owner or a delegated account via the token approval\\n     * mechanism.\\n     *\\n     * WARNING: If a given token has a defined royalty percentage, it will be reset\\n     * to zero.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\ninterface INFTDeployer {\\n    /**\\n     * @dev Emitted when the address of a proxy admin contract is set.\\n     */\\n    event ProxyAdminSet(address indexed proxyAdmin);\\n\\n    /**\\n     * @dev Emitted when the address of an NFT registry contract is set.\\n     */\\n    event NFTRegistrySet(address indexed nftRegistry);\\n\\n    /**\\n     * @dev Emitted when the address of an NFT operator cotnract is set.\\n     */\\n    event NFTOperatorSet(address indexed nftOperator);\\n\\n    /**\\n     * @dev Emitted when a proxy contract for a given NFT collection is deployed.\\n     */\\n    event ProxyDeployed(address indexed proxy);\\n\\n    /**\\n     * @dev Emitted when an implementation contract for a given NFT collection is deployed.\\n     */\\n    event ImplementationDeployed(address indexed implementation);\\n\\n    /**\\n     * @dev The zero address of a proxy admin contract is given.\\n     */\\n    error ZeroProxyAdmin();\\n\\n    /**\\n     * @dev The zero address of an NFT registry contract is given.\\n     */\\n    error ZeroNFTRegistry();\\n\\n    /**\\n     * @dev The zero address of an NFT operator contract is given.\\n     */\\n    error ZeroNFTOperator();\\n\\n    /**\\n     * @dev Set the address of a proxy admin contract.\\n     *\\n     * Emits a {ProxyAdminSet} event.\\n     */\\n    function setProxyAdmin(address proxyAdmin) external;\\n\\n    /**\\n     * @dev Set the address of an NFT registry contract.\\n     *\\n     * Emits an {NFTRegistrySet} event.\\n     */\\n    function setNFTRegistry(address nftRegistry) external;\\n\\n    /**\\n     * @dev Set the address of an NFT operator contract.\\n     *\\n     * Emits an {NFTOperatorSet} event.\\n     */\\n    function setNFTOperator(address nftOperator) external;\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Deploys proxy and implementation contracts for a given NFT collection.\\n     *\\n     * WARNING: The proxy contract's ownership is transferred to a caller with\\n     * the deployer role, i.e. an NFT factory contract.\\n     *\\n     * Emits {ProxyDeployed} and {ImplementationDeployed} events.\\n     */\\n    function deploy(uint256 collectionId, string memory name, string memory symbol) external returns (address proxy);\\n\\n    /**\\n     * @dev Computes the address of a proxy contract for a given NFT collection.\\n     */\\n    function computeProxyAddress(\\n        uint256 collectionId,\\n        string memory name,\\n        string memory symbol\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Computes the address of an implementation contract for a given NFT\\n     * collection.\\n     */\\n    function computeImplementationAddress(\\n        uint256 collectionId,\\n        string memory name,\\n        string memory symbol\\n    ) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport { IFeeDistributor } from \\\"./IFeeDistributor.sol\\\";\\nimport { IRoyaltySplitter } from \\\"./IRoyaltySplitter.sol\\\";\\n\\ninterface INFTFactory {\\n    /**\\n     * @dev Defines parameters to create an NFT collection:\\n     *  - `transactionId` is an transaction identifier required to track it on\\n     *    the caller's side.\\n     *  - `collectionsId` is an NFT collection identifier required to track it on\\n     *    the caller's side.\\n     *  - `name` is an NFT collection name.\\n     *  - `symbol` is an NFT collection symbol.\\n     *  - `itemLimit` is the upper boundary for token mints within an NFT collection.\\n     *  - `royalites` is an optional list of royalties to be distributed between\\n     *    payees with their shares at the collection wide level.\\n     *  - `fees` is an optional list of fees to be distributed between payees.\\n     */\\n    struct CreateCollectionParams {\\n        uint256 transactionId;\\n        uint256 collectionId;\\n        string name;\\n        string symbol;\\n        uint256 itemLimit;\\n        IRoyaltySplitter.Royalty[] royalties;\\n        IFeeDistributor.Fee[] fees;\\n    }\\n\\n    /**\\n     * @dev Defines parameters to mint an item within an NFT collection:\\n     *  - `transactionId` is an transaction identifier required to track it on\\n     *    the caller's side.\\n     *  - `collectionsId` is a NFT collection identifier required to track it on\\n     *    the caller's side.\\n     *  - `deduplicationId` is deduplication group identifier used to define\\n     *    the upper boundary of token mints within an NFT collection.\\n     *  - `maxItemSupply` is the maximum item limit set for a certain deduplication\\n     *    group identifier.\\n     *  - `tokenId` is a token identifier generated on the caller's side.\\n     *  - `tokenReceiver` is an account which is intended to receive a token.\\n     *  - `tokenURI` is a token URI generated on the caller's side.\\n     *  - `deadline` is a timestamp when a request expires. It is required for pass\\n     *     claiming only and ignored during direct item minting\\n     *  - `royalites` is an optional list of royalties to be distributed between\\n     *    payees with their shares at the token level.\\n     *  - `fees` is an optional list of fees to be distributed between payees.\\n     */\\n    struct MintItemParams {\\n        uint256 transactionId;\\n        uint256 collectionId;\\n        uint256 deduplicationId;\\n        uint256 maxItemSupply;\\n        uint256 tokenId;\\n        address tokenReceiver;\\n        string tokenURI;\\n        uint256 deadline;\\n        IRoyaltySplitter.Royalty[] royalties;\\n        IFeeDistributor.Fee[] fees;\\n    }\\n\\n    /**\\n     * @dev Defines a registered NFT collection:\\n     *  - `nft` is the address of an NFT collection.\\n     *  - `itemLimit` is the upper boundary for token mints within an NFT collection.\\n     *  - `itemCount` is the current number of token mints within an NFT collection.\\n     */\\n    struct Collection {\\n        address nft;\\n        uint256 itemLimit;\\n        CountersUpgradeable.Counter itemCount;\\n    }\\n\\n    /**\\n     * @dev Emitted when some Ether amount received by the current contract.\\n     */\\n    event EtherReceived(address sender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the address of a verifier contract is set.\\n     */\\n    event VerifierSet(address indexed verifier);\\n\\n    /**\\n     * @dev Emitted when the address of an NFT deployer contract is set.\\n     */\\n    event NFTDeployerSet(address indexed nftDeployer);\\n\\n    /**\\n     * @dev Emitted when the default royalty for an NFT collection is set.\\n     */\\n    event NFTDefaultRoyaltySet(uint256 indexed collectionId, address receiver, uint96 feeNumerator);\\n\\n    /**\\n     * @dev Emitted when a token royalty for an NFT collection is set.\\n     */\\n    event NFTTokenRoyaltySet(\\n        uint256 indexed collectionId,\\n        uint256 indexed tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    );\\n\\n    /**\\n     * @dev Emitted when the address of a royalty splitter contract is set.\\n     */\\n    event RoyaltySplitterSet(address indexed royaltySplitter);\\n\\n    /**\\n     * @dev Emitted when the address of a fee distributor contract is set.\\n     */\\n    event FeeDistributorSet(address indexed feeDistributor);\\n\\n    /**\\n     * @dev Emitted when a disablement status of an whitelist/blacklist registry for\\n     * a registered NFT collection is set.\\n     */\\n    event NFTRegistryDisabled(uint256 indexed collectionId, bool registryDisabled);\\n\\n    /**\\n     * @dev Emitted when ownership of a registered NFT collection is transferred to\\n     * another account.\\n     */\\n    event NFTOwnershipTransferred(uint256 indexed collectionId, address newOwner);\\n\\n    /**\\n     * @dev Emitted when the upper boundary for token mints within an NFT collection\\n     * is set.\\n     */\\n    event MaxItemSupplySet(uint256 maxItemSupply);\\n\\n    /**\\n     * @dev Emitted when an NFT collection is deployed into a blockchain.\\n     */\\n    event CollectionCreated(uint256 indexed collectionId);\\n\\n    /**\\n     * @dev Emitted when a token is minted within an NFT collection.\\n     */\\n    event TokenMinted(uint256 indexed collectionId, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when either an NFT collection is created or a token within\\n     * an NFT collection is minted.\\n     */\\n    event TransactionProcessed(uint256 indexed transactionId);\\n\\n    /**\\n     * @dev The zero address of a verifier contract is given.\\n     */\\n    error ZeroVerifier();\\n\\n    /**\\n     * @dev The zero address of a NFT deployer contract is given.\\n     */\\n    error ZeroNFTDeployer();\\n\\n    /**\\n     * @dev The zero address of an royalty splitter contract is given.\\n     */\\n    error ZeroRoyaltySplitter();\\n\\n    /**\\n     * @dev The zero address of a fee distributor contract is given.\\n     */\\n    error ZeroFeeDistributor();\\n\\n    /**\\n     * @dev An NFT collection has been already registered in the current contract.\\n     */\\n    error CollectionExists(uint256 collectionId);\\n\\n    /**\\n     * @dev An NFT collection is not registred in the current contract.\\n     */\\n    error CollectionNotFound(uint256 collectionId);\\n\\n    /**\\n     * @dev The maximum number of token mints within an NFT collection exceeds\\n     * the allowed upper boundary.\\n     */\\n    error CollectionItemLimitExceeded(uint256 collectionId, uint256 currentItemCount);\\n\\n    /**\\n     * @dev The maximum number of token mints within a deduplication group identifier\\n     * exceeds the allowed upper boundary.\\n     */\\n    error ItemSupplyLimitExceeded(uint256 collectionId, uint256 deduplicationId, uint256 currentItemSupply);\\n\\n    /**\\n     * @dev Sets the address of a verifier contract, which allows to verify\\n     * signatures restricted to authorized callers only.\\n     *\\n     * Emits a {VerifierSet} event.\\n     */\\n    function setVerifier(address verifier) external;\\n\\n    /**\\n     * @dev Sets the address of a NFT deployer contract, which is responsible for\\n     * deployment of NFT collections into a blockchain.\\n     *\\n     * Emits an {NFTDeployerSet} event.\\n     */\\n    function setNFTDeployer(address nftDeployer) external;\\n\\n    /**\\n     * @dev Sets the address of a royalty splitter contract, which manages royalty\\n     * shares for created NFT collections and tokens related to them.\\n     *\\n     * Emits a {RoyaltySplitterSet} event.\\n     */\\n    function setRoyaltySplitter(address royaltySplitter) external;\\n\\n    /**\\n     * @dev Sets the address of a fee distributor contract, which handles any fee\\n     * transfers connected with NFT collection creation and a token mint.\\n     *\\n     * Emits a {FeeDistributorSet} event.\\n     */\\n    function setFeeDistributor(address feeDistributor) external;\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Sets the disablement status of a whitelist/blacklist registry in an NFT\\n     * collection registered in the current contract.\\n     *\\n     * Emits an {NFTRegistryDisabled} event.\\n     */\\n    function setNFTRegistryDisabled(uint256 collectionId, bool registryDisabled) external;\\n\\n    /**\\n     * @dev Sets the default royalty for a given NFT collection.\\n     *\\n     * Emits an {NFTDefaultRoyaltySet} event.\\n     */\\n    function setNFTDefaultRoyalty(uint256 collectionId, address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * @dev Sets the token royalty for a given NFT collection.\\n     *\\n     * Emits an {NFTTokenRoyaltySet} event.\\n     */\\n    function setNFTTokenRoyalty(uint256 collectionId, uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * @dev Transfers NFT collection's ownership from the current contract to a new\\n     * account.\\n     *\\n     * Emits an {NFTOwnershipTransferred} event.\\n     */\\n    function transferNFTOwnership(uint256 collectionId, address newOwner) external;\\n\\n    /**\\n     * @dev Deploys an upgradealbe NFT collection into a blockchain. The collection\\n     * is represented by proxy and implementation contracts.\\n     *\\n     * A caller might additionally pass a list of collection wide royalties with\\n     * payees and their shares. It causes creation a royalty fowrader contract bound\\n     * to a royalty splitter contract. See the {RoyaltyForwarder} and\\n     * {RoyaltySplitter} contracts for more detail.\\n     *\\n     * Also, a caller might additionally pass a list of fees, which are required to\\n     * be distributed between payees.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {CollectionCreated} and {TransactionProcessed} events.\\n     */\\n    function createCollection(CreateCollectionParams calldata params, bytes calldata signature) external payable;\\n\\n    /**\\n     * @dev Mints a token within a registered NFT collection.\\n     *\\n     * A caller might additionally pass a list of token specific royalties with\\n     * payees and their shares. It causes creation a royalty fowrader contract bound\\n     * to a royalty splitter contract. See the {RoyaltyForwarder} and\\n     * {RoyaltySplitter} contracts for more detail.\\n     *\\n     * Also, a caller might additionally pass a list of fees, which are required to\\n     * be distributed between payees.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {CollectionCreated} and {TransactionProcessed} events.\\n     */\\n    function mintItem(MintItemParams calldata params, bytes calldata signature) external payable;\\n\\n    /**\\n     * @dev Mints a token within a registered NFT collection by an authorized account\\n     * with the minter role.\\n     *\\n     * A caller might additionally pass a list of token specific royalties with\\n     * payees and their shares. It causes creation a royalty fowrader contract bound\\n     * to a royalty splitter contract. See the {RoyaltyForwarder} and\\n     * {RoyaltySplitter} contracts for more detail.\\n     *\\n     * Also, a caller might additionally pass a list of fees, which are required to\\n     * be distributed between payees.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {CollectionCreated} and {TransactionProcessed} events.\\n     */\\n    function mintItemUnsigned(MintItemParams calldata params) external payable;\\n\\n    /**\\n     * @dev Computes the address of an NFT collection address based on the Create2\\n     * opcode.\\n     */\\n    function computeCollectionAddress(\\n        uint256 collectionId,\\n        string memory name,\\n        string memory symbol\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to create an NFT collection.\\n     */\\n    function createCollectionHash(\\n        CreateCollectionParams calldata params,\\n        address sender\\n    ) external pure returns (bytes32);\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to mint a token inside\\n     * an NFT collection.\\n     */\\n    function mintItemHash(MintItemParams calldata params, address sender) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\ninterface INFTOperator {\\n    event TokenTransferred(address collection, uint256 tokenId, address from, address to);\\n\\n    event TokenBurnt(address collection, uint256 tokenId, address from);\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Performs a safe token transfer on behalf of this contract as a preapproved\\n     * entry point.\\n     *\\n     * Emits {TokenTransferred} event.\\n     */\\n    function safeTransfer(address collection, uint256 tokenId, address from, address to) external;\\n\\n    /**\\n     * @dev Performs a token burn on behalf of this contract as a preapproved entry\\n     * point.\\n     *\\n     * Emits a {TokenBurnt} event.\\n     */\\n    function burn(address collection, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Required interface of an Registry compliant contract.\\n */\\ninterface INFTRegistry {\\n    /**\\n     * @dev Emitted when address trying to transfer is not allowed on the registry\\n     */\\n    error TransferNotAllowed(address from, address to, uint256 tokenId);\\n\\n    /**\\n     * @dev Checks whether `operator` is valid on the registry; let the registry\\n     * decide across both allow and blocklists.\\n     */\\n    function isAllowedOperator(address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPassClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport { INFTFactory } from \\\"./INFTFactory.sol\\\";\\n\\ninterface IPassClaim {\\n    /**\\n     * @dev Defines data required to check given NFT Items.\\n     *  - `collection` is the address of an NFT collection.\\n     *  - `tokenId` is the token identifier within this NFT collection.\\n     *  - `deduplicationId` is the deduplication group identifier used to check\\n     *     maximum usage of a given token.\\n     *  - `maxUsage` is the maximum usage allowed for a given token.\\n     */\\n    struct NFTItem {\\n        address collection;\\n        uint256 tokenId;\\n        uint256 deduplicationId;\\n        uint256 maxUsage;\\n    }\\n\\n    /**\\n     * @dev Emitted when some Ether amount received by the current contract.\\n     */\\n    event EtherReceived(address sender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the address of a verifier contract is set.\\n     */\\n    event VerifierSet(address indexed verifier);\\n\\n    /**\\n     * @dev Emitted when the address of an NFT contract is set.\\n     */\\n    event NFTFactorySet(address indexed nftFactory);\\n\\n    /**\\n     * @dev Emitted when the address of an hot wallet contract is set. The address is\\n     * allowed to be zero.\\n     */\\n    event HotWalletSet(address indexed hotWallet);\\n\\n    /**\\n     * @dev Emitted when an allowed range of NFT items is set.\\n     */\\n    event NFTItemRangeSet(uint8[2] nftItemRange);\\n\\n    /**\\n     * @dev Emitted when item usage for given deduplication group identifiers within\\n     * an NFT collection.\\n     */\\n    event ItemUsagesReset(address indexed collection, uint256 deduplicationIdCount);\\n\\n    /**\\n     * @dev Emitted when an item is minted.\\n     */\\n    event ItemMinted(\\n        uint256 indexed transactionId,\\n        uint256 indexed collectionId,\\n        uint256 deduplicationId,\\n        uint256 maxItemSupply,\\n        uint256 tokenId,\\n        address tokenReceiver\\n    );\\n\\n    /**\\n     * @dev The zero address of a verifier contract is given.\\n     */\\n    error ZeroVerifier();\\n\\n    /**\\n     * @dev Emitted when the address of a NFT contract is set.\\n     */\\n    error ZeroNFTFactory();\\n\\n    /**\\n     * @dev The item count is out of an allowed range.\\n     */\\n    error NFTItemRangeMissed(uint8[2] nftItemRange, uint256 currentNFTItemCount);\\n\\n    /**\\n     * @dev The lower boundary of an item range is greater than the upper one.\\n     */\\n    error InconsistentNFTItemRange(uint8[2] nftItemRange);\\n\\n    /**\\n     * @dev A request dealine exceeds the current block timestamp.\\n     */\\n    error DeadlineExceeded(uint256 currentTimestamp, uint256 deadline);\\n\\n    /**\\n     * @dev The upper boundary for token burns within a certain deduplication group\\n     * identifier is reached.\\n     */\\n    error MaxItemUsageReached(address collection, uint256 deduplicationId, uint256 currentUsage);\\n\\n    /**\\n     * @dev The sender is not the owner of a given token.\\n     */\\n    error InvalidNFTOwner(address collection, uint256 tokenId, address sender);\\n\\n    /**\\n     * @dev Sets the address of a verifier contract, which allows to verify\\n     * signatures restricted to authorized callers only.\\n     *\\n     * Emits a {VerifierSet} event.\\n     */\\n    function setVerifier(address verifier) external;\\n\\n    /**\\n     * @dev Sets the address of an NFT factory contract, which produces NFT passes.\\n     *\\n     * Emits a {NFTFactorySet} event.\\n     */\\n    function setNFTFactory(address nftFactory) external;\\n\\n    /**\\n     * @dev Sets the address of an external hot wallet contract, which used to check\\n     * NFT's ownership.\\n     *\\n     * Emits a {HotWalletSet} event.\\n     */\\n    function setHotWallet(address hotWallet) external;\\n\\n    /**\\n     * @dev Sets an allowed range of tokens to be checked.\\n     *\\n     * Emits an {NFTItemRangeSet} event.\\n     */\\n    function setNFTItemRange(uint8[2] calldata nftItemRange) external;\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Handles item (NFT pass) minting over an NFT factory contract.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits an {ItemMinted} event.\\n     */\\n    function mintItem(\\n        NFTItem[] calldata nftItems,\\n        INFTFactory.MintItemParams calldata params,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    /**\\n     * @dev Resets item usage for given deduplication group identifiers within\\n     * an NFT collection.\\n     *\\n     * Emits an {ItemUsagesReset} event.\\n     */\\n    function resetItemUsages(address collection, uint256[] calldata deduplicationIds) external;\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to mint an item.\\n     */\\n    function mintItemHash(\\n        NFTItem[] calldata nftItems,\\n        INFTFactory.MintItemParams calldata params,\\n        address sender\\n    ) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltySplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\ninterface IRoyaltySplitter {\\n    /**\\n     * @dev Royalty data passed for registration in the contract.\\n     *\\n     * Required fields:\\n     *\\n     * - `payee` is an account that should receive Ether or ERC20 royalty amount.\\n     * - `share` is a share from a list of all registered royalty payees for a given\\n     *    collection or for a non fungible token.\\n     */\\n    struct Royalty {\\n        address payable payee;\\n        uint96 share;\\n    }\\n\\n    /**\\n     * @dev Royalty information about royalty payees and their total shares stored\\n     * in the contract.\\n     *\\n     * Required fields:\\n     *\\n     * - `royalties` is a list of royalties.\\n     * - `totalShares` is the total share of all registered royalty payees.\\n     */\\n    struct RoyaltyInfo {\\n        Royalty[] royalties;\\n        uint96 totalShares;\\n    }\\n\\n    /**\\n     * @dev Emitted when collection wide royalty information is registered in\\n     * the contract and when a royalty forwarder contract is deployed into\\n     * the blockchain.\\n     */\\n    event CollectionRoyaltyRegistered(address indexed forwarder, address indexed collection, uint256 totalShares);\\n\\n    /**\\n     * @dev Emitted when a token royalty information is registered in the contract\\n     * and when a royalty forwarder contract is deployed into\\n     * the blockchain.\\n     */\\n    event TokenRoyaltyRegistered(\\n        address indexed forwarder,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 totalShares\\n    );\\n\\n    /**\\n     * @dev Emitted when Ether royalty amounts are transferred to royalty payees\\n     * according to their shares.\\n     */\\n    event EtherRoyaltyReleased(address indexed forwarder, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when ERC20 royalty amounts are transferred to royalty payees\\n     * according to their shares.\\n     */\\n    event ERC20RoyaltyReleased(address indexed forwarder, address indexed token, uint256 amount);\\n\\n    /**\\n     * @dev No royalty data is passed to be registered in the contract.\\n     */\\n    error NoRoyaltiesFound();\\n\\n    /**\\n     * @dev The zero payee address passed in royalty data to be registered in\\n     * the contract.\\n     */\\n    error ZeroRoyaltyPayee();\\n\\n    /**\\n     * @dev The zero payee share passed in royalty data to be registered in\\n     * the contract.\\n     */\\n    error ZeroRoyaltyShare();\\n\\n    /**\\n     * @dev The zero royalty amount is passed during a royalty release.\\n     */\\n    error ZeroRoyaltyAmount();\\n\\n    /**\\n     * @dev A royalty payee has been already set from a passed list of royalties.\\n     */\\n    error RoyaltyPayeeIsSet(address roayltyPayee);\\n\\n    /**\\n     * @dev No registered royalty information is found in the contract during\\n     * a royalty release.\\n     */\\n    error NoRoyaltyInfoRegistered(address forwarder);\\n\\n    /**\\n     * @dev Registers royalty shares for an NFT collection in this contract and\\n     * deploys a related royalty forwarder contract into a blockchain.\\n     *\\n     * Emits a {CollectionRoyltyRegistered} event.\\n     */\\n    function registerCollectionRoyalty(\\n        address collection,\\n        Royalty[] calldata royalties\\n    ) external returns (address, uint96);\\n\\n    /**\\n     * @dev Registers royalty shares for a given non fungible token in this contract\\n     *and deploys a related royalty forwarder contract into a blockchain.\\n     *\\n     * Emits a {TokenRoyltyRegistered} event.\\n     */\\n    function registerTokenRoyalty(\\n        address collection,\\n        uint256 tokenId,\\n        Royalty[] calldata royalties\\n    ) external returns (address royaltyForwarder, uint96 totalShares);\\n\\n    /**\\n     * @dev Transfers Ether royalty amounts to royalty payees according to their shares.\\n     *\\n     * WARNING: The royalty contract should explicitly regitster a royalty forwarder\\n     * contract, otherwise a transaction will be reverted.\\n     *\\n     * If a release amount is negligible, a royalty payee with a low share might have\\n     * the zero Ether amount distributed consequently.\\n     *\\n     * Emits a {EtherRoyaltyReleased} event.\\n     */\\n    function releaseRoyalty() external payable;\\n\\n    /**\\n     * @dev Transfers ERC20 royalty amounts to royalty payees according to their shares.\\n     *\\n     * WARNING: The royalty contract should explicitly regitster a royalty forwarder\\n     * contract, otherwise a transaction will be reverted.\\n     *\\n     * If a release amount is negligible, a royalty payee with a low share might have\\n     * the zero ERC20 token amount distributed consequently.\\n     *\\n     * Emits a {ERC20RoyaltyReleased} event.\\n     */\\n    function releaseRoyalty(address token, uint256 amount) external;\\n\\n    /**\\n     * @dev Computes the address of a royalty forwarder contract, which should accept\\n     * collection wide royalties.\\n     */\\n    function computeCollectionRoyaltyForwarderAddress(address collection) external view returns (address);\\n\\n    /**\\n     * @dev Computes the address of a royalty forwarder contract, which should accept\\n     * token royalties.\\n     */\\n    function computeTokenRoyaltyForwarderAddress(address collection, uint256 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\ninterface IVerifier {\\n    /**\\n     * @dev Emitted when the signer's address is added to the contract's storage.\\n     */\\n    event SignerAdded(address indexed signer);\\n\\n    /**\\n     * @dev Emitted when the signer's address is removed from the contract's storage.\\n     */\\n    event SignerRemoved(address indexed signer);\\n\\n    /**\\n     * @dev Emitted when the signer's address is recovered from the provided hash and signature.\\n     */\\n    event SignerRecovered(address indexed signer);\\n\\n    /**\\n     * @dev A given hash signer is not verified based on the provided signature.\\n     */\\n    error SignerNotVerified(bytes32 hash, bytes signature);\\n\\n    /**\\n     * @dev A signed hash has been already saved in the contract's storage.\\n     */\\n    error SignedHashAlreadyApplied(bytes32 hash);\\n\\n    /**\\n     * @dev Recovers a signer's address from a provided `hash` and `singature`.\\n     *\\n     * Requirements:\\n     *\\n     * - the `hash` can be used only once for each successful recovery\\n     *\\n     * WARNING: This check requires a client to send a transaction, as it requires\\n     * to write a checked hash into the contract's storage.\\n     *\\n     * Emits a `SignerRecovered` event.\\n     */\\n    function recoverSigner(bytes32 hash, bytes memory signature) external returns (address);\\n\\n    /**\\n     * @dev Verifies if a given hash signed by an authorized signer.\\n     */\\n    function verifySigner(bytes32 hash, bytes memory signature) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a given hash has been already applied.\\n     */\\n    function signedHashApplied(bytes32 hash) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ParamEncoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport { IFeeDistributor } from \\\"../interfaces/IFeeDistributor.sol\\\";\\nimport { IRoyaltySplitter } from \\\"../interfaces/IRoyaltySplitter.sol\\\";\\nimport { IPassClaim } from \\\"../interfaces/IPassClaim.sol\\\";\\nimport { IIncinerator } from \\\"../interfaces/IIncinerator.sol\\\";\\n\\nlibrary ParamEncoder {\\n    function encodeFees(IFeeDistributor.Fee[] calldata fees) internal pure returns (bytes memory encodedFees) {\\n        uint256 feeCount = fees.length;\\n        for (uint256 i = 0; i < feeCount; ) {\\n            IFeeDistributor.Fee calldata fee = fees[i];\\n            encodedFees = bytes.concat(encodedFees, abi.encode(fee.payee, fee.token, fee.amount));\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function encodeRoyalty(\\n        IRoyaltySplitter.Royalty[] calldata royalties\\n    ) internal pure returns (bytes memory encodedRoyalties) {\\n        uint256 royaltyCount = royalties.length;\\n        for (uint256 i = 0; i < royaltyCount; ) {\\n            IRoyaltySplitter.Royalty calldata royalty = royalties[i];\\n            encodedRoyalties = bytes.concat(encodedRoyalties, abi.encode(royalty.payee, royalty.share));\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function encodeNFTItems(\\n        IPassClaim.NFTItem[] calldata nftItems\\n    ) internal pure returns (bytes memory encodedNFTItems) {\\n        uint256 nftItemCount = nftItems.length;\\n        for (uint256 i = 0; i < nftItemCount; ) {\\n            IPassClaim.NFTItem calldata nftItem = nftItems[i];\\n            bytes.concat(\\n                encodedNFTItems,\\n                abi.encode(nftItem.collection, nftItem.tokenId, nftItem.deduplicationId, nftItem.maxUsage)\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function encodeNFTItems(\\n        IIncinerator.NFTItem[] calldata nftItems\\n    ) internal pure returns (bytes memory encodedNFTItems) {\\n        uint256 nftItemCount = nftItems.length;\\n        for (uint256 i = 0; i < nftItemCount; ) {\\n            IIncinerator.NFTItem calldata nftItem = nftItems[i];\\n            bytes.concat(encodedNFTItems, abi.encode(nftItem.collection, nftItem.tokenId));\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { PullPaymentUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\\\";\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { INFTFactory } from \\\"./interfaces/INFTFactory.sol\\\";\\nimport { IRoyaltySplitter } from \\\"./interfaces/IRoyaltySplitter.sol\\\";\\nimport { IFeeDistributor } from \\\"./interfaces/IFeeDistributor.sol\\\";\\nimport { INFT } from \\\"./interfaces/INFT.sol\\\";\\nimport { INFTDeployer } from \\\"./interfaces/INFTDeployer.sol\\\";\\nimport { ParamEncoder } from \\\"./libraries/ParamEncoder.sol\\\";\\n\\n/**\\n * @dev This contract is responsible for creation of NFT collections and mints tokens\\n * for them.\\n *\\n * The contracts is the owner of all created NFT collections. This NFT ownership can\\n * be transferred to another account.\\n */\\ncontract NFTFactory is\\n    INFTFactory,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PullPaymentUpgradeable\\n{\\n    using AddressUpgradeable for address payable;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant VERSION = \\\"1.4.1\\\";\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant NFT_MANAGER_ROLE = keccak256(\\\"NFT_MANAGER_ROLE\\\");\\n\\n    IVerifier public verifier;\\n    uint8 private _reserved1;\\n    bytes32 private _reserved2;\\n    mapping(uint256 collectionId => Collection) public collections;\\n    // slither-disable-next-line uninitialized-state\\n    mapping(uint256 collectionId => mapping(uint256 deduplicationId => CountersUpgradeable.Counter itemSupply))\\n        public itemSupplies;\\n    INFTDeployer public nftDeployer;\\n    IRoyaltySplitter public royaltySplitter;\\n    IFeeDistributor public feeDistributor;\\n    address private _reserved3;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address verifier_,\\n        address nftDeployer_,\\n        address royaltySplitter_,\\n        address feeDistributor_\\n    ) external initializer {\\n        AccessControlUpgradeable.__AccessControl_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n        PullPaymentUpgradeable.__PullPayment_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        if (verifier_ == address(0)) {\\n            revert ZeroVerifier();\\n        }\\n        verifier = IVerifier(verifier_);\\n\\n        if (nftDeployer_ == address(0)) {\\n            revert ZeroNFTDeployer();\\n        }\\n        nftDeployer = INFTDeployer(nftDeployer_);\\n\\n        if (royaltySplitter_ == address(0)) {\\n            revert ZeroRoyaltySplitter();\\n        }\\n        royaltySplitter = IRoyaltySplitter(royaltySplitter_);\\n\\n        if (feeDistributor_ == address(0)) {\\n            revert ZeroFeeDistributor();\\n        }\\n        feeDistributor = IFeeDistributor(feeDistributor_);\\n    }\\n\\n    receive() external payable {\\n        _asyncTransfer(msg.sender, msg.value);\\n        emit EtherReceived(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @dev Sets the address of a verifier contract, which allows to verify\\n     * signatures restricted to authorized callers only.\\n     *\\n     * Emits a {VerifierSet} event.\\n     */\\n    function setVerifier(address verifier_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (verifier_ == address(0)) {\\n            revert ZeroVerifier();\\n        }\\n\\n        verifier = IVerifier(verifier_);\\n        emit VerifierSet(verifier_);\\n    }\\n\\n    /**\\n     * @dev Sets the address of a NFT deployer contract, which is responsible for\\n     * deployment of NFT collections into a blockchain.\\n     *\\n     * Emits an {NFTDeployerSet} event.\\n     */\\n    function setNFTDeployer(address nftDeployer_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (nftDeployer_ == address(0)) {\\n            revert ZeroNFTDeployer();\\n        }\\n\\n        nftDeployer = INFTDeployer(nftDeployer_);\\n        emit NFTDeployerSet(nftDeployer_);\\n    }\\n\\n    /**\\n     * @dev Sets the address of a royalty splitter contract, which manages royalty\\n     * shares for created NFT collections and tokens related to them.\\n     *\\n     * Emits a {RoyaltySplitterSet} event.\\n     */\\n    function setRoyaltySplitter(address royaltySplitter_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (royaltySplitter_ == address(0)) {\\n            revert ZeroRoyaltySplitter();\\n        }\\n\\n        royaltySplitter = IRoyaltySplitter(royaltySplitter_);\\n        emit RoyaltySplitterSet(royaltySplitter_);\\n    }\\n\\n    /**\\n     * @dev Sets the address of a fee distributor contract, which handles any fee\\n     * transfers connected with NFT collection creation and a token mint.\\n     *\\n     * Emits a {FeeDistributorSet} event.\\n     */\\n    function setFeeDistributor(address feeDistributor_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (feeDistributor_ == address(0)) {\\n            revert ZeroFeeDistributor();\\n        }\\n\\n        feeDistributor = IFeeDistributor(feeDistributor_);\\n        emit FeeDistributorSet(feeDistributor_);\\n    }\\n\\n    /**\\n     * @dev Pauses the current contract, e.g. in case of an emergency.\\n     *\\n     * Emits a {Paused} event.\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the current contract.\\n     *\\n     * Emits an {Unpaused} event.\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Sets the disablement status of a whitelist/blacklist registry in an NFT\\n     * collection registered in the current contract.\\n     *\\n     * Emits an {NFTRegistryDisabled} event.\\n     */\\n    function setNFTRegistryDisabled(uint256 collectionId, bool registryDisabled) external onlyRole(NFT_MANAGER_ROLE) {\\n        address nft = collections[collectionId].nft;\\n        emit NFTRegistryDisabled(collectionId, registryDisabled);\\n        INFT(nft).setRegistryDisabled(registryDisabled);\\n    }\\n\\n    /**\\n     * @dev Sets the default royalty for a given NFT collection.\\n     *\\n     * Emits an {NFTDefaultRoyaltySet} event.\\n     */\\n    function setNFTDefaultRoyalty(\\n        uint256 collectionId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(NFT_MANAGER_ROLE) {\\n        address nft = collections[collectionId].nft;\\n        emit NFTDefaultRoyaltySet(collectionId, receiver, feeNumerator);\\n        INFT(nft).setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Sets the token royalty for a given NFT collection.\\n     *\\n     * Emits an {NFTTokenRoyaltySet} event.\\n     */\\n    function setNFTTokenRoyalty(\\n        uint256 collectionId,\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(NFT_MANAGER_ROLE) {\\n        address nft = collections[collectionId].nft;\\n        emit NFTTokenRoyaltySet(collectionId, tokenId, receiver, feeNumerator);\\n        INFT(nft).setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Transfers NFT collection's ownership from the current contract to a new\\n     * account.\\n     *\\n     * Emits an {NFTOwnershipTransferred} event.\\n     */\\n    function transferNFTOwnership(uint256 collectionId, address newOwner) external onlyRole(NFT_MANAGER_ROLE) {\\n        address nft = collections[collectionId].nft;\\n        emit NFTOwnershipTransferred(collectionId, newOwner);\\n        INFT(nft).transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Deploys an upgradealbe NFT collection into a blockchain. The collection\\n     * is represented by proxy and implementation contracts.\\n     *\\n     * A caller might additionally pass a list of collection wide royalties with\\n     * payees and their shares. It causes creation a royalty fowrader contract bound\\n     * to a royalty splitter contract. See the {RoyaltyForwarder} and\\n     * {RoyaltySplitter} contracts for more detail.\\n     *\\n     * Also, a caller might additionally pass a list of fees, which are required to\\n     * be distributed between payees.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {CollectionCreated} and {TransactionProcessed} events.\\n     */\\n    function createCollection(\\n        CreateCollectionParams calldata params,\\n        bytes calldata signature\\n    ) external payable nonReentrant whenNotPaused {\\n        bytes32 hash = _createCollectionHash(params, msg.sender);\\n        bool verified = verifier.verifySigner(hash, signature);\\n        if (!verified) {\\n            revert IVerifier.SignerNotVerified(hash, signature);\\n        }\\n\\n        _createCollection(params);\\n    }\\n\\n    /**\\n     * @dev Mints a token within a registered NFT collection.\\n     *\\n     * A caller might additionally pass a list of token specific royalties with\\n     * payees and their shares. It causes creation a royalty fowrader contract bound\\n     * to a royalty splitter contract. See the {RoyaltyForwarder} and\\n     * {RoyaltySplitter} contracts for more detail.\\n     *\\n     * Also, a caller might additionally pass a list of fees, which are required to\\n     * be distributed between payees.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {CollectionCreated} and {TransactionProcessed} events.\\n     */\\n    function mintItem(\\n        MintItemParams calldata params,\\n        bytes calldata signature\\n    ) external payable nonReentrant whenNotPaused {\\n        bytes32 hash = _mintItemHash(params, msg.sender);\\n        bool verified = verifier.verifySigner(hash, signature);\\n        if (!verified) {\\n            revert IVerifier.SignerNotVerified(hash, signature);\\n        }\\n\\n        _mintItem(params);\\n    }\\n\\n    /**\\n     * @dev Mints a token within a registered NFT collection by an authorized account\\n     * with the minter role.\\n     *\\n     * A caller might additionally pass a list of token specific royalties with\\n     * payees and their shares. It causes creation a royalty fowrader contract bound\\n     * to a royalty splitter contract. See the {RoyaltyForwarder} and\\n     * {RoyaltySplitter} contracts for more detail.\\n     *\\n     * Also, a caller might additionally pass a list of fees, which are required to\\n     * be distributed between payees.\\n     *\\n     * Requirements:\\n     *\\n     * - Before calling this method, it is required to generate a hash from the hash\\n     *   getter with corresponding parameters and sign it by an authorized caller\\n     *   registerd at the {Verifier} contract.\\n     *\\n     * Emits {CollectionCreated} and {TransactionProcessed} events.\\n     */\\n    function mintItemUnsigned(\\n        MintItemParams calldata params\\n    ) external payable nonReentrant whenNotPaused onlyRole(MINTER_ROLE) {\\n        _mintItem(params);\\n    }\\n\\n    /**\\n     * @dev Computes the address of an NFT collection address based on the Create2\\n     * opcode.\\n     */\\n    function computeCollectionAddress(\\n        uint256 collectionId,\\n        string memory name,\\n        string memory symbol\\n    ) external view returns (address) {\\n        return nftDeployer.computeProxyAddress(collectionId, name, symbol);\\n    }\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to create an NFT collection.\\n     */\\n    function createCollectionHash(\\n        CreateCollectionParams calldata params,\\n        address sender\\n    ) external pure returns (bytes32) {\\n        return _createCollectionHash(params, sender);\\n    }\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to mint a token inside\\n     * an NFT collection.\\n     */\\n    function mintItemHash(MintItemParams calldata params, address sender) external pure returns (bytes32) {\\n        return _mintItemHash(params, sender);\\n    }\\n\\n    /**\\n     * @dev Deploys an upgradealbe NFT collection into a blockchain.\\n     *\\n     * See the {createCollection} method for more details.\\n     */\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _createCollection(CreateCollectionParams calldata params) private {\\n        uint256 collectionId = params.collectionId;\\n        if (collections[collectionId].nft != address(0)) {\\n            revert CollectionExists(collectionId);\\n        }\\n\\n        address nftProxy = nftDeployer.deploy(collectionId, params.name, params.symbol);\\n\\n        collections[collectionId] = Collection({\\n            nft: address(nftProxy),\\n            itemLimit: params.itemLimit,\\n            itemCount: CountersUpgradeable.Counter(0)\\n        });\\n\\n        if (params.royalties.length > 0) {\\n            (address royaltyForwarder, uint96 totalShares) = royaltySplitter.registerCollectionRoyalty(\\n                nftProxy,\\n                params.royalties\\n            );\\n            INFT(nftProxy).setDefaultRoyalty(royaltyForwarder, totalShares);\\n        }\\n\\n        if (params.fees.length > 0) {\\n            feeDistributor.distributeFees{ value: msg.value }(params.fees);\\n        }\\n\\n        emit CollectionCreated(params.collectionId);\\n        emit TransactionProcessed(params.transactionId);\\n    }\\n\\n    /**\\n     * @dev Mints a token within a registered NFT collection and sets the upper\\n     * boundary for token mints within a certain deduplication group identifier.\\n     *\\n     * See the {mintItem} and {_setItemSupply} methods for more details.\\n     */\\n    function _mintItem(MintItemParams calldata params) private {\\n        _setItemSupply(params.collectionId, params.deduplicationId, params.maxItemSupply);\\n        _mintToken(params.collectionId, params.tokenId, params.tokenReceiver, params.tokenURI, params.royalties);\\n\\n        if (params.fees.length > 0) {\\n            feeDistributor.distributeFees{ value: msg.value }(params.fees);\\n        }\\n\\n        emit TokenMinted(params.collectionId, params.tokenId);\\n        emit TransactionProcessed(params.transactionId);\\n    }\\n\\n    /**\\n     * @dev Checks the upper boundary for token mints within a certain deduplication\\n     * group identifier.\\n     */\\n    function _setItemSupply(uint256 collectionId, uint256 deduplicationId, uint256 maxItemSupply) private {\\n        CountersUpgradeable.Counter storage itemSupply = itemSupplies[collectionId][deduplicationId];\\n        if (maxItemSupply != 0 && itemSupply.current() >= maxItemSupply) {\\n            revert ItemSupplyLimitExceeded(collectionId, deduplicationId, itemSupply.current());\\n        }\\n\\n        itemSupply.increment();\\n    }\\n\\n    /**\\n     * @dev Mints a token within a registered NFT collection.\\n     *\\n     * See the {mintItem} method for more details.\\n     */\\n    function _mintToken(\\n        uint256 collectionId,\\n        uint256 tokenId,\\n        address tokenReceiver,\\n        string calldata tokenURI,\\n        IRoyaltySplitter.Royalty[] calldata royalties\\n    ) private {\\n        Collection storage collection = collections[collectionId];\\n        if (collection.nft == address(0)) {\\n            revert CollectionNotFound(collectionId);\\n        }\\n        if (collection.itemLimit != 0 && collection.itemCount.current() >= collection.itemLimit) {\\n            revert CollectionItemLimitExceeded(collectionId, collection.itemCount.current());\\n        }\\n\\n        collection.itemCount.increment();\\n\\n        INFT nft = INFT(collection.nft);\\n        nft.mint(tokenId, tokenReceiver, tokenURI);\\n\\n        if (royalties.length > 0) {\\n            (address royaltyForwarder, uint96 totalShares) = royaltySplitter.registerTokenRoyalty(\\n                collection.nft,\\n                tokenId,\\n                royalties\\n            );\\n            nft.setTokenRoyalty(tokenId, royaltyForwarder, totalShares);\\n        }\\n    }\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to create an NFT collection.\\n     */\\n    function _createCollectionHash(\\n        CreateCollectionParams calldata params,\\n        address sender\\n    ) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    params.transactionId,\\n                    params.collectionId,\\n                    params.name,\\n                    params.symbol,\\n                    params.itemLimit,\\n                    ParamEncoder.encodeFees(params.fees),\\n                    sender\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a hash in order to call the method to mint a token inside\\n     * an NFT collection.\\n     */\\n    function _mintItemHash(MintItemParams calldata params, address sender) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    params.transactionId,\\n                    params.collectionId,\\n                    params.tokenReceiver,\\n                    params.tokenId,\\n                    params.tokenURI,\\n                    params.deduplicationId,\\n                    params.maxItemSupply,\\n                    ParamEncoder.encodeRoyalty(params.royalties),\\n                    ParamEncoder.encodeFees(params.fees),\\n                    sender\\n                )\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"CollectionExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentItemCount\",\"type\":\"uint256\"}],\"name\":\"CollectionItemLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"CollectionNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduplicationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentItemSupply\",\"type\":\"uint256\"}],\"name\":\"ItemSupplyLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignerNotVerified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFeeDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroNFTDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRoyaltySplitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroVerifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"}],\"name\":\"FeeDistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxItemSupply\",\"type\":\"uint256\"}],\"name\":\"MaxItemSupplySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"NFTDefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftDeployer\",\"type\":\"address\"}],\"name\":\"NFTDeployerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NFTOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"registryDisabled\",\"type\":\"bool\"}],\"name\":\"NFTRegistryDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"NFTTokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltySplitter\",\"type\":\"address\"}],\"name\":\"RoyaltySplitterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct CountersUpgradeable.Counter\",\"name\":\"itemCount\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"computeCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"itemLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct IRoyaltySplitter.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistributor.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct INFTFactory.CreateCollectionParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"itemLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct IRoyaltySplitter.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistributor.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct INFTFactory.CreateCollectionParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"createCollectionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftDeployer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltySplitter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistributor_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduplicationId\",\"type\":\"uint256\"}],\"name\":\"itemSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduplicationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxItemSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct IRoyaltySplitter.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistributor.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct INFTFactory.MintItemParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduplicationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxItemSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct IRoyaltySplitter.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistributor.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct INFTFactory.MintItemParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"mintItemHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduplicationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxItemSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct IRoyaltySplitter.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistributor.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct INFTFactory.MintItemParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mintItemUnsigned\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftDeployer\",\"outputs\":[{\"internalType\":\"contract INFTDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltySplitter\",\"outputs\":[{\"internalType\":\"contract IRoyaltySplitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeDistributor_\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setNFTDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftDeployer_\",\"type\":\"address\"}],\"name\":\"setNFTDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registryDisabled\",\"type\":\"bool\"}],\"name\":\"setNFTRegistryDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setNFTTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltySplitter_\",\"type\":\"address\"}],\"name\":\"setRoyaltySplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier_\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferNFTOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}