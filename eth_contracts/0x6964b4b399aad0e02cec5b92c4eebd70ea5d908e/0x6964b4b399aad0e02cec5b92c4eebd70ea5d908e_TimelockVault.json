{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TimelockVault {\r\n    address public owner;\r\n    uint256 public unlockTime;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterUnlock() {\r\n        require(block.timestamp >= unlockTime, \"Funds are locked\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner, uint256 _unlockTime) {\r\n        owner = _owner;\r\n        unlockTime = _unlockTime;\r\n    }\r\n\r\n    function depositEther() external payable {\r\n        // Ether is automatically deposited to the contract\r\n    }\r\n\r\n    function depositToken(address tokenAddress, uint256 amount) external {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawEther(uint256 amount) external onlyOwner onlyAfterUnlock {\r\n        require(address(this).balance >= amount, \"Insufficient balance\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress, uint256 amount) external onlyOwner onlyAfterUnlock {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n        require(token.transfer(owner, amount), \"Token transfer failed\");\r\n    }\r\n\r\n    // Fallback function to receive Ether\r\n    receive() external payable {}\r\n\r\n    // Function to check if the contract is currently locked\r\n    function isLocked() external view returns (bool) {\r\n        return block.timestamp < unlockTime;\r\n    }\r\n\r\n    // Function to check the number of seconds until the contract unlocks\r\n    function timeUntilUnlock() external view returns (uint256) {\r\n        if (block.timestamp >= unlockTime) {\r\n            return 0;\r\n        } else {\r\n            return unlockTime - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // Function to update the unlock time if the contract is already unlocked\r\n    function updateUnlockTime(uint256 newUnlockTime) external onlyOwner {\r\n        require(block.timestamp >= unlockTime, \"Cannot update unlock time until the current unlock period has passed\");\r\n        unlockTime = newUnlockTime;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newUnlockTime\",\"type\":\"uint256\"}],\"name\":\"updateUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TimelockVault", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000915a44614d53482af7f4cddcde08b969868d5c4c0000000000000000000000000000000000000000000000000000000066d4f1f0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3f5c3e91cd3a3acc1e792eb3c9878f6be431bc1bc2e60009d5e384d6b29e84f7"}