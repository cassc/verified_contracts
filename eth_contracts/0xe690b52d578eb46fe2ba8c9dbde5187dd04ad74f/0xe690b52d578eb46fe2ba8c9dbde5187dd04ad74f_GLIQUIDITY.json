{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"GLIQUID.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT \\r\\n//    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588        \u2584\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2588\u2588\u2588    \u2588\u2584   \u2584\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \\r\\n//   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \\r\\n//   \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588       \u2588\u2588\u2588\u258c \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c \u2588\u2588\u2588    \u2588\u2588\u2588 \\r\\n//  \u2584\u2588\u2588\u2588        \u2588\u2588\u2588       \u2588\u2588\u2588\u258c \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c \u2588\u2588\u2588    \u2588\u2588\u2588 \\r\\n// \u2580\u2580\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588       \u2588\u2588\u2588\u258c \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c \u2588\u2588\u2588    \u2588\u2588\u2588 \\r\\n//   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \\r\\n//   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584 \u2588\u2588\u2588  \u2588\u2588\u2588  \u2580 \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \\r\\n//   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588 \u2588\u2580    \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2584\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \\r\\n//              \u2580                                                     \\r\\n// https://t.me/glitchproto\\r\\n// https://twitter.com/protocolglitch\\r\\n// https://discord.gg/jyehnJHW9q\\r\\n// GLIQUID Token for the GLITCH Protocol\\r\\n//\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"./GLIQUIDITY.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract GLIQUID is ERC20, ReentrancyGuard, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct TokenData {\\r\\n        address tokenAddress;\\r\\n        address chainlinkFeed;\\r\\n    }\\r\\n\\r\\n    mapping(address => TokenData) public tokens;\\r\\n    address[] public tokenAddresses;\\r\\n    address public owner;\\r\\n    GLIQUIDITY public gliquidity;\\r\\n    \\r\\n    modifier onlyGLIQUIDITY() {\\r\\n        require(msg.sender == address(gliquidity), \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function addToken(address _tokenAddress, address _chainlinkFeed) public onlyOwner {\\r\\n        require(tokens[_tokenAddress].tokenAddress == address(0), \\\"Token already added\\\");\\r\\n        tokens[_tokenAddress] = TokenData(_tokenAddress, _chainlinkFeed);\\r\\n        tokenAddresses.push(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    constructor() ERC20(\\\"GLIQUID Token\\\", \\\"GLIQUID\\\") {\\r\\n        owner = msg.sender;\\r\\n        // Initialize with Chainlink price feed addresses for each token\\r\\n        addToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419); // WETH with ETH/USD Price Feed\\r\\n        addToken(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6); // USDC with USDC/USD Price Feed\\r\\n        addToken(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c); // WBTC with BTC/USD Price Feed\\r\\n        addToken(0x6B175474E89094C44Da98b954EedeAC495271d0F, 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9); // DAI with DAI/USD Price Feed \\r\\n        addToken(0xdAC17F958D2ee523a2206206994597C13D831ec7, 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D); // USDT with USDT/USD Price Feed\\r\\n    }\\r\\n\\r\\n    function getTokenAddresses() external view returns (address[] memory) {\\r\\n        return tokenAddresses;\\r\\n    }\\r\\n\\r\\n    function isTokenSupported(address token) external view returns (bool) {\\r\\n        for (uint i = 0; i < tokenAddresses.length; i++) {\\r\\n            if (tokenAddresses[i] == token) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function updateTokenFeedAddress(address _tokenAddress, address _newFeedAddress) external onlyOwner {\\r\\n        require(_tokenAddress != address(0) && _newFeedAddress != address(0), \\\"Invalid address\\\");\\r\\n        \\r\\n        require(tokens[_tokenAddress].tokenAddress != address(0), \\\"Token not recognized\\\");\\r\\n        \\r\\n        tokens[_tokenAddress].chainlinkFeed = _newFeedAddress;\\r\\n    }\\r\\n\\r\\n    function getTokenValueInPool(address _tokenAddress) public view returns (uint256) {\\r\\n        uint256 tokenDecimals = IExtendedERC20(_tokenAddress).decimals();\\r\\n        uint256 tokenBalance = IERC20(_tokenAddress).balanceOf(address(gliquidity));\\r\\n        \\r\\n        uint256 tokenPrice = getTokenPriceUSD(_tokenAddress);\\r\\n        \\r\\n        return tokenBalance.mul(tokenPrice).div(10 ** tokenDecimals);\\r\\n    }\\r\\n\\r\\n    function getWeight(address _tokenAddress) public view returns (uint256) {\\r\\n        uint256 tokenValueInPool = getTokenValueInPool(_tokenAddress);\\r\\n\\r\\n        uint256 totalValue = getTotalValueInPool();\\r\\n\\r\\n        if (totalValue == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (tokenValueInPool == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return tokenValueInPool.mul(1e18).div(totalValue);\\r\\n    }\\r\\n\\r\\n    function getTotalValueInPool() public view returns (uint256) {\\r\\n        uint256 totalValue = 0;\\r\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\r\\n            address tokenAddress = tokenAddresses[i];\\r\\n            \\r\\n            uint256 tokenValue = getTokenValueInPool(tokenAddress);\\r\\n            \\r\\n            totalValue = totalValue.add(tokenValue);\\r\\n        }\\r\\n        return totalValue;\\r\\n    }\\r\\n\\r\\n    function getTokenPriceUSD(address _tokenAddress) public view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(tokens[_tokenAddress].chainlinkFeed);\\r\\n        (, int price,,,) = priceFeed.latestRoundData();\\r\\n        uint8 decimals = priceFeed.decimals();\\r\\n        return uint256(price).mul(10 ** 18).div(10 ** decimals);\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256) {\\r\\n        uint256 gliquidSupply = totalSupply();\\r\\n\\r\\n        if (gliquidSupply == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 totalValue = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\r\\n            address tokenAddress = tokenAddresses[i];\\r\\n            uint256 tokenDecimals = IExtendedERC20(tokenAddress).decimals();\\r\\n            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(gliquidity));\\r\\n        \\r\\n            uint256 scaledTokenBalance;\\r\\n            if (tokenDecimals < 18) {\\r\\n                scaledTokenBalance = tokenBalance.mul(10 ** (18 - tokenDecimals));\\r\\n            } else {\\r\\n                scaledTokenBalance = tokenBalance;\\r\\n            }\\r\\n\\r\\n            uint256 tokenPrice = getTokenPriceUSD(tokenAddress);\\r\\n            totalValue = totalValue.add(scaledTokenBalance.mul(tokenPrice));\\r\\n        }\\r\\n\\r\\n        return totalValue.div(gliquidSupply);\\r\\n    }\\r\\n\\r\\n    function setGLIQUIDITY(address _gliquidity) external onlyOwner {\\r\\n        gliquidity = GLIQUIDITY(_gliquidity);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) external onlyGLIQUIDITY {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address from, uint256 amount) external onlyGLIQUIDITY {\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address, uint256) public virtual override whenNotPaused returns (bool) {\\r\\n        revert(\\\"Function disabled. Use transferAll instead.\\\");\\r\\n    }\\r\\n\\r\\n    function transferFrom(address, address, uint256) public virtual override whenNotPaused returns (bool) {\\r\\n        revert(\\\"Function disabled. Use transferAll instead.\\\");\\r\\n    }\\r\\n\\r\\n    function transferAll(address recipient) public whenNotPaused returns (bool) {\\r\\n        uint256 amount = balanceOf(msg.sender);\\r\\n        require(amount > 0, \\\"You have no GLIQUID tokens to transfer\\\");\\r\\n        gliquidity.gclaim(msg.sender);\\r\\n        gliquidity.handleTransfer(msg.sender, recipient);\\r\\n        super.transfer(recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"GLIQUIDITY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT \\r\\n//    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588        \u2584\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2584\u2588    \u2588\u2584            \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584      \u2588\u2588\u2588      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588       \\r\\n//   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588          \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \\r\\n//   \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588       \u2588\u2588\u2588\u258c    \u2580\u2588\u2588\u2588\u2580\u2580\u2588\u2588 \u2588\u2588\u2588    \u2588\u2580    \u2588\u2588\u2588    \u2588\u2588\u2588          \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588    \u2580\u2588\u2588\u2588\u2580\u2580\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \\r\\n//   \u2584\u2588\u2588\u2588        \u2588\u2588\u2588       \u2588\u2588\u2588\u258c     \u2588\u2588\u2588   \u2580 \u2588\u2588\u2588         \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2584\u2584        \u2588\u2588\u2588    \u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2580 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588   \u2580 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \\r\\n//\u2580\u2580\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588       \u2588\u2588\u2588\u258c     \u2588\u2588\u2588     \u2588\u2588\u2588        \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2580       \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580   \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \\r\\n//   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588      \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2584    \u2588\u2588\u2588    \u2588\u2588\u2588          \u2588\u2588\u2588        \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \\r\\n//   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584 \u2588\u2588\u2588      \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588          \u2588\u2588\u2588          \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584 \\r\\n//   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588 \u2588\u2580      \u2584\u2588\u2588\u2588\u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580    \u2588\u2588\u2588    \u2588\u2580          \u2584\u2588\u2588\u2588\u2588\u2580        \u2588\u2588\u2588    \u2588\u2588\u2588  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580     \u2584\u2588\u2588\u2588\u2588\u2580    \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588 \\r\\n//              \u2580                                                                        \u2588\u2588\u2588    \u2588\u2588\u2588                                                         \u2580         \\r\\n// https://t.me/glitchproto\\r\\n// https://twitter.com/protocolglitch\\r\\n// https://discord.gg/jyehnJHW9q\\r\\n// GLITCH Protocol is a decentralized protocol that allows users to swap between any two tokens on the Ethereum blockchain in a trustless manner.\\r\\n//\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./GLIQUID.sol\\\";\\r\\nimport \\\"./FeeManager.sol\\\";\\r\\n\\r\\ninterface IExtendedERC20 is IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ncontract GLIQUIDITY is ReentrancyGuard, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    GLIQUID public gliquidToken;\\r\\n    FeeManager public feeManager;\\r\\n\\r\\n    address public devAddress;\\r\\n    address public owner;\\r\\n    bool public isBootstrapped = false;\\r\\n\\r\\n    uint256 public FEE = 25;\\r\\n    uint256 public OFEE = 35;\\r\\n    uint256 constant ONE_DAY = 86400;\\r\\n\\r\\n    uint256 public constant TOLERANCE = 100;\\r\\n\\r\\n    struct FeeSnapshot {\\r\\n        uint256 totalFees;\\r\\n        uint256 totalSupply;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(address => FeeSnapshot)) public userSnapshots;\\r\\n\\r\\n    mapping(address => FeeSnapshot) public globalSnapshots;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public feesOwed;\\r\\n\\r\\n    mapping(address => uint256) public dailyTokenVolumes; \\r\\n    uint256 public lastVolumeUpdateTime;\\r\\n\\r\\n    mapping(address => bool) public isLiquidityProvider;\\r\\n\\r\\n    uint256 public dailyFeesCollected; \\r\\n    uint256 public lastFeesUpdateTime; \\r\\n\\r\\n    event TokenSwapped(address indexed trader, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\r\\n    event LiquidityAdded(address indexed provider, uint256 gliquidMinted);\\r\\n    event LiquidityRemoved(address indexed provider, uint256 gliquidBurned);\\r\\n    event FeesClaimed(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    constructor(address _gliquidToken, address _feeManager, address _devAddress) {\\r\\n        gliquidToken = GLIQUID(_gliquidToken);\\r\\n        feeManager = FeeManager(_feeManager);\\r\\n        devAddress = _devAddress;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setDevAddress(address _devAddress) external onlyOwner {\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function updateFees(uint256 fee) internal {\\r\\n        if (block.timestamp.sub(lastFeesUpdateTime) >= ONE_DAY) {\\r\\n            dailyFeesCollected = fee;\\r\\n            lastFeesUpdateTime = block.timestamp;\\r\\n        } else {\\r\\n            dailyFeesCollected = dailyFeesCollected.add(fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateUserSnapshot(address user, address token) private {\\r\\n        uint256 totalFees = feeManager.getTotalFees(token);\\r\\n        uint256 totalSupply = gliquidToken.totalSupply();\\r\\n        userSnapshots[user][token] = FeeSnapshot(totalFees, totalSupply);\\r\\n    }\\r\\n\\r\\n    function updateGlobalSnapshot(address token) private {\\r\\n        uint256 totalFees = feeManager.getTotalFees(token);\\r\\n        uint256 totalSupply = gliquidToken.totalSupply();\\r\\n        globalSnapshots[token] = FeeSnapshot(totalFees, totalSupply);\\r\\n    }\\r\\n\\r\\n    function updateAllUserSnapshots(address user) private {\\r\\n        address[] memory tokens = gliquidToken.getTokenAddresses();\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            updateUserSnapshot(user, tokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateAllGlobalSnapshots() private {\\r\\n        address[] memory tokens = gliquidToken.getTokenAddresses();\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            updateGlobalSnapshot(tokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateAPR() public view returns (uint256) {\\r\\n        uint256 totalLiquidity = gliquidToken.getTotalValueInPool();\\r\\n\\r\\n        if (totalLiquidity == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 annualizedFees = dailyFeesCollected.mul(365);\\r\\n        return (annualizedFees.mul(100).mul(1e18)).div(totalLiquidity);\\r\\n    }\\r\\n\\r\\n    function _getTokenValueUSD(address token, uint256 amount) internal view returns (uint256) {\\r\\n        uint256 tokenPrice = gliquidToken.getTokenPriceUSD(token);\\r\\n\\r\\n        uint256 normalizedAmount = amount;\\r\\n        if (IExtendedERC20(token).decimals() < 18) {\\r\\n            normalizedAmount = amount.mul(10 ** (18 - IExtendedERC20(token).decimals()));\\r\\n        } else if (IExtendedERC20(token).decimals() > 18) {\\r\\n            normalizedAmount = amount.div(10 ** (IExtendedERC20(token).decimals() - 18));\\r\\n        }\\r\\n\\r\\n        return normalizedAmount.mul(tokenPrice).div(10 ** 18);\\r\\n    }\\r\\n    \\r\\n    function getClaimableAmount(address user, address token) public view returns (uint256) {\\r\\n        FeeSnapshot memory userSnapshot = userSnapshots[user][token];\\r\\n        FeeSnapshot memory globalSnapshot = globalSnapshots[token];\\r\\n\\r\\n        uint256 feesOwedUserToken = feesOwed[user][token];\\r\\n\\r\\n        if (userSnapshot.totalSupply == 0) {\\r\\n            return feesOwedUserToken;\\r\\n        }\\r\\n\\r\\n        uint256 totalTokenFee = globalSnapshot.totalFees > userSnapshot.totalFees ? globalSnapshot.totalFees - userSnapshot.totalFees : 0;\\r\\n\\r\\n        if (totalTokenFee == 0) {\\r\\n            return feesOwedUserToken;\\r\\n        }\\r\\n\\r\\n        uint256 currentTotalSupply = gliquidToken.totalSupply();\\r\\n        uint256 userBalance = gliquidToken.balanceOf(user);\\r\\n        \\r\\n        if (userBalance == 0) {\\r\\n            return feesOwedUserToken;\\r\\n        }\\r\\n\\r\\n        uint256 userProportion = userBalance.mul(1e18).div(currentTotalSupply); \\r\\n       \\r\\n        uint256 adjustedUserProportion = userProportion; \\r\\n\\r\\n        uint256 userShare = (totalTokenFee * adjustedUserProportion) / 1e18;\\r\\n\\r\\n        return userShare.add(feesOwedUserToken);\\r\\n    }\\r\\n\\r\\n    function getAllClaimableAmounts(address user) public view returns (address[] memory, uint256[] memory) {\\r\\n        address[] memory supportedTokens = gliquidToken.getTokenAddresses(); // This function should return all supported tokens.\\r\\n        uint256[] memory userShares = new uint256[](supportedTokens.length);\\r\\n\\r\\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\\r\\n            address token = supportedTokens[i];\\r\\n            userShares[i] = getClaimableAmount(user, token);\\r\\n        }\\r\\n\\r\\n        return (supportedTokens, userShares);\\r\\n    }\\r\\n\\r\\n    function claim() external nonReentrant whenNotPaused {\\r\\n        require(isLiquidityProvider[msg.sender], \\\"You must be a liquidity provider to claim fees.\\\");\\r\\n\\r\\n        address[] memory _tokenAddresses = gliquidToken.getTokenAddresses();\\r\\n        bool hasClaimedAny = false;\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\\r\\n            address tokenAddress = _tokenAddresses[i];\\r\\n            uint256 claimableAmount = getClaimableAmount(msg.sender, tokenAddress);\\r\\n\\r\\n            if (claimableAmount == 0) continue;\\r\\n\\r\\n            uint256 contractBalance = IERC20(tokenAddress).balanceOf(address(feeManager));\\r\\n            require(contractBalance >= claimableAmount, \\\"Not enough tokens in the contract to cover the claim\\\");\\r\\n\\r\\n            feeManager.withdrawFees(tokenAddress, claimableAmount, msg.sender);\\r\\n\\r\\n            updateUserSnapshot(msg.sender, tokenAddress);\\r\\n\\r\\n            feesOwed[msg.sender][tokenAddress] = 0;\\r\\n\\r\\n            hasClaimedAny = true;\\r\\n\\r\\n            emit FeesClaimed(msg.sender, tokenAddress, claimableAmount);\\r\\n        }\\r\\n\\r\\n        if(hasClaimedAny) {\\r\\n            updateAllGlobalSnapshots();\\r\\n        }\\r\\n\\r\\n        require(hasClaimedAny, \\\"No fees available to claim\\\");\\r\\n    }\\r\\n\\r\\n    function liquidclaim(address sender) internal {\\r\\n        address[] memory _tokenAddresses = gliquidToken.getTokenAddresses();\\r\\n        bool hasClaimedAny = false;\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\\r\\n            address tokenAddress = _tokenAddresses[i];\\r\\n            uint256 claimableAmount = getClaimableAmount(sender, tokenAddress);\\r\\n\\r\\n            if (claimableAmount == 0) continue; \\r\\n\\r\\n            uint256 contractBalance = IERC20(tokenAddress).balanceOf(address(feeManager));\\r\\n            require(contractBalance >= claimableAmount, \\\"Not enough tokens in the contract to cover the claim\\\");\\r\\n\\r\\n            feeManager.withdrawFees(tokenAddress, claimableAmount, sender);\\r\\n\\r\\n            updateUserSnapshot(sender, tokenAddress);\\r\\n\\r\\n            feesOwed[sender][tokenAddress] = 0;\\r\\n\\r\\n            hasClaimedAny = true;\\r\\n\\r\\n            emit FeesClaimed(sender, tokenAddress, claimableAmount);\\r\\n        }\\r\\n\\r\\n        if(hasClaimedAny) {\\r\\n            updateAllGlobalSnapshots();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function gclaim(address sender) external nonReentrant whenNotPaused {\\r\\n        require(msg.sender == address(gliquidToken), \\\"Only GLIQUID token can call this\\\");\\r\\n        require(isLiquidityProvider[sender], \\\"You must be a liquidity provider to claim fees.\\\");\\r\\n\\r\\n        address[] memory _tokenAddresses = gliquidToken.getTokenAddresses();\\r\\n        bool hasClaimedAny = false;\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\\r\\n            address tokenAddress = _tokenAddresses[i];\\r\\n            uint256 claimableAmount = getClaimableAmount(sender, tokenAddress);\\r\\n\\r\\n            if (claimableAmount == 0) continue;\\r\\n\\r\\n            uint256 contractBalance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n            require(contractBalance >= claimableAmount, \\\"Not enough tokens in the contract to cover the claim\\\");\\r\\n\\r\\n            feeManager.withdrawFees(tokenAddress, claimableAmount, sender);\\r\\n\\r\\n            updateUserSnapshot(sender, tokenAddress);\\r\\n\\r\\n            feesOwed[sender][tokenAddress] = 0;\\r\\n\\r\\n            hasClaimedAny = true;\\r\\n\\r\\n            emit FeesClaimed(sender, tokenAddress, claimableAmount);\\r\\n        }\\r\\n\\r\\n        if(hasClaimedAny) {\\r\\n            updateAllGlobalSnapshots();\\r\\n        }\\r\\n\\r\\n        require(hasClaimedAny, \\\"No fees available to claim\\\"); \\r\\n    }\\r\\n\\r\\n    function handleTransfer(address from, address to) external nonReentrant whenNotPaused {\\r\\n        require(msg.sender == address(gliquidToken), \\\"Only GLIQUID token can call this\\\");\\r\\n\\r\\n        isLiquidityProvider[from] = false;\\r\\n\\r\\n        isLiquidityProvider[to] = true;\\r\\n    }\\r\\n\\r\\n    function bootstrapLiquidity(address token, uint256 amount, uint256 gliquidAmount) external onlyOwner {\\r\\n        require(!isBootstrapped, \\\"Already bootstrapped\\\");\\r\\n\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\r\\n        gliquidToken.mint(msg.sender, gliquidAmount);\\r\\n\\r\\n        if (!isLiquidityProvider[msg.sender]) {\\r\\n            isLiquidityProvider[msg.sender] = true;\\r\\n        }\\r\\n\\r\\n        isBootstrapped = true;\\r\\n        emit LiquidityAdded(msg.sender, gliquidAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addLiquidity(address token, uint256 amount) external nonReentrant whenNotPaused {\\r\\n        require(gliquidToken.isTokenSupported(token), \\\"Token not supported\\\");\\r\\n\\r\\n        uint256 tokenValueUSD = _getTokenValueUSD(token, amount);\\r\\n        uint256 gliquidPrice = gliquidToken.getPrice();\\r\\n        require(gliquidPrice > 0, \\\"GLIQUID price is zero\\\");\\r\\n        uint256 gliquidMinted = tokenValueUSD.mul(gliquidPrice).div(1e18);\\r\\n\\r\\n        liquidclaim(msg.sender);\\r\\n\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        gliquidToken.mint(msg.sender, gliquidMinted);\\r\\n\\r\\n        if (!isLiquidityProvider[msg.sender]) {\\r\\n            isLiquidityProvider[msg.sender] = true;\\r\\n        }\\r\\n\\r\\n        updateAllUserSnapshots(msg.sender);\\r\\n\\r\\n        updateAllGlobalSnapshots();\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, gliquidMinted);\\r\\n    }\\r\\n\\r\\n    function _distributeRemovalFees(uint256 amountIn, address tokenIn, uint256 feePercentage) internal returns (uint256 amountAfterFees) {\\r\\n        uint256 feeAmount = amountIn.mul(feePercentage).div(10000);\\r\\n        uint256 devFee = feeAmount.mul(30).div(100);\\r\\n        uint256 lpFee = feeAmount.mul(70).div(100);\\r\\n\\r\\n        uint256 feeInUSD = _getTokenValueUSD(tokenIn, feeAmount);\\r\\n\\r\\n        IERC20(tokenIn).safeTransfer(devAddress, devFee);\\r\\n        \\r\\n        IERC20(tokenIn).safeTransfer(address(feeManager), lpFee);\\r\\n        feeManager.addFees(tokenIn, lpFee);\\r\\n\\r\\n        updateFees(feeInUSD);\\r\\n\\r\\n        return amountIn.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    function _getEquivalentTokenAmountForUSD(address token, uint256 usdAmount) internal view returns (uint256) {\\r\\n        uint256 tokenDecimals = IExtendedERC20(token).decimals();\\r\\n        uint256 tokenPriceUSD = gliquidToken.getTokenPriceUSD(token);\\r\\n\\r\\n        uint256 precision = 10 ** 18;\\r\\n\\r\\n        uint256 rawTokenAmount = usdAmount.mul(precision).div(tokenPriceUSD);\\r\\n\\r\\n        if (tokenDecimals < 18) {\\r\\n            return rawTokenAmount.div(10 ** (18 - tokenDecimals));\\r\\n        } else if (tokenDecimals > 18) {\\r\\n            return rawTokenAmount.mul(10 ** (tokenDecimals - 18));\\r\\n        } else {\\r\\n            return rawTokenAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 gliquidAmount, address tokenOut) external nonReentrant whenNotPaused {\\r\\n        require(gliquidToken.balanceOf(msg.sender) >= gliquidAmount, \\\"Not enough GLIQUID tokens\\\");\\r\\n        require(gliquidToken.isTokenSupported(tokenOut), \\\"Token not supported\\\");\\r\\n        require(isLiquidityProvider[msg.sender], \\\"You must be a liquidity provider to remove liquidity\\\");\\r\\n        \\r\\n        uint256 gliquidDecimals = gliquidToken.decimals();\\r\\n        uint256 gliquidValueUSD = gliquidAmount.mul(gliquidToken.getPrice()).div(10 ** gliquidDecimals);\\r\\n\\r\\n        uint256 tokenOutAmount = _getEquivalentTokenAmountForUSD(tokenOut, gliquidValueUSD);\\r\\n\\r\\n        uint256 amountAfterFees = _distributeRemovalFees(tokenOutAmount, tokenOut, OFEE);\\r\\n        \\r\\n        require(IERC20(tokenOut).balanceOf(address(this)) >= amountAfterFees, \\\"Not enough tokenOut balance in pool\\\");\\r\\n\\r\\n        liquidclaim(msg.sender);\\r\\n\\r\\n        updateAllUserSnapshots(msg.sender);\\r\\n\\r\\n        IERC20(tokenOut).safeTransfer(msg.sender, amountAfterFees);\\r\\n\\r\\n        gliquidToken.burn(msg.sender, gliquidAmount);\\r\\n        \\r\\n        if (gliquidToken.balanceOf(msg.sender) == 0) {\\r\\n            isLiquidityProvider[msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        updateAllGlobalSnapshots();\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, gliquidAmount);\\r\\n    }\\r\\n\\r\\n    function _distributeSwapFees(uint256 amountIn, address tokenIn) internal returns (uint256 amountAfterFees) {\\r\\n        (uint256 feeAmount, uint256 devFee, uint256 lpFee) = calculateFees(amountIn);\\r\\n\\r\\n        uint256 feeInUSD = _getTokenValueUSD(tokenIn, feeAmount);\\r\\n\\r\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, devAddress, devFee);\\r\\n\\r\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(feeManager), lpFee);\\r\\n        feeManager.addFees(tokenIn, lpFee);\\r\\n\\r\\n        updateFees(feeInUSD);\\r\\n\\r\\n        return amountIn.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 deadline) external nonReentrant whenNotPaused {\\r\\n        require(block.timestamp <= deadline, \\\"Transaction expired\\\");\\r\\n        require(tokenIn != tokenOut, \\\"Input and output tokens can't be the same\\\");\\r\\n        require(gliquidToken.isTokenSupported(tokenIn) && gliquidToken.isTokenSupported(tokenOut), \\\"Token not supported\\\");\\r\\n\\r\\n        uint256 amountOut = getAmountOut(amountIn, tokenIn, tokenOut);\\r\\n\\r\\n        handleSwapTransfers(tokenIn, tokenOut, amountIn, amountOut);\\r\\n\\r\\n        updateAllGlobalSnapshots();\\r\\n        \\r\\n        emit TokenSwapped(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\\r\\n    }\\r\\n\\r\\n    function calculateFees(uint256 amountIn) internal view returns (uint256 feeAmount, uint256 devFee, uint256 lpFee) {\\r\\n        feeAmount = amountIn.mul(FEE).div(10000);\\r\\n        devFee = feeAmount.mul(30).div(100);\\r\\n        lpFee = feeAmount.mul(70).div(100);\\r\\n\\r\\n        return (feeAmount, devFee, lpFee);\\r\\n    }\\r\\n\\r\\n    function getAllDailyVolumeUSD() external view returns (uint256) {\\r\\n        address[] memory supportedTokens = gliquidToken.getTokenAddresses();\\r\\n\\r\\n        uint256 totalVolumeUSD = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\\r\\n            totalVolumeUSD += _getTokenValueUSD(supportedTokens[i], dailyTokenVolumes[supportedTokens[i]]);\\r\\n        }\\r\\n\\r\\n        return totalVolumeUSD;\\r\\n    }\\r\\n\\r\\n    function getDailyTokenVolume(address token) external view returns (uint256) {\\r\\n        return dailyTokenVolumes[token];\\r\\n    }\\r\\n\\r\\n    function updateDailyVolume(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut) internal {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n\\r\\n        if (currentTime - lastVolumeUpdateTime >= 1 days) {\\r\\n            resetDailyVolume();\\r\\n            lastVolumeUpdateTime = currentTime;\\r\\n        }\\r\\n\\r\\n        dailyTokenVolumes[tokenIn] += amountIn;\\r\\n\\r\\n        dailyTokenVolumes[tokenOut] += amountOut;\\r\\n    }\\r\\n\\r\\n    function resetDailyVolume() internal {\\r\\n        address[] memory supportedTokens = gliquidToken.getTokenAddresses();\\r\\n\\r\\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\\r\\n            dailyTokenVolumes[supportedTokens[i]] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function handleSwapTransfers(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut) internal {\\r\\n        require(IERC20(tokenOut).balanceOf(address(this)) >= amountOut, \\\"Not enough tokenOut in pool\\\");\\r\\n\\r\\n        updateDailyVolume(tokenIn, tokenOut, amountIn, amountOut);\\r\\n\\r\\n        uint256 amountAfterFees = _distributeSwapFees(amountIn, tokenIn);\\r\\n\\r\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountAfterFees);\\r\\n        \\r\\n        IERC20(tokenOut).safeTransfer(msg.sender, amountOut);\\r\\n    }\\r\\n\\r\\n    function getAmountOut(uint256 amountIn, address tokenIn, address tokenOut) public view returns (uint256) {\\r\\n        uint256 valueIn = _getTokenValueUSD(tokenIn, amountIn);\\r\\n\\r\\n        uint256 feeAmount = (valueIn * FEE) / 10000;\\r\\n        uint256 valueInAfterFee = valueIn.sub(feeAmount);\\r\\n\\r\\n        uint256 tokenOutPrice = gliquidToken.getTokenPriceUSD(tokenOut);\\r\\n        require(tokenOutPrice > 0, \\\"Token out price is zero\\\");\\r\\n\\r\\n        uint256 adjustedValueInAfterFee = valueInAfterFee.mul(10**18);\\r\\n        uint256 amountOut = adjustedValueInAfterFee.div(tokenOutPrice);\\r\\n\\r\\n        uint8 tokenOutDecimals = IExtendedERC20(tokenOut).decimals();\\r\\n        uint256 amountOutNormalized = amountOut;\\r\\n\\r\\n        if (tokenOutDecimals < 18) {\\r\\n            amountOutNormalized = amountOut.div(10 ** (18 - tokenOutDecimals));\\r\\n        } else if (tokenOutDecimals > 18) {\\r\\n            amountOutNormalized = amountOut.mul(10 ** (tokenOutDecimals - 18));\\r\\n        }\\r\\n\\r\\n        uint256 usdValueOut = _getTokenValueUSD(tokenOut, amountOutNormalized);\\r\\n        uint256 difference = valueIn > usdValueOut ? valueIn - usdValueOut : usdValueOut - valueIn;\\r\\n        require(difference <= valueIn.mul(TOLERANCE).div(10000), \\\"USD value mismatch between tokens\\\");\\r\\n\\r\\n        return amountOutNormalized;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"FeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract FeeManager {\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public admin;\\r\\n    address public owner;\\r\\n\\r\\n    mapping(address => uint256) public collectedFees;\\r\\n\\r\\n    event FeeDistributed(address indexed admin, address token, uint256 amount);\\r\\n    event FeeWithdrawn(address indexed admin, address indexed user, address token, uint256 amount);\\r\\n\\r\\n    constructor(address _admin) {\\r\\n        require(_admin != address(0), \\\"Invalid admin address\\\");\\r\\n        admin = _admin;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateAdmin(address newAdmin) external onlyAdmin {\\r\\n        require(newAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    function addFees(address token, uint256 amount) external onlyAdmin {\\r\\n        // This function can be expanded with business logic as needed\\r\\n        collectedFees[token] += amount;\\r\\n        emit FeeDistributed(msg.sender, token, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawFees(address token, uint256 amount, address recipient) external onlyAdmin {\\r\\n        require(collectedFees[token] >= amount, \\\"Not enough fees\\\");\\r\\n        require(recipient != address(0), \\\"Cannot withdraw to the zero address\\\");\\r\\n\\r\\n        uint256 contractBalance = IERC20(token).balanceOf(address(this));\\r\\n        require(contractBalance >= amount, \\\"Insufficient contract balance\\\");\\r\\n\\r\\n        // Update the collected fees for the token\\r\\n        collectedFees[token] -= amount;\\r\\n\\r\\n        // Transfer the tokens to the recipient\\r\\n        IERC20(token).safeTransfer(recipient, amount);\\r\\n\\r\\n        emit FeeWithdrawn(msg.sender, recipient, token, amount);\\r\\n    }\\r\\n\\r\\n    function getTotalFees(address token) external view returns (uint256) {\\r\\n        return collectedFees[token];\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(address token, uint256 amount, address to) external onlyOwner {\\r\\n        require(to != address(0), \\\"Cannot withdraw to the zero address\\\");\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        require(balance >= amount, \\\"Not enough tokens in the contract\\\");\\r\\n\\r\\n        IERC20(token).safeTransfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gliquidToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gliquidMinted\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gliquidBurned\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gliquidAmount\",\"type\":\"uint256\"}],\"name\":\"bootstrapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dailyTokenVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract FeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"gclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllClaimableAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDailyVolumeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDailyTokenVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gliquidToken\",\"outputs\":[{\"internalType\":\"contract GLIQUID\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"handleTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBootstrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeesUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVolumeUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gliquidAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GLIQUIDITY", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "9000", "ConstructorArguments": "0000000000000000000000003681992661dcb02f5a0577ea1711aec983f57273000000000000000000000000be37d61f4bb3effc749e21b66863c8983d829edd0000000000000000000000004430adf8b085322d342d53535a742a0e3aea2245", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}