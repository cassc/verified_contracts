{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/CapAutomatorResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.13;\\n\\ninterface IPool {\\n    function getReservesList() external view returns (address[] memory);\\n    function getReserveConfiguration(address asset) external view returns (uint256);\\n}\\n\\ninterface ICapAutomator {\\n    function pool() external view returns (IPool pool);\\n    function supplyCapConfigs(address asset) external view returns (\\n        uint48 max,\\n        uint48 gap,\\n        uint48 increaseCooldown,\\n        uint48 lastUpdateBlock,\\n        uint48 lastIncreaseTime\\n    );\\n    function borrowCapConfigs(address asset) external view returns (\\n        uint48 max,\\n        uint48 gap,\\n        uint48 increaseCooldown,\\n        uint48 lastUpdateBlock,\\n        uint48 lastIncreaseTime\\n    );\\n    function exec(address asset) external returns (uint256 newSupplyCap, uint256 newBorrowCap);\\n    function execSupply(address asset) external returns (uint256 newSupplyCap);\\n    function execBorrow(address asset) external returns (uint256 newBorrowCap);\\n}\\n\\ncontract CapAutomatorResolver {\\n\\n    uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF;\\n    uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n\\n    ICapAutomator public immutable automator;\\n    IPool public immutable pool;\\n    uint256 public immutable threshold;\\n\\n    constructor(address _automator, uint256 _threshold) {\\n        automator = ICapAutomator(_automator);\\n        pool = automator.pool();\\n        threshold = _threshold;\\n    }\\n\\n    function checker()\\n        external\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        address[] memory reserves = pool.getReservesList();\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            address reserve = reserves[i];\\n\\n            (uint48 maxSupply, uint48 gapSupply,,,) = automator.supplyCapConfigs(reserve);\\n            (uint48 maxBorrow, uint48 gapBorrow,,,) = automator.borrowCapConfigs(reserve);\\n\\n            uint256 config = pool.getReserveConfiguration(reserve);\\n            uint256 prevSupplyCap = getSupplyCap(config);\\n            uint256 prevBorrowCap = getBorrowCap(config);\\n\\n            automator.exec(reserve);\\n\\n            config = pool.getReserveConfiguration(reserve);\\n            uint256 nextSupplyCap = getSupplyCap(config);\\n            uint256 nextBorrowCap = getBorrowCap(config);\\n\\n            bool supplyChanged = nextSupplyCap != prevSupplyCap &&\\n                (nextSupplyCap == maxSupply || absDiff(nextSupplyCap, prevSupplyCap) >= gapSupply * threshold / 1e4);\\n            bool borrowChanged = nextBorrowCap != prevBorrowCap &&\\n                (nextBorrowCap == maxBorrow || absDiff(nextBorrowCap, prevBorrowCap) >= gapBorrow * threshold / 1e4);\\n\\n            // Good to adjust!\\n            if (supplyChanged && borrowChanged) {\\n                return (true, abi.encodeCall(ICapAutomator.exec, (reserve)));\\n            } else if (supplyChanged) {\\n                return (true, abi.encodeCall(ICapAutomator.execSupply, (reserve)));\\n            } else if (borrowChanged) {\\n                return (true, abi.encodeCall(ICapAutomator.execBorrow, (reserve)));\\n            }\\n        }\\n\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getSupplyCap(\\n        uint256 configuration\\n    ) internal pure returns (uint256) {\\n        return (configuration & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n    }\\n\\n    function getBorrowCap(\\n        uint256 configuration\\n    ) internal pure returns (uint256) {\\n        return (configuration & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n    }\\n\\n    function absDiff(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_automator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"automator\",\"outputs\":[{\"internalType\":\"contract ICapAutomator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CapAutomatorResolver", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002276f52afba7cf2525fd0a050df464ac8532d0ef0000000000000000000000000000000000000000000000000000000000001388", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}