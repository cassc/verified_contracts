{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-12-01\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ninterface IThirdParty {\r\n    function isVerified(address user) external view returns (bool);\r\n}\r\n\r\ncontract USDL is IERC20, Ownable {\r\n\r\n    // Third Party Approval Integration\r\n    IThirdParty public thirdParty;\r\n\r\n    // total supply\r\n    uint256 private _totalSupply;\r\n\r\n    // token data\r\n    string private constant _name = \"USD Liquid\";\r\n    string private constant _symbol = \"USDL\";\r\n    uint8  private constant _decimals = 6;\r\n\r\n    // balances\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // Redeem Logs\r\n    struct RedeemLog {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 uuid;\r\n        bool fulfilled;\r\n    }\r\n\r\n    // Log ID => Logs\r\n    mapping ( uint256 => RedeemLog ) public logs;\r\n\r\n    // Redeem Log Nonce\r\n    uint256 public currentLogID;\r\n\r\n    /**\r\n        Ensures `account` is KYC Verified Before Permitting\r\n        Access To Certain Functionality\r\n     */\r\n    modifier isVerified(address account) {\r\n        require(\r\n            thirdParty.isVerified(account),\r\n            'Account Not Allowed'\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event Redeem(uint256 uuid, uint256 redeemLogId, address sender, uint256 amount, uint256 timestamp);\r\n    event NewThirdPartyVerification(address oldVerification, address newVerification);\r\n    event Credit(address indexed to, uint256 amount);\r\n\r\n    // emit event for etherscan tracking\r\n    constructor(address thirdParty_) {\r\n        thirdParty = IThirdParty(thirdParty_);\r\n        emit Transfer(address(0), msg.sender, 0);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /** Transfer Function */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    /** Transfer Function */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            'Insufficient Allowance'\r\n        );\r\n        _allowances[sender][msg.sender] -= amount;\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    // Public Functions\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) external {\r\n        require(\r\n            _allowances[account][msg.sender] >= amount,\r\n            'Insufficient Allowance'\r\n        );\r\n        _allowances[account][msg.sender] -= amount;\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function redeem(uint256 uuid, uint256 amount) external {\r\n        _redeem(msg.sender, amount, uuid);\r\n    }\r\n\r\n\r\n    // Owner Functions\r\n\r\n    function setThirdPartyVerification(address newThirdParty) external onlyOwner {\r\n        require(\r\n            IThirdParty(newThirdParty).isVerified(this.getOwner()) == true,\r\n            'Owner Not Allowed'\r\n        );\r\n        require(\r\n            address(thirdParty) != newThirdParty,\r\n            'Parties Can Not Match'\r\n        );\r\n\r\n        // emit event\r\n        emit NewThirdPartyVerification(address(thirdParty), newThirdParty);\r\n\r\n        // set new party\r\n        thirdParty = IThirdParty(newThirdParty);\r\n    }\r\n\r\n    function ownerBurn(address account, uint256 amount) external onlyOwner {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function ownerRedeem(uint256 uuid, address account, uint256 amount) external onlyOwner {\r\n        _redeem(account, amount, uuid);\r\n    }\r\n\r\n    function fulfill(uint256 logId) external onlyOwner {\r\n        logs[logId].fulfilled = true;\r\n    }\r\n\r\n    function batchFulfill(uint256[] calldata logIds) external onlyOwner {\r\n        uint len = logIds.length;\r\n        for (uint i = 0; i < len;) {\r\n            logs[logIds[i]].fulfilled = true;\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function removeFulfill(uint256[] calldata logIds) external onlyOwner {\r\n        uint len = logIds.length;\r\n        for (uint i = 0; i < len;) {\r\n            delete logs[logIds[i]].fulfilled;\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function credit(address to, uint256 amount) external onlyOwner {\r\n        _credit(to, amount);\r\n    }\r\n\r\n    function batchCredit(address[] calldata tos, uint256[] calldata amounts) external onlyOwner {\r\n        uint len = tos.length;\r\n        require(len == amounts.length, 'Invalid Lengths');\r\n        for (uint i = 0; i < len;) {\r\n            _credit(tos[i], amounts[i]);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    // Internal Transactions\r\n\r\n    function _credit(address to, uint256 amount) internal isVerified(to) {\r\n\r\n        // credit `amount` of tokens to `to`\r\n        unchecked {\r\n            _balances[to] += amount;\r\n            _totalSupply += amount;\r\n        }\r\n\r\n        // emit transfer event\r\n        emit Transfer(address(0), to, amount);\r\n        emit Credit(to, amount);\r\n    }\r\n    \r\n    /** Internal Transfer */\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(\r\n            amount <= _balances[sender],\r\n            'Insufficient Balance'\r\n        );\r\n        require(\r\n            amount > 0,\r\n            'Zero Transfer Amount'\r\n        );\r\n\r\n        // Reallocate Balances\r\n        unchecked {\r\n            _balances[sender] -= amount;\r\n            _balances[recipient] += amount;\r\n        }\r\n\r\n        // emit transfer\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(\r\n            _balances[account] >= amount,\r\n            'Insufficient Balance'\r\n        );\r\n\r\n        // already checked balance, so decrement without underflow validation\r\n        unchecked {\r\n            _balances[account] -= amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _redeem(address account, uint256 amount, uint256 uuid) internal isVerified(account) {\r\n\r\n        // Burn `Amount` From `Account`\r\n        _burn(account, amount);\r\n\r\n        // Add To Redeem Logs\r\n        logs[currentLogID] = RedeemLog({\r\n            user: account,\r\n            amount: amount,\r\n            timestamp: block.timestamp,\r\n            uuid: uuid,\r\n            fulfilled: false\r\n        });\r\n\r\n        // emit Redemption Event\r\n        emit Redeem(uuid, currentLogID, account, amount, block.timestamp);\r\n\r\n        // increment nonce\r\n        unchecked {\r\n            currentLogID++;\r\n        }\r\n    }\r\n\r\n\r\n    // Read Functions\r\n\r\n    function owner() external view returns (address) {\r\n        return this.getOwner();\r\n    }\r\n\r\n    function fetchLogs(uint256 startIndex, uint256 endIndex) external view returns(\r\n        address[] memory users,\r\n        uint256[] memory amounts,\r\n        uint256[] memory timestamps,\r\n        uint256[] memory uuids,\r\n        bool[] memory fulfilled\r\n    ) {\r\n\r\n        uint len = endIndex - startIndex;\r\n        users = new address[](len);\r\n        amounts = new uint256[](len);\r\n        timestamps = new uint256[](len);\r\n        uuids = new uint256[](len);\r\n        fulfilled = new bool[](len);\r\n\r\n        uint count = 0;\r\n        for (uint i = startIndex; i < endIndex;) {\r\n\r\n            users[count] = logs[i].user;\r\n            amounts[count] = logs[i].amount;\r\n            timestamps[count] = logs[i].timestamp;\r\n            uuids[count] = logs[i].uuid;\r\n            fulfilled[count] = logs[i].fulfilled;\r\n\r\n            unchecked {i++; ++count;}\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thirdParty_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Credit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVerification\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVerification\",\"type\":\"address\"}],\"name\":\"NewThirdPartyVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemLogId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"logIds\",\"type\":\"uint256[]\"}],\"name\":\"batchFulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"credit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLogID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"fetchLogs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uuids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"fulfilled\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"logId\",\"type\":\"uint256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"logs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"logIds\",\"type\":\"uint256[]\"}],\"name\":\"removeFulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newThirdParty\",\"type\":\"address\"}],\"name\":\"setThirdPartyVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdParty\",\"outputs\":[{\"internalType\":\"contract IThirdParty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USDL", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000047c67019f9b2e31055bf149cd96945df57002b3b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9bb714f125953fa6400bb00b5e165a0734efe4b47f02ffd442fcb964537e317"}