{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.23;\r\n/**\r\n * @title Atron - Liquidity Diversification Protocol\r\n * @dev Contract implements an upgradeable tokenomics framework for fee delegation and contract interfacing. Modularity without proxy.\r\n */\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    // Track authorized addresses\r\n    address[] internal authorizedAddresses;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        _authorize(_owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    function authorize(address adr) external onlyOwner {\r\n        _authorize(adr);\r\n    }\r\n\r\n    function _authorize(address adr) internal {\r\n        if (!authorizations[adr]) {\r\n            authorizations[adr] = true;\r\n            authorizedAddresses.push(adr); // Add to tracking\r\n        }\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        if (authorizations[adr]) {\r\n            authorizations[adr] = false;\r\n            // Remove from tracking\r\n            for (uint i = 0; i < authorizedAddresses.length; i++) {\r\n                if (authorizedAddresses[i] == adr) {\r\n                    authorizedAddresses[i] = authorizedAddresses[authorizedAddresses.length - 1];\r\n                    authorizedAddresses.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        // Reset authorizations\r\n        for (uint i = 0; i < authorizedAddresses.length; i++) {\r\n            authorizations[authorizedAddresses[i]] = false;\r\n        }\r\n        // Clear the authorized addresses\r\n        delete authorizedAddresses;\r\n\r\n        // Transfer ownership and re-authorize the new owner\r\n        owner = adr;\r\n        _authorize(adr);\r\n\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function getOwner() external view returns (address);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IDexPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\nlibrary AtronLibrary {\r\n    enum TransferType {\r\n        Sell,\r\n        Buy,\r\n        Transfer\r\n    }\r\n    struct Transfer {\r\n        uint256 amt;\r\n        TransferType transferType;\r\n        address from;\r\n        address to;\r\n    }\r\n}\r\n\r\ninterface IDistributor {\r\n    function deposit() external payable;\r\n    function onTransfer(AtronLibrary.Transfer memory _transfer) external;\r\n    function setShares(address sender, uint senderBalance, bool isSenderExempt, address recipient, uint recipientBalance, bool isRecipientExempt) external;\r\n    function resetShares(address shareholder) external;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ninterface IFeeRouter {\r\n    function deposit() external payable;\r\n    function onTransfer(AtronLibrary.Transfer memory _transfer) external;\r\n    function setShares(address sender, uint senderBalance, bool isSenderExempt, address recipient, uint recipientBalance, bool isRecipientExempt) external;\r\n    function resetShares(address shareholder) external;\r\n}\r\n\r\ninterface IFeeOracle {\r\n    function getDiscount(address holder, IERC20 token) external view returns (uint256, uint256);\r\n    function getTaxFee(AtronLibrary.TransferType _transferType) external view returns (uint256);\r\n}\r\n\r\ncontract ATRON is IERC20, Auth {\r\n\r\n    struct Exemptions {\r\n        bool isFeeExempt; //Only exempts transfers from sender & sells from sender. To Exempt buys, set the address as an interface.\r\n        bool isTxLimitExempt;\r\n        bool isDividendExempt;\r\n        bool isFeeOracleExempt;\r\n    }\r\n\r\n    struct TokenFees {\r\n        uint256 sell;\r\n        uint256 transfer;\r\n        uint256 buy;\r\n        uint256 burn; //Always divided by the fee.sell to calculate result\r\n    }\r\n\r\n    struct LiquidityPairs {\r\n        bool isLiquidityPair;\r\n        IERC20 token;\r\n    }\r\n\r\n    // Fees\r\n    TokenFees public fee = TokenFees(400,400,400,0);   \r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    //Maintains tokens to burn seperately during swapback\r\n    uint256 public burnReserve; //keeps track of tokens meant to be burned\r\n    uint256 public burnThreshold = 1 * 1e16; //burn tokens at 0.01 Atron\r\n    \r\n    //SwapBack Settings\r\n    IDEXRouter  public router; \r\n    address     public pair;\r\n    uint256 public swapThreshold = 100000 * 1e18;  //100000 Atron\r\n\r\n    //Token Pair Data\r\n    mapping(address => LiquidityPairs) public liquidityPairs;\r\n    \r\n    //Atron Token Info\r\n    string  private _name          = \"ATRON\";\r\n    string  private _symbol        = \"ATRON\";\r\n    uint8   constant _decimals    = 18;\r\n    uint256 public   _totalSupply  = 1000000000 * 10**18;\r\n    uint256 public   _maxTxAmount = 1000000000 * 10**18;\r\n    \r\n    //Shareholder Standard Mappings\r\n    mapping(address => uint256)                            _balances;\r\n    mapping(address => mapping(address => uint256))        _allowances;\r\n\r\n    //Shareholder Atron Mappings\r\n    mapping(address => Exemptions)                  public exemptions; //Manages exclusions with external Atron contracts\r\n    mapping(address => bool)                        public interfaces; //Manages Interfacing contracts/merchants allowing contracts to make basic transfer. Custom fees only applicable to merchant/non-interface addresses\r\n\r\n    //Atron Interfaces\r\n    IFeeRouter public  feeRouter;\r\n    IFeeOracle             public  feeOracle;\r\n\r\n    //Slippage\r\n    uint private slippage = 100; // 100 = 1%\r\n\r\n    //Other \r\n    uint256 public  tokensBurned; //Counter for tokens burned within the Atron EcoSystem\r\n\r\n    //Determines if the contract executed a swap. Used to prevent circulation issues.\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event ErrorEvent(string reason);\r\n    event SetFeeExempt(address _addr, bool _exempt);\r\n    event SetFeeOracle(IFeeOracle _feeOracle);\r\n    event SetFeeRouter(IFeeRouter _feeRouter);\r\n    event SetTxLimitExempt(address _addr, bool _exempt);\r\n    event SetDexRouter(IDEXRouter _router);\r\n    event SetNewFees(uint256 _sellFee, uint256 _transferFee, uint256 _buyFee, uint256 _burnFee);\r\n    event SetInterface(address _interfaceAddr, bool _isInterface);\r\n    event SetAtronExclusions(address _addr, bool _isDividendExempt, bool _isFeeOracleExempt);\r\n    event SetSwapThreshold(uint256 _swapThreshold);\r\n    event SetBurnThreshold(uint256 _burnThreshold);\r\n    event SetTxLimit(uint256 _amount);\r\n    event SetPair(address _pair);\r\n    event SetLiquidityPair(address _pair, IERC20 token, bool _value);\r\n    event TokensBurned(address sender, uint256 amountBurned);\r\n    event BurnReserveUpdated(uint256 burnReserve);\r\n    event SetSlippage(uint slippage);\r\n\r\n    constructor(IDEXRouter _router) Auth(msg.sender) {\r\n\r\n        router  = _router;\r\n        pair    = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        liquidityPairs[pair].isLiquidityPair = true;\r\n        liquidityPairs[pair].token = IERC20(router.WETH());\r\n\r\n        exemptions[msg.sender].isFeeExempt     = true;\r\n        exemptions[msg.sender].isTxLimitExempt = true;\r\n        interfaces[msg.sender] = true;\r\n        exemptions[address(_router)].isTxLimitExempt = true;\r\n        exemptions[pair].isTxLimitExempt = true;\r\n        exemptions[DEAD].isDividendExempt = true;\r\n\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        approve(address(_router), _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function _internalApprove(address spender, uint256 amount) internal returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (inSwap || interfaces[sender] || interfaces[recipient])\r\n            return _basicTransfer(sender, recipient, amount);\r\n\r\n        require(amount <= _maxTxAmount || exemptions[sender].isTxLimitExempt, \"TX Limit Exceeded\");\r\n\r\n        AtronLibrary.TransferType transferType = _determineTransferType(sender, recipient);\r\n\r\n        if (_shouldSwapBack() && transferType != AtronLibrary.TransferType.Transfer)\r\n            _swapBack();\r\n        else if(burnReserve >= burnThreshold)\r\n            _burnFromReserve();        \r\n        \r\n        uint amountAfterFee = _getDiscountAndTakeFee(sender, recipient, amount, transferType);\r\n\r\n        _setShares(sender, recipient);\r\n\r\n        if (address(feeRouter) != address(0)) {\r\n            AtronLibrary.Transfer memory transf = _buildTransfer(amountAfterFee, transferType, sender, recipient); //creates a transfer struct for sending to the fee router gateway\r\n            try feeRouter.onTransfer(transf) {\r\n            } catch Error(string memory reason) {\r\n                emit ErrorEvent(\"_transferFrom(): feeRouter.onTransfer() Failed\");\r\n                emit ErrorEvent(reason);\r\n            }\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amountAfterFee);\r\n        return true;\r\n    }\r\n\r\n    function _getDiscountAndTakeFee(address sender, address recipient, uint256 amount, AtronLibrary.TransferType transferType) internal returns (uint256) {\r\n        //Grab holder discount information from the FeeOracle\r\n        uint256 buyDiscount;\r\n        uint256 sellDiscount; \r\n        if (address(feeOracle) != address(0)) {\r\n            if(transferType == AtronLibrary.TransferType.Sell && !exemptions[sender].isFeeOracleExempt) \r\n                (buyDiscount, sellDiscount) = getDiscount(sender, liquidityPairs[recipient].token);\r\n            if(transferType == AtronLibrary.TransferType.Buy && !exemptions[recipient].isFeeOracleExempt)\r\n                (buyDiscount, sellDiscount) = getDiscount(recipient, liquidityPairs[sender].token);\r\n        }\r\n\r\n        //Calculates and takes applicable fees;\r\n        uint amountAfterFee = exemptions[sender].isFeeExempt ? amount : _takeFee(sender, amount, transferType, buyDiscount, sellDiscount);\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amountAfterFee;\r\n        return amountAfterFee;\r\n    }\r\n\r\n    //execute any time shareholder balances change\r\n    function _setShares(address sender, address recipient) internal {\r\n        if(address(feeRouter) == address(0)) return; // Check if feeRouter is set\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        uint256 recipientBalance = _balances[recipient];\r\n        bool senderIsExempt = exemptions[sender].isDividendExempt;\r\n        bool recipientIsExempt = exemptions[recipient].isDividendExempt;\r\n\r\n        try feeRouter.setShares(\r\n            sender,\r\n            senderBalance,\r\n            senderIsExempt,\r\n            recipient,\r\n            recipientBalance,\r\n            recipientIsExempt\r\n        ) {}\r\n        catch Error(string memory reason) {\r\n            emit ErrorEvent(\"_setShares(): feeRouter.setShares() Failed\");\r\n            emit ErrorEvent(reason);\r\n        }\r\n    }\r\n\r\n    //determines if the transfer is a buy/sell/transfer\r\n    function _determineTransferType(address _from, address _recipient) internal view returns (AtronLibrary.TransferType) {\r\n        if (liquidityPairs[_recipient].isLiquidityPair) {\r\n            return AtronLibrary.TransferType.Sell;\r\n        } else if (liquidityPairs[_from].isLiquidityPair) {\r\n            return AtronLibrary.TransferType.Buy;\r\n        }\r\n        return AtronLibrary.TransferType.Transfer;\r\n    }\r\n\r\n    //creates the transfer type\r\n    function _buildTransfer(uint256 _amt, AtronLibrary.TransferType _transferType, address _from, address _to) internal pure returns (AtronLibrary.Transfer memory) {\r\n        AtronLibrary.Transfer memory _transfer = AtronLibrary.Transfer(_amt, _transferType, _from, _to);\r\n        return _transfer;\r\n    }\r\n\r\n    //handles interface/swap transfers without any other mechanisms. \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        if(!inSwap) _setShares(sender, recipient); //ensures holder's shares are updated in the pool distribution gateway,  dex pairs/contracts are exempt at pool distribution gateway. \r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _takeFee(address _sender, uint256 _amount, AtronLibrary.TransferType _transferType, uint256 _buyDiscount, uint256 _sellDiscount) internal returns (uint256) {\r\n        uint256 feeAmount = (_amount * getTotalFee(_transferType, _buyDiscount, _sellDiscount)) / 10000;\r\n\r\n        if (feeAmount > 0)\r\n        {\r\n            burnReserve += (feeAmount * fee.burn) / fee.sell;\r\n            _balances[address(this)] += feeAmount;\r\n            emit BurnReserveUpdated(burnReserve);\r\n            emit Transfer(_sender, address(this), feeAmount);\r\n        }\r\n\r\n        return (_amount - feeAmount);\r\n    }\r\n\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return ((msg.sender != pair) && (!inSwap) && (_balances[address(this)] - burnReserve >= swapThreshold));\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        uint256 amountToSwap = swapThreshold;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint[] memory amountsOutMin = router.getAmountsOut(amountToSwap, path);\r\n        uint amountOutMin = amountsOutMin[amountsOutMin.length - 1] * (10000 - slippage) / 10000;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        if(address(feeRouter) != address(0)) {\r\n            try feeRouter.deposit{value : address(this).balance}() {\r\n\r\n            } catch Error(string memory reason) {\r\n                emit ErrorEvent(\"_swapBack(): feeRouter.deposit() Failed\");\r\n                emit ErrorEvent(reason);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burnFromReserve() internal {\r\n        address _thisContract = address(this);\r\n        uint256 _burnReserve = burnReserve;\r\n        uint256 _new_supply = _totalSupply - _burnReserve;\r\n        _totalSupply = _new_supply;\r\n        _balances[_thisContract] = _balances[_thisContract] - _burnReserve;\r\n        tokensBurned += _burnReserve;\r\n        burnReserve = 0;\r\n        _allowances[_thisContract][address(router)] = _new_supply;\r\n        _allowances[_thisContract][address(pair)] = _new_supply;\r\n        emit Transfer(_thisContract, address(0), _burnReserve);\r\n        emit TokensBurned(_thisContract, _burnReserve);\r\n    }\r\n\r\n    function _burnFromHolder(uint256 amountToBurn) internal {\r\n        uint256 _holderBalance = _balances[msg.sender];\r\n        require(_holderBalance >= amountToBurn && amountToBurn > 0, 'does not hodl enough');\r\n\r\n        uint256 _total_supply = _totalSupply; //gas savings\r\n\r\n        _totalSupply = _total_supply - amountToBurn;\r\n        _balances[msg.sender] -= amountToBurn;\r\n        tokensBurned += amountToBurn;\r\n       \r\n        _setShares(msg.sender, DEAD); //Update shares in gateway. Dead wallet is exempt inside feeRouter\r\n\r\n        _internalApprove(address(router), _total_supply);\r\n        _internalApprove(address(pair), _total_supply);\r\n        emit Transfer(msg.sender, address(0), amountToBurn);\r\n        emit TokensBurned(msg.sender, amountToBurn);\r\n    }    \r\n\r\n    function _takeExternalFee(uint256 feeAmount) internal returns (bool) {\r\n        // Takes the fee and keeps remainder in contract \r\n        if (feeAmount > 0) {\r\n            //update balance for tokens to be burned in batches to save gas on burn function execution\r\n            burnReserve += (feeAmount * fee.burn) / fee.sell;\r\n\r\n            _balances[address(this)] += feeAmount;\r\n            emit Transfer(msg.sender, address(this), feeAmount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _exemptFromDividends(address _address, bool _exempt) internal {\r\n        if(address(feeRouter)!=address(0)) {\r\n            if(_exempt)\r\n                feeRouter.resetShares(_address);\r\n            else\r\n                feeRouter.setShares(_address, _balances[_address], true, _address, _balances[_address], _exempt);\r\n        }\r\n    }\r\n\r\n    // public getters\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_totalSupply - balanceOf(DEAD) - balanceOf(address(0)));\r\n    }\r\n    \r\n    function getLiquidityBacking(uint256 _accuracy) public view returns (uint256) {\r\n        return (_accuracy * balanceOf(pair) * 2) / getCirculatingSupply(); //reserved for external use later\r\n    }\r\n\r\n    function isOverLiquified(uint256 _target, uint256 _accuracy) public view returns (bool) {\r\n        return (getLiquidityBacking(_accuracy) > _target);\r\n    }\r\n\r\n    //grabs total fee based on transfer type\r\n    function getTotalFee(AtronLibrary.TransferType _transferType, uint256 _buyDiscount, uint256 _sellDiscount) public view returns (uint256) {\r\n        uint256 _feeTax;\r\n        bool _feeOracleExists = address(feeOracle) != address(0); //if feeOracle exists - grab the calculated buy/transfer/sell tax;\r\n        if (_transferType == AtronLibrary.TransferType.Sell) {\r\n            _feeTax = _feeOracleExists ? feeOracle.getTaxFee(_transferType): fee.sell;\r\n            uint256 _sellFee = _sellDiscount > 0 ? _feeTax - ((_feeTax * _sellDiscount) / 10000) : _feeTax;\r\n            return _sellFee;\r\n        }\r\n        if (_transferType == AtronLibrary.TransferType.Transfer) {\r\n            return  _feeOracleExists ? feeOracle.getTaxFee(_transferType): fee.transfer;\r\n        }\r\n        else {\r\n            _feeTax = _feeOracleExists ? feeOracle.getTaxFee(_transferType): fee.buy;\r\n            uint256 _buyFee = _buyDiscount > 0 ? _feeTax - ((_feeTax * _buyDiscount) / 10000) : _feeTax;\r\n            return _buyFee;\r\n        }\r\n    }\r\n\r\n    //grabs holder discount if applicable from ticket booth/Referrals contract\r\n    function getDiscount(address _addr, IERC20 _token) public returns (uint256 buyDiscount, uint256 sellDiscount) {\r\n        try feeOracle.getDiscount(_addr, _token) returns (uint256 _buyDiscount, uint256 _sellDiscount){\r\n            buyDiscount = _buyDiscount;\r\n            sellDiscount = _sellDiscount;\r\n\r\n        } catch Error (string memory reason){\r\n            emit ErrorEvent('getDiscount(): feeOracle.getDiscount() Failed');\r\n            emit ErrorEvent(reason);\r\n        }\r\n    }\r\n\r\n    //grabs tax fee based on transfer type\r\n    function getTaxFee(AtronLibrary.TransferType _transferType) public returns (uint256 taxFee) {\r\n        try feeOracle.getTaxFee(_transferType) returns (uint256 _taxFee){\r\n            taxFee = _taxFee;\r\n\r\n        } catch Error (string memory reason){\r\n            emit ErrorEvent('getDiscount(): feeOracle.getTaxFee() Failed');\r\n            emit ErrorEvent(reason);\r\n        }\r\n    }\r\n\r\n    // authorized setters\r\n\r\n    //sets new fees for the contract\r\n    function setNewFees(uint256 _sellFee, uint256 _transferFee, uint256 _buyFee, uint256 _burnFee) external authorized {\r\n        require(_sellFee <= 2000\r\n        && _transferFee <= 2000\r\n        && _buyFee <= 2000\r\n        && _burnFee <= _sellFee, \"Invalid Fees\");\r\n        \r\n        fee = TokenFees(_sellFee, _transferFee, _buyFee, _burnFee);\r\n\r\n        if(_burnFee == 0)\r\n            burnReserve = 0; //reset existing burn reserve if burn fee is set to 0\r\n        emit SetNewFees( _sellFee,  _transferFee, _buyFee, _burnFee);\r\n    }\r\n\r\n    //validates and sets the router & pair\r\n    function setDexRouter(IDEXRouter _router) external authorized {\r\n        address _pair = IDEXFactory(_router.factory()).getPair(_router.WETH(), address(this));\r\n        require(_pair != address(0), 'Invalid Router');\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n\r\n        _allowances[address(this)][address(_router)] = _totalSupply; \r\n        liquidityPairs[pair].isLiquidityPair = true;\r\n        liquidityPairs[pair].token = IERC20(router.WETH());\r\n        \r\n        _exemptFromDividends(_pair,true);\r\n        _exemptFromDividends(address(_router),true);\r\n\r\n        emit SetDexRouter(_router);\r\n        emit SetPair(_pair);\r\n        emit SetLiquidityPair(_pair, IERC20(router.WETH()), true);\r\n    }\r\n\r\n    //sets the transaction limit for the contract never to be less than 1% of the total supply\r\n    function setTxLimit(uint256 _amount) external authorized {\r\n        require(_amount >= _totalSupply/100 && _amount <= _totalSupply, \"Invalid Transaction Limit\");\r\n        _maxTxAmount = _amount;\r\n        emit SetTxLimit(_amount);\r\n    }\r\n\r\n    function setIsFeeExempt(address _addr, bool _exempt) external authorized {\r\n        exemptions[_addr].isFeeExempt = _exempt;\r\n        emit SetFeeExempt(_addr, _exempt);\r\n    }\r\n\r\n    function setIsTxLimitExempt(address _addr, bool _exempt) external authorized {\r\n        exemptions[_addr].isTxLimitExempt = _exempt;\r\n        emit SetTxLimitExempt(_addr, _exempt);\r\n    }\r\n\r\n    //sets pair as liquidity pair to take fees\r\n    function setLiquidityPair(address _pair, IERC20 token, bool _value) external authorized {\r\n        liquidityPairs[_pair].isLiquidityPair = _value;\r\n        liquidityPairs[_pair].token = token;\r\n        exemptions[_pair].isDividendExempt = _value;\r\n        _exemptFromDividends(_pair, _value);\r\n        emit SetLiquidityPair(_pair,token,_value);\r\n    }\r\n    //threshold of Atron to collect before burning from supply\r\n    function setBurnThreshold(uint256 _burnThreshold) external authorized {\r\n        require(_burnThreshold <= _totalSupply, \"Invalid Burn Threshold\");\r\n        burnThreshold = _burnThreshold;\r\n        emit SetBurnThreshold(_burnThreshold);\r\n    }\r\n    //threshold to determine how much Atron needs to be in the contract to liquidate for rewards\r\n    function setSwapThreshold(uint256 _swapThreshold) external authorized {\r\n        require(_swapThreshold <= balanceOf(pair)/10, \"Invalid Swap Threshold\"); //Max 10% of the pair balance\r\n        swapThreshold = _swapThreshold;\r\n        emit SetSwapThreshold(_swapThreshold);\r\n    }\r\n    //exempts address from external ecosystem contracts as needed\r\n    function setAtronExclusions(address _addr, bool _isDividendExempt, bool _isFeeOracleExempt) external authorized {\r\n        exemptions[_addr].isDividendExempt = _isDividendExempt;\r\n        _exemptFromDividends(_addr,_isDividendExempt);\r\n        exemptions[_addr].isFeeOracleExempt = _isFeeOracleExempt;\r\n\r\n        emit SetAtronExclusions( _addr, _isDividendExempt,  _isFeeOracleExempt);\r\n    }\r\n    //allows basic transfers of tokens without any of the hooks, with the exception of the pool distribution gateway only when present\r\n    function setInterface(address _interfaceAddr, bool _isInterface) external authorized {\r\n        interfaces[_interfaceAddr] = _isInterface;\r\n        emit SetInterface(_interfaceAddr, _isInterface);\r\n    }\r\n    \r\n    function setFeeRouter(IFeeRouter _feeRouter) external authorized {\r\n        feeRouter = _feeRouter;\r\n        if(address(_feeRouter)!=address(0))\r\n            _exemptFromDividends(address(_feeRouter),true);\r\n        emit SetFeeRouter(_feeRouter);\r\n    }\r\n    function setFeeOracle(IFeeOracle _feeOracle) external authorized {\r\n        feeOracle = _feeOracle;\r\n        if(address(_feeOracle)!=address(0) && address(feeRouter)!= address(0))\r\n            _exemptFromDividends(address(_feeOracle),true);\r\n        emit SetFeeOracle(_feeOracle);\r\n    }\r\n    function setSlippage(uint _slippage) external authorized {\r\n        require(_slippage <= 2500, \"Slippage must be less than or equal to 25%\");\r\n        slippage = _slippage;\r\n        emit SetSlippage(slippage);\r\n    }\r\n\r\n    //Allows external contract/external source to contribute directly to contract fees with minimal gas\r\n    function takeFee(uint256 feeAmount) external authorized returns (bool) {\r\n        uint256 holderAmount = _balances[msg.sender];\r\n        require(holderAmount >= feeAmount, 'does not hold enough');\r\n        _balances[msg.sender] -= feeAmount;\r\n        return _takeExternalFee(feeAmount);\r\n    }\r\n    //function to manually kick off swapback\r\n    function manualSwapBack() external authorized {\r\n        if(_shouldSwapBack())\r\n            _swapBack();\r\n    }\r\n    \r\n    //Burn Function\r\n    function burnTokenOnly(uint256 tokenAmount) external {\r\n        _burnFromHolder(tokenAmount);\r\n    }\r\n\r\n    function transferBNB(address payable _to) external authorized {\r\n        (bool success,) = _to.call{value : address(this).balance}(\"\");\r\n        require(success, \"unable to transfer value\");\r\n    }\r\n\r\n    //Interface functions\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function getOwner() public view override returns (address) {\r\n        return owner;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnReserve\",\"type\":\"uint256\"}],\"name\":\"BurnReserveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ErrorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isDividendExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isFeeOracleExempt\",\"type\":\"bool\"}],\"name\":\"SetAtronExclusions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnThreshold\",\"type\":\"uint256\"}],\"name\":\"SetBurnThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"SetDexRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeeOracle\",\"name\":\"_feeOracle\",\"type\":\"address\"}],\"name\":\"SetFeeOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeeRouter\",\"name\":\"_feeRouter\",\"type\":\"address\"}],\"name\":\"SetFeeRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_interfaceAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isInterface\",\"type\":\"bool\"}],\"name\":\"SetInterface\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"SetLiquidityPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"SetNewFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"SetPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"SetSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"SetSwapThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"SetTxLimitExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokenOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTxLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDividendExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFeeOracleExempt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOracle\",\"outputs\":[{\"internalType\":\"contract IFeeOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRouter\",\"outputs\":[{\"internalType\":\"contract IFeeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AtronLibrary.TransferType\",\"name\":\"_transferType\",\"type\":\"uint8\"}],\"name\":\"getTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AtronLibrary.TransferType\",\"name\":\"_transferType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_buyDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellDiscount\",\"type\":\"uint256\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interfaces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isLiquidityPair\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDividendExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isFeeOracleExempt\",\"type\":\"bool\"}],\"name\":\"setAtronExclusions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnThreshold\",\"type\":\"uint256\"}],\"name\":\"setBurnThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setDexRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeOracle\",\"name\":\"_feeOracle\",\"type\":\"address\"}],\"name\":\"setFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeRouter\",\"name\":\"_feeRouter\",\"type\":\"address\"}],\"name\":\"setFeeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interfaceAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isInterface\",\"type\":\"bool\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setNewFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ATRON", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd3c1f317d1815a959fb2aabe0e4f1458535a976e400017433571efefdcb0e4a"}