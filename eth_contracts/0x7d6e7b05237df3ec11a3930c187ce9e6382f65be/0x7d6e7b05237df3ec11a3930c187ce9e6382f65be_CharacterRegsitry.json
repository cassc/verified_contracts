{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public owner;\r\n\r\n    constructor() { \r\n        owner = msg.sender; \r\n    }\r\n    \r\n    modifier onlyOwner { \r\n        require(owner == msg.sender, \"onlyOwner not owner!\");\r\n        _; \r\n    }\r\n    \r\n    function transferOwnership(address new_) external onlyOwner {\r\n        address _old = owner;\r\n        owner = new_;\r\n        emit OwnershipTransferred(_old, new_);\r\n    }\r\n}\r\n\r\nabstract contract Controllerable is Ownable {\r\n\r\n    event ControllerSet(string indexed controllerType, bytes32 indexed controllerSlot, \r\n        address indexed controller, bool status);\r\n\r\n    mapping(bytes32 => mapping(address => bool)) internal __controllers;\r\n\r\n    function isController(string memory type_, address controller_) public \r\n    view returns (bool) {\r\n        bytes32 _slot = keccak256(abi.encodePacked(type_));\r\n        return __controllers[_slot][controller_];\r\n    }\r\n\r\n    modifier onlyController(string memory type_) {\r\n        require(isController(type_, msg.sender), \"Controllerable: Not Controller!\");\r\n        _;\r\n    }\r\n\r\n    function setController(string memory type_, address controller_, bool bool_) \r\n    public onlyOwner {\r\n        bytes32 _slot = keccak256(abi.encodePacked(type_));\r\n        __controllers[_slot][controller_] = bool_;\r\n        emit ControllerSet(type_, _slot, controller_, bool_);\r\n    }\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from_, address to_, uint256 amount_) \r\n    external returns (bool);\r\n}\r\n\r\n// This simple contract simply lets you take the helmet of your character\r\n// Off or on\r\ncontract CharacterRegsitry is Controllerable {\r\n\r\n    // NOTE: MARTIANS ADDRESS MUST BE CHANGED TO V3!!! THIS IS V2!\r\n    IERC721 public Martians = IERC721(0x53beA59B69bF9e58E0AFeEB4f34f49Fc29D10F55); \r\n    IERC20 public MES = IERC20(0x3C2Eb40D25a4b2B5A068a959a40d57D63Dc98B95);\r\n\r\n    event HelmetOff(address indexed owner, uint256 indexed tokenId);\r\n    event HelmetOn(address indexed owner, uint256 indexed tokenId);\r\n    \r\n    // Helmets are on by default\r\n    mapping(uint256 => bool) public characterToHelmetOff;\r\n\r\n    uint256 public HELMET_CHANGE_COST = 50 ether; // Not Immutable!\r\n\r\n    ///// Administrative Functions /////\r\n    function O_setContracts(address martians_, address mes_) external onlyOwner {\r\n        if (martians_ != address(0)) Martians = IERC721(martians_);\r\n        if (mes_ != address(0)) MES = IERC20(mes_);\r\n    }\r\n    function O_setHelmetChangeCost(uint256 cost_) external onlyOwner {\r\n        HELMET_CHANGE_COST = cost_;\r\n    }\r\n\r\n    ///// Controller Functions /////\r\n    function C_takeHelmetsOff(uint256[] calldata tokenIds_) external \r\n    onlyController(\"SETTER\") {\r\n        uint256 l = tokenIds_.length;\r\n        for (uint256 i = 0; i < l;) {\r\n            require(!characterToHelmetOff[tokenIds_[i]],\r\n                    \"Character already has helmet off\");\r\n            characterToHelmetOff[tokenIds_[i]] = true;\r\n            emit HelmetOff(msg.sender, tokenIds_[i]);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n    function C_putHelmetsOn(uint256[] calldata tokenIds_) external \r\n    onlyController(\"SETTER\") {\r\n        uint256 l = tokenIds_.length;\r\n        for (uint256 i = 0; i < l;) {\r\n            require(characterToHelmetOff[tokenIds_[i]],\r\n                    \"Character already has helmet on\");\r\n            delete characterToHelmetOff[tokenIds_[i]];\r\n            emit HelmetOn(msg.sender, tokenIds_[i]);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    // Take off the helmet\r\n    function takeOffHelmet(uint256 tokenId_) external {\r\n        // Validate Ownership\r\n        require(msg.sender == Martians.ownerOf(tokenId_),\r\n                \"You are not the owner!\");\r\n\r\n        // Validate Helmet Status\r\n        require(!characterToHelmetOff[tokenId_], \r\n                \"Character already has helmet off\");\r\n        \r\n        // Consume $MES\r\n        bool _success = MES.transferFrom(msg.sender, address(this), HELMET_CHANGE_COST);\r\n        require(_success, \"$MES deduction failed!\");\r\n\r\n        // Set the Helmet Config\r\n        characterToHelmetOff[tokenId_] = true;\r\n\r\n        // Emit HelmetOff event\r\n        emit HelmetOff(msg.sender, tokenId_);\r\n    }\r\n\r\n    // Put on the helmet\r\n    function putOnHelmet(uint256 tokenId_) external {\r\n        // Validate Ownership\r\n        require(msg.sender == Martians.ownerOf(tokenId_),\r\n                \"You are not the owner!\");\r\n\r\n        // Validate Helmet Status\r\n        require(characterToHelmetOff[tokenId_],\r\n                \"Character already has helmet on\");\r\n\r\n        // Consume $MES\r\n        bool _success = MES.transferFrom(msg.sender, address(this), HELMET_CHANGE_COST);\r\n        require(_success, \"$MES deduction failed!\");\r\n\r\n        // Set the Helmet Config\r\n        delete characterToHelmetOff[tokenId_];\r\n\r\n        // Emit HelmetOff event\r\n        emit HelmetOn(msg.sender, tokenId_);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"controllerType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerSlot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HelmetOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HelmetOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"C_putHelmetsOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"C_takeHelmetsOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELMET_CHANGE_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MES\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Martians\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"martians_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mes_\",\"type\":\"address\"}],\"name\":\"O_setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost_\",\"type\":\"uint256\"}],\"name\":\"O_setHelmetChangeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characterToHelmetOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"putOnHelmet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"takeOffHelmet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CharacterRegsitry", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2dc562416480bfba4b53d3111dd2036756182e98b46fe3cb12af77847ab793a7"}