{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IArbitrage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IArbitrage {\\n  event SetPriceTolerance(uint16 priceTolerance);\\n  event SetMaxMintPriceDiff(uint256 maxMintPriceDiff);\\n  event Mint(address indexed account, address token, uint256 amount, uint256 uscAmount);\\n  event ExecuteArbitrage(\\n    address indexed account,\\n    uint256 indexed arbNum,\\n    uint256 deltaUsd,\\n    uint256 reserveDiff,\\n    uint256 ethPrice,\\n    uint256 rewardValue\\n  );\\n\\n  error DeltaBiggerThanAmountReceivedETH(uint256 deltaETH, uint256 receivedETH);\\n  error ToleranceTooBig(uint16 _tolerance);\\n  error PriceSlippageTooBig();\\n\\n  /// @notice Sets spot price tolerance from TWAP price\\n  /// @dev 100% = 10000\\n  /// @param _priceTolerance Price tolerance in percents\\n  /// @custom:usage This function should be called from owner in purpose of setting price tolerance\\n  function setPriceTolerance(uint16 _priceTolerance) external;\\n\\n  /// @notice Sets max mint price diff\\n  /// @param _maxMintPriceDiff Max mint price diff\\n  /// @custom:usage This function should be called from owner in purpose of setting max mint price diff\\n  function setMaxMintPriceDiff(uint256 _maxMintPriceDiff) external;\\n\\n  /// @notice Mint USC tokens for ETH\\n  /// @dev If USC price is different from target price for less then max mint price diff, then minting is allowed without performing arbitrage\\n  /// @return uscAmount Amount of USC tokens minted\\n  function mint() external payable returns (uint256 uscAmount);\\n\\n  /// @notice Mint USC tokens for WETH\\n  /// @dev If USC price is different from target price for less then max mint price diff, then minting is allowed without performing arbitrage\\n  /// @param wethAmount Amount of WETH to mint with\\n  /// @return uscAmount Amount of USC tokens minted\\n  function mintWithWETH(uint256 wethAmount) external returns (uint256 uscAmount);\\n\\n  /// @notice Mint USC tokens for stETH\\n  /// @dev If USC price is different from target price for less then max mint price diff, then minting is allowed without performing arbitrage\\n  /// @param stETHAmount Amount of stETH to mint with\\n  /// @return uscAmount Amount of USC tokens minted\\n  function mintWithStETH(uint256 stETHAmount) external returns (uint256 uscAmount);\\n\\n  /// @notice Executes arbitrage, profit sent to caller\\n  /// @notice Returns reward value in USD\\n  /// @return rewardValue Reward value in USD\\n  /// @custom:usage This function should be called from external keeper in purpose of pegging USC price and getting reward\\n  /// @custom:usage This function has no restrictions, anyone can be arbitrager\\n  function executeArbitrage() external returns (uint256 rewardValue);\\n\\n  /// @notice Gets information for perfoming arbitrage such as price diff, reserve diff, discount\\n  /// @return isPriceAboveTarget True if USC price is above target price\\n  /// @return isExcessOfReserves True if there is excess of reserves\\n  /// @return reserveDiff Reserve diff, excess or deficit of reserves\\n  /// @return discount Discount in percents, only if price is equal to target price\\n  function getArbitrageData()\\n    external\\n    view\\n    returns (bool isPriceAboveTarget, bool isExcessOfReserves, uint256 reserveDiff, uint256 discount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBurnableERC20 {\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChiLocking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChiLocking {\\n  struct LockedPosition {\\n    uint256 amount;\\n    uint256 startEpoch;\\n    uint256 duration; // in epochs\\n    uint256 shares;\\n    uint256 withdrawnChiAmount;\\n  }\\n\\n  struct LockingData {\\n    uint256 lastUpdatedEpoch;\\n    uint256 unclaimedStETH;\\n    LockedPosition[] positions;\\n  }\\n\\n  struct AllLockedPositionsOutput {\\n    LockedPosition position;\\n    uint256 votingPower;\\n    uint256 stETHreward;\\n    uint256 totalAccumulatedChi;\\n    uint256 totalChiRewards;\\n  }\\n\\n  struct EpochData {\\n    uint256 lockedSharesInEpoch;\\n    uint256 totalLockedChiInEpoch;\\n    uint256 sharesToUnlock;\\n    uint256 cumulativeStETHPerLockedShare;\\n    uint256 cumulativeStETHPerUnlocked;\\n    uint256 numberOfEndingPositions;\\n  }\\n\\n  event SetUscStaking(address indexed uscStaking);\\n  event SetRewardController(address indexed rewardController);\\n  event SetChiLocker(address indexed chiLocker, bool indexed status);\\n  event LockChi(address indexed account, uint256 amount, uint256 shares, uint256 startEpoch, uint256 endEpoch);\\n  event UpdateEpoch(\\n    uint256 indexed epoch,\\n    uint256 totalLockedChi,\\n    uint256 chiEmissions,\\n    uint256 stETHrewards,\\n    uint256 stEthPerLockedShare\\n  );\\n  event ClaimStETH(address indexed account, uint256 amount);\\n  event WithdrawChiFromAccount(address indexed account, address indexed toAddress, uint256 amount);\\n\\n  error ZeroAmount();\\n  error NotRewardController();\\n  error NotChiLocker();\\n  error UnavailableWithdrawAmount(uint256 amount);\\n\\n  /// @notice Sets address of uscStaking contract\\n  /// @param _uscStaking Address of uscStaking contract\\n  function setUscStaking(address _uscStaking) external;\\n\\n  /// @notice Sets address of rewardController contract\\n  /// @param _rewardController Address of rewardController contract\\n  function setRewardController(address _rewardController) external;\\n\\n  /// @notice Sets address of contract who can call lock function\\n  /// @param contractAddress Address of contract who calles lock function, chiStaking currently\\n  /// @param toSet true if contract can call lock function, false otherwise\\n  function setChiLocker(address contractAddress, bool toSet) external;\\n\\n  /// @notice Gets locked position for given account and position index\\n  /// @param account Account to get locked position for\\n  /// @param pos Index of locked position\\n  /// @return position Locked position\\n  function getLockedPosition(address account, uint256 pos) external view returns (LockedPosition memory position);\\n\\n  /// @notice Gets all locked position for given account\\n  /// @param account Account to get locked positions\\n  /// @return out Array of locked positions\\n  function getAllLockedPositions(address account) external view returns (AllLockedPositionsOutput[] memory out);\\n\\n  /// @notice Gets total staked chi amount, locked amount is also considered staked\\n  /// @return stakedChi Total staked chi amount\\n  function getStakedChi() external view returns (uint256 stakedChi);\\n\\n  /// @notice Gets total locked chi amount\\n  /// @return lockedChi Total locked chi amount\\n  function getLockedChi() external view returns (uint256 lockedChi);\\n\\n  /// @notice Gets total voting power\\n  /// @return totalVotingPower Total voting power\\n  function getTotalVotingPower() external view returns (uint256 totalVotingPower);\\n\\n  /// @notice Gets total chi amount that is available to withdraw for given account\\n  /// @param account Account to get available chi amount for\\n  /// @return availableTotal Total amount of chi that is available to withdraw\\n  function availableChiWithdraw(address account) external view returns (uint256 availableTotal);\\n\\n  /// @notice Locks given amount of chi for given account for given duration\\n  /// @param account Account to lock chi for\\n  /// @param amount Amount of chi to lock\\n  /// @param duration Duration of locking in epochs\\n  /// @custom:usage This function should be called from chiStaking and uscStaking contracts in purpose of locking chi\\n  function lockChi(address account, uint256 amount, uint256 duration) external;\\n\\n  /// @notice Updates epoch data\\n  /// @param chiEmissions Amount of chi incentives for chi lockers that is emitted in current epoch\\n  /// @param stETHrewards Amount of stETH rewards for chi lockers that is emitted in current epoch\\n  /// @custom:usage This function should be called from rewardController contract in purpose of updating epoch data\\n  function updateEpoch(uint256 chiEmissions, uint256 stETHrewards) external;\\n\\n  /// @notice Claims stETH rewards for given account\\n  /// @notice This contract does not send stETH rewards nor holds them, reserveHolder does that\\n  /// @notice This contract only calculates and updates unclaimed stETH amount for given account\\n  /// @param account Account to claim stETH rewards for\\n  /// @return amount Amount of stETH rewards that user can claim\\n  /// @custom:usage This function should be called from rewardController contract in purpose of claiming stETH rewards\\n  function claimStETH(address account) external returns (uint256 amount);\\n\\n  /// @notice Withdraws given amount of unlocked chi tokens for given account, sends to account by default\\n  /// @notice This contract hold CHI tokens and inside this function sends them back to user\\n  /// @param account Account to withdraw CHI for\\n  /// @param amount Amount of CHI tokens to withdraw\\n  /// @custom:usage This function should be called from chiStaking contract in purpose of withdrawing CHI tokens\\n  function withdrawChiFromAccount(address account, uint256 amount) external;\\n\\n  /// @notice Withdraws given amount of unlocked chi tokens for given account, sends to account by default\\n  /// @notice This contract hold CHI tokens and inside this function sends them back to user\\n  /// @param account Account to withdraw CHI for\\n  /// @param toAddress Address to which to send tokens\\n  /// @param amount Amount of CHI tokens to withdraw\\n  /// @custom:usage This function should be called from chiStaking contract in purpose of withdrawing CHI tokens\\n  function withdrawChiFromAccountToAddress(address account, address toAddress, uint256 amount) external;\\n\\n  /// @notice Calculates and returns unclaimed stETH amount for given account\\n  /// @param account Account to calculate unclaimed stETH amount for\\n  /// @return totalAmount Total amount of unclaimed stETH for given account\\n  function unclaimedStETHAmount(address account) external view returns (uint256 totalAmount);\\n\\n  /// @notice Calculates and returns voting power for given account\\n  /// @param account Account to calculate voting power for\\n  /// @return votingPower Voting power for given account\\n  function getVotingPower(address account) external view returns (uint256 votingPower);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChiStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IChiLocking} from \\\"./IChiLocking.sol\\\";\\nimport {IStaking} from \\\"./IStaking.sol\\\";\\n\\ninterface IChiStaking is IStaking {\\n  event Lock(address indexed account, uint256 amount, uint256 duration, bool useStakedTokens);\\n  event ClaimStETH(address indexed account, uint256 amount);\\n  event SetChiLocking(address indexed chiLocking);\\n  event SetRewardController(address indexed rewardController);\\n\\n  error InvalidDuration(uint256 duration);\\n\\n  /// @notice Sets address of chiLocking contract\\n  /// @param _chiLocking Address of chiLocking contract\\n  function setChiLocking(IChiLocking _chiLocking) external;\\n\\n  /// @notice Updates epoch data\\n  /// @param stETHrewards Amount of stETH rewards for chi stakers that is emitted in current epoch\\n  /// @custom:usage This function should be called from rewardController contract in purpose of updating epoch data\\n  function updateEpoch(uint256 stETHrewards) external;\\n\\n  /// @notice Locks given amount of chi tokens for given duration for caller\\n  /// @dev If caller want to use staked tokens for locking, function will unstake them first\\n  /// @param amount Amount of chi tokens to lock\\n  /// @param duration Locking duration in epochs\\n  /// @param useStakedTokens If true, then staked tokens will be used for locking\\n  function lock(uint256 amount, uint256 duration, bool useStakedTokens) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChiVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChiVesting {\\n  struct VestingData {\\n    uint256 startAmount;\\n    uint256 shares;\\n    uint256 unlockedChi;\\n    uint256 lastWithdrawnEpoch;\\n    uint256 unclaimedStETH;\\n    uint256 lastClaimedEpoch;\\n  }\\n\\n  struct EpochData {\\n    uint256 cumulativeStETHRewardPerShare;\\n    uint256 cumulativeUnlockedPerShare;\\n  }\\n\\n  event AddVesting(address indexed account, uint256 amount, uint256 shares);\\n  event UpdateEpoch(uint256 indexed epoch, uint256 stETHrewards, uint256 totalLockedChi);\\n  event WithdrawChi(address indexed account, uint256 amount);\\n  event ClaimStETH(address indexed account, uint256 amount);\\n  event SetRewardController(address indexed rewardController);\\n  event SetChiVester(address indexed chiVester, bool indexed toSet);\\n\\n  error NotRewardController();\\n  error NotChiVester();\\n  error CliffPassed();\\n  error UnavailableWithdrawAmount(uint256 amount);\\n\\n  /// @notice Gets cliff duration\\n  /// @return duration Cliff duration\\n  function cliffDuration() external view returns (uint256 duration);\\n\\n  /// @notice Sets address of rewardController contract\\n  /// @param rewardController Address of rewardController contract\\n  function setRewardController(address rewardController) external;\\n\\n  /// @notice Updates status of contract that can add vesting, TimeWeightedBonding contract in this case\\n  /// @param contractAddress Address of contract\\n  /// @param toSet Status to set\\n  function setChiVester(address contractAddress, bool toSet) external;\\n\\n  /// @notice Gets total locked chi amount\\n  /// @return lockedChi Total locked chi amount\\n  function getLockedChi() external view returns (uint256 lockedChi);\\n\\n  /// @notice Vests given amount of chi tokens for given account\\n  /// @param account Account to vest tokens for\\n  /// @param chiAmount Amount of chi tokens to vest\\n  /// @custom:usage This function should be called from TimeWeightedBonding contract in purpose of vesting chi tokens\\n  function addVesting(address account, uint256 chiAmount) external;\\n\\n  /// @notice Updates epoch data\\n  /// @param chiEmissions Amount of chi incentives for vesters in current epoch\\n  /// @param stETHrewards Amount of stETH rewards for vesters that is emitted in current epoch\\n  /// @custom:usage This function should be called from rewardController contract in purpose of updating epoch data\\n  function updateEpoch(uint256 chiEmissions, uint256 stETHrewards) external;\\n\\n  /// @notice Withdraws vested chi tokens for caller\\n  /// @dev Contract hold vested chi tokens and inside this function it transfers them to caller\\n  /// @param amount Amount of chi tokens to withdraw\\n  function withdrawChi(uint256 amount) external;\\n\\n  /// @notice Claims stETH rewards for given account\\n  /// @notice This contract does not send stETH rewards nor holds them, reserveHolder does that\\n  /// @notice This contract only calculates and updates unclaimed stETH amount for given account\\n  /// @param account Account to claim stETH rewards for\\n  /// @return amount Amount of stETH rewards that user can claim\\n  /// @custom:usage This function should be called from rewardController contract in purpose of claiming stETH rewards\\n  function claimStETH(address account) external returns (uint256 amount);\\n\\n  /// @notice Calculates and returns unclaimed stETH rewards for given account\\n  /// @param account Account to calculate unclaimed stETH rewards for\\n  /// @return amount Amount of unclaimed stETH rewards\\n  function unclaimedStETHAmount(address account) external view returns (uint256 amount);\\n\\n  /// @notice Calculates and returns voting power earned from vesting for given account\\n  /// @param account Account to calculate voting power for\\n  /// @return votingPower Voting power earned from vesting\\n  function getVotingPower(address account) external view returns (uint256 votingPower);\\n\\n  /// @notice Gets total voting power\\n  /// @return totalVotingPower Total voting power\\n  function getTotalVotingPower() external view returns (uint256 totalVotingPower);\\n\\n  /// @notice Calculates and returns chi amount that is available for withdrawing for given account\\n  /// @param account Account to calculate available chi amount for\\n  /// @return availableChi Total amount of chi that is available for withdrawing\\n  function availableChiWithdraw(address account) external view returns (uint256 availableChi);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IStakingWithEpochs} from \\\"./IStakingWithEpochs.sol\\\";\\nimport {IStaking} from \\\"./IStaking.sol\\\";\\n\\ninterface ILPStaking is IStakingWithEpochs, IStaking {\\n  event UpdateEpoch(uint256 indexed epoch, uint256 chiEmissions);\\n  event LockChi(address indexed account, uint256 amount, uint256 duration);\\n  event ClaimStETH(address indexed account, uint256 amount);\\n\\n  error InvalidDuration(uint256 duration);\\n\\n  function updateEpoch(uint256, uint256) external;\\n\\n  function lockChi(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableERC20 is IERC20 {\\n  function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserveHolder {\\n  event SetArbitrager(address indexed arbitrager, bool enabled);\\n  event SetClaimer(address indexed claimer);\\n  event SetEthThreshold(uint256 threshold);\\n  event SetSwapEthTolerance(uint256 tolerance);\\n  event SetCurveStEthSafeGuardPercentage(uint256 percentage);\\n  event Deposit(address indexed account, uint256 amount);\\n  event Rebalance(uint256 ethAmount, uint256 stEthAmount);\\n  event Redeem(address indexed account, uint256 amount);\\n  event RedeemSwap(uint256 ethAmount, uint256 stEthAmount);\\n  event ClaimRewards(address indexed account, uint256 amount);\\n  event Receive(address indexed account, uint256 amount);\\n\\n  error NotArbitrager(address _account);\\n  error NotClaimer(address _account);\\n  error ThresholdTooHigh(uint256 _threshold);\\n  error SafeGuardTooHigh(uint256 _safeGuard);\\n  error EtherSendFailed(address _account, uint256 _amount);\\n\\n  /// @notice Updates arbitrager status\\n  /// @param arbitrager Arbitrager address\\n  /// @param status Arbitrager status\\n  function setArbitrager(address arbitrager, bool status) external;\\n\\n  /// @notice Sets claimer address\\n  /// @param claimer Claimer address\\n  /// @custom:usage Claimer should be rewardController contract\\n  function setClaimer(address claimer) external;\\n\\n  /// @notice Sets eth threshold\\n  /// @param ethThreshold Eth threshold\\n  /// @custom:usage Eth threshold should be set in percentage\\n  /// @custom:usage Part of reserves is in WETH so arbitrage contract can use them without swapping stETH for ETH\\n  function setEthThreshold(uint256 ethThreshold) external;\\n\\n  /// @notice Sets swap eth tolerance\\n  /// @param swapEthTolerance Swap eth tolerance\\n  /// @custom:usage Swap eth tolerance should be set in wei\\n  /// @custom:usage Absolute tolerance for swapping stETH for ETH\\n  function setSwapEthTolerance(uint256 swapEthTolerance) external;\\n\\n  /// @notice Sets curve stETH safe guard percentage\\n  /// @param curveStEthSafeGuardPercentage Curve stETH safe guard percentage\\n  function setCurveStEthSafeGuardPercentage(uint256 curveStEthSafeGuardPercentage) external;\\n\\n  /// @notice Gets reserve value in USD\\n  /// @return reserveValue Reserve value in USD\\n  function getReserveValue() external view returns (uint256 reserveValue);\\n\\n  /// @notice Gets current rewards generated by stETH\\n  /// @return currentRewards Current rewards generated by stETH\\n  function getCurrentRewards() external view returns (uint256 currentRewards);\\n\\n  /// @notice Gets cumulative rewards generated by stETH\\n  /// @return cumulativeRewards Cumulative rewards generated by stETH\\n  function getCumulativeRewards() external view returns (uint256 cumulativeRewards);\\n\\n  /// @notice Deposits stETH to reseves\\n  /// @param amount Amount of stETH to deposit\\n  function deposit(uint256 amount) external;\\n\\n  /// @notice Rebalance reserve in order to achieve balace/ethThreshold ratio\\n  /// @dev If there is more WETH than ethThreshold then unwrap WETH and get stETH from Lido\\n  /// @dev If there is less WETH than ethThreshold then swap stETH for WETH on UniV2\\n  /// @custom:usage This function should be called by external keeper\\n  function rebalance() external;\\n\\n  /// @notice Redeems stETH from reserves\\n  /// @param amount Amount of stETH to redeem\\n  /// @return wethAmount Amount of WETH received\\n  /// @custom:usage This function should be called by arbitrage contract\\n  function redeem(uint256 amount) external returns (uint256 wethAmount);\\n\\n  /// @notice Claims stETH rewards in given amount for given account\\n  /// @notice Contract does not perform any check and is relying on rewardController contract to perform them\\n  /// @param account Account to claim stETH rewards for\\n  /// @param amount Amount of stETH to claim\\n  /// @custom:usage This function should be called by rewardController contract\\n  function claimRewards(address account, uint256 amount) external;\\n\\n  /// @notice Wrapps ETH to WETH\\n  /// @dev Users can buy USC with ETH which is transfered to this contract. This function should be called to wrapp than ETH to WETH\\n  /// @custom:usage This function should be called by external keeper\\n  function wrapETH() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IArbitrage} from \\\"./IArbitrage.sol\\\";\\n\\ninterface IRewardController {\\n  struct EpochData {\\n    uint256 totalUscReward;\\n    uint256 reserveHolderTotalRewards;\\n  }\\n\\n  struct StETHRewards {\\n    uint256 uscStakingStEthReward;\\n    uint256 chiStakingStEthReward;\\n    uint256 chiLockingStEthReward;\\n    uint256 chiVestingStEthReward;\\n    uint256 uscEthLPStakingStEthReward;\\n    uint256 chiEthLPStakingStEthReward;\\n  }\\n\\n  struct ChiIncentives {\\n    uint256 uscStakingChiIncentives;\\n    uint256 chiLockingChiIncentives;\\n    uint256 chiVestingChiIncentives;\\n  }\\n\\n  event RewardUSC(address indexed account, uint256 amount);\\n  event UpdateEpoch(uint256 indexed epoch, uint256 totalStEthReward, uint256 totalChiIncentives);\\n  event ClaimStEth(address indexed account, uint256 amount);\\n  event SetChiIncentivesPerEpoch(uint256 indexed chiIncentivesPerEpoch);\\n  event SetArbitrager(address indexed arbitrager);\\n\\n  error ZeroAmount();\\n  error NotArbitrager();\\n  error EpochNotFinished();\\n\\n  /// @notice Set amount of chi incentives per epoch for chi lockers\\n  /// @param _chiIncentivesForChiLocking Amount of chi incentives per epoch\\n  function setChiIncentivesForChiLocking(uint256 _chiIncentivesForChiLocking) external;\\n\\n  /// @notice Set amount of chi incentives per epoch for USC staking\\n  /// @param _chiIncentivesForUscStaking Amount of chi incentives per epoch\\n  function setChiIncentivesForUscStaking(uint256 _chiIncentivesForUscStaking) external;\\n\\n  /// @notice Set amount of chi incentives per epoch for USC-ETH LP staking contracts\\n  /// @param _chiIncentivesForUscEthLPStaking Amount of chi incentives per epoch\\n  function setChiIncentivesForUscEthLPStaking(uint256 _chiIncentivesForUscEthLPStaking) external;\\n\\n  /// @notice Set amount of chi incentives per epoch for CHI-ETH LP staking contracts\\n  /// @param _chiIncentivesForChiEthLPStaking Amount of chi incentives per epoch\\n  function setChiIncentivesForChiEthLPStaking(uint256 _chiIncentivesForChiEthLPStaking) external;\\n\\n  /// @notice Sets arbitrager contract\\n  /// @param _arbitrager Arbitrager contract\\n  function setArbitrager(IArbitrage _arbitrager) external;\\n\\n  /// @notice Freezes given amount of USC token\\n  /// @dev Frozen tokens are not transfered they are burned and later minted again when conditions are met\\n  /// @param amount Amount of USC tokens to freeze\\n  /// @custom:usage This function should be called from Arbitrager contract in purpose of freezing USC tokens\\n  function rewardUSC(uint256 amount) external;\\n\\n  /// @notice Updates epoch data\\n  /// @dev This functio will update epochs in all subcontracts and will distribute chi incentives and stETH rewards\\n  /// @custom:usage This function should be called once a week in order to end current epoch and start new one\\n  /// @custom:usage Thsi function ends current epoch and distributes chi incentives and stETH rewards to all contracts in this epoch\\n  function updateEpoch() external;\\n\\n  /// @notice Claims stETH rewards for caller\\n  /// @dev This function will claim stETH rewards from all subcontracts and will send them to caller\\n  /// @dev Thsi contract does not hold stETH, instead it sends it through reserveHolder contract\\n  function claimStEth() external;\\n\\n  /// @notice Calculates and returns unclaimed stETH amount for given account in all subcontracts\\n  /// @param account Account to calculate unclaimed stETH amount for\\n  /// @return totalAmount Total amount of unclaimed stETH for given account\\n  function unclaimedStETHAmount(address account) external view returns (uint256 totalAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IStakingWithEpochs} from \\\"./IStakingWithEpochs.sol\\\";\\n\\ninterface IStaking is IStakingWithEpochs {\\n  /// @notice Sets address of rewardController contract\\n  /// @param rewardController Address of rewardController contract\\n  function setRewardController(address rewardController) external;\\n\\n  /// @notice Gets total staked chi amount\\n  /// @return stakedChi Total staked chi amount\\n  function getStakedChi() external view returns (uint256 stakedChi);\\n\\n  /// @notice Claims stETH rewards for given account\\n  /// @notice This contract does not send stETH rewards nor holds them, reserveHolder does that\\n  /// @notice This contract only calculates and updates unclaimed stETH amount for given account\\n  /// @param account Account to claim stETH rewards for\\n  /// @return amount Amount of stETH rewards that user can claim\\n  /// @custom:usage This function should be called from rewardController contract in purpose of claiming stETH rewards\\n  function claimStETH(address account) external returns (uint256 amount);\\n\\n  /// @notice Calculates and returns unclaimed stETH rewards for given account\\n  /// @param account Account to calculate unclaimed stETH rewards for\\n  /// @return amount Amount of unclaimed stETH rewards\\n  function unclaimedStETHAmount(address account) external view returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingWithEpochs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStakingWithEpochs {\\n  enum RewardToken {\\n    USC,\\n    CHI,\\n    STETH\\n  }\\n\\n  struct EpochData {\\n    uint256 shares;\\n    mapping(RewardToken => uint256) cumulativeRewardsPerShare;\\n  }\\n\\n  struct StakeData {\\n    uint256 lastUpdatedEpoch;\\n    uint256 shares;\\n    uint256 addSharesNextEpoch;\\n    mapping(RewardToken => uint256) unclaimedRewards;\\n  }\\n\\n  event Stake(address indexed account, uint256 amount);\\n  event Unstake(address indexed account, address indexed toAddress, uint256 amount);\\n\\n  error ZeroAmount();\\n  error NotRewardController();\\n  error AmountBelowStakedBalance(uint256 stakedBalance, uint256 amount);\\n\\n  /// @notice Gets current reward for given account and token\\n  /// @param account Account to get reward for\\n  /// @param token Token to get reward for\\n  /// @return amount Current reward for given account and token\\n  /// @custom:usage This function should be used in inheriting contracts to get current reward for given account and token\\n  function getUnclaimedRewards(address account, RewardToken token) external view returns (uint256 amount);\\n\\n  /// @notice Gets cumulative reward per share for given account and token\\n  /// @param epoch Epoch to get cumulative reward per share for\\n  /// @param token Token to get cumulative reward per share for\\n  /// @return amount Cumulative reward per share for given epoch and token\\n  /// @custom:usage This function should be used in inheriting contracts to get cumulative reward per share for given epoch and token\\n  function getCumulativeRewardsPerShare(uint256 epoch, RewardToken token) external view returns (uint256 amount);\\n\\n  /// @notice Stakes given amount of tokens\\n  /// @param amount Amount of tokens to stake\\n  /// @custom:usage This function should be called from inheriting contracts to stake tokens\\n  /// @custom:usage Logic should be the same for both uscStaking and chiStaking contracts\\n  function stake(uint256 amount) external;\\n\\n  /// @notice Unstakes given amount of tokens, sends tokens to msg.sender by default\\n  /// @param amount Amount of tokens to unstake\\n  /// @custom:usage This function should be called from inheriting contracts to unstake tokens\\n  /// @custom:usage Logic should be the same for both uscStaking and chiStaking contracts\\n  function unstake(uint256 amount) external;\\n\\n  /// @notice Unstakes given amount of tokens\\n  /// @param amount Amount of tokens to unstake\\n  /// @param toAddress Address to send tokens\\n  /// @custom:usage This function should be called from inheriting contracts to unstake tokens\\n  /// @custom:usage Logic should be the same for both uscStaking and chiStaking contracts\\n  function unstake(uint256 amount, address toAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUSCStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IStaking} from \\\"./IStaking.sol\\\";\\nimport {IArbitrage} from \\\"./IArbitrage.sol\\\";\\n\\ninterface IUSCStaking is IStaking {\\n  event UpdateEpoch(uint256 indexed epoch, uint256 chiEmissions, uint256 uscRewards, uint256 stETHrewards);\\n  event LockChi(address indexed account, uint256 amount, uint256 duration);\\n  event ClaimUSCRewards(address indexed account, uint256 amount);\\n  event ClaimStETH(address indexed account, uint256 amount);\\n\\n  error NotClaimable();\\n  error InvalidDuration(uint256 duration);\\n\\n  /// @notice Updates epoch data\\n  /// @param chiEmissions Amount of CHI token incentives emitted in current epoch for USC stakers\\n  /// @param uscRewards Amount of USC token frozen in current epoch for USC stakers\\n  /// @param stETHrewards Amount of stETH token rewards in current epoch for USC stakers\\n  /// @custom:usage This function should be called from rewardController contract in purpose of updating epoch data\\n  function updateEpoch(uint256 chiEmissions, uint256 uscRewards, uint256 stETHrewards) external;\\n\\n  /// @notice Locks CHI tokens that user earned from incentives for given duration\\n  /// @param duration Locking duration in epochs\\n  function lockChi(uint256 duration) external;\\n\\n  /// @notice Claims USC rewards for caller\\n  /// @dev This function can be called only when price is above target and there is excess of reserves\\n  function claimUSCRewards() external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/RewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IRewardController.sol\\\";\\nimport \\\"../interfaces/IMintableERC20.sol\\\";\\nimport \\\"../interfaces/IBurnableERC20.sol\\\";\\nimport \\\"../interfaces/IArbitrage.sol\\\";\\nimport \\\"../interfaces/IReserveHolder.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/IUSCStaking.sol\\\";\\nimport \\\"../interfaces/IChiStaking.sol\\\";\\nimport \\\"../interfaces/IChiLocking.sol\\\";\\nimport \\\"../interfaces/IChiVesting.sol\\\";\\nimport \\\"../interfaces/ILPStaking.sol\\\";\\n\\n/// @title Contract for managing rewards\\n/// @notice This contract manages rewards for chi lockers, chi stakers, chi vesters and usc stakers\\n/// @notice This contract holds chi incentives for all contracts and distributes then at the end of epoch\\n/// @dev This contract is upgradeable\\ncontract RewardController is IRewardController, OwnableUpgradeable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant EPOCH_DURATION = 1 weeks;\\n\\n  IERC20 public chi;\\n  IERC20 public usc;\\n  IReserveHolder public reserveHolder;\\n  IArbitrage public arbitrager;\\n  IUSCStaking public uscStaking;\\n  IChiStaking public chiStaking;\\n  IChiLocking public chiLocking;\\n  IChiVesting public chiVesting;\\n  ILPStaking public uscEthLPStaking;\\n  ILPStaking public chiEthLPStaking;\\n\\n  uint256 public currentEpoch;\\n  uint256 public firstEpochTimestamp;\\n  uint256 public chiIncentivesForChiLocking;\\n  uint256 public chiIncentivesForUscStaking;\\n  uint256 public chiIncentivesForUscEthLPStaking;\\n  uint256 public chiIncentivesForChiEthLPStaking;\\n\\n  mapping(uint256 id => EpochData) public epochs;\\n\\n  modifier onlyArbitrager() {\\n    if (msg.sender != address(arbitrager)) {\\n      revert NotArbitrager();\\n    }\\n    _;\\n  }\\n\\n  function initialize(\\n    IERC20 _chi,\\n    IERC20 _usc,\\n    IReserveHolder _reserveHolder,\\n    IUSCStaking _uscStaking,\\n    IChiStaking _chiStaking,\\n    IChiLocking _chiLocking,\\n    IChiVesting _chiVesting,\\n    ILPStaking _uscEthLPStaking,\\n    ILPStaking _chiEthLPStaking,\\n    uint256 _firstEpochTimestamp\\n  ) external initializer {\\n    __Ownable_init();\\n    chi = _chi;\\n    usc = _usc;\\n    reserveHolder = _reserveHolder;\\n    uscStaking = _uscStaking;\\n    chiStaking = _chiStaking;\\n    chiLocking = _chiLocking;\\n    chiVesting = _chiVesting;\\n    uscEthLPStaking = _uscEthLPStaking;\\n    chiEthLPStaking = _chiEthLPStaking;\\n    firstEpochTimestamp = _firstEpochTimestamp;\\n    currentEpoch = 1;\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function setChiIncentivesForChiLocking(uint256 _chiIncentivesForChiLocking) external onlyOwner {\\n    chiIncentivesForChiLocking = _chiIncentivesForChiLocking;\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function setChiIncentivesForUscStaking(uint256 _chiIncentivesForUscStaking) external onlyOwner {\\n    chiIncentivesForUscStaking = _chiIncentivesForUscStaking;\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function setChiIncentivesForUscEthLPStaking(uint256 _chiIncentivesForUscEthLPStaking) external onlyOwner {\\n    chiIncentivesForUscEthLPStaking = _chiIncentivesForUscEthLPStaking;\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function setChiIncentivesForChiEthLPStaking(uint256 _chiIncentivesForChiEthLPStaking) external onlyOwner {\\n    chiIncentivesForChiEthLPStaking = _chiIncentivesForChiEthLPStaking;\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function setArbitrager(IArbitrage _arbitrager) external onlyOwner {\\n    arbitrager = _arbitrager;\\n    emit SetArbitrager(address(_arbitrager));\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function rewardUSC(uint256 amount) external onlyArbitrager {\\n    if (amount == 0) {\\n      revert ZeroAmount();\\n    }\\n\\n    usc.safeTransferFrom(msg.sender, address(this), amount);\\n    epochs[currentEpoch].totalUscReward += amount;\\n\\n    emit RewardUSC(msg.sender, amount);\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function updateEpoch() public {\\n    if (block.timestamp < firstEpochTimestamp + currentEpoch * EPOCH_DURATION) {\\n      revert EpochNotFinished();\\n    }\\n\\n    StETHRewards memory stEthRewards = _updateAndGetStETHRewards();\\n    ChiIncentives memory chiIncentives = _updateAndGetChiIncentives();\\n\\n    _updateEpochsInSubcontracts(stEthRewards, chiIncentives, epochs[currentEpoch].totalUscReward);\\n\\n    usc.safeTransfer(address(uscStaking), epochs[currentEpoch].totalUscReward);\\n    chi.safeTransfer(address(uscStaking), chiIncentives.uscStakingChiIncentives);\\n    chi.safeTransfer(address(chiLocking), chiIncentives.chiLockingChiIncentives);\\n    chi.safeTransfer(address(chiVesting), chiIncentives.chiVestingChiIncentives);\\n    chi.safeTransfer(address(uscEthLPStaking), chiIncentivesForUscEthLPStaking);\\n    chi.safeTransfer(address(chiEthLPStaking), chiIncentivesForChiEthLPStaking);\\n\\n    currentEpoch++;\\n\\n    uint256 totalStEthRewards = stEthRewards.uscStakingStEthReward +\\n      stEthRewards.chiStakingStEthReward +\\n      stEthRewards.chiLockingStEthReward +\\n      stEthRewards.chiVestingStEthReward;\\n    uint256 totalChiIncentives = chiIncentives.uscStakingChiIncentives +\\n      chiIncentives.chiLockingChiIncentives +\\n      chiIncentives.chiVestingChiIncentives +\\n      chiIncentivesForUscEthLPStaking +\\n      chiIncentivesForChiEthLPStaking;\\n    emit UpdateEpoch(currentEpoch - 1, totalStEthRewards, totalChiIncentives);\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function claimStEth() external {\\n    uint256 totalAmount;\\n    totalAmount += IStaking(address(uscStaking)).claimStETH(msg.sender);\\n    totalAmount += IStaking(address(chiStaking)).claimStETH(msg.sender);\\n    totalAmount += IStaking(address(chiLocking)).claimStETH(msg.sender);\\n    totalAmount += IStaking(address(chiVesting)).claimStETH(msg.sender);\\n    totalAmount += IStaking(address(uscEthLPStaking)).claimStETH(msg.sender);\\n    totalAmount += IStaking(address(chiEthLPStaking)).claimStETH(msg.sender);\\n\\n    reserveHolder.claimRewards(msg.sender, totalAmount);\\n\\n    emit ClaimStEth(msg.sender, totalAmount);\\n  }\\n\\n  /// @inheritdoc IRewardController\\n  function unclaimedStETHAmount(address account) external view returns (uint256) {\\n    uint256 totalAmount;\\n    totalAmount += IStaking(address(uscStaking)).unclaimedStETHAmount(account);\\n    totalAmount += IStaking(address(chiStaking)).unclaimedStETHAmount(account);\\n    totalAmount += IStaking(address(chiLocking)).unclaimedStETHAmount(account);\\n    totalAmount += IStaking(address(chiVesting)).unclaimedStETHAmount(account);\\n    totalAmount += IStaking(address(uscEthLPStaking)).unclaimedStETHAmount(account);\\n    totalAmount += IStaking(address(chiEthLPStaking)).unclaimedStETHAmount(account);\\n\\n    return totalAmount;\\n  }\\n\\n  function _updateAndGetChiIncentives() internal view returns (ChiIncentives memory) {\\n    uint256 chiLockingLocked = chiLocking.getLockedChi();\\n    uint256 chiVestingLocked = chiVesting.getLockedChi();\\n    uint256 totalLockedChi = chiLockingLocked + chiVestingLocked;\\n\\n    uint256 chiLockingChiIncentives;\\n    uint256 chiVestingChiIncentives;\\n    if (totalLockedChi != 0) {\\n      chiLockingChiIncentives = Math.mulDiv(chiLockingLocked, chiIncentivesForChiLocking, totalLockedChi);\\n      chiVestingChiIncentives = Math.mulDiv(chiVestingLocked, chiIncentivesForChiLocking, totalLockedChi);\\n    }\\n\\n    return\\n      ChiIncentives({\\n        uscStakingChiIncentives: chiIncentivesForUscStaking,\\n        chiLockingChiIncentives: chiLockingChiIncentives,\\n        chiVestingChiIncentives: chiVestingChiIncentives\\n      });\\n  }\\n\\n  function _updateEpochsInSubcontracts(\\n    StETHRewards memory stEthRewards,\\n    ChiIncentives memory chiIncentives,\\n    uint256 uscReward\\n  ) internal {\\n    uscStaking.updateEpoch(chiIncentives.uscStakingChiIncentives, uscReward, stEthRewards.uscStakingStEthReward);\\n    chiStaking.updateEpoch(stEthRewards.chiStakingStEthReward);\\n    chiLocking.updateEpoch(chiIncentives.chiLockingChiIncentives, stEthRewards.chiLockingStEthReward);\\n    chiVesting.updateEpoch(chiIncentives.chiVestingChiIncentives, stEthRewards.chiVestingStEthReward);\\n    uscEthLPStaking.updateEpoch(chiIncentivesForUscEthLPStaking, stEthRewards.uscEthLPStakingStEthReward);\\n    chiEthLPStaking.updateEpoch(chiIncentivesForChiEthLPStaking, stEthRewards.chiEthLPStakingStEthReward);\\n  }\\n\\n  function _updateAndGetStETHRewards() internal returns (StETHRewards memory) {\\n    epochs[currentEpoch].reserveHolderTotalRewards = reserveHolder.getCumulativeRewards();\\n    uint256 stETHEpochrewards = epochs[currentEpoch].reserveHolderTotalRewards -\\n      epochs[currentEpoch - 1].reserveHolderTotalRewards;\\n\\n    uint256 uscStakedChi = uscStaking.getStakedChi();\\n    uint256 chiStakedChi = chiStaking.getStakedChi();\\n    uint256 chiLockedChi = chiLocking.getStakedChi();\\n    uint256 chiVestingChi = chiVesting.getLockedChi();\\n    uint256 uscEthLPStakingChi = uscEthLPStaking.getStakedChi();\\n    uint256 chiEthLPStakingChi = chiEthLPStaking.getStakedChi();\\n    uint256 totalChi = uscStakedChi +\\n      chiStakedChi +\\n      chiLockedChi +\\n      chiVestingChi +\\n      uscEthLPStakingChi +\\n      chiEthLPStakingChi;\\n\\n    uint256 uscStakingStEthReward;\\n    uint256 chiStakingStEthReward;\\n    uint256 chiLockingStEthReward;\\n    uint256 chiVestingStEthReward;\\n    uint256 uscEthLPStakingStEthReward;\\n    uint256 chiEthLPStakingStEthReward;\\n    if (totalChi != 0) {\\n      uscStakingStEthReward = Math.mulDiv(uscStakedChi, stETHEpochrewards, totalChi);\\n      chiStakingStEthReward = Math.mulDiv(chiStakedChi, stETHEpochrewards, totalChi);\\n      chiLockingStEthReward = Math.mulDiv(chiLockedChi, stETHEpochrewards, totalChi);\\n      chiVestingStEthReward = Math.mulDiv(chiVestingChi, stETHEpochrewards, totalChi);\\n      uscEthLPStakingStEthReward = Math.mulDiv(uscEthLPStakingChi, stETHEpochrewards, totalChi);\\n      chiEthLPStakingStEthReward = Math.mulDiv(chiEthLPStakingStEthReward, stETHEpochrewards, totalChi);\\n    }\\n\\n    return\\n      StETHRewards({\\n        uscStakingStEthReward: uscStakingStEthReward,\\n        chiStakingStEthReward: chiStakingStEthReward,\\n        chiLockingStEthReward: chiLockingStEthReward,\\n        chiVestingStEthReward: chiVestingStEthReward,\\n        uscEthLPStakingStEthReward: uscEthLPStakingStEthReward,\\n        chiEthLPStakingStEthReward: chiEthLPStakingStEthReward\\n      });\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"EpochNotFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotArbitrager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimStEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardUSC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"arbitrager\",\"type\":\"address\"}],\"name\":\"SetArbitrager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chiIncentivesPerEpoch\",\"type\":\"uint256\"}],\"name\":\"SetChiIncentivesPerEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStEthReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalChiIncentives\",\"type\":\"uint256\"}],\"name\":\"UpdateEpoch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrager\",\"outputs\":[{\"internalType\":\"contract IArbitrage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiEthLPStaking\",\"outputs\":[{\"internalType\":\"contract ILPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiIncentivesForChiEthLPStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiIncentivesForChiLocking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiIncentivesForUscEthLPStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiIncentivesForUscStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiLocking\",\"outputs\":[{\"internalType\":\"contract IChiLocking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiStaking\",\"outputs\":[{\"internalType\":\"contract IChiStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiVesting\",\"outputs\":[{\"internalType\":\"contract IChiVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUscReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveHolderTotalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstEpochTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_chi\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usc\",\"type\":\"address\"},{\"internalType\":\"contract IReserveHolder\",\"name\":\"_reserveHolder\",\"type\":\"address\"},{\"internalType\":\"contract IUSCStaking\",\"name\":\"_uscStaking\",\"type\":\"address\"},{\"internalType\":\"contract IChiStaking\",\"name\":\"_chiStaking\",\"type\":\"address\"},{\"internalType\":\"contract IChiLocking\",\"name\":\"_chiLocking\",\"type\":\"address\"},{\"internalType\":\"contract IChiVesting\",\"name\":\"_chiVesting\",\"type\":\"address\"},{\"internalType\":\"contract ILPStaking\",\"name\":\"_uscEthLPStaking\",\"type\":\"address\"},{\"internalType\":\"contract ILPStaking\",\"name\":\"_chiEthLPStaking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochTimestamp\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveHolder\",\"outputs\":[{\"internalType\":\"contract IReserveHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardUSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArbitrage\",\"name\":\"_arbitrager\",\"type\":\"address\"}],\"name\":\"setArbitrager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chiIncentivesForChiEthLPStaking\",\"type\":\"uint256\"}],\"name\":\"setChiIncentivesForChiEthLPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chiIncentivesForChiLocking\",\"type\":\"uint256\"}],\"name\":\"setChiIncentivesForChiLocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chiIncentivesForUscEthLPStaking\",\"type\":\"uint256\"}],\"name\":\"setChiIncentivesForUscEthLPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chiIncentivesForUscStaking\",\"type\":\"uint256\"}],\"name\":\"setChiIncentivesForUscStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unclaimedStETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uscEthLPStaking\",\"outputs\":[{\"internalType\":\"contract ILPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uscStaking\",\"outputs\":[{\"internalType\":\"contract IUSCStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RewardController", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}