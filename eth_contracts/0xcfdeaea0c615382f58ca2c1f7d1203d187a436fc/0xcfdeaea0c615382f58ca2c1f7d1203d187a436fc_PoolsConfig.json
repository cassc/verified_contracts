{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/pools/PoolsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPoolsConfig.sol\\\";\\nimport \\\"./PoolUtils.sol\\\";\\n\\n\\n// Contract owned by the DAO and only modifiable by the DAO\\ncontract PoolsConfig is IPoolsConfig, Ownable\\n    {\\n\\tevent PoolWhitelisted(address indexed tokenA, address indexed tokenB);\\n\\tevent PoolUnwhitelisted(address indexed tokenA, address indexed tokenB);\\n\\tevent MaximumWhitelistedPoolsChanged(uint256 newMaxPools);\\n\\n\\tstruct TokenPair\\n\\t\\t{\\n\\t\\t// Note that these will be ordered in underlyingPoolTokens as specified in whitelistPool() - rather than ordered such that address(tokenA) < address(tokenB) as with the reserves in Pools.sol\\n\\t\\tIERC20 tokenA;\\n\\t\\tIERC20 tokenB;\\n\\t\\t}\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n\\n\\t// Keeps track of what poolIDs have been whitelisted\\n\\tEnumerableSet.Bytes32Set private _whitelist;\\n\\n\\t// A mapping from poolIDs to the underlying TokenPair\\n\\tmapping(bytes32=>TokenPair) public underlyingPoolTokens;\\n\\n\\t// The maximum number of pools that can be whitelisted at any one time.\\n\\t// If the maximum number of pools is reached, some tokens will need to be delisted before new ones can be whitelisted\\n\\t// Range: 20 to 100 with an adjustment of 10\\n\\tuint256 public maximumWhitelistedPools = 50;\\n\\n\\n\\t// Whitelist a given pair of tokens\\n\\tfunction whitelistPool( IERC20 tokenA, IERC20 tokenB ) external onlyOwner\\n\\t\\t{\\n\\t\\trequire( _whitelist.length() < maximumWhitelistedPools, \\\"Maximum number of whitelisted pools already reached\\\" );\\n\\t\\trequire(tokenA != tokenB, \\\"tokenA and tokenB cannot be the same token\\\");\\n\\n\\t\\tbytes32 poolID = PoolUtils._poolID(tokenA, tokenB);\\n\\n\\t\\t// Add to the whitelist and remember the underlying tokens for the pool\\n\\t\\t_whitelist.add(poolID);\\n\\t\\tunderlyingPoolTokens[poolID] = TokenPair(tokenA, tokenB);\\n\\n \\t\\temit PoolWhitelisted(address(tokenA), address(tokenB));\\n\\t\\t}\\n\\n\\n\\tfunction unwhitelistPool( IERC20 tokenA, IERC20 tokenB ) external onlyOwner\\n\\t\\t{\\n\\t\\tbytes32 poolID = PoolUtils._poolID(tokenA,tokenB);\\n\\n\\t\\t_whitelist.remove(poolID);\\n\\t\\tdelete underlyingPoolTokens[poolID];\\n\\n\\t\\temit PoolUnwhitelisted(address(tokenA), address(tokenB));\\n\\t\\t}\\n\\n\\n\\tfunction changeMaximumWhitelistedPools(bool increase) external onlyOwner\\n        {\\n        if (increase)\\n            {\\n            if (maximumWhitelistedPools < 100)\\n                maximumWhitelistedPools += 10;\\n            }\\n        else\\n            {\\n            if (maximumWhitelistedPools > 20)\\n                maximumWhitelistedPools -= 10;\\n            }\\n\\n\\t\\temit MaximumWhitelistedPoolsChanged(maximumWhitelistedPools);\\n        }\\n\\n\\n\\t// === VIEWS ===\\n\\n\\tfunction numberOfWhitelistedPools() external view returns (uint256)\\n\\t\\t{\\n\\t\\treturn _whitelist.length();\\n\\t\\t}\\n\\n\\n\\tfunction isWhitelisted( bytes32 poolID ) public view returns (bool)\\n\\t\\t{\\n\\t\\t// The staked SALT pool is always considered whitelisted\\n\\t\\treturn ( poolID == PoolUtils.STAKED_SALT ) || _whitelist.contains( poolID );\\n\\t\\t}\\n\\n\\n\\t// Return an array of the currently whitelisted poolIDs\\n\\tfunction whitelistedPools() external view returns (bytes32[] memory)\\n\\t\\t{\\n\\t\\treturn _whitelist.values();\\n\\t\\t}\\n\\n\\n\\tfunction underlyingTokenPair( bytes32 poolID ) external view returns (IERC20 tokenA, IERC20 tokenB)\\n\\t\\t{\\n\\t\\tTokenPair memory pair = underlyingPoolTokens[poolID];\\n\\t\\trequire(address(pair.tokenA) != address(0) && address(pair.tokenB) != address(0), \\\"This poolID does not exist\\\");\\n\\n\\t\\treturn (pair.tokenA, pair.tokenB);\\n\\t\\t}\\n\\n\\n\\t// Returns true if the token has been whitelisted (meaning it has been pooled with either WETH and USDC)\\n\\tfunction tokenHasBeenWhitelisted( IERC20 token, IERC20 weth, IERC20 usdc ) external view returns (bool)\\n\\t\\t{\\n\\t\\t// See if the token has been whitelisted with either WETH or USDC, as all whitelisted tokens are pooled with both WETH and USDC\\n\\t\\tbytes32 poolID1 = PoolUtils._poolID( token, weth );\\n\\t\\tif ( isWhitelisted(poolID1) )\\n\\t\\t\\treturn true;\\n\\n\\t\\tbytes32 poolID2 = PoolUtils._poolID( token, usdc );\\n\\t\\tif ( isWhitelisted(poolID2) )\\n\\t\\t\\treturn true;\\n\\n\\t\\treturn false;\\n\\t\\t}\\n\\t}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPoolsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPools.sol\\\";\\n\\n\\ninterface IPoolsConfig\\n\\t{\\n\\tfunction whitelistPool( IERC20 tokenA, IERC20 tokenB ) external; // onlyOwner\\n\\tfunction unwhitelistPool( IERC20 tokenA, IERC20 tokenB ) external; // onlyOwner\\n\\tfunction changeMaximumWhitelistedPools(bool increase) external; // onlyOwner\\n\\n\\t// Views\\n    function maximumWhitelistedPools() external view returns (uint256);\\n\\n\\tfunction numberOfWhitelistedPools() external view returns (uint256);\\n\\tfunction isWhitelisted( bytes32 poolID ) external view returns (bool);\\n\\tfunction whitelistedPools() external view returns (bytes32[] calldata);\\n\\tfunction underlyingTokenPair( bytes32 poolID ) external view returns (IERC20 tokenA, IERC20 tokenB);\\n\\n\\t// Returns true if the token has been whitelisted (meaning it has been pooled with either WETH and USDC)\\n\\tfunction tokenHasBeenWhitelisted( IERC20 token, IERC20 weth, IERC20 usdc ) external view returns (bool);\\n\\t}\"\r\n    },\r\n    \"src/pools/PoolUtils.sol\": {\r\n      \"content\": \"pragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nlibrary PoolUtils\\n\\t{\\n\\t// Token reserves less than dust are treated as if they don't exist at all.\\n\\t// With the 18 decimals that are used for most tokens, DUST has a value of 0.0000000000000001\\n\\tuint256 constant public DUST = 100;\\n\\n\\t// A special pool that represents staked SALT that is not associated with any actual liquidity pool.\\n    bytes32 constant public STAKED_SALT = bytes32(0);\\n\\n\\n    // Return the unique poolID for the given two tokens.\\n    // Tokens are sorted before being hashed to make reversed pairs equivalent.\\n    function _poolID( IERC20 tokenA, IERC20 tokenB ) internal pure returns (bytes32 poolID)\\n    \\t{\\n        // See if the token orders are flipped\\n        if ( uint160(address(tokenB)) < uint160(address(tokenA)) )\\n            return keccak256(abi.encodePacked(address(tokenB), address(tokenA)));\\n\\n        return keccak256(abi.encodePacked(address(tokenA), address(tokenB)));\\n    \\t}\\n\\n\\n    // Return the unique poolID and whether or not it is flipped\\n    function _poolIDAndFlipped( IERC20 tokenA, IERC20 tokenB ) internal pure returns (bytes32 poolID, bool flipped)\\n    \\t{\\n        // See if the token orders are flipped\\n        if ( uint160(address(tokenB)) < uint160(address(tokenA)) )\\n            return (keccak256(abi.encodePacked(address(tokenB), address(tokenA))), true);\\n\\n        return (keccak256(abi.encodePacked(address(tokenA), address(tokenB))), false);\\n    \\t}\\n\\t}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../staking/interfaces/ILiquidity.sol\\\";\\nimport \\\"../../dao/interfaces/IDAO.sol\\\";\\nimport \\\"./IPoolStats.sol\\\";\\n\\n\\ninterface IPools is IPoolStats\\n\\t{\\n\\tfunction startExchangeApproved() external;\\n\\tfunction setContracts( IDAO _dao, ILiquidity _liquidity ) external; // onlyOwner\\n\\n\\tfunction addLiquidity( IERC20 tokenA, IERC20 tokenB, uint256 maxAmountA, uint256 maxAmountB, uint256 minAddedAmountA, uint256 minAddedAmountB, uint256 totalLiquidity ) external returns (uint256 addedAmountA, uint256 addedAmountB, uint256 addedLiquidity);\\n\\tfunction removeLiquidity( IERC20 tokenA, IERC20 tokenB, uint256 liquidityToRemove, uint256 minReclaimedA, uint256 minReclaimedB, uint256 totalLiquidity ) external returns (uint256 reclaimedA, uint256 reclaimedB);\\n\\n\\tfunction deposit( IERC20 token, uint256 amount ) external;\\n\\tfunction withdraw( IERC20 token, uint256 amount ) external;\\n\\tfunction swap( IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositSwapWithdraw(IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositDoubleSwapWithdraw( IERC20 swapTokenIn, IERC20 swapTokenMiddle, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositZapSwapWithdraw(IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn ) external returns (uint256 swapAmountOut);\\n\\n\\t// Views\\n\\tfunction exchangeIsLive() external view returns (bool);\\n\\tfunction getPoolReserves(IERC20 tokenA, IERC20 tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\n\\tfunction depositedUserBalance(address user, IERC20 token) external view returns (uint256);\\n\\t}\\n\\n\"\r\n    },\r\n    \"src/staking/interfaces/ILiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n\\ninterface ILiquidity is IStakingRewards\\n\\t{\\n\\tfunction depositLiquidityAndIncreaseShare( IERC20 tokenA, IERC20 tokenB, uint256 maxAmountA, uint256 maxAmountB, uint256 minAddedAmountA, uint256 minAddedAmountB, uint256 minAddedLiquidity, uint256 deadline, bool useZapping ) external returns (uint256 addedLiquidity);\\n\\tfunction withdrawLiquidityAndClaim( IERC20 tokenA, IERC20 tokenB, uint256 liquidityToWithdraw, uint256 minReclaimedA, uint256 minReclaimedB, uint256 deadline ) external returns (uint256 reclaimedA, uint256 reclaimedB);\\n\\t}\\n\"\r\n    },\r\n    \"src/dao/interfaces/IDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../rewards/interfaces/ISaltRewards.sol\\\";\\nimport \\\"../../pools/interfaces/IPools.sol\\\";\\nimport \\\"../../interfaces/ISalt.sol\\\";\\n\\ninterface IDAO\\n\\t{\\n\\tfunction finalizeBallot( uint256 ballotID ) external;\\n\\tfunction manuallyRemoveBallot( uint256 ballotID ) external;\\n\\n\\tfunction withdrawFromDAO( IERC20 token ) external returns (uint256 withdrawnAmount);\\n\\n\\t// Views\\n\\tfunction pools() external view returns (IPools);\\n\\tfunction websiteURL() external view returns (string memory);\\n\\tfunction countryIsExcluded( string calldata country ) external view returns (bool);\\n\\t}\"\r\n    },\r\n    \"src/pools/interfaces/IPoolStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IPoolStats\\n\\t{\\n\\t// These are the indicies (in terms of a poolIDs location in the current whitelistedPoolIDs array) of pools involved in an arbitrage path\\n\\tstruct ArbitrageIndicies\\n\\t\\t{\\n\\t\\tuint64 index1;\\n\\t\\tuint64 index2;\\n\\t\\tuint64 index3;\\n\\t\\t}\\n\\n\\tfunction clearProfitsForPools() external;\\n\\tfunction updateArbitrageIndicies() external;\\n\\n\\t// Views\\n\\tfunction profitsForWhitelistedPools() external view returns (uint256[] memory _calculatedProfits);\\n\\tfunction arbitrageIndicies(bytes32 poolID) external view returns (ArbitrageIndicies memory);\\n\\t}\\n\\n\"\r\n    },\r\n    \"src/staking/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\nstruct AddedReward\\n\\t{\\n\\tbytes32 poolID;\\t\\t\\t\\t\\t\\t\\t// The pool to add rewards to\\n\\tuint256 amountToAdd;\\t\\t\\t\\t// The amount of rewards (as SALT) to add\\n\\t}\\n\\nstruct UserShareInfo\\n\\t{\\n\\tuint256 userShare;\\t\\t\\t\\t\\t// A user's share for a given poolID\\n\\tuint256 virtualRewards;\\t\\t\\t\\t// The amount of rewards that were added to maintain proper rewards/share ratio - and will be deducted from a user's pending rewards.\\n\\tuint256 cooldownExpiration;\\t\\t// The timestamp when the user can modify their share\\n\\t}\\n\\n\\ninterface IStakingRewards\\n\\t{\\n\\tfunction claimAllRewards( bytes32[] calldata poolIDs ) external returns (uint256 rewardsAmount);\\n\\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external;\\n\\n\\t// Views\\n\\tfunction totalShares(bytes32 poolID) external view returns (uint256);\\n\\tfunction totalSharesForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] calldata shares);\\n\\tfunction totalRewardsForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] calldata rewards);\\n\\n\\tfunction userRewardForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\tfunction userShareForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\tfunction userVirtualRewardsForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\n\\tfunction userRewardsForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata rewards);\\n\\tfunction userShareForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata shares);\\n\\tfunction userCooldowns( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata cooldowns);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/ISaltRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./IRewardsEmitter.sol\\\";\\n\\n\\ninterface ISaltRewards\\n\\t{\\n\\tfunction sendInitialSaltRewards( uint256 liquidityBootstrapAmount, bytes32[] calldata poolIDs ) external;\\n    function performUpkeep( bytes32[] calldata poolIDs, uint256[] calldata profitsForPools ) external;\\n\\n    // Views\\n    function stakingRewardsEmitter() external view returns (IRewardsEmitter);\\n    function liquidityRewardsEmitter() external view returns (IRewardsEmitter);\\n    }\"\r\n    },\r\n    \"src/interfaces/ISalt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ISalt is IERC20\\n\\t{\\n\\tfunction burnTokensInContract() external;\\n\\n\\t// Views\\n\\tfunction totalBurned() external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/IRewardsEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../staking/interfaces/IStakingRewards.sol\\\";\\n\\n\\ninterface IRewardsEmitter\\n\\t{\\n\\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external;\\n\\tfunction performUpkeep( uint256 timeSinceLastUpkeep ) external;\\n\\n\\t// Views\\n\\tfunction pendingRewardsForPools( bytes32[] calldata pools ) external view returns (uint256[] calldata);\\n\\t}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPools\",\"type\":\"uint256\"}],\"name\":\"MaximumWhitelistedPoolsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"PoolUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"PoolWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"}],\"name\":\"changeMaximumWhitelistedPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumWhitelistedPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWhitelistedPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdc\",\"type\":\"address\"}],\"name\":\"tokenHasBeenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"underlyingPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"underlyingTokenPair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"unwhitelistPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"whitelistPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedPools\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolsConfig", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}