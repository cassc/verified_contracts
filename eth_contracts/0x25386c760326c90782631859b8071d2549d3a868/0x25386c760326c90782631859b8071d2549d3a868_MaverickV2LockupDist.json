{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MaverickV2LockupDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IMaverickV2VotingEscrowWSync} from \\\"@maverick/v2-rewards/contracts/interfaces/IMaverickV2VotingEscrowWSync.sol\\\";\\nimport {IMaverickV2VotingEscrow} from \\\"@maverick/v2-rewards/contracts/interfaces/IMaverickV2VotingEscrow.sol\\\";\\nimport {Multicall} from \\\"@maverick/v2-common/contracts/base/Multicall.sol\\\";\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IStake} from \\\"./interfaces/IStake.sol\\\";\\nimport {IUnlock} from \\\"./interfaces/IUnlock.sol\\\";\\nimport {ISpiral} from \\\"./interfaces/ISpiral.sol\\\";\\nimport {ILegacyVeMav} from \\\"./interfaces/ILegacyVeMav.sol\\\";\\n\\ncontract MaverickV2LockupDistributor is Multicall, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct ClaimValue {\\n        address account;\\n        uint128 amount;\\n        uint256 index;\\n        uint256 minClaimTimestamp;\\n        uint256 minStakeDuration;\\n        bytes32[] proof;\\n    }\\n\\n    uint256 internal constant FOUR_YEARS = 4 * 365 days;\\n    IERC20 public immutable mav;\\n    bytes32 public immutable merkleRoot;\\n    IMaverickV2VotingEscrow public immutable veMavV2;\\n    ILegacyVeMav public immutable veMavLegacy;\\n\\n    IStake public immutable stakeDaoContract;\\n    IUnlock public immutable unlockContract;\\n    ISpiral public immutable spiralDaoContract;\\n\\n    // This is a packed array of booleans.\\n    mapping(uint256 => uint256) private claimedBitMap;\\n\\n    //@notice This event is triggered whenever a call to #claim succeeds.\\n    event Claimed(\\n        address account,\\n        uint256 amount,\\n        uint256 index,\\n        uint256 stakeDuration\\n    );\\n\\n    error DistributorAlreadyClaimed();\\n    error DistributorClaimPeriodNotYetOpen();\\n    error DistributorInvalidProof();\\n    error DistributorLockerDidNotLockEnough(\\n        uint256 initialTotalSupply,\\n        uint256 expectedTotalSupply,\\n        uint256 postStakeTotalSupply\\n    );\\n    error DistributorInvalidStakeDuration();\\n    error DistributorAccountIsNotSender();\\n\\n    modifier claimStake(ClaimValue memory claimValue, uint256 stakeDuration) {\\n        _claimCheck(claimValue, stakeDuration);\\n        _setClaimed(claimValue.index);\\n        _;\\n        emit Claimed(\\n            claimValue.account,\\n            claimValue.amount,\\n            claimValue.index,\\n            stakeDuration\\n        );\\n    }\\n\\n    modifier checkLegacyBalance(uint256 _amount, uint256 stakeDuration) {\\n        uint256 initialTotalSupply = veMavLegacy.totalSupply();\\n        (uint256 newVotes, ) = veMavLegacy.previewPoints(\\n            _amount,\\n            stakeDuration\\n        );\\n        uint256 expectedTotalSupply = initialTotalSupply + newVotes;\\n        _;\\n\\n        uint256 postStakeTotalSupply = veMavLegacy.totalSupply();\\n\\n        if (postStakeTotalSupply < expectedTotalSupply)\\n            revert DistributorLockerDidNotLockEnough(\\n                initialTotalSupply,\\n                expectedTotalSupply,\\n                postStakeTotalSupply\\n            );\\n    }\\n\\n    constructor(\\n        bytes32 _merkleRoot,\\n        IMaverickV2VotingEscrow _veMavV2,\\n        IStake _stakeDaoContract,\\n        IUnlock _unlockContract,\\n        ISpiral _spiralDaoContract\\n    ) {\\n        merkleRoot = _merkleRoot;\\n        veMavV2 = _veMavV2;\\n        mav = _veMavV2.baseToken();\\n        veMavLegacy = ILegacyVeMav(\\n            address(\\n                IMaverickV2VotingEscrowWSync(address(_veMavV2)).legacyVeMav()\\n            )\\n        );\\n        stakeDaoContract = _stakeDaoContract;\\n        unlockContract = _unlockContract;\\n        spiralDaoContract = _spiralDaoContract;\\n    }\\n\\n    function _claimCheck(\\n        ClaimValue memory claimValue,\\n        uint256 stakeDuration\\n    ) internal view {\\n        if (isClaimed(claimValue.index)) revert DistributorAlreadyClaimed();\\n        if (block.timestamp < claimValue.minClaimTimestamp)\\n            revert DistributorClaimPeriodNotYetOpen();\\n        if (stakeDuration < claimValue.minStakeDuration)\\n            revert DistributorInvalidStakeDuration();\\n        if (msg.sender != claimValue.account)\\n            revert DistributorAccountIsNotSender();\\n        if (!isProofValid(claimValue)) revert DistributorInvalidProof();\\n    }\\n\\n    /**\\n     * @notice Execute a claim using a merkle proof. Stake output to veMav\\n     * contract.\\n     */\\n    function claimToVeMav(\\n        ClaimValue memory claimValue,\\n        uint256 stakeDuration\\n    ) public claimStake(claimValue, stakeDuration) {\\n        mav.approve(address(veMavV2), claimValue.amount);\\n        veMavV2.stake(claimValue.amount, stakeDuration, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute a claim using a merkle proof. Send output mav to user.\\n     * Only valid for claims where claimValue.minStakeDuration = 0.\\n     */\\n    function claimToMav(\\n        ClaimValue memory claimValue\\n    ) public claimStake(claimValue, 0) {\\n        mav.safeTransfer(claimValue.account, claimValue.amount);\\n    }\\n\\n    /**\\n     * @notice Delegate veMav vote by signature.\\n     */\\n    function delegateVeMavVoteBySignature(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        veMavV2.delegateBySig(delegatee, nonce, expiry, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Execute a claim using a merkle proof. Stake output to unkMav liquid\\n     * locker.\\n     */\\n    function claimToUnlock(\\n        ClaimValue memory claimValue\\n    )\\n        public\\n        nonReentrant\\n        claimStake(claimValue, FOUR_YEARS)\\n        checkLegacyBalance(claimValue.amount, FOUR_YEARS)\\n    {\\n        mav.approve(address(unlockContract), claimValue.amount);\\n        unlockContract.depositFor(msg.sender, claimValue.amount, true, false);\\n    }\\n\\n    /**\\n     * @notice Execute a claim using a merkle proof. Stake output to sprMav liquid\\n     * locker.\\n     */\\n    function claimToSpiralDao(\\n        ClaimValue memory claimValue\\n    )\\n        public\\n        nonReentrant\\n        claimStake(claimValue, FOUR_YEARS)\\n        checkLegacyBalance(claimValue.amount, FOUR_YEARS)\\n    {\\n        mav.approve(address(spiralDaoContract), claimValue.amount);\\n        ISpiral.Info memory info = spiralDaoContract.lockerInfo();\\n        spiralDaoContract.lock(claimValue.amount);\\n        info.sprMav.transfer(msg.sender, info.sprMav.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Execute a claim using a merkle proof. Stake output to sdMav liquid\\n     * locker.\\n     */\\n    function claimToStakeDao(\\n        ClaimValue memory claimValue\\n    )\\n        public\\n        nonReentrant\\n        claimStake(claimValue, FOUR_YEARS)\\n        checkLegacyBalance(claimValue.amount, FOUR_YEARS)\\n    {\\n        mav.approve(address(stakeDaoContract), claimValue.amount);\\n        stakeDaoContract.deposit(claimValue.amount, true, false, msg.sender);\\n    }\\n\\n    /**\\n     * @notice\\n     * @param _index Index in the tree\\n     */\\n    function isClaimed(uint256 _index) public view returns (bool) {\\n        uint256 claimedWordIndex = _index / 256;\\n        uint256 claimedBitIndex = _index % 256;\\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function isProofValid(\\n        ClaimValue memory claimValue\\n    ) public view returns (bool) {\\n        // Verify the Merkle proof.\\n        bytes32 node = keccak256(\\n            bytes.concat(\\n                keccak256(\\n                    abi.encode(\\n                        claimValue.index,\\n                        claimValue.account,\\n                        claimValue.amount,\\n                        claimValue.minClaimTimestamp,\\n                        claimValue.minStakeDuration\\n                    )\\n                )\\n            )\\n        );\\n        return MerkleProof.verify(claimValue.proof, merkleRoot, node);\\n    }\\n\\n    /**\\n     * @notice\\n     * @param _index Index in the tree\\n     */\\n    function _setClaimed(uint256 _index) internal {\\n        uint256 claimedWordIndex = _index / 256;\\n        uint256 claimedBitIndex = _index % 256;\\n        claimedBitMap[claimedWordIndex] =\\n            claimedBitMap[claimedWordIndex] |\\n            (1 << claimedBitIndex);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@maverick/v2-rewards/contracts/interfaces/IMaverickV2VotingEscrowWSync.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMaverickV2VotingEscrowWSync {\\n    error VotingEscrowLockupEndTooShortToSync(uint256 legacyLockupEnd, uint256 minimumLockupEnd);\\n\\n    event Sync(address staker, uint256 legacyLockupIndex, uint256 newBalance);\\n\\n    /**\\n     * @notice This function retrieves the minimum lockup duration required for\\n     * a legacy lockup to be eligible for synchronization.\\n     * @return minSyncDuration The minimum allowed lockup end time.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MIN_SYNC_DURATION() external pure returns (uint256 minSyncDuration);\\n\\n    /**\\n     * @notice This function retrieves the address of the legacy Maverick V1\\n     * Voting Escrow (veMav) token.\\n     * @return legacyVeMav The address of the IERC20 legacy veMav token.\\n     */\\n    function legacyVeMav() external view returns (IERC20);\\n\\n    /**\\n     * @notice This function retrieves the synced balance for a specific legacy lockup index of a user.\\n     * @param staker The address of the user for whom to retrieve the synced balance.\\n     * @param legacyLockupIndex The index of the legacy lockup for which to\\n     * retrieve the synced balance.\\n     * @return balance The synced balance associated with the legacy lockup.\\n     */\\n    function syncBalances(address staker, uint256 legacyLockupIndex) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice This function synchronizes a specific legacy lockup index for a\\n     * user within the contract.  If the legacy lockup.end is not at least\\n     * `block.timestamp + MIN_SYNC_DURATION()`, this function will revert.\\n     * @param staker The address of the user for whom to perform synchronization.\\n     * @param legacyLockupIndex The index of the legacy lockup to be\\n     * synchronized.\\n     * @return newBalance The new balance resulting from the synchronization\\n     * process.\\n     */\\n    function sync(address staker, uint256 legacyLockupIndex) external returns (uint256 newBalance);\\n}\\n\"\r\n    },\r\n    \"node_modules/@maverick/v2-rewards/contracts/interfaces/IMaverickV2VotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\nimport {IVotes} from \\\"@openzeppelin/contracts/governance/utils/IVotes.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC6372} from \\\"@openzeppelin/contracts/interfaces/IERC6372.sol\\\";\\n\\nimport {IHistoricalBalance} from \\\"../votingescrowbase/IHistoricalBalance.sol\\\";\\n\\ninterface IMaverickV2VotingEscrowBase is IVotes, IHistoricalBalance {\\n    error VotingEscrowTransferNotSupported();\\n    error VotingEscrowInvalidAddress(address);\\n    error VotingEscrowInvalidAmount(uint256);\\n    error VotingEscrowInvalidDuration(uint256 duration, uint256 minDuration, uint256 maxDuration);\\n    error VotingEscrowInvalidEndTime(uint256 newEnd, uint256 oldEnd);\\n    error VotingEscrowStakeStillLocked(uint256 currentTime, uint256 endTime);\\n    error VotingEscrowStakeAlreadyRedeemed();\\n    error VotingEscrowNotApprovedExtender(address account, address extender, uint256 lockupId);\\n    error VotingEscrowIncentiveAlreadyClaimed(address account, uint256 batchIndex);\\n    error VotingEscrowNoIncentivesToClaim(address account, uint256 batchIndex);\\n    error VotingEscrowInvalidExtendIncentiveToken(IERC20 incentiveToken);\\n    error VotingEscrowNoSupplyAtTimepoint();\\n    error VotingEscrowIncentiveTimepointInFuture(uint256 timestamp, uint256 claimTimepoint);\\n\\n    event Stake(address indexed user, uint256 lockupId, Lockup);\\n    event Unstake(address indexed user, uint256 lockupId, Lockup);\\n    event ExtenderApproval(address staker, address extender, uint256 lockupId, bool newState);\\n    event ClaimIncentiveBatch(uint256 batchIndex, address account, uint256 claimAmount);\\n    event CreateNewIncentiveBatch(\\n        address user,\\n        uint256 amount,\\n        uint256 timepoint,\\n        uint256 stakeDuration,\\n        IERC20 incentiveToken\\n    );\\n\\n    struct Lockup {\\n        uint128 amount;\\n        uint128 end;\\n        uint256 votes;\\n    }\\n\\n    struct ClaimInformation {\\n        bool timepointInPast;\\n        bool hasClaimed;\\n        uint128 claimAmount;\\n    }\\n\\n    struct BatchInformation {\\n        uint128 totalIncentives;\\n        uint128 stakeDuration;\\n        uint48 claimTimepoint;\\n        IERC20 incentiveToken;\\n    }\\n\\n    struct TokenIncentiveTotals {\\n        uint128 totalIncentives;\\n        uint128 claimedIncentives;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MIN_STAKE_DURATION() external returns (uint256 duration);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MAX_STAKE_DURATION() external returns (uint256 duration);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function YEAR_BASE() external returns (uint256);\\n\\n    /**\\n     * @notice This function retrieves the address of the ERC20 token used as the base token for staking and rewards.\\n     * @return baseToken The address of the IERC20 base token contract.\\n     */\\n    function baseToken() external returns (IERC20);\\n\\n    /**\\n     * @notice This function retrieves the starting timestamp. This may be used\\n     * for reward calculations or other time-based logic.\\n     */\\n    function startTimestamp() external returns (uint256 timestamp);\\n\\n    /**\\n     * @notice This function retrieves the details of a specific lockup for a given staker and lockup index.\\n     * @param staker The address of the staker for which to retrieve the lockup details.\\n     * @param index The index of the lockup within the staker's lockup history.\\n     * @return lockup A Lockup struct containing details about the lockup (see struct definition for details).\\n     */\\n    function getLockup(address staker, uint256 index) external view returns (Lockup memory lockup);\\n\\n    /**\\n     * @notice This function retrieves the total number of lockups associated with a specific staker.\\n     * @param staker The address of the staker for which to retrieve the lockup count.\\n     * @return count The total number of lockups for the staker.\\n     */\\n    function lockupCount(address staker) external view returns (uint256 count);\\n\\n    /**\\n     * @notice This function simulates a lockup scenario, providing details about the resulting lockup structure for a specified amount and duration.\\n     * @param amount The amount of tokens to be locked.\\n     * @param duration The duration of the lockup period.\\n     * @return lockup A Lockup struct containing details about the simulated lockup (see struct definition for details).\\n     */\\n    function previewVotes(uint128 amount, uint256 duration) external view returns (Lockup memory lockup);\\n\\n    /**\\n     * @notice This function grants approval for a designated extender contract to manage a specific lockup on behalf of the staker.\\n     * @param extender The address of the extender contract to be approved.\\n     * @param lockupId The ID of the lockup for which to grant approval.\\n     */\\n    function approveExtender(address extender, uint256 lockupId) external;\\n\\n    /**\\n     * @notice This function revokes approval previously granted to an extender contract for managing a specific lockup.\\n     * @param extender The address of the extender contract whose approval is being revoked.\\n     * @param lockupId The ID of the lockup for which to revoke approval.\\n     */\\n    function revokeExtender(address extender, uint256 lockupId) external;\\n\\n    /**\\n     * @notice This function checks whether a specific account has been approved by a staker to manage a particular lockup through an extender contract.\\n     * @param account The address of the account to check for approval (may be the extender or another account).\\n     * @param extender The address of the extender contract for which to check approval.\\n     * @param lockupId The ID of the lockup to verify approval for.\\n     * @return isApproved True if the account is approved for the lockup, False otherwise (bool).\\n     */\\n    function isApprovedExtender(address account, address extender, uint256 lockupId) external view returns (bool);\\n\\n    /**\\n     * @notice This function extends the lockup period for the caller (msg.sender) for a specified lockup ID, adding a new duration and amount.\\n     * @param lockupId The ID of the lockup to be extended.\\n     * @param duration The additional duration to extend the lockup by.\\n     * @param amount The additional amount of tokens to be locked.\\n     * @return newLockup A Lockup struct containing details about the newly extended lockup (see struct definition for details).\\n     */\\n    function extendForSender(\\n        uint256 lockupId,\\n        uint256 duration,\\n        uint128 amount\\n    ) external returns (Lockup memory newLockup);\\n\\n    /**\\n     * @notice This function extends the lockup period for a specified account, adding a new duration and amount. The caller (msg.sender) must be authorized to manage the lockup through an extender contract.\\n     * @param account The address of the account whose lockup is being extended.\\n     * @param lockupId The ID of the lockup to be extended.\\n     * @param duration The additional duration to extend the lockup by.\\n     * @param amount The additional amount of tokens to be locked.\\n     * @return newLockup A Lockup struct containing details about the newly extended lockup (see struct definition for details).\\n     */\\n    function extendForAccount(\\n        address account,\\n        uint256 lockupId,\\n        uint256 duration,\\n        uint128 amount\\n    ) external returns (Lockup memory newLockup);\\n\\n    /**\\n     * @notice This function merges multiple lockups associated with the caller\\n     * (msg.sender) into a single new lockup.\\n     * @param lockupIds An array containing the IDs of the lockups to be merged.\\n     * @return newLockup A Lockup struct containing details about the newly merged lockup (see struct definition for details).\\n     */\\n    function merge(uint256[] memory lockupIds) external returns (Lockup memory newLockup);\\n\\n    /**\\n     * @notice This function unstakes the specified lockup ID for the caller (msg.sender), returning the details of the unstaked lockup.\\n     * @param lockupId The ID of the lockup to be unstaked.\\n     * @param to The address to which the unstaked tokens should be sent (optional, defaults to msg.sender).\\n     * @return lockup A Lockup struct containing details about the unstaked lockup (see struct definition for details).\\n     */\\n    function unstake(uint256 lockupId, address to) external returns (Lockup memory lockup);\\n\\n    /**\\n     * @notice This function is a simplified version of `unstake` that automatically sends the unstaked tokens to the caller (msg.sender).\\n     * @param lockupId The ID of the lockup to be unstaked.\\n     * @return lockup A Lockup struct containing details about the unstaked lockup (see struct definition for details).\\n     */\\n    function unstakeToSender(uint256 lockupId) external returns (Lockup memory lockup);\\n\\n    /**\\n     * @notice This function stakes a specified amount of tokens for the caller\\n     * (msg.sender) for a defined duration.\\n     * @param amount The amount of tokens to be staked.\\n     * @param duration The duration of the lockup period.\\n     * @return lockup A Lockup struct containing details about the newly\\n     * created lockup (see struct definition for details).\\n     */\\n    function stakeToSender(uint128 amount, uint256 duration) external returns (Lockup memory lockup);\\n\\n    /**\\n     * @notice This function stakes a specified amount of tokens for a defined\\n     * duration, allowing the caller (msg.sender) to specify an optional\\n     * recipient for the staked tokens.\\n     * @param amount The amount of tokens to be staked.\\n     * @param duration The duration of the lockup period.\\n     * @param to The address to which the staked tokens will be credited (optional, defaults to msg.sender).\\n     * @return lockup A Lockup struct containing details about the newly\\n     * created lockup (see struct definition for details).\\n     */\\n    function stake(uint128 amount, uint256 duration, address to) external returns (Lockup memory);\\n\\n    /**\\n     * @notice This function retrieves the total incentive information for a specific ERC-20 token.\\n     * @param token The address of the ERC20 token for which to retrieve incentive totals.\\n     * @return totals A TokenIncentiveTotals struct containing details about\\n     * the token's incentives (see struct definition for details).\\n     */\\n    function incentiveTotals(IERC20 token) external view returns (TokenIncentiveTotals memory);\\n\\n    /**\\n     * @notice This function retrieves the total number of created incentive batches.\\n     * @return count The total number of incentive batches.\\n     */\\n    function incentiveBatchCount() external view returns (uint256);\\n\\n    /**\\n     * @notice This function retrieves claim information for a specific account and incentive batch index.\\n     * @param account The address of the account for which to retrieve claim information.\\n     * @param batchIndex The index of the incentive batch for which to retrieve\\n     * claim information.\\n     * @return claimInformation A ClaimInformation struct containing details about the\\n     * account's claims for the specified batch (see struct definition for\\n     * details).\\n     * @return batchInformation A BatchInformation struct containing details about the\\n     * specified batch (see struct definition for details).\\n     */\\n    function claimAndBatchInformation(\\n        address account,\\n        uint256 batchIndex\\n    ) external view returns (ClaimInformation memory claimInformation, BatchInformation memory batchInformation);\\n\\n    /**\\n     * @notice This function retrieves batch information for a incentive batch index.\\n     * @param batchIndex The index of the incentive batch for which to retrieve\\n     * claim information.\\n     * @return info A BatchInformation struct containing details about the\\n     * specified batch (see struct definition for details).\\n     */\\n    function incentiveBatchInformation(uint256 batchIndex) external view returns (BatchInformation memory info);\\n\\n    /**\\n     * @notice This function allows claiming rewards from a specific incentive\\n     * batch while simultaneously extending a lockup with the claimed tokens.\\n     * @param batchIndex The index of the incentive batch from which to claim rewards.\\n     * @param lockupId The ID of the lockup to be extended with the claimed tokens.\\n     * @return lockup A Lockup struct containing details about the updated\\n     * lockup after extension (see struct definition for details).\\n     * @return claimAmount The amount of tokens claimed from the incentive batch.\\n     */\\n    function claimFromIncentiveBatchAndExtend(\\n        uint256 batchIndex,\\n        uint256 lockupId\\n    ) external returns (Lockup memory lockup, uint128 claimAmount);\\n\\n    /**\\n     * @notice This function allows claiming rewards from a specific incentive\\n     * batch, without extending any lockups.\\n     * @param batchIndex The index of the incentive batch from which to claim rewards.\\n     * @return lockup A Lockup struct containing details about the user's\\n     * lockup that might have been affected by the claim (see struct definition\\n     * for details).\\n     * @return claimAmount The amount of tokens claimed from the incentive batch.\\n     */\\n    function claimFromIncentiveBatch(uint256 batchIndex) external returns (Lockup memory lockup, uint128 claimAmount);\\n\\n    /**\\n     * @notice This function creates a new incentive batch for a specified amount\\n     * of incentive tokens, timepoint, stake duration, and associated ERC-20\\n     * token. An incentive batch is a reward of incentives put up by the\\n     * caller at a certain timepoint.  The incentive batch is claimable by ve\\n     * holders after the timepoint has passed.  The ve holders will receive\\n     * their incentive pro rata of their vote balance (`pastbalanceOf`) at that\\n     * timepoint.  The incentivizer can specify that users have to stake the\\n     * resulting incentive for a given `stakeDuration` number of seconds.\\n     * `stakeDuration` can either be zero, meaning that no staking is required\\n     * on redemption, or can be a number between `MIN_STAKE_DURATION()` and\\n     * `MAX_STAKE_DURATION()`.\\n     * @param amount The total amount of incentive tokens to be distributed in the batch.\\n     * @param timepoint The timepoint at which the incentive batch starts accruing rewards.\\n     * @param stakeDuration The duration of the lockup period required to be\\n     * eligible for the incentive batch rewards.\\n     * @param incentiveToken The address of the ERC20 token used for the incentive rewards.\\n     * @return index The index of the newly created incentive batch.\\n     */\\n    function createIncentiveBatch(\\n        uint128 amount,\\n        uint48 timepoint,\\n        uint128 stakeDuration,\\n        IERC20 incentiveToken\\n    ) external returns (uint256 index);\\n}\\n\\ninterface IMaverickV2VotingEscrow is IMaverickV2VotingEscrowBase, IERC20Metadata, IERC6372 {}\\n\"\r\n    },\r\n    \"node_modules/@maverick/v2-common/contracts/base/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// As the copyright holder of this work, Ubiquity Labs retains\\n// the right to distribute, use, and modify this code under any license of\\n// their choosing, in addition to the terms of the GPL-v2 or later.\\npragma solidity ^0.8.25;\\nimport {IMulticall} from \\\"./IMulticall.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/6ba452dea4258afe77726293435f10baf2bed265/contracts/utils/Multicall.sol\\n\\n/*\\n * @notice Multicall\\n */\\nabstract contract Multicall is IMulticall {\\n    /**\\n     * @notice This function allows multiple calls to different contract functions\\n     * in a single transaction.\\n     * @param data An array of encoded function call data.\\n     * @return results An array of the results of the function calls.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\ninterface IStake {\\n    /// @notice Deposit tokens, and receive sdToken or sdTokenGauge in return.\\n    /// @param _amount Amount of tokens to deposit.\\n    /// @param _lock Whether to lock the tokens in the locker contract.\\n    /// @param _stake Whether to stake the sdToken in the gauge.\\n    /// @param _user Address of the user to receive the sdToken.\\n    /// @dev If the lock is true, the tokens are directly sent to the locker and increase the lock amount as veToken.\\n    /// If the lock is false, the tokens are sent to this contract until someone locks them. A small percent of the deposit\\n    /// is used to incentivize users to lock the tokens.\\n    /// If the stake is true, the sdToken is staked in the gauge that distributes rewards. If the stake is false, the sdToken\\n    /// is sent to the user.\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        bool _stake,\\n        address _user\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\ninterface IUnlock {\\n    /**\\n     * @notice Puils mav tokens into the deposit contract via transferFrom\\n     * @param to Address of the receiver of the deposit\\n     * @param _amount MAV amount to deposit\\n     * @param _lock Lock now? or pay ~0.1% to the locker\\n     * @param _stake Stake the wrapper tokens into staking contract\\n     */\\n    function depositFor(\\n        address to,\\n        uint256 _amount,\\n        bool _lock,\\n        bool _stake\\n    ) external;\\n\\n    /**\\n     * @notice Address of unlock staker.\\n     */\\n    function staker() external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpiral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISpiral {\\n    struct Info {\\n        address locker;\\n        IERC20 sprMav;\\n        IERC20 mav;\\n        uint256 unlockTime;\\n    }\\n\\n    /**\\n     * @notice Pulls locker information.\\n     */\\n    function lockerInfo() external view returns (Info memory);\\n\\n    /**\\n     * @notice Puils mav tokens into the deposit contract via transferFrom.\\n     * sprMav is send to msg.sender.\\n     */\\n    function lock(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILegacyVeMav.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILegacyVeMav is IERC20 {\\n    /// @notice Preview the number of points that would be returned for the\\n    /// given amount and duration.\\n    ///\\n    /// @param amount mav to be staked\\n    /// @param duration number of seconds to stake for\\n    function previewPoints(\\n        uint256 amount,\\n        uint256 duration\\n    ) external view returns (uint256 newVotes, uint256 stakingPeriodEnd);\\n\\n    function lockups(\\n        address account,\\n        uint256 lockupId\\n    ) external returns (uint128 amount, uint128 end, uint256 points);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/governance/utils/IVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC6372.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@maverick/v2-rewards/contracts/votingescrowbase/IHistoricalBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.25;\\n\\ninterface IHistoricalBalance {\\n    /**\\n     * @notice This function retrieves the historical balance of an account at\\n     * a specific point in time.\\n     * @param account The address of the account for which to retrieve the\\n     * historical balance.\\n     * @param timepoint The timepoint (block number or timestamp depending on\\n     * implementation) at which to query the balance (uint256).\\n     * @return balance The balance of the account at the specified timepoint.\\n     */\\n    function getPastBalanceOf(address account, uint256 timepoint) external view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"node_modules/@maverick/v2-common/contracts/base/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// As the copyright holder of this work, Ubiquity Labs retains\\n// the right to distribute, use, and modify this code under any license of\\n// their choosing, in addition to the terms of the GPL-v2 or later.\\npragma solidity ^0.8.25;\\n\\ninterface IMulticall {\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"forge-std/=node_modules/forge-std/src/\",\r\n      \"@maverick/=node_modules/@maverick/\",\r\n      \"@prb/=node_modules/@prb/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2500\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IMaverickV2VotingEscrow\",\"name\":\"_veMavV2\",\"type\":\"address\"},{\"internalType\":\"contract IStake\",\"name\":\"_stakeDaoContract\",\"type\":\"address\"},{\"internalType\":\"contract IUnlock\",\"name\":\"_unlockContract\",\"type\":\"address\"},{\"internalType\":\"contract ISpiral\",\"name\":\"_spiralDaoContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorAccountIsNotSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorClaimPeriodNotYetOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorInvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorInvalidStakeDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postStakeTotalSupply\",\"type\":\"uint256\"}],\"name\":\"DistributorLockerDidNotLockEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MaverickV2LockupDistributor.ClaimValue\",\"name\":\"claimValue\",\"type\":\"tuple\"}],\"name\":\"claimToMav\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MaverickV2LockupDistributor.ClaimValue\",\"name\":\"claimValue\",\"type\":\"tuple\"}],\"name\":\"claimToSpiralDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MaverickV2LockupDistributor.ClaimValue\",\"name\":\"claimValue\",\"type\":\"tuple\"}],\"name\":\"claimToStakeDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MaverickV2LockupDistributor.ClaimValue\",\"name\":\"claimValue\",\"type\":\"tuple\"}],\"name\":\"claimToUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MaverickV2LockupDistributor.ClaimValue\",\"name\":\"claimValue\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"}],\"name\":\"claimToVeMav\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateVeMavVoteBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MaverickV2LockupDistributor.ClaimValue\",\"name\":\"claimValue\",\"type\":\"tuple\"}],\"name\":\"isProofValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mav\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spiralDaoContract\",\"outputs\":[{\"internalType\":\"contract ISpiral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDaoContract\",\"outputs\":[{\"internalType\":\"contract IStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[{\"internalType\":\"contract IUnlock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veMavLegacy\",\"outputs\":[{\"internalType\":\"contract ILegacyVeMav\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veMavV2\",\"outputs\":[{\"internalType\":\"contract IMaverickV2VotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MaverickV2LockupDistributor", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "2500", "ConstructorArguments": "e311ebf689574f0a196978679f611ba99490975d634f45559c9ea00692ca03aa000000000000000000000000c6addb3327a7d4b3b604227f82a6259ca7112053000000000000000000000000177eaa1a7c26da6dc84c0cc3f9ae6fd0a470e7ec00000000000000000000000051db52ed9105622bd22eacda280844290b8a4dfc0000000000000000000000000b3bacb08142d1e37e67033f1e16a388ae96952e", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}