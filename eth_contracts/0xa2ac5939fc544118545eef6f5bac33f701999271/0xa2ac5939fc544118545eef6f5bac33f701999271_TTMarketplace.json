{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TTMarketplace.sol\": {\r\n      \"content\": \"//  $$$$$$$$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\      $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\ $$$$$$$$\\\\ $$\\\\   $$\\\\\\n//  \\\\__$$  __|$$  _____|$$  __$$\\\\ $$$\\\\    $$$ |      \\\\__$$  __|$$  __$$\\\\ $$ | $$  |$$  _____|$$$\\\\  $$ |\\n//     $$ |   $$ |      $$ /  $$ |$$$$\\\\  $$$$ |         $$ |   $$ /  $$ |$$ |$$  / $$ |      $$$$\\\\ $$ |\\n//     $$ |   $$$$$\\\\    $$$$$$$$ |$$\\\\$$\\\\$$ $$ |         $$ |   $$ |  $$ |$$$$$  /  $$$$$\\\\    $$ $$\\\\$$ |\\n//     $$ |   $$  __|   $$  __$$ |$$ \\\\$$$  $$ |         $$ |   $$ |  $$ |$$  $$<   $$  __|   $$ \\\\$$$$ |\\n//     $$ |   $$ |      $$ |  $$ |$$ |\\\\$  /$$ |         $$ |   $$ |  $$ |$$ |\\\\$$\\\\  $$ |      $$ |\\\\$$$ |\\n//     $$ |   $$$$$$$$\\\\ $$ |  $$ |$$ | \\\\_/ $$ |         $$ |    $$$$$$  |$$ | \\\\$$\\\\ $$$$$$$$\\\\ $$ | \\\\$$ |\\n//     \\\\__|   \\\\________|\\\\__|  \\\\__|\\\\__|     \\\\__|         \\\\__|    \\\\______/ \\\\__|  \\\\__|\\\\________|\\\\__|  \\\\__|\\n//\\n//   Web: teamtoken.com\\n//   Twitter: twitter.com/TeamTokenCrypto\\n//   Contact Email: admin@teamtoken.com\\n//\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ITeamNFT.sol\\\";\\nimport \\\"./interfaces/ITTRewards.sol\\\";\\n\\nerror MustBeSeller();\\nerror ListingAlreadySold();\\nerror SomeTokensAlreadySold();\\nerror NoTokensAlreadySold();\\nerror ListingNotEnoughTokens();\\nerror SellerNotEnoughTokens();\\nerror CannotTransferTokens(address _user);\\nerror NoTokensBought();\\nerror ArrayIncorrectLength();\\nerror CannotBeZero();\\nerror DeadlineMustBeOneHour();\\nerror MarketplaceNotApproved();\\n\\ncontract TTMarketplace is OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    IERC20Upgradeable public teamToken;\\n\\n    ITeamNFT public teamNft;\\n\\n    ITTRewards public ttRewards;\\n\\n    uint256 public marketplaceFee;\\n\\n    address public feeRecipient;\\n\\n    mapping(uint => SellList) public sales;\\n    uint256 public salesId;\\n\\n    mapping(address => mapping(uint256 => uint256[])) public getSales;\\n\\n    uint256 public protocolListingMaxNftPerWallet;\\n\\n    /// @notice This is the Sell struct, the basic structures contain the owner of the selling tokens.\\n    struct SellList {\\n        address seller;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amountOfToken;\\n        uint256 amountofTokenSold;\\n        uint256 startTime;\\n        uint256 deadline;\\n        uint256 price;\\n        bool isSold;\\n        bool protocolSell;\\n    }\\n\\n    /// @notice This is the emitted event, when a offer for a certain amount of tokens.\\n    event SellEvent(\\n        address indexed seller,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 price\\n    );\\n\\n    /// @notice This is the emitted event, when a sell is canceled.\\n    event CanceledSell(\\n        address indexed seller,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amountOfToken\\n    );\\n\\n    /// @notice This is the emitted event, when a sell is removed.\\n    event DeletedSell(\\n        address indexed seller,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amountOfToken\\n    );\\n\\n    /// @notice This is the emitted event, when a buy is made.\\n    event BuyEvent(\\n        address indexed buyer,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amountOfToken,\\n        uint256 price\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Function to be called on initial deployment\\n    /// @param  _teamNft The TeamToken address registry\\n    function initialize(\\n        address _admin,\\n        address _teamNft,\\n        address _teamToken\\n    ) public initializer {\\n        require(_teamNft != address(0), \\\"TeamNFT must be deployed.\\\");\\n        require(_teamToken != address(0), \\\"TeamToken must be deployed.\\\");\\n        __Ownable_init();\\n        transferOwnership(_admin);\\n        teamNft = ITeamNFT(_teamNft); // We will set the variable before we check to save gas\\n        teamToken = IERC20Upgradeable(_teamToken); // We will set the variable before\\n        feeRecipient = address(0xbac09bCd3C11168AE39028c145710Cc862E84d7C); //gnosis safe\\n        protocolListingMaxNftPerWallet = 10;\\n        marketplaceFee = 25;\\n    }\\n\\n    /**\\n        @param _newFee This is new marketplace fee amount\\n    **/\\n    function updateTotalFee(uint256 _newFee) external onlyOwner {\\n        // Set the new Marketplace fee\\n        require(_newFee <= 100 && _newFee >= 0, \\\"Fee out of range\\\");\\n        marketplaceFee = _newFee;\\n    }\\n\\n    /**\\n        @param _newTtRewards New TT Rewards contract\\n    **/\\n    function updateTtRewards(address _newTtRewards) external onlyOwner {\\n        ttRewards = ITTRewards(_newTtRewards);\\n        teamToken.approve(_newTtRewards, type(uint256).max);\\n    }\\n\\n    /**\\n        @param _newMaxNftPerWallet This is max NFT per wallet\\n\\n    **/\\n    function updateProtocolListingMaxBuy(\\n        uint256 _newMaxNftPerWallet\\n    ) external onlyOwner {\\n        protocolListingMaxNftPerWallet = _newMaxNftPerWallet;\\n    }\\n\\n    /** \\n        @param _recipient These are the updated recipient addresses of the fees.\\n    **/\\n    function updateFeeRecipient(address _recipient) external onlyOwner {\\n        feeRecipient = _recipient;\\n    }\\n\\n    function listBatchTeamNFT(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amountOfTokens,\\n        uint256[] memory _prices,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) external returns (bool) {\\n        uint256 length = _tokenIds.length;\\n        require(\\n            length == _amountOfTokens.length,\\n            \\\"tokenIds and quanitys must be same length\\\"\\n        );\\n        for (uint256 i = 0; i < length; i++) {\\n            _listTeamNFT(\\n                _msgSender(),\\n                address(teamNft),\\n                _tokenIds[i],\\n                _amountOfTokens[i],\\n                _prices[i],\\n                _startTime == 0 ? block.timestamp : _startTime,\\n                _deadline\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function listTeamNFT(\\n        uint256 _tokenId,\\n        uint256 _amountOfToken,\\n        uint256 _price,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) external returns (bool) {\\n        return\\n            _listTeamNFT(\\n                _msgSender(),\\n                address(teamNft),\\n                _tokenId,\\n                _amountOfToken,\\n                _price,\\n                _startTime == 0 ? block.timestamp : _startTime,\\n                _deadline\\n            );\\n    }\\n\\n    /** \\n        @param _token This is the address of the ERC1155 token.\\n        @param _tokenId This is the ID of the token that's inside of the ERC1155 token.\\n        @param _amountOfToken This is the amount of tokens that are going to be sold in the offer.\\n        @param _deadline This is the final date in (seconds) so the offer ends.\\n        @param _price This is the price for each token.\\n        @dev We are making some require for the parameters that needs to be required.\\n        @return Return true if the sell is created successfully.\\n    **/\\n    function _listTeamNFT(\\n        address _user,\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amountOfToken,\\n        uint256 _price,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) internal returns (bool) {\\n        /*\\n            Check if amount of token is greater than 0\\n                full price for token  is greater than 0\\n                the deadline is longer than 1 hr\\n        */\\n        if (_amountOfToken == 0 || _price == 0) {\\n            revert CannotBeZero();\\n        }\\n\\n        if (_deadline < 3600) {\\n            revert DeadlineMustBeOneHour();\\n        }\\n\\n        uint256 usersBalance = teamNft.balanceOf(_user, _tokenId);\\n\\n        // Check if the seller owns enough tokens to be able to sell.\\n        if (usersBalance < _amountOfToken) {\\n            revert SellerNotEnoughTokens();\\n        }\\n\\n        uint tokensForSale = 0;\\n        uint256[] memory usersSellData = getSales[_user][_tokenId];\\n        if (usersSellData.length > 0) {\\n            for (uint256 i = 0; i < usersSellData.length; i++) {\\n                SellList memory thisSell = sales[usersSellData[i]];\\n                tokensForSale += (thisSell.amountOfToken -\\n                    thisSell.amountofTokenSold);\\n            }\\n\\n            if (usersBalance < _amountOfToken + tokensForSale) {\\n                if (usersBalance - tokensForSale > 0) {\\n                    _amountOfToken = usersBalance - tokensForSale;\\n                } else {\\n                    revert SellerNotEnoughTokens();\\n                }\\n            }\\n        }\\n\\n        // Check if the seller has approved the marketplace to transfer TeamNFT\\n        if (!teamNft.isApprovedForAll(_user, address(this))) {\\n            revert MarketplaceNotApproved();\\n        }\\n        bool protocolListing;\\n        if (_user == teamNft.teamNftManager()) {\\n            protocolListing = true;\\n        }\\n        /*\\n            Add the salesId as increment 1\\n        */\\n        salesId++;\\n        /*\\n            Add variables to the SellList struct with tokenAddress, seller, tokenId, amountOfToken, deadline, price\\n        */\\n        sales[salesId] = SellList(\\n            _user,\\n            _token,\\n            _tokenId,\\n            _amountOfToken,\\n            0,\\n            _startTime,\\n            _startTime + _deadline,\\n            _price,\\n            false,\\n            protocolListing\\n        );\\n\\n        getSales[_user][_tokenId].push(salesId);\\n\\n        /*\\n            Emit the event when a sell is created.\\n        */\\n        emit SellEvent(_user, salesId, _tokenId, _amountOfToken, _price);\\n\\n        return true;\\n    }\\n\\n    /**\\n        @param _sellId This is the ID of the SellList that's stored in mapping function.\\n    **/\\n    function buyTeamNFT(\\n        uint256 _sellId,\\n        uint256 _quantity\\n    ) external returns (uint256) {\\n        uint256 tokensBought = _buyTeamNFT(\\n            _msgSender(),\\n            _sellId,\\n            _quantity,\\n            _msgSender(),\\n            false\\n        );\\n        if (tokensBought == 0) {\\n            revert NoTokensBought();\\n        }\\n        return tokensBought;\\n    }\\n\\n    /**\\n        @param _sellIds This is the ID of the SellList that's stored in mapping function.\\n    **/\\n    function buyBatchTeamNFT(\\n        uint256[] memory _sellIds,\\n        uint256[] memory _quantitys,\\n        bool _allowPartial\\n    ) external returns (uint256) {\\n        uint256 length = _sellIds.length;\\n        if (length != _quantitys.length) {\\n            revert ArrayIncorrectLength();\\n        }\\n\\n        uint256 tokensBought = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            tokensBought += _buyTeamNFT(\\n                _msgSender(),\\n                _sellIds[i],\\n                _quantitys[i],\\n                _msgSender(),\\n                _allowPartial\\n            );\\n        }\\n        if (tokensBought == 0) {\\n            revert NoTokensBought();\\n        }\\n        return tokensBought;\\n    }\\n\\n    function _handleProtocolListing(\\n        address _user,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        uint256 buyerBalance = teamNft.balanceOf(_user, _tokenId);\\n\\n        if ((buyerBalance + _amount) <= protocolListingMaxNftPerWallet) {\\n            return _amount;\\n        }\\n\\n        if ((buyerBalance + _amount) > protocolListingMaxNftPerWallet) {\\n            return protocolListingMaxNftPerWallet - buyerBalance;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n        Handles the buying\\n        @param _sellId This is the ID of the SellList that's stored in mapping function.\\n        @dev this internal function will not revert, it will just return 0 if no tokens bought.\\n    **/\\n    function _buyTeamNFT(\\n        address _buyer,\\n        uint256 _sellId,\\n        uint256 _amount,\\n        address _to,\\n        bool _allowPartial\\n    ) internal returns (uint256) {\\n        // Store the variable in memory so we don't\\n        SellList memory _sale = sales[_sellId];\\n\\n        // Return number of NFT bought.  Return 0 instead of revert if cannot buy.\\n        if (\\n            _sale.isSold == true ||\\n            block.timestamp < _sale.startTime ||\\n            block.timestamp > _sale.deadline\\n        ) {\\n            return 0;\\n        }\\n\\n        // Check if seller has enough tokens to sell.\\n        uint256 sellerBalance = teamNft.balanceOf(_sale.seller, _sale.tokenId);\\n\\n        if (sellerBalance == 0) {\\n            // Force cancel the sale if seller has no tokens\\n            if (_sale.amountofTokenSold == 0) {\\n                _deleteList(_sellId);\\n            } else {\\n                _cancelList(_sellId);\\n            }\\n            return 0;\\n        }\\n\\n        // Local sell amount is the amount of tokens to be sold in this transaction.\\n        // It is updated later if partials are enabled and the full amount cannot be filled.\\n        uint256 sellAmount = _amount;\\n\\n        // Check amount of tokens available for sale\\n        // If not enough tokens available, and partial is enabled, change sell amount\\n        if ((_sale.amountOfToken - _sale.amountofTokenSold) < _amount) {\\n            // If amount of tokens available is less than amount requested\\n            if (!_allowPartial) {\\n                revert ListingNotEnoughTokens();\\n            } else {\\n                sellAmount = _sale.amountOfToken - _sale.amountofTokenSold;\\n            }\\n        }\\n\\n        // If this is a protocol listing, ensure the user isn't over the max.\\n        if (_sale.protocolSell == true) {\\n            sellAmount = _handleProtocolListing(\\n                _buyer,\\n                _sale.tokenId,\\n                sellAmount\\n            );\\n        }\\n\\n        //  Stil need to ensure the amount being bought is no more than what is available in offer\\n        // TODO: CHECK TO CONFIRM WE DO NOT NEED THIS SAFETY ANYMORE WITH THE ADDITION OFABOVE CHECKS\\n        // require(\\n        //     (_sale.amountOfToken - _sale.amountofTokenSold) >= sellAmount,\\n        //     \\\"buyToken: Not enough tokens available in this offer.\\\"\\n        // );\\n\\n        // Handle nicely if seller does not have enough tokens\\n        if (sellerBalance < sellAmount) {\\n            if (!_allowPartial) {\\n                revert SellerNotEnoughTokens();\\n            }\\n            // If the seller balance is lower than total\\n            // We will check to see if we should do a partial sale.\\n\\n            // Change sell amount to balance of seller\\n            sellAmount = sellerBalance;\\n        }\\n\\n        /*\\n            Get salePrice and feePrice from the marketplaceFee\\n        */\\n        uint256 salePrice = _sale.price * sellAmount;\\n        uint256 feePrice = (salePrice * marketplaceFee) / 1000;\\n\\n        if (!teamToken.transferFrom(_buyer, address(this), salePrice)) {\\n            revert CannotTransferTokens(_buyer);\\n        }\\n\\n        /*\\n            Transfer salePrice-feePrice to the seller's wallet\\n        */\\n        if (_sale.protocolSell) {\\n            teamToken.transfer(address(ttRewards), salePrice - feePrice);\\n            ttRewards.receiveRewards(salePrice - feePrice, _sale.tokenId);\\n        } else {\\n            teamToken.transfer(_sale.seller, salePrice - feePrice);\\n        }\\n\\n        /*\\n            Distribution feePrice to the recipients' wallets\\n        */\\n        teamToken.transfer(feeRecipient, feePrice);\\n\\n        /* \\n            After we send the TeamToken to the seller, we send\\n            the amountOfToken to the _to address\\n        */\\n        teamNft.safeTransferFrom(\\n            _sale.seller,\\n            _to,\\n            _sale.tokenId,\\n            sellAmount,\\n            \\\"0x0\\\"\\n        );\\n\\n        /* \\n            Now we must mark the tokens as sold.\\n        */\\n\\n        sales[_sellId].amountofTokenSold = _sale.amountofTokenSold + sellAmount; // We will use the storage variable rather than memory since we need this to persist.\\n\\n        if (_sale.amountofTokenSold + sellAmount == _sale.amountOfToken) {\\n            sales[_sellId].isSold = true;\\n        }\\n\\n        /*\\n            Emit the event when a buy occurs\\n        */\\n        emit BuyEvent(_to, _sellId, _sale.tokenId, sellAmount, _sale.price);\\n\\n        return sellAmount;\\n    }\\n\\n    /** \\n        @param _sellId The ID of the sell that you want to cancel.\\n    **/\\n    function cancelList(uint256 _sellId) external returns (bool) {\\n        if (sales[_sellId].seller != _msgSender()) {\\n            revert MustBeSeller();\\n        }\\n        // Delete the listing if no tokens have been sold yet.\\n        // Note: Keeping most safety checks in child function\\n        // so they are only performed if we are deleting\\n        if (sales[_sellId].amountofTokenSold == 0) {\\n            return _deleteList(_sellId);\\n        } else {\\n            return _cancelList(_sellId);\\n        }\\n    }\\n\\n    function _deleteList(uint256 _sellId) internal returns (bool) {\\n        // Use in memory variable for everything except when we need to persist data change\\n        // For gas savings\\n        SellList memory _sale = sales[_sellId];\\n\\n        if (_sale.isSold == true) {\\n            revert ListingAlreadySold();\\n        }\\n\\n        if (_sale.amountofTokenSold > 0) {\\n            revert SomeTokensAlreadySold();\\n        }\\n\\n        // Delete the listing since nothing was sold yet\\n        delete sales[_sellId];\\n\\n        /*\\n            Emit the event when a sell is cancelled.\\n        */\\n        emit DeletedSell(\\n            _sale.seller,\\n            _sellId,\\n            _sale.tokenId,\\n            _sale.amountOfToken\\n        );\\n\\n        return true;\\n    }\\n\\n    function _cancelList(uint256 _sellId) internal returns (bool) {\\n        // Use in memory variable for everything except when we need to persist data change\\n        // For gas savings\\n        SellList memory _sale = sales[_sellId];\\n\\n        if (_sale.isSold == true) {\\n            revert ListingAlreadySold();\\n        }\\n\\n        if (_sale.amountofTokenSold == 0) {\\n            revert NoTokensAlreadySold();\\n        }\\n\\n        /*\\n            After those checks it is now safe to cancel\\n        */\\n\\n        // Cannot use our local variable as we need to persist state change\\n\\n        // Change the amount of tokens for sale to the total sold\\n        sales[_sellId].amountOfToken = _sale.amountofTokenSold;\\n        // Mark the listing as sold.\\n        sales[_sellId].isSold = true;\\n\\n        /*\\n            Emit the event when a sell is cancelled.\\n        */\\n        emit CanceledSell(\\n            _sale.seller,\\n            _sellId,\\n            _sale.tokenId,\\n            _sale.amountOfToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n        @param _receiver This is the address which will be receive the token.\\n        @param _token This is the address of the ERC1155 token.\\n        @param _tokenId This is the ID of the token that's inside of the ERC1155 token.\\n        @param _amountOfToken This is the amount of tokens that are going to be transferred.\\n        @dev We are making some require for the parameters that needs to be required.\\n        @return Return true if the sell is created successfully.\\n    **/\\n    function transfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amountOfToken\\n    ) external returns (bool) {\\n        /* \\n            Send ERC1155 token to _receiver wallet\\n            _amountOfToken to the _receiver\\n        */\\n        IERC1155Upgradeable(_token).safeTransferFrom(\\n            _msgSender(),\\n            _receiver,\\n            _tokenId,\\n            _amountOfToken,\\n            \\\"0x0\\\"\\n        );\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITTRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITTRewards {\\n    function receiveRewards(uint256 amount, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITeamNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ITeamNFT is IERC1155Upgradeable {\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function teamNftManager() external view returns (address);\\n\\n    function setTeamNftRenderer(address) external;\\n\\n    function isApprovedForAll(address, address) external view returns (bool);\\n\\n    function setApprovalForAll(address, bool) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayIncorrectLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"CannotTransferTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineMustBeOneHour\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingAlreadySold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingNotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketplaceNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeSeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensAlreadySold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensBought\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SellerNotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SomeTokensAlreadySold\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"}],\"name\":\"CanceledSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"}],\"name\":\"DeletedSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_sellIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantitys\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_allowPartial\",\"type\":\"bool\"}],\"name\":\"buyBatchTeamNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyTeamNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellId\",\"type\":\"uint256\"}],\"name\":\"cancelList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountOfTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"listBatchTeamNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"listTeamNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolListingMaxNftPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountofTokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"protocolSell\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamNft\",\"outputs\":[{\"internalType\":\"contract ITeamNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttRewards\",\"outputs\":[{\"internalType\":\"contract ITTRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxNftPerWallet\",\"type\":\"uint256\"}],\"name\":\"updateProtocolListingMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateTotalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTtRewards\",\"type\":\"address\"}],\"name\":\"updateTtRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TTMarketplace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}