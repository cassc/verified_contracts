{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ENS_ERC20.sol\": {\r\n      \"content\": \"// \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318 \u2318\\n// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.24;\\n\\n/// @notice Simple ERC20 token for representing ENS ownership.\\ncontract ENS_ERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed from, address indexed to, uint256 amount);\\n\\n    IENSHelper constant ENS_REGISTRY = \\n        IENSHelper(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\\n    IENSHelper constant ENS_WRAPPER = \\n        IENSHelper(0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401);\\n    \\n    mapping(address => mapping(address => uint256)) \\n        public allowance;\\n    mapping(address => uint256) \\n        public balanceOf;\\n\\n    string public constant name = \\\"ENS ERC20\\\";\\n    string public constant symbol = \\\"ENS20\\\";\\n    uint256 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n\\n    error Unauthorized();\\n\\n    function approve(address to, uint256 amount) public payable returns (bool) {\\n        allowance[msg.sender][to] = amount;\\n        emit Approval(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public payable returns (bool) {\\n        return transferFrom(msg.sender, to, amount);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount)\\n        public\\n        payable\\n        returns (bool)\\n    {\\n        address _owner = owner();\\n        if (msg.sender != _owner)\\n            if (allowance[_owner][msg.sender] != type(uint256).max) \\n                allowance[_owner][msg.sender] -= amount;\\n        balanceOf[from] -= amount;\\n        unchecked { balanceOf[to] += amount; }\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function mint(address to, uint256 amount) public payable {\\n        if (msg.sender != owner()) revert Unauthorized();\\n        totalSupply += amount;\\n        unchecked { balanceOf[to] += amount; }\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) public payable {\\n        if (msg.sender != owner()) revert Unauthorized();\\n        balanceOf[from] -= amount;\\n        unchecked { totalSupply -= amount; }\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function owner() public view returns (address _owner) {\\n        bytes32 _node = node();\\n        _owner = ENS_REGISTRY.owner(_node);\\n        if (IENSHelper(_owner) == ENS_WRAPPER) _owner = ENS_WRAPPER.ownerOf(uint256(_node));\\n    }\\n\\n    function node() public pure returns (bytes32 _node) {\\n        assembly (\\\"memory-safe\\\") {\\n            _node :=\\n                calldataload(sub(calldatasize(), shr(240, calldataload(sub(calldatasize(), 2)))))\\n        }\\n    }\\n}\\n\\ninterface IENSHelper {\\n    function owner(bytes32) external view returns (address);\\n    function ownerOf(uint256) external view returns (address);\\n}\\n\\n/// @notice Simple ERC20 token factory for representing ENS ownership.\\ncontract ENS_ERC20_FACTORY {\\n    ENS_ERC20 immutable implementation;\\n\\n    constructor() payable { implementation = new ENS_ERC20(); }\\n\\n    function createToken(bytes32 node) public payable returns (address instance) {\\n        bytes memory data = bytes.concat(node);\\n        ENS_ERC20 _implementation = implementation;\\n        assembly {\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n            let extraLength := add(dataLength, 2)\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            mstore(sub(data, 0x0d), _implementation)\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n            instance := create2(0, sub(data, 0x4c), add(extraLength, 0x6c), node)\\n            if iszero(instance) {\\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ENS_ERC20_FACTORY", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "9999999", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}