{"SourceCode": "/*\r\n\r\nhttp://saviorcoin66.com/\r\nhttps://twitter.com/SaviorCoin66?t=kMYP344exYrRkvpLFRRwUA&s=09\r\nhttps://t.me/SaviorCoin66\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Savior Coin.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.22;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ninterface ERC20Interface {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Safe Math Library\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    }\r\n\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    }\r\n\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract SAVIOR is ERC20Interface, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\r\n\r\n\r\n    uint256 public totalSupply;\r\n\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n\r\n    constructor() Ownable(msg.sender) {\r\n    name = \"Savior Coin\";\r\n    symbol = \"SAVIOR\";\r\n    decimals = 18;\r\n    totalSupply = 8000000066000000000000000000;\r\n    balances[msg.sender] = totalSupply;\r\n    emit Transfer(address(0), msg.sender, totalSupply);\r\n}\r\n\r\n\r\n    function balanceOf(address tokenOwner) public view override returns (uint256) {\r\n\r\n        return balances[tokenOwner];\r\n\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 tokens) public override returns (bool) {\r\n\r\n        require(to != address(0), \"SAVIOR: transfer to the zero address\");\r\n\r\n        require(tokens <= balances[msg.sender], \"SAVIOR: transfer amount exceeds balance\");\r\n\r\n\r\n        balances[msg.sender] = balances[msg.sender].safeSub(tokens);\r\n\r\n        balances[to] = balances[to].safeAdd(tokens);\r\n\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    function allowance(address tokenOwner, address spender) public view override returns (uint256) {\r\n\r\n        return allowances[tokenOwner][spender];\r\n\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 tokens) public override returns (bool) {\r\n\r\n        allowances[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool) {\r\n\r\n        require(from != address(0), \"SAVIOR: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"SAVIOR: transfer to the zero address\");\r\n\r\n        require(tokens <= balances[from], \"SAVIOR: transfer amount exceeds balance\");\r\n\r\n        require(tokens <= allowances[from][msg.sender], \"SAVIOR: transfer amount exceeds allowance\");\r\n\r\n\r\n        balances[from] = balances[from].safeSub(tokens);\r\n\r\n        balances[to] = balances[to].safeAdd(tokens);\r\n\r\n        allowances[from][msg.sender] = allowances[from][msg.sender].safeSub(tokens);\r\n\r\n\r\n        emit Transfer(from, to, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SAVIOR", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0e94598117879f86c5815d4bd42858265d95300a87283db704cf1e4fb33b5db"}