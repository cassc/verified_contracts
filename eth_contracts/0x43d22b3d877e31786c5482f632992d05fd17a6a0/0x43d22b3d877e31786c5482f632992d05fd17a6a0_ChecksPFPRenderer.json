{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChecksPFPRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./interfaces/IChecks.sol\\\";\\nimport \\\"./interfaces/IRenderer.sol\\\";\\nimport \\\"./libraries/Utilities.sol\\\";\\n\\ncontract ChecksPFPRenderer is IRenderer {\\n\\n    IChecks checks = IChecks(0x036721e5A769Cc48B3189EFbb9ccE4471E8A48B1);\\n\\n    /// @dev Render the metadata for the token.\\n    /// @param tokenId The token to render.\\n    /// @param owner The current owner of the token.\\n    function tokenURI(uint256 tokenId, address owner) public view returns (string memory) {\\n        bool linked = checks.ownerOf(tokenId) == owner;\\n\\n        return string.concat(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(abi.encodePacked(renderMetadata(tokenId, linked)))\\n        );\\n    }\\n\\n    /// @dev Render the SVG.\\n    /// @param tokenId The token to render.\\n    function svg(uint256 tokenId) public view returns (string memory) {\\n        (string[] memory colors,) = checks.colors(tokenId);\\n        uint256 count = colors.length;\\n\\n        return string.concat(\\n            '<svg ',\\n                'viewBox=\\\"0 0 608 608\\\" ',\\n                'fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n                'style=\\\"width:100vw;height:100vh;background:#808080;margin:auto;\\\"',\\n            '>',\\n                renderBackground(count, colors),\\n                renderChecks(count),\\n                renderDefs(tokenId),\\n            '</svg>'\\n        );\\n    }\\n\\n    /// @dev Render the JSON token metadata.\\n    /// @param tokenId The token to render.\\n    /// @param linked Whether the token is linked.\\n    function renderMetadata(uint256 tokenId, bool linked) private view returns (string memory) {\\n        string memory id = Utilities.uint2str(tokenId);\\n\\n        string memory img = string.concat('\\\"data:image/svg+xml;base64,', Base64.encode(abi.encodePacked(svg(tokenId))));\\n        string memory description = linked\\n            ? string.concat('PFP mirroring VV Checks #',id)\\n            : string.concat('PFP for VV Checks #',id,'. Relink to its current owner on the VV Checks website.');\\n\\n        return string.concat(\\n            '{',\\n                '\\\"name\\\": \\\"Checks PFP #',id,'\\\",',\\n                '\\\"description\\\": \\\"',description,'\\\",',\\n                '\\\"image\\\": \\\"https://api.checks.art/checks/',id,'/pfp.png\\\",',\\n                '\\\"svg\\\": ',img,'\\\",',\\n                '\\\"animation_uri\\\": ',img,'\\\",',\\n                '\\\"attributes\\\": [', attributes(linked), ']',\\n            '}'\\n        );\\n    }\\n\\n    /// @dev Render the background of the SVG.\\n    /// @param count Number of checks in the token.\\n    /// @param colors The colors of the checks token.\\n    function renderBackground(uint256 count, string[] memory colors) private pure returns (string memory) {\\n        string memory color = count > 1 ? '000' : colors[0];\\n\\n        return string.concat('<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"608\\\" height=\\\"608\\\" fill=\\\"#',color,'\\\" />');\\n    }\\n\\n    /// @dev Render the pfp body.\\n    /// @param count Number of checks in the token.\\n    function renderChecks(uint256 count) private pure returns (string memory) {\\n        return string.concat(\\n            '<rect x=\\\"152\\\" y=\\\"152\\\" width=\\\"304\\\" height=\\\"304\\\" fill=\\\"#111\\\" />',\\n            '<rect x=\\\"152\\\" y=\\\"520\\\" width=\\\"304\\\" height=\\\"88\\\" fill=\\\"#111\\\" />',\\n            '<mask id=\\\"head\\\">',\\n                count < 5\\n                    ? '<rect x=\\\"195\\\" y=\\\"195.5\\\" width=\\\"290\\\" height=\\\"289\\\" fill=\\\"white\\\" />'\\n                    : '<rect x=\\\"195\\\" y=\\\"159\\\" width=\\\"290\\\" height=\\\"289.5\\\" fill=\\\"white\\\" />',\\n            '</mask>',\\n\\n            '<mask id=\\\"torso\\\">',\\n                '<rect x=\\\"195\\\" y=\\\"447.5\\\" width=\\\"290\\\" height=\\\"73\\\" fill=\\\"white\\\" />',\\n            '</mask>',\\n\\n            '<g mask=\\\"url(#head)\\\" transform=\\\"translate(-36,', count < 5 ? '-36' : '0' ,')\\\">',\\n                '<use href=\\\"#token\\\" />',\\n            '</g>',\\n\\n            '<g mask=\\\"url(#torso)\\\" transform=\\\"translate(-36,80)\\\">',\\n                '<use href=\\\"#token\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render the <defs> section of the SVG.\\n    /// @param tokenId The check to render.\\n    function renderDefs(uint256 tokenId) private view returns (string memory) {\\n        return string.concat(\\n            '<defs>',\\n                '<g id=\\\"token\\\">',\\n                    '<svg viewBox=\\\"0 0 680 680\\\" width=\\\"680\\\" height=\\\"680\\\" style=\\\"pointer-events:none;\\\">',\\n                        checks.svg(tokenId),\\n                    '</svg>',\\n                '</g>',\\n            '</defs>'\\n        );\\n    }\\n\\n    /// @dev Render the JSON attributes for a Checks PFP.\\n    /// @param linked Whether the token is owned by the same address as its check.\\n    function attributes(bool linked) private pure returns (string memory) {\\n        return string.concat(\\n            trait('Status', linked ? 'Linked' : 'Unlinked', '')\\n        );\\n    }\\n\\n    /// @dev Generate the JSON snippet for a single attribute.\\n    /// @param traitType The `trait_type` for this trait.\\n    /// @param traitValue The `value` for this trait.\\n    /// @param append Helper to append a comma.\\n    function trait(\\n        string memory traitType, string memory traitValue, string memory append\\n    ) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"trait_type\\\": \\\"', traitType, '\\\",'\\n                '\\\"value\\\": \\\"', traitValue, '\\\"'\\n            '}',\\n            append\\n        ));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChecks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IChecks {\\n\\n    struct StoredCheck {\\n        uint16[6] composites;  // The tokenIds that were composited into this one\\n        uint8[5] colorBands;  // The length of the used color band in percent\\n        uint8[5] gradients;  // Gradient settings for each generation\\n        uint8 divisorIndex; // Easy access to next / previous divisor\\n        uint32 epoch;      // Each check is revealed in an epoch\\n        uint16 seed;      // A unique identifyer to enable swapping\\n        uint24 day;      // The days since token was created\\n    }\\n\\n    struct Check {\\n        StoredCheck stored;    // We carry over the check from storage\\n        bool isRevealed;      // Whether the check is revealed\\n        uint256 seed;        // The instantiated seed for pseudo-randomisation\\n\\n        uint8 checksCount;    // How many checks this token has\\n        bool hasManyChecks;  // Whether the check has many checks\\n        uint16 composite;   // The parent tokenId that was composited into this one\\n        bool isRoot;       // Whether it has no parents (80 checks)\\n\\n        uint8 colorBand;    // 100%, 50%, 25%, 12.5%, 6.25%, 5%, 1.25%\\n        uint8 gradient;    // Linearly through the colorBand [1, 2, 3]\\n        uint8 direction;  // Animation direction\\n        uint8 speed;     // Animation speed\\n    }\\n\\n    function getCheck(uint256 tokenId) external view returns (Check memory check);\\n\\n    function colors(uint256 tokenId) external view returns (string[] memory, uint256[] memory);\\n\\n    function svg(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IRenderer {\\n    function tokenURI(uint256 tokenId, address owner) external view returns (string memory);\\n\\n    function svg(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Utilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Utilities {\\n    /// @dev Zero-index based salted pseudorandom number based on two inputs and max bound\\n    function random(uint256 input, string memory salt, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input, salt))) % _max);\\n    }\\n\\n    /// @dev Convert an integer to a string\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @dev Get the larger number\\n    function max(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two ? one : two;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/Utilities.sol\": {\r\n        \"Utilities\": \"0x9a4dcf3fd4174f8f170f9b31eaf16001529ae613\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"svg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChecksPFPRenderer", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}