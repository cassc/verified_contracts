{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@itb/quant-common/contracts/solidity8/ITBContract.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: UNLICENSED */\\npragma solidity ^0.8.0;\\n\\nimport './utils/Withdrawable.sol';\\nimport './utils/IWETH.sol';\\n\\n\\n/// @title ITBContract contract that implements common owner only functions accross all strategies\\n/// @author IntoTheBlock Corp\\n/// @dev Abstract\\nabstract contract ITBContract is Withdrawable {\\n    using SafeERC20 for IERC20;\\n    event ApproveToken(address indexed token, address guy, uint256 wad);\\n    address payable immutable public WNATIVE;\\n\\n    /// @param _executors Executor addresses\\n    constructor(address[] memory _executors, address payable _wnative) Executable(_executors) {\\n        WNATIVE = _wnative;\\n    }\\n\\n    /// @notice Set allowance for a given token, amount and spender\\n    /// @param _token Token to spend\\n    /// @param _guy Spender\\n    /// @param _wad Max amount to spend\\n    function _approveToken(address _token, address _guy, uint256 _wad) internal {\\n        if (_wad != 0) {\\n            if (IERC20(_token).allowance(address(this), _guy) >= _wad)\\n                return;\\n            IERC20(_token).safeApprove(_guy, 0);\\n        }\\n        IERC20(_token).safeApprove(_guy, _wad);\\n        emit ApproveToken(_token, _guy, _wad);\\n    }\\n\\n    /// @notice Check current allowance and, if necessary, set it to a new amount for a given token, amount and spender\\n    /// @param _token Token to spend\\n    /// @param _guy Spender\\n    /// @param _amount New max amount to spend\\n    function _checkAllowanceAndApprove(address _token, address _guy, uint256 _amount) internal {\\n        if (IERC20(_token).allowance(address(this), _guy) < _amount)\\n            _approveToken(_token, _guy, type(uint256).max);\\n    }\\n\\n    /// @notice Only owner. Set allowance for a given token, amount and spender\\n    /// @param _token Token to spend\\n    /// @param _guy Spender\\n    /// @param _wad Max amount to spend\\n    function approveToken(address _token, address _guy, uint256 _wad) external onlyOwner {\\n        _approveToken(_token, _guy, _wad);\\n    }\\n\\n    /// @notice Only owner. Revoke allowance for a given token and spender\\n    /// @param _token Token to spend\\n    /// @param _guy Spender\\n    function revokeToken(address _token, address _guy) external onlyOwner {\\n        _approveToken(_token, _guy, 0);\\n    }\\n\\n    /// @notice Only owner. Execute an arbitrary call\\n    /// @param _to Target address\\n    /// @param _value Value (i. e. msg.value)\\n    /// @param _data Invocation data\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable onlyOwner {\\n        (bool success, bytes memory returnData) = _to.call{ value: _value }(_data);\\n        require(success, string(returnData));\\n    }\\n\\n    /// @notice Only owner. Execute multiple arbitrary calls in order\\n    /// @param _tos Target address for each call\\n    /// @param _values Value for each call (i. e. msg.value)\\n    /// @param _datas Invocation data for each call\\n    function batchExecute(address[] calldata _tos, uint256[] calldata _values, bytes[] calldata _datas) external payable onlyOwner {\\n        require(_tos.length == _values.length && _tos.length == _datas.length, \\\"Arguments length mismatch\\\");\\n        for (uint256 i = 0; i < _tos.length; i++) {\\n            (bool success, bytes memory returnData) = _tos[i].call{ value: _values[i] }(_datas[i]);\\n            require(success, string(returnData));\\n        }\\n    }\\n\\n    function wrapNative(uint256 _amount) public onlyExecutor {\\n        IWETH(WNATIVE).deposit{ value: _amount }();\\n    }\\n\\n    function unwrapNative(uint256 _amount) public onlyExecutor {\\n        IWETH(WNATIVE).withdraw(_amount);\\n    }\\n}\"\r\n    },\r\n    \"@itb/quant-common/contracts/solidity8/utils/Executable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n/// @title Base contract that implements executor related functions\\n/// @author IntoTheBlock Corp\\n/// @dev Abstract\\nabstract contract Executable is Ownable2Step {\\n    mapping(address => bool) public executors;\\n\\n    event ExecutorUpdated(address indexed executor, bool enabled);\\n\\n    /// @param _executors Initial whitelisted executor addresses\\n    constructor(address[] memory _executors) {\\n        for (uint256 i = 0; i < _executors.length; i++) {\\n            addExecutor(_executors[i]);\\n        }\\n    }\\n\\n    /// @notice Revert if call is not being made from the owner or an executor\\n    modifier onlyExecutor() {\\n        require(owner() == msg.sender || executors[msg.sender], \\\"Executable: caller is not the executor\\\");\\n        _;\\n    }\\n\\n    /// @notice Only owner. Add an executor\\n    /// @param _executor New executor address\\n    function addExecutor(address _executor) public onlyOwner {\\n        emit ExecutorUpdated(_executor, true);\\n        executors[_executor] = true;\\n    }\\n\\n    /// @notice Only owner. Remove an executor\\n    /// @param _executor Executor address to remove\\n    function removeExecutor(address _executor) external onlyOwner {\\n        emit ExecutorUpdated(_executor, false);\\n        executors[_executor] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"@itb/quant-common/contracts/solidity8/utils/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function balanceOf(address) external view returns (uint256);\\n    function allowance(address, address) external view returns (uint256);\\n\\n    fallback() external payable;\\n    receive() external payable;\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n    function totalSupply() external view returns (uint256);\\n    function approve(address guy, uint256 wad) external returns (bool);\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n}\"\r\n    },\r\n    \"@itb/quant-common/contracts/solidity8/utils/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport './Executable.sol';\\n\\n/**\\n    Ensures that any contract that inherits from this contract is able to\\n    withdraw funds that are accidentally received or stuck.\\n */\\n\\n/// @title Base contract that implements withdrawal related functions\\n/// @author IntoTheBlock Corp\\n/// @dev Abstract\\nabstract contract Withdrawable is Executable {\\n    using SafeERC20 for IERC20;\\n    address constant ETHER = address(0);\\n\\n    event LogWithdraw(\\n        address indexed _to,\\n        address indexed _asset_address,\\n        uint256 amount\\n    );\\n\\n    receive() external payable {}\\n\\n    /// @notice ERC20 or ETH balance of this contract given a token address\\n    /// @param _asset_address Token address or address(0) for ETH\\n    /// @return Balance    \\n    function _balance(address _asset_address) internal view returns (uint256) {\\n        return _asset_address == ETHER ? address(this).balance : IERC20(_asset_address).balanceOf(address(this));\\n    }\\n    \\n    /// @notice ERC20 balance of given account\\n    /// @param _asset_address Token address \\n    /// @param _account Account address \\n    /// @return Balance  \\n    function balanceOf(address _asset_address, address _account) public view returns (uint256) {\\n        return IERC20(_asset_address).balanceOf(_account);\\n    }\\n\\n    /// @notice Send the given amount of the given token or ETH to the given receiver\\n    /// @param _asset_address Token address or address(0) for ETH\\n    /// @param _amount Amount to send\\n    /// @param _to Receiver address\\n    function _withdraw_to(address _asset_address, uint256 _amount, address payable _to) internal {\\n        require(_to != address(0), 'Invalid address');\\n        uint256 balance = _balance(_asset_address);\\n        require(balance >= _amount, 'Insufficient funds');\\n        if (_asset_address == ETHER) {\\n            (bool success, ) = _to.call{value: _amount}(''); /* carry gas over so it works with contracts with custom fallback, we dont care about reentrancy on onlyOwner */\\n            require(success, 'Native transfer failed.');\\n        } else\\n            IERC20(_asset_address).safeTransfer(_to, _amount);\\n        emit LogWithdraw(_to, _asset_address, _amount);\\n    }\\n\\n    /// @notice Only owner. Send the given amount of the given token or ETH to the caller\\n    /// @param _asset_address Token address or address(0) for ETH\\n    /// @param _amount Amount to send\\n    function withdraw(address _asset_address, uint256 _amount) external onlyOwner {\\n        _withdraw_to(_asset_address, _amount, payable(msg.sender));\\n    }\\n\\n    /// @notice Only owner. Send the given amount of the given token or ETH to the given receiver\\n    /// @param _asset_address Token address or address(0) for ETH\\n    /// @param _amount Amount to send\\n    /// @param _to Receiver address\\n    function withdrawTo(address _asset_address, uint256 _amount, address payable _to) external onlyOwner {\\n        _withdraw_to(_asset_address, _amount, _to);\\n    }\\n\\n    /// @notice Only owner. Send its entire balance of the given token or ETH to the caller\\n    /// @param _asset_address Token address or address(0) for ETH\\n    function withdrawAll(address _asset_address) external onlyOwner {\\n        uint256 balance = _balance(_asset_address);\\n        _withdraw_to(_asset_address, balance, payable(msg.sender));\\n    }\\n\\n    /// @notice Only owner. Send its entire balance of the given token or ETH to the given receiver\\n    /// @param _asset_address Token address or address(0) for ETH\\n    /// @param _to Receiver address\\n    function withdrawAllTo(address _asset_address, address payable _to) external onlyOwner {\\n        uint256 balance = _balance(_asset_address);\\n        _withdraw_to(_asset_address, balance, _to);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegation.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: UNLICENSED */\\npragma solidity ^0.8.0;\\n\\ninterface IDelegation {\\n\\n  struct QueuedWithdrawalParams {\\n      address[] strategies;\\n      uint256[] shares;\\n      address withdrawer;\\n  }\\n\\n  struct Withdrawal {\\n      address staker;\\n      address delegatedTo;\\n      address withdrawer;\\n      uint256 nonce;\\n      uint32 startBlock;\\n      address[] strategies;\\n      uint256[] shares;\\n  } \\n\\n  struct SignatureWithExpiry {\\n    bytes signature;\\n    uint expiry;\\n  }\\n\\n  function queueWithdrawals(QueuedWithdrawalParams[] memory) external returns (uint256 shares);\\n  \\n  function getWithdrawalDelay(address[] memory) external view returns (uint256);\\n\\n  function delegatedTo(address) external view returns (address);\\n  \\n  function delegateTo(address, SignatureWithExpiry memory, bytes32) external;\\n\\n  function undelegate(address) external returns (bytes32[] memory);\\n  \\n  function cumulativeWithdrawalsQueued(address) external view returns (uint);\\n\\n  function completeQueuedWithdrawal(Withdrawal memory, address[] memory, uint, bool) external;\\n\\n  function calculateWithdrawalRoot(Withdrawal memory) external pure returns (bytes32);\\n\\n  function pendingWithdrawals(bytes32) external view returns (bool); \\n\\n  function delegationApprover(address operator) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidStaking.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: UNLICENSED */\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidStaking {\\n\\n  function sharesToUnderlying(uint) external view returns (uint256 shares);\\n\\n  function shares(address) external view returns (uint256 shares);\\n  \\n  function totalShares() external view returns (uint256);\\n  \\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyManager.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: UNLICENSED */\\npragma solidity ^0.8.0;\\n\\ninterface IStrategyManager {\\n\\n  function depositIntoStrategy(address strategy, address token, uint256 amount) external returns (uint256 shares);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/PositionManager.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: UNLICENSED */\\npragma solidity ^0.8.0;\\n\\nimport '@itb/quant-common/contracts/solidity8/ITBContract.sol';\\nimport './interfaces/IStrategyManager.sol';\\nimport './interfaces/ILiquidStaking.sol';\\nimport './interfaces/IDelegation.sol';\\n\\n/// @title PositionManager for EigenLayer\\n/// @author IntoTheBlock Corp\\ncontract PositionManager is ITBContract {\\n    struct PositionConfig {\\n        address liquid_staking;\\n        address underlying;\\n        address delegate_to;\\n    }\\n\\n    struct QueuedWithdrawal {\\n        uint withdrawal_block;\\n        address[] tokens;\\n        IDelegation.Withdrawal withdrawal;\\n    }\\n\\n    event Deposit(address indexed caller, address token, uint amount, uint lpt_change);\\n    event StartWithdrawal(address indexed caller, address token, uint withdrawal_nonce, uint withdrawal_index, uint start_block, uint withdrawal_block, uint lpt_amount);\\n    event Withdraw(address indexed caller, address token, uint withdrawal_nonce, uint withdrawal_index, uint amount, uint lpt_change);\\n\\n    event Assemble(address indexed caller, address[] tokens, uint[] amounts, uint lpt_change);\\n    event Disassemble(address indexed caller, address[] tokens, uint[] amounts, uint lpt_change);\\n    event UpdateStrategyManager(address indexed caller, address strategy_manager);\\n    event UpdateDelegationManager(address indexed caller, address delegation_manager);\\n    event UpdatePositionConfig(address indexed caller, address liquid_staking, address underlying, address delegate_to);\\n\\n    PositionConfig public positionConfig;\\n    \\n    IStrategyManager public strategyManager;\\n    IDelegation public delegationManager;\\n\\n    mapping(uint => QueuedWithdrawal) public withdrawalQueue;\\n    uint public cumulativeWithdrawalsQueued;\\n    uint public indexNextWithdrawal;\\n\\n    function VERSION() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    constructor(address[] memory _executors, address payable _wnative, address _strategy_manager, address _delegation_manager, address _liquid_staking, address _underlying, address _delegate_to) ITBContract(_executors, _wnative) {\\n        updateStrategyManager(_strategy_manager);\\n        updateDelegationManager(_delegation_manager);\\n        updatePositionConfig(_liquid_staking, _underlying, _delegate_to);\\n        if (_delegate_to != address(0))\\n            delegate();\\n    }\\n\\n    function updateStrategyManager(address _strategy_manager) public onlyOwner {\\n        strategyManager = IStrategyManager(_strategy_manager);\\n        emit UpdateStrategyManager(msg.sender, _strategy_manager);\\n    }\\n\\n    function updateDelegationManager(address _delegation_manager) public onlyOwner {\\n        delegationManager = IDelegation(_delegation_manager);\\n        emit UpdateDelegationManager(msg.sender, _delegation_manager);\\n    }\\n\\n    function updatePositionConfig(address _liquid_staking, address _underlying, address _delegate_to) public onlyOwner {\\n        positionConfig = PositionConfig(\\n            _liquid_staking,\\n            _underlying,\\n            _delegate_to\\n        );\\n        emit UpdatePositionConfig(msg.sender, _liquid_staking, _underlying, _delegate_to);\\n    }\\n\\n    modifier hasConfig() {\\n        require(positionConfig.liquid_staking != address(0), 'A3'); // position_config is missing\\n        _;\\n    }\\n\\n    function _percentageAmount(uint _amount, uint _percentage) internal pure returns (uint) {\\n        return _amount * _percentage / 1e18;\\n    }\\n\\n    function getWithdrawalDelay() public view returns (uint) {\\n        address[] memory strategies = new address[](1);\\n        strategies[0] = address(strategyManager);\\n        return delegationManager.getWithdrawalDelay(strategies);\\n    }\\n\\n    function getPositionAssets() public view returns (address[] memory) {\\n        address[] memory assets = new address[](1);\\n        assets[0] = positionConfig.underlying;\\n        return assets;\\n    }\\n\\n    function getUnderlyings() external view returns (address[] memory assets, uint[] memory amounts) {\\n        address[] memory tokens = getPositionAssets();\\n        uint[] memory balances = new uint[](tokens.length);\\n        balances[0] = ILiquidStaking(positionConfig.liquid_staking).sharesToUnderlying(getTotalLPT());\\n        return (tokens, balances);\\n    }\\n\\n    function getLPTStaked() public view returns (uint) {\\n        return ILiquidStaking(positionConfig.liquid_staking).shares(address(this));\\n    }\\n\\n    function lptPendingOfWithdraw() public view returns (uint amount_pending) { \\n        for (uint i = indexNextWithdrawal; i < cumulativeWithdrawalsQueued; i++)\\n            amount_pending += withdrawalQueue[i].withdrawal.shares[0];\\n    }\\n\\n    function getTotalLPT() public view returns (uint) {\\n        return getLPTStaked() + lptPendingOfWithdraw();\\n    }\\n\\n    function haveWithdrawalsQueued() public view returns (bool) {\\n        return cumulativeWithdrawalsQueued > indexNextWithdrawal;\\n    }\\n\\n    function withdrawalIsPending(uint _withdrawal_index) public view returns (bool) {\\n        bytes32 root = delegationManager.calculateWithdrawalRoot(withdrawalQueue[_withdrawal_index].withdrawal);\\n        return delegationManager.pendingWithdrawals(root);\\n    }\\n\\n    function withdrawalIsReady(uint _withdrawal_index) public view returns (bool) {\\n        QueuedWithdrawal memory w = withdrawalQueue[_withdrawal_index];\\n        return withdrawalIsPending(_withdrawal_index) && block.number >= w.withdrawal_block;\\n    }\\n\\n    function nextWithdrawalIsReady() public view returns (bool) {\\n        return withdrawalIsReady(indexNextWithdrawal);\\n    }\\n\\n    function canCompleteWithdrawals() public view returns (bool) {\\n        return haveWithdrawalsQueued() && nextWithdrawalIsReady();\\n    }\\n\\n    function delegate() public onlyExecutor hasConfig {\\n        _delegate(new bytes(0), 0, bytes32(0));\\n    }\\n\\n    function delegateWithSignature(bytes memory _signature, uint _expiry, bytes32 _salt) public onlyOwner hasConfig {\\n        _delegate(_signature, _expiry, _salt);\\n    }\\n\\n    function _delegate(bytes memory _signature, uint _expiry, bytes32 _salt) internal {\\n        if (delegationManager.delegatedTo(address(this)) != address(0))\\n            undelegate();\\n        delegationManager.delegateTo(positionConfig.delegate_to, IDelegation.SignatureWithExpiry(_signature, _expiry), _salt);\\n    }\\n\\n    function undelegate() public onlyExecutor hasConfig {\\n        uint lpt = getTotalLPT();\\n        require(lpt == 0, 'D1');\\n        delegationManager.undelegate(address(this));\\n    }\\n\\n    function deposit(uint _amount, uint _min_lpt_out) public onlyExecutor hasConfig returns (uint lpt_out) {\\n        PositionConfig memory c = positionConfig;\\n\\n        lpt_out = strategyManager.depositIntoStrategy(c.liquid_staking, c.underlying, _amount);\\n        require(lpt_out >= _min_lpt_out);\\n\\n        emit Deposit(msg.sender, c.underlying, _amount, lpt_out);\\n    }\\n    \\n    function startWithdrawal(uint _shares_amount) public onlyExecutor hasConfig {\\n        PositionConfig memory c = positionConfig;\\n        uint nonce = delegationManager.cumulativeWithdrawalsQueued(address(this));\\n        uint withdrawal_block = block.number + getWithdrawalDelay();\\n        uint withdrawal_index = cumulativeWithdrawalsQueued;\\n\\n        {\\n            address[] memory strategies = new address[](1);\\n            strategies[0] = c.liquid_staking;\\n            uint[] memory shares = new uint[](1);\\n            shares[0] = _shares_amount;\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = c.underlying;\\n            IDelegation.Withdrawal memory withdrawal = IDelegation.Withdrawal({\\n                staker: address(this),\\n                delegatedTo: delegationManager.delegatedTo(address(this)),\\n                withdrawer: address(this),\\n                nonce: nonce,\\n                startBlock: uint32(block.number),\\n                strategies: strategies,\\n                shares: shares\\n            });\\n            withdrawalQueue[withdrawal_index] = QueuedWithdrawal({\\n                withdrawal_block: withdrawal_block,\\n                tokens: tokens,\\n                withdrawal: withdrawal\\n            });\\n            \\n            IDelegation.QueuedWithdrawalParams[] memory queuedWithdrawalParams = new IDelegation.QueuedWithdrawalParams[](1);\\n            queuedWithdrawalParams[0] = IDelegation.QueuedWithdrawalParams({\\n                strategies: strategies,\\n                shares: shares,\\n                withdrawer: address(this)\\n            });\\n            delegationManager.queueWithdrawals(queuedWithdrawalParams);\\n            cumulativeWithdrawalsQueued++;\\n        }\\n\\n        emit StartWithdrawal(msg.sender, c.underlying, nonce, withdrawal_index, block.number, withdrawal_block, _shares_amount);\\n    }\\n\\n    /// @dev Should not be used under normal circumstances, will break withdrawal index flow\\n    function completeWithdrawal(uint _withdrawal_index, uint _min_out) public onlyExecutor hasConfig returns (uint lpt_burnt, uint coin_out) {\\n        require(withdrawalIsPending(_withdrawal_index), 'W1');\\n        require(withdrawalIsReady(_withdrawal_index), 'W2');\\n\\n        QueuedWithdrawal memory w = withdrawalQueue[_withdrawal_index];\\n        address underlying = w.tokens[0];\\n        uint underlying_before = _balance(underlying);\\n        \\n        delegationManager.completeQueuedWithdrawal(w.withdrawal, w.tokens, 0, true);\\n\\n        lpt_burnt = w.withdrawal.shares[0];\\n        coin_out = _balance(underlying) - underlying_before;\\n        require(coin_out >= _min_out, 'W3');\\n\\n        emit Withdraw(msg.sender, underlying, w.withdrawal.nonce, _withdrawal_index, coin_out, lpt_burnt);\\n    }\\n\\n    function completeNextWithdrawal(uint _min_out) public onlyExecutor hasConfig returns (uint lpt_burnt, uint coin_out) {\\n        (lpt_burnt, coin_out) = completeWithdrawal(indexNextWithdrawal, _min_out);\\n        indexNextWithdrawal++;\\n    }\\n\\n    function completeNextWithdrawals(uint _min_out) public onlyExecutor hasConfig returns (uint total_lpt_burnt, uint total_coin_out) {\\n        while (canCompleteWithdrawals()) {\\n            (uint lpt_burnt, uint coin_out) = completeNextWithdrawal(0);\\n            total_lpt_burnt += lpt_burnt;\\n            total_coin_out += coin_out;\\n        }\\n        require(total_coin_out >= _min_out, 'W4');\\n    }\\n\\n    /// @dev Should not be used under normal circumstances\\n    function overrideWithdrawalIndexes(uint _cumulativeWithdrawalsQueued, uint _indexNextWithdrawal) external onlyExecutor {\\n        cumulativeWithdrawalsQueued = _cumulativeWithdrawalsQueued;\\n        indexNextWithdrawal = _indexNextWithdrawal;\\n    }\\n\\n    function assemble(uint _min_lpt_out) public onlyExecutor hasConfig returns (uint lpt_out) {\\n        PositionConfig memory c = positionConfig;\\n        uint underlying_amount = _balance(c.underlying);\\n\\n        lpt_out = deposit(underlying_amount, _min_lpt_out);\\n\\n        address[] memory tokens = getPositionAssets();\\n        uint[] memory underlyings_change = new uint[](tokens.length);\\n        underlyings_change[0] = underlying_amount - _balance(c.underlying);\\n\\n        emit Assemble(msg.sender, tokens, underlyings_change, lpt_out);\\n    }\\n\\n    function disassemble(uint _percentage, uint _min_coin_out) public onlyExecutor hasConfig returns (uint coin_out) {\\n        uint lpt_burnt;\\n        \\n        if (_percentage > 0) {\\n            uint lpt_amount = _percentageAmount(getLPTStaked(), _percentage);\\n            startWithdrawal(lpt_amount);\\n        }\\n        (lpt_burnt, coin_out) = completeNextWithdrawals(_min_coin_out);\\n        \\n        address[] memory tokens = getPositionAssets();\\n        uint[] memory underlyings_change = new uint[](tokens.length);\\n        underlyings_change[0] = coin_out;\\n        emit Disassemble(msg.sender, tokens, underlyings_change, lpt_burnt);\\n    }\\n\\n    function fullDisassemble(uint _min_coin_out) public onlyExecutor hasConfig returns (uint) {\\n        return disassemble(1e18, _min_coin_out);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_executors\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegation_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquid_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate_to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ApproveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpt_change\",\"type\":\"uint256\"}],\"name\":\"Assemble\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpt_change\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpt_change\",\"type\":\"uint256\"}],\"name\":\"Disassemble\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawal_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawal_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawal_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpt_amount\",\"type\":\"uint256\"}],\"name\":\"StartWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegation_manager\",\"type\":\"address\"}],\"name\":\"UpdateDelegationManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquid_staking\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate_to\",\"type\":\"address\"}],\"name\":\"UpdatePositionConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy_manager\",\"type\":\"address\"}],\"name\":\"UpdateStrategyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawal_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawal_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpt_change\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min_lpt_out\",\"type\":\"uint256\"}],\"name\":\"assemble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpt_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCompleteWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min_out\",\"type\":\"uint256\"}],\"name\":\"completeNextWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpt_burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coin_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min_out\",\"type\":\"uint256\"}],\"name\":\"completeNextWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_lpt_burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_coin_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawal_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_out\",\"type\":\"uint256\"}],\"name\":\"completeWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpt_burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coin_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeWithdrawalsQueued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"delegateWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationManager\",\"outputs\":[{\"internalType\":\"contract IDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_lpt_out\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpt_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_coin_out\",\"type\":\"uint256\"}],\"name\":\"disassemble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coin_out\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min_coin_out\",\"type\":\"uint256\"}],\"name\":\"fullDisassemble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPTStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haveWithdrawalsQueued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexNextWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lptPendingOfWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWithdrawalIsReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cumulativeWithdrawalsQueued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexNextWithdrawal\",\"type\":\"uint256\"}],\"name\":\"overrideWithdrawalIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquid_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate_to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"revokeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares_amount\",\"type\":\"uint256\"}],\"name\":\"startWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrapNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegation_manager\",\"type\":\"address\"}],\"name\":\"updateDelegationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquid_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate_to\",\"type\":\"address\"}],\"name\":\"updatePositionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy_manager\",\"type\":\"address\"}],\"name\":\"updateStrategyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset_address\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset_address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAllTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawal_index\",\"type\":\"uint256\"}],\"name\":\"withdrawalIsPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawal_index\",\"type\":\"uint256\"}],\"name\":\"withdrawalIsReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawal_block\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegation.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrapNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PositionManager", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000858646372cc42e1a627fce94aa7a7033e7cf075a00000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000298afb19a105d59e74658c4c334ff360bade6dd2000000000000000000000000d5f7838f5c461feff7fe49ea5ebaf7728bb0adfa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000051ae6ff253d59b096ca46aafe5ee29b22613b03f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}