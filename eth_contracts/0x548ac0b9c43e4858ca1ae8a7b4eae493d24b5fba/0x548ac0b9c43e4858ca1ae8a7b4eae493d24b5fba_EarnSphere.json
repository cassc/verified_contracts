{"SourceCode": "//\r\n//\u256d\u2501\u2501\u2501\u256e       \u256d\u2501\u2501\u2501\u256e  \u256d\u256e\r\n//\u2503\u256d\u2501\u2501\u256f       \u2503\u256d\u2501\u256e\u2503  \u2503\u2503\r\n//\u2503\u2570\u2501\u2501\u2533\u2501\u2501\u2533\u2501\u2533\u2501\u256e\u2503\u2570\u2501\u2501\u2533\u2501\u2501\u252b\u2570\u2501\u2533\u2501\u2501\u2533\u2501\u2533\u2501\u2501\u256e\r\n//\u2503\u256d\u2501\u2501\u252b\u256d\u256e\u2503\u256d\u252b\u256d\u256e\u254b\u2501\u2501\u256e\u2503\u256d\u256e\u2503\u256d\u256e\u2503\u2503\u2501\u252b\u256d\u252b\u2503\u2501\u252b\r\n//\u2503\u2570\u2501\u2501\u252b\u256d\u256e\u2503\u2503\u2503\u2503\u2503\u2503\u2570\u2501\u256f\u2503\u2570\u256f\u2503\u2503\u2503\u2503\u2503\u2501\u252b\u2503\u2503\u2503\u2501\u252b\r\n//\u2570\u2501\u2501\u2501\u253b\u256f\u2570\u253b\u256f\u2570\u256f\u2570\u253b\u2501\u2501\u2501\u252b\u256d\u2501\u253b\u256f\u2570\u253b\u2501\u2501\u253b\u256f\u2570\u2501\u2501\u256f\r\n//                \u2503\u2503\r\n//                \u2570\u256f\r\n//\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract EarnSphere is IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isExcludedFromMaxWalletToken;\r\n\r\n    address public uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address payable public marketingWallet = payable(0x05EB2283525aF53168E792dBc5415741acA4083a);\r\n    address payable public devWallet = payable(0x4142B89096a6377a749FBE13D2710CdaEEB373a3);\r\n    address payable public rewardsWallet = payable(0xB27C44667Ac1C1b3cB74FfD877827c8B35f7EF46);\r\n    address payable public constant burnWallet = payable(0x000000000000000000000000000000000000dEaD);\r\n    address payable public lpWallet;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _tTotal = 10**9 * 10**_decimals;\r\n    string private constant _name = \"EarnSphere\";\r\n    string private constant _symbol = \"$ES\";\r\n\r\n    uint256 public swapMinTokens = 10**6 * 10**_decimals;\r\n\r\n    uint256 public buyTax = 30;\r\n    uint256 public sellTax = 30;\r\n    uint256 public maxTransactionTax = 6;\r\n\r\n    uint256 public marketingETHPct = 23;\r\n    uint256 public devETHPct = 23;\r\n    uint256 public lpETHPct = 11;\r\n    uint256 public rewardsETHPct = 43;\r\n\r\n    uint256 public marketingPct = 17;\r\n    uint256 public devPct = 16;\r\n    uint256 public burnPct = 16;\r\n    uint256 public lpPct = 17;\r\n    uint256 public rewardsPct = 34;\r\n    uint256 public maxPct = 100;\r\n\r\n    uint256 public maxWalletSize = (_tTotal * 3) / maxPct;\r\n\r\n    IUniswapV2Router02 public _uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool public inSwapAndLiquify;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event UpdateLpWallet(address newLp_, address oldLpWallet);\r\n    event TaxThresholdChanged(uint256 tokenAmount);\r\n    event MaxWalletChanged(uint256 maxWalletSize);    \r\n    event UpdatedBuyTax(uint256 buyTax);\r\n    event UpdatedSellTax(uint256 sellTax);\r\n    event UpdatedPercentTaxes(uint256 marketing, uint256 dev, uint256 lp, uint256 rewards, uint256 burn);\r\n    event UpdatedPercentTaxesETH(uint256 marketing, uint256 dev, uint256 lp, uint256 rewards);\r\n    event UpdatedIsExcludedFromFee(address account, bool flag);\r\n    event UpdatedIsExcludedFromMaxWallet(address account, bool flag);\r\n    event UpdatedProjectWallets(address marketing, address dev, address rewards);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address lpWalletAddress) {\r\n        _tOwned[owner()] = _tTotal;\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(uniswapRouterAddress);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        lpWallet = payable(lpWalletAddress);\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[marketingWallet] = true;\r\n        isExcludedFromFee[devWallet] = true;\r\n        isExcludedFromFee[rewardsWallet] = true;\r\n        isExcludedFromFee[burnWallet] = true;\r\n        isExcludedFromFee[lpWallet] = true;\r\n        isExcludedFromFee[uniswapRouterAddress] = true;\r\n\r\n        isExcludedFromMaxWalletToken[uniswapRouterAddress] = true;\r\n        isExcludedFromMaxWalletToken[owner()] = true;\r\n        isExcludedFromMaxWalletToken[address(this)] = true;\r\n        isExcludedFromMaxWalletToken[marketingWallet] = true;\r\n        isExcludedFromMaxWalletToken[devWallet] = true;\r\n        isExcludedFromMaxWalletToken[rewardsWallet] = true;\r\n        isExcludedFromMaxWalletToken[burnWallet] = true;\r\n        isExcludedFromMaxWalletToken[lpWallet] = true;\r\n        isExcludedFromMaxWalletToken[uniswapV2Pair] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address theOwner, address theSpender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[theOwner][theSpender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _approve(\r\n        address theOwner,\r\n        address theSpender,\r\n        uint256 amount\r\n    ) private {\r\n        require(\r\n            theOwner != address(0) && theSpender != address(0),\r\n            \"Zero address.\"\r\n        );\r\n        _allowances[theOwner][theSpender] = amount;\r\n        emit Approval(theOwner, theSpender, amount);\r\n    }\r\n\r\n    function setLpWallet(address newLp_) external onlyOwner {\r\n        require(newLp_ != address(0), \"TTF::Lp wallet cannot be zero address\");\r\n\r\n        address oldLpWallet = lpWallet;\r\n        lpWallet = payable(newLp_);\r\n\r\n        emit UpdateLpWallet(newLp_, oldLpWallet);\r\n    }\r\n\r\n    function setBuyTax(\r\n        uint256 buy\r\n    ) public onlyOwner {\r\n        require(buy <= maxTransactionTax, \"Buy tax cannot exceed the maximum.\");        \r\n        buyTax = buy;\r\n        emit UpdatedBuyTax(buy);\r\n    }\r\n\r\n    function setSellTax(\r\n        uint256 sell\r\n    ) public onlyOwner {\r\n        require(sell <= maxTransactionTax, \"Sell tax cannot exceed the maximum.\");\r\n        sellTax = sell;\r\n        emit UpdatedSellTax(sell);\r\n    }    \r\n\r\n    function setPercentTaxETH(\r\n        uint256 marketing,\r\n        uint256 dev,\r\n        uint256 lp,\r\n        uint256 rewards\r\n    ) public onlyOwner {\r\n        require(marketing + dev + lp == maxPct, \"The sum of percentages must equal 100.\");\r\n        marketingETHPct = marketing;\r\n        devETHPct = dev;\r\n        lpETHPct = lp;\r\n        rewardsETHPct = rewards;\r\n\r\n        emit UpdatedPercentTaxesETH(marketing, dev,lp, rewards);\r\n    }\r\n\r\n    function setPercentTax(\r\n        uint256 marketing,\r\n        uint256 dev,\r\n        uint256 lp,\r\n        uint256 rewards,\r\n        uint256 burn\r\n    ) public onlyOwner {\r\n        require(marketing + dev + lp == maxPct, \"The sum of percentages must equal 100.\");\r\n        marketingPct = marketing;\r\n        devPct = dev;\r\n        lpPct = lp;\r\n        rewardsPct = rewards;\r\n        burnPct = burn;\r\n\r\n        emit UpdatedPercentTaxes(marketing, dev,lp, rewards, burn);\r\n    }\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        isExcludedFromFee[account] = true;\r\n        emit UpdatedIsExcludedFromFee(account, true);\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        isExcludedFromFee[account] = false;\r\n        emit UpdatedIsExcludedFromFee(account, false);\r\n    }\r\n\r\n\tfunction excludeMaxWallet(address account) external onlyOwner {\r\n        isExcludedFromMaxWalletToken[account] = true;\r\n        emit UpdatedIsExcludedFromMaxWallet(account, true);\r\n    }\r\n\r\n    function includeMaxWallet(address account) external onlyOwner {\r\n        isExcludedFromMaxWalletToken[account] = false;\r\n        emit UpdatedIsExcludedFromMaxWallet(account, false);\r\n    }\r\n\r\n    function setWallets(\r\n        address marketing,\r\n        address dev,\r\n        address rewards\r\n    ) public onlyOwner {\r\n        require(marketing != address(0) && dev != address(0) && rewards != address(0), \"Invalid wallet addresses.\");\r\n        require(payable(marketing).send(0) && payable(dev).send(0) && payable(rewards).send(0), \"All wallets need to be payable\");\r\n\r\n        isExcludedFromFee[marketingWallet] = false;\r\n        isExcludedFromFee[devWallet] = false;\r\n        isExcludedFromFee[rewardsWallet] = false;\r\n\r\n        marketingWallet = payable(marketing);\r\n        devWallet = payable(dev);\r\n        rewardsWallet = payable(rewards);\r\n\r\n        isExcludedFromFee[marketing] = true;\r\n        isExcludedFromFee[dev] = true;\r\n        isExcludedFromFee[rewards] = true;\r\n\r\n        emit UpdatedProjectWallets(marketing, dev, rewards);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (!isExcludedFromMaxWalletToken[to]) {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require(\r\n                (heldTokens + amount) <= maxWalletSize,\r\n                \"Over wallet limit.\"\r\n            );\r\n        }\r\n\r\n        require(\r\n            from != address(0) && to != address(0),\r\n            \"Using 0 address!\"\r\n        );\r\n\r\n        require(amount > 0, \"Token value must be higher than zero.\");\r\n\r\n        if (\r\n            balanceOf(address(this)) >= swapMinTokens &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair\r\n        ) {\r\n            swapAndDistributeTaxes();\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _sendToWallet(address payable wallet, uint256 amount) private {\r\n        wallet.transfer(amount);\r\n    }\r\n\r\n    function setSwapMinTokens(uint256 minTokens) external onlyOwner {\r\n        swapMinTokens = minTokens * 10**decimals();\r\n        require(swapMinTokens < totalSupply(), \"Min tokens for swap is too high.\");\r\n        emit TaxThresholdChanged(swapMinTokens);\r\n    }\r\n\r\n    function setMaxWalletTreshold(uint256 percentage) external onlyOwner {\r\n        maxWalletSize = (_tTotal * percentage) / maxPct;\r\n        require(maxWalletSize <= totalSupply(), \"Max wallet can't exceed total supply\");\r\n        require(maxWalletSize > _tTotal / 1000, \"Max wallet can't be smaller than 0.1\");\r\n        emit MaxWalletChanged(maxWalletSize);\r\n    }\r\n\r\n    function swapAndDistributeTaxes() private lockTheSwap {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 marketingTokensShare = (contractTokenBalance * marketingPct) / maxPct;\r\n        uint256 devTokensShare = (contractTokenBalance * devPct) / maxPct;\r\n        uint256 rewardsTokensShare = (contractTokenBalance * rewardsPct) / maxPct;\r\n        uint256 burnTokensShare = (contractTokenBalance * burnPct) / maxPct;\r\n        uint256 lpTokensHalfShare = (contractTokenBalance * lpPct) / (2 * maxPct);\r\n        \r\n        swapTokensForBNB(lpTokensHalfShare + marketingTokensShare + devTokensShare + rewardsTokensShare);\r\n        uint256 bnbReceived = address(this).balance;\r\n        uint256 bnbToMarketing = (bnbReceived * marketingETHPct) / maxPct;\r\n        uint256 bnbToDev = (bnbReceived * devETHPct) / maxPct;\r\n        uint256 bnbToRewards = (bnbReceived * rewardsETHPct) / maxPct;\r\n\r\n        addLiquidity(lpTokensHalfShare, (bnbReceived - bnbToMarketing - bnbToDev - bnbToRewards));\r\n        emit SwapAndLiquify(\r\n            lpTokensHalfShare,\r\n            (bnbReceived - bnbToMarketing - bnbToDev - bnbToRewards),\r\n            lpTokensHalfShare\r\n        );\r\n\r\n        _transfer(address(this), burnWallet, burnTokensShare);\r\n        _sendToWallet(rewardsWallet, bnbToRewards);\r\n        _sendToWallet(marketingWallet, bnbToMarketing);\r\n        _sendToWallet(devWallet, address(this).balance);\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            burnWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function rescueAnyToken(address tokenToRescue, uint256 percent) external onlyOwner() {\r\n        IERC20(tokenToRescue).transfer(msg.sender, IERC20(tokenToRescue).balanceOf(address(this)) * percent / 100);\r\n    }\r\n\r\n    function rescueBnb() external onlyOwner {\r\n        (bool success,) = address(owner()).call{value: address(this).balance}(\"\");\r\n        require(success, \"failed\");        \r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        bool isBuy = (from == uniswapV2Pair);\r\n        bool isSell = (to == uniswapV2Pair);\r\n        bool isBuyOrSell = isBuy || isSell;\r\n        bool takeFee = isBuyOrSell && !(isExcludedFromFee[from] || isExcludedFromFee[to]);\r\n\r\n        uint256 fee = !takeFee\r\n            ? 0\r\n            : isBuy\r\n                ? (tAmount * buyTax) / maxPct\r\n                : (tAmount * sellTax) / maxPct;\r\n        uint256 tTransferAmount = tAmount - fee;\r\n\r\n        _tOwned[from] = _tOwned[from] - tAmount;\r\n        _tOwned[to] = _tOwned[to] + tTransferAmount;\r\n        _tOwned[address(this)] = _tOwned[address(this)] + fee;\r\n        emit Transfer(from, to, tTransferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"MaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TaxThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLp_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLpWallet\",\"type\":\"address\"}],\"name\":\"UpdateLpWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"UpdatedIsExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"UpdatedIsExcludedFromMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"UpdatedPercentTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"UpdatedPercentTaxesETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedProjectWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"theSpender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devETHPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWalletToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpETHPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingETHPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsETHPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLp_\",\"type\":\"address\"}],\"name\":\"setLpWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"setPercentTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"setPercentTaxETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"setSwapMinTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EarnSphere", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008030de48e72bef087fa98e8254249cb1a8bd9e03", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9c2d5df33d843bb0193dc53259ee7ea2f7105010fe32c441696c6e540c3dec26"}