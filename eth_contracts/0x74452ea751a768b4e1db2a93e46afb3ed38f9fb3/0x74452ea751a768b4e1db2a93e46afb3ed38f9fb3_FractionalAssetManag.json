{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-12-01\r\n*/\r\n\r\n//SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.14;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract Clones {\r\n\r\n    /**\r\n        @dev Deploys and returns the address of a clone of address(this\r\n        Created by DeFi Mark To Allow Clone Contract To Easily Create Clones Of Itself\r\n        Without redundancy\r\n     */\r\n    function clone() external returns(address) {\r\n        return _clone(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function _clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface INonFungibleToken is IERC165 {\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IFractionalAsset is INonFungibleToken {\r\n\r\n    /**\r\n        Returns The URI To An Image Representing `tokenId`\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    /**\r\n        Returns The URI Associated With The Collection\r\n     */\r\n    function URI() external view returns (string memory);\r\n\r\n    /**\r\n        Returns The Name Of A Collection\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n        Returns The Symbol (Ticker) Of A Collection\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n        Returns The Number Of Fractions This NFT Is Split Into\r\n     */\r\n    function numFractions() external view returns (uint256);\r\n\r\n    /**\r\n        Initializes Fraction\r\n     */\r\n    function __init__(\r\n        string[] calldata strings,\r\n        uint256[] calldata values,\r\n        address[] calldata addrs\r\n    ) external;\r\n}\r\n\r\ninterface IDatabase {\r\n    function isVerified(address account) external view returns (bool);\r\n    function isAuthorized(address account) external view returns (bool);\r\n}\r\n\r\ncontract FractionalAssetManager is Context {\r\n\r\n    /**\r\n        Master Database Which Interacts With KYC And Auth Databases\r\n     */\r\n    IDatabase public immutable Database;\r\n\r\n    /**\r\n        Implementation Contract\r\n     */\r\n    address public implementation;\r\n\r\n    /**\r\n        List Of All Fractionalized Assets\r\n     */\r\n    address[] public allAssets;\r\n\r\n    /**\r\n        Mapping From Fractionalized Asset To Index In Array\r\n     */\r\n    mapping ( address => uint256 ) public assetIndex;\r\n\r\n    /**\r\n        Ensures Caller Is Authorized To Call Restricted Functions\r\n     */\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            Database.isAuthorized(_msgSender()) == true,\r\n            'Not Authorized To Call'\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event AssetCreated(address assetAddress);\r\n    event AssetRemoved(address assetAddress);\r\n\r\n    constructor(\r\n        address implementation_,\r\n        address DB\r\n    ) {\r\n        implementation = implementation_;\r\n        Database = IDatabase(DB);\r\n    }\r\n\r\n    function create(\r\n        string[] calldata strings,\r\n        uint256[] calldata values,\r\n        address[] calldata addrs\r\n    ) external onlyAuthorized {\r\n\r\n        // Newly Made Asset\r\n        address newAsset = Clones(implementation).clone();\r\n\r\n        // initialize new asset\r\n        IFractionalAsset(newAsset).__init__(strings, values, addrs);\r\n\r\n        // set position in array\r\n        assetIndex[newAsset] = allAssets.length;\r\n\r\n        // add to list of assets\r\n        allAssets.push(newAsset);\r\n\r\n        // emit event\r\n        emit AssetCreated(newAsset);\r\n    }\r\n\r\n    function remove(address asset) external onlyAuthorized {\r\n        require(\r\n            allAssets[assetIndex[asset]] == asset,\r\n            'Not Registered Asset'\r\n        );\r\n\r\n        uint rmIndex = assetIndex[asset];\r\n        address lastElement = allAssets[allAssets.length - 1];\r\n\r\n        // set last element's index to be the removed element\r\n        assetIndex[\r\n            lastElement\r\n        ] = rmIndex;\r\n\r\n        // set last elements position to replace the removed element\r\n        allAssets[\r\n            rmIndex\r\n        ] = lastElement;\r\n\r\n        // pop last element (copy) off the end of the array\r\n        allAssets.pop();\r\n        emit AssetRemoved(asset);\r\n    }\r\n\r\n    function setImplementation(address newImplementation) external onlyAuthorized {\r\n        implementation = newImplementation;\r\n    }\r\n\r\n    function listAllAssets() external view returns (address[] memory) {\r\n        return allAssets;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"AssetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Database\",\"outputs\":[{\"internalType\":\"contract IDatabase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"strings\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FractionalAssetManager", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a552118ead1d3d350a0a32881f4862048bc6718a000000000000000000000000238a94e37a1bade56cfcc5dbe7f48da88aa9db19", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f3d612766a56587cd3a932024cfff54909b4fd921def9ecf5c2944754c0444c"}