{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/factories/VestingCloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../Vesting.sol\\\";\\nimport \\\"./CloneFactory.sol\\\";\\n\\n/**\\n * @title VestingCloneFactory\\n * @author malteish\\n * @notice Create clones of a Vesting contract with deterministic addresses\\n */\\ncontract VestingCloneFactory is CloneFactory {\\n    constructor(address _implementation) CloneFactory(_implementation) {}\\n\\n    /**\\n     * Create and initialize a clone\\n     * @param _rawSalt value that influences the address of the clone, but not the initialization\\n     * @param _trustedForwarder the trusted forwarder (ERC2771) can not be changed, but is checked for security\\n     * @param _owner address that will own the new clone\\n     * @param _token address of the token to be vested\\n     * @return address of the clone that was created\\n     */\\n    function createVestingClone(\\n        bytes32 _rawSalt,\\n        address _trustedForwarder,\\n        address _owner,\\n        address _token\\n    ) public returns (address) {\\n        bytes32 salt = keccak256(abi.encode(_rawSalt, _trustedForwarder, _owner, _token));\\n        address clone = Clones.cloneDeterministic(implementation, salt);\\n        Vesting vesting = Vesting(clone);\\n        require(vesting.isTrustedForwarder(_trustedForwarder), \\\"VestingCloneFactory: Unexpected trustedForwarder\\\");\\n        vesting.initialize(_owner, _token);\\n        emit NewClone(clone);\\n        return clone;\\n    }\\n\\n    /**\\n     * Create a new vesting clone with a lockup plan. The contract ownership can be renounced in the same transaction,\\n     * leaving the contract without an owner and thus without any way to change the vesting plan or add other plans.\\n     * @dev This function creates a transferrable vesting plan.\\n     * @param _rawSalt value that influences the address of the clone, but not the initialization\\n     * @param _trustedForwarder the trusted forwarder (ERC2771) can not be changed, but is checked for security\\n     * @param _owner future owner of the vesting contract. If 0, the contract will not have an owner.\\n     * @param _token token to vest\\n     * @param _allocation amount of tokens to vest\\n     * @param _beneficiary address receiving the tokens\\n     * @param _start start date of the vesting\\n     * @param _cliff cliff duration\\n     * @param _duration total duration\\n     */\\n    function createVestingCloneWithLockupPlan(\\n        bytes32 _rawSalt,\\n        address _trustedForwarder,\\n        address _owner,\\n        address _token,\\n        uint256 _allocation,\\n        address _beneficiary,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _duration\\n    ) external returns (address) {\\n        // generate salt from all parameters\\n        bytes32 salt = keccak256(\\n            abi.encode(\\n                _rawSalt,\\n                _trustedForwarder,\\n                _owner,\\n                _token,\\n                _allocation,\\n                _beneficiary,\\n                _start,\\n                _cliff,\\n                _duration\\n            )\\n        );\\n        // deploy the vesting contract\\n        Vesting vesting = Vesting(createVestingClone(salt, _trustedForwarder, address(this), _token));\\n\\n        // create the vesting plan\\n        vesting.createVesting(_allocation, _beneficiary, _start, _cliff, _duration, false); // this plan is not mintable\\n\\n        // remove the manager role from the vesting contract\\n        vesting.removeManager(address(this));\\n\\n        // transfer ownership of the vesting contract\\n        if (_owner == address(0)) {\\n            // if the owner is 0, the vesting contract will not have an owner. So no one can interfere with the vesting.\\n            vesting.renounceOwnership();\\n        } else {\\n            vesting.transferOwnership(_owner);\\n        }\\n\\n        return address(vesting);\\n    }\\n\\n    /**\\n     * Calculate the address a clone will have using the given parameters\\n     * @param _rawSalt value that influences the address of the clone, but not the initialization\\n     * @param _trustedForwarder the trusted forwarder (ERC2771) can not be changed, but is checked for security\\n     * @param _owner owner of the clone\\n     * @param _token token to vest\\n     */\\n    function predictCloneAddress(\\n        bytes32 _rawSalt,\\n        address _trustedForwarder,\\n        address _owner,\\n        address _token\\n    ) external view returns (address) {\\n        require(\\n            Vesting(implementation).isTrustedForwarder(_trustedForwarder),\\n            \\\"VestingCloneFactory: Unexpected trustedForwarder\\\"\\n        );\\n        bytes32 salt = keccak256(abi.encode(_rawSalt, _trustedForwarder, _owner, _token));\\n        return Clones.predictDeterministicAddress(implementation, salt);\\n    }\\n\\n    /**\\n     * Calculate the address a clone will have using the given parameters of the contract and the lockup plan\\n     * @param _rawSalt value that influences the address of the clone, but not the initialization\\n     * @param _trustedForwarder the trusted forwarder (ERC2771) can not be changed, but is checked for security\\n     * @param _owner future owner of the vesting contract. If 0, the contract will not have an owner.\\n     * @param _token token to vest\\n     * @param _allocation amount of tokens to vest\\n     * @param _beneficiary address receiving the tokens\\n     * @param _start start date of the vesting\\n     * @param _cliff cliff duration\\n     * @param _duration total duration\\n     */\\n    function predictCloneAddressWithLockupPlan(\\n        bytes32 _rawSalt,\\n        address _trustedForwarder,\\n        address _owner,\\n        address _token,\\n        uint256 _allocation,\\n        address _beneficiary,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _duration\\n    ) external view returns (address) {\\n        require(\\n            Vesting(implementation).isTrustedForwarder(_trustedForwarder),\\n            \\\"VestingCloneFactory: Unexpected trustedForwarder\\\"\\n        );\\n        bytes32 salt = keccak256(\\n            abi.encode(\\n                _rawSalt,\\n                _trustedForwarder,\\n                _owner,\\n                _token,\\n                _allocation,\\n                _beneficiary,\\n                _start,\\n                _cliff,\\n                _duration\\n            )\\n        );\\n        salt = keccak256(abi.encode(salt, _trustedForwarder, address(this), _token));\\n        return Clones.predictDeterministicAddress(implementation, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n// derived from OpenZeppelin Contracts (last updated v4.9.0) (finance/VestingWallet.sol)\\n/// @author cjentzsch, malteish\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @dev a token must implement this interface to be used with the Vesting contract and mintable vestings\\n */\\ninterface ERC20Mintable {\\n    function mint(address, uint256) external;\\n}\\n\\n/// Struct that holds all information about a single vesting plan.\\nstruct VestingPlan {\\n    /// the amount of tokens to be vested\\n    uint256 allocation;\\n    /// the amount of tokens already released\\n    uint256 released;\\n    /// the beneficiary who will receive the vested tokens\\n    address beneficiary;\\n    /// the start time of the vesting\\n    uint64 start;\\n    /// the cliff duration of the vesting - beneficiary gets no tokens before this duration has passed\\n    uint64 cliff;\\n    /// the duration of the vesting - after this duration all tokens can be released\\n    uint64 duration;\\n    /// if true, the token can be claimed through minting, otherwise the tokens are owned by the contract and can be transferred\\n    bool isMintable;\\n}\\n\\n/**\\n * @title Vesting\\n * @dev This contract handles the vesting ERC20 tokens for a set of beneficiaries.\\n * Two types of token custody are supported: The contract can either hold ERC20 tokens directly, or mint tokens on release.\\n * The vesting plans are created by managers, of which there can be multiple.\\n * Vesting happens linearly over time, with a cliff and a total duration.\\n * The vesting plans can be created in two ways: transparently (revealing all details immediately) or privately (by\\n * committing to a vesting plan without revealing the details). In the latter case, the details can be revealed later, which\\n * must happen before the tokens can be released.\\n */\\ncontract Vesting is Initializable, ERC2771ContextUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    event Commit(bytes32 hash);\\n    event ERC20Released(uint64 id, uint256 amount);\\n    event Revoke(bytes32 hash, uint64 endVestingTime);\\n    event Reveal(bytes32 hash, uint64 id);\\n    event VestingCreated(uint64 id);\\n    event VestingStopped(uint64 id, uint64 endTime);\\n    event ManagerAdded(address manager);\\n    event ManagerRemoved(address manager);\\n    event BeneficiaryChanged(uint64 id, address newBeneficiary);\\n\\n    /// token to be vested\\n    address public token;\\n    /// stores who create and stop vestings (both public and private)\\n    mapping(address => bool) public managers;\\n    /// stores all vesting plans\\n    mapping(uint64 => VestingPlan) public vestings;\\n    /// stores promises without revealing the details. value = maximum end date of vesting\\n    mapping(bytes32 => uint64) public commitments;\\n    /// total amount of vesting plans created\\n    uint64 public ids;\\n\\n    /**\\n     * This contract will be used through clones, so the constructor only initializes\\n     * the logic contract.\\n     * @param trustedForwarder address of the trusted forwarder that can relay ERC2771 transactions\\n     */\\n    constructor(address trustedForwarder) ERC2771ContextUpgradeable(trustedForwarder) {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the contract.\\n     * @param _owner address of the owner of the contract\\n     * @param _token address of the token to be vested\\n     */\\n    function initialize(address _owner, address _token) public initializer {\\n        require(_owner != address(0), \\\"Owner must not be zero address\\\");\\n        require(_token != address(0), \\\"Token must not be zero address\\\");\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n        managers[_owner] = true;\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens that belong to the vesting plan with the given id.\\n     */\\n    function allocation(uint64 _id) public view returns (uint256) {\\n        return vestings[_id].allocation;\\n    }\\n\\n    /**\\n     * @dev Amount of tokens already released.\\n     */\\n    function released(uint64 _id) public view returns (uint256) {\\n        return vestings[_id].released;\\n    }\\n\\n    /**\\n     * @dev Address that will receive the vested tokens.\\n     */\\n    function beneficiary(uint64 _id) public view returns (address) {\\n        return vestings[_id].beneficiary;\\n    }\\n\\n    /**\\n     * @dev Start date of the vesting plan.\\n     * The cliff duration and total duration are measured from this date.\\n     */\\n    function start(uint64 _id) public view returns (uint64) {\\n        return vestings[_id].start;\\n    }\\n\\n    /**\\n     * @dev Cliff duration of the vesting plan.\\n     * The beneficiary gets no tokens before this duration has passed.\\n     */\\n    function cliff(uint64 _id) public view returns (uint64) {\\n        return vestings[_id].cliff;\\n    }\\n\\n    /**\\n     * @dev Total duration of the vesting plan.\\n     * After this duration all tokens can be released.\\n     */\\n    function duration(uint64 _id) public view returns (uint64) {\\n        return vestings[_id].duration;\\n    }\\n\\n    /**\\n     * @dev Getter for type of withdraw.\\n     * isMintable == true means that tokens are minted form the token contract.\\n     * isMintable == false means the tokens need to be held by the vesting contract directly.\\n     */\\n    function isMintable(uint64 _id) public view returns (bool) {\\n        return vestings[_id].isMintable;\\n    }\\n\\n    /**\\n     * @dev Amount of tokens that could be released right now.\\n     */\\n    function releasable(uint64 _id) public view returns (uint256) {\\n        return vestedAmount(_id, uint64(block.timestamp)) - released(_id);\\n    }\\n\\n    /**\\n     * @dev Amount of tokens that could be released at a given time.\\n     */\\n    function releasable(uint64 _id, uint64 _time) public view returns (uint256) {\\n        return vestedAmount(_id, _time) - released(_id);\\n    }\\n\\n    /**\\n     * Managers can commit to a vesting plan without revealing its details.\\n     * The parameters are hashed and this hash is stored in the commitments mapping.\\n     * Anyone can then reveal the vesting plan by providing the parameters and the salt.\\n     * @param _hash commitment hash\\n     */\\n    function commit(bytes32 _hash) external onlyManager {\\n        require(_hash != bytes32(0), \\\"hash must not be zero\\\");\\n        // the value is interpreted as maximum end date of the vesting\\n        // for real world use cases, type(uint64).max is \\\"unlimited\\\"\\n        commitments[_hash] = type(uint64).max;\\n        emit Commit(_hash);\\n    }\\n\\n    /**\\n     * Managers can revoke a commitment by providing the hash and a new latest end date.\\n     * @param _hash commitment hash\\n     * @param _end new latest end date\\n     */\\n    function revoke(bytes32 _hash, uint64 _end) external onlyManager {\\n        require(commitments[_hash] != 0, \\\"invalid-hash\\\");\\n        // already vested tokens can not be taken away (except of burning in the token contract itself)\\n        _end = uint64(block.timestamp) > _end ? uint64(block.timestamp) : _end;\\n        commitments[_hash] = _end;\\n        emit Revoke(_hash, _end);\\n    }\\n\\n    /**\\n     * Create a public transparent vesting plan from a commitment.\\n     * @param _hash  commitment hash\\n     * @param _allocation total token amount\\n     * @param _beneficiary address receiving the tokens\\n     * @param _start start date\\n     * @param _cliff cliff duration\\n     * @param _duration total duration\\n     * @param _isMintable true = tokens minted on release, false = tokens held by vesting contract\\n     * @param _salt salt for privacy\\n     */\\n    function reveal(\\n        bytes32 _hash,\\n        uint256 _allocation,\\n        address _beneficiary,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _duration,\\n        bool _isMintable,\\n        bytes32 _salt\\n    ) public returns (uint64 id) {\\n        require(\\n            _hash ==\\n                keccak256(abi.encodePacked(_allocation, _beneficiary, _start, _cliff, _duration, _isMintable, _salt)),\\n            \\\"invalid-hash\\\"\\n        );\\n        uint64 maxEndDate = commitments[_hash];\\n        require(maxEndDate > 0, \\\"invalid-hash\\\");\\n        // if a commitment has been revoked with end date before cliff, it can never be revealed\\n        require(_start + _cliff <= maxEndDate, \\\"commitment revoked before cliff ended\\\");\\n\\n        if (_start + _duration <= maxEndDate) {\\n            // the commitment has not been revoked, or the end date of the commitment is after the end of the vesting\\n            // create the vesting using the original parameters\\n            id = _createVesting(_allocation, _beneficiary, _start, _cliff, _duration, _isMintable);\\n        } else {\\n            // the commitment has been revoked with a new end date of maxEndDate\\n            // we need to override the duration to be the difference between _start and maxEndDate\\n            uint64 durationOverride = maxEndDate - _start;\\n            uint256 allocationOverride = (_allocation * durationOverride) / _duration;\\n            id = _createVesting(allocationOverride, _beneficiary, _start, _cliff, durationOverride, _isMintable);\\n        }\\n\\n        commitments[_hash] = 0; // delete commitment\\n        emit Reveal(_hash, id);\\n    }\\n\\n    /**\\n     * Create a public transparent vesting plan from a commitment and release the tokens immediately.\\n     * @param _hash  commitment hash\\n     * @param _allocation total token amount\\n     * @param _beneficiary address receiving the tokens\\n     * @param _start start date\\n     * @param _cliff cliff duration\\n     * @param _duration total duration\\n     * @param _isMintable true = tokens minted on release, false = tokens held by vesting contract\\n     * @param _salt salt for privacy\\n     * @param _maxAmount maximum amount of tokens to be released\\n     */\\n    function revealAndRelease(\\n        bytes32 _hash,\\n        uint256 _allocation,\\n        address _beneficiary,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _duration,\\n        bool _isMintable,\\n        bytes32 _salt,\\n        uint256 _maxAmount\\n    ) external returns (uint64 id) {\\n        id = reveal(_hash, _allocation, _beneficiary, _start, _cliff, _duration, _isMintable, _salt);\\n        release(id, _maxAmount);\\n    }\\n\\n    /**\\n     * Create a public vesting plan\\n     * @param _allocation total token amount\\n     * @param _beneficiary address receiving the tokens\\n     * @param _start start date of the vesting\\n     * @param _cliff cliff duration\\n     * @param _duration total duration\\n     * @param _isMintable true = tokens minted on release, false = tokens held by vesting contract\\n     */\\n    function createVesting(\\n        uint256 _allocation,\\n        address _beneficiary,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _duration,\\n        bool _isMintable\\n    ) external onlyManager returns (uint64 id) {\\n        return _createVesting(_allocation, _beneficiary, _start, _cliff, _duration, _isMintable);\\n    }\\n\\n    /**\\n     * Internal function used to create all public vesting plans.\\n     * @param _allocation total token amount\\n     * @param _beneficiary address receiving the tokens\\n     * @param _start start date of the vesting\\n     * @param _cliff cliff duration\\n     * @param _duration total duration\\n     * @param _isMintable true = tokens minted on release, false = tokens held by vesting contract\\n     */\\n    function _createVesting(\\n        uint256 _allocation,\\n        address _beneficiary,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _duration,\\n        bool _isMintable\\n    ) internal returns (uint64 id) {\\n        require(_allocation > 0, \\\"Allocation must be greater than zero\\\");\\n        require(_beneficiary != address(0), \\\"Beneficiary must not be zero address\\\");\\n\\n        // cliff longer than duration is not valid and can only happen by mistake.\\n        // We heal this by extending the duration to match the cliff, thus balancing\\n        // the interests of the beneficiary (be able to reveal the vesting plan)\\n        // and the token holder (not giving away tokens too early).\\n        _duration = _duration > _cliff ? _duration : _cliff;\\n\\n        id = ++ids;\\n        vestings[id] = VestingPlan({\\n            allocation: _allocation,\\n            released: 0,\\n            beneficiary: _beneficiary,\\n            start: _start,\\n            cliff: _cliff,\\n            duration: _duration,\\n            isMintable: _isMintable\\n        });\\n\\n        emit VestingCreated(id);\\n    }\\n\\n    /**\\n     * Stops a vesting plan before it is finished.\\n     * @param _id ID of the vesting plan\\n     * @param _endTime When the plan should end.\\n     */\\n    function stopVesting(uint64 _id, uint64 _endTime) public onlyManager {\\n        // already vested tokens can not be taken away (except of burning in the token contract itself)\\n        _endTime = _endTime < uint64(block.timestamp) ? uint64(block.timestamp) : _endTime;\\n        require(_endTime < start(_id) + duration(_id), \\\"endTime must be before vesting end\\\");\\n\\n        if (start(_id) + cliff(_id) > _endTime) {\\n            delete vestings[_id];\\n        } else {\\n            vestings[_id].allocation = vestedAmount(_id, _endTime);\\n            vestings[_id].duration = _endTime - start(_id);\\n        }\\n        emit VestingStopped(_id, _endTime);\\n    }\\n\\n    /**\\n     * Pausing a vesting plan: consists of stopping the old vesting and creating a new one. The total allocation\\n     * remains the same, but the cliff and duration are adjusted. This is a convenience function to make handling\\n     * of prolonged absences of beneficiaries easier.\\n     * @param _id vestin plan id\\n     * @param _endTime when to end the original vesting\\n     * @param _newStartTime when to start the new vesting\\n     */\\n    function pauseVesting(\\n        uint64 _id,\\n        uint64 _endTime,\\n        uint64 _newStartTime\\n    ) external onlyManager returns (uint64 newId) {\\n        require(_endTime > uint64(block.timestamp), \\\"endTime must be in the future\\\");\\n        require(_endTime < start(_id) + duration(_id), \\\"endTime must be before vesting end\\\");\\n        require(_newStartTime > _endTime, \\\"newStartTime must be after endTime\\\");\\n\\n        uint256 allocationRemainder = allocation(_id) - vestedAmount(_id, _endTime);\\n        uint64 timeVested = _endTime - start(_id);\\n        uint64 cliffRemainder = timeVested >= cliff(_id) ? 0 : cliff(_id) - timeVested;\\n        uint64 durationRemainder = duration(_id) - timeVested;\\n\\n        // create new vesting\\n        newId = _createVesting(\\n            allocationRemainder,\\n            beneficiary(_id),\\n            _newStartTime,\\n            cliffRemainder,\\n            durationRemainder,\\n            isMintable(_id)\\n        );\\n\\n        // stop old vesting\\n        stopVesting(_id, _endTime);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     * @param _id ID of the vesting plan\\n     */\\n    function release(uint64 _id) public {\\n        release(_id, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested, but not more than the given amount.\\n     * @param _id ID of the vesting plan\\n     * @param _amount maximum amount of tokens to be released\\n     */\\n    function release(uint64 _id, uint256 _amount) public nonReentrant {\\n        require(_msgSender() == beneficiary(_id), \\\"Only beneficiary can release tokens\\\");\\n        _amount = releasable(_id) < _amount ? releasable(_id) : _amount;\\n        vestings[_id].released += _amount;\\n        if (isMintable(_id)) {\\n            ERC20Mintable(token).mint(beneficiary(_id), _amount);\\n        } else {\\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(token), beneficiary(_id), _amount);\\n        }\\n        emit ERC20Released(_id, _amount);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that have already vested. Implements a linear vesting curve.\\n     * @notice In this context, \\\"vested\\\" means \\\"belong to the beneficiary\\\". The vested amount\\n     * is also the sum of the released amount and the releasable amount.\\n     * @param _id ID of the vesting plan\\n     * @param _timestamp point in time for which the vested amount is calculated\\n     * @return amount of vested tokens\\n     */\\n    function vestedAmount(uint64 _id, uint64 _timestamp) public view returns (uint256) {\\n        if (_timestamp < start(_id) + cliff(_id)) {\\n            return 0;\\n        } else if (_timestamp > start(_id) + duration(_id)) {\\n            return allocation(_id);\\n        } else {\\n            return (allocation(_id) * (_timestamp - start(_id))) / duration(_id);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the beneficiary to a new one. Only callable by current beneficiary,\\n     * or the owner one year after the vesting's plan end. The owner being able to update\\n     * the beneficiary address is a compromise between security and usability:\\n     * If the beneficiary ever loses access to their address, the owner can update it, but only\\n     * after this timeout has passed.\\n     * @param _id ID of the vesting plan\\n     * @param _newBeneficiary new beneficiary address\\n     */\\n    function changeBeneficiary(uint64 _id, address _newBeneficiary) external {\\n        require(\\n            _msgSender() == beneficiary(_id) ||\\n                ((_msgSender() == owner()) && uint64(block.timestamp) > start(_id) + duration(_id) + 365 days),\\n            \\\"Only beneficiary can change beneficiary, or owner 1 year after vesting end\\\"\\n        );\\n        require(_newBeneficiary != address(0), \\\"Beneficiary must not be zero address\\\");\\n        vestings[_id].beneficiary = _newBeneficiary;\\n        emit BeneficiaryChanged(_id, _newBeneficiary);\\n    }\\n\\n    /**\\n     * Can be called by the owner to grant manager status to an address.\\n     * @param _manager address of the manager\\n     */\\n    function addManager(address _manager) external onlyOwner {\\n        managers[_manager] = true;\\n        emit ManagerAdded(_manager);\\n    }\\n\\n    /**\\n     * Can be called by the owner to revoke manager status from an address.\\n     * @param _manager address of the manager\\n     */\\n    function removeManager(address _manager) external onlyOwner {\\n        managers[_manager] = false;\\n        emit ManagerRemoved(_manager);\\n    }\\n\\n    /**\\n     * @dev Throws if called by an account that is not a manager.\\n     */\\n    modifier onlyManager() {\\n        require(managers[_msgSender()], \\\"Caller is not a manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev both ContextUpgradeable and ERC2771ContextUpgradeable have a _msgSender() function, so we need to override and select which one to use.\\n     */\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (address) {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev both ERC20Pausable and ERC2771Context have a _msgData() function, so we need to override and select which one to use.\\n     */\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev both Ownable and ERC2771Context have a _contextSuffixLength() function, so we need to override and select which one to use.\\n     */\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC2771ContextUpgradeable._contextSuffixLength();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/factories/CloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Factory.sol\\\";\\n\\n/**\\n * @title CloneFactory\\n * @dev Inherit from this contract to allow creation of Clones of a specific contract.\\n * @author malteish\\n */\\n\\nabstract contract CloneFactory is Factory {\\n    event NewClone(address clone);\\n\\n    constructor(address _implementation) Factory(_implementation) {}\\n\\n    /**\\n     * @notice Predicts the address of a clone that will be created\\n     * @param salt The salt used to deterministically generate the clone address\\n     * @return The address of the clone that will be created\\n     * @dev This function does not check if the clone has already been created\\n     */\\n    function predictCloneAddress(bytes32 salt) public view returns (address) {\\n        return Clones.predictDeterministicAddress(implementation, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/factories/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n/**\\n * @title Factory\\n * @author malteish\\n * @notice inherit from this contract to create a factory for a specific contract\\n */\\n\\nabstract contract Factory {\\n    /// The address of the implementation contract\\n    address public immutable implementation;\\n\\n    constructor(address _implementation) {\\n        require(_implementation != address(0), \\\"Factory: implementation can not be zero\\\");\\n        implementation = _implementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ethereum-waffle/=node_modules/@ethereum-waffle/\",\r\n      \"@opengsn/=node_modules/@opengsn/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"NewClone\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rawSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createVestingClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rawSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_cliff\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"createVestingCloneWithLockupPlan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rawSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"predictCloneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictCloneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rawSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_cliff\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"predictCloneAddressWithLockupPlan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VestingCloneFactory", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a740dd991655b2887321c71d8ac0c171a0c9e969", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}