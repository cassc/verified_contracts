{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IDullahanVault.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IDullahanVault {\\n\\n    function totalAssets() external view returns (uint256);\\n    function totalRentedAmount() external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFeeModule.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFeeModule {\\n\\n    function getCurrentFeePerSecond() external view returns(uint256 currentFee);\\n\\n}\"\r\n    },\r\n    \"contracts/modules/DullahanFeeModule.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"../interfaces/IDullahanVault.sol\\\";\\nimport \\\"../interfaces/IFeeModule.sol\\\";\\nimport \\\"../utils/Owner.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/** @title Dullahan Fee Module\\n *  @author Paladin\\n *  @notice Module handling the calculation of fee rate for renting stkaave from the Dullahan Vault\\n */\\ncontract DullahanFeeModule is IFeeModule, Owner {\\n\\n    // Constants\\n\\n    /** @notice 1e18 scale */\\n    uint256 public constant UNIT = 1e18;\\n\\n    /** @notice Threshold ratio to apply the extra multiplier */\\n    uint256 public constant TRESHOLD = 0.90 ether;\\n    /** @notice Base extra multiplier */\\n    uint256 public constant BASE_MULTIPLIER = 1e18;\\n    /** @notice Multplier increase for extra ratio over the treshold  */\\n    uint256 public constant EXTRA_MULTIPLIER_STEP = 10e18;\\n\\n\\n    // Storage\\n\\n    /** @notice Address of the Dullahan Vault */\\n    address public immutable vault;\\n\\n    /** @notice Amount of GHO fees per second per stkAAVE */\\n    uint256 public feePerStkAavePerSecond;\\n\\n\\n    // Events\\n\\n    /** @notice Event emitted when the fee per second value is updated */\\n    event UpdatedFeePerStkAavePerSecond(uint256 oldFee, uint256 newFee);\\n\\n\\n    // Constructor\\n\\n    constructor(\\n        address _vault,\\n        uint256 _startFee\\n    ) {\\n        if(_vault == address(0)) revert Errors.AddressZero();\\n        if(_startFee == 0) revert Errors.NullAmount();\\n\\n        vault = _vault;\\n        feePerStkAavePerSecond = _startFee;\\n    }\\n\\n\\n    // Functions\\n\\n    /**\\n    * @notice Get the current utilization rate\\n    * @dev Calculates the current utilization rate based on the Vault rented amount & total assets\\n    * @return uint256 : Current utilization rate\\n    */\\n    function utilizationRate() public view returns(uint256) {\\n        IDullahanVault _vault = IDullahanVault(vault);\\n        uint256 vaultTotalAssets = _vault.totalAssets();\\n        uint256 currentlyRented = _vault.totalRentedAmount();\\n\\n        if(vaultTotalAssets == 0) return 0;\\n\\n        // Utilization Rate = Current Rented amount / Total Vault Assets\\n        return (currentlyRented * UNIT) / vaultTotalAssets;\\n    }\\n\\n    /**\\n    * @notice Get the current fee per second\\n    * @dev Calculates the current fee per second based on the current utilization rate\\n    * @return currentFee - uint256 : Current fee per second\\n    */\\n    function getCurrentFeePerSecond() external view returns(uint256 currentFee) {\\n        uint256 utilRate = utilizationRate();\\n        currentFee = feePerStkAavePerSecond;\\n\\n        // If the Utilization Rate is over the Threshold, increase the fee per second\\n        // using the calculated multiplier\\n        if(utilRate >= TRESHOLD) {\\n            uint256 multiplier = BASE_MULTIPLIER + ((EXTRA_MULTIPLIER_STEP * (utilRate - TRESHOLD) / UNIT));\\n            currentFee = (currentFee * multiplier) / UNIT;\\n        }\\n    }\\n\\n\\n    // Admin Functions\\n\\n    /**\\n    * @notice Updates the feePerStkAavePerSecond parameter\\n    * @dev Updates the feePerStkAavePerSecond in storage with the given value\\n    * @param newFee New value tu set\\n    */\\n    function updateFeePerStkAavePerSecond(uint256 newFee) external onlyOwner {\\n        if(newFee == 0) revert Errors.NullAmount();\\n\\n        uint256 oldFee = feePerStkAavePerSecond;\\n        feePerStkAavePerSecond = newFee;\\n\\n        emit UpdatedFeePerStkAavePerSecond(oldFee, newFee);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary Errors {\\n\\n    // Common Errors\\n    error AddressZero();\\n    error NullAmount();\\n    error IncorrectRewardToken();\\n    error SameAddress();\\n    error InequalArraySizes();\\n    error EmptyArray();\\n    error EmptyParameters();\\n    error NotInitialized();\\n    error AlreadyInitialized();\\n    error CannotInitialize();\\n    error InvalidParameter();\\n    error CannotRecoverToken();\\n    error NullWithdraw();\\n    error AlreadyListedManager();\\n    error NotListedManager();\\n\\n    // Access Control Erros\\n    error CallerNotAdmin();\\n    error CannotBeAdmin();\\n    error CallerNotPendingAdmin();\\n    error CallerNotAllowed();\\n\\n    // ERC20 Errors\\n    error ERC20_ApproveAddressZero();\\n    error ERC20_AllowanceUnderflow();\\n    error ERC20_AmountOverAllowance();\\n    error ERC20_AddressZero();\\n    error ERC20_SelfTransfer();\\n    error ERC20_NullAmount();\\n    error ERC20_AmountExceedBalance();\\n\\n    // Maths Errors\\n    error NumberExceed96Bits();\\n    error NumberExceed128Bits();\\n    error NumberExceed248Bits();\\n\\n    // Vault Errors\\n    error ManagerAlreadyListed();\\n    error ManagerNotListed();\\n    error NotEnoughAvailableFunds();\\n    error WithdrawBuffer();\\n    error ReserveTooLow();\\n    error CallerNotAllowedManager();\\n    error NotUndebtedManager();\\n    error AmountExceedsDebt();\\n\\n    // Vaults Rewards Errors\\n    error NullScaledAmount();\\n    error AlreadyListedDepositor();\\n    error NotListedDepositor();\\n    error ClaimNotAllowed();\\n\\n    // Pods Errors\\n    error NotPodOwner();\\n    error NotPodManager();\\n    error FailPodStateUpdate();\\n    error MintAmountUnderMinimum();\\n    error RepayFailed();\\n\\n    // Pods Manager Errors\\n    error CallerNotValidPod();\\n    error CollateralBlocked();\\n    error MintingAllowanceFailed();\\n    error FreeingStkAaveFailed();\\n    error CollateralAlreadyListed();\\n    error CollateralNotListed();\\n    error CollateralNotAllowed();\\n    error PodInvalid();\\n    error FailStateUpdate();\\n    error PodNotLiquidable();\\n\\n    // Registry Errors\\n    error VaultAlreadySet();\\n\\n    // Zap Errors\\n    error InvalidSourceToken();\\n    error DepositFailed();\\n\\n    // Wrapper Errors\\n    error NullConvertedAmount();\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../oz/utils/Ownable.sol\\\";\\n\\n/** @title Extend OZ Ownable contract  */\\n/// @author Paladin\\n\\ncontract Owner is Ownable {\\n\\n    address public pendingOwner;\\n\\n    event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n\\n    error CannotBeOwner();\\n    error CallerNotPendingOwner();\\n    error OwnerAddressZero();\\n\\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\\n        if(newOwner == address(0)) revert OwnerAddressZero();\\n        if(newOwner == owner()) revert CannotBeOwner();\\n        address oldPendingOwner = pendingOwner;\\n\\n        pendingOwner = newOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual {\\n        if(msg.sender != pendingOwner) revert CallerNotPendingOwner();\\n        address newOwner = pendingOwner;\\n        _transferOwnership(pendingOwner);\\n        pendingOwner = address(0);\\n\\n        emit NewPendingOwner(newOwner, address(0));\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerAddressZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedFeePerStkAavePerSecond\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTRA_MULTIPLIER_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerStkAavePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFeePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateFeePerStkAavePerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DullahanFeeModule", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000167c606be99dbf5a8af61e1983e5b309e8fa2ae7000000000000000000000000000000000000000000000000000000005ec57980", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}