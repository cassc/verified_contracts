{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controller/Controllable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controller/NameMintingController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.20;\\n\\nimport \\\"../ens/NameWrapperDelegate.sol\\\";\\n\\n/**\\n * @title Namespace Mint Controller\\n * @author namespace.ninja\\n * @notice Provides functionality for minting subnames.\\n */\\ncontract NameMintingController is Controllable {\\n    event SubdomainMinted(\\n        string label,\\n        bytes32 indexed parentNode,\\n        uint256 price,\\n        address subnameOwner,\\n        address paymentRecepient,\\n        address minter\\n    );\\n\\n    NameWrapperDelegate public nameWrapperDelegate;\\n\\n    address[] public registries;\\n    address public registryCalls;\\n    address[] public validationCalls;\\n    address public paymentCall;\\n\\n    address public wethAddress;\\n    address public feeWallet;\\n    address public withdrawalWallet;\\n    uint8 public mintFeePct;\\n    uint8 MAX_FEE_PCT = 10;\\n\\n    uint256 public minCommitmentAge;\\n    uint256 public maxCommitmentAge;\\n    mapping(bytes32 => uint256) public commitments;\\n\\n    constructor(\\n        NameWrapperDelegate _nameWrapperDelegate,\\n        address _feeWallet,\\n        address _nameRegistry,\\n        address _whitelistRegistry,\\n        address _reservedRegistry,\\n        address _registryCalls,\\n        address _validation,\\n        address _paymentCall,\\n        address _wethAddress\\n    ) {\\n        nameWrapperDelegate = _nameWrapperDelegate;\\n        feeWallet = _feeWallet;\\n        withdrawalWallet = _feeWallet;\\n        mintFeePct = 5;\\n        registries.push(_nameRegistry);\\n        registries.push(_whitelistRegistry);\\n        registries.push(_reservedRegistry);\\n        registryCalls = _registryCalls;\\n        validationCalls.push(_validation);\\n        paymentCall = _paymentCall;\\n        minCommitmentAge = 30;\\n        maxCommitmentAge = 86400;\\n        wethAddress = _wethAddress;\\n    }\\n\\n    function commit(bytes32 commitment) external {\\n        require(\\n            commitments[commitment] + maxCommitmentAge < block.timestamp,\\n            \\\"Commitment already exists\\\"\\n        );\\n        commitments[commitment] = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Mints the subname, while validating the registration data and processing the payment.\\n     * @param label Subname label to register\\n     * @param parentNode .eth domain node\\n     * @param addresses Address list - [0]: subnameOwner, [1]: resolver\\n     * @param extraData Any additional data needed during minting\\n     */\\n    function mintSubdomain(\\n        string calldata label,\\n        bytes32 parentNode,\\n        address[] calldata addresses,\\n        bytes calldata extraData,\\n        bytes32 secret\\n    ) external payable {\\n        _consumeCommitment(\\n            keccak256(\\n                abi.encode(label, parentNode, addresses, extraData, secret)\\n            )\\n        );\\n\\n        // 1. update and get the data from the registries\\n        bytes memory response = _delegateCall(\\n            registryCalls,\\n            abi.encodeWithSignature(\\n                \\\"callRegistries(bytes,address[])\\\",\\n                abi.encode(parentNode, label, extraData, addresses),\\n                registries\\n            ),\\n            \\\"Registry call error\\\"\\n        );\\n\\n        (\\n            uint256 price,\\n            address paymentRecevier,\\n            bytes memory registryData\\n        ) = abi.decode(response, (uint256, address, bytes));\\n\\n        // 2. validate the data\\n        _validate(registryData, extraData, parentNode, label, addresses);\\n\\n        // 3. mint subname (set the subdomain record) for the new owner\\n        _mintSubname(parentNode, label, addresses[0], addresses[1]);\\n\\n        // 4. complete the payment\\n        _delegateCall(\\n            paymentCall,\\n            abi.encodeWithSignature(\\n                \\\"transfer(bytes)\\\",\\n                abi.encode(\\n                    wethAddress,\\n                    paymentRecevier,\\n                    feeWallet,\\n                    price,\\n                    mintFeePct,\\n                    registryData,\\n                    extraData\\n                )\\n            ),\\n            \\\"Payment error\\\"\\n        );\\n\\n        emit SubdomainMinted(\\n            label,\\n            parentNode,\\n            price,\\n            addresses[0],\\n            paymentRecevier,\\n            msg.sender\\n        );\\n    }\\n\\n    function _consumeCommitment(bytes32 commitment) internal {\\n        require(\\n            commitments[commitment] + minCommitmentAge <= block.timestamp,\\n            \\\"Commitment not valid yet\\\"\\n        );\\n\\n        require(\\n            commitments[commitment] + maxCommitmentAge >= block.timestamp,\\n            \\\"Commitment has expired\\\"\\n        );\\n\\n        delete (commitments[commitment]);\\n    }\\n\\n    function _validate(\\n        bytes memory registryData,\\n        bytes memory extraData,\\n        bytes32 parentNode,\\n        string calldata label,\\n        address[] calldata addresses\\n    ) private {\\n        bytes memory listingData = abi.encode(\\n            registryData,\\n            extraData,\\n            parentNode,\\n            label,\\n            addresses\\n        );\\n        for (uint256 i = 0; i < validationCalls.length; i++) {\\n            _delegateCall(\\n                validationCalls[i],\\n                abi.encodeWithSignature(\\\"validate(bytes)\\\", listingData),\\n                \\\"Validation error\\\"\\n            );\\n        }\\n    }\\n\\n    function _delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _mintSubname(\\n        bytes32 parentNode,\\n        string calldata label,\\n        address subnameOwner,\\n        address resolver\\n    ) private {\\n        nameWrapperDelegate.setSubnodeRecord(\\n            parentNode,\\n            label,\\n            subnameOwner,\\n            resolver,\\n            type(uint64).max,\\n            CAN_EXTEND_EXPIRY | PARENT_CANNOT_CONTROL,\\n            type(uint64).max\\n        );\\n    }\\n\\n    function setMintFeePct(uint8 pct) external onlyController {\\n        require(pct <= MAX_FEE_PCT, \\\"Fee percentage too high\\\");\\n        mintFeePct = pct;\\n    }\\n\\n    function setFeeWallet(address wallet) external onlyController {\\n        feeWallet = wallet;\\n    }\\n\\n    function addRegistry(address registry) external onlyController {\\n        registries.push(registry);\\n    }\\n\\n    function setRegistries(\\n        address[] calldata _registries\\n    ) external onlyController {\\n        registries = _registries;\\n    }\\n\\n    function setRegistryCalls(address call) external onlyController {\\n        registryCalls = call;\\n    }\\n\\n    function addValidationCall(address call) external onlyController {\\n        validationCalls.push(call);\\n    }\\n\\n    function setValidationCalls(\\n        address[] calldata _validationCalls\\n    ) external onlyController {\\n        validationCalls = _validationCalls;\\n    }\\n\\n    function setPaymentCall(address call) external onlyController {\\n        paymentCall = call;\\n    }\\n\\n    function setNameWrapperDelegate(\\n        NameWrapperDelegate _nameWrapperDelegate\\n    ) external onlyController {\\n        nameWrapperDelegate = _nameWrapperDelegate;\\n    }\\n\\n    function withdraw() external onlyController {\\n        payable(withdrawalWallet).transfer(address(this).balance);\\n    }\\n\\n    function setWithdrawalWallet(address wallet) external onlyController {\\n        withdrawalWallet = wallet;\\n    }\\n\\n    function setMinCommitmentAge(uint256 minAge) external onlyController {\\n        minCommitmentAge = minAge;\\n    }\\n\\n    function setMaxCommitmentAge(uint256 maxAge) external onlyController {\\n        maxCommitmentAge = maxAge;\\n    }\\n\\n    function setWethAddress(address _wethAddress) external onlyController {\\n        wethAddress = _wethAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ens/INameWrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.20;\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper {\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function getData(\\n        uint256 tokenId\\n    ) external view returns (address owner, uint32 fuses, uint64 expiry);\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external;\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ens/NameWrapperDelegate.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.20;\\n\\nimport \\\"../controller/Controllable.sol\\\";\\nimport \\\"../ens/INameWrapper.sol\\\";\\nimport \\\"../libs/Encoder.sol\\\";\\n\\ncontract NameWrapperDelegate is Controllable {\\n    INameWrapper nameWrapper;\\n\\n    constructor(INameWrapper _nameWrapper) {\\n        nameWrapper = _nameWrapper;\\n    }\\n\\n    function setSubnodeRecord(\\n        bytes32 parentNode,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external onlyController returns (bytes32 subnameNode) {\\n        // can only be called when minting a new subname\\n        require(\\n            nameWrapper.ownerOf(uint256(_getSubnameNode(parentNode, label))) ==\\n                address(0),\\n            \\\"Subdomain already has an owner\\\"\\n        );\\n\\n        subnameNode = nameWrapper.setSubnodeRecord(\\n            parentNode,\\n            label,\\n            owner,\\n            resolver,\\n            ttl,\\n            fuses,\\n            expiry\\n        );\\n    }\\n\\n    function setFuses(bytes32 node, uint16 fuse) external onlyController {\\n        nameWrapper.setFuses(node, fuse);\\n    }\\n\\n    function _getSubnameNode(\\n        bytes32 parentNode,\\n        string calldata label\\n    ) private pure returns (bytes32) {\\n        bytes32 labelHash = keccak256(bytes(label));\\n        return Encoder.encodeNode(parentNode, labelHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Encoder.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.20;\\n\\nlibrary Encoder {\\n    function encodeNode(\\n        bytes32 node,\\n        bytes32 labelHash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(node, labelHash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract NameWrapperDelegate\",\"name\":\"_nameWrapperDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nameRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservedRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryCalls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentCall\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subnameOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentRecepient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SubdomainMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"addRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"call\",\"type\":\"address\"}],\"name\":\"addValidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeePct\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"mintSubdomain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapperDelegate\",\"outputs\":[{\"internalType\":\"contract NameWrapperDelegate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCalls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"setMaxCommitmentAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAge\",\"type\":\"uint256\"}],\"name\":\"setMinCommitmentAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"name\":\"setMintFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NameWrapperDelegate\",\"name\":\"_nameWrapperDelegate\",\"type\":\"address\"}],\"name\":\"setNameWrapperDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"call\",\"type\":\"address\"}],\"name\":\"setPaymentCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_registries\",\"type\":\"address[]\"}],\"name\":\"setRegistries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"call\",\"type\":\"address\"}],\"name\":\"setRegistryCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validationCalls\",\"type\":\"address[]\"}],\"name\":\"setValidationCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setWethAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWithdrawalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationCalls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NameMintingController", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000368e48dcffb048fb8483d0bfd924237c0ced999f0000000000000000000000009386ede17239142f69657b6ce89c306657c62feb000000000000000000000000b95cad0a8b2c90dc3b79e3b12c6e22e9756c3c89000000000000000000000000f18076bc40bbf6b6b735c905096a64a2a2fd7385000000000000000000000000c199123b608781bddab63f58cab4af2f3a92372a0000000000000000000000005cb2a9e3876cb6eb83da40dbca182263e0e3789b000000000000000000000000e6b5091e5e143d4d29b6762e412105340e4b170f0000000000000000000000000b52547b1c64dd528216f71a53066810c361c0b7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}