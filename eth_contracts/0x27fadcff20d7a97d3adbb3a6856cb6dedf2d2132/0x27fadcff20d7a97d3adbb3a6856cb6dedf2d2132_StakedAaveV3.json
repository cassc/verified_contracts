{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/StakedAaveV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {StakedTokenV3} from './StakedTokenV3.sol';\\nimport {IGhoVariableDebtTokenTransferHook} from '../interfaces/IGhoVariableDebtTokenTransferHook.sol';\\nimport {SafeCast} from '../lib/SafeCast.sol';\\nimport {IStakedAaveV3} from '../interfaces/IStakedAaveV3.sol';\\n\\n/**\\n * @title StakedAaveV3\\n * @notice StakedTokenV3 with AAVE token as staked token\\n * @author BGD Labs\\n */\\ncontract StakedAaveV3 is StakedTokenV3, IStakedAaveV3 {\\n  using SafeCast for uint256;\\n\\n  uint256[1] private ______DEPRECATED_FROM_STK_AAVE_V3;\\n\\n  /// @notice GHO debt token to be used in the _beforeTokenTransfer hook\\n  IGhoVariableDebtTokenTransferHook public ghoDebtToken;\\n\\n  function REVISION() public pure virtual override returns (uint256) {\\n    return 6;\\n  }\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration\\n  )\\n    StakedTokenV3(\\n      stakedToken,\\n      rewardToken,\\n      unstakeWindow,\\n      rewardsVault,\\n      emissionManager,\\n      distributionDuration\\n    )\\n  {\\n    // brick initialize\\n    lastInitializedRevision = REVISION();\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   */\\n  function initialize() external override initializer {}\\n\\n  /// @inheritdoc IStakedAaveV3\\n  function setGHODebtToken(\\n    IGhoVariableDebtTokenTransferHook newGHODebtToken\\n  ) external {\\n    require(msg.sender == 0xEE56e2B3D491590B5b31738cC34d5232F378a8D5); // Short executor\\n    ghoDebtToken = newGHODebtToken;\\n    emit GHODebtTokenChanged(address(newGHODebtToken));\\n  }\\n\\n  /// @inheritdoc IStakedAaveV3\\n  function claimRewardsAndStake(\\n    address to,\\n    uint256 amount\\n  ) external override returns (uint256) {\\n    return _claimRewardsAndStakeOnBehalf(msg.sender, to, amount);\\n  }\\n\\n  /// @inheritdoc IStakedAaveV3\\n  function claimRewardsAndStakeOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external override onlyClaimHelper returns (uint256) {\\n    return _claimRewardsAndStakeOnBehalf(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    IGhoVariableDebtTokenTransferHook cachedGhoDebtToken = ghoDebtToken;\\n    if (address(cachedGhoDebtToken) != address(0)) {\\n      try\\n        cachedGhoDebtToken.updateDiscountDistribution(\\n          from,\\n          to,\\n          balanceOf(from),\\n          balanceOf(to),\\n          amount\\n        )\\n      {} catch (bytes memory) {}\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/lib/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n    struct AssetConfigInput {\\n        uint128 emissionPerSecond;\\n        uint256 totalStaked;\\n        address underlyingAsset;\\n    }\\n\\n    struct UserStakeInput {\\n        address underlyingAsset;\\n        uint256 stakedByUser;\\n        uint256 totalStaked;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/StakedTokenV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\nimport {IERC20Metadata} from 'openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport {BaseDelegation} from 'aave-token-v3/BaseDelegation.sol';\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {SafeERC20} from '../lib/SafeERC20.sol';\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\nimport {IStakedTokenV2} from '../interfaces/IStakedTokenV2.sol';\\nimport {StakedTokenV2} from './StakedTokenV2.sol';\\nimport {IStakedTokenV3} from '../interfaces/IStakedTokenV3.sol';\\nimport {PercentageMath} from '../lib/PercentageMath.sol';\\nimport {RoleManager} from '../utils/RoleManager.sol';\\nimport {SafeCast} from '../lib/SafeCast.sol';\\nimport {IERC20WithPermit} from '../interfaces/IERC20WithPermit.sol';\\n\\n/**\\n * @title StakedTokenV3\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author BGD Labs\\n */\\ncontract StakedTokenV3 is\\n  StakedTokenV2,\\n  IStakedTokenV3,\\n  RoleManager,\\n  IAaveDistributionManager,\\n  BaseDelegation\\n{\\n  using SafeERC20 for IERC20;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n  using SafeCast for uint104;\\n\\n  uint256 public constant SLASH_ADMIN_ROLE = 0;\\n  uint256 public constant COOLDOWN_ADMIN_ROLE = 1;\\n  uint256 public constant CLAIM_HELPER_ROLE = 2;\\n  uint216 public constant INITIAL_EXCHANGE_RATE = 1e18;\\n  uint256 public constant EXCHANGE_RATE_UNIT = 1e18;\\n\\n  /// @notice lower bound to prevent spam & avoid exchangeRate issues\\n  // as returnFunds can be called permissionless an attacker could spam returnFunds(1) to produce exchangeRate snapshots making voting expensive\\n  uint256 public immutable LOWER_BOUND;\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[6] private ______gap;\\n  /// @notice Seconds between starting cooldown and being able to withdraw\\n  uint256 internal _cooldownSeconds;\\n  /// @notice The maximum amount of funds that can be slashed at any given time\\n  uint256 internal _maxSlashablePercentage;\\n  /// @notice Mirror of latest snapshot value for cheaper access\\n  uint216 internal _currentExchangeRate;\\n  /// @notice Flag determining if there's an ongoing slashing event that needs to be settled\\n  bool public inPostSlashingPeriod;\\n\\n  modifier onlySlashingAdmin() {\\n    require(\\n      msg.sender == getAdmin(SLASH_ADMIN_ROLE),\\n      'CALLER_NOT_SLASHING_ADMIN'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyCooldownAdmin() {\\n    require(\\n      msg.sender == getAdmin(COOLDOWN_ADMIN_ROLE),\\n      'CALLER_NOT_COOLDOWN_ADMIN'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyClaimHelper() {\\n    require(\\n      msg.sender == getAdmin(CLAIM_HELPER_ROLE),\\n      'CALLER_NOT_CLAIM_HELPER'\\n    );\\n    _;\\n  }\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration\\n  )\\n    StakedTokenV2(\\n      stakedToken,\\n      rewardToken,\\n      unstakeWindow,\\n      rewardsVault,\\n      emissionManager,\\n      distributionDuration\\n    )\\n  {\\n    // brick initialize\\n    lastInitializedRevision = REVISION();\\n    uint256 decimals = IERC20Metadata(address(stakedToken)).decimals();\\n    LOWER_BOUND = 10 ** decimals;\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function REVISION() public pure virtual returns (uint256) {\\n    return 4;\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return REVISION();\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   */\\n  function initialize() external virtual initializer {}\\n\\n  function _initialize(\\n    address slashingAdmin,\\n    address cooldownPauseAdmin,\\n    address claimHelper,\\n    uint256 maxSlashablePercentage,\\n    uint256 cooldownSeconds\\n  ) internal {\\n    InitAdmin[] memory initAdmins = new InitAdmin[](3);\\n    initAdmins[0] = InitAdmin(SLASH_ADMIN_ROLE, slashingAdmin);\\n    initAdmins[1] = InitAdmin(COOLDOWN_ADMIN_ROLE, cooldownPauseAdmin);\\n    initAdmins[2] = InitAdmin(CLAIM_HELPER_ROLE, claimHelper);\\n\\n    _initAdmins(initAdmins);\\n\\n    _setMaxSlashablePercentage(maxSlashablePercentage);\\n    _setCooldownSeconds(cooldownSeconds);\\n    _updateExchangeRate(INITIAL_EXCHANGE_RATE);\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function configureAssets(\\n    DistributionTypes.AssetConfigInput[] memory assetsConfigInput\\n  ) external override {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      assetsConfigInput[i].totalStaked = totalSupply();\\n    }\\n\\n    _configureAssets(assetsConfigInput);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function previewStake(uint256 assets) public view returns (uint256) {\\n    return (assets * _currentExchangeRate) / EXCHANGE_RATE_UNIT;\\n  }\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function stake(\\n    address to,\\n    uint256 amount\\n  ) external override(IStakedTokenV2, StakedTokenV2) {\\n    _stake(msg.sender, to, amount);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function stakeWithPermit(\\n    address from,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    IERC20WithPermit(address(STAKED_TOKEN)).permit(\\n      from,\\n      address(this),\\n      amount,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    _stake(from, from, amount);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function cooldown() external override(IStakedTokenV2, StakedTokenV2) {\\n    _cooldown(msg.sender);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function cooldownOnBehalfOf(address from) external override onlyClaimHelper {\\n    _cooldown(from);\\n  }\\n\\n  function _cooldown(address from) internal {\\n    uint256 amount = balanceOf(from);\\n    require(amount != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    stakersCooldowns[from] = CooldownSnapshot({\\n      timestamp: uint40(block.timestamp),\\n      amount: uint216(amount)\\n    });\\n\\n    emit Cooldown(from, amount);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function redeem(\\n    address to,\\n    uint256 amount\\n  ) external override(IStakedTokenV2, StakedTokenV2) {\\n    _redeem(msg.sender, to, amount.toUint104());\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function redeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external override onlyClaimHelper {\\n    _redeem(from, to, amount.toUint104());\\n  }\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function claimRewards(\\n    address to,\\n    uint256 amount\\n  ) external override(IStakedTokenV2, StakedTokenV2) {\\n    _claimRewards(msg.sender, to, amount);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function claimRewardsOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external override onlyClaimHelper returns (uint256) {\\n    return _claimRewards(from, to, amount);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function claimRewardsAndRedeem(\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external override {\\n    _claimRewards(msg.sender, to, claimAmount);\\n    _redeem(msg.sender, to, redeemAmount.toUint104());\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function claimRewardsAndRedeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external override onlyClaimHelper {\\n    _claimRewards(from, to, claimAmount);\\n    _redeem(from, to, redeemAmount.toUint104());\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function getExchangeRate() public view override returns (uint216) {\\n    return _currentExchangeRate;\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function previewRedeem(\\n    uint256 shares\\n  ) public view override returns (uint256) {\\n    return (EXCHANGE_RATE_UNIT * shares) / _currentExchangeRate;\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function slash(\\n    address destination,\\n    uint256 amount\\n  ) external override onlySlashingAdmin returns (uint256) {\\n    require(!inPostSlashingPeriod, 'PREVIOUS_SLASHING_NOT_SETTLED');\\n    require(amount > 0, 'ZERO_AMOUNT');\\n    uint256 currentShares = totalSupply();\\n    uint256 balance = previewRedeem(currentShares);\\n\\n    uint256 maxSlashable = balance.percentMul(_maxSlashablePercentage);\\n\\n    if (amount > maxSlashable) {\\n      amount = maxSlashable;\\n    }\\n    require(balance - amount >= LOWER_BOUND, 'REMAINING_LT_MINIMUM');\\n\\n    inPostSlashingPeriod = true;\\n    _updateExchangeRate(_getExchangeRate(balance - amount, currentShares));\\n\\n    STAKED_TOKEN.safeTransfer(destination, amount);\\n\\n    emit Slashed(destination, amount);\\n    return amount;\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function returnFunds(uint256 amount) external override {\\n    require(amount >= LOWER_BOUND, 'AMOUNT_LT_MINIMUM');\\n    uint256 currentShares = totalSupply();\\n    require(currentShares >= LOWER_BOUND, 'SHARES_LT_MINIMUM');\\n    uint256 assets = previewRedeem(currentShares);\\n    _updateExchangeRate(_getExchangeRate(assets + amount, currentShares));\\n\\n    STAKED_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n    emit FundsReturned(amount);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function settleSlashing() external override onlySlashingAdmin {\\n    inPostSlashingPeriod = false;\\n    emit SlashingSettled();\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function setMaxSlashablePercentage(\\n    uint256 percentage\\n  ) external override onlySlashingAdmin {\\n    _setMaxSlashablePercentage(percentage);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function getMaxSlashablePercentage()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _maxSlashablePercentage;\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function setCooldownSeconds(\\n    uint256 cooldownSeconds\\n  ) external onlyCooldownAdmin {\\n    _setCooldownSeconds(cooldownSeconds);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function getCooldownSeconds() external view returns (uint256) {\\n    return _cooldownSeconds;\\n  }\\n\\n  /// @inheritdoc IStakedTokenV3\\n  function COOLDOWN_SECONDS() external view returns (uint256) {\\n    return _cooldownSeconds;\\n  }\\n\\n  /**\\n   * @dev sets the max slashable percentage\\n   * @param percentage must be strictly lower 100% as otherwise the exchange rate calculation would result in 0 division\\n   */\\n  function _setMaxSlashablePercentage(uint256 percentage) internal {\\n    require(\\n      percentage < PercentageMath.PERCENTAGE_FACTOR,\\n      'INVALID_SLASHING_PERCENTAGE'\\n    );\\n\\n    _maxSlashablePercentage = percentage;\\n    emit MaxSlashablePercentageChanged(percentage);\\n  }\\n\\n  /**\\n   * @dev sets the cooldown seconds\\n   * @param cooldownSeconds the new amount of cooldown seconds\\n   */\\n  function _setCooldownSeconds(uint256 cooldownSeconds) internal {\\n    _cooldownSeconds = cooldownSeconds;\\n    emit CooldownSecondsChanged(cooldownSeconds);\\n  }\\n\\n  /**\\n   * @dev claims the rewards for a specified address to a specified address\\n   * @param from The address of the from from which to claim\\n   * @param to Address to receive the rewards\\n   * @param amount Amount to claim\\n   * @return amount claimed\\n   */\\n  function _claimRewards(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (uint256) {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 newTotalRewards = _updateCurrentUnclaimedRewards(\\n      from,\\n      balanceOf(from),\\n      false\\n    );\\n\\n    uint256 amountToClaim = (amount > newTotalRewards)\\n      ? newTotalRewards\\n      : amount;\\n    require(amountToClaim != 0, 'INVALID_ZERO_AMOUNT');\\n\\n    stakerRewardsToClaim[from] = newTotalRewards - amountToClaim;\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n    emit RewardsClaimed(from, to, amountToClaim);\\n    return amountToClaim;\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and stakes.\\n   * @param from The address of the from from which to claim\\n   * @param to Address to stake to\\n   * @param amount Amount to claim\\n   * @return amount claimed\\n   */\\n  function _claimRewardsAndStakeOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (uint256) {\\n    require(REWARD_TOKEN == STAKED_TOKEN, 'REWARD_TOKEN_IS_NOT_STAKED_TOKEN');\\n\\n    uint256 userUpdatedRewards = _updateCurrentUnclaimedRewards(\\n      from,\\n      balanceOf(from),\\n      true\\n    );\\n    uint256 amountToClaim = (amount > userUpdatedRewards)\\n      ? userUpdatedRewards\\n      : amount;\\n\\n    if (amountToClaim != 0) {\\n      _claimRewards(from, address(this), amountToClaim);\\n      _stake(address(this), to, amountToClaim);\\n    }\\n\\n    return amountToClaim;\\n  }\\n\\n  /**\\n   * @dev Allows staking a specified amount of STAKED_TOKEN\\n   * @param to The address to receiving the shares\\n   * @param amount The amount of assets to be staked\\n   */\\n  function _stake(address from, address to, uint256 amount) internal {\\n    require(!inPostSlashingPeriod, 'SLASHING_ONGOING');\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n\\n    uint256 balanceOfTo = balanceOf(to);\\n\\n    uint256 accruedRewards = _updateUserAssetInternal(\\n      to,\\n      address(this),\\n      balanceOfTo,\\n      totalSupply()\\n    );\\n\\n    if (accruedRewards != 0) {\\n      stakerRewardsToClaim[to] = stakerRewardsToClaim[to] + accruedRewards;\\n      emit RewardsAccrued(to, accruedRewards);\\n    }\\n\\n    uint256 sharesToMint = previewStake(amount);\\n\\n    STAKED_TOKEN.safeTransferFrom(from, address(this), amount);\\n\\n    _mint(to, sharesToMint.toUint104());\\n\\n    emit Staked(from, to, amount, sharesToMint);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param from Address to redeem from\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   */\\n  function _redeem(address from, address to, uint104 amount) internal {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n\\n    CooldownSnapshot memory cooldownSnapshot = stakersCooldowns[from];\\n    if (!inPostSlashingPeriod) {\\n      require(\\n        (block.timestamp >= cooldownSnapshot.timestamp + _cooldownSeconds),\\n        'INSUFFICIENT_COOLDOWN'\\n      );\\n      require(\\n        (block.timestamp - (cooldownSnapshot.timestamp + _cooldownSeconds) <=\\n          UNSTAKE_WINDOW),\\n        'UNSTAKE_WINDOW_FINISHED'\\n      );\\n    }\\n\\n    uint256 balanceOfFrom = balanceOf(from);\\n    uint256 maxRedeemable = inPostSlashingPeriod\\n      ? balanceOfFrom\\n      : cooldownSnapshot.amount;\\n    require(maxRedeemable != 0, 'INVALID_ZERO_MAX_REDEEMABLE');\\n\\n    uint256 amountToRedeem = (amount > maxRedeemable) ? maxRedeemable : amount;\\n\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    uint256 underlyingToRedeem = previewRedeem(amountToRedeem);\\n\\n    _burn(from, amountToRedeem.toUint104());\\n\\n    if (cooldownSnapshot.timestamp != 0) {\\n      if (cooldownSnapshot.amount - amountToRedeem == 0) {\\n        delete stakersCooldowns[from];\\n      } else {\\n        stakersCooldowns[from].amount =\\n          stakersCooldowns[from].amount -\\n          amountToRedeem.toUint184();\\n      }\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, underlyingToRedeem);\\n\\n    emit Redeem(from, to, underlyingToRedeem, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Updates the exchangeRate and emits events accordingly\\n   * @param newExchangeRate the new exchange rate\\n   */\\n  function _updateExchangeRate(uint216 newExchangeRate) internal virtual {\\n    require(newExchangeRate != 0, 'ZERO_EXCHANGE_RATE');\\n    _currentExchangeRate = newExchangeRate;\\n    emit ExchangeRateChanged(newExchangeRate);\\n  }\\n\\n  /**\\n   * @dev calculates the exchange rate based on totalAssets and totalShares\\n   * @dev always rounds up to ensure 100% backing of shares by rounding in favor of the contract\\n   * @param totalAssets The total amount of assets staked\\n   * @param totalShares The total amount of shares\\n   * @return exchangeRate as 18 decimal precision uint216\\n   */\\n  function _getExchangeRate(\\n    uint256 totalAssets,\\n    uint256 totalShares\\n  ) internal pure returns (uint216) {\\n    return\\n      (((totalShares * EXCHANGE_RATE_UNIT) + totalAssets - 1) / totalAssets)\\n        .toUint216();\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      CooldownSnapshot memory previousSenderCooldown = stakersCooldowns[from];\\n      if (previousSenderCooldown.timestamp != 0) {\\n        // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n        if (balanceOfFrom == amount) {\\n          delete stakersCooldowns[from];\\n        } else if (balanceOfFrom - amount < previousSenderCooldown.amount) {\\n          stakersCooldowns[from].amount = uint216(balanceOfFrom - amount);\\n        }\\n      }\\n    }\\n\\n    _delegationChangeOnTransfer(\\n      from,\\n      to,\\n      _getBalance(from),\\n      _getBalance(to),\\n      amount\\n    );\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  function _getDelegationState(\\n    address user\\n  ) internal view override returns (DelegationState memory) {\\n    DelegationAwareBalance memory userState = _balances[user];\\n    return\\n      DelegationState({\\n        delegatedPropositionBalance: userState.delegatedPropositionBalance,\\n        delegatedVotingBalance: userState.delegatedVotingBalance,\\n        delegationMode: userState.delegationMode\\n      });\\n  }\\n\\n  function _getBalance(address user) internal view override returns (uint256) {\\n    return balanceOf(user);\\n  }\\n\\n  function getPowerCurrent(\\n    address user,\\n    GovernancePowerType delegationType\\n  ) public view override returns (uint256) {\\n    return\\n      (super.getPowerCurrent(user, delegationType) * EXCHANGE_RATE_UNIT) /\\n      getExchangeRate();\\n  }\\n\\n  function _setDelegationState(\\n    address user,\\n    DelegationState memory delegationState\\n  ) internal override {\\n    DelegationAwareBalance storage userState = _balances[user];\\n    userState.delegatedPropositionBalance = delegationState\\n      .delegatedPropositionBalance;\\n    userState.delegatedVotingBalance = delegationState.delegatedVotingBalance;\\n    userState.delegationMode = delegationState.delegationMode;\\n  }\\n\\n  function _incrementNonces(address user) internal override returns (uint256) {\\n    unchecked {\\n      // Does not make sense to check because it's not realistic to reach uint256.max in nonce\\n      return _nonces[user]++;\\n    }\\n  }\\n\\n  function _getDomainSeparator() internal view override returns (bytes32) {\\n    return DOMAIN_SEPARATOR();\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGhoVariableDebtTokenTransferHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IGhoVariableDebtTokenTransferHook {\\n  /**\\n   * @dev updates the discount when discount token is transferred\\n   * @dev Only callable by discount token\\n   * @param sender address of sender\\n   * @param recipient address of recipient\\n   * @param senderDiscountTokenBalance sender discount token balance\\n   * @param recipientDiscountTokenBalance recipient discount token balance\\n   * @param amount amount of discount token being transferred\\n   **/\\n  function updateDiscountDistribution(\\n    address sender,\\n    address recipient,\\n    uint256 senderDiscountTokenBalance,\\n    uint256 recipientDiscountTokenBalance,\\n    uint256 amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/lib/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStakedAaveV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IStakedTokenV3} from './IStakedTokenV3.sol';\\nimport {IGhoVariableDebtTokenTransferHook} from './IGhoVariableDebtTokenTransferHook.sol';\\n\\ninterface IStakedAaveV3 is IStakedTokenV3 {\\n  event GHODebtTokenChanged(address indexed newDebtToken);\\n\\n  /**\\n   * @dev Sets the GHO debt token (only callable by SHORT_EXECUTOR)\\n   * @param newGHODebtToken Address to GHO debt token\\n   */\\n  function setGHODebtToken(\\n    IGhoVariableDebtTokenTransferHook newGHODebtToken\\n  ) external;\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and stakes.\\n   * @param to Address to stake to\\n   * @param amount Amount to claim\\n   */\\n  function claimRewardsAndStake(\\n    address to,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and stakes. Only the claim helper contract is allowed to call this function\\n   * @param from The address of the from from which to claim\\n   * @param to Address to stake to\\n   * @param amount Amount to claim\\n   */\\n  function claimRewardsAndStakeOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/BaseDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ECDSA} from 'openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';\\n\\nimport {SafeCast72} from './utils/SafeCast72.sol';\\nimport {IGovernancePowerDelegationToken} from './interfaces/IGovernancePowerDelegationToken.sol';\\nimport {DelegationMode} from './DelegationAwareBalance.sol';\\n\\n/**\\n * @notice The contract implements generic delegation functionality for the upcoming governance v3\\n * @author BGD Labs\\n * @dev to make it's pluggable to any exising token it has a set of virtual functions\\n *   for simple access to balances and permit functionality\\n * @dev ************ IMPORTANT SECURITY CONSIDERATION ************\\n *   current version of the token can be used only with asset which has 18 decimals\\n *   and possible totalSupply lower then 4722366482869645213696,\\n *   otherwise at least POWER_SCALE_FACTOR should be adjusted !!!\\n *   *************************************************************\\n */\\nabstract contract BaseDelegation is IGovernancePowerDelegationToken {\\n  struct DelegationState {\\n    uint72 delegatedPropositionBalance;\\n    uint72 delegatedVotingBalance;\\n    DelegationMode delegationMode;\\n  }\\n\\n  mapping(address => address) internal _votingDelegatee;\\n  mapping(address => address) internal _propositionDelegatee;\\n\\n  /** @dev we assume that for the governance system delegation with 18 decimals of precision is not needed,\\n   *   by this constant we reduce it by 10, to 8 decimals.\\n   *   In case of Aave token this will allow to work with up to 47'223'664'828'696,45213696 total supply\\n   *   If your token already have less then 10 decimals, please change it to appropriate.\\n   */\\n  uint256 public constant POWER_SCALE_FACTOR = 1e10;\\n\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256(\\n      'DelegateByType(address delegator,address delegatee,uint8 delegationType,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegator,address delegatee,uint256 nonce,uint256 deadline)');\\n\\n  /**\\n   * @notice returns eip-2612 compatible domain separator\\n   * @dev we expect that existing tokens, ie Aave, already have, so we want to reuse\\n   * @return domain separator\\n   */\\n  function _getDomainSeparator() internal view virtual returns (bytes32);\\n\\n  /**\\n   * @notice gets the delegation state of a user\\n   * @param user address\\n   * @return state of a user's delegation\\n   */\\n  function _getDelegationState(address user) internal view virtual returns (DelegationState memory);\\n\\n  /**\\n   * @notice returns the token balance of a user\\n   * @param user address\\n   * @return current nonce before increase\\n   */\\n  function _getBalance(address user) internal view virtual returns (uint256);\\n\\n  /**\\n   * @notice increases and return the current nonce of a user\\n   * @dev should use `return nonce++;` pattern\\n   * @param user address\\n   * @return current nonce before increase\\n   */\\n  function _incrementNonces(address user) internal virtual returns (uint256);\\n\\n  /**\\n   * @notice sets the delegation state of a user\\n   * @param user address\\n   * @param delegationState state of a user's delegation\\n   */\\n  function _setDelegationState(address user, DelegationState memory delegationState)\\n    internal\\n    virtual;\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function delegateByType(address delegatee, GovernancePowerType delegationType)\\n    external\\n    virtual\\n    override\\n  {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, GovernancePowerType.VOTING);\\n    _delegateByType(msg.sender, delegatee, GovernancePowerType.PROPOSITION);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getDelegateeByType(address delegator, GovernancePowerType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    return _getDelegateeByType(delegator, _getDelegationState(delegator), delegationType);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getDelegates(address delegator) external view override returns (address, address) {\\n    DelegationState memory delegatorBalance = _getDelegationState(delegator);\\n    return (\\n      _getDelegateeByType(delegator, delegatorBalance, GovernancePowerType.VOTING),\\n      _getDelegateeByType(delegator, delegatorBalance, GovernancePowerType.PROPOSITION)\\n    );\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getPowerCurrent(address user, GovernancePowerType delegationType)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    DelegationState memory userState = _getDelegationState(user);\\n    uint256 userOwnPower = uint8(userState.delegationMode) & (uint8(delegationType) + 1) == 0\\n      ? _getBalance(user)\\n      : 0;\\n    uint256 userDelegatedPower = _getDelegatedPowerByType(userState, delegationType);\\n    return userOwnPower + userDelegatedPower;\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getPowersCurrent(address user) external view override returns (uint256, uint256) {\\n    return (\\n      getPowerCurrent(user, GovernancePowerType.VOTING),\\n      getPowerCurrent(user, GovernancePowerType.PROPOSITION)\\n    );\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function metaDelegateByType(\\n    address delegator,\\n    address delegatee,\\n    GovernancePowerType delegationType,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(delegator != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    bytes32 digest = ECDSA.toTypedDataHash(\\n      _getDomainSeparator(),\\n      keccak256(\\n        abi.encode(\\n          DELEGATE_BY_TYPE_TYPEHASH,\\n          delegator,\\n          delegatee,\\n          delegationType,\\n          _incrementNonces(delegator),\\n          deadline\\n        )\\n      )\\n    );\\n\\n    require(delegator == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _delegateByType(delegator, delegatee, delegationType);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function metaDelegate(\\n    address delegator,\\n    address delegatee,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(delegator != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    bytes32 digest = ECDSA.toTypedDataHash(\\n      _getDomainSeparator(),\\n      keccak256(\\n        abi.encode(DELEGATE_TYPEHASH, delegator, delegatee, _incrementNonces(delegator), deadline)\\n      )\\n    );\\n\\n    require(delegator == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _delegateByType(delegator, delegatee, GovernancePowerType.VOTING);\\n    _delegateByType(delegator, delegatee, GovernancePowerType.PROPOSITION);\\n  }\\n\\n  /**\\n   * @dev Modifies the delegated power of a `delegatee` account by type (VOTING, PROPOSITION).\\n   * Passing the impact on the delegation of `delegatee` account before and after to reduce conditionals and not lose\\n   * any precision.\\n   * @param impactOnDelegationBefore how much impact a balance of another account had over the delegation of a `delegatee`\\n   * before an action.\\n   * For example, if the action is a delegation from one account to another, the impact before the action will be 0.\\n   * @param impactOnDelegationAfter how much impact a balance of another account will have  over the delegation of a `delegatee`\\n   * after an action.\\n   * For example, if the action is a delegation from one account to another, the impact after the action will be the whole balance\\n   * of the account changing the delegatee.\\n   * @param delegatee the user whom delegated governance power will be changed\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   **/\\n  function _governancePowerTransferByType(\\n    uint256 impactOnDelegationBefore,\\n    uint256 impactOnDelegationAfter,\\n    address delegatee,\\n    GovernancePowerType delegationType\\n  ) internal {\\n    if (delegatee == address(0)) return;\\n    if (impactOnDelegationBefore == impactOnDelegationAfter) return;\\n\\n    // we use uint72, because this is the most optimal for AaveTokenV3\\n    // To make delegated balance fit into uint72 we're decreasing precision of delegated balance by POWER_SCALE_FACTOR\\n    uint72 impactOnDelegationBefore72 = SafeCast72.toUint72(\\n      impactOnDelegationBefore / POWER_SCALE_FACTOR\\n    );\\n    uint72 impactOnDelegationAfter72 = SafeCast72.toUint72(\\n      impactOnDelegationAfter / POWER_SCALE_FACTOR\\n    );\\n\\n    DelegationState memory delegateeState = _getDelegationState(delegatee);\\n    if (delegationType == GovernancePowerType.VOTING) {\\n      delegateeState.delegatedVotingBalance =\\n        delegateeState.delegatedVotingBalance -\\n        impactOnDelegationBefore72 +\\n        impactOnDelegationAfter72;\\n    } else {\\n      delegateeState.delegatedPropositionBalance =\\n        delegateeState.delegatedPropositionBalance -\\n        impactOnDelegationBefore72 +\\n        impactOnDelegationAfter72;\\n    }\\n    _setDelegationState(delegatee, delegateeState);\\n  }\\n\\n  /**\\n   * @dev performs all state changes related delegation changes on transfer\\n   * @param from token sender\\n   * @param to token recipient\\n   * @param fromBalanceBefore balance of the sender before transfer\\n   * @param toBalanceBefore balance of the recipient before transfer\\n   * @param amount amount of tokens sent\\n   **/\\n  function _delegationChangeOnTransfer(\\n    address from,\\n    address to,\\n    uint256 fromBalanceBefore,\\n    uint256 toBalanceBefore,\\n    uint256 amount\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    if (from != address(0)) {\\n      DelegationState memory fromUserState = _getDelegationState(from);\\n      uint256 fromBalanceAfter = fromBalanceBefore - amount;\\n      if (fromUserState.delegationMode != DelegationMode.NO_DELEGATION) {\\n        _governancePowerTransferByType(\\n          fromBalanceBefore,\\n          fromBalanceAfter,\\n          _getDelegateeByType(from, fromUserState, GovernancePowerType.VOTING),\\n          GovernancePowerType.VOTING\\n        );\\n        _governancePowerTransferByType(\\n          fromBalanceBefore,\\n          fromBalanceAfter,\\n          _getDelegateeByType(from, fromUserState, GovernancePowerType.PROPOSITION),\\n          GovernancePowerType.PROPOSITION\\n        );\\n      }\\n    }\\n\\n    if (to != address(0)) {\\n      DelegationState memory toUserState = _getDelegationState(to);\\n      uint256 toBalanceAfter = toBalanceBefore + amount;\\n\\n      if (toUserState.delegationMode != DelegationMode.NO_DELEGATION) {\\n        _governancePowerTransferByType(\\n          toBalanceBefore,\\n          toBalanceAfter,\\n          _getDelegateeByType(to, toUserState, GovernancePowerType.VOTING),\\n          GovernancePowerType.VOTING\\n        );\\n        _governancePowerTransferByType(\\n          toBalanceBefore,\\n          toBalanceAfter,\\n          _getDelegateeByType(to, toUserState, GovernancePowerType.PROPOSITION),\\n          GovernancePowerType.PROPOSITION\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Extracts from state and returns delegated governance power (Voting, Proposition)\\n   * @param userState the current state of a user\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   **/\\n  function _getDelegatedPowerByType(\\n    DelegationState memory userState,\\n    GovernancePowerType delegationType\\n  ) internal pure returns (uint256) {\\n    return\\n      POWER_SCALE_FACTOR *\\n      (\\n        delegationType == GovernancePowerType.VOTING\\n          ? userState.delegatedVotingBalance\\n          : userState.delegatedPropositionBalance\\n      );\\n  }\\n\\n  /**\\n   * @dev Extracts from state and returns the delegatee of a delegator by type of governance power (Voting, Proposition)\\n   * - If the delegator doesn't have any delegatee, returns address(0)\\n   * @param delegator delegator\\n   * @param userState the current state of a user\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   **/\\n  function _getDelegateeByType(\\n    address delegator,\\n    DelegationState memory userState,\\n    GovernancePowerType delegationType\\n  ) internal view returns (address) {\\n    if (delegationType == GovernancePowerType.VOTING) {\\n      return\\n        /// With the & operation, we cover both VOTING_DELEGATED delegation and FULL_POWER_DELEGATED\\n        /// as VOTING_DELEGATED is equivalent to 01 in binary and FULL_POWER_DELEGATED is equivalent to 11\\n        (uint8(userState.delegationMode) & uint8(DelegationMode.VOTING_DELEGATED)) != 0\\n          ? _votingDelegatee[delegator]\\n          : address(0);\\n    }\\n    return\\n      userState.delegationMode >= DelegationMode.PROPOSITION_DELEGATED\\n        ? _propositionDelegatee[delegator]\\n        : address(0);\\n  }\\n\\n  /**\\n   * @dev Changes user's delegatee address by type of governance power (Voting, Proposition)\\n   * @param delegator delegator\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param _newDelegatee the new delegatee\\n   **/\\n  function _updateDelegateeByType(\\n    address delegator,\\n    GovernancePowerType delegationType,\\n    address _newDelegatee\\n  ) internal {\\n    address newDelegatee = _newDelegatee == delegator ? address(0) : _newDelegatee;\\n    if (delegationType == GovernancePowerType.VOTING) {\\n      _votingDelegatee[delegator] = newDelegatee;\\n    } else {\\n      _propositionDelegatee[delegator] = newDelegatee;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the specific flag which signaling about existence of delegation of governance power (Voting, Proposition)\\n   * @param userState a user state to change\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param willDelegate next state of delegation\\n   **/\\n  function _updateDelegationModeByType(\\n    DelegationState memory userState,\\n    GovernancePowerType delegationType,\\n    bool willDelegate\\n  ) internal pure returns (DelegationState memory) {\\n    if (willDelegate) {\\n      // Because GovernancePowerType starts from 0, we should add 1 first, then we apply bitwise OR\\n      userState.delegationMode = DelegationMode(\\n        uint8(userState.delegationMode) | (uint8(delegationType) + 1)\\n      );\\n    } else {\\n      // First bitwise NEGATION, ie was 01, after XOR with 11 will be 10,\\n      // then bitwise AND, which means it will keep only another delegation type if it exists\\n      userState.delegationMode = DelegationMode(\\n        uint8(userState.delegationMode) &\\n          ((uint8(delegationType) + 1) ^ uint8(DelegationMode.FULL_POWER_DELEGATED))\\n      );\\n    }\\n    return userState;\\n  }\\n\\n  /**\\n   * @dev This is the equivalent of an ERC20 transfer(), but for a power type: an atomic transfer of a balance (power).\\n   * When needed, it decreases the power of the `delegator` and when needed, it increases the power of the `delegatee`\\n   * @param delegator delegator\\n   * @param _delegatee the user which delegated power will change\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address _delegatee,\\n    GovernancePowerType delegationType\\n  ) internal {\\n    // Here we unify the property that delegating power to address(0) == delegating power to yourself == no delegation\\n    // So from now on, not being delegating is (exclusively) that delegatee == address(0)\\n    address delegatee = _delegatee == delegator ? address(0) : _delegatee;\\n\\n    // We read the whole struct before validating delegatee, because in the optimistic case\\n    // (_delegatee != currentDelegatee) we will reuse userState in the rest of the function\\n    DelegationState memory delegatorState = _getDelegationState(delegator);\\n    address currentDelegatee = _getDelegateeByType(delegator, delegatorState, delegationType);\\n    if (delegatee == currentDelegatee) return;\\n\\n    bool delegatingNow = currentDelegatee != address(0);\\n    bool willDelegateAfter = delegatee != address(0);\\n    uint256 delegatorBalance = _getBalance(delegator);\\n\\n    if (delegatingNow) {\\n      _governancePowerTransferByType(delegatorBalance, 0, currentDelegatee, delegationType);\\n    }\\n\\n    if (willDelegateAfter) {\\n      _governancePowerTransferByType(0, delegatorBalance, delegatee, delegationType);\\n    }\\n\\n    _updateDelegateeByType(delegator, delegationType, delegatee);\\n\\n    if (willDelegateAfter != delegatingNow) {\\n      _setDelegationState(\\n        delegator,\\n        _updateDelegationModeByType(delegatorState, delegationType, willDelegateAfter)\\n      );\\n    }\\n\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(\\n    DistributionTypes.AssetConfigInput[] memory assetsConfigInput\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStakedTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IStakedTokenV2 {\\n  struct CooldownSnapshot {\\n    uint40 timestamp;\\n    uint216 amount;\\n  }\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount\\n  );\\n  event Cooldown(address indexed user, uint256 amount);\\n\\n  /**\\n   * @dev Allows staking a specified amount of STAKED_TOKEN\\n   * @param to The address to receiving the shares\\n   * @param amount The amount of assets to be staked\\n   */\\n  function stake(address to, uint256 amount) external;\\n\\n  /**\\n   * @dev Redeems shares, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount of shares to redeem\\n   */\\n  function redeem(address to, uint256 amount) external;\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   */\\n  function cooldown() external;\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to send the claimed rewards\\n   * @param amount Amount to stake\\n   */\\n  function claimRewards(address to, uint256 amount) external;\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(\\n    address staker\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/StakedTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\nimport {EIP712, ECDSA} from 'aave-token-v3/utils/EIP712.sol';\\nimport {IStakedTokenV2} from '../interfaces/IStakedTokenV2.sol';\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {SafeERC20} from '../lib/SafeERC20.sol';\\n\\nimport {VersionedInitializable} from '../utils/VersionedInitializable.sol';\\nimport {AaveDistributionManager} from './AaveDistributionManager.sol';\\nimport {GovernancePowerWithSnapshot} from '../lib/GovernancePowerWithSnapshot.sol';\\nimport {BaseMintableAaveToken} from './BaseMintableAaveToken.sol';\\n\\n/**\\n * @title StakedTokenV2\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author BGD Labs\\n */\\nabstract contract StakedTokenV2 is\\n  IStakedTokenV2,\\n  BaseMintableAaveToken,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager,\\n  EIP712\\n{\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fulfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => CooldownSnapshot) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n  uint256[5] private ______DEPRECATED_FROM_STK_AAVE_V2;\\n\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256(\\n      'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\\n    );\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration\\n  )\\n    AaveDistributionManager(emissionManager, distributionDuration)\\n    EIP712('Staked Aave', '2')\\n  {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n  }\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  /// @dev maintained for backwards compatibility. See EIP712 _EIP712Version\\n  function EIP712_REVISION() external view returns (bytes memory) {\\n    return bytes(_EIP712Version());\\n  }\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function stake(address onBehalfOf, uint256 amount) external virtual override;\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function redeem(address to, uint256 amount) external virtual override;\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function cooldown() external virtual override;\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function claimRewards(address to, uint256 amount) external virtual override;\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function getTotalRewardsBalance(\\n    address staker\\n  ) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[]\\n      memory userStakeInputs = new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return\\n      stakerRewardsToClaim[staker] +\\n      _getUnclaimedRewards(staker, userStakeInputs);\\n  }\\n\\n  /// @inheritdoc IStakedTokenV2\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest = _hashTypedDataV4(\\n      keccak256(\\n        abi.encode(\\n          PERMIT_TYPEHASH,\\n          owner,\\n          spender,\\n          value,\\n          currentValidNonce,\\n          deadline\\n        )\\n      )\\n    );\\n\\n    require(owner == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    unchecked {\\n      _nonces[owner] = currentValidNonce + 1;\\n    }\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   */\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards = _updateUserAssetInternal(\\n      user,\\n      address(this),\\n      userBalance,\\n      totalSupply()\\n    );\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user] + accruedRewards;\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStakedTokenV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IStakedTokenV2} from './IStakedTokenV2.sol';\\n\\ninterface IStakedTokenV3 is IStakedTokenV2 {\\n  event Staked(\\n    address indexed from,\\n    address indexed to,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n  event Redeem(\\n    address indexed from,\\n    address indexed to,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n  event MaxSlashablePercentageChanged(uint256 newPercentage);\\n  event Slashed(address indexed destination, uint256 amount);\\n  event SlashingExitWindowDurationChanged(uint256 windowSeconds);\\n  event CooldownSecondsChanged(uint256 cooldownSeconds);\\n  event ExchangeRateChanged(uint216 exchangeRate);\\n  event FundsReturned(uint256 amount);\\n  event SlashingSettled();\\n\\n  /**\\n   * @dev Allows staking a certain amount of STAKED_TOKEN with gasless approvals (permit)\\n   * @param from The address staking the token\\n   * @param amount The amount to be staked\\n   * @param deadline The permit execution deadline\\n   * @param v The v component of the signed message\\n   * @param r The r component of the signed message\\n   * @param s The s component of the signed message\\n   */\\n  function stakeWithPermit(\\n    address from,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current exchange rate\\n   * @return exchangeRate as 18 decimal precision uint216\\n   */\\n  function getExchangeRate() external view returns (uint216);\\n\\n  /**\\n   * @dev Executes a slashing of the underlying of a certain amount, transferring the seized funds\\n   * to destination. Decreasing the amount of underlying will automatically adjust the exchange rate.\\n   * A call to `slash` will start a slashing event which has to be settled via `settleSlashing`.\\n   * As long as the slashing event is ongoing, stake and slash are deactivated.\\n   * - MUST NOT be called when a previous slashing is still ongoing\\n   * @param destination the address where seized funds will be transferred\\n   * @param amount the amount to be slashed\\n   * - if the amount bigger than maximum allowed, the maximum will be slashed instead.\\n   * @return amount the amount slashed\\n   */\\n  function slash(\\n    address destination,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Settles an ongoing slashing event\\n   */\\n  function settleSlashing() external;\\n\\n  /**\\n   * @dev Pulls STAKE_TOKEN and distributes them amongst current stakers by altering the exchange rate.\\n   * This method is permissionless and intended to be used after a slashing event to return potential excess funds.\\n   * @param amount amount of STAKE_TOKEN to pull.\\n   */\\n  function returnFunds(uint256 amount) external;\\n\\n  /**\\n   * @dev Getter of the cooldown seconds\\n   * @return cooldownSeconds the amount of seconds between starting the cooldown and being able to redeem\\n   */\\n  function getCooldownSeconds() external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of the cooldown seconds\\n   * @return cooldownSeconds the amount of seconds between starting the cooldown and being able to redeem\\n   */\\n  function COOLDOWN_SECONDS() external view returns (uint256); // @deprecated\\n\\n  /**\\n   * @dev Setter of cooldown seconds\\n   * Can only be called by the cooldown admin\\n   * @param cooldownSeconds the new amount of seconds you have to wait between starting the cooldown and being able to redeem\\n   */\\n  function setCooldownSeconds(uint256 cooldownSeconds) external;\\n\\n  /**\\n   * @dev Getter of the max slashable percentage of the total staked amount.\\n   * @return percentage the maximum slashable percentage\\n   */\\n  function getMaxSlashablePercentage() external view returns (uint256);\\n\\n  /**\\n   * @dev Setter of max slashable percentage of the total staked amount.\\n   * Can only be called by the slashing admin\\n   * @param percentage the new maximum slashable percentage\\n   */\\n  function setMaxSlashablePercentage(uint256 percentage) external;\\n\\n  /**\\n   * @dev returns the exact amount of shares that would be received for the provided number of assets\\n   * @param assets the number of assets to stake\\n   * @return uint256 shares the number of shares that would be received\\n   */\\n  function previewStake(uint256 assets) external view returns (uint256);\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   */\\n  function cooldownOnBehalfOf(address from) external;\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to` on behalf of the user. Only the claim helper contract is allowed to call this function\\n   * @param from The address of the user from to claim\\n   * @param to Address to send the claimed rewards\\n   * @param amount Amount to claim\\n   */\\n  function claimRewardsOnBehalf(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the exact amount of assets that would be redeemed for the provided number of shares\\n   * @param shares the number of shares to redeem\\n   * @return uint256 assets the number of assets that would be redeemed\\n   */\\n  function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n  /**\\n   * @dev Redeems shares for a user. Only the claim helper contract is allowed to call this function\\n   * @param from Address to redeem from\\n   * @param to Address to redeem to\\n   * @param amount Amount of shares to redeem\\n   */\\n  function redeemOnBehalf(address from, address to, uint256 amount) external;\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and redeems to the provided address\\n   * @param to Address to claim and redeem to\\n   * @param claimAmount Amount to claim\\n   * @param redeemAmount Amount to redeem\\n   */\\n  function claimRewardsAndRedeem(\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external;\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` and redeems the `redeemAmount` to an address. Only the claim helper contract is allowed to call this function\\n   * @param from The address of the from\\n   * @param to Address to claim and redeem to\\n   * @param claimAmount Amount to claim\\n   * @param redeemAmount Amount to redeem\\n   */\\n  function claimRewardsAndRedeemOnBehalf(\\n    address from,\\n    address to,\\n    uint256 claimAmount,\\n    uint256 redeemAmount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/lib/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n    uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n    uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n    /**\\n     * @dev Executes a percentage multiplication\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The percentage of value\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || percentage == 0) {\\n            return 0;\\n        }\\n\\n        require(\\n            value <= (type(uint256).max) / percentage,\\n            \\\"MATH_MULTIPLICATION_OVERFLOW\\\"\\n        );\\n\\n        return (value * percentage) / PERCENTAGE_FACTOR;\\n    }\\n\\n    /**\\n     * @dev Executes a percentage division\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The value divided the percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(percentage != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\n\\n        require(\\n            value <= type(uint256).max / PERCENTAGE_FACTOR,\\n            \\\"MATH_MULTIPLICATION_OVERFLOW\\\"\\n        );\\n\\n        return (value * PERCENTAGE_FACTOR) / percentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/RoleManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/**\\n * @title RoleManager\\n * @notice Generic role manager to manage slashing and cooldown admin in StakedAaveV3.\\n *         It implements a claim admin role pattern to safely migrate between different admin addresses\\n * @author Aave\\n **/\\ncontract RoleManager {\\n  struct InitAdmin {\\n    uint256 role;\\n    address admin;\\n  }\\n\\n  mapping(uint256 => address) private _admins;\\n  mapping(uint256 => address) private _pendingAdmins;\\n\\n  event PendingAdminChanged(address indexed newPendingAdmin, uint256 role);\\n  event RoleClaimed(address indexed newAdmin, uint256 role);\\n\\n  modifier onlyRoleAdmin(uint256 role) {\\n    require(_admins[role] == msg.sender, 'CALLER_NOT_ROLE_ADMIN');\\n    _;\\n  }\\n\\n  modifier onlyPendingRoleAdmin(uint256 role) {\\n    require(\\n      _pendingAdmins[role] == msg.sender,\\n      'CALLER_NOT_PENDING_ROLE_ADMIN'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev returns the admin associated with the specific role\\n   * @param role the role associated with the admin being returned\\n   **/\\n  function getAdmin(uint256 role) public view returns (address) {\\n    return _admins[role];\\n  }\\n\\n  /**\\n   * @dev returns the pending admin associated with the specific role\\n   * @param role the role associated with the pending admin being returned\\n   **/\\n  function getPendingAdmin(uint256 role) public view returns (address) {\\n    return _pendingAdmins[role];\\n  }\\n\\n  /**\\n   * @dev sets the pending admin for a specific role\\n   * @param role the role associated with the new pending admin being set\\n   * @param newPendingAdmin the address of the new pending admin\\n   **/\\n  function setPendingAdmin(\\n    uint256 role,\\n    address newPendingAdmin\\n  ) public onlyRoleAdmin(role) {\\n    _pendingAdmins[role] = newPendingAdmin;\\n    emit PendingAdminChanged(newPendingAdmin, role);\\n  }\\n\\n  /**\\n   * @dev allows the caller to become a specific role admin\\n   * @param role the role associated with the admin claiming the new role\\n   **/\\n  function claimRoleAdmin(uint256 role) external onlyPendingRoleAdmin(role) {\\n    _admins[role] = msg.sender;\\n    _pendingAdmins[role] = address(0);\\n    emit RoleClaimed(msg.sender, role);\\n  }\\n\\n  function _initAdmins(InitAdmin[] memory initAdmins) internal {\\n    for (uint256 i = 0; i < initAdmins.length; i++) {\\n      require(\\n        _admins[initAdmins[i].role] == address(0) &&\\n          initAdmins[i].admin != address(0),\\n        'ADMIN_CANNOT_BE_INITIALIZED'\\n      );\\n      _admins[initAdmins[i].role] = initAdmins[i].admin;\\n      emit RoleClaimed(initAdmins[i].admin, initAdmins[i].role);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20WithPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20WithPermit is IERC20 {\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/utils/SafeCast72.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** @notice influenced by OpenZeppelin SafeCast lib, which is missing to uint72 cast\\n * @author BGD Labs\\n */\\nlibrary SafeCast72 {\\n  /**\\n   * @dev Returns the downcasted uint72 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint72).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 72 bits\\n   */\\n  function toUint72(uint256 value) internal pure returns (uint72) {\\n    require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    return uint72(value);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/interfaces/IGovernancePowerDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum GovernancePowerType {\\n    VOTING,\\n    PROPOSITION\\n  }\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the user which delegated governance power\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    GovernancePowerType delegationType\\n  );\\n\\n  // @dev we removed DelegatedPowerChanged event because to reconstruct the full state of the system,\\n  // is enough to have Transfer and DelegateChanged TODO: document it\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power will change\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  function delegateByType(address delegatee, GovernancePowerType delegationType) external;\\n\\n  /**\\n   * @dev delegates all the governance powers to a specific user\\n   * @param delegatee the user to which the powers will be delegated\\n   **/\\n  function delegate(address delegatee) external;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   * @return address of the specified delegatee\\n   **/\\n  function getDelegateeByType(address delegator, GovernancePowerType delegationType)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev returns delegates of an user\\n   * @param delegator the address of the delegator\\n   * @return a tuple of addresses the VOTING and PROPOSITION delegatee\\n   **/\\n  function getDelegates(address delegator)\\n    external\\n    view\\n    returns (address, address);\\n\\n  /**\\n   * @dev returns the current voting or proposition power of a user.\\n   * @param user the user\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   * @return the current voting or proposition power of a user\\n   **/\\n  function getPowerCurrent(address user, GovernancePowerType delegationType)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the current voting or proposition power of a user.\\n   * @param user the user\\n   * @return the current voting and proposition power of a user\\n   **/\\n  function getPowersCurrent(address user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who owner delegates his governance power\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function metaDelegateByType(\\n    address delegator,\\n    address delegatee,\\n    GovernancePowerType delegationType,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who delegator delegates his voting and proposition governance power\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function metaDelegate(\\n    address delegator,\\n    address delegatee,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/DelegationAwareBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum DelegationMode {\\n  NO_DELEGATION,\\n  VOTING_DELEGATED,\\n  PROPOSITION_DELEGATED,\\n  FULL_POWER_DELEGATED\\n}\\n\"\r\n    },\r\n    \"src/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/utils/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Contract modified from OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol) to remove local\\n// fallback storage variables, so contract does not affect on existing storage layout. This works as its used on contracts\\n// that have name and revision < 32 bytes\\n\\npragma solidity ^0.8.10;\\n\\nimport {ECDSA} from 'openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';\\nimport {ShortStrings, ShortString} from 'openzeppelin-contracts/contracts/utils/ShortStrings.sol';\\nimport {IERC5267} from 'openzeppelin-contracts/contracts/interfaces/IERC5267.sol';\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n  using ShortStrings for *;\\n\\n  bytes32 private constant _TYPE_HASH =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n\\n  // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n  // invalidate the cached domain separator if the chain id changes.\\n  bytes32 private immutable _cachedDomainSeparator;\\n  uint256 private immutable _cachedChainId;\\n  address private immutable _cachedThis;\\n\\n  bytes32 private immutable _hashedName;\\n  bytes32 private immutable _hashedVersion;\\n\\n  ShortString private immutable _name;\\n  ShortString private immutable _version;\\n\\n  /**\\n   * @dev Initializes the domain separator and parameter caches.\\n   *\\n   * The meaning of `name` and `version` is specified in\\n   * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n   *\\n   * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n   * - `version`: the current major version of the signing domain.\\n   *\\n   * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n   * contract upgrade].\\n   */\\n  /// @dev BGD: removed usage of fallback variables to not modify previous storage layout. As we know that the length of\\n  ///           name and version will not be bigger than 32 bytes we use toShortString as there is no need to use the fallback system.\\n  constructor(string memory name, string memory version) {\\n    _name = name.toShortString();\\n    _version = version.toShortString();\\n    _hashedName = keccak256(bytes(name));\\n    _hashedVersion = keccak256(bytes(version));\\n\\n    _cachedChainId = block.chainid;\\n    _cachedDomainSeparator = _buildDomainSeparator();\\n    _cachedThis = address(this);\\n  }\\n\\n  /**\\n   * @dev Returns the domain separator for the current chain.\\n   */\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n      return _cachedDomainSeparator;\\n    } else {\\n      return _buildDomainSeparator();\\n    }\\n  }\\n\\n  function _buildDomainSeparator() private view returns (bytes32) {\\n    return\\n      keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n  }\\n\\n  /**\\n   * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n   * function returns the hash of the fully encoded EIP712 message for this domain.\\n   *\\n   * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n   *\\n   * ```solidity\\n   * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n   *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n   *     mailTo,\\n   *     keccak256(bytes(mailContents))\\n   * )));\\n   * address signer = ECDSA.recover(digest, signature);\\n   * ```\\n   */\\n  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n    return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n\\n  /**\\n   * @dev See {EIP-5267}.\\n   *\\n   * _Available since v4.9._\\n   */\\n  function eip712Domain()\\n    public\\n    view\\n    virtual\\n    returns (\\n      bytes1 fields,\\n      string memory name,\\n      string memory version,\\n      uint256 chainId,\\n      address verifyingContract,\\n      bytes32 salt,\\n      uint256[] memory extensions\\n    )\\n  {\\n    return (\\n      hex'0f', // 01111\\n      _EIP712Name(),\\n      _EIP712Version(),\\n      block.chainid,\\n      address(this),\\n      bytes32(0),\\n      new uint256[](0)\\n    );\\n  }\\n\\n  /**\\n   * @dev The name parameter for the EIP712 domain.\\n   *\\n   * NOTE: By default this function reads _name which is an immutable value.\\n   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n   *\\n   * _Available since v5.0._\\n   */\\n  /// @dev BGD: we use toString instead of toStringWithFallback as we dont have fallback, to not modify previous storage layout\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _EIP712Name() internal view returns (string memory) {\\n    return _name.toString(); // _name.toStringWithFallback(_nameFallback);\\n  }\\n\\n  /**\\n   * @dev The version parameter for the EIP712 domain.\\n   *\\n   * NOTE: By default this function reads _version which is an immutable value.\\n   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n   *\\n   * _Available since v5.0._\\n   */\\n  /// @dev BGD: we use toString instead of toStringWithFallback as we dont have fallback, to not modify previous storage layout\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _EIP712Version() internal view returns (string memory) {\\n    return _version.toString();\\n  }\\n}\\n\"\r\n    },\r\n    \"src/utils/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"src/contracts/AaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n */\\ncontract AaveDistributionManager {\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(\\n    address indexed user,\\n    address indexed asset,\\n    uint256 index\\n  );\\n\\n  constructor(address emissionManager, uint256 distributionDuration) {\\n    DISTRIBUTION_END = block.timestamp + distributionDuration;\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   */\\n  function _configureAssets(\\n    DistributionTypes.AssetConfigInput[] memory assetsConfigInput\\n  ) internal {\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[\\n        assetsConfigInput[i].underlyingAsset\\n      ];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   */\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex = _getAssetIndex(\\n      oldIndex,\\n      assetConfig.emissionPerSecond,\\n      lastUpdateTimestamp,\\n      totalStaked\\n    );\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   */\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   */\\n  function _claimRewards(\\n    address user,\\n    DistributionTypes.UserStakeInput[] memory stakes\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards =\\n        accruedRewards +\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   */\\n  function _getUnclaimedRewards(\\n    address user,\\n    DistributionTypes.UserStakeInput[] memory stakes\\n  ) internal view returns (uint256) {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex = _getAssetIndex(\\n        assetConfig.index,\\n        assetConfig.emissionPerSecond,\\n        assetConfig.lastUpdateTimestamp,\\n        stakes[i].totalStaked\\n      );\\n\\n      accruedRewards =\\n        accruedRewards +\\n        _getRewards(\\n          stakes[i].stakedByUser,\\n          assetIndex,\\n          assetConfig.users[user]\\n        );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   */\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return\\n      (principalUserBalance * (reserveIndex - userIndex)) /\\n      (10 ** uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   */\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp = block.timestamp > DISTRIBUTION_END\\n      ? DISTRIBUTION_END\\n      : block.timestamp;\\n    uint256 timeDelta = currentTimestamp - lastUpdateTimestamp;\\n    return\\n      ((emissionPerSecond * timeDelta * (10 ** uint256(PRECISION))) /\\n        totalBalance) + currentIndex;\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   */\\n  function getUserAssetData(\\n    address user,\\n    address asset\\n  ) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\"\r\n    },\r\n    \"src/lib/GovernancePowerWithSnapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title MOCK CONTRACT TO KEEP VALID STORAGE LAYOUT\\n * @dev WAS including snapshots of balances on transfer-related actions\\n * @author BGD Labs\\n **/\\nabstract contract GovernancePowerWithSnapshot {\\n  uint256[3] private __________DEPRECATED_GOV_V2_PART;\\n}\\n\"\r\n    },\r\n    \"src/contracts/BaseMintableAaveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BaseAaveToken} from 'aave-token-v3/BaseAaveToken.sol';\\n\\n/**\\n * @title BaseMintableAaveToken\\n * @author BGD labs\\n * @notice extension for BaseAaveToken adding mint/burn and transfer hooks\\n */\\ncontract BaseMintableAaveToken is BaseAaveToken {\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint104 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply += amount;\\n    _balances[account].balance += amount;\\n    emit Transfer(address(0), account, amount);\\n\\n    _afterTokenTransfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint104 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    uint104 accountBalance = _balances[account].balance;\\n    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n    unchecked {\\n      _balances[account].balance = accountBalance - amount;\\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\\n      _totalSupply -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n\\n    _afterTokenTransfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * has been transferred to `to`.\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.19;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/BaseAaveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Context} from 'openzeppelin-contracts/contracts/utils/Context.sol';\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\nimport {IERC20Metadata} from 'openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport {DelegationMode} from './DelegationAwareBalance.sol';\\n\\n// Inspired by OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\nabstract contract BaseAaveToken is Context, IERC20Metadata {\\n  struct DelegationAwareBalance {\\n    uint104 balance;\\n    uint72 delegatedPropositionBalance;\\n    uint72 delegatedVotingBalance;\\n    DelegationMode delegationMode;\\n  }\\n\\n  mapping(address => DelegationAwareBalance) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n\\n  // @dev DEPRECATED\\n  // kept for backwards compatibility with old storage layout\\n  uint8 private ______DEPRECATED_OLD_ERC20_DECIMALS;\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account].balance;\\n  }\\n\\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _transfer(owner, to, amount);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = _allowances[owner][spender];\\n    require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), 'ERC20: transfer from the zero address');\\n    require(to != address(0), 'ERC20: transfer to the zero address');\\n\\n    if (from != to) {\\n      uint104 fromBalanceBefore = _balances[from].balance;\\n      uint104 toBalanceBefore = _balances[to].balance;\\n\\n      require(fromBalanceBefore >= amount, 'ERC20: transfer amount exceeds balance');\\n      unchecked {\\n        _balances[from].balance = fromBalanceBefore - uint104(amount);\\n      }\\n\\n      _balances[to].balance = toBalanceBefore + uint104(amount);\\n\\n      _afterTokenTransfer(from, to, fromBalanceBefore, toBalanceBefore, amount);\\n    }\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _spendAllowance(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, 'ERC20: insufficient allowance');\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev after token transfer hook, added for delegation system\\n   * @param from token sender\\n   * @param to token recipient\\n   * @param fromBalanceBefore balance of the sender before transfer\\n   * @param toBalanceBefore balance of the recipient before transfer\\n   * @param amount amount of tokens sent\\n   **/\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 fromBalanceBefore,\\n    uint256 toBalanceBefore,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"aave-helpers/=lib/aave-helpers/src/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"aave-token-v3/=lib/aave-token-v3/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-utils/=lib/aave-helpers/lib/solidity-utils/src/\",\r\n      \"aave-token-v2/=lib/aave-token-v3/lib/aave-token-v2/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"distributionDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"name\":\"CooldownSecondsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint216\",\"name\":\"exchangeRate\",\"type\":\"uint216\"}],\"name\":\"ExchangeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDebtToken\",\"type\":\"address\"}],\"name\":\"GHODebtTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"MaxSlashablePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"PendingAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"RoleClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"windowSeconds\",\"type\":\"uint256\"}],\"name\":\"SlashingExitWindowDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SlashingSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_HELPER_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COOLDOWN_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_RATE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_EXCHANGE_RATE\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOWER_BOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POWER_SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLASH_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAndRedeemOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAndStakeOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"claimRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"cooldownOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCooldownSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"getDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSlashablePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPowersCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ghoDebtToken\",\"outputs\":[{\"internalType\":\"contract IGhoVariableDebtTokenTransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPostSlashingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"metaDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"metaDelegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"name\":\"setCooldownSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGhoVariableDebtTokenTransferHook\",\"name\":\"newGHODebtToken\",\"type\":\"address\"}],\"name\":\"setGHODebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setMaxSlashablePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"amount\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakedAaveV3", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae9000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000025f2226b597e8f9514b3f68f00f494cf4f286491000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bc180c38", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}