{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/eco/Relayer.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IORMP.sol\\\";\\n\\ncontract Relayer {\\n    event Assigned(bytes32 indexed msgHash, uint256 fee, bytes params, bytes32[32] proof);\\n    event SetDstPrice(uint256 indexed chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei);\\n    event SetDstConfig(uint256 indexed chainId, uint64 baseGas, uint64 gasPerByte);\\n    event SetApproved(address operator, bool approve);\\n\\n    struct DstPrice {\\n        uint128 dstPriceRatio; // dstPrice / localPrice * 10^10\\n        uint128 dstGasPriceInWei;\\n    }\\n\\n    struct DstConfig {\\n        uint64 baseGas;\\n        uint64 gasPerByte;\\n    }\\n\\n    address public immutable PROTOCOL;\\n\\n    address public owner;\\n    // chainId => price\\n    mapping(uint256 => DstPrice) public priceOf;\\n    mapping(uint256 => DstConfig) public configOf;\\n    mapping(address => bool) public approvedOf;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(isApproved(msg.sender), \\\"!approve\\\");\\n        _;\\n    }\\n\\n    constructor(address dao, address ormp) {\\n        PROTOCOL = ormp;\\n        owner = dao;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw(address to, uint256 amount) external onlyApproved {\\n        (bool success,) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"!withdraw\\\");\\n    }\\n\\n    function isApproved(address operator) public view returns (bool) {\\n        return approvedOf[operator];\\n    }\\n\\n    function changeOwner(address owner_) external onlyOwner {\\n        owner = owner_;\\n    }\\n\\n    function setApproved(address operator, bool approve) public onlyOwner {\\n        approvedOf[operator] = approve;\\n        emit SetApproved(operator, approve);\\n    }\\n\\n    function setDstPrice(uint256 chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei) external onlyApproved {\\n        priceOf[chainId] = DstPrice(dstPriceRatio, dstGasPriceInWei);\\n        emit SetDstPrice(chainId, dstPriceRatio, dstGasPriceInWei);\\n    }\\n\\n    function setDstConfig(uint256 chainId, uint64 baseGas, uint64 gasPerByte) external onlyApproved {\\n        configOf[chainId] = DstConfig(baseGas, gasPerByte);\\n        emit SetDstConfig(chainId, baseGas, gasPerByte);\\n    }\\n\\n    // extraGas = gasLimit\\n    function fee(\\n        uint256 toChainId,\\n        address, /*ua*/\\n        uint256 gasLimit,\\n        bytes calldata encoded,\\n        bytes calldata /*params*/\\n    ) public view returns (uint256) {\\n        uint256 size = encoded.length;\\n        uint256 extraGas = gasLimit;\\n        DstPrice memory p = priceOf[toChainId];\\n        DstConfig memory c = configOf[toChainId];\\n\\n        require(c.baseGas != 0, \\\"!baseGas\\\");\\n        // remoteToken = dstGasPriceInWei * (baseGas + extraGas)\\n        uint256 remoteToken = p.dstGasPriceInWei * (c.baseGas + extraGas);\\n        // dstPriceRatio = dstPrice / localPrice * 10^10\\n        // sourceToken = RemoteToken * dstPriceRatio\\n        uint256 sourceToken = remoteToken * p.dstPriceRatio / (10 ** 10);\\n        uint256 payloadToken = c.gasPerByte * size * p.dstGasPriceInWei * p.dstPriceRatio / (10 ** 10);\\n        return sourceToken + payloadToken;\\n    }\\n\\n    function assign(bytes32 msgHash, bytes calldata params) external payable {\\n        require(msg.sender == PROTOCOL, \\\"!ormp\\\");\\n        emit Assigned(msgHash, msg.value, params, IORMP(PROTOCOL).prove());\\n    }\\n\\n    function relay(Message calldata message, bytes calldata proof) external onlyApproved {\\n        IORMP(PROTOCOL).recv(message, proof);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IORMP.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../Common.sol\\\";\\n\\ninterface IORMP {\\n    /// @dev Send a cross-chain message over the endpoint.\\n    /// @notice follow https://eips.ethereum.org/EIPS/eip-5750\\n    /// @param toChainId The Message destination chain id.\\n    /// @param to User application contract address which receive the message.\\n    /// @param gasLimit Gas limit for destination user application used.\\n    /// @param encoded The calldata which encoded by ABI Encoding.\\n    /// @param refund Return extra fee to refund address.\\n    /// @param params General extensibility for relayer to custom functionality.\\n    /// @return Return the hash of the message as message id.\\n    function send(\\n        uint256 toChainId,\\n        address to,\\n        uint256 gasLimit,\\n        bytes calldata encoded,\\n        address refund,\\n        bytes calldata params\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\\n    /// @param toChainId The Message destination chain id.\\n    //  @param ua User application contract address which send the message.\\n    /// @param gasLimit Gas limit for destination user application used.\\n    /// @param encoded The calldata which encoded by ABI Encoding.\\n    /// @param params General extensibility for relayer to custom functionality.\\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Recv verified message and dispatch to destination user application address.\\n    /// @param message Verified receive message info.\\n    /// @param proof Message proof of this message.\\n    /// @return dispatchResult Result of the message dispatch.\\n    function recv(Message calldata message, bytes calldata proof) external returns (bool dispatchResult);\\n\\n    function prove() external view returns (bytes32[32] memory);\\n\\n    /// @dev Fetch user application config.\\n    /// @notice If user application has not configured, then the default config is used.\\n    /// @param ua User application contract address.\\n    /// @return user application config.\\n    function getAppConfig(address ua) external view returns (UC memory);\\n\\n    /// @notice Set user application config.\\n    /// @param oracle Oracle which user application choose.\\n    /// @param relayer Relayer which user application choose.\\n    function setAppConfig(address oracle, address relayer) external;\\n\\n    function defaultUC() external view returns (UC memory);\\n}\\n\"\r\n    },\r\n    \"src/Common.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\n/// @dev The block of control information and data for comminicate\\n/// between user applications. Messages are the exchange medium\\n/// used by channels to send and receive data through cross-chain networks.\\n/// A message is sent from a source chain to a destination chain.\\n/// @param index The leaf index lives in channel's incremental mekle tree.\\n/// @param fromChainId The message source chain id.\\n/// @param from User application contract address which send the message.\\n/// @param toChainId The message destination chain id.\\n/// @param to User application contract address which receive the message.\\n/// @param gasLimit Gas limit for destination UA used.\\n/// @param encoded The calldata which encoded by ABI Encoding.\\nstruct Message {\\n    address channel;\\n    uint256 index;\\n    uint256 fromChainId;\\n    address from;\\n    uint256 toChainId;\\n    address to;\\n    uint256 gasLimit;\\n    bytes encoded; /*(abi.encodePacked(SELECTOR, PARAMS))*/\\n}\\n\\n/// @dev User application custom configuration.\\n/// @param oracle Oracle contract address.\\n/// @param relayer Relayer contract address.\\nstruct UC {\\n    address oracle;\\n    address relayer;\\n}\\n\\n/// @dev Hash of the message.\\nfunction hash(Message memory message) pure returns (bytes32) {\\n    return keccak256(abi.encode(message));\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ormp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32[32]\",\"name\":\"proof\",\"type\":\"bytes32[32]\"}],\"name\":\"Assigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"SetApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"name\":\"SetDstConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"SetDstPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROTOCOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"assign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"configOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"internalType\":\"struct Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"setApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"setDstPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Relayer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000000000000001523057a05d6293c1e5171ee33ee0a", "EVMVersion": "london", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fdd9b04be2397381a143c4fe18b1cd358143f0425619ec55da9b7c5cafec909b"}