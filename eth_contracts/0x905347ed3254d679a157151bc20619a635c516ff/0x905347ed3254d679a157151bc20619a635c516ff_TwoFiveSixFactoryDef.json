{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Bytecode {\\r\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\r\\n\\r\\n    /**\\r\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\r\\n    @param _code The returning value of the resulting `creationCode`\\r\\n    @return creationCode (constructor) for new contract\\r\\n  */\\r\\n    function creationCodeFor(bytes memory _code)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        /*\\r\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\r\\n      0x01    0x80         0x80        DUP1                size size\\r\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\r\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\r\\n      0x04    0x39         0x39        CODECOPY            size\\r\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\r\\n      0x06    0xf3         0xf3        RETURN\\r\\n      <CODE>\\r\\n    */\\r\\n\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                hex\\\"63\\\",\\r\\n                uint32(_code.length),\\r\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\r\\n                _code\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Returns the size of the code on a given address\\r\\n    @param _addr Address that may or may not contain code\\r\\n    @return size of the code on the given `_addr`\\r\\n  */\\r\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Returns the code of a given address\\r\\n    @dev It will fail if `_end < _start`\\r\\n    @param _addr Address that may or may not contain code\\r\\n    @param _start number of bytes of code to skip on read\\r\\n    @param _end index before which to end extraction\\r\\n    @return oCode read from `_addr` deployed bytecode\\r\\n\\r\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\r\\n  */\\r\\n    function codeAt(\\r\\n        address _addr,\\r\\n        uint256 _start,\\r\\n        uint256 _end\\r\\n    ) internal view returns (bytes memory oCode) {\\r\\n        uint256 csize = codeSize(_addr);\\r\\n        if (csize == 0) return bytes(\\\"\\\");\\r\\n\\r\\n        if (_start > csize) return bytes(\\\"\\\");\\r\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\r\\n\\r\\n        unchecked {\\r\\n            uint256 reqSize = _end - _start;\\r\\n            uint256 maxSize = csize - _start;\\r\\n\\r\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\r\\n\\r\\n            assembly {\\r\\n                // allocate output byte array - this could also be done without assembly\\r\\n                // by using o_code = new bytes(size)\\r\\n                oCode := mload(0x40)\\r\\n                // new \\\"memory end\\\" including padding\\r\\n                mstore(\\r\\n                    0x40,\\r\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\r\\n                )\\r\\n                // store length in memory\\r\\n                mstore(oCode, size)\\r\\n                // actually retrieve the code, this needs assembly\\r\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/helpers/SSTORE2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./Bytecode.sol\\\";\\r\\n\\r\\nlibrary SSTORE2 {\\r\\n    error WriteError();\\r\\n\\r\\n    /**\\r\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\r\\n    @dev The pointer is a contract address with `_data` as code\\r\\n    @param _data to be written\\r\\n    @return pointer Pointer to the written `_data`\\r\\n  */\\r\\n    function write(bytes memory _data) internal returns (address pointer) {\\r\\n        // Append 00 to _data so contract can't be called\\r\\n        // Build init code\\r\\n        bytes memory code = Bytecode.creationCodeFor(\\r\\n            abi.encodePacked(hex\\\"00\\\", _data)\\r\\n        );\\r\\n\\r\\n        // Deploy contract using create\\r\\n        assembly {\\r\\n            pointer := create(0, add(code, 32), mload(code))\\r\\n        }\\r\\n\\r\\n        // Address MUST be non-zero\\r\\n        if (pointer == address(0)) revert WriteError();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\r\\n    @dev The function is intended for reading pointers generated by `write`\\r\\n    @param _pointer to be read\\r\\n    @return data read from `_pointer` contract\\r\\n  */\\r\\n    function read(address _pointer) internal view returns (bytes memory) {\\r\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\r\\n    @dev The function is intended for reading pointers generated by `write`\\r\\n    @param _pointer to be read\\r\\n    @param _start number of bytes to skip\\r\\n    @return data read from `_pointer` contract\\r\\n  */\\r\\n    function read(address _pointer, uint256 _start)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\r\\n    @dev The function is intended for reading pointers generated by `write`\\r\\n    @param _pointer to be read\\r\\n    @param _start number of bytes to skip\\r\\n    @param _end index before which to end extraction\\r\\n    @return data read from `_pointer` contract\\r\\n  */\\r\\n    function read(\\r\\n        address _pointer,\\r\\n        uint256 _start,\\r\\n        uint256 _end\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TwoFiveSixFactoryDefault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/* \\r\\n\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \\r\\n\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \\r\\n \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \\r\\n\\r\\nUsing this contract? \\r\\nA shout out to @Mint256Art is appreciated!\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./helpers/SSTORE2.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract TwoFiveSixFactoryDefaultV1 is Ownable {\\r\\n    address payable private _twoFiveSixAddress;\\r\\n    address public masterProject;\\r\\n\\r\\n    address[] public projects;\\r\\n\\r\\n    /* Percentage multiplied by 100 */\\r\\n    uint256 public twoFiveSixSharePrimary;\\r\\n\\r\\n    uint256 public biddingDelay;\\r\\n    uint256 public allowListDelay;\\r\\n\\r\\n    event Deployed(address a);\\r\\n\\r\\n    /**\\r\\n     * @notice Launches a new TwoFiveSixProject with the provided project, traits, and libraries.\\r\\n     * @dev The `masterProject` is used as the contract implementation.\\r\\n     * @param _project A struct containing details about the project being launched.\\r\\n     * @param _traits An array of structs containing details about the traits associated with the project.\\r\\n     * @param _libraries An array of structs containing details about the libraries used by the project.\\r\\n     */\\r\\n    function launchProject(\\r\\n        ITwoFiveSixProject.Project calldata _project,\\r\\n        ITwoFiveSixProject.Trait[] calldata _traits,\\r\\n        ITwoFiveSixProject.LibraryScript[] calldata _libraries\\r\\n    ) public {\\r\\n        require(\\r\\n            _project.biddingStartTimeStamp > block.timestamp + biddingDelay,\\r\\n            \\\"Before minimum bidding delay\\\"\\r\\n        );\\r\\n        require(\\r\\n            _project.allowListStartTimeStamp > block.timestamp + allowListDelay,\\r\\n            \\\"Before allow list delay\\\"\\r\\n        );\\r\\n        require(\\r\\n            _project.twoFiveSix == _twoFiveSixAddress,\\r\\n            \\\"Incorrect 256ART address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _project.twoFiveSixShare == uint24(twoFiveSixSharePrimary),\\r\\n            \\\"Incorrect 256ART share\\\"\\r\\n        );\\r\\n        require(\\r\\n            twoFiveSixSharePrimary + _project.thirdPartyShare <= 10000,\\r\\n            \\\"Third party share too high\\\"\\r\\n        );\\r\\n\\r\\n        address a = clone(masterProject);\\r\\n\\r\\n        address traits;\\r\\n\\r\\n        address libraryScripts;\\r\\n\\r\\n        if (_traits.length > 0) {\\r\\n            traits = SSTORE2.write(abi.encode(_traits));\\r\\n        }\\r\\n\\r\\n        if (_libraries.length > 0) {\\r\\n            libraryScripts = SSTORE2.write(abi.encode(_libraries));\\r\\n        }\\r\\n\\r\\n        ITwoFiveSixProject p = ITwoFiveSixProject(a);\\r\\n\\r\\n        p.initProject(_project, traits, libraryScripts);\\r\\n        projects.push(a);\\r\\n        emit Deployed(a);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Clones a contract using the provided implementation address\\r\\n     * @param implementation The address of the contract implementation\\r\\n     */\\r\\n    function clone(address implementation) internal returns (address instance) {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(\\r\\n                ptr,\\r\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\r\\n            )\\r\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\r\\n            mstore(\\r\\n                add(ptr, 0x28),\\r\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\r\\n            )\\r\\n            instance := create(0, ptr, 0x37)\\r\\n        }\\r\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the master project address\\r\\n     * @notice Only the contract owner can call this function\\r\\n     * @param _masterProject Address of the new master project contract\\r\\n     */\\r\\n    function setMasterProject(address _masterProject) public onlyOwner {\\r\\n        masterProject = _masterProject;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the 256 address\\r\\n     * @notice Only the contract owner can call this function\\r\\n     * @param newAddress The new 256 contract address\\r\\n     */\\r\\n    function setTwoFiveSixAddress(address payable newAddress) public onlyOwner {\\r\\n        _twoFiveSixAddress = newAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the primary 256 share\\r\\n     * @notice Only the contract owner can call this function\\r\\n     * @param newShare The new primary 256 share\\r\\n     */\\r\\n    function setTwoFiveSixSharePrimary(uint256 newShare) public onlyOwner {\\r\\n        twoFiveSixSharePrimary = newShare;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the bidding delay\\r\\n     * @notice Only the contract owner can call this function\\r\\n     * @param delay The new bidding delay\\r\\n     */\\r\\n    function setBiddingDelay(uint256 delay) public onlyOwner {\\r\\n        biddingDelay = delay;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the allow list delay\\r\\n     * @notice Only the contract owner can call this function\\r\\n     * @param delay The new allow list delay\\r\\n     */\\r\\n    function setAllowListDelay(uint256 delay) public onlyOwner {\\r\\n        allowListDelay = delay;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ITwoFiveSixProject {\\r\\n    struct Project {\\r\\n        string name; //unknown\\r\\n        string imageBase; //unkown\\r\\n        address[] artScripts; //unknown\\r\\n        bytes32 merkleRoot; //32\\r\\n        address artInfo; //20\\r\\n        uint56 biddingStartTimeStamp; //8\\r\\n        uint32 maxSupply; //4\\r\\n        address payable artistAddress; //20\\r\\n        uint56 allowListStartTimeStamp; //8\\r\\n        uint32 totalAllowListMints; //4\\r\\n        address payable twoFiveSix; //20\\r\\n        uint24 artistAuctionWithdrawalsClaimed; //3\\r\\n        uint24 artistAllowListWithdrawalsClaimed; //3\\r\\n        uint24 twoFiveSixShare; //3\\r\\n        uint24 royalty; //3\\r\\n        address traits; //20\\r\\n        uint96 reservePrice; //12\\r\\n        address payable royaltyAddress; //20\\r\\n        uint96 lastSalePrice; //12\\r\\n        address libraryScripts; //20\\r\\n        uint56 endingTimeStamp; //8\\r\\n        uint24 thirdPartyShare; //3\\r\\n        bool fixedPrice; //1\\r\\n        address payable thirdPartyAddress; //20\\r\\n    }\\r\\n    struct Trait {\\r\\n        string name;\\r\\n        string[] values;\\r\\n        string[] descriptions;\\r\\n        uint256[] weights;\\r\\n    }\\r\\n\\r\\n    struct TotalAndCount {\\r\\n        uint128 total;\\r\\n        uint128 count;\\r\\n    }\\r\\n    struct LibraryScript {\\r\\n        address fileStoreFrontEnd;\\r\\n        address fileStore;\\r\\n        string fileName;\\r\\n    }\\r\\n\\r\\n    function initProject(\\r\\n        Project calldata _p,\\r\\n        address _traits,\\r\\n        address _libraryScripts\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowListDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageBase\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"artScripts\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"artInfo\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"biddingStartTimeStamp\",\"type\":\"uint56\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"allowListStartTimeStamp\",\"type\":\"uint56\"},{\"internalType\":\"uint32\",\"name\":\"totalAllowListMints\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"twoFiveSix\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"artistAuctionWithdrawalsClaimed\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"artistAllowListWithdrawalsClaimed\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"twoFiveSixShare\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"royalty\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"traits\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"lastSalePrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"libraryScripts\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"endingTimeStamp\",\"type\":\"uint56\"},{\"internalType\":\"uint24\",\"name\":\"thirdPartyShare\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"fixedPrice\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"}],\"internalType\":\"struct ITwoFiveSixProject.Project\",\"name\":\"_project\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITwoFiveSixProject.Trait[]\",\"name\":\"_traits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fileStoreFrontEnd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fileStore\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"}],\"internalType\":\"struct ITwoFiveSixProject.LibraryScript[]\",\"name\":\"_libraries\",\"type\":\"tuple[]\"}],\"name\":\"launchProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterProject\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setAllowListDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setBiddingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterProject\",\"type\":\"address\"}],\"name\":\"setMasterProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTwoFiveSixAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"setTwoFiveSixSharePrimary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twoFiveSixSharePrimary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TwoFiveSixFactoryDefaultV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}