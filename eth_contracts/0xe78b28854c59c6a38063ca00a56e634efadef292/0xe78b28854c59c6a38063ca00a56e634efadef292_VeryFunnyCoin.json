{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event. C U ON THE MOON\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if(currentAllowance != type(uint256).max) { \r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ILpPair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract VeryFunnyCoin is ERC20, Ownable {\r\n    IDexRouter public immutable dexRouter;\r\n    address public lpPair;\r\n\r\n    uint8 constant _decimals = 9;\r\n    uint256 constant _decimalFactor = 10 ** _decimals;\r\n\r\n    uint256 private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxSwapTokens;\r\n\r\n    address public immutable taxAddress;\r\n\r\n    uint256 public swapEnabled = 2;\r\n\r\n    uint256 public feesEnabled = 2;\r\n    uint256 public limits = 2;\r\n    mapping (address => uint256) buyTimer;\r\n\r\n    uint256 public tradingActiveTime;\r\n\r\n    mapping(address => uint256) private _isExcludedFromFees;\r\n    mapping(address => uint256) public pairs;\r\n\r\n    event SetPair(address indexed pair, bool value);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    constructor() ERC20(\"Very Funny Coin\", \"FUNNY\") payable {\r\n        address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        dexRouter = IDexRouter(routerAddress);\r\n\r\n        _approve(msg.sender, routerAddress, type(uint256).max);\r\n        _approve(address(this), routerAddress, type(uint256).max);\r\n\r\n        uint256 totalSupply = 120_220_000 * _decimalFactor;\r\n\r\n        swapTokensAtAmount = totalSupply / 10000;\r\n        maxSwapTokens = totalSupply / 200;\r\n\r\n        taxAddress = 0xA09332Bc5F18C65c95636eb0a608F26fa46a126A;\r\n\r\n        excludeFromFees(msg.sender, true);\r\n        excludeFromFees(taxAddress, true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        _balances[0x29A7D378a7C2da1846866BF783242EbeDEF0d344] = 25 * totalSupply / 1000;\r\n        emit Transfer(address(0), 0x29A7D378a7C2da1846866BF783242EbeDEF0d344, 25 * totalSupply / 1000);\r\n        _balances[0x0af7BFb0Ea4b5055dEC013CaE1E82941C0Aa3a51] = 25 * totalSupply / 1000;\r\n        emit Transfer(address(0), 0x0af7BFb0Ea4b5055dEC013CaE1E82941C0Aa3a51, 25 * totalSupply / 1000);\r\n\r\n        _balances[address(this)] = totalSupply - (5 * totalSupply / 100);\r\n        emit Transfer(address(0), address(this), totalSupply - (5 * totalSupply / 100));\r\n        _totalSupply = totalSupply;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function setSwap(bool value) external onlyOwner {\r\n        swapEnabled = value ? 2 : 1;\r\n    }\r\n\r\n    function setPair(address pair, bool value) external onlyOwner {\r\n        require(pair != lpPair,\"The main pair cannot be removed from pairs\");\r\n        pairs[pair] = value ?  2 : 1;\r\n        emit SetPair(pair, value);\r\n    }\r\n\r\n    function setMarketingFees(bool _enabled) external onlyOwner {\r\n        feesEnabled = _enabled ? 2 : 1;\r\n    }\r\n\r\n    function getSellFees() public view returns (uint256) {\r\n        uint256 elapsed = block.timestamp - tradingActiveTime;\r\n        if(elapsed <= 1 minutes) return 0;\r\n        if(elapsed <= 4 minutes) return 40;\r\n        if(feesEnabled == 2) return 1;\r\n        return 0;\r\n    }\r\n\r\n    function getBuyFees() public view returns (uint256) {\r\n        uint256 elapsed = block.timestamp - tradingActiveTime;\r\n        if(elapsed <= 1 minutes) return 0;\r\n        elapsed -= 1 minutes;\r\n        if(elapsed <= 3 minutes) {\r\n            uint256 taxReduced = elapsed / 6;\r\n            if (taxReduced < 40) \r\n                return 40 - taxReduced;\r\n        }\r\n\r\n        if(feesEnabled == 2) return 1;\r\n        return 0;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded ? 2 : 1;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if(buyTimer[account] > 0 && block.timestamp - buyTimer[account] > 0) return 0;\r\n        return _balances[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (tradingActiveTime > 0 && _isExcludedFromFees[from] != 2 && _isExcludedFromFees[to] != 2) {\r\n            if (limits == 2) {\r\n                if (pairs[to] != 2 && to != address(0xdead)) {\r\n                    require(balanceOf(to) + amount <= totalSupply() / 50, \"Transfer amount exceeds the bag size.\");\r\n                }\r\n                require(amount <= totalSupply() / 100, \"Transfer limit exceeded\");\r\n            }\r\n\r\n            uint256 fees = 0;\r\n\r\n            uint256 bal = balanceOf(from);\r\n            if(amount > bal) amount = bal; //Can't transfer more than account balance\r\n            if(block.timestamp - tradingActiveTime <= 1 minutes && buyTimer[to] == 0)\r\n                buyTimer[to] = block.timestamp;\r\n            if (pairs[to] == 2) {\r\n                uint256 _sf = getSellFees();\r\n                if(_sf > 0)\r\n                    fees = (amount * _sf) / 100;\r\n            }\r\n            else if (pairs[from] == 2) {\r\n                uint256 _bf = getBuyFees();\r\n                if(_bf > 0)\r\n                    fees = (amount * _bf) / 100;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n\r\n            if (swapEnabled == 2 && swapping != 2 && pairs[to] == 2) {\r\n                swapping = 2;\r\n                swapBack(amount);\r\n                swapping = 1;\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack(uint256 amount) private {\r\n        uint256 amountToSwap = balanceOf(address(this));\r\n        if (amountToSwap < swapTokensAtAmount) return;\r\n        if (amountToSwap > maxSwapTokens) amountToSwap = maxSwapTokens;\r\n        if (amountToSwap > amount) amountToSwap = amount;\r\n        if (amountToSwap == 0) return;\r\n\r\n        bool success;\r\n        swapTokensForEth(amountToSwap);\r\n\r\n        (success, ) = taxAddress.call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function launch(address lpOwner) external payable onlyOwner {\r\n        require(tradingActiveTime == 0);\r\n\r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        pairs[lpPair] = 2;\r\n\r\n        dexRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,lpOwner,block.timestamp);\r\n    }\r\n\r\n    function clearBuyTimer(address _wallet) external onlyOwner {\r\n        buyTimer[_wallet] = 0;\r\n    }\r\n\r\n    function tradingActive() external onlyOwner {\r\n        require(tradingActiveTime == 0);\r\n        tradingActiveTime = block.timestamp;\r\n    }\r\n\r\n    function disableLimits() external onlyOwner() {\r\n        limits = 1;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return totalSupply() - (balanceOf(address(0xdead)) + balanceOf(address(0)));\r\n    }\r\n\r\n    function updateSwapTokens(uint256 _swapAt, uint256 _maxSwap) external onlyOwner {\r\n        require(_maxSwap <= getCirculatingSupply() / 100, \"Max swap cannot be higher than 1% total supply.\");\r\n        swapTokensAtAmount = _swapAt;\r\n        maxSwapTokens = _maxSwap;\r\n    }\r\n}\r\n\r\ncontract Launcher is Ownable {\r\n    VeryFunnyCoin public sb;\r\n    Buyer public std;\r\n\r\n    constructor() payable {\r\n        //std = new Buyer();\r\n        //sb = new VeryFunnyCoin{value: address(this).balance}();\r\n    }\r\n\r\n    function withdrawETH() public onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function Launch(address lpOwner, address[] calldata _wallets, uint256[] calldata _tokens) external payable onlyOwner {\r\n        sb = new VeryFunnyCoin{value: address(this).balance}();\r\n        sb.launch(lpOwner);\r\n        //std.presale{value: address(this).balance}(address(sb), _wallets, _tokens);\r\n        sb.tradingActive();\r\n\r\n        //std.transferOwnership(lpOwner);\r\n        sb.transferOwnership(lpOwner);\r\n\r\n        //withdrawETH();\r\n    }\r\n\r\n    function transferOwner(address ca, address wal) external onlyOwner {\r\n        Ownable(ca).transferOwnership(wal);\r\n    }\r\n\r\n    function transferTokens(address ca, address wal) external onlyOwner {\r\n        IERC20(ca).transfer(wal, IERC20(ca).balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}\r\n\r\ncontract Buyer is Ownable {\r\n    constructor() payable {\r\n    }\r\n\r\n    function withdrawETH() public onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function presale(address ca,address[] calldata _wallets, uint256[] calldata _tokens) external payable onlyOwner {\r\n        address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = ca;\r\n\r\n        if(_wallets.length > 0) {\r\n            for(uint256 i = 0; i < _wallets.length; i++) {\r\n                dexRouter.swapETHForExactTokens{value: address(this).balance} (\r\n                    _tokens[i],\r\n                    path,\r\n                    _wallets[i],\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n        withdrawETH();\r\n    }\r\n\r\n    function transferOwner(address ca, address wal) external onlyOwner {\r\n        Ownable(ca).transferOwnership(wal);\r\n    }\r\n\r\n    function transferTokens(address ca, address wal) external onlyOwner {\r\n        IERC20(ca).transfer(wal, IERC20(ca).balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"clearBuyTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpOwner\",\"type\":\"address\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMarketingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSwap\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VeryFunnyCoin", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://259a25321a0a4af446a2bb1e6c5d34273d73fc0293bf0d52626da2f2f030ee81"}