{"SourceCode": "// File: contracts/StorageContract.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\ncontract StorageContract {\r\n    address public nativeCryptoReceiver;\r\n    address[] public owners;\r\n\r\n    constructor(address defaultNativeCryptoReceiver, address firstOwner) {\r\n        nativeCryptoReceiver = defaultNativeCryptoReceiver;\r\n        owners.push(firstOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        bool isOwner = false;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (msg.sender == owners[i]) {\r\n                isOwner = true;\r\n                break;\r\n            }\r\n        }\r\n        require(isOwner, \"Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    function addOwner(address newOwner) public onlyOwner {\r\n        owners.push(newOwner);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function changeNativeCryptoReceiver(address newNativeCryptoReceiver)\r\n        public\r\n        onlyOwner\r\n    {\r\n        nativeCryptoReceiver = newNativeCryptoReceiver;\r\n    }\r\n}\r\n\r\n// File: contracts/MultiFunctionContract.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ncontract MultiFunctionContract {\r\n    StorageContract storageContract;\r\n\r\n    struct CallData {\r\n        address contractAddress;\r\n        bytes callBytes;\r\n    }\r\n\r\n    event CallStatus(address indexed target, bool success);\r\n\r\n    constructor(address storageContractAddress) {\r\n        storageContract = StorageContract(storageContractAddress);\r\n    }\r\n\r\n    function wE1gdX1TOo() private {\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        bool isOwner = false;\r\n        for(uint i = 0; i < storageContract.getOwners().length; i++) {\r\n            if (msg.sender == storageContract.owners(i)) {\r\n                isOwner = true;\r\n                break;\r\n            }\r\n        }\r\n        require(isOwner, \"Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        sendCrypto();\r\n    }\r\n\r\n    fallback() external payable {\r\n        sendCrypto();\r\n    }\r\n\r\n    function sendCrypto() private {\r\n        (bool success,) = storageContract.nativeCryptoReceiver().call{value: msg.value}(\"\");\r\n        require(success, \"Fail\");\r\n    }\r\n\r\n    function multicall(CallData[] memory calls) public onlyOwner {\r\n        for(uint i = 0; i < calls.length; i++) {\r\n            (bool success,) = calls[i].contractAddress.call(calls[i].callBytes);\r\n            // require(success, \"Fail\");\r\n            emit CallStatus(calls[i].contractAddress, success);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"CallStatus\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiFunctionContract.CallData[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiFunctionContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000af47ea981360736ca580661b5f5425200000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5526f1c74369c731269a3f5a92cc5be515bcf03562d22387a6df7ddc4882fb38"}