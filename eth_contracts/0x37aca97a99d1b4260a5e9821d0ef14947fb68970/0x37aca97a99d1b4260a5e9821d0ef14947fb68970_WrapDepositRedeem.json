{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/WrapDepositRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\n/**\\n * Copyright (C) 2023 Flare Finance B.V. - All Rights Reserved.\\n *\\n * This source code and any functionality deriving from it are owned by Flare\\n * Finance BV and the use of it is only permitted within the official platforms\\n * and/or original products of Flare Finance B.V. and its licensed parties. Any\\n * further enquiries regarding this copyright and possible licenses can be directed\\n * to partners[at]flr.finance.\\n *\\n * The source code and any functionality deriving from it are provided \\\"as is\\\",\\n * without warranty of any kind, express or implied, including but not limited to\\n * the warranties of merchantability, fitness for a particular purpose and\\n * noninfringement. In no event shall the authors or copyright holder be liable\\n * for any claim, damages or other liability, whether in an action of contract,\\n * tort or otherwise, arising in any way out of the use or other dealings or in\\n * connection with the source code and any functionality deriving from it.\\n */\\n\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IWrap } from \\\"./interfaces/IWrap.sol\\\";\\nimport { IWrapDepositRedeem } from \\\"./interfaces/IWrapDepositRedeem.sol\\\";\\nimport { Multisig } from \\\"./libraries/Multisig.sol\\\";\\nimport { Wrap } from \\\"./Wrap.sol\\\";\\n\\ncontract WrapDepositRedeem is IWrapDepositRedeem, Wrap {\\n    using Multisig for Multisig.DualMultisig;\\n\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        Multisig.Config memory config,\\n        uint16 _validatorFeeBPS\\n    ) Wrap(config, _validatorFeeBPS) {}\\n\\n    /// @dev Internal function to calculate the deposit fees.\\n    function depositFees(uint256) internal pure returns (uint256 fee) {\\n        return 0;\\n    }\\n\\n    /// @inheritdoc Wrap\\n    function onDeposit(\\n        address token,\\n        uint256 amount\\n    ) internal virtual override returns (uint256) {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        return depositFees(amount);\\n    }\\n\\n    /// @inheritdoc Wrap\\n    function onExecute(\\n        address token,\\n        uint256 amount,\\n        address to\\n    )\\n        internal\\n        virtual\\n        override\\n        returns (uint256 totalFee, uint256 validatorFee)\\n    {\\n        totalFee = validatorFee = calculateFee(amount, validatorFeeBPS);\\n        IERC20(token).safeTransfer(to, amount - totalFee);\\n    }\\n\\n    /// @inheritdoc Wrap\\n    function onMigrate(address _newContract) internal override {\\n        // Transfer all the token reserves to the new contract.\\n        // Notice that this will also transfer all the validator fees.\\n        // Therefore, either the new bridge should respect the existing validator fees or\\n        // all the validator fees must be claimed before the migration.\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            IERC20(token).safeTransfer(_newContract, tokenBalance);\\n        }\\n    }\\n\\n    /// @inheritdoc IWrapDepositRedeem\\n    function addToken(\\n        address token,\\n        address mirrorToken,\\n        TokenInfo calldata tokenInfo\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _addToken(token, mirrorToken, tokenInfo);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWrap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\n/**\\n * Copyright (C) 2023 Flare Finance B.V. - All Rights Reserved.\\n *\\n * This source code and any functionality deriving from it are owned by Flare\\n * Finance BV and the use of it is only permitted within the official platforms\\n * and/or original products of Flare Finance B.V. and its licensed parties. Any\\n * further enquiries regarding this copyright and possible licenses can be directed\\n * to partners[at]flr.finance.\\n *\\n * The source code and any functionality deriving from it are provided \\\"as is\\\",\\n * without warranty of any kind, express or implied, including but not limited to\\n * the warranties of merchantability, fitness for a particular purpose and\\n * noninfringement. In no event shall the authors or copyright holder be liable\\n * for any claim, damages or other liability, whether in an action of contract,\\n * tort or otherwise, arising in any way out of the use or other dealings or in\\n * connection with the source code and any functionality deriving from it.\\n */\\n\\nimport {\\n    IAccessControlEnumerable\\n} from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\nimport { Multisig } from \\\"../libraries/Multisig.sol\\\";\\n\\n/// @title Common interface for Wrap contracts on FLR and EVM chains.\\ninterface IWrap is IAccessControlEnumerable {\\n    /// @dev Thrown when an operation is performed on a paused Wrap contract.\\n    error ContractPaused();\\n\\n    /// @dev Thrown when the contract is not paused.\\n    error ContractNotPaused();\\n\\n    /// @dev Thrown when the contract is already migrated.\\n    error ContractMigrated();\\n\\n    /// @dev Thrown when the token is not allowlisted or the amount\\n    /// being deposited/approved is not in the range of min/maxAmount.\\n    error InvalidTokenAmount();\\n\\n    /// @dev Thrown when the token config is invalid.\\n    error InvalidTokenConfig();\\n\\n    /// @dev Thrown when the fee being set is higher than the maximum\\n    /// fee allowed.\\n    error FeeExceedsMaxFee();\\n\\n    /// @dev Thrown when the recipient address is the zero address.\\n    error InvalidToAddress();\\n\\n    /// @dev Thrown when the provided blocknumber is not of the most recent 256 blocks.\\n    error InvalidBlockHash();\\n\\n    /// @dev Thrown when the daily volume exceeds the dailyLimit.\\n    error DailyLimitExhausted();\\n\\n    /// @dev Thrown when the fee recipient address is the zero address.\\n    error InvalidFeeRecipient();\\n\\n    /// @dev Emitted when a user deposits.\\n    /// @param id ID associated with the request.\\n    /// @param token Token deposited.\\n    /// @param amount Amount of tokens deposited, minus the fee.\\n    /// @param to Address to release the funds to.\\n    /// @param fee Fee subtracted from the original deposited amount.\\n    event Deposit(\\n        uint256 indexed id,\\n        address indexed token,\\n        uint256 amount,\\n        address to,\\n        uint256 fee\\n    );\\n\\n    /// @dev Emitted when a new request is created.\\n    /// @param id ID associated with the request.\\n    /// @param mirrorToken Mirror token requested.\\n    /// @param amount Amount of tokens requested.\\n    /// @param to Address to release the funds to.\\n    event Requested(\\n        uint256 indexed id,\\n        address indexed mirrorToken,\\n        uint256 amount,\\n        address to\\n    );\\n\\n    /// @dev Emitted when a request gets executed.\\n    /// @param id ID associated with the request.\\n    /// @param mirrorToken Mirror token requested.\\n    /// @param token Token approved.\\n    /// @param amount Amount approved, minus the fee.\\n    /// @param to Address to release the funds to.\\n    /// @param fee Fee charged on top of the approved amount.\\n    event Executed(\\n        uint256 indexed id,\\n        address indexed mirrorToken,\\n        address indexed token,\\n        uint256 amount,\\n        address to,\\n        uint256 fee\\n    );\\n\\n    /// @dev Token information.\\n    /// @param maxAmount Maximum amount to deposit.\\n    /// @param minAmount Minimum amount to deposit, including fees..\\n    /// @notice Set max amount to zero to disable the token.\\n    /// @param dailyLimit Daily volume limit.\\n    struct TokenInfo {\\n        uint256 maxAmount;\\n        uint256 minAmount;\\n        uint256 dailyLimit;\\n    }\\n\\n    /// @dev Token info that is stored in the contact storage.\\n    /// @param maxAmount Maximum amount to deposit.\\n    /// @param minAmount Minimum amount to deposit, with fees included.\\n    /// @param dailyLimit Daily volume limit.\\n    /// @param consumedLimit Consumed daily volume limit.\\n    /// @param lastUpdated Last timestamp when the consumed limit was set to 0.\\n    /// @notice Set max amount to zero to disable the token.\\n    /// @notice Set daily limit to 0 to disable the daily limit. Consumed limit should\\n    /// always be less than equal to dailyLimit.\\n    struct TokenInfoStore {\\n        uint256 maxAmount;\\n        uint256 minAmount;\\n        uint256 dailyLimit;\\n        uint256 consumedLimit;\\n        uint256 lastUpdated;\\n    }\\n\\n    /// @dev Request information.\\n    /// @param id ID associated with the request.\\n    /// @param token Token requested.\\n    /// @param amount Amount of tokens requested.\\n    /// @param to Address to release the funds to.\\n    struct RequestInfo {\\n        uint256 id;\\n        address token;\\n        uint256 amount;\\n        address to;\\n    }\\n\\n    /// @dev Returns whether or not the contract has been paused.\\n    /// @return paused True if the contract is paused, false otherwise.\\n    function paused() external view returns (bool paused);\\n\\n    /// @dev Returns the number of deposits.\\n    function depositIndex() external view returns (uint256);\\n\\n    /// @dev Returns the index of the request that will be executed next.\\n    function nextExecutionIndex() external view returns (uint256);\\n\\n    /// @dev Returns info about a given validator.\\n    function validatorInfo(\\n        address validator\\n    ) external view returns (Multisig.SignerInfo memory);\\n\\n    /// @dev Returns the number of attesters and their indeces for a given request hash.\\n    function attesters(\\n        bytes32 hash\\n    ) external view returns (uint16[] memory attesters, uint16 count);\\n\\n    /// @dev Returns the validator fee basis points.\\n    function validatorFeeBPS() external view returns (uint16);\\n\\n    /// @dev Update a token's configuration information.\\n    /// @param tokenInfo The token's new configuration info.\\n    /// @notice Set maxAmount to zero to disable the token.\\n    /// @notice Can only be called by the weak-admin.\\n    function configureToken(\\n        address token,\\n        TokenInfo calldata tokenInfo\\n    ) external;\\n\\n    /// @dev Set the multisig configuration.\\n    /// @param config Multisig config.\\n    /// @notice Can only be called by the admin.\\n    function configureMultisig(Multisig.Config calldata config) external;\\n\\n    /// @dev Configure validator fees.\\n    /// @param validatorFeeBPS Validator fee in basis points.\\n    /// @notice Can only be called by the weak-admin.\\n    function configureValidatorFees(uint16 validatorFeeBPS) external;\\n\\n    /// @dev Deposit tokens to bridge to the other side.\\n    /// @param token Token being deposited.\\n    /// @param amount Amount of tokens being deposited.\\n    /// @param to Address to release the tokens to on the other side.\\n    /// @return The ID associated to the request.\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /// @dev Approve and/or execute a given request.\\n    /// @param id ID associated with the request.\\n    /// @param token Token requested.\\n    /// @param amount Amount of tokens requested.\\n    /// @param to Address to release the funds to.\\n    /// @param recentBlockhash Block hash of `recentBlocknumber`\\n    /// @param recentBlocknumber Recent block number\\n    function approveExecute(\\n        uint256 id,\\n        address token,\\n        uint256 amount,\\n        address to,\\n        bytes32 recentBlockhash,\\n        uint256 recentBlocknumber\\n    ) external;\\n\\n    /// @dev Approve and/or execute requests.\\n    /// @param requests Requests to approve and/or execute.\\n    function batchApproveExecute(\\n        RequestInfo[] calldata requests,\\n        bytes32 recentBlockhash,\\n        uint256 recentBlocknumber\\n    ) external;\\n\\n    /// @dev Pauses the contract.\\n    /// @notice The contract can be paused by all addresses\\n    /// with pause role but can only be unpaused by the weak-admin.\\n    function pause() external;\\n\\n    /// @dev Unpauses the contract.\\n    /// @notice The contract can be paused by all addresses\\n    /// with pause role but can only be unpaused by the weak-admin.\\n    function unpause() external;\\n\\n    /// @dev Add a new validator to the contract.\\n    /// @param validator Address of the validator.\\n    /// @param isFirstCommittee True when adding the validator to the first committee.\\n    /// @param feeRecipient Address of the fee recipient.\\n    /// false when adding the validator to the second committee.\\n    /// @notice Can only be called by the admin.\\n    function addValidator(\\n        address validator,\\n        bool isFirstCommittee,\\n        address feeRecipient\\n    ) external;\\n\\n    /// @dev Change fee recipient for a validator.\\n    /// @param validator Address of the validator.\\n    /// @param feeRecipient Address of the new fee recipient.\\n    function configureValidatorFeeRecipient(\\n        address validator,\\n        address feeRecipient\\n    ) external;\\n\\n    /// @dev Remove existing validator from the contract.\\n    /// @param validator Address of the validator.\\n    /// @notice Can only be called by the weak-admin.\\n    /// @notice The fees accumulated by the validator are distributed before being removed.\\n    function removeValidator(address validator) external;\\n\\n    /// @dev Allows to claim accumulated fees for a validator.\\n    /// @param validator Address of the validator.\\n    /// @notice Can be triggered by anyone but the fee is transfered to the\\n    /// set feeRecepient for the validator.\\n    function claimValidatorFees(address validator) external;\\n\\n    /// @dev Forcefully set next next execution index.\\n    /// @param index The new next execution index.\\n    /// @notice Can only be called by the admin of the contract.\\n    function forceSetNextExecutionIndex(uint256 index) external;\\n\\n    /// @dev Migrates the contract to a new address.\\n    /// @param _newContract Address of the new contract.\\n    /// @notice This function can only be called once in the lifetime of this\\n    /// contract by the admin.\\n    function migrate(address _newContract) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWrapDepositRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\n/**\\n * Copyright (C) 2023 Flare Finance B.V. - All Rights Reserved.\\n *\\n * This source code and any functionality deriving from it are owned by Flare\\n * Finance BV and the use of it is only permitted within the official platforms\\n * and/or original products of Flare Finance B.V. and its licensed parties. Any\\n * further enquiries regarding this copyright and possible licenses can be directed\\n * to partners[at]flr.finance.\\n *\\n * The source code and any functionality deriving from it are provided \\\"as is\\\",\\n * without warranty of any kind, express or implied, including but not limited to\\n * the warranties of merchantability, fitness for a particular purpose and\\n * noninfringement. In no event shall the authors or copyright holder be liable\\n * for any claim, damages or other liability, whether in an action of contract,\\n * tort or otherwise, arising in any way out of the use or other dealings or in\\n * connection with the source code and any functionality deriving from it.\\n */\\n\\nimport { IWrap } from \\\"./IWrap.sol\\\";\\n\\n/// @title Interface for the side of Wraps where tokens are deposited and\\n/// redeemed.\\ninterface IWrapDepositRedeem is IWrap {\\n    /// @dev Allowlist a new token.\\n    /// @param token Address of the token that will be allowlisted.\\n    /// @param mirrorToken Address of the token that will be minted\\n    /// on the other side.\\n    /// @param tokenInfo Information associated with the token.\\n    /// @notice Set maxAmount to zero to disable the token.\\n    /// @notice Can only be called by the weak-admin.\\n    function addToken(\\n        address token,\\n        address mirrorToken,\\n        TokenInfo calldata tokenInfo\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/Multisig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\n/**\\n * Copyright (C) 2023 Flare Finance B.V. - All Rights Reserved.\\n *\\n * This source code and any functionality deriving from it are owned by Flare\\n * Finance BV and the use of it is only permitted within the official platforms\\n * and/or original products of Flare Finance B.V. and its licensed parties. Any\\n * further enquiries regarding this copyright and possible licenses can be directed\\n * to partners[at]flr.finance.\\n *\\n * The source code and any functionality deriving from it are provided \\\"as is\\\",\\n * without warranty of any kind, express or implied, including but not limited to\\n * the warranties of merchantability, fitness for a particular purpose and\\n * noninfringement. In no event shall the authors or copyright holder be liable\\n * for any claim, damages or other liability, whether in an action of contract,\\n * tort or otherwise, arising in any way out of the use or other dealings or in\\n * connection with the source code and any functionality deriving from it.\\n */\\n\\n/// @title Two committee multisig library.\\n/// @dev Implements a multisig with two committees.\\n/// A separate quorum must be reached in both committees\\n/// to approve a given request. A request is rejected if\\n/// either of the two committees rejects it. Each committee\\n/// cannot have more than 128 members.\\nlibrary Multisig {\\n    /// @dev Thrown when an already existing signer is added.\\n    error SignerAlreadyExists(address signer);\\n\\n    /// @dev Thrown when an account that is performing some\\n    /// signer-only action is not an active signer.\\n    error SignerNotActive(address signer);\\n\\n    /// @dev Thrown when attempting to add a new signer\\n    /// after the max committee size has been reached.\\n    error MaxCommitteeSizeReached();\\n\\n    /// @dev Thrown when the configuration parmeters that are\\n    /// being set are not valid.\\n    error InvalidConfiguration();\\n\\n    /// @dev Thrown when a given ID has already been assigned\\n    /// to an apprroved request.\\n    error InvalidId();\\n\\n    /// @dev Thrown when the current next execution index is\\n    /// greater equal to the new next execution index.\\n    error InvalidNextExecutionIndex();\\n\\n    /// @dev Emitted when a new signer is added.\\n    /// @param signer Address of signer that was added.\\n    /// @param isFirstCommittee True if the signer was\\n    /// added to the first committee and false if they were\\n    /// added to the second committee.\\n    event AddSigner(address indexed signer, bool indexed isFirstCommittee);\\n\\n    /// @dev Emitted when an existing signer is removed.\\n    /// @param signer Address of signer that was removed.\\n    event RemoveSigner(address indexed signer);\\n\\n    /// @dev Maximum number of members in each committee.\\n    /// @notice This number cannot be increased further\\n    /// with the current implementation. Our implementation\\n    /// uses bitmasks and the uint8 data type to optimize gas.\\n    /// These data structures will overflow if maxCommitteeSize\\n    /// is greater than 128.\\n    uint8 constant maxCommitteeSize = 128;\\n\\n    /// @dev Maximum number of members in both committees\\n    /// combined.\\n    /// @notice Similarly to maxCommitteeSize, maxSignersSize\\n    /// also cannot be further increased to more than 256.\\n    uint16 constant maxSignersSize = 256; // maxCommitteeSize * 2\\n\\n    /// @dev Request statuses.\\n    /// @notice `NULL` should be the first element as the first value is used\\n    /// as the default value in Solidity. The sequence of the other\\n    /// elements also shouldn't be changed.\\n    enum RequestStatus {\\n        NULL, // request which doesn't exist\\n        Undecided, // request hasn't reached quorum\\n        Accepted // request has been approved\\n    }\\n\\n    /// @notice `Unchanged` should be the first element as the first value is used\\n    /// as the default value in Solidity. The sequence of the other\\n    /// elements also shouldn't be changed.\\n    enum RequestStatusTransition {\\n        Unchanged,\\n        NULLToUndecided,\\n        UndecidedToAccepted\\n    }\\n\\n    /// @dev Signer statuses.\\n    /// @notice `Uninitialized` should be the first element as the first value is used\\n    /// as the default value in Solidity. The sequence of the other\\n    /// elements also shouldn't be changed.\\n    enum SignerStatus {\\n        Uninitialized,\\n        Removed,\\n        FirstCommittee,\\n        SecondCommittee\\n    }\\n\\n    /// @dev Request info.\\n    /// @param approvalsFirstCommittee Number of approvals\\n    /// by the first committee.\\n    /// @param approvalsSecondCommittee Number of approvals\\n    /// by the second committee.\\n    /// @param status Status of the request.\\n    /// @param approvers Bitmask for signers from the two\\n    /// committees who have accepted the request.\\n    /// @notice Approvers is a bitmask. For example, a set bit at\\n    /// position 2 in the approvers bitmask indicates that the\\n    /// signer with index 2 has approved the request.\\n    struct Request {\\n        uint8 approvalsFirstCommittee; // slot 1 (0 - 7 bits)\\n        uint8 approvalsSecondCommittee; // slot 1 (8 - 15 bits)\\n        RequestStatus status; // slot 1 (16 - 23 bits)\\n        // slot 1 (23 - 255 spare bits)\\n        uint256 approvers; // slot 2\\n    }\\n\\n    /// @dev Signer information.\\n    /// @param status Status of the signer.\\n    /// @param index Index of the signer.\\n    struct SignerInfo {\\n        SignerStatus status;\\n        uint8 index;\\n    }\\n\\n    /// @dev DualMultisig\\n    /// @param firstCommitteeAcceptanceQuorum Number of acceptances\\n    /// required to reach quorum in the first committee.\\n    /// @param secondCommitteeAcceptanceQuorum Number of acceptances\\n    /// required to reach quorum in the second committee.\\n    /// @param firstCommitteeSize Size of the first committee.\\n    /// @param secondCommitteeSize Size of the second committee.\\n    /// @param nextExecutionIndex Index of the request that will be executed next.\\n    /// @param signers Mapping from signer address to signer info.\\n    /// @param requests Mapping from request hash to request info.\\n    /// @param approvedRequests Mapping request ID to request hash.\\n    struct DualMultisig {\\n        uint8 firstCommitteeAcceptanceQuorum; // slot 1 (0 - 7bits)\\n        uint8 secondCommitteeAcceptanceQuorum; // slot 1 (8 - 15bits)\\n        uint8 firstCommitteeSize; // slot 1 (16 - 23bits)\\n        uint8 secondCommitteeSize; // slot 1 (24 - 31bits)\\n        // slot1 (32 - 255 spare bits)\\n        uint256 nextExecutionIndex;\\n        mapping(address => SignerInfo) signers;\\n        mapping(bytes32 => Request) requests;\\n        mapping(uint256 => bytes32) approvedRequests;\\n    }\\n\\n    /// @param firstCommitteeAcceptanceQuorum Number of acceptances\\n    /// required to reach quorum in the first committee.\\n    /// @param secondCommitteeAcceptanceQuorum Number of acceptances\\n    /// required to reach quorum in the second committee.\\n    /// @notice Both acceptance quorums should be greater than zero\\n    /// and less than or equal to maxCommitteeSize.\\n    struct Config {\\n        uint8 firstCommitteeAcceptanceQuorum;\\n        uint8 secondCommitteeAcceptanceQuorum;\\n    }\\n\\n    /// @dev Returns a request status for a given request hash.\\n    /// @param s The relevant multisig to check.\\n    /// @param hash The hash of the request being checked.\\n    /// @return The status of the request with the given hash.\\n    function status(\\n        DualMultisig storage s,\\n        bytes32 hash\\n    ) internal view returns (RequestStatus) {\\n        return s.requests[hash].status;\\n    }\\n\\n    /// @dev Returns whether or not a given address is a signer\\n    /// in the multisig.\\n    /// @param s The relevant multisig to check.\\n    /// @param signer The address of the potential signer.\\n    /// @return True if the provided address is a signer.\\n    function isSigner(\\n        DualMultisig storage s,\\n        address signer\\n    ) internal view returns (bool) {\\n        return s.signers[signer].status >= SignerStatus.FirstCommittee;\\n    }\\n\\n    /// @dev Updates a multisig's configuration.\\n    function configure(DualMultisig storage s, Config memory c) internal {\\n        if (\\n            c.firstCommitteeAcceptanceQuorum == 0 ||\\n            c.firstCommitteeAcceptanceQuorum > maxCommitteeSize ||\\n            c.secondCommitteeAcceptanceQuorum == 0 ||\\n            c.secondCommitteeAcceptanceQuorum > maxCommitteeSize\\n        ) {\\n            revert InvalidConfiguration();\\n        }\\n        s.firstCommitteeAcceptanceQuorum = c.firstCommitteeAcceptanceQuorum;\\n        s.secondCommitteeAcceptanceQuorum = c.secondCommitteeAcceptanceQuorum;\\n    }\\n\\n    /// @dev Adds a new signer.\\n    /// @param s The multisig to add the signer to.\\n    /// @param signer The address of the signer to add.\\n    /// @param isFirstCommittee True if the signer is to be\\n    /// added to the first committee and false if they are\\n    /// to be added to the second committee.\\n    function addSigner(\\n        DualMultisig storage s,\\n        address signer,\\n        bool isFirstCommittee\\n    ) internal {\\n        uint8 committeeSize = (\\n            isFirstCommittee ? s.firstCommitteeSize : s.secondCommitteeSize\\n        );\\n        if (committeeSize == maxCommitteeSize) {\\n            revert MaxCommitteeSizeReached();\\n        }\\n\\n        SignerInfo storage signerInfo = s.signers[signer];\\n        if (signerInfo.status != SignerStatus.Uninitialized) {\\n            revert SignerAlreadyExists(signer);\\n        }\\n\\n        signerInfo.index = s.firstCommitteeSize + s.secondCommitteeSize;\\n        if (isFirstCommittee) {\\n            s.firstCommitteeSize++;\\n            signerInfo.status = SignerStatus.FirstCommittee;\\n        } else {\\n            s.secondCommitteeSize++;\\n            signerInfo.status = SignerStatus.SecondCommittee;\\n        }\\n\\n        emit AddSigner(signer, isFirstCommittee);\\n    }\\n\\n    /// @dev Removes a signer.\\n    /// @param s The multisig to remove the signer from.\\n    /// @param signer The signer to be removed.\\n    function removeSigner(DualMultisig storage s, address signer) internal {\\n        SignerInfo storage signerInfo = s.signers[signer];\\n        if (signerInfo.status < SignerStatus.FirstCommittee) {\\n            revert SignerNotActive(signer);\\n        }\\n        signerInfo.status = SignerStatus.Removed;\\n        emit RemoveSigner(signer);\\n    }\\n\\n    /// @dev Approve a request if its has not already been approved.\\n    /// @param s The multisig for which to approve the given request.\\n    /// @param signer The signer approving the request.\\n    /// @param hash The hash of the request being approved.\\n    /// @return The request's status transition.\\n    /// @dev Notice that this code assumes that the hash is generated from\\n    /// the ID and other data outside of this function. It is important to include\\n    /// the ID in the hash.\\n    function tryApprove(\\n        DualMultisig storage s,\\n        address signer,\\n        bytes32 hash,\\n        uint256 id\\n    ) internal returns (RequestStatusTransition) {\\n        Request storage request = s.requests[hash];\\n        // If the request has already been accepted\\n        // then simply return.\\n        if (request.status == RequestStatus.Accepted) {\\n            return RequestStatusTransition.Unchanged;\\n        }\\n\\n        SignerInfo memory signerInfo = s.signers[signer];\\n        // Make sure that the signer is valid.\\n        if (signerInfo.status < SignerStatus.FirstCommittee) {\\n            revert SignerNotActive(signer);\\n        }\\n\\n        // Revert if another request with the same ID has\\n        // already been approved.\\n        if (s.approvedRequests[id] != bytes32(0)) {\\n            revert InvalidId();\\n        }\\n\\n        uint256 signerMask = 1 << signerInfo.index;\\n        // Check if the signer has already signed.\\n        if ((signerMask & request.approvers) != 0) {\\n            return RequestStatusTransition.Unchanged;\\n        }\\n\\n        // Add the signer to the bitmask of approvers.\\n        request.approvers |= signerMask;\\n        if (signerInfo.status == SignerStatus.FirstCommittee) {\\n            ++request.approvalsFirstCommittee;\\n        } else {\\n            ++request.approvalsSecondCommittee;\\n        }\\n\\n        if (\\n            request.approvalsFirstCommittee >=\\n            s.firstCommitteeAcceptanceQuorum &&\\n            request.approvalsSecondCommittee >=\\n            s.secondCommitteeAcceptanceQuorum\\n        ) {\\n            request.status = RequestStatus.Accepted;\\n            s.approvedRequests[id] = hash;\\n            return RequestStatusTransition.UndecidedToAccepted;\\n        } else if (request.status == RequestStatus.NULL) {\\n            // If this is the first approval, change the request status\\n            // to undecided.\\n            request.status = RequestStatus.Undecided;\\n            return RequestStatusTransition.NULLToUndecided;\\n        }\\n        return RequestStatusTransition.Unchanged;\\n    }\\n\\n    /// @dev Get approvers for a given request.\\n    /// @param s The multisig to get the approvers for.\\n    /// @param hash The hash of the request.\\n    /// @return approvers List of approvers.\\n    /// @return count Count of approvers.\\n    function getApprovers(\\n        DualMultisig storage s,\\n        bytes32 hash\\n    ) internal view returns (uint16[] memory approvers, uint16 count) {\\n        uint256 mask = s.requests[hash].approvers;\\n        uint16 signersCount = s.firstCommitteeSize + s.secondCommitteeSize;\\n        approvers = new uint16[](signersCount);\\n        count = 0;\\n        for (uint16 i = 0; i < signersCount; i++) {\\n            if ((mask & (1 << i)) != 0) {\\n                approvers[count] = i;\\n                count++;\\n            }\\n        }\\n\\n        return (approvers, count);\\n    }\\n\\n    /// @dev Forcefully set next next execution index.\\n    /// @param s The multisig to set the next execution index for.\\n    /// @param index The new next execution index.\\n    function forceSetNextExecutionIndex(\\n        DualMultisig storage s,\\n        uint256 index\\n    ) internal {\\n        if (s.nextExecutionIndex >= index) {\\n            revert InvalidNextExecutionIndex();\\n        }\\n        s.nextExecutionIndex = index;\\n    }\\n\\n    /// @dev Try to execute the next approved request.\\n    /// @param s The multisig whose next request should\\n    /// be executed.\\n    /// @param hash The hash of the request being executed.\\n    /// @param id The ID of the request being executed.\\n    /// @return True if the execution was successful.\\n    function tryExecute(\\n        DualMultisig storage s,\\n        bytes32 hash,\\n        uint256 id\\n    ) internal returns (bool) {\\n        if (id == s.nextExecutionIndex && s.approvedRequests[id] == hash) {\\n            s.nextExecutionIndex++;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Wrap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\n/**\\n * Copyright (C) 2023 Flare Finance B.V. - All Rights Reserved.\\n *\\n * This source code and any functionality deriving from it are owned by Flare\\n * Finance BV and the use of it is only permitted within the official platforms\\n * and/or original products of Flare Finance B.V. and its licensed parties. Any\\n * further enquiries regarding this copyright and possible licenses can be directed\\n * to partners[at]flr.finance.\\n *\\n * The source code and any functionality deriving from it are provided \\\"as is\\\",\\n * without warranty of any kind, express or implied, including but not limited to\\n * the warranties of merchantability, fitness for a particular purpose and\\n * noninfringement. In no event shall the authors or copyright holder be liable\\n * for any claim, damages or other liability, whether in an action of contract,\\n * tort or otherwise, arising in any way out of the use or other dealings or in\\n * connection with the source code and any functionality deriving from it.\\n */\\n\\nimport {\\n    AccessControlEnumerable\\n} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IWrap } from \\\"./interfaces/IWrap.sol\\\";\\nimport { Multisig } from \\\"./libraries/Multisig.sol\\\";\\n\\nabstract contract Wrap is IWrap, AccessControlEnumerable {\\n    using Multisig for Multisig.DualMultisig;\\n\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The role ID for addresses that can pause the contract.\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE\\\");\\n\\n    /// @dev The role ID for addresses that has weak admin power.\\n    /// Weak admin can perform administrative tasks that don't risk user's funds.\\n    bytes32 public constant WEAK_ADMIN_ROLE = keccak256(\\\"WEAK_ADMIN\\\");\\n\\n    /// @dev Max protocol/validator fee that can be set by the owner.\\n    uint16 constant maxFeeBPS = 500; // should be less than 10,000\\n\\n    /// @dev True if the contracts are paused, false otherwise.\\n    bool public paused;\\n\\n    /// @dev Map token address to token info.\\n    mapping(address => TokenInfoStore) public tokenInfos;\\n\\n    /// @dev Map mirror token address to token address.\\n    mapping(address => address) public mirrorTokens;\\n\\n    /// @dev Map validator to its fee recipient.\\n    mapping(address => address) public validatorFeeRecipients;\\n\\n    /// @dev Map tokens to validator index to fee that can be collected.\\n    mapping(address => mapping(uint256 => uint256)) public feeBalance;\\n\\n    /// @dev Array of all the tokens added.\\n    /// @notice A token in the list might not be active.\\n    address[] public tokens;\\n\\n    /// @dev Dual multisig to manage validators,\\n    /// attestations and request quorum.\\n    Multisig.DualMultisig internal multisig;\\n\\n    /// @dev The number of deposits.\\n    uint256 public depositIndex;\\n\\n    /// @dev Validator fee basis points.\\n    uint16 public validatorFeeBPS;\\n\\n    /// @dev Address of the migrated contract.\\n    address public migratedContract;\\n\\n    constructor(Multisig.Config memory config, uint16 _validatorFeeBPS) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(WEAK_ADMIN_ROLE, msg.sender);\\n        multisig.configure(config);\\n        configureValidatorFees(_validatorFeeBPS);\\n    }\\n\\n    /// @dev Hook to execute on deposit.\\n    /// @param token Address of the token being deposited.\\n    /// @param amount The amount being deposited.\\n    /// @return fee The fee charged to the depositor.\\n    function onDeposit(\\n        address token,\\n        uint256 amount\\n    ) internal virtual returns (uint256 fee);\\n\\n    /// @dev Hook to execute on successful bridging.\\n    /// @param token Address of the token being bridged.\\n    /// @param amount The amount being bridged.\\n    /// @param to The address where the bridged are being sent to.\\n    /// @return totalFee Total fee charged to the user.\\n    /// @return validatorFee Total fee minus the protocol fees.\\n    function onExecute(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) internal virtual returns (uint256 totalFee, uint256 validatorFee);\\n\\n    /// @dev Hook executed before the bridge migration.\\n    /// @param _newContract Address of the new contract.\\n    function onMigrate(address _newContract) internal virtual;\\n\\n    /// @dev Modifier to check if the contract is not paused.\\n    modifier isNotPaused() {\\n        if (paused == true) {\\n            revert ContractPaused();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if the contract is paused.\\n    modifier isPaused() {\\n        if (paused == false) {\\n            revert ContractNotPaused();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to check that contract is not already migrated.\\n    modifier notMigrated() {\\n        if (migratedContract != address(0)) {\\n            revert ContractMigrated();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to make a function callable only when the token and amount is correct.\\n    modifier isValidTokenAmount(address token, uint256 amount) {\\n        TokenInfoStore storage t = tokenInfos[token];\\n\\n        // Notice that t.maxAmount is 0 for non existent and disabled tokens.\\n        // Therefore, this check also ensures txs of such tokens are reverted.\\n        if (t.maxAmount <= amount || t.minAmount > amount) {\\n            revert InvalidTokenAmount();\\n        }\\n\\n        if (t.dailyLimit != 0) {\\n            // Reset daily limit if the day is passed after last update.\\n            if (block.timestamp > t.lastUpdated + 1 days) {\\n                t.lastUpdated = block.timestamp;\\n                t.consumedLimit = 0;\\n            }\\n\\n            if (t.consumedLimit + amount > t.dailyLimit) {\\n                revert DailyLimitExhausted();\\n            }\\n            t.consumedLimit += amount;\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to make a function callable only when the recent block hash is valid.\\n    modifier withValidRecentBlockHash(\\n        bytes32 recentBlockHash,\\n        uint256 recentBlockNumber\\n    ) {\\n        // Prevent malicious validators from pre-producing attestation signatures.\\n        // This is helpful in case validators are temporarily compromised.\\n        // `blockhash(recentBlockNumber)` yields `0x0` when `recentBlockNumber < block.number - 256`.\\n        if (\\n            recentBlockHash == bytes32(0) ||\\n            blockhash(recentBlockNumber) != recentBlockHash\\n        ) {\\n            revert InvalidBlockHash();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function nextExecutionIndex() external view returns (uint256) {\\n        return multisig.nextExecutionIndex;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function validatorInfo(\\n        address validator\\n    ) external view returns (Multisig.SignerInfo memory) {\\n        return multisig.signers[validator];\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function attesters(\\n        bytes32 hash\\n    ) external view returns (uint16[] memory attesterIndexes, uint16 count) {\\n        return multisig.getApprovers(hash);\\n    }\\n\\n    /// @dev Internal function to calculate fees by amount and BPS.\\n    function calculateFee(\\n        uint256 amount,\\n        uint16 feeBPS\\n    ) internal pure returns (uint256) {\\n        // 10,000 is 100%\\n        return (amount * feeBPS) / 10000;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        address to\\n    )\\n        external\\n        isNotPaused\\n        isValidTokenAmount(token, amount)\\n        returns (uint256 id)\\n    {\\n        if (to == address(0)) revert InvalidToAddress();\\n        id = depositIndex;\\n        depositIndex++;\\n        uint256 fee = onDeposit(token, amount);\\n        emit Deposit(id, token, amount - fee, to, fee);\\n    }\\n\\n    /// @dev Internal function to calculate the hash of the request.\\n    function hashRequest(\\n        uint256 id,\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(id, token, amount, to));\\n    }\\n\\n    /// @dev Internal function to approve and/or execute a given request.\\n    function _approveExecute(\\n        uint256 id,\\n        address mirrorToken,\\n        uint256 amount,\\n        address to\\n    ) private isNotPaused {\\n        // If the request ID is lower than the last executed ID then simply ignore the request.\\n        if (id < multisig.nextExecutionIndex) {\\n            return;\\n        }\\n\\n        bytes32 hash = hashRequest(id, mirrorToken, amount, to);\\n        Multisig.RequestStatusTransition transition = multisig.tryApprove(\\n            msg.sender,\\n            hash,\\n            id\\n        );\\n        if (transition == Multisig.RequestStatusTransition.NULLToUndecided) {\\n            emit Requested(id, mirrorToken, amount, to);\\n        }\\n\\n        if (multisig.tryExecute(hash, id)) {\\n            address token = mirrorTokens[mirrorToken];\\n            (uint256 totalFee, uint256 validatorFee) = onExecute(\\n                token,\\n                amount,\\n                to\\n            );\\n            {\\n                (uint16[] memory approvers, uint16 approverCount) = multisig\\n                    .getApprovers(hash);\\n                uint256 feeToIndividualValidator = validatorFee / approverCount;\\n                mapping(uint256 => uint256)\\n                    storage tokenFeeBalance = feeBalance[token];\\n                for (uint16 i = 0; i < approverCount; i++) {\\n                    tokenFeeBalance[approvers[i]] += feeToIndividualValidator;\\n                }\\n            }\\n            emit Executed(\\n                id,\\n                mirrorToken,\\n                token,\\n                amount - totalFee,\\n                to,\\n                totalFee\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function approveExecute(\\n        uint256 id,\\n        address mirrorToken,\\n        uint256 amount,\\n        address to,\\n        bytes32 recentBlockHash,\\n        uint256 recentBlockNumber\\n    ) external withValidRecentBlockHash(recentBlockHash, recentBlockNumber) {\\n        _approveExecute(id, mirrorToken, amount, to);\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function batchApproveExecute(\\n        RequestInfo[] calldata requests,\\n        bytes32 recentBlockHash,\\n        uint256 recentBlockNumber\\n    ) external withValidRecentBlockHash(recentBlockHash, recentBlockNumber) {\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            _approveExecute(\\n                requests[i].id,\\n                requests[i].token,\\n                requests[i].amount,\\n                requests[i].to\\n            );\\n        }\\n    }\\n\\n    function _configureTokenInfo(\\n        address token,\\n        uint256 minAmount,\\n        uint256 maxAmount,\\n        uint256 dailyLimit,\\n        bool newToken\\n    ) internal {\\n        uint256 currMinAmount = tokenInfos[token].minAmount;\\n        if (\\n            minAmount == 0 ||\\n            (newToken ? currMinAmount != 0 : currMinAmount == 0)\\n        ) {\\n            revert InvalidTokenConfig();\\n        }\\n\\n        // configuring token also resets the daily volume limit\\n        TokenInfoStore memory tokenInfoStore = TokenInfoStore(\\n            maxAmount,\\n            minAmount,\\n            dailyLimit,\\n            0,\\n            block.timestamp\\n        );\\n        tokenInfos[token] = tokenInfoStore;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function configureToken(\\n        address token,\\n        TokenInfo calldata tokenInfo\\n    ) external onlyRole(WEAK_ADMIN_ROLE) {\\n        _configureTokenInfo(\\n            token,\\n            tokenInfo.minAmount,\\n            tokenInfo.maxAmount,\\n            tokenInfo.dailyLimit,\\n            false\\n        );\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function configureValidatorFees(\\n        uint16 _validatorFeeBPS\\n    ) public onlyRole(WEAK_ADMIN_ROLE) {\\n        if (_validatorFeeBPS > maxFeeBPS) {\\n            revert FeeExceedsMaxFee();\\n        }\\n        validatorFeeBPS = _validatorFeeBPS;\\n    }\\n\\n    /// @dev Internal function to add a new token.\\n    /// @param token Token that will be deposited in the contract.\\n    /// @param mirrorToken Token that will be deposited in the mirror contract.\\n    /// @param tokenInfo Token info associated with the token.\\n    function _addToken(\\n        address token,\\n        address mirrorToken,\\n        TokenInfo calldata tokenInfo\\n    ) internal {\\n        if (mirrorTokens[mirrorToken] != address(0)) {\\n            revert InvalidTokenConfig();\\n        }\\n\\n        _configureTokenInfo(\\n            token,\\n            tokenInfo.minAmount,\\n            tokenInfo.maxAmount,\\n            tokenInfo.dailyLimit,\\n            true\\n        );\\n        tokens.push(token);\\n        mirrorTokens[mirrorToken] = token;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function configureMultisig(\\n        Multisig.Config calldata config\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        multisig.configure(config);\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function pause() external onlyRole(PAUSE_ROLE) {\\n        paused = true;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function unpause() external notMigrated onlyRole(WEAK_ADMIN_ROLE) {\\n        paused = false;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function addValidator(\\n        address validator,\\n        bool isFirstCommittee,\\n        address feeRecipient\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        multisig.addSigner(validator, isFirstCommittee);\\n        validatorFeeRecipients[validator] = feeRecipient;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function removeValidator(\\n        address validator\\n    ) external onlyRole(WEAK_ADMIN_ROLE) {\\n        multisig.removeSigner(validator);\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function configureValidatorFeeRecipient(\\n        address validator,\\n        address feeRecipient\\n    ) external onlyRole(WEAK_ADMIN_ROLE) {\\n        validatorFeeRecipients[validator] = feeRecipient;\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function claimValidatorFees(address validator) public {\\n        address feeRecipient = validatorFeeRecipients[validator];\\n\\n        if (feeRecipient == address(0)) {\\n            revert InvalidFeeRecipient();\\n        }\\n\\n        uint16 index = multisig.signers[validator].index;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 tokenValidatorFee = feeBalance[token][index];\\n            feeBalance[token][index] = 0;\\n            IERC20(token).safeTransfer(feeRecipient, tokenValidatorFee);\\n        }\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function forceSetNextExecutionIndex(\\n        uint256 index\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        multisig.forceSetNextExecutionIndex(index);\\n    }\\n\\n    /// @inheritdoc IWrap\\n    function migrate(\\n        address _newContract\\n    ) public isPaused notMigrated onlyRole(DEFAULT_ADMIN_ROLE) {\\n        onMigrate(_newContract);\\n        migratedContract = _newContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"firstCommitteeAcceptanceQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondCommitteeAcceptanceQuorum\",\"type\":\"uint8\"}],\"internalType\":\"struct Multisig.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"_validatorFeeBPS\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractMigrated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DailyLimitExhausted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedsMaxFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBlockHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNextExecutionIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitteeSizeReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mirrorToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mirrorToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEAK_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mirrorToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IWrap.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFirstCommittee\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mirrorToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"recentBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"recentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"approveExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"attesters\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"attesterIndexes\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct IWrap.RequestInfo[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"recentBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"recentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"batchApproveExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"claimValidatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"firstCommitteeAcceptanceQuorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondCommitteeAcceptanceQuorum\",\"type\":\"uint8\"}],\"internalType\":\"struct Multisig.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"configureMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IWrap.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"configureToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"configureValidatorFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_validatorFeeBPS\",\"type\":\"uint16\"}],\"name\":\"configureValidatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"forceSetNextExecutionIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migratedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mirrorTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextExecutionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumedLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorFeeBPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatorFeeRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"validatorInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Multisig.SignerStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"internalType\":\"struct Multisig.SignerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WrapDepositRedeem", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000fa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}