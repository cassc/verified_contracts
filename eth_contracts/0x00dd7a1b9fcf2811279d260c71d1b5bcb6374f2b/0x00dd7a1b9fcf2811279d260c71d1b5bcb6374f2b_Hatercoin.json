{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n\r\ncontract Hatercoin {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Hatercoin\";\r\n    string public constant symbol = \"HATER\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant maxSupply = 8000000000 * 10**18; // 8 billion tokens\r\n\r\n    address public owner;\r\n    uint256 private totalSupply;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) public allowances;\r\n    bool private locked;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor() {\r\n        owner = address(0); // No owner, contract renounced\r\n        totalSupply = maxSupply; // Set initial total supply to 8 billion tokens\r\n        balances[msg.sender] = maxSupply; // Mint all initial tokens to the contract deployer (you)\r\n        emit Transfer(address(0), msg.sender, maxSupply);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!locked, \"Reentrant call\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(\r\n            recipient != address(0),\r\n            \"Transfer to the zero address is not allowed\"\r\n        );\r\n        require(\r\n            amount <= balances[msg.sender],\r\n            \"Insufficient balance for transfer\"\r\n        );\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        balances[recipient] = balances[recipient].add(amount);\r\n\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) external nonReentrant {\r\n        uint256 senderBalance = balances[msg.sender]; // Reuse storage variable\r\n        require(senderBalance >= amount, \"Insufficient balance for burning\");\r\n\r\n        balances[msg.sender] = senderBalance.sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n\r\n        emit Transfer(msg.sender, address(0), amount);\r\n        emit Burn(msg.sender, amount);\r\n    }\r\n\r\n    \r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(amount <= balances[sender], \"Insufficient balance\");\r\n        require(amount <= allowances[sender][msg.sender], \"Allowance exceeded\");\r\n\r\n        uint256 senderBalance = balances[sender]; // Reuse storage variable\r\n        balances[sender] = senderBalance.sub(amount);\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(\r\n            amount\r\n        );\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function batchTransfer(\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external nonReentrant returns (bool) {\r\n        require(recipients.length == amounts.length, \"Invalid input length\");\r\n\r\n        uint256 senderBalance = balances[msg.sender]; // Reuse storage variable\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            address recipient = recipients[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            require(\r\n                recipient != address(0),\r\n                \"Transfer to the zero address is not allowed\"\r\n            );\r\n            require(\r\n                amount <= senderBalance,\r\n                \"Insufficient balance for transfer\"\r\n            );\r\n\r\n            senderBalance = senderBalance.sub(amount);\r\n            balances[recipient] = balances[recipient].add(amount);\r\n\r\n            emit Transfer(msg.sender, recipient, amount);\r\n        }\r\n\r\n        balances[msg.sender] = senderBalance; // Update sender balance once after batch transfer\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Hatercoin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc263e66827569d07077bde32cc60b615f354e77c864e573faae80178fe0bf6e"}