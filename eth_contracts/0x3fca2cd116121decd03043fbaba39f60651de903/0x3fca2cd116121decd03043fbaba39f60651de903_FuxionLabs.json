{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface ILERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function getAdmin() external view returns (address);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function increaseAllowance(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    ) external returns (bool);\r\n\r\n    function decreaseAllowance(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    ) external returns (bool);\r\n\r\n    function transferOutBlacklistedFunds(address[] calldata _from) external;\r\n\r\n    function setLosslessAdmin(address _newAdmin) external;\r\n\r\n    function transferRecoveryAdminOwnership(\r\n        address _candidate,\r\n        bytes32 _keyHash\r\n    ) external;\r\n\r\n    function acceptRecoveryAdminOwnership(bytes memory _key) external;\r\n\r\n    function proposeLosslessTurnOff() external;\r\n\r\n    function executeLosslessTurnOff() external;\r\n\r\n    function executeLosslessTurnOn() external;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    event NewAdmin(address indexed _newAdmin);\r\n    event NewRecoveryAdminProposal(address indexed _candidate);\r\n    event NewRecoveryAdmin(address indexed _newAdmin);\r\n    event LosslessTurnOffProposal(uint256 _turnOffDate);\r\n    event LosslessOff();\r\n    event LosslessOn();\r\n}\r\n\r\ninterface ILssGovernance {\r\n    function LSS_TEAM_INDEX() external view returns (uint256);\r\n\r\n    function TOKEN_OWNER_INDEX() external view returns (uint256);\r\n\r\n    function COMMITEE_INDEX() external view returns (uint256);\r\n\r\n    function committeeMembersCount() external view returns (uint256);\r\n\r\n    function walletDisputePeriod() external view returns (uint256);\r\n\r\n    function losslessStaking() external view returns (ILssStaking);\r\n\r\n    function losslessReporting() external view returns (ILssReporting);\r\n\r\n    function losslessController() external view returns (ILssController);\r\n\r\n    function isCommitteeMember(address _account) external view returns (bool);\r\n\r\n    function getIsVoted(\r\n        uint256 _reportId,\r\n        uint256 _voterIndex\r\n    ) external view returns (bool);\r\n\r\n    function getVote(\r\n        uint256 _reportId,\r\n        uint256 _voterIndex\r\n    ) external view returns (bool);\r\n\r\n    function isReportSolved(uint256 _reportId) external view returns (bool);\r\n\r\n    function reportResolution(uint256 _reportId) external view returns (bool);\r\n\r\n    function getAmountReported(\r\n        uint256 _reportId\r\n    ) external view returns (uint256);\r\n\r\n    function setDisputePeriod(uint256 _timeFrame) external;\r\n\r\n    function addCommitteeMembers(address[] memory _members) external;\r\n\r\n    function removeCommitteeMembers(address[] memory _members) external;\r\n\r\n    function losslessVote(uint256 _reportId, bool _vote) external;\r\n\r\n    function tokenOwnersVote(uint256 _reportId, bool _vote) external;\r\n\r\n    function committeeMemberVote(uint256 _reportId, bool _vote) external;\r\n\r\n    function resolveReport(uint256 _reportId) external;\r\n\r\n    function proposeWallet(uint256 _reportId, address wallet) external;\r\n\r\n    function rejectWallet(uint256 _reportId) external;\r\n\r\n    function retrieveFunds(uint256 _reportId) external;\r\n\r\n    function retrieveCompensation() external;\r\n\r\n    function claimCommitteeReward(uint256 _reportId) external;\r\n\r\n    function setCompensationAmount(uint256 _amount) external;\r\n\r\n    function losslessClaim(uint256 _reportId) external;\r\n\r\n    function extaordinaryRetrieval(\r\n        address[] calldata _address,\r\n        ILERC20 _token\r\n    ) external;\r\n\r\n    event NewCommitteeMembers(address[] _members);\r\n    event CommitteeMembersRemoval(address[] _members);\r\n    event LosslessTeamPositiveVote(uint256 indexed _reportId);\r\n    event LosslessTeamNegativeVote(uint256 indexed _reportId);\r\n    event TokenOwnersPositiveVote(uint256 indexed _reportId);\r\n    event TokenOwnersNegativeVote(uint256 indexed _reportId);\r\n    event CommitteeMemberPositiveVote(\r\n        uint256 indexed _reportId,\r\n        address indexed _member\r\n    );\r\n    event CommitteeMemberNegativeVote(\r\n        uint256 indexed _reportId,\r\n        address indexed _member\r\n    );\r\n    event ReportResolve(uint256 indexed _reportId, bool indexed _resolution);\r\n    event WalletProposal(uint256 indexed _reportId, address indexed _wallet);\r\n    event CommitteeMemberClaim(\r\n        uint256 indexed _reportId,\r\n        address indexed _member,\r\n        uint256 indexed _amount\r\n    );\r\n    event CommitteeMajorityReach(\r\n        uint256 indexed _reportId,\r\n        bool indexed _result\r\n    );\r\n    event NewDisputePeriod(uint256 indexed _newPeriod);\r\n    event WalletRejection(uint256 indexed _reportId);\r\n    event FundsRetrieval(uint256 indexed _reportId, uint256 indexed _amount);\r\n    event CompensationRetrieval(\r\n        address indexed _wallet,\r\n        uint256 indexed _amount\r\n    );\r\n    event LosslessClaim(\r\n        ILERC20 indexed _token,\r\n        uint256 indexed _reportID,\r\n        uint256 indexed _amount\r\n    );\r\n    event ExtraordinaryProposalAccept(ILERC20 indexed _token);\r\n}\r\n\r\ninterface ILssStaking {\r\n    function stakingToken() external returns (ILERC20);\r\n\r\n    function losslessReporting() external returns (ILssReporting);\r\n\r\n    function losslessController() external returns (ILssController);\r\n\r\n    function losslessGovernance() external returns (ILssGovernance);\r\n\r\n    function stakingAmount() external returns (uint256);\r\n\r\n    function getVersion() external pure returns (uint256);\r\n\r\n    function getIsAccountStaked(\r\n        uint256 _reportId,\r\n        address _account\r\n    ) external view returns (bool);\r\n\r\n    function getStakerCoefficient(\r\n        uint256 _reportId,\r\n        address _address\r\n    ) external view returns (uint256);\r\n\r\n    function stakerClaimableAmount(\r\n        uint256 _reportId\r\n    ) external view returns (uint256);\r\n\r\n    function reportCoefficient(\r\n        uint256 _reportId\r\n    ) external view returns (uint256);\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setLssReporting(ILssReporting _losslessReporting) external;\r\n\r\n    function setStakingToken(ILERC20 _stakingToken) external;\r\n\r\n    function setLosslessGovernance(ILssGovernance _losslessGovernance) external;\r\n\r\n    function setStakingAmount(uint256 _stakingAmount) external;\r\n\r\n    function stake(uint256 _reportId) external;\r\n\r\n    function stakerClaim(uint256 _reportId) external;\r\n\r\n    event NewStake(\r\n        ILERC20 indexed _token,\r\n        address indexed _account,\r\n        uint256 indexed _reportId\r\n    );\r\n    event StakerClaim(\r\n        address indexed _staker,\r\n        ILERC20 indexed _token,\r\n        uint256 indexed _reportID,\r\n        uint256 _amount\r\n    );\r\n    event NewStakingAmount(uint256 indexed _newAmount);\r\n    event NewStakingToken(ILERC20 indexed _newToken);\r\n    event NewReportingContract(ILssReporting indexed _newContract);\r\n    event NewGovernanceContract(ILssGovernance indexed _newContract);\r\n}\r\n\r\ninterface ILssReporting {\r\n    function reporterReward() external returns (uint256);\r\n\r\n    function losslessReward() external returns (uint256);\r\n\r\n    function stakersReward() external returns (uint256);\r\n\r\n    function committeeReward() external returns (uint256);\r\n\r\n    function reportLifetime() external view returns (uint256);\r\n\r\n    function reportingAmount() external returns (uint256);\r\n\r\n    function reportCount() external returns (uint256);\r\n\r\n    function stakingToken() external returns (ILERC20);\r\n\r\n    function losslessController() external returns (ILssController);\r\n\r\n    function losslessGovernance() external returns (ILssGovernance);\r\n\r\n    function getVersion() external pure returns (uint256);\r\n\r\n    function getRewards()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _reporter,\r\n            uint256 _lossless,\r\n            uint256 _committee,\r\n            uint256 _stakers\r\n        );\r\n\r\n    function report(\r\n        ILERC20 _token,\r\n        address _account\r\n    ) external returns (uint256);\r\n\r\n    function reporterClaimableAmount(\r\n        uint256 _reportId\r\n    ) external view returns (uint256);\r\n\r\n    function getReportInfo(\r\n        uint256 _reportId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address _reporter,\r\n            address _reportedAddress,\r\n            address _secondReportedAddress,\r\n            uint256 _reportTimestamps,\r\n            ILERC20 _reportTokens,\r\n            bool _secondReports,\r\n            bool _reporterClaimStatus\r\n        );\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setStakingToken(ILERC20 _stakingToken) external;\r\n\r\n    function setLosslessGovernance(ILssGovernance _losslessGovernance) external;\r\n\r\n    function setReportingAmount(uint256 _reportingAmount) external;\r\n\r\n    function setReporterReward(uint256 _reward) external;\r\n\r\n    function setLosslessReward(uint256 _reward) external;\r\n\r\n    function setStakersReward(uint256 _reward) external;\r\n\r\n    function setCommitteeReward(uint256 _reward) external;\r\n\r\n    function setReportLifetime(uint256 _lifetime) external;\r\n\r\n    function secondReport(uint256 _reportId, address _account) external;\r\n\r\n    function reporterClaim(uint256 _reportId) external;\r\n\r\n    function retrieveCompensation(address _adr, uint256 _amount) external;\r\n\r\n    event ReportSubmission(\r\n        ILERC20 indexed _token,\r\n        address indexed _account,\r\n        uint256 indexed _reportId\r\n    );\r\n    event SecondReportSubmission(\r\n        ILERC20 indexed _token,\r\n        address indexed _account,\r\n        uint256 indexed _reportId\r\n    );\r\n    event NewReportingAmount(uint256 indexed _newAmount);\r\n    event NewStakingToken(ILERC20 indexed _token);\r\n    event NewGovernanceContract(ILssGovernance indexed _adr);\r\n    event NewReporterReward(uint256 indexed _newValue);\r\n    event NewLosslessReward(uint256 indexed _newValue);\r\n    event NewStakersReward(uint256 indexed _newValue);\r\n    event NewCommitteeReward(uint256 indexed _newValue);\r\n    event NewReportLifetime(uint256 indexed _newValue);\r\n    event ReporterClaim(\r\n        address indexed _reporter,\r\n        uint256 indexed _reportId,\r\n        uint256 indexed _amount\r\n    );\r\n    event CompensationRetrieve(address indexed _adr, uint256 indexed _amount);\r\n}\r\n\r\ninterface ProtectionStrategy {\r\n    function isTransferAllowed(\r\n        address token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface ILssController {\r\n    // function getLockedAmount(ILERC20 _token, address _account)  returns (uint256);\r\n    // function getAvailableAmount(ILERC20 _token, address _account) external view returns (uint256 amount);\r\n    function retrieveBlacklistedFunds(\r\n        address[] calldata _addresses,\r\n        ILERC20 _token,\r\n        uint256 _reportId\r\n    ) external returns (uint256);\r\n\r\n    function whitelist(address _adr) external view returns (bool);\r\n\r\n    function dexList(address _dexAddress) external returns (bool);\r\n\r\n    function blacklist(address _adr) external view returns (bool);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function pauseAdmin() external view returns (address);\r\n\r\n    function recoveryAdmin() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function losslessStaking() external view returns (ILssStaking);\r\n\r\n    function losslessReporting() external view returns (ILssReporting);\r\n\r\n    function losslessGovernance() external view returns (ILssGovernance);\r\n\r\n    function dexTranferThreshold() external view returns (uint256);\r\n\r\n    function settlementTimeLock() external view returns (uint256);\r\n\r\n    function extraordinaryRetrievalProposalPeriod()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setAdmin(address _newAdmin) external;\r\n\r\n    function setRecoveryAdmin(address _newRecoveryAdmin) external;\r\n\r\n    function setPauseAdmin(address _newPauseAdmin) external;\r\n\r\n    function setSettlementTimeLock(uint256 _newTimelock) external;\r\n\r\n    function setDexTransferThreshold(uint256 _newThreshold) external;\r\n\r\n    function setDexList(address[] calldata _dexList, bool _value) external;\r\n\r\n    function setWhitelist(address[] calldata _addrList, bool _value) external;\r\n\r\n    function addToBlacklist(address _adr) external;\r\n\r\n    function resolvedNegatively(address _adr) external;\r\n\r\n    function setStakingContractAddress(ILssStaking _adr) external;\r\n\r\n    function setReportingContractAddress(ILssReporting _adr) external;\r\n\r\n    function setGovernanceContractAddress(ILssGovernance _adr) external;\r\n\r\n    function setTokenMintLimit(ILERC20 _token, uint256 limit) external;\r\n\r\n    function setTokenMintPeriod(ILERC20 _token, uint256 _period) external;\r\n\r\n    function setTokenBurnLimit(ILERC20 _token, uint256 _limit) external;\r\n\r\n    function setTokenBurnPeriod(ILERC20 _token, uint256 _period) external;\r\n\r\n    function proposeNewSettlementPeriod(\r\n        ILERC20 _token,\r\n        uint256 _seconds\r\n    ) external;\r\n\r\n    function executeNewSettlementPeriod(ILERC20 _token) external;\r\n\r\n    function activateEmergency(ILERC20 _token) external;\r\n\r\n    function deactivateEmergency(ILERC20 _token) external;\r\n\r\n    function setGuardian(address _newGuardian) external;\r\n\r\n    function removeProtectedAddress(\r\n        ILERC20 _token,\r\n        address _protectedAddresss\r\n    ) external;\r\n\r\n    function beforeTransfer(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function beforeTransferFrom(\r\n        address _msgSender,\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function beforeApprove(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function beforeIncreaseAllowance(\r\n        address _msgSender,\r\n        address _spender,\r\n        uint256 _addedValue\r\n    ) external;\r\n\r\n    function beforeDecreaseAllowance(\r\n        address _msgSender,\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    ) external;\r\n\r\n    function beforeMint(address _to, uint256 _amount) external;\r\n\r\n    function beforeBurn(address _account, uint256 _amount) external;\r\n\r\n    function afterTransfer(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function setProtectedAddress(\r\n        ILERC20 _token,\r\n        address _protectedAddress,\r\n        ProtectionStrategy _strategy\r\n    ) external;\r\n\r\n    function setExtraordinaryRetrievalPeriod(uint256 _newPEriod) external;\r\n\r\n    function extraordinaryRetrieval(\r\n        ILERC20 _token,\r\n        address[] calldata addresses,\r\n        uint256 fundsToRetrieve\r\n    ) external;\r\n\r\n    event AdminChange(address indexed _newAdmin);\r\n    event RecoveryAdminChange(address indexed _newAdmin);\r\n    event PauseAdminChange(address indexed _newAdmin);\r\n    event GuardianSet(\r\n        address indexed _oldGuardian,\r\n        address indexed _newGuardian\r\n    );\r\n    event NewProtectedAddress(\r\n        ILERC20 indexed _token,\r\n        address indexed _protectedAddress,\r\n        address indexed _strategy\r\n    );\r\n    event RemovedProtectedAddress(\r\n        ILERC20 indexed _token,\r\n        address indexed _protectedAddress\r\n    );\r\n    event NewSettlementPeriodProposal(ILERC20 indexed _token, uint256 _seconds);\r\n    event SettlementPeriodChange(\r\n        ILERC20 indexed _token,\r\n        uint256 _proposedTokenLockTimeframe\r\n    );\r\n    event NewSettlementTimelock(uint256 indexed _timelock);\r\n    event NewDexThreshold(uint256 indexed _newThreshold);\r\n    event NewDex(address indexed _dexAddress);\r\n    event DexRemoval(address indexed _dexAddress);\r\n    event NewWhitelistedAddress(address indexed _whitelistAdr);\r\n    event WhitelistedAddressRemoval(address indexed _whitelistAdr);\r\n    event NewBlacklistedAddress(address indexed _blacklistedAddres);\r\n    event AccountBlacklistRemoval(address indexed _adr);\r\n    event NewStakingContract(ILssStaking indexed _newAdr);\r\n    event NewReportingContract(ILssReporting indexed _newAdr);\r\n    event NewGovernanceContract(ILssGovernance indexed _newAdr);\r\n    event EmergencyActive(ILERC20 indexed _token);\r\n    event EmergencyDeactivation(ILERC20 indexed _token);\r\n    event NewMint(\r\n        ILERC20 indexed token,\r\n        address indexed account,\r\n        uint256 indexed amount\r\n    );\r\n    event NewMintLimit(ILERC20 indexed token, uint256 indexed limit);\r\n    event NewMintPeriod(ILERC20 indexed token, uint256 indexed period);\r\n    event NewBurn(\r\n        ILERC20 indexed token,\r\n        address indexed account,\r\n        uint256 indexed amount\r\n    );\r\n    event NewBurnLimit(ILERC20 indexed token, uint256 indexed limit);\r\n    event NewBurnPeriod(ILERC20 indexed token, uint256 indexed period);\r\n    event NewExtraordinaryPeriod(\r\n        uint256 indexed extraordinaryRetrievalProposalPeriod\r\n    );\r\n}\r\n\r\ncontract LERC20 is Context, ILERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    address public recoveryAdmin;\r\n    address private recoveryAdminCandidate;\r\n    bytes32 private recoveryAdminKeyHash;\r\n    address public override admin;\r\n    uint256 public timelockPeriod;\r\n    uint256 public losslessTurnOffTimestamp;\r\n    bool public isLosslessOn = true;\r\n    ILssController public lossless;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address admin_,\r\n        address recoveryAdmin_,\r\n        uint256 timelockPeriod_,\r\n        address lossless_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        admin = admin_;\r\n        recoveryAdmin = recoveryAdmin_;\r\n        recoveryAdminCandidate = address(0);\r\n        recoveryAdminKeyHash = \"\";\r\n        timelockPeriod = timelockPeriod_;\r\n        losslessTurnOffTimestamp = 0;\r\n        lossless = ILssController(lossless_);\r\n    }\r\n\r\n    // --- LOSSLESS modifiers ---\r\n\r\n    modifier lssAprove(address spender, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeApprove(_msgSender(), spender, amount);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier lssTransfer(address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier lssTransferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransferFrom(\r\n                _msgSender(),\r\n                sender,\r\n                recipient,\r\n                amount\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeDecreaseAllowance(\r\n                _msgSender(),\r\n                spender,\r\n                subtractedValue\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyRecoveryAdmin() {\r\n        require(\r\n            _msgSender() == recoveryAdmin,\r\n            \"LERC20: Must be recovery admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // --- LOSSLESS management ---\r\n    function transferOutBlacklistedFunds(\r\n        address[] calldata from\r\n    ) external override {\r\n        require(\r\n            _msgSender() == address(lossless),\r\n            \"LERC20: Only lossless contract\"\r\n        );\r\n        require(isLosslessOn, \"LERC20: Lossless is off\");\r\n\r\n        uint256 fromLength = from.length;\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint256 i = 0; i < fromLength; i++) {\r\n            address fromAddress = from[i];\r\n            uint256 fromBalance = _balances[fromAddress];\r\n            _balances[fromAddress] = 0;\r\n            totalAmount += fromBalance;\r\n            emit Transfer(fromAddress, address(lossless), fromBalance);\r\n        }\r\n\r\n        _balances[address(lossless)] += totalAmount;\r\n    }\r\n\r\n    function setLosslessAdmin(\r\n        address newAdmin\r\n    ) external override onlyRecoveryAdmin {\r\n        require(newAdmin != admin, \"LERC20: Cannot set same address\");\r\n        emit NewAdmin(newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function transferRecoveryAdminOwnership(\r\n        address candidate,\r\n        bytes32 keyHash\r\n    ) external override onlyRecoveryAdmin {\r\n        recoveryAdminCandidate = candidate;\r\n        recoveryAdminKeyHash = keyHash;\r\n        emit NewRecoveryAdminProposal(candidate);\r\n    }\r\n\r\n    function acceptRecoveryAdminOwnership(bytes memory key) external override {\r\n        require(\r\n            _msgSender() == recoveryAdminCandidate,\r\n            \"LERC20: Must be canditate\"\r\n        );\r\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\r\n        emit NewRecoveryAdmin(recoveryAdminCandidate);\r\n        recoveryAdmin = recoveryAdminCandidate;\r\n        recoveryAdminCandidate = address(0);\r\n    }\r\n\r\n    function proposeLosslessTurnOff() external override onlyRecoveryAdmin {\r\n        require(\r\n            losslessTurnOffTimestamp == 0,\r\n            \"LERC20: TurnOff already proposed\"\r\n        );\r\n        require(isLosslessOn, \"LERC20: Lossless already off\");\r\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n        emit LosslessTurnOffProposal(losslessTurnOffTimestamp);\r\n    }\r\n\r\n    function executeLosslessTurnOff() external override onlyRecoveryAdmin {\r\n        require(losslessTurnOffTimestamp != 0, \"LERC20: TurnOff not proposed\");\r\n        require(\r\n            losslessTurnOffTimestamp <= block.timestamp,\r\n            \"LERC20: Time lock in progress\"\r\n        );\r\n        isLosslessOn = false;\r\n        losslessTurnOffTimestamp = 0;\r\n        emit LosslessOff();\r\n    }\r\n\r\n    function executeLosslessTurnOn() external override onlyRecoveryAdmin {\r\n        require(!isLosslessOn, \"LERC20: Lossless already on\");\r\n        losslessTurnOffTimestamp = 0;\r\n        isLosslessOn = true;\r\n        emit LosslessOn();\r\n    }\r\n\r\n    function getAdmin() public view virtual override returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    // --- ERC20 methods ---\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override lssTransfer(recipient, amount) returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override lssAprove(spender, amount) returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        lssTransferFrom(sender, recipient, amount)\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"LERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        lssIncreaseAllowance(spender, addedValue)\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        lssDecreaseAllowance(spender, subtractedValue)\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"LERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"LERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"LERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Cast(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nerror FUXION__MaxWalletReached(address wallet, uint triedBalance);\r\nerror FUXION__Blacklisted();\r\nerror FUXION__InvalidThreshold();\r\nerror FUXION__TradingNotEnabled();\r\nerror FUXION__NotAllowed();\r\nerror FUXION__InvalidTaxAmount();\r\nerror FUXION__InvalidMaxWallet();\r\n\r\ncontract FuxionLabs is Ownable, LERC20 {\r\n    //---------------------------------------------------------------------------------\r\n    // Structs\r\n    //---------------------------------------------------------------------------------\r\n\r\n    struct SnapshotInfo {\r\n        uint tier1Total; // Tier 1 eligible balance\r\n        uint tier2Total; // Tier 2 eligible balance\r\n        uint snapshotTakenTimestamp; // Timestamp of the snapshot\r\n    }\r\n    //---------------------------------------------------------------------------------\r\n    // State Variables\r\n    //---------------------------------------------------------------------------------\r\n\r\n    mapping(address user => mapping(uint snapId => uint amount))\r\n        public snapshotInfo;\r\n    mapping(address user => uint lastSnapshotId) public lastSnapshotId;\r\n    mapping(uint snapId => SnapshotInfo) public snapshots;\r\n    mapping(address wallet => bool excludedStatus) public isExcludedFromTax;\r\n    mapping(address wallet => bool excludedStatus)\r\n        public isExcludedFromMaxWallet;\r\n    mapping(address wallet => bool dividendExcepmtionStatus)\r\n        public isDividendExempt;\r\n    mapping(address lpAddress => bool) public isLpAddress;\r\n    mapping(address executor => bool isExecutor) public isSnapshotter;\r\n\r\n    uint private constant MAX_SUPPLY = 5_000_000 ether;\r\n    uint private constant TIER_1 = 50_000 ether; // TIER 1 is top TIER\r\n    uint private constant TIER_2 = 1_000 ether; // TIER 2 is middle TIER\r\n    uint private constant TAX_PERCENT = 100;\r\n    IUniswapV2Router02 public router;\r\n\r\n    address public mainPair;\r\n    address private immutable WETH;\r\n    address payable public immutable ADMIN_WALLET;\r\n    uint public currentSnapId = 0;\r\n    uint public taxThreshold;\r\n\r\n    uint public maxWallet;\r\n    uint public buyTax = 5;\r\n    uint public sellTax = 5;\r\n\r\n    bool private isSwapping = false;\r\n    bool public tradingEnabled = false;\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Events\r\n    //---------------------------------------------------------------------------------\r\n\r\n    event WalletExcludedFromTax(address indexed _user, bool excluded);\r\n    event WalletExcludedFromMax(address indexed _user, bool excluded);\r\n    event BlacklistWalletsUpdate(address[] _users, bool blacklisted);\r\n    event SetAddressAsLp(address indexed _lpAddress, bool isLpAddress);\r\n    event SnapshotTaken(uint indexed snapId, uint timestamp);\r\n    event TradingEnabled(bool isEnabled);\r\n    event UpdateBlacklister(address indexed _blacklister);\r\n    event SetSnapshotterStatus(address indexed _snapshotter, bool status);\r\n    event EditMaxWalletAmount(uint newAmount);\r\n    event EditTax(uint newTax, bool buyTax, bool sellTax);\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Modifiers\r\n    //---------------------------------------------------------------------------------\r\n\r\n    modifier onlySnapshotter() {\r\n        if (!isSnapshotter[msg.sender]) revert FUXION__NotAllowed();\r\n        _;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Constructor\r\n    //---------------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        address _admin,\r\n        address _newOwner,\r\n        address _recoveryAdmin,\r\n        address lossless_,\r\n        uint256 timeLockPeriod_\r\n    )\r\n        LERC20(\r\n            \"Fuxion Labs\",\r\n            \"FUXE\",\r\n            address(_admin),\r\n            address(_recoveryAdmin),\r\n            timeLockPeriod_,\r\n            address(lossless_)\r\n        )\r\n    {\r\n        require(_newOwner != address(0), \"FUXION__InvalidAddress\");\r\n        _transferOwnership(_newOwner);\r\n        _mint(_newOwner, MAX_SUPPLY);\r\n\r\n        maxWallet = (MAX_SUPPLY * 10) / 100_0; // 1% of total supply\r\n        taxThreshold = MAX_SUPPLY / 100_00; // 0.01% of total supply\r\n\r\n        // Ethereum Mainnet UniswapV2 Router\r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        // Create the Pair for this token with WETH\r\n        mainPair = IUniswapV2Factory(router.factory()).createPair(\r\n            address(this),\r\n            WETH\r\n        );\r\n        isLpAddress[mainPair] = true;\r\n\r\n        isExcludedFromMaxWallet[address(this)] = true;\r\n        isExcludedFromMaxWallet[owner()] = true;\r\n        isExcludedFromMaxWallet[address(router)] = true;\r\n        isExcludedFromMaxWallet[address(mainPair)] = true;\r\n\r\n        isExcludedFromTax[owner()] = true;\r\n        isExcludedFromTax[address(this)] = true;\r\n        isExcludedFromTax[address(router)] = true;\r\n\r\n        isDividendExempt[owner()] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(router)] = true;\r\n        isDividendExempt[address(mainPair)] = true;\r\n\r\n        isSnapshotter[owner()] = true;\r\n        ADMIN_WALLET = payable(_admin);\r\n        _approve(address(this), address(router), type(uint).max);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // External & Public Functions\r\n    //---------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Set wether an address is excluded from taxes or NOT.\r\n     * @param _user User which status will be updated\r\n     * @param _excluded The new excluded status. True is Excluded, False is NOT excluded\r\n     */\r\n    function setExcludeFromTax(\r\n        address _user,\r\n        bool _excluded\r\n    ) external onlyOwner {\r\n        require(_user != address(0), \"FUXION__InvalidAddress\");\r\n        require(\r\n            isExcludedFromTax[_user] != _excluded,\r\n            \"FUXION__AlreadyExcluded\"\r\n        );\r\n        isExcludedFromTax[_user] = _excluded;\r\n        emit WalletExcludedFromTax(_user, _excluded);\r\n    }\r\n\r\n    /**\r\n     * Exclude or include a wallet of MAX wallet limit (AntiWhale)\r\n     * @param _user Address which status will be updated\r\n     * @param _excluded The new excluded status. True is Excluded, False is NOT excluded\r\n     */\r\n    function setExcludedFromMaxWallet(\r\n        address _user,\r\n        bool _excluded\r\n    ) external onlyOwner {\r\n        require(_user != address(0), \"FUXION__InvalidAddress\");\r\n        require(\r\n            isExcludedFromMaxWallet[_user] != _excluded,\r\n            \"FUXION__AlreadyExcluded\"\r\n        );\r\n        isExcludedFromMaxWallet[_user] = _excluded;\r\n        emit WalletExcludedFromMax(_user, _excluded);\r\n    }\r\n\r\n    /**\r\n     * @notice Set an Address as LP\r\n     * @param _lpAddress Address to set as LP\r\n     * @param _isLpAddress enable or disable address as an LP\r\n     */\r\n    function setLpAddress(\r\n        address _lpAddress,\r\n        bool _isLpAddress\r\n    ) external onlyOwner {\r\n        require(_lpAddress != address(0), \"FUXION__InvalidAddress\");\r\n        require(isLpAddress[_lpAddress] != _isLpAddress, \"FUXION__AlreadySet\");\r\n        require(\r\n            isDividendExempt[_lpAddress] != _isLpAddress,\r\n            \"FUXION__Invalid\"\r\n        );\r\n        isLpAddress[_lpAddress] = _isLpAddress;\r\n        isDividendExempt[_lpAddress] = _isLpAddress;\r\n        emit SetAddressAsLp(_lpAddress, _isLpAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Create a snapshot of the current balances\r\n     */\r\n    function takeSnapshot() external onlySnapshotter {\r\n        uint currentSnap = currentSnapId;\r\n        currentSnapId++;\r\n\r\n        SnapshotInfo storage snap = snapshots[currentSnap];\r\n        snap.snapshotTakenTimestamp = block.timestamp;\r\n        // roll over total amounts\r\n        snapshots[currentSnapId] = SnapshotInfo({\r\n            tier1Total: snap.tier1Total,\r\n            tier2Total: snap.tier2Total,\r\n            snapshotTakenTimestamp: 0\r\n        });\r\n\r\n        emit SnapshotTaken(currentSnap, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the new Tax swap threshold\r\n     * @param _taxThreshold New tax threshold\r\n     */\r\n    function setTaxThreshold(uint _taxThreshold) external onlyOwner {\r\n        require(_taxThreshold > 0, \"FUXION__InvalidThreshold\");\r\n\r\n        if (_taxThreshold > MAX_SUPPLY) revert FUXION__InvalidThreshold();\r\n        taxThreshold = _taxThreshold;\r\n    }\r\n\r\n    function setMaxWallet(uint _maxWallet) external onlyOwner {\r\n        require(_maxWallet > 0, \"FUXION__InvalidMaxWallet\");\r\n        if (_maxWallet < MAX_SUPPLY / 100_00) revert FUXION__InvalidMaxWallet();\r\n        maxWallet = _maxWallet;\r\n        emit EditMaxWalletAmount(_maxWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice set trading as enabled\r\n     */\r\n    function enableTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n        emit TradingEnabled(true);\r\n    }\r\n\r\n    /**\r\n     * @notice set trading as disabled\r\n     */\r\n    function pauseTrading() external onlyOwner {\r\n        tradingEnabled = false;\r\n        emit TradingEnabled(false);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Snapshotter status to an address. These addresses can take snapshots at any time\r\n     * @param _snapshotter Address to set snapshotter status\r\n     * @param _isSnapshotter True to set as snapshotter, false to remove\r\n     */\r\n    function setSnapshotterAddress(\r\n        address _snapshotter,\r\n        bool _isSnapshotter\r\n    ) external onlyOwner {\r\n        require(_snapshotter != address(0), \"FUXION__InvalidAddress\");\r\n        require(\r\n            isSnapshotter[_snapshotter] != _isSnapshotter,\r\n            \"FUXION__AlreadySet\"\r\n        );\r\n        isSnapshotter[_snapshotter] = _isSnapshotter;\r\n        emit SetSnapshotterStatus(_snapshotter, _isSnapshotter);\r\n    }\r\n\r\n    /**\r\n     * @notice set the Buy tax to a new value\r\n     * @param _buyTax New buy tax\r\n     * @dev buyTax is a maximimum of 10% so the max acceptable _buyTax is 10\r\n     */\r\n    function setBuyTax(uint _buyTax) external onlyOwner {\r\n        require(_buyTax > 0, \"FUXION__InvalidTaxAmount\");\r\n        if (_buyTax > 10) revert FUXION__InvalidTaxAmount();\r\n        buyTax = _buyTax;\r\n        emit EditTax(_buyTax, true, false);\r\n    }\r\n\r\n    /**\r\n     * @notice set the Sell tax to a new value\r\n     * @param _sellTax New sell tax\r\n     * @dev sellTax is a maximimum of 10% so the max acceptable _sellTax is 10\r\n     */\r\n    function setSellTax(uint _sellTax) external onlyOwner {\r\n        require(_sellTax > 0, \"FUXION__InvalidTaxAmount\");\r\n        if (_sellTax > 10) revert FUXION__InvalidTaxAmount();\r\n        sellTax = _sellTax;\r\n        emit EditTax(_sellTax, false, true);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Internal & Private Functions\r\n    //---------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice Underlying transfer of tokens used by `transfer` and `transferFrom` in ERC20 which are public\r\n     * @param from Address that holds the funds\r\n     * @param to Address that receives the funds\r\n     * @param amount Amount of funds to send\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) internal override {\r\n        bool taxExclusion = isExcludedFromTax[from] || isExcludedFromTax[to];\r\n\r\n        if (!tradingEnabled && !taxExclusion) {\r\n            revert FUXION__TradingNotEnabled();\r\n        }\r\n\r\n        _updateSnapDecrease(from, amount);\r\n\r\n        uint currentBalance = balanceOf(address(this));\r\n\r\n        if (\r\n            !isSwapping &&\r\n            currentBalance >= taxThreshold &&\r\n            !taxExclusion &&\r\n            !isLpAddress[from] // Cant do this on buys\r\n        ) {\r\n            _swapTokens();\r\n        }\r\n\r\n        // Check that sender is free of tax or receiver is free of tax\r\n        if (!taxExclusion) {\r\n            uint tax;\r\n            // if not free of tax, check if is buy or sell\r\n            if (isLpAddress[to]) {\r\n                // IS SELL\r\n                tax = (amount * sellTax) / TAX_PERCENT;\r\n            } else if (isLpAddress[from]) {\r\n                // IS BUY\r\n                tax = (amount * buyTax) / TAX_PERCENT;\r\n            }\r\n            if (tax > 0) {\r\n                super._transfer(from, address(this), tax);\r\n                amount -= tax;\r\n            }\r\n        }\r\n\r\n        // check if receiver is free of max wallet\r\n        uint toNEWBalance = balanceOf(to) + amount;\r\n        if (!isExcludedFromMaxWallet[to] && toNEWBalance > maxWallet) {\r\n            revert FUXION__MaxWalletReached(to, toNEWBalance);\r\n        }\r\n        _updateSnapIncrease(to, amount);\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap any tokens the contract has for ETH and send the ETH directly to the Admin Wallet\r\n     */\r\n    function _swapTokens() private {\r\n        isSwapping = true;\r\n        // Get the current amount of tokens stored in the contract\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        // If the contract has tokens\r\n        if (contractTokenBalance > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = WETH;\r\n            // Swap all for ETH and send to Admin Wallet\r\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractTokenBalance,\r\n                0, // Accept any amount of ETH\r\n                path,\r\n                ADMIN_WALLET,\r\n                block.timestamp\r\n            );\r\n        }\r\n        isSwapping = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease a wallet's current snapshot balance\r\n     * @param user Wallet to update snapshot info\r\n     * @param amount the difference amount in snapshot\r\n     */\r\n    function _updateSnapDecrease(address user, uint amount) private {\r\n        uint currentSnap = currentSnapId;\r\n        uint currentSnapBalance = snapshotInfo[user][currentSnap];\r\n        uint currentBalance = balanceOf(user);\r\n        uint newBalance = currentBalance - amount;\r\n        SnapshotInfo storage snap = snapshots[currentSnap];\r\n        lastSnapshotId[user] = currentSnap;\r\n        // If user is exempt from dividends, we need to set the snapshot value to 0\r\n        if (isDividendExempt[user]) {\r\n            delete snapshotInfo[user][currentSnap];\r\n            // if user is now exempt but used to have funds, we need to decrease the total\r\n            if (currentSnapBalance > 0) {\r\n                if (currentSnapBalance >= TIER_1)\r\n                    snap.tier1Total -= currentSnapBalance;\r\n                else if (currentSnapBalance >= TIER_2)\r\n                    snap.tier2Total -= currentSnapBalance;\r\n            }\r\n        } else {\r\n            snapshotInfo[user][currentSnap] = newBalance;\r\n\r\n            /// FROM TIER 1\r\n            if (currentBalance >= TIER_1) {\r\n                // Decrease TIER 1\r\n                snap.tier1Total -= currentBalance;\r\n                // TO SAME TIER\r\n                if (newBalance >= TIER_1) snap.tier1Total += newBalance;\r\n                // TO TIER 2\r\n                if (newBalance < TIER_1 && newBalance >= TIER_2)\r\n                    snap.tier2Total += newBalance;\r\n                // if to NO tier, just decrease is fine\r\n            }\r\n            // FROM TIER 2\r\n            else if (currentBalance >= TIER_2) {\r\n                snap.tier2Total -= currentBalance;\r\n                // TO SAME TIER\r\n                if (newBalance >= TIER_2) snap.tier2Total += newBalance;\r\n                // TO NO TIER JUST DO NOTHING\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Increase a wallet's current snapshot balance\r\n     * @param user Wallet to update snapshot info\r\n     * @param amount Difference amount\r\n     */\r\n    function _updateSnapIncrease(address user, uint amount) private {\r\n        uint currentSnap = currentSnapId;\r\n        uint currentBalance = balanceOf(user);\r\n        uint currentSnapBalance = snapshotInfo[user][currentSnap];\r\n        SnapshotInfo storage snap = snapshots[currentSnap];\r\n        lastSnapshotId[user] = currentSnap;\r\n        // If user is exempt from dividends, we need to set the snapshot value to 0\r\n        if (isDividendExempt[user]) {\r\n            delete snapshotInfo[user][currentSnap];\r\n            // if user is now exempt but used to have funds, we need to decrease the total\r\n            if (currentSnapBalance > 0) {\r\n                if (currentSnapBalance >= TIER_1)\r\n                    snap.tier1Total -= currentSnapBalance;\r\n                else if (currentSnapBalance >= TIER_2)\r\n                    snap.tier2Total -= currentSnapBalance;\r\n            }\r\n        } else {\r\n            snapshotInfo[user][currentSnap] = currentBalance + amount;\r\n            uint newBalance = currentBalance + amount;\r\n            // Check if there is any tier advancement\r\n\r\n            // FROM NO TIER\r\n            if (currentBalance < TIER_2) {\r\n                // TO TIER 1\r\n                if (newBalance >= TIER_1)\r\n                    snap.tier1Total += newBalance;\r\n                    // TO TIER 2\r\n                else if (newBalance >= TIER_2) snap.tier2Total += newBalance;\r\n                // TO NO TIER DO NOTHING\r\n            }\r\n            // FROM TIER 2\r\n            else if (currentBalance >= TIER_2 && currentBalance < TIER_1) {\r\n                // TO TIER 1\r\n                if (newBalance >= TIER_1)\r\n                    snap.tier1Total += newBalance;\r\n\r\n                    // TO SAME TIER\r\n                else if (newBalance >= TIER_2) snap.tier2Total += newBalance;\r\n                snap.tier2Total -= currentBalance;\r\n            }\r\n            // FROM TIER 1\r\n            else if (currentBalance >= TIER_1) {\r\n                // Stay in same tier\r\n                snap.tier1Total += newBalance;\r\n                snap.tier1Total -= currentBalance;\r\n            }\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // External & Public VIEW | PURE Functions\r\n    //---------------------------------------------------------------------------------\r\n\r\n    function getUserSnapshotAt(\r\n        address user,\r\n        uint snapId\r\n    ) external view returns (uint) {\r\n        // If snapshot ID hasn't been taken, return 0\r\n        if (snapId > currentSnapId) return 0;\r\n        uint lastUserSnap = lastSnapshotId[user];\r\n        // if last snapshot is before the requested snapshot, return current balance of the user\r\n        if (snapId > lastUserSnap) return balanceOf(user);\r\n        // else return the snapshot balance\r\n        return snapshotInfo[user][snapId];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recoveryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLockPeriod_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FUXION__InvalidMaxWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUXION__InvalidTaxAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUXION__InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"triedBalance\",\"type\":\"uint256\"}],\"name\":\"FUXION__MaxWalletReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUXION__NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUXION__TradingNotEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistWalletsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EditMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"buyTax\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellTax\",\"type\":\"bool\"}],\"name\":\"EditTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdminProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLpAddress\",\"type\":\"bool\"}],\"name\":\"SetAddressAsLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_snapshotter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetSnapshotterStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_blacklister\",\"type\":\"address\"}],\"name\":\"UpdateBlacklister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"WalletExcludedFromMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"WalletExcludedFromTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_WALLET\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSnapId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"}],\"name\":\"getUserSnapshotAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"dividendExcepmtionStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"excludedStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"excludedStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"isLpAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"isSnapshotter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSnapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossless\",\"outputs\":[{\"internalType\":\"contract ILssController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLpAddress\",\"type\":\"bool\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snapshotter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSnapshotter\",\"type\":\"bool\"}],\"name\":\"setSnapshotterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxThreshold\",\"type\":\"uint256\"}],\"name\":\"setTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"}],\"name\":\"snapshotInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier1Total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTakenTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FuxionLabs", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003336f22201914e8bffc69d2db520a9da84dba14f0000000000000000000000001a4232444bbdca5e4e37e125e4b17f1ad037c056000000000000000000000000f6af39db4887c8f3671ec11c5bab428700626a41000000000000000000000000e91d7cebce484070fc70777cb04f7e2efae31db40000000000000000000000000000000000000000000000000000000000015180", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://416b2d3ee07bbd75200b7a187eb286a4bbbe9f27e7fde39157299261ca31daf7"}