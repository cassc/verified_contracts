{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/lib/OwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title OwnerProxy\\n * @dev OwnerProxy is a proxy contract that provides an onchain interface of\\n * just the Ownable functions.\\n *\\n * The main purpose of this contract is to allow for deploying to\\n * deterministic addresses via CREATE2, while still allowing for the owner\\n * address to be updated. Normally, the owner address is set at deployment\\n * time as a constructor arg, which means that the address of the contract\\n * is not known until after it is deployed. This makes it difficult to\\n * deploy contracts to a deterministic address.\\n *\\n * The OwnerProxy contract can be deployed to a preconfigured address via a\\n * CREATE2 factory, after which subsequent contracts can be written to\\n * refer to the OwnerProxy contract (at its preconfigured address) as\\n * a way to determine the owner of the address at deployment time\\n * for _subsequent_ CREATE2 deployments of _other_ contracts.\\n *\\n * Other contracts should be written to accept an OwnerProxy address as a\\n * constructor arg, and then use that OwnerProxy's owner() as the owner\\n * address for the contract being deployed.\\n *\\n *    ```\\n *    constructor(address ownerProxy) {\\n *      transferOwnership(Ownable(ownerProxy).owner());\\n *    }\\n *    ```\\n *\\n * This allows developers to mine CREATE2 addresses with static constructor\\n * args input once this OwnerProxy is deployed, while still using different\\n * owner addresses on different chains, (e.g. test or prod) by manipulating the\\n * owner() of the OwnerProxy at deployment time of future contracts that\\n * refer to it.\\n *\\n * This mechanism allows for developers to:\\n * - deploy initization code via CREATE2 to static address (can be mined)\\n * - to a developer-controlled owner address\\n * - on any EVM chain\\n * - now or in the future\\n * - while allowing the post-deployment owner address to be updated for each\\n *   deployment or chain\\n *\\n * so long as:\\n * - OwnerProxy is deployed via CREATE2 to the same address across all chains\\n * - such that it can be passed in as a deterministic constructor arg to\\n *   contracts\\n *\\n * To ensure OwnerProxy is deployed at the same address it can either be:\\n * - deployed via a CREATE2 factory with a deterministic salt\\n * - deployed via the same deployer at the same nonce across all EVM chains\\n *\\n * The standard sequence as designed is:\\n * - Determine deployer key\\n * - Deploy 0age's ImmutableCreate2Factory as nonce 0 transaction\\n *   (deterministic address)\\n * - Deploy OwnerProxy via ImmutableCreate2Factory::safeCreate2 with\\n *   deterministic salt S\\n * - Deploy contract(s) with constructor arg of OwnerProxy address\\n * - In contract constructor, transfer ownership to OwnerProxy::owner()\\n */\\ncontract OwnerProxy is Ownable {\\n  error NotMasterOwner();\\n  address public immutable masterOwner;\\n\\n  /**\\n   * @dev Construct the OwnerProxy.\\n   * @param masterOwner_ The address of the master owner.\\n   */\\n  constructor(address masterOwner_) {\\n    masterOwner = masterOwner_;\\n\\n    // test test test test test test test test test test test junk\\n    // m/44'/60'/0'/0/0\\n    transferOwnership(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that only the master owner can call a function.\\n   */\\n  modifier onlyMasterOwner() {\\n    if (msg.sender != masterOwner) revert NotMasterOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Transfer ownership to the master owner.\\n   */\\n  function takeOwnership() external onlyMasterOwner {\\n    _transferOwnership(masterOwner);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterOwner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotMasterOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"masterOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OwnerProxy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000bdb41bff7e828e2dc2d15eb67257455db818f1dc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}