{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/interfaces/IPoolController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/ILoan.sol\\\";\\n\\n/**\\n * @dev Expresses the various states a pool can be in throughout its lifecycle.\\n */\\nenum IPoolLifeCycleState {\\n    Initialized,\\n    Active,\\n    Closed,\\n    DisruptionOrDefault\\n}\\n\\n/**\\n * @title The various configurable settings that customize Pool behavior.\\n */\\nstruct IPoolConfigurableSettings {\\n    uint256 maxCapacity; // amount\\n    uint256 endDate; // epoch seconds\\n    address borrowerManager;\\n    address borrowerWalletAddress;\\n    uint256 closeOfBusinessTime;\\n    uint256 earlyWithdrawFeeBps;\\n}\\n\\n/**\\n * @title A Pool's Admin controller\\n * @dev Pool Admin's interact with the pool via the controller, including funding loans and adjusting\\n * settings.\\n */\\ninterface IPoolController {\\n    /**\\n     * @dev Emitted when pool settings are updated.\\n     */\\n    event PoolSettingsUpdated();\\n\\n    /**\\n     * @dev Emitted when the pool transitions a lifecycle state.\\n     */\\n    event LifeCycleStateTransition(IPoolLifeCycleState state);\\n\\n    /**\\n     * @dev Emitted when a pool is marked as in DisruptionOrDefault.\\n     */\\n    event DisruptionOrDefault(address indexed pool);\\n\\n    event Rescheduled(address indexed pool);\\n\\n    function version() external returns (uint16);\\n\\n    /**\\n     * @dev The Pool's admin\\n     */\\n    function admin() external view returns (address);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                Settings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev The current configurable pool settings.\\n     */\\n    function settings()\\n        external\\n        view\\n        returns (IPoolConfigurableSettings memory);\\n\\n    function serviceConfiguration() external view returns (address);\\n\\n    /**\\n     * @dev Allow the current pool admin to update the pool capacity at any\\n     * time.\\n     */\\n    function setPoolCapacity(uint256) external;\\n\\n    /**\\n     * @dev Allow the current pool admin to update the pool's end date. The end date can\\n     * only be moved earlier (but not in the past, as measured by the current block's timestamp).\\n     * Once the end date is reached, the Pool is closed.\\n     */\\n    function setPoolEndDate(uint256) external;\\n\\n    function closeOfBusinessTime() external view returns (uint256);\\n\\n    function borrowerManager() external view returns (address);\\n\\n    function borrowerWalletAddress() external view returns (address);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                State\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function reschedule(\\n        address loan,\\n        uint256 accrualStartDayTimestamp,\\n        uint256 transferInWindowDurationDays,\\n        uint256 transferOutWindowDurationDays,\\n        uint256 durationDays\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current pool lifecycle state.\\n     */\\n    function state() external view returns (IPoolLifeCycleState);\\n\\n    function activatePool() external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                Loans\\n    //////////////////////////////////////////////////////////////*/\\n    function approveLoanForPool(address loan) external;\\n\\n    function initiateRollover(address loan, address priorLoan) external;\\n\\n    function completeRolloverNetPayment(address) external;\\n\\n    function disruptionOrDefault() external;\\n\\n    function releaseRolloverRedemption(address owner) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                Fees\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Called by the pool admin, this claims fees that have accumulated\\n     * in the Pool's FeeVault from ongoing borrower payments.\\n     */\\n    function withdrawFeeVault(uint256 amount, address receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/interfaces/IWithdrawController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../../interfaces/IPool.sol\\\";\\n\\nstruct IPoolRolloverWithdrawState {\\n    uint256 requestedShares; // Number of shares requested in the `latestPeriod`\\n    uint256 requestedAssets;\\n    uint256 redeemableShares; // The shares that are currently withdrawable\\n    uint256 withdrawableAssets; // The assets that are currently withdrawable\\n    uint256 earlyRequestedShares; // The period in which the shares were requested\\n    uint256 earlyRequestedAssets;\\n    uint256 earlyAcceptedShares; // The period in which the shares were requested\\n    uint256 earlyAcceptedAssets;\\n}\\n\\n/**\\n * @title A Pool's Withdraw controller\\n * @dev Holds state related to withdraw requests, and logic for snapshotting the\\n * pool's liquidity reserve at regular intervals, earmarking funds for lenders according\\n * to their withdrawal requests.\\n */\\ninterface IWithdrawController {\\n    function version() external pure returns (uint16);\\n\\n    function pool() external view returns (address);\\n\\n    function feeVault() external view returns (address);\\n\\n    function borrowerVault() external view returns (address);\\n\\n    function borrowerWallet() external view returns (address);\\n\\n    function withdrawFeeVault(uint256 amount, address receiver) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Balance Views\\n    //////////////////////////////////////////////////////////////*/\\n    function drawDownToBorrowerWallet(uint256 amount) external;\\n\\n    function redemptionState() external view returns (IRedemptionState memory);\\n\\n    function requestedSharesOf(\\n        address owner\\n    ) external view returns (uint256 shares);\\n\\n    function requestedAssetsOf(\\n        address owner\\n    ) external view returns (uint256 assets);\\n\\n    function redeemableSharesOf(\\n        address owner\\n    ) external view returns (uint256 shares);\\n\\n    function withdrawableAssetsOf(\\n        address owner\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the number of shares that are available to be redeemed by\\n     * the owner in the current block.\\n     */\\n    function totalRequestedShares() external view returns (uint256);\\n\\n    function totalRequestedAssets() external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the number of shares that are available to be redeemed\\n     * overall in the current block.\\n     */\\n    function totalRedeemableShares() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of `assets` that are available to be withdrawn\\n     * overall in the current block.\\n     */\\n    function totalWithdrawableAssets() external view returns (uint256);\\n\\n    function releaseRolloverRedemption(\\n        address owner\\n    ) external returns (uint256 shares, uint256 assets);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Max Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the maximum number of `shares` that can be\\n     * requested to be redeemed from the owner balance with a single\\n     * `requestRedeem` call in the current block.\\n     *\\n     * Note: This is equivalent of EIP-4626 `maxRedeem`\\n     */\\n    function maxRedeemRequest(address) external view returns (uint256);\\n\\n    /**\\n     * @dev The maximum amount of shares that can be redeemed from the owner\\n     * balance through a redeem call.\\n     */\\n    function maxRedeem(address) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the maximum amount of underlying assets that can be\\n     * withdrawn from the owner balance with a single withdraw call.\\n     */\\n    function maxWithdraw(address) external view returns (uint256);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Preview Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Simulates the effects of their redeemption at the current block.\\n     * Per EIP4626, should round DOWN.\\n     */\\n    function previewRedeem(address, uint256) external view returns (uint256);\\n\\n    /**\\n     * @dev Simulate the effects of their withdrawal at the current block.\\n     * Per EIP4626, should round UP on the number of shares required for assets.\\n     */\\n    function previewWithdraw(address, uint256) external view returns (uint256);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Request Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Requests redeeming a specific number of `shares` and `assets` from\\n     * the pool.\\n     *\\n     * NOTE: The pool is responsible for handling any fees, and for providing\\n     * the proper shares/assets ratio.\\n     */\\n    function performRequest(address, uint256, uint256) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          Early Withdraw Methods\\n  //////////////////////////////////////////////////////////////*/\\n\\n    function requestEarlyRedeem(\\n        address owner,\\n        uint256 shares\\n    ) external returns (uint256 principal);\\n\\n    function acceptEarlyRedeemRequest(\\n        address investorAddr\\n    ) external returns (uint256 shares, uint256 principal);\\n\\n    function repayEarlyWithdraw(\\n        address investorAddr,\\n        uint256 amount\\n    )\\n        external\\n        returns (\\n            uint256 principal,\\n            uint256 repayment,\\n            uint256 redeemedShares,\\n            uint256 fees,\\n            uint256 assetReduction\\n        );\\n\\n    function totalEarlyRequestedShares() external view returns (uint256 shares);\\n\\n    function totalEarlyRequestedAssets() external view returns (uint256 assets);\\n\\n    function totalEarlyAcceptedShares() external view returns (uint256 shares);\\n\\n    function totalEarlyAcceptedAssets() external view returns (uint256 assets);\\n\\n    function earlyRequestedSharesOf(\\n        address owner\\n    ) external view returns (uint256 shares);\\n\\n    function earlyRequestedAssetsOf(\\n        address owner\\n    ) external view returns (uint256 assets);\\n\\n    function earlyAcceptedSharesOf(\\n        address owner\\n    ) external view returns (uint256 shares);\\n\\n    function earlyAcceptedAssetsOf(\\n        address owner\\n    ) external view returns (uint256 assets);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Withdraw / Redeem\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Redeems a specific number of shares from owner and send assets of underlying token from the vault to receiver.\\n     *\\n     * Per EIP4626, should round DOWN.\\n     */\\n    function redeem(address, uint256) external returns (uint256);\\n\\n    /**\\n     * @dev Burns shares from owner and send exactly assets token from the vault to receiver.\\n     * Should round UP for EIP4626.\\n     */\\n    function withdraw(address, uint256) external returns (uint256);\\n\\n    function payFees(uint256) external;\\n\\n    function repayLoan(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/ILoanFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../../interfaces/ILoan.sol\\\";\\n\\n/**\\n * @title Interface for the LoanFactory.\\n */\\ninterface ILoanFactory {\\n    /**\\n     * @dev Emitted when a loan is created.\\n     */\\n    event LoanCreated(address indexed addr, address indexed poolAddr);\\n\\n    /**\\n     * @dev Creates a loan\\n     * @dev Emits `LoanCreated` event.\\n     */\\n    function createLoan(\\n        address borrower,\\n        address pool,\\n        address liquidityAsset,\\n        ILoanSettings memory settings\\n    ) external returns (address);\\n\\n    function version() external pure returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/IPoolAccessControlFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title An interface for a factory that creates PoolAccessControl contracts.\\n */\\ninterface IPoolAccessControlFactory {\\n    /**\\n     * @dev Creates a new PoolAccessControl.\\n     */\\n    function create(address pool) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/IPoolControllerFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../../interfaces/IPool.sol\\\";\\n\\n/**\\n * @title Interface for the PoolController factory.\\n */\\ninterface IPoolControllerFactory {\\n    /**\\n     * @dev Emitted when a pool is created.\\n     */\\n    event PoolControllerCreated(address indexed pool, address indexed addr);\\n\\n    /**\\n     * @dev Creates a pool's PoolAdmin controller\\n     * @dev Emits `PoolControllerCreated` event.\\n     */\\n    function createController(\\n        address pool,\\n        address serviceConfiguration,\\n        address admin,\\n        address liquidityAsset,\\n        IPoolConfigurableSettings memory poolSettings\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Interface for the VaultFactory.\\n */\\n\\nenum IVaultType {\\n    Default,\\n    PoolVault,\\n    BorrowerVault,\\n    FeeVault,\\n    FundingVault\\n}\\n\\ninterface IVaultFactory {\\n    /**\\n     * @dev Emitted when a vault is created.\\n     */\\n    event VaultCreated(address indexed owner);\\n\\n    /**\\n     * @dev Creates a new vault.\\n     * @dev Emits a `VaultCreated` event.\\n     */\\n    function createVault(\\n        address owner,\\n        IVaultType vaultType\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/IWithdrawControllerFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Interface for the WithdrawController factory.\\n */\\ninterface IWithdrawControllerFactory {\\n    /**\\n     * @dev Emitted when a pool WithdrawController is created.\\n     */\\n    event WithdrawControllerCreated(address indexed addr);\\n\\n    /**\\n     * @dev Creates a pool's withdraw controller\\n     * @dev Emits `WithdrawControllerCreated` event.\\n     */\\n    function createController(\\n        address pool,\\n        address vaultFactory,\\n        address borrowerWalletAddress\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/LoanFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/IServiceConfigurationV3.sol\\\";\\nimport \\\"./interfaces/ILoanFactory.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../Loan.sol\\\";\\nimport \\\"../upgrades/BeaconProxyFactory.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\n/**\\n * @title A factory that emits Loan contracts.\\n * @dev Acts as a beacon contract, emitting beacon proxies and holding a reference\\n * to their implementation contract.\\n */\\ncontract LoanFactory is ILoanFactory, BeaconProxyFactory {\\n    mapping(address => bool) public isLoan;\\n\\n    /**\\n     * @dev A reference to the VaultFactory.\\n     */\\n    address internal _vaultFactory;\\n\\n    function version() public pure returns (uint16) {\\n        return 256 * 1 + 0;\\n    }\\n\\n    /**\\n     * @dev Constructor for the LoanFactory.\\n     * @param serviceConfiguration Reference to the global service configuration.\\n     * @param vaultFactory Reference to a VaultFactory.\\n     */\\n    constructor(address serviceConfiguration, address vaultFactory) {\\n        _serviceConfiguration = IServiceConfigurationV3(serviceConfiguration);\\n        _vaultFactory = vaultFactory;\\n    }\\n\\n    /**\\n     * @dev Creates a Loan\\n     * @dev Emits `LoanCreated` event.\\n     */\\n    function createLoan(\\n        address borrower,\\n        address pool,\\n        address liquidityAsset,\\n        ILoanSettings memory settings\\n    ) public returns (address) {\\n        require(\\n            _serviceConfiguration.paused() == false,\\n            \\\"LoanFactory: Protocol paused\\\"\\n        );\\n\\n        require(implementation != address(0), \\\"LoanFactory: no implementation\\\");\\n        require(\\n            msg.sender == IPool(pool).borrowerManagerAddr(),\\n            \\\"LoanFactory: Caller not borrowerManager\\\"\\n        );\\n        require(\\n            borrower == IPool(pool).borrowerManagerAddr(),\\n            \\\"LoanFactory: Caller not borrowerManager\\\"\\n        );\\n\\n        address addr = initializeLoan(borrower, pool, liquidityAsset, settings);\\n\\n        IPool(pool).loanCreated(addr);\\n\\n        emit LoanCreated(addr, pool);\\n        isLoan[addr] = true;\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Internal initialization of Beacon proxy for Loans\\n     */\\n    function initializeLoan(\\n        address borrower,\\n        address pool,\\n        address liquidityAsset,\\n        ILoanSettings memory settings_\\n    ) internal returns (address) {\\n        BeaconProxy proxy = new BeaconProxy(\\n            address(this),\\n            abi.encodeWithSelector(\\n                Loan.initialize.selector,\\n                address(_serviceConfiguration),\\n                address(this),\\n                borrower,\\n                pool,\\n                liquidityAsset,\\n                _vaultFactory,\\n                settings_\\n            )\\n        );\\n        return address(proxy);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title The interface according to the ERC-4626 standard.\\n */\\ninterface IERC4626 is IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when tokens are deposited into the vault via the mint and deposit methods.\\n     */\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Emitted when shares are withdrawn from the vault by a depositor in the redeem or withdraw methods.\\n     */\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Return the address of the underlying ERC-20 token used for the vault for accounting, depositing, withdrawing.\\n     */\\n    function asset() external view returns (address);\\n\\n    /**\\n     * @dev Calculate the total amount of underlying assets held by the vault.\\n     * NOTE: This method includes assets that are marked for withdrawal.\\n     */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates the amount of shares that would be exchanged by the vault for the amount of assets provided.\\n     * Rounds DOWN per EIP4626.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates the amount of assets that would be exchanged by the vault for the amount of shares provided.\\n     * Rounds DOWN per EIP4626.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates the maximum amount of underlying assets that can be deposited in a single deposit call by the receiver.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256);\\n\\n    /**\\n     * @dev Allows users to simulate the effects of their deposit at the current block.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    /**\\n     * @dev Deposits assets of underlying tokens into the vault and grants ownership of shares to receiver.\\n     * Emits a {Deposit} event.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the maximum amount of shares that can be minted in a single mint call by the receiver.\\n     */\\n    function maxMint(address receiver) external view returns (uint256);\\n\\n    /**\\n     * @dev Allows users to simulate the effects of their mint at the current block.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    /**\\n     * @dev Mints exactly shares vault shares to receiver by depositing assets of underlying tokens.\\n     * Emits a {Deposit} event.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the maximum amount of underlying assets that can be withdrawn from the owner balance with a single withdraw call.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Simulate the effects of their withdrawal at the current block.\\n     * Per EIP4626, should round UP on the number of shares required for assets.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    /**\\n     * @dev Burns shares from owner and send exactly assets token from the vault to receiver.\\n     * Emits a {Withdraw} event.\\n     * Should round UP for EIP4626.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev The maximum amount of shares that can be redeemed from the owner balance through a redeem call.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Simulates the effects of their redeemption at the current block.\\n     * Per EIP4626, should round DOWN.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    /**\\n     * @dev Redeems a specific number of shares from owner and send assets of underlying token from the vault to receiver.\\n     * Emits a {Withdraw} event.\\n     * Per EIP4626, should round DOWN.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IServiceConfigurationV3.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\n/**\\n * @title An enum capturing the various states a Loan may be in.\\n */\\nenum ILoanLifeCycleState {\\n    Requested,\\n    Canceled,\\n    Funded,\\n    Matured,\\n    Active,\\n    Settled\\n}\\n\\nenum ILoanTransitionState {\\n    Created /* RequestedLoan */,\\n    ApprovedForDeposits /* RequestedLoan */,\\n    TransitioningFundsIn /* RequestedLoan */,\\n    AccruingInterest /* ActiveLoan */,\\n    RedemptionsClosed /* ActiveLoan */,\\n    TransitioningFundsOut /* MaturedLoan */,\\n    RedemptionsReleased /* Settled loan */\\n}\\n\\nstruct ILoanCompleteState {\\n    address loanAddr;\\n    address borrowerAddr;\\n    address fundingVaultAddr;\\n    address poolAddr;\\n    uint256 state;\\n    uint256 transitionState;\\n    uint256 durationDays;\\n    uint256 principal;\\n    uint256 startingPrincipal;\\n    uint256 interest;\\n    uint256 indicativeInterest;\\n    uint256 originationFee;\\n    uint256 indicativeApr;\\n    uint256 finalizedApr;\\n    uint256 exchangeRateAtDeposit;\\n    uint256 exchangeRateAtMaturity;\\n    uint256 fundingVaultBalance;\\n    uint256 assetsRolloverToNextLoan;\\n    uint256 assetsToReturnToPool;\\n    uint256 assetsFromPool;\\n    uint256 accrualStartDayTimestamp;\\n    uint256 accrualStartTimestamp;\\n    uint256 transferInWindowDurationDays;\\n    uint256 transferOutWindowDurationDays;\\n    uint256 depositClosingTimestamp;\\n    uint256 redemptionRequestClosingTimestamp;\\n    uint256 maturingTimestamp;\\n    uint256 redemptionAvailableTimestamp;\\n    ILoanRolloverAccounting rolloverAccounting;\\n    bool canRequestRedemption;\\n}\\n\\n/**\\n * @title The various Loan terms.\\n */\\nstruct ILoanSettings {\\n    uint256 principal;\\n    uint256 indicativeApr;\\n    uint256 finalizedApr;\\n    uint256 durationDays;\\n    uint256 dropDeadTimestamp;\\n    uint256 originationBps;\\n    uint256 accrualStartDayTimestamp;\\n    uint256 transferInWindowDurationDays;\\n    uint256 transferOutWindowDurationDays;\\n    address priorLoan;\\n    uint256 startingPrincipal;\\n}\\n\\nstruct ILoanRolloverAccounting {\\n    uint256 totalSupply;\\n    uint256 assetsFromPool;\\n    uint256 assetsFromPriorLoan;\\n    uint256 assetToReturnToPool;\\n    uint256 exchangeRateAtDeposit;\\n    uint256 exchangeRateAtMaturity;\\n}\\n\\n/**\\n * @title The primary interface for Perimeter loans.\\n */\\ninterface ILoan {\\n    /**\\n     * @dev Emitted when loan is funded.\\n     */\\n    event LoanFunded(address asset, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when a Loan's lifecycle state transitions\\n     */\\n    event LifeCycleStateTransition(ILoanLifeCycleState state);\\n\\n    function getRolloverAccounting()\\n        external\\n        view\\n        returns (ILoanRolloverAccounting memory);\\n\\n    function approve() external;\\n\\n    function canRequestRedemption() external view returns (bool);\\n\\n    function inDepositWindow() external view returns (bool);\\n\\n    function inInitiateRolloverWindow() external view returns (bool);\\n\\n    function exchangeRateAtDeposit() external view returns (uint256);\\n\\n    function exchangeRateAtMaturity() external view returns (uint256);\\n\\n    function assetsRolloverToNextLoan() external view returns (uint256);\\n\\n    function assetsFromPool() external view returns (uint256);\\n\\n    function assetsToReturnToPool() external view returns (uint256);\\n\\n    function accrualStartTimestamp() external view returns (uint256);\\n\\n    function accrualStartDayTimestamp() external view returns (uint256);\\n\\n    function transferInWindowDurationDays() external view returns (uint256);\\n\\n    function transferOutWindowDurationDays() external view returns (uint256);\\n\\n    function depositClosingTimestamp() external view returns (uint256);\\n\\n    function earlyRedeemRequestClosingTimestamp()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function redemptionRequestClosingTimestamp()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maturingTimestamp() external view returns (uint256);\\n\\n    function redemptionAvailableTimestamp() external view returns (uint256);\\n\\n    /**\\n     * @dev Current Loan lifecycle state.\\n     */\\n    function state() external view returns (ILoanLifeCycleState);\\n\\n    function transitionState() external view returns (ILoanTransitionState);\\n\\n    /**\\n     * @dev The loan's borrower.\\n     */\\n    function borrower() external view returns (address);\\n\\n    /**\\n     * @dev The pool associated with a loan.\\n     */\\n    function pool() external view returns (address);\\n\\n    /**\\n     * @dev The factory that created the loan.\\n     */\\n    function factory() external view returns (address);\\n\\n    /**\\n     * @dev A timestamp that controls when the loan can be dissolved\\n     */\\n    function dropDeadTimestamp() external view returns (uint256);\\n\\n    /**\\n     * @dev Amount expected in each payment\\n     */\\n    function interest() external view returns (uint256);\\n\\n    function indicativeInterest() external view returns (uint256);\\n\\n    function rolloverMaturedLoan() external;\\n\\n    function rolloverAndFinalizeApr(uint256 apr) external;\\n\\n    function rolloverAllocation(\\n        uint256 assetsRolloverToNextLoan_,\\n        uint256 assetToReturnToPool_\\n    ) external;\\n\\n    function completeRolloverNetPayment()\\n        external\\n        returns (\\n            uint256 feeVaultAmount,\\n            uint256 assetsReturnedToPool,\\n            uint256 interestAccrued\\n        );\\n\\n    function fundRollover(\\n        uint256 assetsFromPool,\\n        uint256 assetsFromPriorLoan,\\n        uint256 totalSupply,\\n        address priorLoan\\n    ) external returns (ILoanLifeCycleState);\\n\\n    function reschedule(\\n        uint256 accrualStartDayTimestamp_,\\n        uint256 transferInWindowDurationDays_,\\n        uint256 transferOutWindowDurationDays_,\\n        uint256 durationDays_\\n    ) external;\\n\\n    /**\\n     * @dev When the loan was created.\\n     */\\n    function createdAt() external returns (uint256);\\n\\n    /**\\n     * @dev Duration of the loan, after which the principal must be returned.\\n     */\\n    function durationDays() external view returns (uint256);\\n\\n    /**\\n     * @dev Interest rate for the loan.\\n     */\\n    function finalizedApr() external view returns (uint256);\\n\\n    function indicativeApr() external view returns (uint256);\\n\\n    function originationFee() external view returns (uint256);\\n\\n    /**\\n     * @dev Amount of loan principal.\\n     */\\n    function principal() external view returns (uint256);\\n\\n    function startingPrincipal() external view returns (uint256);\\n\\n    /**\\n     * @dev Address of the loan's funding vault, which holds liquidity transferred from the pool.\\n     */\\n    function fundingVault() external view returns (IVault);\\n\\n    /**\\n     * @dev Liquidity asset of the loan or pool.\\n     */\\n    function liquidityAsset() external view returns (address);\\n\\n    /**\\n     * @dev Address of the global service configuration.\\n     */\\n    function serviceConfiguration()\\n        external\\n        view\\n        returns (IServiceConfigurationV3);\\n\\n    function repayEarlyWithdraw(\\n        uint256 principal,\\n        uint256 assetReduction\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IERC4626.sol\\\";\\nimport \\\"./IServiceConfiguration.sol\\\";\\nimport \\\"../controllers/interfaces/IPoolController.sol\\\";\\n\\nimport \\\"./IPoolBase.sol\\\";\\nimport \\\"../controllers/interfaces/IWithdrawController.sol\\\";\\n\\nimport \\\"./ILoan.sol\\\";\\nimport \\\"../interfaces/IPoolAccessControl.sol\\\";\\n\\n/* Paired with rolloverTiming field */\\nenum IPoolRolloverState {\\n    EarlyRolloverInitiate, // 0 accept Deposits and WithdrawRequests, no early withdraws) transitionTiming = time to expected rollover */\\n    RolloverInitiate, // 1 no deposits or withdrawRequests)  transitionTiming = time left of  expected rollover */\\n    LateRolloverInitiate, // 2  transitionTiming = time expected rollover pastDue */\\n    EarlyRolloverFinalize, // 3 Requested\\n    RolloverFinalize, // 4 Requested\\n    LateRolloverFinalize, // 5 Requested\\n    EarlyRepayWithdrawsAndFees, // 6 Matured loan\\n    RepayWithdrawsAndFees, // 7 Matured loan\\n    LateRepayWithdrawsAndFees, // 8 Matured loan\\n    EarlyReleaseRedemptions, // 9 Matured loan\\n    ReleaseRedemptions, // 10 Matured loan\\n    LateReleaseRedemptions, // 11 Matured loan\\n    CreateNextLoan, // 12\\n    ApproveNextLoan, //13\\n    LateApproveNextLoan, //14\\n    LoanNeedsRescheduling, //15\\n    NotRollingOver, //16\\n    InvalidState // 17\\n}\\n\\nenum IPoolRolloverActor {\\n    PoolAdmin, // 0\\n    BorrowerManager, //1\\n    BorrowerWallet, //2\\n    Investor // 3\\n}\\n\\nstruct IPoolAccountings {\\n    uint256 totalAvailableAssets;\\n    uint256 outstandingLoanPrincipals;\\n    uint256 totalAssetsDeposited;\\n    uint256 totalAssetsWithdrawn;\\n}\\n\\nstruct IPoolRolloverStateStruct {\\n    IPoolRolloverState rolloverState;\\n    IPoolRolloverActor rolloverActor;\\n    uint256 rolloverTimeToActionWindow;\\n    uint256 rolloverTimeLeftInActionWindow;\\n    uint256 rolloverTimePastActionWindow;\\n}\\n\\nstruct IPoolConfigurationState {\\n    address poolAddr;\\n    address admin;\\n    address poolController;\\n    address feeVault;\\n    address withdrawController;\\n    string name;\\n    string symbol;\\n    address borrowerManager;\\n    address borrowerWallet;\\n    address borrowerVault;\\n    uint256 maxCapacity;\\n    uint256 closeOfBusinessTime;\\n    uint256 poolEndDate;\\n    address liquidityPoolAssetAddr;\\n}\\nstruct IRedemptionState {\\n    address[] redemptionLenders;\\n    uint256[] requestedShares;\\n    uint256[] redeemableShares;\\n}\\nstruct IPoolOverviewState {\\n    address poolAddr;\\n    address[] settledLoans;\\n    uint8 state;\\n    uint8 rolloverState;\\n    uint8 rolloverActor;\\n    uint256 rolloverTimeToActionWindow;\\n    uint256 rolloverTimeLeftInActionWindow;\\n    uint256 rolloverTimePastActionWindow;\\n    uint256 totalAvailableAssets;\\n    uint256 totalAvailableSupply;\\n    uint256 currentExpectedInterest;\\n    uint256 liquidityPoolAssets;\\n    uint256 totalAssets;\\n    uint256 totalOutstandingLoanPrincipal;\\n    uint256 totalAssetsDeposited;\\n    uint256 totalAssetsWithdrawn;\\n    uint256 totalRequestedShares;\\n    uint256 totalRedeemableShares;\\n    uint256 totalWithdrawableAssets;\\n    uint256 totalRequestedAssets;\\n    uint256 feeVaultBalance;\\n    uint256 borrowerVaultBalance;\\n    uint256 borrowerWalletBalance;\\n    uint256 poolBalance;\\n    uint256 exchangeRateAtMaturity;\\n    ILoanCompleteState requestedLoanState;\\n    ILoanCompleteState activeLoanState;\\n    ILoanCompleteState maturedLoanState;\\n    ILoanCompleteState createdLoanState;\\n    IRedemptionState redemptionState;\\n    uint256 totalEarlyRequestedShares;\\n    uint256 totalEarlyRequestedAssets;\\n    uint256 totalEarlyAcceptedShares;\\n    uint256 totalEarlyAcceptedAssets;\\n}\\n\\nstruct IPoolAccountState {\\n    address poolAddr;\\n    address accountAddr;\\n    uint256 balance;\\n    uint256 maxWithdrawRequest;\\n    uint256 maxRedeemRequest;\\n    uint256 maxWithdraw;\\n    uint256 maxRedeem;\\n    uint256 requestedSharesOf;\\n    uint256 redeemableSharesOf;\\n    uint256 requestedAssetsOf;\\n    uint256 withdrawableAssetsOf;\\n    uint256 earlyRequestedSharesOf;\\n    uint256 earlyRequestedAssetsOf;\\n    uint256 earlyAcceptedSharesOf;\\n    uint256 earlyAcceptedAssetsOf;\\n}\\n\\nstruct PoolAddressList {\\n    address liquidityAsset;\\n    address poolAdmin;\\n    address serviceConfiguration;\\n    address withdrawControllerFactory;\\n    address poolControllerFactory;\\n    address vaultFactory;\\n    address poolAccessControlFactory;\\n}\\n\\n/**\\n * @title The interface for liquidity pools.\\n */\\ninterface IPool is IPoolBase {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev The PoolController contract\\n     */\\n    function poolController() external view returns (IPoolController);\\n\\n    /**\\n     * @dev The WithdrawController contract\\n     */\\n    function withdrawController() external view returns (IWithdrawController);\\n\\n    /**\\n     * @dev The current configurable pool settings.\\n     */\\n    function settings()\\n        external\\n        view\\n        returns (IPoolConfigurableSettings calldata settings);\\n\\n    /**\\n     * @dev The current pool state.\\n     */\\n    function state() external view returns (IPoolLifeCycleState);\\n\\n    /**\\n     * @dev The pool accounting variables;\\n     */\\n    function accountings() external view returns (IPoolAccountings memory);\\n\\n    function closeOfBusinessTime() external view returns (uint256);\\n\\n    /**\\n     * @dev Callback from the pool controller when the pool is activated\\n     */\\n    function onActivated() external;\\n\\n    function initiateRollover(address loan, address priorLoan) external;\\n\\n    function completeRolloverNetPayment(address) external;\\n\\n    function withdrawFeeVault(uint256 amount, address receiver) external;\\n\\n    function loanCreated(address loan) external;\\n\\n    function reschedule(\\n        address loan,\\n        uint256 accrualStartDayTimestamp,\\n        uint256 transferInWindowDurationDays,\\n        uint256 transferOutWindowDurationDays,\\n        uint256 durationDays\\n    ) external;\\n\\n    function redemptionState()\\n        external\\n        view\\n        returns (IRedemptionState memory _redemptionState);\\n\\n    function releaseRolloverRedemption(address owner) external;\\n\\n    function exchangeRateAtMaturity()\\n        external\\n        view\\n        returns (uint256 _exchangeRateAtMaturity);\\n\\n    function exchangeRateAtDeposit() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculate the total amount of underlying assets held by the vault,\\n     * excluding any assets due for withdrawal.\\n     */\\n    function totalAvailableAssets() external view returns (uint256);\\n\\n    /**\\n     * @dev The total available supply that is not marked for withdrawal\\n     */\\n    function totalAvailableSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev The accrued interest at the current block.\\n     */\\n    function currentExpectedInterest() external view returns (uint256 interest);\\n\\n    function rolloverAndFinalizeApr(uint256 _apr) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       LOAN SET OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function approveLoanForPool(address loan) external;\\n\\n    function createdLoan() external view returns (address);\\n\\n    function activeLoan() external view returns (address);\\n\\n    function requestedLoan() external view returns (address);\\n\\n    function maturedLoan() external view returns (address);\\n\\n    function settledLoans() external view returns (address[] memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         Early Withdraw\\n   //////////////////////////////////////////////////////////////*/\\n\\n    function requestEarlyRedeem(uint256 shares) external;\\n\\n    function acceptEarlyRedeemRequest(\\n        address investorAddr\\n    ) external returns (uint256 principal);\\n\\n    function repayEarlyWithdraw(\\n        address investorAddr,\\n        uint256 amount\\n    )\\n        external\\n        returns (\\n            uint256 principal,\\n            uint256 repayment,\\n            uint256 redeemedShares,\\n            uint256 fees\\n        );\\n\\n    function deposit(\\n        uint256 assets,\\n        address lender\\n    ) external returns (uint256 shares);\\n\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    function maxWithdraw(address owner) external view returns (uint256 assets);\\n\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function asset() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title The interface for controlling access to Pools\\n */\\ninterface IPoolAccessControl {\\n    /**\\n     * @dev Check if an address is allowed as a participant in the pool\\n     * @param addr The address to verify\\n     * @return whether the address is allowed as a participant\\n     */\\n    function isAllowed(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestWithdrawable.sol\\\";\\n\\nimport \\\"./IServiceConfigurationV3.sol\\\";\\nimport \\\"./IPoolAccessControl.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nenum IPoolType {\\n    TermPool,\\n    FlexRatePool\\n}\\n\\ninterface IPoolBase is IERC20Upgradeable, IRequestWithdrawable {\\n    function poolType() external view returns (IPoolType);\\n\\n    function liquidityAssetAddr() external view returns (address);\\n\\n    function version() external view returns (uint16);\\n\\n    /**\\n     * @dev The ServiceConfiguration.\\n     */\\n    function serviceConfiguration()\\n        external\\n        view\\n        returns (IServiceConfigurationV3);\\n\\n    /**\\n     * @dev The admin for the pool.\\n     */\\n    function admin() external view returns (address);\\n\\n    function borrowerManagerAddr() external view returns (address);\\n\\n    function borrowerWalletAddr() external view returns (address);\\n\\n    /**\\n     * @dev The activation timestamp of the pool.\\n     */\\n    function activatedAt() external view returns (uint256);\\n\\n    function poolAccessControl() external view returns (IPoolAccessControl);\\n\\n    /**\\n     * @dev The sum of all assets available in the liquidity pool, excluding\\n     * any assets that are marked for withdrawal.\\n     */\\n    function liquidityPoolAssets() external view returns (uint256);\\n\\n    function isPermittedLender(address) external view returns (bool);\\n\\n    function maxDeposit(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title The interface for interacting with Terms of Service Acceptance Registry.\\n */\\ninterface IPoolRegistry {\\n    function version() external pure returns (uint16);\\n\\n    function addPool(address pool) external;\\n\\n    function pools() external returns (address[] memory);\\n\\n    function updatePoolData(address poolAddr) external;\\n\\n    function isPoolRegistered(address poolAddr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRequestWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Interface that exposes methods to request withdraws / redeems.\\n * @dev Terminology and design informed to complement ERC4626.\\n */\\ninterface IRequestWithdrawable {\\n    /**\\n     * @dev Returns the maximum number of `shares` that can be\\n     * requested to be redeemed from the owner balance with a single\\n     * `requestRedeem` call in the current block.\\n     *\\n     * Note: This is equivalent of EIP-4626 `maxRedeem`\\n     */\\n    function maxRedeemRequest(\\n        address owner\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Returns the maximum amount of underlying `assets` that can be\\n     * requested to be withdrawn from the owner balance with a single\\n     * `requestWithdraw` call in the current block.\\n     *\\n     * Note: This is equivalent of EIP-4626 `maxWithdraw`\\n     */\\n    function maxWithdrawRequest(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Simulate the effects of a redeem request at the current block.\\n     * Returns the amount of underlying assets that would be requested if this\\n     * entire redeem request were to be processed at the current block.\\n     *\\n     * Note: This is equivalent of EIP-4626 `previewRedeem`\\n     */\\n    function previewRedeemRequest(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Simulate the effects of a withdrawal request at the current block.\\n     * Returns the amount of `shares` that would be burned if this entire\\n     * withdrawal request were to be processed at the current block.\\n     *\\n     * Note: This is equivalent of EIP-4626 `previewWithdraw`\\n     */\\n    function previewWithdrawRequest(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Submits a withdrawal request, incurring a fee.\\n     */\\n    function requestRedeem(uint256 shares) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IServiceConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nstruct SerivceAddressList {\\n    address[] liquidityAssets;\\n    address tosAcceptanceRegistry;\\n    address loanFactory;\\n    address poolFactoryAddress;\\n    address queryLibAddress;\\n    address poolLibAddress;\\n    address loanLibAddress;\\n    address poolControllerFactoryAddress;\\n    address withdrawControllerFactoryAddress;\\n    address vaultFactoryAddress;\\n    address poolAccessControlFactoryAddress;\\n}\\n\\n/**\\n * @title The protocol global Service Configuration\\n */\\ninterface IServiceConfiguration {\\n    /**\\n     * @dev Emitted when an address is changed.\\n     */\\n    event AddressSet(bytes32 which, address addr);\\n\\n    /**\\n     * @dev Emitted when a liquidity asset is set.\\n     */\\n    event LiquidityAssetSet(address addr, bool value);\\n\\n    /**\\n     * @dev Emitted when a parameter is set.\\n     */\\n    event ParameterSet(bytes32, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the protocol is paused.\\n     */\\n    event ProtocolPaused(bool paused);\\n\\n    /**\\n     * @dev Emitted when a loan factory is set\\n     */\\n    event LoanFactorySet(address indexed factory);\\n    event PoolFactorySet(address indexed factory);\\n    event QueryLibSet(address indexed factory);\\n    event LoanLibSet(address indexed factory);\\n    event PoolLibSet(address indexed factory);\\n    event PoolAdminWalletSet(address indexed factory);\\n\\n    /**\\n     * @dev Emitted when the TermsOfServiceRegistry is set\\n     */\\n    event TermsOfServiceRegistrySet(address indexed registry);\\n\\n    /**\\n     * @dev checks if a given address has the Operator role\\n     */\\n    function isOperator(address addr) external view returns (bool);\\n\\n    /**\\n     * @dev checks if a given address has the Deployer role\\n     */\\n    function isDeployer(address addr) external view returns (bool);\\n\\n    /**\\n     * @dev checks if a given address has the Deployer role\\n     */\\n    function isPoolAdmin(address addr) external view returns (bool);\\n\\n    /**\\n     * @dev checks if a given address has the Deployer role\\n     */\\n    function isBorrower(address addr) external view returns (bool);\\n\\n    /**\\n     * @dev Whether the protocol is paused.\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev Whether an address is supported as a liquidity asset.\\n     */\\n    function isLiquidityAsset(address addr) external view returns (bool);\\n\\n    /**\\n     * @dev Address of the Terms of Service acceptance registry.\\n     */\\n    function tosAcceptanceRegistry() external view returns (address);\\n\\n    /**\\n     * @dev Sets whether a loan factory is valid\\n     * @param addr Address of loan factory\\n     */\\n    function setLoanFactory(address addr) external;\\n\\n    function setPoolFactory(address addr) external;\\n\\n    function setQueryLib(address addr) external;\\n\\n    function setPoolLib(address addr) external;\\n\\n    function setLoanLib(address addr) external;\\n\\n    function getLoanFactory() external view returns (address);\\n\\n    function getPoolFactory() external view returns (address);\\n\\n    function getQueryLib() external view returns (address);\\n\\n    function getLoanLib() external view returns (address);\\n\\n    function getPoolLib() external view returns (address);\\n\\n    function setPoolAdminWallet(address addr) external;\\n\\n    function getPoolAdminWallet() external view returns (address);\\n\\n    /**\\n     * @dev Sets the ToSAcceptanceRegistry for the protocol\\n     * @param addr Address of registry\\n     */\\n    function setToSAcceptanceRegistry(address addr) external;\\n\\n    /**\\n     * @dev Sets supported liquidity assets for the protocol. Callable by the operator.\\n     * @param addr Address of liquidity asset\\n     * @param value Whether supported or not\\n     */\\n    function setLiquidityAsset(address addr, bool value) external;\\n\\n    function getServiceAddressList()\\n        external\\n        view\\n        returns (SerivceAddressList memory setLoanFactoryerivceAddressList);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IServiceConfigurationV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IServiceConfiguration.sol\\\";\\n\\nstruct SerivceAddressListV3 {\\n    address[] liquidityAssets;\\n    address tosAcceptanceRegistry;\\n    address loanFactory;\\n    address poolFactoryAddress;\\n    address poolFactoryFlexAddress;\\n    address queryLibAddress;\\n    address poolLibAddress;\\n    address poolLibFlexAddress;\\n    address loanLibAddress;\\n    address poolControllerFactoryAddress;\\n    address withdrawControllerFactoryAddress;\\n    address vaultFactoryAddress;\\n    address poolAccessControlFactoryAddress;\\n    address poolControllerFactoryFlexAddress;\\n    address withdrawDepositControllerFactoryFlexAddress;\\n    address poolRegistryAddress;\\n}\\n\\nenum IFactoryType {\\n    PoolFactory,\\n    LoanFactory,\\n    VaultFactory,\\n    PoolFactoryFlex,\\n    PoolControllerFactory,\\n    PoolLibFlex,\\n    PoolControllerFactoryFlex,\\n    WithdrawDepositControllerFactoryFlex,\\n    WithdrawControllerFactory,\\n    PoolAccessControlFactory\\n}\\nstruct LegacyFactoryStruct {\\n    IFactoryType factoryType;\\n    address factoryAddress;\\n}\\n\\n/**\\n * @title The protocol global Service Configuration\\n */\\ninterface IServiceConfigurationV3 is IServiceConfiguration {\\n    event PoolFactoryFlexSet(address indexed factory);\\n\\n    event PoolLibFlexSet(address indexed factory);\\n\\n    event PoolRegistrySet(address indexed factory);\\n\\n    function version() external pure returns (uint16);\\n\\n    function isAutomation(address addr) external view returns (bool);\\n\\n    function setPoolFactoryFlex(address addr) external;\\n\\n    function setPoolLibFlex(address addr) external;\\n\\n    function setPoolRegistry(address addr) external;\\n\\n    function getPoolRegistry() external view returns (address);\\n\\n    function getPoolFactoryFlex() external view returns (address);\\n\\n    function getPoolLibFlex() external view returns (address);\\n\\n    function getLegacyFactories()\\n        external\\n        view\\n        returns (LegacyFactoryStruct[] memory legacyFactories);\\n\\n    function getServiceAddressListV3()\\n        external\\n        view\\n        returns (SerivceAddressListV3 memory addressList);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Interface for the Vault.\\n * @dev Vaults simply hold a balance, and allow withdrawals by the Vault's owner.\\n */\\ninterface IVault {\\n    /**\\n     * @dev Emitted on ERC20 withdrawals\\n     */\\n    event WithdrewERC20(\\n        address indexed asset,\\n        uint256 amount,\\n        address indexed receiver\\n    );\\n\\n    /**\\n     * @dev Emitted on ERC721 withdrawals\\n     */\\n    event WithdrewERC721(\\n        address indexed asset,\\n        uint256 tokenId,\\n        address receiver\\n    );\\n\\n    /**\\n     * @dev Withdraws ERC20 of a given asset\\n     */\\n    function withdrawERC20(\\n        address asset,\\n        uint256 amount,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws ERC20 of a given asset\\n     */\\n    function withdrawERC20ToBorrowerWallet(\\n        address asset,\\n        uint256 amount\\n    ) external;\\n\\n    function payFees(address asset, uint256 amount) external;\\n\\n    function repayLoan(address asset, uint256 amount) external;\\n\\n    /**\\n     * @dev Withdraws ERC721 with specified tokenId\\n     */\\n    function withdrawERC721(\\n        address asset,\\n        uint256 tokenId,\\n        address receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/ILoan.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IServiceConfigurationV3.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\nlibrary LoanLib {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant RAY = 10 ** 27;\\n\\n    function version() public pure returns (uint16) {\\n        return 256 * 1 + 0;\\n    }\\n\\n    /**\\n     * @dev Emitted when loan is funded.\\n     */\\n    event LoanFunded(address asset, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when loan principal is repaid ahead of schedule.\\n     */\\n    event LoanPrincipalPaid(\\n        address asset,\\n        uint256 amount,\\n        address fundingVault\\n    );\\n\\n    /**\\n     * @dev Emitted when a loan payment is made.\\n     */\\n    event LoanPaymentMade(address pool, address liquidityAsset, uint256 amount);\\n\\n    /**\\n     * @dev See ILoan\\n     */\\n\\n    /**\\n     * @dev Validate Loan constructor arguments\\n     */\\n    function validateLoan(\\n        IServiceConfigurationV3 config,\\n        IPool pool,\\n        ILoanSettings memory loanSettings,\\n        address liquidityAsset\\n    ) external view {\\n        require(\\n            loanSettings.durationDays > 0,\\n            \\\"LoanLib: Duration cannot be zero\\\"\\n        );\\n\\n        require(\\n            config.isLiquidityAsset(liquidityAsset),\\n            \\\"LoanLib: Liquidity asset not allowed\\\"\\n        );\\n        require(\\n            pool.asset() == liquidityAsset,\\n            \\\"LoanLib: Not allowed asset for pool\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Called on loan fundings, pulls funds from the pool into the\\n     * loan's funding vault.\\n     */\\n    function fundRolloverLoan(\\n        address liquidityAsset,\\n        IVault borrowerVault,\\n        uint256 amount\\n    ) public returns (ILoanLifeCycleState) {\\n        if (amount > 0) {\\n            IERC20(liquidityAsset).safeTransferFrom(\\n                msg.sender,\\n                address(borrowerVault),\\n                amount\\n            );\\n        }\\n\\n        emit LoanFunded(liquidityAsset, amount);\\n        return ILoanLifeCycleState.Funded;\\n    }\\n\\n    function previewOriginationFee(\\n        ILoanSettings calldata settings,\\n        uint256 scalingValue\\n    ) public pure returns (uint256) {\\n        return\\n            settings\\n                .startingPrincipal\\n                .mul(settings.originationBps)\\n                .mul(settings.durationDays.mul(scalingValue).div(360))\\n                .div(RAY)\\n                .div(10000);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PoolLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/ILoan.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/ILoan.sol\\\";\\nimport \\\"../interfaces/IServiceConfigurationV3.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../factories/LoanFactory.sol\\\";\\n\\n/**\\n * @title Collection of functions used by the Pool and PoolController.\\n */\\nlibrary PoolLib {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public constant RAY = 10 ** 27;\\n\\n    /**\\n     * @dev See IERC4626\\n     */\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev See IPoolController\\n     */\\n    event PoolSettingsUpdated();\\n\\n    function version() public pure returns (uint16) {\\n        return 256 * 1 + 0;\\n    }\\n\\n    /**\\n     * @dev Divide two numbers and round the result up\\n     */\\n    function divideCeil(\\n        uint256 lhs,\\n        uint256 rhs\\n    ) internal pure returns (uint256) {\\n        return (lhs + rhs - 1) / rhs;\\n    }\\n\\n    /**\\n     * @dev Computes the exchange rate for converting assets to shares\\n     * @param input The input to the conversion\\n     * @param numerator Numerator of the conversion rate\\n     * @param denominator Denominator of the conversion rate\\n     * @param roundUp Whether it should be rounded up or down.\\n     * @return output The converted amount\\n     */\\n    function calculateConversion(\\n        uint256 input,\\n        uint256 numerator,\\n        uint256 denominator,\\n        bool roundUp\\n    ) public pure returns (uint256 output) {\\n        if (numerator == 0 || denominator == 0) {\\n            return input;\\n        }\\n\\n        uint256 rate = numerator.mul(RAY).div(denominator);\\n        if (roundUp) {\\n            return divideCeil(rate.mul(input), RAY);\\n        } else {\\n            return rate.mul(input).div(RAY);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private method to determine if a pool is solvent given\\n     * the parameters.\\n     *\\n     * If the pool has assets, it is solvent. If no assets are available,\\n     * but no shares have been issued, it is solvent. Otherwise, it is insolvent.\\n     */\\n    function isSolvent(\\n        uint256 totalAssets,\\n        uint256 totalShares\\n    ) private pure returns (bool) {\\n        return totalAssets > 0 || totalShares == 0;\\n    }\\n\\n    /**\\n     * @dev Calculates total assets held by Vault (including those marked for withdrawal)\\n     * @param asset Amount of total assets held by the Vault\\n     * @param vault Address of the ERC4626 vault\\n     * @param outstandingLoanPrincipals Sum of all outstanding loan principals\\n     * @return totalAssets Total assets\\n     */\\n    function calculateTotalAssets(\\n        address asset,\\n        address vault,\\n        uint256 outstandingLoanPrincipals,\\n        uint256 currentExpectedInterest\\n    ) public view returns (uint256 totalAssets) {\\n        totalAssets =\\n            IERC20(asset).balanceOf(vault) +\\n            outstandingLoanPrincipals +\\n            currentExpectedInterest;\\n    }\\n\\n    /**\\n     * @dev Calculates total assets held by Vault (excluding marked for withdrawal)\\n     * @param asset Amount of total assets held by the Vault\\n     * @param vault Address of the ERC4626 vault\\n     * @param outstandingLoanPrincipals Sum of all outstanding loan principals\\n     * @param withdrawableAssets Sum of all withdrawable assets\\n     * @return totalAvailableAssets Total available assets (excluding marked for withdrawal)\\n     */\\n    function calculateTotalAvailableAssets(\\n        address asset,\\n        address vault,\\n        uint256 outstandingLoanPrincipals,\\n        uint256 withdrawableAssets,\\n        address loanAddr\\n    ) external view returns (uint256 totalAvailableAssets) {\\n        if (loanAddr != address(0)) {\\n            ILoan loan = ILoan(loanAddr);\\n\\n            totalAvailableAssets =\\n                IERC20(asset).balanceOf(vault) +\\n                //loan.outstandingPrincipal() +\\n                outstandingLoanPrincipals +\\n                loan.interest() -\\n                withdrawableAssets;\\n        } else {\\n            totalAvailableAssets =\\n                calculateTotalAssets(\\n                    asset,\\n                    vault,\\n                    outstandingLoanPrincipals,\\n                    0\\n                ) -\\n                withdrawableAssets;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates total shares held by Vault (excluding marked for redemption)\\n     * @param vault Address of the ERC4626 vault\\n     * @param redeemableShares Sum of all withdrawable assets\\n     * @return totalAvailableShares Total redeemable shares (excluding marked for redemption)\\n     */\\n    function calculateTotalAvailableShares(\\n        address vault,\\n        uint256 redeemableShares\\n    ) external view returns (uint256 totalAvailableShares) {\\n        totalAvailableShares = IERC20(vault).totalSupply() - redeemableShares;\\n    }\\n\\n    /**\\n     * @dev Calculates the max deposit allowed in the pool\\n     * @param poolLifeCycleState The current pool lifecycle state\\n     * @param poolMaxCapacity Max pool capacity allowed per the pool settings\\n     * @param totalAvailableAssets Sum of all pool assets (excluding marked for withdrawal)\\n     * @return Max deposit allowed\\n     */\\n    function calculateMaxDeposit(\\n        IPoolLifeCycleState poolLifeCycleState,\\n        uint256 poolMaxCapacity,\\n        uint256 totalAvailableAssets\\n    ) external pure returns (uint256) {\\n        uint256 remainingCapacity = poolMaxCapacity > totalAvailableAssets\\n            ? poolMaxCapacity - totalAvailableAssets\\n            : 0;\\n        return\\n            poolLifeCycleState == IPoolLifeCycleState.Active\\n                ? remainingCapacity\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev Executes a deposit into the pool\\n     * @param asset Pool liquidity asset\\n     * @param vault Address of ERC4626 vault\\n     * @param lender Address of receiver of shares\\n     * @param assets Amount of assets being deposited\\n     * @param shares Amount of shares being minted\\n     * @param maxDeposit Max allowed deposit into the pool\\n     * @param mint A pointer to the mint function\\n     * @return The amount of shares being minted\\n     */\\n    function executeDeposit(\\n        address asset,\\n        address vault,\\n        address lender,\\n        uint256 assets,\\n        uint256 shares,\\n        uint256 maxDeposit,\\n        function(address, uint256) mint,\\n        IPoolAccountings storage accountings\\n    ) internal returns (uint256) {\\n        require(shares > 0, \\\"Pool: 0 deposit not allowed\\\");\\n        require(assets <= maxDeposit, \\\"Pool: Exceeds max deposit\\\");\\n\\n        IERC20(asset).safeTransferFrom(msg.sender, vault, assets);\\n        mint(lender, shares);\\n\\n        emit Deposit(msg.sender, lender, assets, shares);\\n        accountings.totalAvailableAssets += assets;\\n        accountings.totalAssetsDeposited += assets;\\n        return shares;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    Withdrawal Request Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function calculateRollover(\\n        address priorLoan,\\n        address _liquidityAsset,\\n        address pool,\\n        uint256 outstandingLoanPrincipals_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 outstandingLoanPrincipals,\\n            uint256 assetsFromPool,\\n            uint256 assetsFromPriorToNextLoan,\\n            uint256 totalSupply,\\n            uint256 assetToAReturnToPool\\n        )\\n    {\\n        require(\\n            address(IPool(pool).poolController()) != address(0) &&\\n                msg.sender == address(IPool(pool).poolController()),\\n            \\\"PoolLib: caller is not pool controller\\\"\\n        );\\n        if (priorLoan == address(0)) {\\n            outstandingLoanPrincipals = IERC20(_liquidityAsset).balanceOf(pool);\\n            require(\\n                IPool(pool).totalAvailableSupply() > 0,\\n                \\\"No Funds to start loan\\\"\\n            );\\n\\n            assetsFromPool = outstandingLoanPrincipals;\\n            assetsFromPriorToNextLoan = 0;\\n            totalSupply = IPool(pool).totalAvailableSupply();\\n            assetToAReturnToPool = 0;\\n        } else {\\n            uint256 requestedAssets = (\\n                IPool(pool).withdrawController().totalRequestedShares().mul(\\n                    IPool(pool).exchangeRateAtMaturity()\\n                )\\n            ).div(1e18);\\n            uint256 poolBalance = IERC20(_liquidityAsset).balanceOf(pool);\\n            totalSupply =\\n                IPool(pool).totalAvailableSupply() -\\n                IPool(pool).withdrawController().totalRequestedShares();\\n\\n            if (requestedAssets < poolBalance) {\\n                assetsFromPool = poolBalance - requestedAssets;\\n                assetsFromPriorToNextLoan =\\n                    ILoan(priorLoan).principal() +\\n                    ILoan(priorLoan).interest();\\n\\n                assetToAReturnToPool = 0;\\n                outstandingLoanPrincipals =\\n                    outstandingLoanPrincipals_ +\\n                    assetsFromPool;\\n            } else {\\n                assetsFromPool = 0;\\n                assetsFromPriorToNextLoan =\\n                    poolBalance +\\n                    ILoan(priorLoan).principal() +\\n                    ILoan(priorLoan).interest() -\\n                    requestedAssets;\\n\\n                assetToAReturnToPool =\\n                    requestedAssets -\\n                    IERC20(_liquidityAsset).balanceOf(pool);\\n\\n                outstandingLoanPrincipals =\\n                    outstandingLoanPrincipals_ +\\n                    IERC20(_liquidityAsset).balanceOf(pool);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Loan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ILoan.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IServiceConfigurationV3.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./factories/interfaces/IVaultFactory.sol\\\";\\nimport \\\"./libraries/LoanLib.sol\\\";\\nimport \\\"./upgrades/BeaconImplementation.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPoolAccessControl.sol\\\";\\n\\n/**\\n * @title Perimeter Loan contract.\\n */\\ncontract Loan is ILoan, BeaconImplementation {\\n    using SafeMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    IServiceConfigurationV3 private _serviceConfiguration;\\n    /**\\n     * @dev The reference to the access control contract\\n     */\\n    IPoolAccessControl public poolAccessControl;\\n\\n    address private _factory;\\n    ILoanLifeCycleState private _state = ILoanLifeCycleState.Requested;\\n    ILoanTransitionState private _transitionState =\\n        ILoanTransitionState.Created;\\n    address private _borrower;\\n    address private _pool;\\n    IVault public fundingVault;\\n    uint256 public createdAt;\\n    address public liquidityAsset;\\n    uint256 public interest;\\n    uint256 public indicativeInterest;\\n    uint256 public originationFee;\\n\\n    ILoanRolloverAccounting public rolloverAccounting;\\n\\n    uint256 public accrualStartTimestamp;\\n    uint256 public depositClosingTimestamp;\\n    uint256 public redemptionRequestClosingTimestamp;\\n    uint256 public earlyRedeemRequestClosingTimestamp;\\n    uint256 public maturingTimestamp;\\n    uint256 public redemptionAvailableTimestamp;\\n\\n    uint256 public _assetsRolloverToNextLoan;\\n    uint256 public _assetsToReturnToPool;\\n\\n    ILoanSettings public settings;\\n\\n    event FundsReclaimed(uint256 amount, address pool);\\n\\n    event LoanScheduleViolation(\\n        ILoanTransitionState transitionState,\\n        uint256 timestamp,\\n        uint256 windowStart,\\n        uint256 windowEnd\\n    );\\n\\n    /**\\n     * @dev Modifier that requires the protocol not be paused.\\n     */\\n    modifier onlyNotPaused() {\\n        require(\\n            IServiceConfigurationV3(_serviceConfiguration).paused() == false,\\n            \\\"Loan: Protocol paused\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that requires the Loan be in the given `state_`\\n     */\\n    modifier onlyLifeCycleState(ILoanLifeCycleState state_) {\\n        require(\\n            _state == state_,\\n            \\\"Loan: FunctionInvalidAtThisILoanLifeCycleState\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyTransitionState(ILoanTransitionState transitionState_) {\\n        require(\\n            _transitionState == transitionState_,\\n            \\\"Loan: FunctionInvalidAtThisILoanLifeCycleState\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that requires `msg.sender` to be the pool. Loan assumes the pool has performed access checks\\n     */\\n    modifier onlyPool() {\\n        require(msg.sender == _pool, \\\"Loan: caller is not pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that can be overriden by derived classes to enforce\\n     * access control.\\n     */\\n    modifier onlyPermittedBorrower() {\\n        require(\\n            poolAccessControl.isAllowed(msg.sender),\\n            \\\"Loan: Only Permitted Borrower allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function version() public pure returns (uint16) {\\n        return 256 * 1 + 0;\\n    }\\n\\n    function roundToDays(uint256 timestamp) public pure returns (uint256) {\\n        return timestamp.div(1 days).mul(1 days);\\n    }\\n\\n    function inDepositWindow() external view override returns (bool) {\\n        return block.timestamp < depositClosingTimestamp;\\n    }\\n\\n    function canRequestRedemption() external view override returns (bool) {\\n        return\\n            _transitionState == ILoanTransitionState.Created ||\\n            _transitionState == ILoanTransitionState.ApprovedForDeposits ||\\n            _transitionState == ILoanTransitionState.AccruingInterest;\\n    }\\n\\n    function inInitiateRolloverWindow() external view override returns (bool) {\\n        return\\n            block.timestamp > depositClosingTimestamp &&\\n            block.timestamp < accrualStartTimestamp;\\n    }\\n\\n    function initialize(\\n        address serviceConfiguration_,\\n        address factory_,\\n        address borrower_,\\n        address pool_,\\n        address liquidityAsset_,\\n        address vaultFactory,\\n        ILoanSettings memory settings_\\n    ) public virtual initializer {\\n        require(settings_.indicativeApr > 0, \\\"Loan:  APR cannot be zero\\\");\\n        require(settings_.durationDays > 0, \\\"Loan:  Duration cannot be zero\\\");\\n        require(\\n            settings_.transferInWindowDurationDays > 0,\\n            \\\"Loan:  transferInWindowDurationDays cannot be zero\\\"\\n        );\\n        require(\\n            settings_.transferOutWindowDurationDays > 0,\\n            \\\"Loan:  transition cannot be zero\\\"\\n        );\\n        require(\\n            settings_.accrualStartDayTimestamp >\\n                block.timestamp +\\n                    settings_.transferInWindowDurationDays *\\n                    (1 days),\\n            \\\"Loan: accrualStartDayTimestamp must be greater than now plus transferInWindowDurationDays\\\"\\n        );\\n        require(factory_ != address(0), \\\"Loan:  Factory cannot be zero\\\");\\n        require(pool_ != address(0), \\\"Loan:  Factory cannot be zero\\\");\\n        require(\\n            vaultFactory != address(0),\\n            \\\"Loan:  VaultFactory cannot be zero\\\"\\n        );\\n        require(\\n            borrower_ == IPool(pool_).borrowerManagerAddr(),\\n            \\\"Loan:  Borrower must be pool borrower manager\\\"\\n        );\\n        _serviceConfiguration = IServiceConfigurationV3(serviceConfiguration_);\\n        poolAccessControl = IPool(pool_).poolAccessControl();\\n\\n        _factory = factory_;\\n        _borrower = borrower_;\\n        _pool = pool_;\\n\\n        fundingVault = IVault(\\n            IVaultFactory(vaultFactory).createVault(\\n                address(this),\\n                IVaultType.FundingVault\\n            )\\n        );\\n        createdAt = block.timestamp;\\n        liquidityAsset = liquidityAsset_;\\n        settings = settings_;\\n        calculateSchedule();\\n\\n        LoanLib.validateLoan(\\n            _serviceConfiguration,\\n            IPool(_pool),\\n            settings,\\n            liquidityAsset\\n        );\\n    }\\n\\n    function calculateSchedule() internal {\\n        accrualStartTimestamp =\\n            roundToDays(settings.accrualStartDayTimestamp) +\\n            IPool(_pool).closeOfBusinessTime();\\n        depositClosingTimestamp =\\n            accrualStartTimestamp -\\n            settings.transferInWindowDurationDays *\\n            (1 days);\\n\\n        redemptionRequestClosingTimestamp =\\n            accrualStartTimestamp +\\n            (settings.durationDays - settings.transferInWindowDurationDays) *\\n            (1 days);\\n        maturingTimestamp =\\n            accrualStartTimestamp +\\n            settings.durationDays *\\n            (1 days);\\n        redemptionAvailableTimestamp =\\n            accrualStartTimestamp +\\n            (settings.durationDays + settings.transferOutWindowDurationDays) *\\n            (1 days);\\n        earlyRedeemRequestClosingTimestamp =\\n            accrualStartTimestamp +\\n            (settings.durationDays -\\n                settings.transferInWindowDurationDays -\\n                settings.transferOutWindowDurationDays) *\\n            (1 days);\\n    }\\n\\n    function reschedule(\\n        uint256 accrualStartDayTimestamp_,\\n        uint256 transferInWindowDurationDays_,\\n        uint256 transferOutWindowDurationDays_,\\n        uint256 durationDays_\\n    ) external override onlyPool onlyNotPaused {\\n        require(\\n            _state != ILoanLifeCycleState.Settled &&\\n                _state != ILoanLifeCycleState.Canceled,\\n            \\\"Loan: can not be settled or canceled\\\"\\n        );\\n        require(\\n            transferInWindowDurationDays_ > 0,\\n            \\\"Loan:  transferInWindowDurationDays cannot be zero\\\"\\n        );\\n        require(\\n            transferOutWindowDurationDays_ > 0,\\n            \\\"Loan:  transferOutWindowDurationDays cannot be zero\\\"\\n        );\\n        require(\\n            durationDays_ > 0,\\n            \\\"Loan:  transferOutWindowDurationDays cannot be zero\\\"\\n        );\\n        settings.accrualStartDayTimestamp = accrualStartDayTimestamp_;\\n        settings.transferInWindowDurationDays = transferInWindowDurationDays_;\\n        settings.transferOutWindowDurationDays = transferOutWindowDurationDays_;\\n        settings.durationDays = durationDays_;\\n        calculateSchedule();\\n    }\\n\\n    function getRolloverAccounting()\\n        external\\n        view\\n        returns (ILoanRolloverAccounting memory)\\n    {\\n        return rolloverAccounting;\\n    }\\n\\n    function approve()\\n        external\\n        override\\n        onlyPool\\n        onlyNotPaused\\n        onlyTransitionState(ILoanTransitionState.Created)\\n    {\\n        _transitionState = ILoanTransitionState.ApprovedForDeposits;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function rolloverAllocation(\\n        uint256 assetsRolloverToNextLoan_,\\n        uint256 assetToReturnToPool_\\n    )\\n        external\\n        onlyPool\\n        onlyNotPaused\\n        onlyTransitionState(ILoanTransitionState.AccruingInterest)\\n        onlyLifeCycleState(ILoanLifeCycleState.Active)\\n    {\\n        _transitionState = ILoanTransitionState.RedemptionsClosed;\\n        _assetsRolloverToNextLoan = assetsRolloverToNextLoan_;\\n        _assetsToReturnToPool = assetToReturnToPool_;\\n    }\\n\\n    //    function checkExchangeRate(uint256 _apr) internal view {\\n    //        uint256 exchangeRate = rolloverAccounting.exchangeRateAtDeposit.add(\\n    //            rolloverAccounting\\n    //                .exchangeRateAtDeposit\\n    //                .mul(_apr)\\n    //                .mul(settings.durationDays)\\n    //                .div(3600000)\\n    //        );\\n    //\\n    //        //    require(exchangeRate == rolloverAccounting.exchangeRateAtMaturity,\\n    //        //            \\\"Loan:  Exchange rate is not equal to the exchange rate at maturity\\\");\\n    //    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n\\n    function fundRollover(\\n        uint256 assetsFromPool_,\\n        uint256 assetsFromPriorLoan,\\n        uint256 totalSupply,\\n        address priorLoan\\n    )\\n        external\\n        onlyPool\\n        onlyNotPaused\\n        onlyLifeCycleState(ILoanLifeCycleState.Requested)\\n        onlyTransitionState(ILoanTransitionState.ApprovedForDeposits)\\n        returns (ILoanLifeCycleState)\\n    {\\n        _transitionState = ILoanTransitionState.TransitioningFundsIn;\\n\\n        rolloverAccounting.totalSupply = totalSupply;\\n        rolloverAccounting.assetsFromPool = assetsFromPool_;\\n        rolloverAccounting.assetsFromPriorLoan = assetsFromPriorLoan;\\n        // rolloverAccounting.assetToReturnToPool = assetToReturnToPool_;\\n        uint256 totalAsset = assetsFromPool_ + assetsFromPriorLoan;\\n        settings.principal = totalAsset;\\n        settings.startingPrincipal = totalAsset;\\n        IVault borrowerVault = IVault(\\n            IPool(_pool).withdrawController().borrowerVault()\\n        );\\n        _state = LoanLib.fundRolloverLoan(\\n            liquidityAsset,\\n            borrowerVault,\\n            assetsFromPool_\\n        );\\n\\n        //        if (priorLoan != address(0)) {\\n        //            ILoan(priorLoan).rolloverAllocation(\\n        //                assetsFromPriorLoan,\\n        //                assetToReturnToPool_\\n        //            );\\n        //        }\\n\\n        indicativeInterest = settings\\n            .principal\\n            .mul(settings.indicativeApr)\\n            .mul(settings.durationDays.mul(LoanLib.RAY).div(360))\\n            .div(LoanLib.RAY)\\n            .div(10000);\\n\\n        originationFee = totalAsset\\n            .mul(settings.originationBps)\\n            .mul(settings.durationDays.mul(LoanLib.RAY).div(360))\\n            .div(LoanLib.RAY)\\n            .div(10000);\\n\\n        if (priorLoan == address(0)) {\\n            rolloverAccounting.exchangeRateAtDeposit = 1e18;\\n        } else {\\n            rolloverAccounting.exchangeRateAtDeposit = ILoan(priorLoan)\\n                .exchangeRateAtMaturity();\\n        }\\n        rolloverAccounting.exchangeRateAtMaturity = rolloverAccounting\\n            .exchangeRateAtDeposit\\n            .add(\\n                rolloverAccounting\\n                    .exchangeRateAtDeposit\\n                    .mul(settings.indicativeApr)\\n                    .mul(settings.durationDays)\\n                    .div(3600000)\\n            );\\n\\n        //  checkExchangeRate(settings.indicativeApr);\\n        IPool(_pool).withdrawController().drawDownToBorrowerWallet(\\n            assetsFromPool_\\n        );\\n\\n        _state = ILoanLifeCycleState.Funded;\\n        return _state;\\n    }\\n\\n    function changeIndicativeApr(uint256 _apr) internal {\\n        require(\\n            _transitionState == ILoanTransitionState.ApprovedForDeposits ||\\n                _transitionState == ILoanTransitionState.Created,\\n            \\\"Loan:  RollOver already started\\\"\\n        );\\n        require(_apr > 0, \\\"Loan:  APR cannot be zero\\\");\\n\\n        settings.indicativeApr = _apr;\\n    }\\n\\n    function finalizeApr(uint256 _apr) internal {\\n        require(_apr > 0, \\\"Loan:  APR cannot be zero\\\");\\n\\n        settings.finalizedApr = _apr;\\n        interest = settings\\n            .principal\\n            .mul(settings.finalizedApr)\\n            .mul(settings.durationDays.mul(LoanLib.RAY).div(360))\\n            .div(LoanLib.RAY)\\n            .div(10000);\\n\\n        uint256 totalAsset = rolloverAccounting.assetsFromPool +\\n            rolloverAccounting.assetsFromPriorLoan;\\n\\n        originationFee = totalAsset\\n            .mul(settings.originationBps)\\n            .mul(settings.durationDays.mul(LoanLib.RAY).div(360))\\n            .div(LoanLib.RAY)\\n            .div(10000);\\n\\n        // if (rolloverAccounting.totalSupply == 0) {\\n        //     rolloverAccounting.exchangeRateAtMaturity = 1e18;\\n        // } else {\\n        rolloverAccounting.exchangeRateAtMaturity =\\n            rolloverAccounting.exchangeRateAtDeposit +\\n            rolloverAccounting\\n                .exchangeRateAtDeposit\\n                .mul(_apr)\\n                .mul(settings.durationDays)\\n                .div(3600000);\\n\\n        //     rolloverAccounting.exchangeRateAtMaturity = (rolloverAccounting\\n        //         .assetsFromPool +\\n        //         interest +\\n        //         rolloverAccounting.assetsFromPriorLoan).mul(1e18).div(\\n        //             rolloverAccounting.totalSupply\\n        //         );\\n        // }\\n        //checkExchangeRate(_apr);\\n    }\\n\\n    function rolloverMaturedLoan()\\n        external\\n        onlyNotPaused\\n        onlyPool\\n        onlyTransitionState(ILoanTransitionState.RedemptionsClosed)\\n    {\\n        if (\\n            !(maturingTimestamp < block.timestamp &&\\n                block.timestamp < maturingTimestamp + (1 days))\\n        ) {\\n            emit LoanScheduleViolation(\\n                _transitionState,\\n                block.timestamp,\\n                maturingTimestamp,\\n                maturingTimestamp + (1 days)\\n            );\\n        }\\n        _transitionState = ILoanTransitionState.TransitioningFundsOut;\\n        _state = ILoanLifeCycleState.Matured;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function rolloverAndFinalizeApr(\\n        uint256 _apr\\n    )\\n        external\\n        onlyNotPaused\\n        onlyPool\\n        onlyTransitionState(ILoanTransitionState.TransitioningFundsIn)\\n    {\\n        _transitionState = ILoanTransitionState.AccruingInterest;\\n\\n        finalizeApr(_apr);\\n        _state = ILoanLifeCycleState.Active;\\n    }\\n\\n    function accrualStartDayTimestamp() external view returns (uint256) {\\n        return settings.accrualStartDayTimestamp;\\n    }\\n\\n    function transferInWindowDurationDays() external view returns (uint256) {\\n        return settings.transferInWindowDurationDays;\\n    }\\n\\n    function transferOutWindowDurationDays() external view returns (uint256) {\\n        return settings.transferOutWindowDurationDays;\\n    }\\n\\n    function assetsRolloverToNextLoan() external view returns (uint256) {\\n        return _assetsRolloverToNextLoan;\\n    }\\n\\n    function assetsToReturnToPool() public view returns (uint256) {\\n        return _assetsToReturnToPool;\\n    }\\n\\n    function assetsFromPool() external view returns (uint256) {\\n        return rolloverAccounting.assetsFromPool;\\n    }\\n\\n    function completeRolloverNetPayment()\\n        external\\n        override\\n        onlyNotPaused\\n        onlyPool\\n        onlyTransitionState(ILoanTransitionState.TransitioningFundsOut)\\n        onlyLifeCycleState(ILoanLifeCycleState.Matured)\\n        returns (\\n            uint256 feeVaultAmount,\\n            uint256 assetsReturnedToPool,\\n            uint256 interestAccrued\\n        )\\n    {\\n        if (\\n            !(maturingTimestamp < block.timestamp &&\\n                block.timestamp < redemptionAvailableTimestamp)\\n        ) {\\n            emit LoanScheduleViolation(\\n                _transitionState,\\n                block.timestamp,\\n                maturingTimestamp,\\n                redemptionAvailableTimestamp\\n            );\\n        }\\n\\n        uint256 scalingValue = LoanLib.RAY;\\n\\n        feeVaultAmount = LoanLib.previewOriginationFee(settings, scalingValue);\\n\\n        IPool(_pool).withdrawController().payFees(feeVaultAmount);\\n        assetsReturnedToPool = assetsToReturnToPool();\\n\\n        if (assetsReturnedToPool > 0) {\\n            IPool(_pool).withdrawController().repayLoan(assetsReturnedToPool);\\n        }\\n\\n        interestAccrued = interest;\\n        _transitionState = ILoanTransitionState.RedemptionsReleased;\\n        _state = ILoanLifeCycleState.Settled;\\n    }\\n\\n    function exchangeRateAtDeposit() external view returns (uint256) {\\n        return rolloverAccounting.exchangeRateAtDeposit;\\n    }\\n\\n    function exchangeRateAtMaturity() external view returns (uint256) {\\n        if (\\n            _transitionState == ILoanTransitionState.Created ||\\n            _transitionState == ILoanTransitionState.ApprovedForDeposits\\n        ) {\\n            return 1e18;\\n        }\\n\\n        return rolloverAccounting.exchangeRateAtMaturity;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function state() external view returns (ILoanLifeCycleState) {\\n        return _state;\\n    }\\n\\n    function transitionState() external view returns (ILoanTransitionState) {\\n        return _transitionState;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function borrower() external view returns (address) {\\n        return _borrower;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function pool() external view returns (address) {\\n        return _pool;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function factory() external view returns (address) {\\n        return _factory;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function dropDeadTimestamp() external view returns (uint256) {\\n        return settings.dropDeadTimestamp;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function durationDays() external view returns (uint256) {\\n        return settings.durationDays;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function finalizedApr() external view returns (uint256) {\\n        return settings.finalizedApr;\\n    }\\n\\n    function indicativeApr() external view returns (uint256) {\\n        return settings.indicativeApr;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function principal() external view returns (uint256) {\\n        return settings.principal;\\n    }\\n\\n    function startingPrincipal() external view returns (uint256) {\\n        return settings.startingPrincipal;\\n    }\\n\\n    /**\\n     * @inheritdoc ILoan\\n     */\\n    function serviceConfiguration()\\n        external\\n        view\\n        returns (IServiceConfigurationV3)\\n    {\\n        return _serviceConfiguration;\\n    }\\n\\n    function repayEarlyWithdraw(\\n        uint256 principal_,\\n        uint256 assetReduction\\n    ) external onlyPool {\\n        settings.principal -= principal_;\\n        interest -= assetReduction - principal_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/ILoan.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IServiceConfiguration.sol\\\";\\n\\nimport \\\"./interfaces/IPoolRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolAccessControl.sol\\\";\\nimport \\\"./factories/interfaces/IPoolAccessControlFactory.sol\\\";\\nimport \\\"./controllers/interfaces/IWithdrawController.sol\\\";\\nimport \\\"./controllers/interfaces/IPoolController.sol\\\";\\nimport \\\"./factories/interfaces/IWithdrawControllerFactory.sol\\\";\\nimport \\\"./factories/interfaces/IPoolControllerFactory.sol\\\";\\nimport \\\"./factories/interfaces/IVaultFactory.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./libraries/PoolLib.sol\\\";\\nimport \\\"./upgrades/BeaconImplementation.sol\\\";\\n\\n/**\\n * @title Liquidity pool for Perimeter.\\n * @dev Used through a beacon proxy.\\n */\\n\\ncontract Pool is IPool, ERC20Upgradeable, BeaconImplementation {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    /**\\n     * @dev The reference to the access control contract\\n     */\\n    IPoolAccessControl public poolAccessControl;\\n\\n    event PoolCreated();\\n    event LoanCreated(address indexed loan);\\n\\n    event PoolDeposit(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n    event LoanApproved(address indexed loan);\\n    event LoanRolloverInitiated(\\n        address indexed loan,\\n        address indexed priorLoan,\\n        uint256 assetsFromPriorToNextLoan,\\n        uint256 assetsFromPool,\\n        uint256 assetToAReturnToPool\\n    );\\n\\n    event LoanRolloverFinalized(\\n        address indexed loan,\\n        address indexed priorLoan\\n    );\\n\\n    event LoanMatured(address indexed loan);\\n\\n    event LoanRepayment(\\n        address indexed loan,\\n        uint256 feeAmount,\\n        uint256 assetsReturnedToPool\\n    );\\n\\n    event RedeemRequested(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n    event RedeemReleased(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 shares,\\n        uint256 assets\\n    );\\n    event Redeem(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 shares,\\n        uint256 assets\\n    );\\n    event WithdrawEarlyRequested(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 shares,\\n        uint256 principal\\n    );\\n    event WithdrawEarlyAccepted(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 shares,\\n        uint256 principal\\n    );\\n    event WithdrawEarlyRepay(\\n        address indexed lender,\\n        address indexed loan,\\n        uint256 shares,\\n        uint256 principal,\\n        uint256 repayment,\\n        uint256 fees\\n    );\\n    event RequestFeePaid(address indexed lender, uint256 feeShares);\\n    event WithdrawFeeVault(address indexed receiver, uint256 amount);\\n\\n    /**\\n     * @dev Reference to the global service configuration.\\n     */\\n    IServiceConfigurationV3 private _serviceConfiguration;\\n\\n    /**\\n     * @dev Reference to the underlying liquidity asset for the pool.\\n     */\\n    IERC20Upgradeable private _liquidityAsset;\\n\\n    /**\\n     * @dev Various accounting statistics updated throughout the pool lifetime.\\n     */\\n    IPoolAccountings private _accountings;\\n\\n    /**\\n     * @dev Reference to the withdraw controller for the pool.\\n     */\\n    IWithdrawController public withdrawController;\\n\\n    /**\\n     * @dev Reference to the admin's controller for the pool.\\n     */\\n    IPoolController public poolController;\\n    address public createdLoan;\\n    address public activeLoan;\\n    address public requestedLoan;\\n    address public maturedLoan;\\n    EnumerableSet.AddressSet private _settledLoans;\\n\\n    uint256 public activatedAt;\\n\\n    error NotPoolController();\\n    error NotLender();\\n    error NotBorrowerManager();\\n    error PoolNotActive();\\n    error InvalidAccess();\\n    error InvalidLoan();\\n    error PoolInvalidState();\\n    error PoolPaused();\\n    error TransferDisabled();\\n    /**\\n     * @dev Modifier to ensure only the PoolController calls a method.\\n     */\\n    modifier onlyPoolController() {\\n        if (msg.sender != address(poolController)) revert NotPoolController();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that the caller is a pool lender\\n     */\\n    modifier onlyLenderWithPPT() {\\n        if (balanceOf(msg.sender) <= 0) revert NotLender();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the pool has ever been activated\\n     */\\n    modifier onlyActivatedPool() {\\n        if (activatedAt == 0) revert PoolNotActive();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the protocol is not paused\\n     */\\n    modifier onlyNotPaused() {\\n        if (_serviceConfiguration.paused() == true) revert PoolPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that the pool is Initialized or Active\\n     */\\n    modifier atState(IPoolLifeCycleState state_) {\\n        if (poolController.state() != state_) revert PoolInvalidState();\\n        _;\\n    }\\n\\n    function version() public pure returns (uint16) {\\n        return 256 * 1 + 0;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       LOAN SET OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function rolloverAndFinalizeApr(\\n        uint256 _apr\\n    ) external onlyNotPaused onlyBorrowerManger {\\n        if (activeLoan != address(0)) {\\n            ILoan(activeLoan).rolloverMaturedLoan();\\n            emit LoanMatured(msg.sender);\\n            maturedLoan = activeLoan;\\n        }\\n\\n        ILoan(requestedLoan).rolloverAndFinalizeApr(_apr);\\n        activeLoan = requestedLoan;\\n        _accountings.totalAvailableAssets += ILoan(activeLoan).interest();\\n        requestedLoan = address(0);\\n        emit LoanRolloverFinalized(activeLoan, maturedLoan);\\n        updatePoolData();\\n    }\\n\\n    function settledLoans() external view returns (address[] memory) {\\n        return _settledLoans.values();\\n    }\\n\\n    function loanCreated(address loan) external {\\n        if (msg.sender != serviceConfiguration().getLoanFactory())\\n            revert InvalidAccess();\\n\\n        emit LoanCreated(loan);\\n        createdLoan = loan;\\n        updatePoolData();\\n    }\\n\\n    function approveLoanForPool(\\n        address loan\\n    ) external onlyNotPaused onlyPoolController {\\n        if (requestedLoan != address(0) || ILoan(loan).pool() != address(this))\\n            revert InvalidLoan();\\n\\n        ILoan(loan).approve();\\n        emit LoanApproved(loan);\\n        requestedLoan = loan;\\n        createdLoan = address(0);\\n        updatePoolData();\\n    }\\n\\n    function currentExpectedInterest()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (activeLoan != address(0)) {\\n            return ILoan(activeLoan).interest();\\n        }\\n        return 0;\\n    }\\n\\n    modifier onlyDepositWindow() {\\n        if (\\n            requestedLoan == address(0) ||\\n            !ILoan(requestedLoan).inDepositWindow()\\n        ) revert InvalidLoan();\\n\\n        _;\\n    }\\n    modifier onlyPermittedLender() {\\n        if (!poolAccessControl.isAllowed(msg.sender)) revert NotLender();\\n\\n        if (IPoolController(poolController).borrowerManager() == msg.sender)\\n            revert NotLender();\\n\\n        _;\\n    }\\n    modifier onlyBorrowerManger() {\\n        if (\\n            IPoolController(poolController).borrowerManager() != msg.sender ||\\n            !poolAccessControl.isAllowed(msg.sender)\\n        ) revert NotBorrowerManager();\\n\\n        _;\\n    }\\n\\n    function isPermittedLender(address receiver) public view returns (bool) {\\n        return poolAccessControl.isAllowed(receiver);\\n    }\\n\\n    /**\\n     * @dev Initializer for Pool\\n\\n     * @param poolSettings configurable settings for the pool\\n     * @param tokenName Name used for issued pool tokens\\n     * @param tokenSymbol Symbol used for issued pool tokens\\n     */\\n    function initialize(\\n        PoolAddressList memory poolAddressList,\\n        IPoolConfigurableSettings memory poolSettings,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) public initializer {\\n        __ERC20_init(tokenName, tokenSymbol);\\n        _serviceConfiguration = IServiceConfigurationV3(\\n            poolAddressList.serviceConfiguration\\n        );\\n\\n        _liquidityAsset = IERC20Upgradeable(poolAddressList.liquidityAsset);\\n\\n        // Build the withdraw controller\\n        // Build the admin controller\\n        poolController = IPoolController(\\n            IPoolControllerFactory(poolAddressList.poolControllerFactory)\\n                .createController(\\n                    address(this),\\n                    poolAddressList.serviceConfiguration,\\n                    poolAddressList.poolAdmin,\\n                    poolAddressList.liquidityAsset,\\n                    poolSettings\\n                )\\n        );\\n        poolAccessControl = IPoolAccessControl(\\n            IPoolAccessControlFactory(poolAddressList.poolAccessControlFactory)\\n                .create(address(this))\\n        );\\n\\n        withdrawController = IWithdrawController(\\n            IWithdrawControllerFactory(\\n                poolAddressList.withdrawControllerFactory\\n            ).createController(\\n                    address(this),\\n                    address(poolAddressList.vaultFactory),\\n                    address(poolSettings.borrowerWalletAddress)\\n                )\\n        );\\n\\n        // Allow the contract to move infinite amount of vault liquidity assets\\n        _liquidityAsset.safeApprove(address(this), type(uint256).max);\\n\\n        emit PoolCreated();\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolBase\\n     */\\n    function serviceConfiguration()\\n        public\\n        view\\n        returns (IServiceConfigurationV3)\\n    {\\n        return _serviceConfiguration;\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function settings()\\n        public\\n        view\\n        returns (IPoolConfigurableSettings memory poolSettings)\\n    {\\n        return poolController.settings();\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function state() public view returns (IPoolLifeCycleState) {\\n        return poolController.state();\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolBase\\n     */\\n    function admin() external view override returns (address) {\\n        return poolController.admin();\\n    }\\n\\n    function borrowerManagerAddr() external view override returns (address) {\\n        return poolController.borrowerManager();\\n    }\\n\\n    function borrowerWalletAddr() external view override returns (address) {\\n        return poolController.borrowerWalletAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function accountings()\\n        external\\n        view\\n        override\\n        returns (IPoolAccountings memory)\\n    {\\n        return _accountings;\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function onActivated() external onlyPoolController {\\n        activatedAt = block.timestamp;\\n    }\\n\\n    function liquidityAssetAddr() public view returns (address) {\\n        return address(_liquidityAsset);\\n    }\\n\\n    function asset() public view returns (address) {\\n        return address(_liquidityAsset);\\n    }\\n\\n    function initiateRollover(\\n        address loan,\\n        address priorLoan\\n    ) external onlyNotPaused onlyPoolController {\\n        if (!(loan == requestedLoan && priorLoan == activeLoan))\\n            revert InvalidLoan();\\n\\n        uint256 _outstandingLoanPrincipals;\\n        uint256 assetsFromPool;\\n        uint256 assetsFromPriorToNextLoan;\\n        uint256 totalSupply_;\\n        uint256 assetToAReturnToPool;\\n        (\\n            _outstandingLoanPrincipals,\\n            assetsFromPool,\\n            assetsFromPriorToNextLoan,\\n            totalSupply_,\\n            assetToAReturnToPool\\n        ) = PoolLib.calculateRollover(\\n            priorLoan,\\n            address(_liquidityAsset),\\n            address(this),\\n            _accountings.outstandingLoanPrincipals\\n        );\\n\\n        _liquidityAsset.safeApprove(loan, assetsFromPool);\\n\\n        ILoan(loan).fundRollover(\\n            assetsFromPool,\\n            assetsFromPriorToNextLoan,\\n            totalSupply_,\\n            priorLoan\\n        );\\n        if (priorLoan != address(0)) {\\n            ILoan(priorLoan).rolloverAllocation(\\n                assetsFromPriorToNextLoan,\\n                assetToAReturnToPool\\n            );\\n        }\\n\\n        _accountings.outstandingLoanPrincipals = _outstandingLoanPrincipals;\\n\\n        emit LoanRolloverInitiated(\\n            loan,\\n            priorLoan,\\n            assetsFromPriorToNextLoan,\\n            assetsFromPool,\\n            assetToAReturnToPool\\n        );\\n        updatePoolData();\\n    }\\n\\n    function completeRolloverNetPayment(\\n        address settlingLoan\\n    ) external onlyNotPaused onlyPoolController {\\n        uint256 feeVaultAmount;\\n        uint256 assetsReturnedToPool;\\n        uint256 interestAccrued;\\n        (feeVaultAmount, assetsReturnedToPool, interestAccrued) = ILoan(\\n            settlingLoan\\n        ).completeRolloverNetPayment();\\n\\n        if (maturedLoan != settlingLoan) revert InvalidLoan();\\n\\n        maturedLoan = address(0);\\n        _settledLoans.add(settlingLoan);\\n        _accountings.outstandingLoanPrincipals += interestAccrued;\\n        _accountings.outstandingLoanPrincipals -= assetsReturnedToPool;\\n        emit LoanRepayment(settlingLoan, feeVaultAmount, assetsReturnedToPool);\\n\\n        address receiver = serviceConfiguration().getPoolAdminWallet();\\n        uint256 amount = _liquidityAsset.balanceOf(\\n            withdrawController.feeVault()\\n        );\\n        withdrawController.withdrawFeeVault(amount, receiver);\\n        emit WithdrawFeeVault(receiver, amount);\\n        updatePoolData();\\n    }\\n\\n    function redemptionState()\\n        public\\n        view\\n        returns (IRedemptionState memory _redemptionState)\\n    {\\n        return withdrawController.redemptionState();\\n    }\\n\\n    function releaseRolloverRedemption(\\n        address owner\\n    ) external onlyPoolController {\\n        uint256 shares;\\n        uint256 assets;\\n        (shares, assets) = withdrawController.releaseRolloverRedemption(owner);\\n        emit RedeemReleased(owner, maturedLoan, shares, assets);\\n        updatePoolData();\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function totalAvailableAssets() public view returns (uint256 assets) {\\n        return _accountings.totalAvailableAssets;\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function totalAvailableSupply()\\n        public\\n        view\\n        override\\n        returns (uint256 shares)\\n    {\\n        shares = PoolLib.calculateTotalAvailableShares(\\n            address(this),\\n            withdrawController.totalRedeemableShares()\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IPoolBase\\n     */\\n    function liquidityPoolAssets() public view returns (uint256 assets) {\\n        uint256 interest = 0;\\n        if (activeLoan != address(0)) {\\n            interest = ILoan(activeLoan).interest();\\n        }\\n\\n        return\\n            PoolLib.calculateTotalAssets(\\n                address(_liquidityAsset),\\n                address(this),\\n                0,\\n                interest\\n            );\\n\\n        //        return\\n        //            _accountings.totalAvailableAssets -\\n        //            withdrawController.totalWithdrawableAssets();\\n    }\\n\\n    function reschedule(\\n        address loan,\\n        uint256 accrualStartDayTimestamp,\\n        uint256 transferInWindowDurationDays,\\n        uint256 transferOutWindowDurationDays,\\n        uint256 durationDays\\n    ) external override onlyPoolController onlyNotPaused {\\n        if (!(activeLoan == loan || requestedLoan == loan))\\n            revert InvalidLoan();\\n\\n        ILoan(loan).reschedule(\\n            accrualStartDayTimestamp,\\n            transferInWindowDurationDays,\\n            transferOutWindowDurationDays,\\n            durationDays\\n        );\\n        updatePoolData();\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestWithdrawable\\n     */\\n    function previewRedeemRequest(\\n        uint256 shares\\n    ) external view returns (uint256 assets) {\\n        assets = convertToAssets(shares);\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestWithdrawable\\n     */\\n    function previewWithdrawRequest(\\n        uint256 assets\\n    ) external view returns (uint256 shares) {\\n        shares = convertToShares(assets);\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestWithdrawable\\n     */\\n    function requestRedeem(\\n        uint256 shares\\n    )\\n        external\\n        onlyNotPaused\\n        onlyActivatedPool\\n        onlyPermittedLender\\n        onlyLenderWithPPT\\n        returns (uint256 assets)\\n    {\\n        assets = convertToAssets(shares);\\n\\n        withdrawController.performRequest(msg.sender, shares, assets);\\n\\n        emit RedeemRequested(msg.sender, activeLoan, assets, shares);\\n        updatePoolData();\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestWithdrawable\\n     */\\n    function maxRedeemRequest(\\n        address owner\\n    ) public view returns (uint256 maxShares) {\\n        maxShares = withdrawController.maxRedeemRequest(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IRequestWithdrawable\\n     */\\n    function maxWithdrawRequest(\\n        address owner\\n    ) public view returns (uint256 maxAssets) {\\n        maxAssets = convertToAssets(maxRedeemRequest(owner));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        ERC-4626 Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view returns (uint256) {\\n        uint256 interest = 0;\\n        if (activeLoan != address(0)) {\\n            interest = ILoan(activeLoan).interest();\\n        }\\n\\n        return\\n            PoolLib.calculateTotalAssets(\\n                address(_liquidityAsset),\\n                address(this),\\n                _accountings.outstandingLoanPrincipals,\\n                interest\\n            );\\n    }\\n\\n    function convertToShares(\\n        uint256 assets\\n    ) public view override returns (uint256 shares) {\\n        if (activeLoan == address(0)) {\\n            shares = assets;\\n        } else {\\n            shares = assets.mul(1e18).div(exchangeRateAtMaturity());\\n        }\\n    }\\n\\n    function exchangeRateAtDeposit()\\n        public\\n        view\\n        override\\n        returns (uint256 _exchangeRateAtDeposit)\\n    {\\n        if (activeLoan != address(0)) {\\n            ILoan loan = ILoan(activeLoan);\\n            _exchangeRateAtDeposit = loan.exchangeRateAtDeposit();\\n        } else {\\n            _exchangeRateAtDeposit = 1e18;\\n        }\\n    }\\n\\n    function exchangeRateAtMaturity()\\n        public\\n        view\\n        override\\n        returns (uint256 _exchangeRateAtMaturity)\\n    {\\n        if (activeLoan != address(0)) {\\n            ILoan loan = ILoan(activeLoan);\\n            _exchangeRateAtMaturity = loan.exchangeRateAtMaturity();\\n        } else {\\n            _exchangeRateAtMaturity = 1e18;\\n        }\\n    }\\n\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view override returns (uint256 assets) {\\n        if (activeLoan == address(0)) {\\n            assets = shares;\\n        } else {\\n            assets = exchangeRateAtMaturity().mul(shares).div(1e18);\\n        }\\n    }\\n\\n    function closeOfBusinessTime() external view returns (uint256) {\\n        return poolController.closeOfBusinessTime();\\n    }\\n\\n    function maxDeposit(address owner) public view override returns (uint256) {\\n        if (\\n            _serviceConfiguration.paused() == true ||\\n            !isPermittedLender(owner) ||\\n            poolController.state() != IPoolLifeCycleState.Active\\n        ) {\\n            return 0;\\n        }\\n        return\\n            PoolLib.calculateMaxDeposit(\\n                poolController.state(),\\n                settings().maxCapacity,\\n                totalAvailableAssets()\\n            );\\n    }\\n\\n    function deposit(\\n        uint256 assets,\\n        address lender\\n    )\\n        public\\n        virtual\\n        override\\n        onlyNotPaused\\n        atState(IPoolLifeCycleState.Active)\\n        onlyPermittedLender\\n        onlyDepositWindow\\n        returns (uint256 shares)\\n    {\\n        if (\\n            poolController.state() == IPoolLifeCycleState.DisruptionOrDefault ||\\n            msg.sender != lender\\n        ) revert PoolInvalidState();\\n\\n        shares = PoolLib.executeDeposit(\\n            liquidityAssetAddr(),\\n            address(this),\\n            lender,\\n            assets,\\n            convertToShares(assets),\\n            maxDeposit(lender),\\n            _mint,\\n            _accountings\\n        );\\n\\n        emit PoolDeposit(lender, requestedLoan, assets, shares);\\n        updatePoolData();\\n    }\\n\\n    function maxWithdraw(\\n        address owner\\n    ) public view override returns (uint256 assets) {\\n        if (\\n            _serviceConfiguration.paused() == true || !isPermittedLender(owner)\\n        ) {\\n            return 0;\\n        }\\n        assets = withdrawController.maxWithdraw(owner);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        onlyNotPaused\\n        onlyPermittedLender\\n        returns (uint256 shares)\\n    {\\n        if (receiver != owner || receiver != msg.sender) revert InvalidAccess();\\n\\n        // Update the withdraw state\\n        shares = withdrawController.withdraw(owner, assets);\\n\\n        // transfer assets, and burn the shares\\n        _performWithdrawTransfer(owner, shares, assets);\\n        updatePoolData();\\n    }\\n\\n    function withdrawFeeVault(\\n        uint256 amount,\\n        address receiver\\n    ) external onlyNotPaused onlyPoolController {\\n        withdrawController.withdrawFeeVault(amount, receiver);\\n        emit WithdrawFeeVault(receiver, amount);\\n        updatePoolData();\\n    }\\n\\n    function maxRedeem(\\n        address owner\\n    ) public view override returns (uint256 maxShares) {\\n        if (\\n            _serviceConfiguration.paused() == true || !isPermittedLender(owner)\\n        ) {\\n            return 0;\\n        }\\n        maxShares = withdrawController.maxRedeem(owner);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        onlyNotPaused\\n        onlyPermittedLender\\n        returns (uint256 assets)\\n    {\\n        if (receiver != owner || receiver != msg.sender) revert InvalidAccess();\\n\\n        // Update the withdraw state\\n        assets = withdrawController.redeem(owner, shares);\\n\\n        // transfer assets, and burn the shares\\n\\n        _performWithdrawTransfer(owner, shares, assets);\\n\\n        emit Redeem(owner, maturedLoan, shares, assets);\\n        updatePoolData();\\n    }\\n\\n    /**\\n     * @dev Redeem a number of shares for a given number of assets. This method\\n     * will transfer `assets` from the vault to the `receiver`, and burn `shares`\\n     * from `owner`.\\n     */\\n    function _performWithdrawTransfer(\\n        address owner,\\n        uint256 shares,\\n        uint256 assets\\n    ) internal {\\n        // Transfer assets\\n        _liquidityAsset.safeTransferFrom(address(this), owner, assets);\\n\\n        // Burn the shares\\n        _burn(owner, shares);\\n        _accountings.totalAvailableAssets -= assets;\\n\\n        // Updating accountings\\n        _accountings.totalAssetsWithdrawn += assets;\\n\\n        emit Withdraw(owner, owner, owner, assets, shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC-20 Overrides\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Disables Perimeter Pool Token transfers.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (to != address(0) && from != address(0)) {\\n            if (\\n                !poolAccessControl.isAllowed(from) ||\\n                !poolAccessControl.isAllowed(to)\\n            ) {\\n                revert TransferDisabled();\\n            }\\n            if (maxRedeemRequest(from) < amount) {\\n                revert TransferDisabled();\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           Early Withdraws\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function requestEarlyRedeem(\\n        uint256 shares\\n    )\\n        external\\n        onlyNotPaused\\n        onlyActivatedPool\\n        onlyPermittedLender\\n        onlyLenderWithPPT\\n    {\\n        uint256 principal = withdrawController.requestEarlyRedeem(\\n            msg.sender,\\n            shares\\n        );\\n\\n        emit WithdrawEarlyRequested(msg.sender, activeLoan, shares, principal);\\n        updatePoolData();\\n    }\\n\\n    function acceptEarlyRedeemRequest(\\n        address investorAddr\\n    )\\n        external\\n        override\\n        onlyNotPaused\\n        onlyBorrowerManger\\n        returns (uint256 principal)\\n    {\\n        uint256 shares;\\n        (shares, principal) = withdrawController.acceptEarlyRedeemRequest(\\n            investorAddr\\n        );\\n\\n        emit WithdrawEarlyAccepted(investorAddr, activeLoan, shares, principal);\\n        updatePoolData();\\n    }\\n\\n    function repayEarlyWithdraw(\\n        address investorAddr,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        onlyNotPaused\\n        onlyBorrowerManger\\n        returns (\\n            uint256 principal,\\n            uint256 repayment,\\n            uint256 redeemedShares,\\n            uint256 fees\\n        )\\n    {\\n        uint256 assetReduction;\\n        (\\n            principal,\\n            repayment,\\n            redeemedShares,\\n            fees,\\n            assetReduction\\n        ) = withdrawController.repayEarlyWithdraw(investorAddr, amount);\\n\\n        _burn(investorAddr, redeemedShares);\\n\\n        _liquidityAsset.safeTransferFrom(\\n            address(this),\\n            investorAddr,\\n            repayment\\n        );\\n\\n        ILoan(activeLoan).repayEarlyWithdraw(principal, assetReduction);\\n\\n        _accountings.outstandingLoanPrincipals -= principal;\\n        _accountings.totalAvailableAssets -= assetReduction;\\n\\n        // Updating accountings\\n        _accountings.totalAssetsWithdrawn += repayment;\\n\\n        emit WithdrawEarlyRepay(\\n            investorAddr,\\n            activeLoan,\\n            redeemedShares,\\n            principal,\\n            repayment,\\n            fees\\n        );\\n        address receiver = serviceConfiguration().getPoolAdminWallet();\\n\\n        withdrawController.withdrawFeeVault(fees, receiver);\\n        emit WithdrawFeeVault(receiver, fees);\\n        updatePoolData();\\n    }\\n\\n    /*** \\n    *\\n    V3\\n    \\n     */\\n\\n    function poolType() external pure returns (IPoolType) {\\n        return IPoolType.TermPool;\\n    }\\n\\n    function updatePoolData() internal {\\n        address poolRegistryAddr = _serviceConfiguration.getPoolRegistry();\\n        IPoolRegistry(poolRegistryAddr).updatePoolData(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/BeaconImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title BeaconImplementation base contract\\n * @dev Base contract that overrides the constructor to disable initialization.\\n */\\nabstract contract BeaconImplementation is Initializable {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/BeaconProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/IServiceConfigurationV3.sol\\\";\\nimport \\\"./interfaces/IBeacon.sol\\\";\\n\\n/**\\n * @title Factory for emitting beacon proxies.\\n * @dev Base contract for emitting new Beacon proxy contracts. Allows setting new\\n * implementations by the global deployer.\\n */\\nabstract contract BeaconProxyFactory is IBeacon {\\n    /**\\n     * @dev Address of the protocol service configuration\\n     */\\n    IServiceConfigurationV3 internal _serviceConfiguration;\\n\\n    /**\\n     * @dev Modifier that requires that the sender is registered as a protocol deployer.\\n     */\\n    modifier onlyDeployer() {\\n        require(\\n            _serviceConfiguration.isDeployer(msg.sender),\\n            \\\"Upgrade: unauthorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc IBeacon\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @inheritdoc IBeacon\\n     */\\n    function setImplementation(\\n        address newImplementation\\n    ) external onlyDeployer {\\n        implementation = newImplementation;\\n        emit ImplementationSet(newImplementation);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/interfaces/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Interface for Beacon contracts.\\n * @dev Holds a reference to the implementation, and allows setting new ones.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Emitted when a new implementation is set.\\n     */\\n    event ImplementationSet(address indexed implementation);\\n\\n    /**\\n     * @dev Returns an address used by BeaconProxy contracts for delegated calls.\\n     */\\n    function implementation() external view returns (address);\\n\\n    /**\\n     * @dev Updates the implementation.\\n     */\\n    function setImplementation(address implementation) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"serviceConfiguration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indicativeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropDeadTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originationBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualStartDayTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferInWindowDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferOutWindowDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priorLoan\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingPrincipal\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoanSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "LoanFactory", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000ec4f65e0a0268ff38ecec711ad5159b96dabab980000000000000000000000005dd6710fed29132325d3fe1aa138046dab641abc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}