{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context { \r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\t\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\t\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\t\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\t\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\t\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\t\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\t\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\t\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\t\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 8;\r\n    }\r\n\t\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\t\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\t\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\t\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\t\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\t\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\t\r\n    function _transfer( address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\t\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\t\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\t\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ninterface IDEXFactory {\r\n   function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n   function factory() external pure returns (address);\r\n   function WETH() external pure returns (address);\r\n   function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n   function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ncontract TESTINGTHIS is ERC20, Ownable {\r\n\taddress private taxWallet;\r\n\taddress private pair;\r\n\t\r\n\tuint256 private initialBuyFee;\r\n\tuint256 private initialSellFee;\r\n\tuint256 private finalBuyFee;\r\n\tuint256 private finalSellFee;\r\n\t\r\n\tuint256 private tradingEnableBlock;\r\n\tuint256 private tradingEnableTime;\r\n\t\r\n\tuint256 public swapThreshold;\r\n\tuint256 public maxTokenPerWallet;\r\n\tuint256 public maxTokenPerTxn;\r\n\t\r\n\tbool private swapping;\r\n\tbool private tradingEnabled;\r\n    bool private swapEnabled;\r\n\tbool public transferDelayEnabled;\r\n\t\r\n\tIDEXRouter public router;\r\n\t\r\n\tmapping(address => bool) private isExcludedFromFees;\r\n\tmapping(address => uint256) private holderLastTransferTimestamp;\r\n\t\r\n    constructor() ERC20(\"testingthis\", \"testingthis\") {\r\n\t   taxWallet = address(owner());\r\n\t   \r\n\t   initialBuyFee = 25;\r\n\t   initialSellFee = 25;\r\n\t   finalBuyFee = 0;\r\n\t   finalSellFee = 0;\r\n\t   \r\n\t   isExcludedFromFees[address(this)] = true;\r\n\t   isExcludedFromFees[address(taxWallet)] = true;\r\n\t   \r\n\t   swapThreshold = 10000 * (10**8);\r\n\t   maxTokenPerWallet = 20000 * (10**8);\r\n\t   maxTokenPerTxn = 20000 * (10**8);\r\n\t   \r\n\t   transferDelayEnabled = true;\r\n\t   \r\n\t   _mint(address(owner()), 1000000 * (10**8));\r\n    }\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction openTrading() external onlyOwner {\r\n\t   require(!tradingEnabled, \"Trading already started\");\r\n\t   \r\n\t   router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n       pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\r\n\t   \r\n\t   _approve(address(this), address(router), totalSupply());\r\n       router.addLiquidityETH{value: address(this).balance}(\r\n\t\t address(this),\r\n\t\t balanceOf(address(this)),\r\n\t\t 0, \r\n\t\t 0,\r\n\t\t owner(),\r\n\t\t block.timestamp\r\n       );\r\n\t   \r\n       tradingEnabled = true;\r\n       swapEnabled = true;\r\n\t   \r\n\t   tradingEnableBlock = block.number;\r\n\t   tradingEnableTime = block.timestamp;\r\n    }\r\n\t\r\n\tfunction removeLimits() external onlyOwner {\r\n\t   require(transferDelayEnabled, \"Limit already removed\");\r\n\t   \r\n\t   maxTokenPerWallet = totalSupply();\r\n\t   maxTokenPerTxn = totalSupply();\r\n       transferDelayEnabled = false;\t   \r\n    }\r\n\t\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal override(ERC20) {      \r\n        require(sender != address(0), \"transfer from the zero address\");\r\n        require(recipient != address(0), \"transfer to the zero address\");\r\n\t\t\r\n\t\tuint256 fees;\r\n\t\tuint256 taxApplicable;\r\n\t\tif(sender != owner() && recipient != owner())\r\n\t\t{\r\n\t\t\ttaxApplicable = block.number >= (tradingEnableBlock+1) ? (block.timestamp >= (tradingEnableTime + 300) ? finalBuyFee : calBuyFee()) : 25;\r\n\t\t\tfees = ((amount * taxApplicable) / 100);\r\n\t\t\t\r\n\t\t\tif(transferDelayEnabled && sender != address(router) && recipient != address(pair)) \r\n\t\t\t{\r\n\t\t\t   require(holderLastTransferTimestamp[tx.origin] < block.number, \"transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\r\n               holderLastTransferTimestamp[tx.origin] = block.number;\r\n            }\r\n\t\t\tif(sender == address(pair) && recipient != address(router) && !isExcludedFromFees[recipient]) \r\n\t\t\t{\r\n\t\t\t    require(amount <= maxTokenPerTxn, \"Buy transfer amount exceeds the maxTokenPerTxn.\");\r\n\t\t\t    require(amount + balanceOf(recipient) <= maxTokenPerWallet, \"maxTokenPerWallet exceeded\");\r\n\t\t\t}\r\n\t\t\tif(recipient == address(pair) && sender != address(this))\r\n\t\t\t{\r\n\t\t\t    taxApplicable = block.number >= (tradingEnableBlock+1) ? (block.timestamp >= (tradingEnableTime + 300) ? finalSellFee : calSellFee()) : 25;\r\n\t\t\t    fees = ((amount * taxApplicable) / 100);\r\n            }\r\n\t\t}\r\n\t\t\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\t\tbool canSwap = contractTokenBalance >= swapThreshold;\r\n\t\t\r\n\t\tif(!swapping && canSwap && recipient == address(pair) && swapEnabled) \r\n\t\t{\r\n\t\t\tswapping = true;\r\n\t\t\t\r\n\t\t\tswapTokensForETH(min(amount, swapThreshold));\r\n\t\t\tuint256 ethBalance = address(this).balance;\r\n\t\t\tpayable(taxWallet).transfer(ethBalance);\r\n\t\t\t\r\n\t\t\tswapping = false; \r\n\t\t}\r\n\t\tif(fees > 0) \r\n\t\t{\r\n\t\t   super._transfer(sender, address(this), fees);\r\n\t\t}\r\n\t\tsuper._transfer(sender, recipient, amount - fees);\r\n    }\r\n\t\r\n\tfunction min(uint256 a, uint256 b) private pure returns (uint256){\r\n        return (a > b) ? b : a;\r\n    }\r\n\t\r\n\tfunction calSellFee() private view returns (uint256){\r\n\t   return initialSellFee - (((block.timestamp - tradingEnableTime) / 60) * 5);\r\n    }\r\n\t\r\n\tfunction calBuyFee() private view returns (uint256){\r\n       return initialBuyFee - (((block.timestamp - tradingEnableTime) / 60) * 5);\r\n    }\r\n\t\r\n\tfunction swapTokensForETH(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\t\t\r\n        _approve(address(this), address(router), amount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\t\r\n\tfunction manualSwap() external {\r\n\t    require(tradingEnabled, \"trading is not open\");\r\n        require(address(msg.sender)== taxWallet, 'Incorrect request');\r\n\t\t\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if(tokenBalance > 0)\r\n\t\t{\r\n           swapTokensForETH(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if(ethBalance > 0)\r\n\t\t{\r\n           payable(taxWallet).transfer(ethBalance);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenPerTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TESTINGTHIS", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e75ce35254041725f1c7e40f20caec6b53847488b778a6db9305b41ac3263586"}