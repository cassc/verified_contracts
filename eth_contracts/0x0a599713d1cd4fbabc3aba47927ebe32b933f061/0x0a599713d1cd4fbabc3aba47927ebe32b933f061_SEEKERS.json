{"SourceCode": "/**   \r\n\r\n\r\n               \u256d\u2501\u2501\u2501\u256e\u2571\u2571\u2571\u2571\u2571\u256d\u256e\r\n                \u2503\u256d\u2501\u256e\u2503\u2571\u2571\u2571\u2571\u2571\u2503\u2503\r\n                \u2503\u2570\u2501\u2501\u2533\u2501\u2501\u2533\u2501\u2501\u252b\u2503\u256d\u2533\u2501\u2501\u2533\u2501\u256e\r\n               \u2570\u2501\u2501\u256e\u2503\u2503\u2501\u252b\u2503\u2501\u252b\u2570\u256f\u252b\u2503\u2501\u252b\u256d\u256f\r\n               \u2503\u2570\u2501\u256f\u2503\u2503\u2501\u252b\u2503\u2501\u252b\u256d\u256e\u252b\u2503\u2501\u252b\u2503\r\n               \u2570\u2501\u2501\u2501\u253b\u2501\u2501\u253b\u2501\u2501\u253b\u256f\u2570\u253b\u2501\u2501\u253b\u256f\r\n\r\n\r\n        * Website: https://seekers.xyz/\r\n        * Twitter: https://twitter.com/seekers_xyz\r\n        * Instagram: https://www.instagram.com/seekers.xyz/\r\n        * OpenSea: https://opensea.io/collection/the-seekers\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract SEEKERS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    // Seekers\r\n    string private constant _name = \"Seekers\";\r\n    string private constant _symbol = \"SEEKK\";\r\n    uint8 private constant _decimals = 9;\r\n    \r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 100000000000 * 10 ** 9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    // First Second Third Fourth\r\n    uint256 private _tClasterTotal;\r\n    uint256 private _ClasterFirstB = 0;\r\n    uint256 private _ClasterSecondB = 0;\r\n    uint256 private _ClasterThirdS = 0;\r\n    uint256 private _ClasterFourthS = 0;\r\n\r\n    uint256 private _ClasterThirdSFirst = _ClasterThirdS;\r\n    uint256 private _ClasterFourthSSecond = _ClasterFourthS;\r\n\r\n    uint256 private _previousThirdSFirst = _ClasterThirdSFirst;\r\n    uint256 private _previousFourthSSecond = _ClasterFourthSSecond;\r\n\r\n    mapping(address => bool) public clasterses_airdrop;\r\n    mapping(address => uint256) public _buyMap;\r\n    address payable private _ClasterFourthSAddress =\r\n        payable(0x62D7deBa8C1aB0B91bf4BF46541eFEE2A0698703);\r\n    address payable private _ClasterFiveSAddress =\r\n        payable(0x62D7deBa8C1aB0B91bf4BF46541eFEE2A0698703);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private tradingOpen = true;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n    uint256 public _maxTAClaster = 34500000000 * 10 ** 9;\r\n    uint256 public _maxWSClaster = 100000000000 * 10 ** 9;\r\n    uint256 public _swpTAClaster = 100 * 10 ** 9;\r\n\r\n    event MaxTAUptClaster(uint256 _maxTAClaster);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) private view returns (uint256) {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeClaster() private {\r\n        if (_ClasterThirdSFirst == 0 && _ClasterFourthSSecond == 0) return;\r\n\r\n        _previousThirdSFirst = _ClasterThirdSFirst;\r\n        _previousFourthSSecond = _ClasterFourthSSecond;\r\n\r\n        _ClasterThirdSFirst = 0;\r\n        _ClasterFourthSSecond = 0;\r\n    }\r\n\r\n    function restoreClaster() private {\r\n        _ClasterThirdSFirst = _previousThirdSFirst;\r\n        _ClasterFourthSSecond = _previousFourthSSecond;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!clasterses_airdrop[from] && !clasterses_airdrop[to]);\r\n\r\n        if (from != owner() && to != owner()) {\r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(\r\n                    from == owner(),\r\n                    \"TOKEN: This account cannot send tokens until trading is enabled\"\r\n                );\r\n            }\r\n\r\n            require(amount <= _maxTAClaster, \"TOKEN: Max Transaction Limit\");\r\n            require(\r\n                !clasterses_airdrop[from] && !clasterses_airdrop[to],\r\n                \"TOKEN: Your account added to Airdrop!\"\r\n            );\r\n\r\n            if (to != uniswapV2Pair) {\r\n                require(\r\n                    balanceOf(to) + amount < _maxWSClaster,\r\n                    \"TOKEN: Balance exceeds wallet size!\"\r\n                );\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swpTAClaster;\r\n\r\n            if (contractTokenBalance >= _maxTAClaster) {\r\n                contractTokenBalance = _maxTAClaster;\r\n            }\r\n\r\n            if (\r\n                canSwap &&\r\n                !inSwap &&\r\n                from != uniswapV2Pair &&\r\n                swapEnabled &&\r\n                !_isExcludedFromFee[from] &&\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    seeClaster(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        if (\r\n            (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||\r\n            (from != uniswapV2Pair && to != uniswapV2Pair)\r\n        ) {\r\n            takeFee = false;\r\n        } else {\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _ClasterThirdSFirst = _ClasterFirstB;\r\n                _ClasterFourthSSecond = _ClasterSecondB;\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _ClasterThirdSFirst = _ClasterThirdS;\r\n                _ClasterFourthSSecond = _ClasterFourthS;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function seeClaster(uint256 amount) private {\r\n        _ClasterFiveSAddress.transfer(amount);\r\n    }\r\n\r\n    function launchGo() external onlyOwner {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_ClasterFourthSAddress] = true;\r\n        _isExcludedFromFee[_ClasterFiveSAddress] = true;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(\r\n            _msgSender() == _ClasterFourthSAddress ||\r\n                _msgSender() == _ClasterFiveSAddress\r\n        );\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(\r\n            _msgSender() == _ClasterFourthSAddress ||\r\n                _msgSender() == _ClasterFiveSAddress\r\n        );\r\n        uint256 contractETHBalance = address(this).balance;\r\n        seeClaster(contractETHBalance);\r\n    }\r\n\r\n    function serializeClastersesAirdrop(\r\n        address[] memory clasterses_airdrop_\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < clasterses_airdrop_.length; i++) {\r\n            clasterses_airdrop[clasterses_airdrop_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeClaster();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreClaster();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tFourthSSecond\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeFourthSSecond(tFourthSSecond);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeFourthSSecond(uint256 tFourthSSecond) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rFourthSSecond = tFourthSSecond.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rFourthSSecond);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tClasterTotal = _tClasterTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 thirdSFirst,\r\n        uint256 fourthSSecond\r\n    ) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(thirdSFirst).div(100);\r\n        uint256 tFourthSSecond = tAmount.mul(fourthSSecond).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tFourthSSecond);\r\n        return (tTransferAmount, tFee, tFourthSSecond);\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount\r\n    )\r\n        private\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tFourthSSecond\r\n        ) = _getTValues(tAmount, _ClasterThirdSFirst, _ClasterFourthSSecond);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tFourthSSecond,\r\n            currentRate\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tFourthSSecond\r\n        );\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tFourthSSecond,\r\n        uint256 currentRate\r\n    ) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rFourthSSecond = tFourthSSecond.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rFourthSSecond);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function sMiSClaster(uint256 swpTAClaster) public onlyOwner {\r\n        _swpTAClaster = swpTAClaster;\r\n    }\r\n\r\n    function sMTxClaster(uint256 maxTAClaster) public onlyOwner {\r\n        _maxTAClaster = maxTAClaster;\r\n    }\r\n    function sMwalClaster(uint256 maxWSClaster) public onlyOwner {\r\n        _maxWSClaster = maxWSClaster;\r\n    }\r\n\r\n    function settingsClaster(\r\n        uint256 firstB,\r\n        uint256 thirdS,\r\n        uint256 secondB,\r\n        uint256 fourthS\r\n    ) public onlyOwner {\r\n        _ClasterFirstB = firstB;\r\n        _ClasterThirdS = thirdS;\r\n        _ClasterSecondB = secondB;\r\n        _ClasterFourthS = fourthS;\r\n    }\r\n\r\n    \r\n\r\n    function clsFoWalClaster(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTAClaster\",\"type\":\"uint256\"}],\"name\":\"MaxTAUptClaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTAClaster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWSClaster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swpTAClaster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clasterses_airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"clsFoWalClaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchGo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTAClaster\",\"type\":\"uint256\"}],\"name\":\"sMTxClaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swpTAClaster\",\"type\":\"uint256\"}],\"name\":\"sMiSClaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWSClaster\",\"type\":\"uint256\"}],\"name\":\"sMwalClaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"clasterses_airdrop_\",\"type\":\"address[]\"}],\"name\":\"serializeClastersesAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fourthS\",\"type\":\"uint256\"}],\"name\":\"settingsClaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SEEKERS", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://783771f5db89878a6bbf28549aa485ed25dc906aa1a12832f25a60089e932c74"}