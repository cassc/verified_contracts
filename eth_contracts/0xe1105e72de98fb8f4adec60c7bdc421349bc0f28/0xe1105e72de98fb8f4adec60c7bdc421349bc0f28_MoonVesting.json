{"SourceCode": "/// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.26; \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MoonVesting\r\n * @dev A token vesting contract that handles both linear and cycle-based vesting schedules.\r\n */\r\ncontract MoonVesting is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    IERC20 public token;\r\n\r\n    struct VestingSchedule {\r\n        uint256 amount;\r\n        uint256 start;\r\n        uint256 duration;\r\n        bool revokable;\r\n        bool revoked;\r\n        uint256 cycles;\r\n        uint256 cycleDuration;\r\n        uint256 released;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => VestingSchedule))\r\n        public vestingSchedules;\r\n    mapping(address => uint256[]) public userVestingIds;\r\n\r\n    bool private _entered;\r\n\r\n    event VestingCreated(\r\n        address indexed beneficiary,\r\n        uint256 indexed vestingId,\r\n        uint256 amount,\r\n        uint256 start,\r\n        uint256 cliff,\r\n        uint256 duration,\r\n        bool revokable,\r\n        uint256 cycles,\r\n        uint256 cycleDuration\r\n    );\r\n    event TokensReleased(\r\n        address indexed beneficiary,\r\n        uint256 indexed vestingId,\r\n        uint256 amount\r\n    );\r\n    event VestingRevoked(\r\n        address indexed beneficiary,\r\n        uint256 indexed vestingId\r\n    );\r\n\r\n\r\n    error ZeroAddress();\r\n    error ZeroAmount();\r\n    error CliffPeriodIsNotPassedYet();\r\n    error NoTokensToClaim();\r\n    error AlreadyClaimed();\r\n    error ArrayLengthMismatch();\r\n    error ZeroDuration();\r\n    error MinimumTwoCycles();\r\n    error VestingIsNotRevokable();\r\n    error AlreadyRevoked();\r\n    error NoVestingFound();\r\n    error CannotClaimNativeToken();\r\n    /**\r\n     * @dev Constructor function\r\n     * @param _token Address of the token to be vested\r\n     */\r\n    constructor(IERC20 _token) Ownable(msg.sender) {\r\n        token = _token;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!_entered, \"Reentrant call\");\r\n        _entered = true;\r\n        _;\r\n        _entered = false;\r\n    }\r\n\r\n    function claimOtherERC20(address _token, address to, uint256 amount) external onlyOwner{\r\n      if(_token == address(token)){\r\n        revert CannotClaimNativeToken();\r\n      }\r\n      // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = _token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"ERC20: TOKEN_CLAIM_FAILED\"\r\n        );\r\n    }\r\n\r\n    /// @dev set linear vesting\r\n    /// see docs:{_setLinearVesting}\r\n    /// example - user '0x123' has been alloted with 100 tokens, cliff is 1, duration is 30\r\n    /// then user tokens are vested over 30 days linearly.\r\n    /// user can start claiming unlocked tokens anytime after cliff of 1 day has been passed.\r\n    function setLinearVesting(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        uint256 cliff,\r\n        uint256 duration,\r\n        bool revokable\r\n    ) external onlyOwner {\r\n        if (amount > 0) {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n        _setLinearVesting(\r\n            beneficiary,\r\n            amount,\r\n            cliff,\r\n            duration,\r\n            revokable\r\n        );\r\n    }\r\n\r\n   \r\n\r\n    /// @dev set linear vesting for multiple users with custom amounts, duration\r\n    /// see docs:{_setLinearVesting}\r\n    function setLinearVestingMulti(\r\n        address[] calldata users,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata cliff,\r\n        uint256[] calldata duration,\r\n        bool revokable\r\n    ) external onlyOwner {\r\n        uint256 userLength = users.length;\r\n        uint256 amountLength = amounts.length;\r\n        if(\r\n            userLength != amountLength &&\r\n                userLength != cliff.length &&\r\n                userLength != duration.length){revert ArrayLengthMismatch();}\r\n           \r\n        uint256 totalTokens;\r\n        for (uint256 j = 0; j < amountLength; j++) {\r\n            totalTokens = totalTokens + amounts[j];\r\n        }\r\n        token.safeTransferFrom(msg.sender, address(this), totalTokens);\r\n        for (uint256 i = 0; i < userLength; i++) {\r\n            _setLinearVesting(\r\n                users[i],\r\n                amounts[i],\r\n                cliff[i],\r\n                duration[i],\r\n                revokable\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev set cycleBased vesting\r\n    /// see docs:{_setCycleBasedrVesting}\r\n    /// example - user '0x123' is assigned with 100 as amount. With cliff 1, cycles 5 and cycle duration 10\r\n    /// so per cycle claimable amount will be (100/5 = 20),\r\n    /// when 1 day passed, user can get 20 tokens, then every 10 days he can claim 20 tokens untill full\r\n    /// amount is claimed\r\n    function setCycleBasedVesting(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        uint256 cliff,\r\n        uint256 cycles,\r\n        uint256 cycleduration,\r\n        bool revokable\r\n    ) external onlyOwner {\r\n        if (amount > 0) {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n        _setCycleBasedVesting(\r\n            beneficiary,\r\n            amount,\r\n            cliff,\r\n            cycles,\r\n            cycleduration,\r\n            revokable\r\n        );\r\n    }\r\n\r\n    \r\n    /// @dev set cycleBased vesting for multiple users with custom amounts, cycles\r\n    /// see docs:{_setCycleBasedrVesting}\r\n    function setCycleBasedVestingMultiWithCustomParams(\r\n        address[] calldata users,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata cliff,\r\n        uint256[] calldata cycles,\r\n        uint256[] calldata cycleduration,\r\n        bool revokable\r\n    ) external onlyOwner {\r\n        uint256 userLength = users.length;\r\n        uint256 amountLength = amounts.length;\r\n        if(\r\n            userLength != amountLength &&\r\n                userLength != cliff.length &&\r\n                userLength != cycles.length){revert ArrayLengthMismatch();}\r\n        uint256 totalTokens;\r\n        \r\n        for (uint256 j = 0; j < amountLength; ++j) {\r\n            totalTokens = totalTokens + amounts[j];\r\n        }\r\n        \r\n        token.safeTransferFrom(msg.sender, address(this), totalTokens);\r\n\r\n        for (uint256 i = 0; i < userLength; ++i) {\r\n            _setCycleBasedVesting(\r\n                users[i],\r\n                amounts[i],\r\n                cliff[i],\r\n                cycles[i],\r\n                cycleduration[i],\r\n                revokable\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @notice Sets a linear vesting schedule for a beneficiary\r\n     * @param beneficiary Address of the beneficiary\r\n     * @param amount Total amount of tokens to be vested\r\n     * @param cliff Duration in days before vesting starts\r\n     * @param duration Total duration in days for vesting\r\n     * @param revokable Boolean indicating whether the vesting is revokable by the owner\r\n     */\r\n    function _setLinearVesting(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        uint256 cliff,\r\n        uint256 duration,\r\n        bool revokable\r\n    ) internal {\r\n        if(\r\n            beneficiary == address(0)){revert ZeroAddress();}\r\n           \r\n        if(amount == 0){revert ZeroAmount();}\r\n        if(duration == 0){revert ZeroDuration();}\r\n\r\n         cliff = cliff * 1 days;\r\n         duration = duration * 1 days;\r\n        uint256 start = block.timestamp + cliff;\r\n\r\n        uint256 vestingId = userVestingIds[beneficiary].length;\r\n        vestingSchedules[beneficiary][vestingId] = VestingSchedule({\r\n            amount: amount,\r\n            start: start,\r\n            duration: duration,\r\n            revokable: revokable,\r\n            revoked: false,\r\n            cycles: 0,\r\n            cycleDuration: 0,\r\n            released: 0\r\n        });\r\n\r\n        userVestingIds[beneficiary].push(vestingId);\r\n\r\n        emit VestingCreated(\r\n            beneficiary,\r\n            vestingId,\r\n            amount,\r\n            start,\r\n            cliff,\r\n            duration,\r\n            revokable,\r\n            0,\r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a cycle-based vesting schedule for a beneficiary\r\n     * @param beneficiary Address of the beneficiary\r\n     * @param amount Total amount of tokens to be vested\r\n     * @param cliff Duration in days before vesting starts\r\n     * @param cycles Number of cycles for the vesting\r\n     * @param cycleduration Duration in days of each cycle\r\n     * @param revokable Boolean indicating whether the vesting is revokable by the owner\r\n     */\r\n    function _setCycleBasedVesting(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        uint256 cliff,\r\n        uint256 cycles,\r\n        uint256 cycleduration,\r\n        bool revokable\r\n    ) internal {\r\n        if(\r\n            beneficiary == address(0)){revert ZeroAddress();}\r\n           \r\n        if(amount == 0){revert ZeroAmount();}\r\n        if(cycleduration == 0){revert ZeroDuration();}\r\n        if(cycles == 0){revert MinimumTwoCycles();}\r\n\r\n        cliff = cliff * 1 days;\r\n        cycleduration = cycleduration * 1 days;\r\n        uint256 start = block.timestamp + cliff;\r\n        uint256 duration = cycles * cycleduration;\r\n        uint256 vestingId = userVestingIds[beneficiary].length;\r\n        vestingSchedules[beneficiary][vestingId] = VestingSchedule({\r\n            amount: amount,\r\n            start: start,\r\n            duration: duration,\r\n            revokable: revokable,\r\n            revoked: false,\r\n            cycles: cycles,\r\n            cycleDuration: cycleduration,\r\n            released: 0\r\n        });\r\n\r\n        userVestingIds[beneficiary].push(vestingId);\r\n\r\n        emit VestingCreated(\r\n            beneficiary,\r\n            vestingId,\r\n            amount,\r\n            start,\r\n            cliff,\r\n            duration,\r\n            revokable,\r\n            cycles,\r\n            cycleduration\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the IDs of all vesting schedules for a user\r\n     * @param beneficiary Address of the beneficiary\r\n     * @return Array of vesting schedule IDs\r\n     */\r\n    function getUserVestingIds(address beneficiary)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return userVestingIds[beneficiary];\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * @notice Allows a beneficiary to claim tokens from a specific vesting schedule\r\n     * @param vestingId ID of the vesting schedule\r\n     */\r\n    function claimTokens(uint256 vestingId) external nonReentrant{\r\n        _release(msg.sender, vestingId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows a beneficiary to claim tokens from multiple vesting schedules\r\n     * @param vestingIds Array of vesting schedule IDs\r\n     */\r\n    function claimMultipleTokens(uint256[] memory vestingIds) external nonReentrant{\r\n        for (uint256 i = 0; i < vestingIds.length; i++) {\r\n            _release(msg.sender, vestingIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes a vesting schedule\r\n     * @param beneficiary Address of the beneficiary\r\n     * @param vestingId ID of the vesting schedule\r\n     * send unlocked tokens to beneficiary and rest to the owner\r\n     * userful if setting vesting for employees\r\n     */\r\n    function revoke(address beneficiary, uint256 vestingId) external onlyOwner {\r\n        VestingSchedule storage schedule = vestingSchedules[beneficiary][\r\n            vestingId\r\n        ];\r\n        if(!schedule.revokable){revert VestingIsNotRevokable();}\r\n        if(schedule.revoked){revert AlreadyRevoked();}\r\n\r\n        uint256 vestedAmount = _tokensVested(beneficiary, vestingId);\r\n        uint256 unreleased = vestedAmount - schedule.released;\r\n        uint256 refund = schedule.amount - vestedAmount;\r\n\r\n        schedule.revoked = true;\r\n\r\n        if (unreleased > 0) {\r\n            token.safeTransfer(beneficiary, unreleased);\r\n        }\r\n\r\n        token.safeTransfer(owner(), refund);\r\n\r\n        emit VestingRevoked(beneficiary, vestingId);\r\n    }\r\n\r\n    /**\r\n * @notice Returns the IDs of all vesting schedules for a user that have tokens available\r\n * @param beneficiary Address of the beneficiary\r\n * @return Array of vesting schedule IDs with tokens available\r\n */\r\nfunction getUserVestingIdsWithTokens(address beneficiary) external view returns (uint256[] memory) {\r\n    uint256[] memory allIds = userVestingIds[beneficiary];\r\n    uint256[] memory tempIdsWithTokens = new uint256[](allIds.length);\r\n    uint256 count = 0;\r\n\r\n    for (uint256 i = 0; i < allIds.length; i++) {\r\n        uint256 vestingId = allIds[i];\r\n        if (getIdWithTokens(beneficiary, vestingId) > 0) {\r\n            tempIdsWithTokens[count] = vestingId;\r\n            count++;\r\n        }\r\n    }\r\n\r\n    // Create the final array with the exact count\r\n    uint256[] memory idsWithTokens = new uint256[](count);\r\n    for (uint256 i = 0; i < count; i++) {\r\n        idsWithTokens[i] = tempIdsWithTokens[i];\r\n    }\r\n\r\n    return idsWithTokens;\r\n}\r\n\r\n    /**\r\n     * @dev Internal function to release tokens for a specific vesting schedule\r\n     * @param beneficiary Address of the beneficiary\r\n     * @param vestingId ID of the vesting schedule\r\n     */\r\n    function _release(address beneficiary, uint256 vestingId) internal {\r\n        VestingSchedule storage schedule = vestingSchedules[beneficiary][\r\n            vestingId\r\n        ];\r\n        if(schedule.amount == 0){revert NoVestingFound();}\r\n        if(block.timestamp < schedule.start){revert CliffPeriodIsNotPassedYet();}\r\n        if(schedule.revoked){revert AlreadyRevoked();}\r\n\r\n        uint256 vestedAmount = _tokensVested(beneficiary, vestingId);\r\n        uint256 unreleased = vestedAmount - schedule.released;\r\n\r\n        if(unreleased == 0) {revert AlreadyClaimed();}\r\n\r\n        schedule.released += unreleased;\r\n        token.safeTransfer(beneficiary, unreleased);\r\n\r\n        emit TokensReleased(beneficiary, vestingId, unreleased);\r\n    }\r\n    \r\n    /**\r\n     * @dev returns if particular vesting has tokens to claim\r\n     * @param user user address\r\n     * @param vesting  vesting id\r\n     */\r\n\r\n    function getIdWithTokens (address user, uint256 vesting) public view returns (uint256){\r\n        VestingSchedule storage schedule = vestingSchedules[user][\r\n            vesting\r\n        ];\r\n        uint256 amount = schedule.amount - schedule.released;\r\n        return amount;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @notice returns current claimable tokens for particular user\r\n     * @param user user address\r\n     * @param vesting vesting id\r\n     */\r\n    function getUnlockedTokens(address user, uint256 vesting) public view returns (uint256) {\r\n        VestingSchedule storage schedule = vestingSchedules[user][\r\n            vesting\r\n        ];\r\n        if(schedule.start >  block.timestamp){return 0;}\r\n        uint256 totalAmount = _tokensVested(user, vesting);\r\n         uint256 unlockedTokens = totalAmount - schedule.released;\r\n         return unlockedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate the amount of tokens vested for a specific vesting schedule\r\n     * @param beneficiary Address of the beneficiary\r\n     * @param vestingId ID of the vesting schedule\r\n     * @return Amount of vested tokens\r\n     */\r\n    function _tokensVested(address beneficiary, uint256 vestingId)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        VestingSchedule storage schedule = vestingSchedules[beneficiary][\r\n            vestingId\r\n        ];\r\n\r\n        if (block.timestamp < schedule.start) {\r\n            return 0;\r\n        }\r\n\r\n        if (schedule.revoked) {\r\n            return schedule.released;\r\n        }\r\n\r\n        uint256 elapsedTime = block.timestamp - schedule.start;\r\n        uint256 vestedAmount;\r\n\r\n        if (schedule.cycles == 0) {\r\n            // Linear vesting\r\n            vestedAmount = (schedule.amount * elapsedTime) / schedule.duration;\r\n        } else {\r\n            // Cycle-based vesting\r\n            uint256 currentCycle = elapsedTime / schedule.cycleDuration;\r\n            vestedAmount =\r\n                (schedule.amount * (currentCycle + 1)) /\r\n                schedule.cycles;\r\n        }\r\n\r\n        if (vestedAmount > schedule.amount) {\r\n            vestedAmount = schedule.amount;\r\n        }\r\n\r\n        return vestedAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CliffPeriodIsNotPassedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumTwoCycles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoVestingFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingIsNotRevokable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDuration\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revokable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vestingIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimOtherERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"getIdWithTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"getUnlockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getUserVestingIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getUserVestingIdsWithTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleduration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revokable\",\"type\":\"bool\"}],\"name\":\"setCycleBasedVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cliff\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cycles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cycleduration\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"revokable\",\"type\":\"bool\"}],\"name\":\"setCycleBasedVestingMultiWithCustomParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revokable\",\"type\":\"bool\"}],\"name\":\"setLinearVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cliff\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"duration\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"revokable\",\"type\":\"bool\"}],\"name\":\"setLinearVestingMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVestingIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revokable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoonVesting", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b784bbd5cce24b510d06377f6b0af3d33b73585a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0832a5a51668da75d87783567e1c971179c780b02c2fd8b2f5319634e8984011"}