{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PLSDStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract PLSDStaker is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public immutable reloadPeriod; // period users are allowed to deposit/withdraw their stake without penalty (in seconds)\\r\\n    uint256 public immutable lockedPeriod; // staking duration (in seconds)\\r\\n    uint256 public immutable emergencyUnlockFeeBps; // emergency unlock fee in percentage basis points\\r\\n    uint256 public immutable lockingCost; // cost for locking (in terms of CARN)\\r\\n    uint256 public reloadStart; // start of reload period as timestamp\\r\\n    uint256 public reloadEnd; // end of reload period as timestamp\\r\\n\\r\\n    uint256 public plsdRewardPool; // keeps track of the plsd rewards\\r\\n    uint256 public plsdPendingRewards; // keeps track of plsd contributions to the reward pool made during reload period\\r\\n    uint256 public plsdRewardPoolTotal; // Total plsd reward for the last stake\\r\\n\\r\\n    uint256 public plsbRewardPool; // keeps track of the plsb rewards\\r\\n    uint256 public plsbPendingRewards; // keeps track of plsb contributions to the reward pool made during reload period\\r\\n    uint256 public plsbRewardPoolTotal; // Total plsb reward for the last stake\\r\\n\\r\\n    uint256 public asicRewardPool; // keeps track of the asic rewards\\r\\n    uint256 public asicPendingRewards; // keeps track of asic contributions to the reward pool made during reload period\\r\\n    uint256 public asicRewardPoolTotal; // Total asic reward for the last stake\\r\\n\\r\\n    uint256 public hexRewardPool; // keeps track of the hex rewards\\r\\n    uint256 public hexPendingRewards; // keeps track of hex contributions to the reward pool made during reload period\\r\\n    uint256 public hexRewardPoolTotal; // Total hex reward for the last stake\\r\\n\\r\\n    address public immutable CARN; // Token used as locking cost\\r\\n    address public immutable PLSD; // Token to stake\\r\\n    address public immutable PLSB; // Reward token\\r\\n    address public immutable ASIC; // Reward token\\r\\n    address public immutable HEX;  // Reward token\\r\\n\\r\\n    address public immutable BuyAndBurn; // address to send the accumulated CARN tokens for further processing\\r\\n\\r\\n    enum State {\\r\\n        ReloadPeriod,\\r\\n        LockedPeriod\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        uint256 amount;\\r\\n        uint256 stakeId;\\r\\n    }\\r\\n\\r\\n    State public state; // keeps track of the current state of the contract\\r\\n\\r\\n    mapping(address => Stake) public stakes; // keeps track of stakes of each user\\r\\n    mapping(uint256 => uint256) public stakePool; // keeps track of the available pool for a given stakeId\\r\\n\\r\\n    uint256 public currentStakeId; // keeps track of current stake Id\\r\\n    uint256 public unclaimedAmount; // keeps track of unclaimed amount from stake pool\\r\\n\\r\\n    event NewStake(\\r\\n        address indexed staker,\\r\\n        uint256 indexed stakeId,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event PLSDRewardClaimed(\\r\\n        address indexed staker,\\r\\n        uint256 indexed stakeId,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event PLSBRewardClaimed(\\r\\n        address indexed staker,\\r\\n        uint256 indexed stakeId,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event ASICRewardClaimed(\\r\\n        address indexed staker,\\r\\n        uint256 indexed stakeId,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event HEXRewardClaimed(\\r\\n        address indexed staker,\\r\\n        uint256 indexed stakeId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event RewardReset(address indexed staker, uint256 indexed stakeId);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed staker,\\r\\n        uint256 indexed stakeId,\\r\\n        uint256 withdrawAmount,\\r\\n        uint256 penaltyAmount\\r\\n    );\\r\\n    event PLSDDeposited(address indexed depositor, uint256 depositAmount);\\r\\n    event PLSBDeposited(address indexed depositor, uint256 depositAmount);\\r\\n    event ASICDeposited(address indexed depositor, uint256 depositAmount);\\r\\n    event HEXDeposited(address indexed depositor, uint256 depositAmount);\\r\\n\\r\\n    event LockedPeriodStarted(\\r\\n        address indexed caller,\\r\\n        uint256 id,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event ReloadPeriodStarted(\\r\\n        address indexed caller,\\r\\n        uint256 id,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event CarnSent(address indexed caller, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        uint256 _firstReloadPeriod,\\r\\n        uint256 _reloadPeriod,\\r\\n        uint256 _lockedPeriod,\\r\\n        uint256 _emergencyUnlockFeeBps,\\r\\n        uint256 _lockingCost,\\r\\n        address _CARN,\\r\\n        address _PLSD,\\r\\n        address _PLSB,\\r\\n        address _ASIC,\\r\\n        address _HEX,\\r\\n        address _BuyAndBurn\\r\\n    ) {\\r\\n        reloadPeriod = _reloadPeriod;\\r\\n        lockedPeriod = _lockedPeriod;\\r\\n        emergencyUnlockFeeBps = _emergencyUnlockFeeBps;\\r\\n        lockingCost = _lockingCost;\\r\\n        reloadStart = block.timestamp;\\r\\n        reloadEnd = block.timestamp + _firstReloadPeriod;\\r\\n        CARN = _CARN;\\r\\n        PLSD = _PLSD;\\r\\n        PLSB = _PLSB;\\r\\n        ASIC = _ASIC;\\r\\n        HEX = _HEX;\\r\\n        BuyAndBurn = _BuyAndBurn;\\r\\n        currentStakeId = 1;\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) public nonReentrant {\\r\\n        if (block.timestamp > reloadEnd && state == State.ReloadPeriod) {\\r\\n            // reloadPeriod ended, start lockedPeriod\\r\\n            startLockedPeriod();\\r\\n        } else {\\r\\n            if (\\r\\n                block.timestamp > reloadStart && state != State.ReloadPeriod\\r\\n            ) {\\r\\n                // lockedPeriod ended, start reloadPeriod\\r\\n                startReloadPeriod();\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                stakes[msg.sender].amount == 0 &&\\r\\n                stakes[msg.sender].stakeId != currentStakeId\\r\\n            ) {\\r\\n                // new staker/staker don't have any pending claims, update stakeId\\r\\n                stakes[msg.sender].stakeId = currentStakeId;\\r\\n            }\\r\\n\\r\\n            require(\\r\\n                state == State.ReloadPeriod,\\r\\n                \\\"Can't stake during locked period\\\"\\r\\n            );\\r\\n            require(_amount > 0, \\\"Amount should be greater than zero\\\");\\r\\n            require(\\r\\n                stakes[msg.sender].stakeId == currentStakeId,\\r\\n                \\\"Please claim rewards for your previous stake\\\"\\r\\n            );\\r\\n\\r\\n            stakePool[currentStakeId] += _amount;\\r\\n            stakes[msg.sender].amount += _amount;\\r\\n\\r\\n            // Transfer the lockingCost to contract\\r\\n            IERC20(CARN).safeTransferFrom(msg.sender, BuyAndBurn, lockingCost);\\r\\n\\r\\n            // Transfer the stake to contract\\r\\n            IERC20(PLSD).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n            emit NewStake(msg.sender, currentStakeId, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function to trigger the locked period\\r\\n    function startLockedPeriod() public {\\r\\n        require(state != State.LockedPeriod, \\\"Already in locked period\\\");\\r\\n        require(block.timestamp > reloadEnd, \\\"Reload period not ended\\\");\\r\\n\\r\\n        reloadStart = block.timestamp + lockedPeriod;\\r\\n        reloadEnd = reloadStart + reloadPeriod;\\r\\n\\r\\n        // add pending rewards and unclaimed amounts to the reward pool\\r\\n        plsdRewardPool += plsdPendingRewards + unclaimedAmount;\\r\\n        plsdRewardPoolTotal = plsdRewardPool;\\r\\n        plsdPendingRewards = 0;\\r\\n\\r\\n        plsbRewardPool += plsbPendingRewards;\\r\\n        plsbRewardPoolTotal = plsbRewardPool;\\r\\n        plsbPendingRewards = 0;\\r\\n\\r\\n        asicRewardPool += asicPendingRewards;\\r\\n        asicRewardPoolTotal = asicRewardPool;\\r\\n        asicPendingRewards = 0;\\r\\n\\r\\n        hexRewardPool += hexPendingRewards;\\r\\n        hexRewardPoolTotal = hexRewardPool;\\r\\n        hexPendingRewards = 0;\\r\\n\\r\\n        // update unclaimed amounts for next stake\\r\\n        unclaimedAmount = stakePool[currentStakeId];\\r\\n\\r\\n        // update stakeId and state\\r\\n        currentStakeId++;\\r\\n        state = State.LockedPeriod;\\r\\n\\r\\n        emit LockedPeriodStarted(\\r\\n            msg.sender,\\r\\n            currentStakeId - 1,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function startReloadPeriod() public {\\r\\n        require(state != State.ReloadPeriod, \\\"Already in reload period\\\");\\r\\n        require(block.timestamp > reloadStart, \\\"Locked period not ended\\\");\\r\\n\\r\\n        // update start and end timestamps\\r\\n        reloadStart = block.timestamp;\\r\\n        reloadEnd = reloadStart + reloadPeriod;\\r\\n\\r\\n        // update state\\r\\n        state = State.ReloadPeriod;\\r\\n        emit ReloadPeriodStarted(msg.sender, currentStakeId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // function to end the stake during locked period in case of any emergency (emergency unlock fee is deducted)\\r\\n    function emergencyEnd() public nonReentrant {\\r\\n        require(state == State.LockedPeriod, \\\"Not in locked period\\\");\\r\\n\\r\\n        uint256 penaltyAmount = (stakes[msg.sender].amount * emergencyUnlockFeeBps) / 10000;\\r\\n        uint256 amountToTransfer = stakes[msg.sender].amount - penaltyAmount;\\r\\n\\r\\n        stakePool[currentStakeId - 1] -= stakes[msg.sender].amount;\\r\\n        unclaimedAmount -= stakes[msg.sender].amount;\\r\\n\\r\\n        plsdRewardPool += penaltyAmount;\\r\\n        plsdRewardPoolTotal = plsdRewardPool;\\r\\n\\r\\n        delete stakes[msg.sender];\\r\\n\\r\\n        IERC20(PLSD).safeTransfer(msg.sender, amountToTransfer);\\r\\n        emit EmergencyWithdraw(\\r\\n            msg.sender,\\r\\n            currentStakeId - 1,\\r\\n            amountToTransfer,\\r\\n            penaltyAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // function to contribute plsd to the reward pool\\r\\n    function depositPLSD(uint256 _amount) public nonReentrant {\\r\\n        if (state == State.ReloadPeriod) {\\r\\n            plsdPendingRewards += _amount;\\r\\n        } else {\\r\\n            plsdRewardPool += _amount;\\r\\n            plsdRewardPoolTotal = plsdRewardPool;\\r\\n        }\\r\\n\\r\\n        IERC20(PLSD).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit PLSDDeposited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // function to contribute plsb to the reward pool\\r\\n    function depositPLSB(uint256 _amount) public nonReentrant {\\r\\n        if (state == State.ReloadPeriod) {\\r\\n            plsbPendingRewards += _amount;\\r\\n        } else {\\r\\n            plsbRewardPool += _amount;\\r\\n            plsbRewardPoolTotal = plsbRewardPool;\\r\\n        }\\r\\n\\r\\n        IERC20(PLSB).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit PLSBDeposited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // function to contribute asic to the reward pool\\r\\n    function depositASIC(uint256 _amount) public nonReentrant {\\r\\n        if (state == State.ReloadPeriod) {\\r\\n            asicPendingRewards += _amount;\\r\\n        } else {\\r\\n            asicRewardPool += _amount;\\r\\n            asicRewardPoolTotal = asicRewardPool;\\r\\n        }\\r\\n\\r\\n        IERC20(ASIC).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit ASICDeposited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    // function to contribute hex to the reward pool\\r\\n    function depositHEX(uint256 _amount) public nonReentrant {\\r\\n        if (state == State.ReloadPeriod) {\\r\\n            hexPendingRewards += _amount;\\r\\n        } else {\\r\\n            hexRewardPool += _amount;\\r\\n            hexRewardPoolTotal = hexRewardPool;\\r\\n        }\\r\\n\\r\\n        IERC20(HEX).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit HEXDeposited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    // function to claim rewards once staking ends\\r\\n    function claimRewards() public nonReentrant {\\r\\n        if (block.timestamp > reloadEnd && state == State.ReloadPeriod) {\\r\\n            // reloadPeriod ended, start lockedPeriod\\r\\n            startLockedPeriod();\\r\\n        } else {\\r\\n            if (\\r\\n                block.timestamp > reloadStart && state != State.ReloadPeriod\\r\\n            ) {\\r\\n                // lockedPeriod ended, start reloadPeriod\\r\\n                startReloadPeriod();\\r\\n            }\\r\\n\\r\\n            require(\\r\\n                state == State.ReloadPeriod,\\r\\n                \\\"Can't claim during locked period\\\"\\r\\n            );\\r\\n            require(stakes[msg.sender].amount > 0, \\\"No stakes\\\");\\r\\n\\r\\n            if (stakes[msg.sender].stakeId == currentStakeId - 1) {\\r\\n                // normal case - user can claim their rewards\\r\\n                uint256 _plsdReward = (plsdRewardPoolTotal * stakes[msg.sender].amount) / stakePool[currentStakeId - 1];\\r\\n                uint256 _plsdAmount = stakes[msg.sender].amount + _plsdReward;\\r\\n                plsdRewardPool -= _plsdReward;\\r\\n\\r\\n                uint256 _plsbReward = (plsbRewardPoolTotal * stakes[msg.sender].amount) / stakePool[currentStakeId - 1];\\r\\n                plsbRewardPool -= _plsbReward;\\r\\n\\r\\n                uint256 _asicReward = (asicRewardPoolTotal * stakes[msg.sender].amount) / stakePool[currentStakeId - 1];\\r\\n                asicRewardPool -= _asicReward;\\r\\n\\r\\n                uint256 _hexReward = (hexRewardPoolTotal * stakes[msg.sender].amount) / stakePool[currentStakeId - 1];\\r\\n                hexRewardPool -= _hexReward;\\r\\n\\r\\n                unclaimedAmount -= stakes[msg.sender].amount;\\r\\n                stakes[msg.sender].amount = 0;\\r\\n                stakes[msg.sender].stakeId = currentStakeId;\\r\\n\\r\\n                IERC20(PLSD).safeTransfer(msg.sender, _plsdAmount);\\r\\n                IERC20(PLSB).safeTransfer(msg.sender, _plsbReward);\\r\\n                IERC20(ASIC).safeTransfer(msg.sender, _asicReward);\\r\\n                IERC20(HEX).safeTransfer(msg.sender, _hexReward);\\r\\n\\r\\n                emit PLSDRewardClaimed(\\r\\n                    msg.sender,\\r\\n                    currentStakeId - 1,\\r\\n                    _plsdAmount\\r\\n                );\\r\\n                emit PLSBRewardClaimed(\\r\\n                    msg.sender,\\r\\n                    currentStakeId - 1,\\r\\n                    _plsbReward\\r\\n                );\\r\\n                emit ASICRewardClaimed(\\r\\n                    msg.sender,\\r\\n                    currentStakeId - 1,\\r\\n                    _asicReward\\r\\n                );\\r\\n                emit HEXRewardClaimed(\\r\\n                    msg.sender,\\r\\n                    currentStakeId - 1,\\r\\n                    _hexReward\\r\\n                );\\r\\n\\r\\n            } else if (stakes[msg.sender].stakeId == currentStakeId) {\\r\\n                revert(\\\"Staking for this id is not finished yet\\\");\\r\\n            } else {\\r\\n                // Invalid stakeId - reset user's amount and stakeId\\r\\n                stakes[msg.sender].amount = 0;\\r\\n                stakes[msg.sender].stakeId = currentStakeId;\\r\\n\\r\\n                emit RewardReset(msg.sender, currentStakeId);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstReloadPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reloadPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emergencyUnlockFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockingCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_CARN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PLSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PLSB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ASIC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_HEX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BuyAndBurn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"ASICDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ASICRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CarnSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"HEXDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HEXRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockedPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"PLSBDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PLSBRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"PLSDDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PLSDRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReloadPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"RewardReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ASIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyAndBurn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLSB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asicPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asicRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asicRewardPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositASIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositHEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPLSB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPLSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnlockFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexRewardPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsbPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsbRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsbRewardPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsdPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsdRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsdRewardPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLockedPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReloadPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum PLSDStaker.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PLSDStaker", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000000d2f00000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000001b48eb57e000000000000000000000000000488db574c77dd27a07f9c97bac673bc8e9fc6bf300000000000000000000000034f0915a5f15a66eba86f6a58be1a471fb7836a70000000000000000000000005ee84583f67d5ecea5420dbb42b462896e7f8d06000000000000000000000000347a96a5bd06d2e15199b032f46fb724d6c730470000000000000000000000002b591e99afe9f32eaa6214f7b7629768c40eeb3900000000000000000000000004e3faa5758a2768ddafd34d91e7d04eef8feae2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}