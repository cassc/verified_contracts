{"SourceCode": "// StackedPepe \r\n// The worlds first pure pepe reflections token\r\n// https://t.me/stackedpepeportal\r\n// SPDX-License-Identifier: MIT                                                                               \r\n                                                    \r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amt) internal {\r\n        require(address(this).balance >= amt, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amt}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amt) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amt) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amt) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amt) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amt);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amt) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amt);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amt) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amt);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amt, \"ERC20: transfer amt exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amt);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amt) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amt, \"ERC20: transfer amt exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amt;\r\n        }\r\n        _balances[recipient] += amt;\r\n\r\n        emit Transfer(sender, recipient, amt);\r\n    }\r\n\r\n    function _createInitialSupply(address account, uint256 amt) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amt;\r\n        _balances[account] += amt;\r\n        emit Transfer(address(0), account, amt);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amt) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amt;\r\n        emit Approval(owner, spender, amt);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n  /// @notice View the amt of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n  /// @notice View the amt of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n  /// @notice View the amt of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n  /// @notice View the amt of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n\r\n  /// @notice Distributes ether to token holders as dividends.\r\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\r\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\r\n  ///  MUST emit a `DividendsDistributed` event when the amt of distributed ether is greater than 0.\r\n  function distributeDividends() external payable;\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n  ///  MUST emit a `DividendWithdrawn` event if the amt of ether transferred is greater than 0.\r\n  function withdrawDividend() external;\r\n\r\n  /// @dev This event MUST emit when ether is distributed to token holders.\r\n  /// @param from The address which sends ether to this contract.\r\n  /// @param weiAmt The amt of distributed ether in wei.\r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmt\r\n  );\r\n\r\n  /// @dev This event MUST emit when an address withdraws their dividend.\r\n  /// @param to The address which withdraws ether from this contract.\r\n  /// @param weiAmt The amt of withdrawn ether in wei.\r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmt\r\n  );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\ncontract DividendPayingToken is DividendPayingTokenInterface, DividendPayingTokenOptionalInterface, Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n\r\n  // With `magnitude`, we can properly distribute dividends even if the amt of received ether is small.\r\n  // For more discussion about choosing the value of `magnitude`,\r\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n \r\n  address public token;\r\n  \r\n  // About dividendCorrection:\r\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n  //   `dividendOf(_user)` should not be changed,\r\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n  \r\n  mapping (address => uint256) public holderBalance;\r\n  uint256 public totalBalance;\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n  /// @dev Distributes dividends whenever ether is paid to this contract.\r\n  receive() external payable {\r\n    distributeDividends();\r\n  }\r\n\r\n  /// @notice Distributes ether to token holders as dividends.\r\n  /// @dev It reverts if the total supply of tokens is 0.\r\n  /// It emits the `DividendsDistributed` event if the amt of received ether is greater than 0.\r\n  /// About undistributed ether:\r\n  ///   In each distribution, there is a small amt of ether not distributed,\r\n  ///     the magnified amt of which is\r\n  ///     `(msg.value * magnitude) % totalSupply()`.\r\n  ///   With a well-chosen `magnitude`, the amt of undistributed ether\r\n  ///     (de-magnified) in a distribution can be less than 1 wei.\r\n  ///   We can actually keep track of the undistributed ether in a distribution\r\n  ///     and try to distribute it in the next distribution,\r\n  ///     but keeping track of such data on-chain costs much more than\r\n  ///     the saved ether, so we don't do that.\r\n    \r\n  function distributeDividends() public override payable {\r\n    require(false, \"Cannot send BNB directly to tracker as it is unrecoverable\"); // \r\n  }\r\n  \r\n  function distributeTokenDividends(uint256 amt) public onlyOwner {\r\n    require(totalBalance > 0);\r\n\r\n        if (amt > 0) {\r\n        magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n            (amt).mul(magnitude) / totalBalance\r\n        );\r\n        emit DividendsDistributed(msg.sender, amt);\r\n\r\n        totalDividendsDistributed = totalDividendsDistributed.add(amt);\r\n        }\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amt of withdrawn ether is greater than 0.\r\n  function withdrawDividend() public virtual override {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amt of withdrawn ether is greater than 0.\r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      SafeERC20.safeTransfer(IERC20(token), user, _withdrawableDividend);\r\n\r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n\r\n  /// @notice View the amt of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n\r\n  /// @notice View the amt of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n\r\n  /// @notice View the amt of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n\r\n\r\n  /// @notice View the amt of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amt of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(holderBalance[_owner]).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n\r\n  /// @dev Internal function that increases tokens to an account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account that will receive the created tokens.\r\n  /// @param value The amt that will be created.\r\n  function _increase(address account, uint256 value) internal {\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  /// @dev Internal function that reduces an amt of the token of a given account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account whose tokens will be burnt.\r\n  /// @param value The amt that will be burnt.\r\n  function _reduce(address account, uint256 value) internal {\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = holderBalance[account];\r\n    holderBalance[account] = newBalance;\r\n    if(newBalance > currentBalance) {\r\n      uint256 increaseAmt = newBalance.sub(currentBalance);\r\n      _increase(account, increaseAmt);\r\n      totalBalance += increaseAmt;\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 reduceAmt = currentBalance.sub(newBalance);\r\n      _reduce(account, reduceAmt);\r\n      totalBalance -= reduceAmt;\r\n    }\r\n  }\r\n}\r\n\r\ncontract DividendTracker is DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event IncludeInDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amt, bool indexed automatic);\r\n\r\n    constructor(address _token) {\r\n    \tclaimWait = 1200;\r\n        minimumTokenBalanceForDividends = 1;\r\n        token = _token;\r\n    }\r\n\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(address key) private view returns (uint) {\r\n        return tokenHoldersMap.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(address key) private view returns (int) {\r\n        if(!tokenHoldersMap.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(tokenHoldersMap.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(uint index) private view returns (address) {\r\n        return tokenHoldersMap.keys[index];\r\n    }\r\n\r\n\r\n\r\n    function size() private view returns (uint) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function set(address key, uint val) private {\r\n        if (tokenHoldersMap.inserted[key]) {\r\n            tokenHoldersMap.values[key] = val;\r\n        } else {\r\n            tokenHoldersMap.inserted[key] = true;\r\n            tokenHoldersMap.values[key] = val;\r\n            tokenHoldersMap.indexOf[key] = tokenHoldersMap.keys.length;\r\n            tokenHoldersMap.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(address key) private {\r\n        if (!tokenHoldersMap.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete tokenHoldersMap.inserted[key];\r\n        delete tokenHoldersMap.values[key];\r\n\r\n        uint index = tokenHoldersMap.indexOf[key];\r\n        uint lastIndex = tokenHoldersMap.keys.length - 1;\r\n        address lastKey = tokenHoldersMap.keys[lastIndex];\r\n\r\n        tokenHoldersMap.indexOf[lastKey] = index;\r\n        delete tokenHoldersMap.indexOf[key];\r\n\r\n        tokenHoldersMap.keys[index] = lastKey;\r\n        tokenHoldersMap.keys.pop();\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \texcludedFromDividends[account] = true;\r\n\r\n    \t_setBalance(account, 0);\r\n    \tremove(account);\r\n\r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n    \r\n    function includeInDividends(address account) external onlyOwner {\r\n    \trequire(excludedFromDividends[account]);\r\n    \texcludedFromDividends[account] = false;\r\n\r\n    \temit IncludeInDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 1200 && newClaimWait <= 86400, \"Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"Dividend_Tracker: Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n\r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\tset(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\tremove(account);\r\n    \t}\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n    \r\n    \r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n\r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n    \tuint256 gasUsed = 0;\r\n\r\n    \tuint256 gasLeft = gasleft();\r\n\r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n\r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n\r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n\r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n    \t\titerations++;\r\n\r\n    \t\tuint256 newGasLeft = gasleft();\r\n\r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n\r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amt = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amt > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amt, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ILpPair {\r\n    function sync() external;\r\n}\r\n\r\ncontract TokenHandler is Ownable {\r\n    function sendTokenToOwner(address token) external onlyOwner {\r\n        if(IERC20(token).balanceOf(address(this)) > 0){\r\n            SafeERC20.safeTransfer(IERC20(token), owner(), IERC20(token).balanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n\r\ncontract StackedPepe is ERC20, Ownable {\r\n\r\n    uint256 public maxBuyAmt;\r\n    uint256 public maxSellAmt;\r\n    uint256 public maxWalletAmt;\r\n\r\n    DividendTracker public immutable dividendTracker;\r\n    address public immutable token;\r\n\r\n    IDexRouter public immutable dexRouter;\r\n    address public lpPair;\r\n\r\n    IERC20 public immutable REWARDTOKEN; \r\n\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmt;\r\n\r\n    TokenHandler public tokenHandler;\r\n    \r\n    bool public limitsActive = true;\r\n    bool public tradingLive = false;\r\n\r\n    uint256 public constant FEE_DIVISOR = 10000;\r\n\r\n    uint256 public buyTax;\r\n    uint256 public sellTax;\r\n\r\n    mapping (address => bool) private _isExcludedFromTax;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmt;\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event StartedTrading();\r\n    event RemovedLimits();\r\n    event ExcludeFromTax(address indexed account, bool isExcluded);\r\n    event UpdatedMaxBuyAmt(uint256 newAmt);\r\n    event UpdatedMaxSellAmt(uint256 newAmt);\r\n    event UpdatedMaxWalletAmt(uint256 newAmt);\r\n    event UpdatedBuyTax(uint256 newAmt);\r\n    event UpdatedSellTax(uint256 newAmt);\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n    event CaughtEarlyBuyer(address sniper);\r\n    event TransferForeignToken(address token, uint256 amt);\r\n\r\n    constructor() ERC20(\"StackedPepe\", \"STACK\") {\r\n\r\n        address rewardAddress;\r\n        address _dexRouter;\r\n\r\n        if(block.chainid == 1){\r\n            rewardAddress  = 0x6982508145454Ce325dDbE47a25d4ec3d2311933; // PEPE\r\n            _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Ethereum: Uniswap V2\r\n        } else if(block.chainid == 5){\r\n            rewardAddress = 0x2f3A40A3db8a7e3D09B0adfEfbCe4f6F81927557; // Goerli USDC\r\n            _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Goerli Router\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n\r\n        token = rewardAddress;\r\n        dividendTracker = new DividendTracker(token);\r\n\r\n        REWARDTOKEN = IERC20(rewardAddress);\r\n        require(REWARDTOKEN.decimals()  > 0 , \"Incorrect liquidity token\");\r\n\r\n        address newOwner = msg.sender; // can leave alone if owner is deployer.\r\n\r\n        dexRouter = IDexRouter(_dexRouter);\r\n\r\n        uint256 totalSupply = 420690000000000 * 1e18;\r\n        \r\n        maxBuyAmt = totalSupply * 1 / 100;\r\n        maxSellAmt = totalSupply * 1 / 100;\r\n        maxWalletAmt = totalSupply * 1 / 100;\r\n        swapTokensAtAmt = totalSupply * 25 / 100000;\r\n\r\n        tokenHandler = new TokenHandler();\r\n\r\n        buyTax = 0; // 100 = 1%\r\n        sellTax = 9900; // 100 = 1%\r\n\r\n        _excludeFromMaxTransaction(newOwner, true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(address(dexRouter), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(address(dexRouter));\r\n        dividendTracker.excludeFromDividends(newOwner);\r\n        dividendTracker.excludeFromDividends(address(dexRouter));\r\n        dividendTracker.excludeFromDividends(address(0xdead));\r\n\r\n        excludeFromTax(newOwner, true);\r\n        excludeFromTax(address(this), true);\r\n        excludeFromTax(address(dexRouter), true);\r\n        excludeFromTax(address(0xdead), true);\r\n\r\n        createPair();\r\n\r\n        _createInitialSupply(address(newOwner), totalSupply);\r\n        transferOwnership(newOwner);\r\n        _approve(address(owner()), address(dexRouter), totalSupply);\r\n\r\n        REWARDTOKEN.approve(address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function createPair() internal {\r\n        require(lpPair == address(0), \"Pair Already Created\");\r\n        // create pair\r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\r\n        setAutomatedMarketMakerPair(address(lpPair), true);\r\n    }\r\n\r\n    function updateAllowanceForSwapping() external {\r\n        REWARDTOKEN.approve(address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        require(!tradingLive, \"Trading is already active, cannot relaunch.\");\r\n        require(lpPair != address(0), \"Create Pair First\");\r\n        tradingLive = true;\r\n        emit StartedTrading();\r\n    }\r\n\r\n    // excludes wallets and contracts from dividends (such as CEX hotwallets, etc.)\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n\r\n    // removes exclusion on wallets and contracts from dividends (such as CEX hotwallets, etc.)\r\n    function includeInDividends(address account) external onlyOwner {\r\n        dividendTracker.includeInDividends(account);\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        limitsActive = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function updateMaxBuyAmt(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 1 / 100)/1e18, \"Cannot set max sell amt lower than 1%\");\r\n        maxBuyAmt = newNum * (10**18);\r\n        emit UpdatedMaxBuyAmt(maxBuyAmt);\r\n    }\r\n    \r\n    function updateMaxSellAmt(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 1 / 100)/1e18, \"Cannot set max sell amt lower than 1%\");\r\n        maxSellAmt = newNum * (10**18);\r\n        emit UpdatedMaxSellAmt(maxSellAmt);\r\n    }\r\n\r\n    function removeMaxWallet() external onlyOwner {\r\n        maxWalletAmt = totalSupply();\r\n        emit UpdatedMaxWalletAmt(maxWalletAmt);\r\n    }\r\n\r\n    function updateSwapTokensAtAmt(uint256 newAmt) external onlyOwner {\r\n  \t    require(newAmt >= totalSupply() * 1 / 1000000, \"Swap amt cannot be lower than 0.0001% total supply.\");\r\n  \t    require(newAmt <= totalSupply() * 1 / 1000, \"Swap amt cannot be higher than 0.1% total supply.\");\r\n  \t    swapTokensAtAmt = newAmt;\r\n  \t}\r\n    \r\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\r\n        _isExcludedMaxTransactionAmt[updAds] = isExcluded;\r\n        emit MaxTransactionExclusion(updAds, isExcluded);\r\n    }\r\n\r\n    function airdropToWallets(address[] memory wallets, uint256[] memory amountsInWei) external onlyOwner {\r\n        require(wallets.length == amountsInWei.length, \"arrays must be the same length\");\r\n        require(wallets.length < 600, \"Can only airdrop 600 wallets per txn due to gas limits\");\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            super._transfer(msg.sender, wallets[i], amountsInWei[i]);\r\n            dividendTracker.setBalance(payable(wallets[i]), balanceOf(wallets[i]));\r\n        }\r\n    }\r\n    \r\n    function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner {\r\n        if(!isEx){\r\n            require(updAds != lpPair, \"Cannot remove uniswap pair from max txn\");\r\n        }\r\n        _isExcludedMaxTransactionAmt[updAds] = isEx;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != lpPair || value, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        _excludeFromMaxTransaction(pair, value);\r\n        if(value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateTax(uint256 _buyTax, uint256 _sellTax) external onlyOwner {\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n        emit UpdatedBuyTax(buyTax);\r\n        emit UpdatedSellTax(sellTax);\r\n    }\r\n\r\n    function excludeFromTax(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromTax[account] = excluded;\r\n        emit ExcludeFromTax(account, excluded);\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns(uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) public view returns(uint256) {\r\n    \treturn dividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.holderBalance(account);\r\n\t}\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n\tfunction getAccountDividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    \r\n    function getNumberOfDividends() external view returns(uint256) {\r\n        return dividendTracker.totalBalance();\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amt) internal override {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if(amt == 0){\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if(_isExcludedFromTax[from] || _isExcludedFromTax[to] || swapping){\r\n            super._transfer(from, to, amt);\r\n            dividendTracker.setBalance(payable(from), balanceOf(from));\r\n            dividendTracker.setBalance(payable(to), balanceOf(to));\r\n            return;\r\n        }\r\n\r\n        require(tradingLive, \"Trading is not active.\");\r\n        \r\n        if(limitsActive){\r\n            //when buy\r\n            if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmt[to]) {\r\n                require(amt <= maxBuyAmt, \"Buy transfer amt exceeds the max buy.\");\r\n                require(amt + balanceOf(to) <= maxWalletAmt, \"Cannot Exceed max wallet\");\r\n            } \r\n            //when sell\r\n            else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmt[from]) {\r\n                require(amt <= maxSellAmt, \"Sell transfer amt exceeds the max sell.\");\r\n            } \r\n            else if (!_isExcludedMaxTransactionAmt[to]){\r\n                require(amt + balanceOf(to) <= maxWalletAmt, \"Cannot Exceed max wallet\");\r\n            }\r\n        }\r\n\r\n        if(balanceOf(address(this)) >= swapTokensAtAmt && automatedMarketMakerPairs[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n        \r\n        uint256 tax = 0;\r\n        // on sell\r\n        if (automatedMarketMakerPairs[to] && sellTax > 0){\r\n            tax = amt * sellTax / FEE_DIVISOR;\r\n        }\r\n\r\n        // on buy\r\n        else if(automatedMarketMakerPairs[from] && buyTax > 0) {\r\n            tax = amt * buyTax / FEE_DIVISOR;\r\n        }\r\n        \r\n        if(tax > 0){    \r\n            super._transfer(from, address(this), tax);\r\n            amt -= tax;\r\n        }\r\n        \r\n        super._transfer(from, to, amt);\r\n\r\n        dividendTracker.setBalance(payable(from), balanceOf(from));\r\n        dividendTracker.setBalance(payable(to), balanceOf(to));\r\n    }\r\n\r\n    function swapTokensForREWARDTOKEN(uint256 tokenAmt) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = address(dexRouter.WETH());\r\n        path[2] = address(REWARDTOKEN);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmt,\r\n            0, // accept any amt of ETH\r\n            path,\r\n            address(tokenHandler),\r\n            block.timestamp\r\n        );\r\n\r\n        tokenHandler.sendTokenToOwner(address(REWARDTOKEN));\r\n    }\r\n\r\n    function swapBack() private {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        \r\n        if(contractBalance == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmt * 40){\r\n            contractBalance = swapTokensAtAmt * 40;\r\n        }\r\n        swapTokensForREWARDTOKEN(contractBalance);\r\n\r\n        uint256 receivedTokens = REWARDTOKEN.balanceOf(address(this));\r\n        if(receivedTokens > 0){ \r\n            SafeERC20.safeTransfer(REWARDTOKEN, address(dividendTracker), receivedTokens);\r\n            dividendTracker.distributeTokenDividends(receivedTokens);\r\n        }\r\n    }\r\n\r\n    // force Swap back if slippage issues.\r\n    function forceSwapBack() external onlyOwner {\r\n        require(balanceOf(address(this)) >= swapTokensAtAmt, \"Can only swap when token amt is at or higher than restriction\");\r\n        swapping = true;\r\n        swapBack();\r\n        swapping = false;\r\n        emit OwnerForcedSwapBack(block.timestamp);\r\n    }\r\n\r\n    function transferForeignToken(address _token, address _to) external onlyOwner {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this) || !tradingLive, \"Can't withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        SafeERC20.safeTransfer(IERC20(_token),_to, _contractBalance);\r\n        emit TransferForeignToken(_token, _contractBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"CaughtEarlyBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartedTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDTOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInWei\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHandler\",\"outputs\":[{\"internalType\":\"contract TokenHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllowanceForSwapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StackedPepe", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87a0805ee73acbb41e2bfb9e8a5ac2129344af3576b4c1b4234dfdb0539e7a88"}