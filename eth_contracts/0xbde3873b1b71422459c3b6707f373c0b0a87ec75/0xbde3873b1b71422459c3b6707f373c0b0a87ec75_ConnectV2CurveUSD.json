{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function changeEthAddrToWethAddr(address token) internal pure returns(address tokenAddr){\\n        tokenAddr = token == ethAddr ? wethAddr : token;\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n    function cast(\\n        string[] calldata _targetNames,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n}\\n\\ninterface ListInterface {\\n    function accountID(address) external returns (uint64);\\n}\\n\\ninterface InstaConnectors {\\n    function isConnectors(string[] calldata) external returns (bool, address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toUint(int256 x) internal pure returns (uint256) {\\n      require(x >= 0, \\\"int-overflow\\\");\\n      return uint256(x);\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping, ListInterface, InstaConnectors } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Return InstaList Address\\n   */\\n  ListInterface internal constant instaList = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\\n\\n  /**\\n\\t * @dev Return connectors registry address\\n\\t */\\n\\tInstaConnectors internal constant instaConnectors = InstaConnectors(0x97b0B3A8bDeFE8cB9563a3c610019Ad10DB8aD11);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/crvusd/events.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogCreateLoan(address indexed collateral, uint256 amt, uint256 debt, uint256 indexed numBands, uint256 controllerVersion, uint256 getId, uint256 setId);\\n    event LogAddCollateral(address indexed collateral, uint256 indexed amt, uint256 controllerVersion, uint256 getId, uint256 setId);\\n    event LogRemoveCollateral(address indexed collateral, uint256 indexed amt, uint256 getId, uint256 setId);\\n    event LogBorrowMore(address indexed collateral, uint256 indexed amt, uint256 controllerVersion, uint256 indexed debt);\\n    event LogRepay(address indexed collateral, uint256 indexed amt, uint256 controllerVersion, uint256 getId, uint256 setId);\\n    event LogLiquidate(address indexed collateral, uint256 indexed min_x, uint256 controllerVersion, uint256 getId, uint256 setId);\\n}\"\r\n    },\r\n    \"contracts/mainnet/connectors/crvusd/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n\\n    address internal constant CRV_USD = 0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E;\\n    /**\\n     * @dev ControllerFactory Interface\\n     */\\n    IControllerFactory internal constant CONTROLLER_FACTORY =\\n        IControllerFactory(0xC9332fdCB1C491Dcc683bAe86Fe3cb70360738BC);\\n\\n    /**\\n     * @dev Get controller address by given collateral asset\\n     */\\n    function getController(address collateral, uint256 i) internal view returns(IController controller) {\\n        controller = IController(CONTROLLER_FACTORY.get_controller(collateral, i));\\n    }\\n}\"\r\n    },\r\n    \"contracts/mainnet/connectors/crvusd/interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\n\\ninterface IControllerFactory {\\n    function get_controller(address collateral, uint256 index) external view returns (address);\\n}\\n\\ninterface IController {\\n    function create_loan(uint256 collateral, uint256 debt, uint256 N) payable external;\\n    function add_collateral(uint256 collateral, address _for) payable external;\\n    function remove_collateral(uint256 collateral, bool use_eth) external;\\n    function borrow_more(uint256 collateral, uint256 debt) payable external;\\n    function repay(uint256 _d_debt, address _for, int256 max_active_band, bool use_eth) payable external;\\n    function repay(uint256 _d_debt) payable external;\\n    function liquidate(address user, uint256 min_x, bool use_eth) external;\\n    function max_borrowable(uint256 collateral, uint256 N) external view returns(uint256);\\n    function min_collateral(uint256 debt, uint256 N) external view returns(uint256);\\n    function user_state(address user) external view returns(uint256[4] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/crvusd/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Curve USD.\\n * @dev Collateralized Borrowing.\\n */\\n\\nimport { TokenInterface, AccountInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\nabstract contract CurveUSDResolver is Helpers, Events {\\n    /**\\n     * @dev Create loan\\n     * @dev If a user already has an existing loan, the function will revert.\\n     * @param collateral Collateral token address.(For ETH: `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\\n     * @param amt Amount of collateral (For max: `uint256(-1)`)\\n     * @param debtAmt Stablecoin debt to take (For max: `uint256(-1)`)\\n     * @param numBands Number of bands to deposit into (to do autoliquidation-deliquidation), can only be from MIN_TICKS(4) to MAX_TICKS(50)\\n     * @param controllerVersion Controller version,\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of debt borrowed.\\n    */\\n    function createLoan(\\n        address collateral,\\n        uint256 amt,\\n        uint256 debtAmt, \\n        uint256 numBands,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external returns (string memory _eventName, bytes memory _eventParam) {\\n        uint256 _amt = getUint(getId, amt);\\n\\n        bool _isEth = collateral == ethAddr;\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n        TokenInterface collateralContract = TokenInterface(_collateralAddress);\\n        \\n        // Get controller address of collateral.\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n\\n        if (_isEth) {\\n            _amt = _amt == uint256(-1) ? address(this).balance : _amt;\\n            convertEthToWeth(_isEth, collateralContract, _amt);\\n        } else {\\n            _amt = _amt == uint256(-1) ? collateralContract.balanceOf(address(this)) : _amt;\\n        }\\n\\n        approve(collateralContract, address(controller), _amt);\\n\\n        uint256 _debtAmt = debtAmt == uint256(-1) ? controller.max_borrowable(_amt, numBands) : debtAmt;\\n\\n        controller.create_loan(_amt, _debtAmt, numBands);\\n\\n        setUint(setId, _debtAmt);\\n        _eventName = \\\"LogCreateLoan(address,uint256,uint256,uint256,uint256,uin256,uin256)\\\";\\n        _eventParam = abi.encode(collateral, _amt, _debtAmt, numBands, controllerVersion, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Add collateral\\n     * @notice Add extra collateral to avoid bad liqidations\\n     * @param collateral Collateral token address.(For ETH: `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\\n     * @param amt Amount of collateral (For max: `uint256(-1)`)\\n     * @param controllerVersion Controller version,\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the collateral amount of tokens added.\\n    */\\n    function addCollateral(\\n        address collateral,\\n        uint256 amt,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        \\n        bool _isEth = collateral == ethAddr;\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n\\n        // Get controller address of collateral.\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n        TokenInterface collateralContract = TokenInterface(_collateralAddress);\\n\\n        if (_isEth) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            convertEthToWeth(_isEth, collateralContract, _amt);\\n        } else {\\n            _amt = _amt == uint(-1) ? collateralContract.balanceOf(address(this)) : _amt;\\n        }\\n\\n        approve(collateralContract, address(controller), _amt);\\n        controller.add_collateral(_amt, address(this));\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogAddCollateral(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(collateral, amt, controllerVersion, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Remove ETH/ERC20_Token Collateral.\\n     * @notice Remove some collateral without repaying the debt\\n     * @param collateral Collateral token address.(For ETH: `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\\n     * @param amt Remove collateral amount (For max: `uint256(-1)`)\\n     * @param controllerVersion   controller version\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens deposited.\\n    */\\n    function removeCollateral(\\n        address collateral,\\n        uint256 amt,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        bool _isEth = collateral == ethAddr;\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n\\n        // remove_collateral will unwrap the eth.\\n        controller.remove_collateral(_amt, _isEth);\\n\\n        setUint(setId, _amt);\\n        _eventName = \\\"LogRemoveCollateral(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(collateral, amt, controllerVersion, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Borrow more stablecoins while adding more collateral (not necessary)\\n     * @param collateral Collateral token address.(For ETH: `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\\n     * @param debtAmt Stablecoin debt to take for borrow more (For max: `uint256(-1)`)\\n     * @param controllerVersion controller version\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens deposited.\\n    */\\n    function borrowMore(\\n        address collateral,\\n        uint256 debtAmt,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, debtAmt);\\n\\n        bool _isEth = collateral == ethAddr;\\n\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n\\n        uint256[4] memory res = controller.user_state(address(this));\\n        uint256 _debtAmt = debtAmt == uint(-1) \\n            ? controller.max_borrowable(res[0], res[3]) - res[2] \\n            : debtAmt;\\n\\n        controller.borrow_more(0, _debtAmt);\\n        \\n        setUint(setId, _amt);\\n        _eventName = \\\"LogBorrowMore(address,uint256,uint256,uin256,uin256)\\\";\\n        _eventParam = abi.encode(collateral, debtAmt, controllerVersion, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Borrow more stablecoins while adding more collateral (not necessary)\\n     * @param collateral Collateral token address.(For ETH: `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\\n     * @param colAmt Collateral amount for borrow more (For max: `uint256(-1)`)\\n     * @param debtAmt Stablecoin debt to take for borrow more (For max: `uint256(-1)`)\\n     * @param controllerVersion controller version\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens deposited.\\n    */\\n    function addCollateralAndBorrowMore(\\n        address collateral,\\n        uint256 colAmt,\\n        uint256 debtAmt,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, colAmt);\\n\\n        bool _isEth = collateral == ethAddr;\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n        TokenInterface collateralContract = TokenInterface(_collateralAddress);\\n\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n\\n        if (_isEth) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            convertEthToWeth(_isEth, collateralContract, _amt);\\n        } else {\\n            _amt = _amt == uint(-1) ? collateralContract.balanceOf(address(this)) : _amt;\\n        }\\n        \\n        approve(collateralContract, address(controller), _amt);\\n\\n        uint256[4] memory res = controller.user_state(address(this));\\n        uint256 _debtAmt = debtAmt == uint(-1) \\n            ? controller.max_borrowable(_amt + res[0], res[3]) - res[2] \\n            : debtAmt;\\n\\n        controller.borrow_more(_amt, _debtAmt);\\n        \\n        setUint(setId, _amt);\\n        _eventName = \\\"LogAddCollateralAndBorrowMore(address,uint256,uint256,uint256,uin256,uin256)\\\";\\n        _eventParam = abi.encode(collateral, colAmt, debtAmt, controllerVersion, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Repay Curve-USD.\\n     * @param collateral Collateral token address.(For ETH: `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\\n     * @param amt repay amount (For max: `uint256(-1)`)\\n     * @param controllerVersion Controller version.\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of debt borrowed.\\n    */\\n    function repay(\\n        address collateral,\\n        uint256 amt,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        bool _isEth = collateral == ethAddr;\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n\\n        TokenInterface stableCoin = TokenInterface(CRV_USD);\\n        _amt = _amt == uint(-1) ? stableCoin.balanceOf(address(this)) : _amt;\\n\\n        approve(stableCoin, address(controller), _amt);\\n\\n        controller.repay(_amt);\\n\\n        setUint(setId, _amt);\\n        _eventName = \\\"LogRepay(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(collateral, amt, controllerVersion, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Peform a bad liquidation (or self-liquidation) of user if health is not good\\n     * @param collateral collateral token address\\n     * @param minReceiveAmt Minimal amount of stablecoin to receive (to avoid liquidators being sandwiched)\\n     * @param controllerVersion controller version.\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of debt borrowed. \\n    */\\n    function selfLiquidate(\\n        address collateral,\\n        uint256 minReceiveAmt,\\n        uint256 controllerVersion,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _minReceiveAmt = getUint(getId, minReceiveAmt);\\n\\n        bool _isEth = collateral == ethAddr;\\n        address _collateralAddress = _isEth ? wethAddr : collateral;\\n        IController controller = getController(_collateralAddress, controllerVersion);\\n\\n        TokenInterface stableCoin = TokenInterface(CRV_USD);\\n        approve(stableCoin, address(controller), _minReceiveAmt);\\n\\n        controller.liquidate(address(this), _minReceiveAmt, _isEth);\\n\\n        setUint(setId, _minReceiveAmt);\\n        _eventName = \\\"LogLiquidate(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(collateral, _minReceiveAmt, controllerVersion, getId, setId);\\n    }\\n}\\n\\ncontract ConnectV2CurveUSD is CurveUSDResolver {\\n    string public constant name = \\\"CurveUSD-v1.0\\\";\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogAddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"LogBorrowMore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numBands\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogCreateLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"min_x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogRemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"colAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"addCollateralAndBorrowMore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrowMore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numBands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"selfLiquidate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ConnectV2CurveUSD", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}