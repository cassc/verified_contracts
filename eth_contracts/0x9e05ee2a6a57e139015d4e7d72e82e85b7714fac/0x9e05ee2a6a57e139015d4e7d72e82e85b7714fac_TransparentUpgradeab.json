{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/past-versions/UnlockV13.sol\": {\r\n      \"content\": \"// Sources flattened with hardhat v2.18.3 https://hardhat.org\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\n\\n// File contracts/interfaces/IMintableERC20.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\ninterface IMintableERC20 {\\n  function mint(address account, uint256 amount) external returns (bool);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\\n\\n// File contracts/interfaces/IPublicLock.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n// Original pragma directive: pragma experimental ABIEncoderV2\\n\\n/**\\n * @title The PublicLock Interface\\n */\\n\\ninterface IPublicLock {\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n  // default role from OpenZeppelin\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n   * @notice The version number of the current implementation on this network.\\n   * @return The current version number.\\n   */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing(uint _keyPrice, address _tokenAddress) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock:\\n   *\\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply\\n   */\\n  function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(address _user) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n   * @param _tokenId the id of the key\\n   * @dev Returns 0 if the owner has never owned a key for this lock\\n   */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n\\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign\\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n   * @dev Purchase function\\n   * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n   * (_values is ignored when using ETH)\\n   * @param _recipients array of addresses of the recipients of the purchased key\\n   * @param _referrers array of addresses of the users making the referral\\n   * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n   * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n   * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored\\n   * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n   * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n   * than keyPrice is approved for spending).\\n   * @return tokenIds the ids of the created tokens\\n   */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n\\n  /**\\n   * @dev Extend function\\n   * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n   * (_value is ignored when using ETH)\\n   * @param _tokenId the id of the key to extend\\n   * @param _referrer address of the user making the referral\\n   * @param _data arbitrary data populated by the front-end which initiated the sale\\n   * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n   */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n  /**\\n   * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n   * @param _referrer the address of the referrer\\n   * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n   */\\n  function referrerFees(\\n    address _referrer\\n  ) external view returns (uint referrerFee);\\n\\n  /**\\n   * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing,\\n   * extending or renewing a key.\\n   * @param _referrer the address of the referrer\\n   * @param _feeBasisPoint the percentage of the price to be used for this\\n   * specific referrer (in basis points)\\n   * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n   */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n   * @param _gasRefundValue price in wei or token in smallest price unit\\n   * @dev Set the value to be refunded to the sender on purchase\\n   */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n\\n  /**\\n   * _gasRefundValue price in wei or token in smallest price unit\\n   * @dev Returns the value/price to be refunded to the sender on purchase\\n   */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(uint _transferFeeBasisPoints) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes\\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key\\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(uint _tokenId, uint _amount) external;\\n\\n  /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   * @notice cancel is enabled with a 10% penalty by default on all Locks.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addLockManager(address account) external;\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyPurchaseHook() external view returns (address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyCancelHook() external view returns (address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onValidKeyHook() external view returns (address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns (address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns (address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n   * @return hookAddress the address ok the hook\\n   */\\n  function onKeyExtendHook() external view returns (address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyGrantHook` hook.\\n   * @return hookAddress the address ok the hook\\n   */\\n  function onKeyGrantHook() external view returns (address hookAddress);\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256);\\n\\n  function freeTrialLength() external view returns (uint256);\\n\\n  function keyPrice() external view returns (uint256);\\n\\n  function maxNumberOfKeys() external view returns (uint256);\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256);\\n\\n  function tokenAddress() external view returns (address);\\n\\n  function transferFeeBasisPoints() external view returns (uint256);\\n\\n  function unlockProtocol() external view returns (address);\\n\\n  function keyManagerOf(uint) external view returns (address);\\n\\n  ///===================================================================\\n\\n  /**\\n   * @notice Allows the key owner to safely share their key (parent key) by\\n   * transferring a portion of the remaining time to a new key (child key).\\n   * @dev Throws if key is not valid.\\n   * @dev Throws if `_to` is the zero address\\n   * @param _to The recipient of the shared key\\n   * @param _tokenId the key to share\\n   * @param _timeShared The amount of time shared\\n   * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n   * `onERC721Received` on `_to` and throws if the return value is not\\n   * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n   * @dev Emit Transfer event\\n   */\\n  function shareKey(address _to, uint _tokenId, uint _timeShared) external;\\n\\n  /**\\n   * @notice Update transfer and cancel rights for a given key\\n   * @param _tokenId The id of the key to assign rights for\\n   * @param _keyManager The address to assign the rights to for the given key\\n   */\\n  function setKeyManagerOf(uint _tokenId, address _keyManager) external;\\n\\n  /**\\n   * Check if a certain key is valid\\n   * @param _tokenId the id of the key to check validity\\n   * @notice this makes use of the onValidKeyHook if it is set\\n   */\\n  function isValidKey(uint _tokenId) external view returns (bool);\\n\\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(\\n    address _keyOwner\\n  ) external view returns (uint numberOfKeys);\\n\\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n   */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the NFT specified by `tokenId`.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Requirements:\\n   * - `from`, `to` cannot be zero.\\n   * - `tokenId` must be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this\\n   * NFT by either `approve` or `setApprovalForAll`.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /**\\n   * an ERC721-like function to transfer a token from one account to another.\\n   * @param from the owner of token to transfer\\n   * @param to the address that will receive the token\\n   * @param tokenId the id of the token\\n   * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n   * either `approve` or `setApprovalForAll`.\\n   * The key manager will be reset to address zero after the transfer\\n   */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /**\\n   * Lending a key allows you to transfer the token while retaining the\\n   * ownerships right by setting yourself as a key manager first.\\n   * @param from the owner of token to transfer\\n   * @param to the address that will receive the token\\n   * @param tokenId the id of the token\\n   * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n   * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n   * will become the key manager.\\n   */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /**\\n   * Unlend is called when you have lent a key and want to claim its full ownership back.\\n   * @param _recipient the address that will receive the token ownership\\n   * @param _tokenId the id of the token\\n   * @dev Only the key manager of the token can call this function\\n   */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @notice Get the approved address for a single NFT\\n   * @dev Throws if `_tokenId` is not a valid NFT.\\n   * @param _tokenId The NFT to find the approved address for\\n   * @return operator The approved address for this NFT, or the zero address if there is none\\n   */\\n  function getApproved(\\n    uint256 _tokenId\\n  ) external view returns (address operator);\\n\\n  /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n  /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  ) external view returns (bool);\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * Returns the total number of keys, including non-valid ones\\n   * @return _totalKeysCreated the total number of keys, valid or not\\n   */\\n  function totalSupply() external view returns (uint256 _totalKeysCreated);\\n\\n  function tokenOfOwnerByIndex(\\n    address _owner,\\n    uint256 index\\n  ) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n   * Innherited from Open Zeppelin AccessControl.sol\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  function grantRole(bytes32 role, address account) external;\\n\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n   * The `Ownable` logic is used by many 3rd party services to determine\\n   * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n   *\\n   * @notice This logic is NOT used internally by the Unlock Protocol and is made\\n   * available only as a convenience helper.\\n   */\\n  function owner() external view returns (address owner);\\n\\n  function setOwner(address account) external;\\n\\n  function isOwner(address account) external view returns (bool isOwner);\\n\\n  /**\\n   * Migrate data from the previous single owner => key mapping to\\n   * the new data structure w multiple tokens.\\n   * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n   * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n   * variable to the latest/current lock version\\n   */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n   * Returns the version number of the data schema currently used by the lock\\n   * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n   * or extend keys is disabled.\\n   * @dev will return 0 if no ;igration has ever been run\\n   */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n  /**\\n   * Renew a given token\\n   * @notice only works for non-free, expiring, ERC20 locks\\n   * @param _tokenId the ID fo the token to renew\\n   * @param _referrer the address of the person to be granted UDT\\n   */\\n  function renewMembershipFor(uint _tokenId, address _referrer) external;\\n\\n  /**\\n   * Set the expiration of a key\\n   * @notice only a lock manager can call this function\\n   * @param _tokenId the id of the key\\n   * @param _newExpiration the new timestamp to use\\n   */\\n  function setKeyExpiration(uint _tokenId, uint _newExpiration) external;\\n\\n  /**\\n   * @dev helper to check if a key is currently renewable\\n   * it will revert if the pricing or duration of the lock have been modified\\n   * unfavorably since the key was bought(price increase or duration decrease).\\n   * It will also revert if a lock is not renewable or if the key is not ready for renewal yet\\n   * (at least 90% expired).\\n   * @param tokenId the id of the token to check\\n   * @param referrer the address where to send the referrer fee\\n   * @return true if the terms has changed\\n   */\\n  function isRenewable(\\n    uint256 tokenId,\\n    address referrer\\n  ) external view returns (bool);\\n}\\n\\n\\n// File contracts/interfaces/ISwapBurner.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ISwapBurner {\\n  function swapAndBurn(\\n    address tokenAddress,\\n    uint24 poolFee\\n  ) external payable returns (uint amount);\\n}\\n\\n\\n// File contracts/interfaces/IUniswapOracleV3.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapOracleV3 {\\n  function PERIOD() external returns (uint256);\\n\\n  function factory() external returns (address);\\n\\n  function update(address _tokenIn, address _tokenOut) external;\\n\\n  function consult(\\n    address _tokenIn,\\n    uint256 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  function updateAndConsult(\\n    address _tokenIn,\\n    uint256 _amountIn,\\n    address _tokenOut\\n  ) external returns (uint256 _amountOut);\\n}\\n\\n\\n// File contracts/interfaces/IUnlock.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlock {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(bytes memory data) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI() external view returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI() external view returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol() external view returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol() external view returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(address impl, uint16 version) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(address _impl) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion() external view returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(address payable _publicLockAddress) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct() external view returns (uint);\\n\\n  function totalDiscountGranted() external view returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (bool deployed, uint totalSales, uint yieldedDiscountTokens);\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress() external view returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(address) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase() external view returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(address _tokenAddress, address _oracleAddress) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for\\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT`\\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n  function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance\\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n\\n  /**\\n   * Functions which transfers tokens held by the contract\\n   * It handles both ERC20 and the base currency.\\n   * @dev This function is onlyOwner\\n   * @param token the address of the token to transfer (pass the 0x0 address for the base currency)\\n   * @param to the address to transfer the tokens to\\n   * @param amount the amount of tokens to transfer\\n   */\\n  function transferTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * Removes a lock from the list of locks. This will prevent the lock from being able to receive governance tokens.\\n   * The lock will still be able to sell its memberships.\\n   * @dev This function is onlyOwner\\n   * @param lock address of the lock to remove\\n   */\\n  function removeLock(address lock) external;\\n\\n  /**\\n   * Send tokens held by this contract to the UDT SwapBurner contract. The tokens sent to the\\n   * contract are then swapped for UDT and UDT itself will be sent to a burner address.\\n   * @notice This function can be called by anyone (not only the contract owner) as a way to ensure decentralization.\\n   * @param token the address of the token (zero address for native) to swap and burn\\n   * @param amount the amount of tokens to swap and burn\\n   * @param poolFee the poolFee of the token <> WETH/Wrapped Native asset to  use for the swap\\n   */\\n  function swapAndBurn(address token, uint256 amount, uint24 poolFee) external;\\n\\n  /**\\n   * Set the UDT Swap and Burn contract address\\n   * @param _swapBurnerAddress the address of the SwapBurner contract instance\\n   */\\n  function setSwapBurner(address _swapBurnerAddress) external;\\n\\n  /**\\n   * The address of the UDT Swap and Burn contract\\n   */\\n  function swapBurnerAddress() external view returns (address);\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.9.5\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n\\n// File contracts/utils/UnlockInitializable.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract UnlockInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\n   */\\n  modifier initializer() {\\n    // If the contract is initializing we ignore whether initialized is set in order to support multiple\\n    // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n    // contract may have been reentered.\\n    require(\\n      initializing ? _isConstructor() : !initialized,\\n      \\\"ALREADY_INITIALIZED\\\"\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} modifier, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(initializing, \\\"NOT_INITIALIZING\\\");\\n    _;\\n  }\\n\\n  function _isConstructor() private view returns (bool) {\\n    return !AddressUpgradeable.isContract(address(this));\\n  }\\n}\\n\\n\\n// File contracts/utils/UnlockContextUpgradeable.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract UnlockContextUpgradeable is UnlockInitializable {\\n  function __Context_init() internal onlyInitializing {\\n    __Context_init_unchained();\\n  }\\n\\n  function __Context_init_unchained() internal onlyInitializing {}\\n\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n\\n  uint256[50] private ______gap;\\n}\\n\\n\\n// File contracts/utils/UnlockOwnable.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract was originally part of openzeppelin/contracts-ethereum-package\\n * but had to be included (instead of using the one in openzeppelin/contracts-upgradeable )\\n * because the ______gap array length was 49 instead of 50\\n */\\nabstract contract UnlockOwnable is\\n  UnlockInitializable,\\n  UnlockContextUpgradeable\\n{\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  function __initializeOwnable(address sender) public initializer {\\n    _owner = sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"ONLY_OWNER\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return _msgSender() == _owner;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * > Note: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    require(newOwner != address(0), \\\"INVALID_OWNER\\\");\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  uint256[50] private ______gap;\\n}\\n\\n\\n// File contracts/utils/UnlockProxyAdmin.sol\\n\\n/* solhint-disable no-inline-assembly */\\n// Sources flattened with hardhat v2.18.3 https://hardhat.org\\n\\n// Original license: SPDX_License_Identifier: MIT\\n\\npragma solidity ^0.8.21;\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby disabling any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\\n// File @openzeppelin/contracts/interfaces/draft-IERC1822.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\\n// File @openzeppelin/contracts/interfaces/IERC1967.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Emitted when the beacon is changed.\\n   */\\n  event BeaconUpgraded(address indexed beacon);\\n}\\n\\n// File @openzeppelin/contracts/proxy/beacon/IBeacon.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n  /**\\n   * @dev Must return an address that can be used as a delegate call target.\\n   *\\n   * {BeaconProxy} will check that this address is a contract.\\n   */\\n  function implementation() external view returns (address);\\n}\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   *\\n   * Furthermore, `isContract` will also return true if the target contract within\\n   * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n   * which only has an effect at the end of a transaction.\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return\\n      verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data\\n  ) internal view returns (bytes memory) {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return\\n      verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data\\n  ) internal returns (bytes memory) {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return\\n      verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\\n// File @openzeppelin/contracts/utils/StorageSlot.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  struct StringSlot {\\n    string value;\\n  }\\n\\n  struct BytesSlot {\\n    bytes value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(\\n    bytes32 slot\\n  ) internal pure returns (AddressSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(\\n    bytes32 slot\\n  ) internal pure returns (BooleanSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(\\n    bytes32 slot\\n  ) internal pure returns (Bytes32Slot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(\\n    bytes32 slot\\n  ) internal pure returns (Uint256Slot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n   */\\n  function getStringSlot(\\n    bytes32 slot\\n  ) internal pure returns (StringSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n   */\\n  function getStringSlot(\\n    string storage store\\n  ) internal pure returns (StringSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := store.slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n   */\\n  function getBytesSlot(\\n    bytes32 slot\\n  ) internal pure returns (BytesSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n   */\\n  function getBytesSlot(\\n    bytes storage store\\n  ) internal pure returns (BytesSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := store.slot\\n    }\\n  }\\n}\\n\\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 private constant _ROLLBACK_SLOT =\\n    0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _getImplementation() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(\\n      Address.isContract(newImplementation),\\n      \\\"ERC1967: new implementation is not a contract\\\"\\n    );\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      Address.functionDelegateCall(newImplementation, data);\\n    }\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n    } else {\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (\\n        bytes32 slot\\n      ) {\\n        require(\\n          slot == _IMPLEMENTATION_SLOT,\\n          \\\"ERC1967Upgrade: unsupported proxiableUUID\\\"\\n        );\\n      } catch {\\n        revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n      }\\n      _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Returns the current admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setAdmin(address newAdmin) private {\\n    require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   *\\n   * Emits an {AdminChanged} event.\\n   */\\n  function _changeAdmin(address newAdmin) internal {\\n    emit AdminChanged(_getAdmin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT =\\n    0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Returns the current beacon.\\n   */\\n  function _getBeacon() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new beacon in the EIP1967 beacon slot.\\n   */\\n  function _setBeacon(address newBeacon) private {\\n    require(\\n      Address.isContract(newBeacon),\\n      \\\"ERC1967: new beacon is not a contract\\\"\\n    );\\n    require(\\n      Address.isContract(IBeacon(newBeacon).implementation()),\\n      \\\"ERC1967: beacon implementation is not a contract\\\"\\n    );\\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n  }\\n\\n  /**\\n   * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n   * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n   *\\n   * Emits a {BeaconUpgraded} event.\\n   */\\n  function _upgradeBeaconToAndCall(\\n    address newBeacon,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    _setBeacon(newBeacon);\\n    emit BeaconUpgraded(newBeacon);\\n    if (data.length > 0 || forceCall) {\\n      Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n    }\\n  }\\n}\\n\\n// File @openzeppelin/contracts/proxy/Proxy.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n   */\\n  constructor(address _logic, bytes memory _data) payable {\\n    _upgradeToAndCall(_logic, _data, false);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address impl)\\n  {\\n    return ERC1967Upgrade._getImplementation();\\n  }\\n}\\n\\n// File @openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n  function admin() external view returns (address);\\n\\n  function implementation() external view returns (address);\\n\\n  function changeAdmin(address) external;\\n\\n  function upgradeTo(address) external;\\n\\n  function upgradeToAndCall(address, bytes memory) external payable;\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n  /**\\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n   */\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable ERC1967Proxy(_logic, _data) {\\n    _changeAdmin(admin_);\\n  }\\n\\n  /**\\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n   *\\n   * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n   * implementation provides a function with the same selector.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _getAdmin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n   */\\n  function _fallback() internal virtual override {\\n    if (msg.sender == _getAdmin()) {\\n      bytes memory ret;\\n      bytes4 selector = msg.sig;\\n      if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n        ret = _dispatchUpgradeTo();\\n      } else if (\\n        selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector\\n      ) {\\n        ret = _dispatchUpgradeToAndCall();\\n      } else if (\\n        selector == ITransparentUpgradeableProxy.changeAdmin.selector\\n      ) {\\n        ret = _dispatchChangeAdmin();\\n      } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n        ret = _dispatchAdmin();\\n      } else if (\\n        selector == ITransparentUpgradeableProxy.implementation.selector\\n      ) {\\n        ret = _dispatchImplementation();\\n      } else {\\n        revert(\\n          \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\"\\n        );\\n      }\\n      assembly {\\n        return(add(ret, 0x20), mload(ret))\\n      }\\n    } else {\\n      super._fallback();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   *\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n   */\\n  function _dispatchAdmin() private returns (bytes memory) {\\n    _requireZeroValue();\\n\\n    address admin = _getAdmin();\\n    return abi.encode(admin);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   *\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n   */\\n  function _dispatchImplementation() private returns (bytes memory) {\\n    _requireZeroValue();\\n\\n    address implementation = _implementation();\\n    return abi.encode(implementation);\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   *\\n   * Emits an {AdminChanged} event.\\n   */\\n  function _dispatchChangeAdmin() private returns (bytes memory) {\\n    _requireZeroValue();\\n\\n    address newAdmin = abi.decode(msg.data[4:], (address));\\n    _changeAdmin(newAdmin);\\n\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy.\\n   */\\n  function _dispatchUpgradeTo() private returns (bytes memory) {\\n    _requireZeroValue();\\n\\n    address newImplementation = abi.decode(msg.data[4:], (address));\\n    _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n   * proxied contract.\\n   */\\n  function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n    (address newImplementation, bytes memory data) = abi.decode(\\n      msg.data[4:],\\n      (address, bytes)\\n    );\\n    _upgradeToAndCall(newImplementation, data, true);\\n\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   *\\n   * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n   */\\n  function _admin() internal view virtual returns (address) {\\n    return _getAdmin();\\n  }\\n\\n  /**\\n   * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n   * emulate some proxy functions being non-payable while still allowing value to pass through.\\n   */\\n  function _requireZeroValue() private {\\n    require(msg.value == 0);\\n  }\\n}\\n\\n// File @openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol@v4.9.3\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n  /**\\n   * @dev Returns the current implementation of `proxy`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function getProxyImplementation(\\n    ITransparentUpgradeableProxy proxy\\n  ) public view virtual returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(\\n      hex\\\"5c60da1b\\\"\\n    );\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `proxy`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function getProxyAdmin(\\n    ITransparentUpgradeableProxy proxy\\n  ) public view virtual returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(\\n      hex\\\"f851a440\\\"\\n    );\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the current admin of `proxy`.\\n   */\\n  function changeProxyAdmin(\\n    ITransparentUpgradeableProxy proxy,\\n    address newAdmin\\n  ) public virtual onlyOwner {\\n    proxy.changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function upgrade(\\n    ITransparentUpgradeableProxy proxy,\\n    address implementation\\n  ) public virtual onlyOwner {\\n    proxy.upgradeTo(implementation);\\n  }\\n\\n  /**\\n   * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n   * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function upgradeAndCall(\\n    ITransparentUpgradeableProxy proxy,\\n    address implementation,\\n    bytes memory data\\n  ) public payable virtual onlyOwner {\\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n  }\\n}\\n\\n\\n// File contracts/Unlock.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/**\\n * @title The Unlock contract\\n * @author Julien Genestoux (unlock-protocol.com)\\n * This smart contract has 3 main roles:\\n *  1. Distribute discounts to discount token holders\\n *  2. Grant dicount tokens to users making referrals and/or publishers granting discounts.\\n *  3. Create & deploy Public Lock contracts.\\n * In order to achieve these 3 elements, it keeps track of several things such as\\n *  a. Deployed locks addresses and balances of discount tokens granted by each lock.\\n *  b. The total network product (sum of all key sales, net of discounts)\\n *  c. Total of discounts granted\\n *  d. Balances of discount tokens, including 'frozen' tokens (which have been used to claim\\n * discounts and cannot be used/transferred for a given period)\\n *  e. Growth rate of Network Product\\n *  f. Growth rate of Discount tokens supply\\n * The smart contract has an owner who only can perform the following\\n *  - Upgrades\\n *  - Change in golden rules (20% of GDP available in discounts, and supply growth rate is at most\\n * 50% of GNP growth rate)\\n * NOTE: This smart contract is partially implemented for now until enough Locks are deployed and\\n * in the wild.\\n * The partial implementation includes the following features:\\n *  a. Keeping track of deployed locks\\n *  b. Keeping track of GNP\\n */\\n\\n\\n\\n\\n\\n\\n\\n\\n/// @dev Must list the direct base contracts in the order from \u201cmost base-like\u201d to \u201cmost derived\u201d.\\n/// https://solidity.readthedocs.io/en/latest/contracts.html#multiple-inheritance-and-linearization\\ncontract Unlock is UnlockInitializable, UnlockOwnable {\\n  /**\\n   * The struct for a lock\\n   * We use deployed to keep track of deployments.\\n   * This is required because both totalSales and yieldedDiscountTokens are 0 when initialized,\\n   * which would be the same values when the lock is not set.\\n   */\\n  struct LockBalances {\\n    bool deployed;\\n    uint totalSales; // This is in wei\\n    uint yieldedDiscountTokens;\\n  }\\n\\n  modifier onlyFromDeployedLock() {\\n    require(locks[msg.sender].deployed, \\\"ONLY_LOCKS\\\");\\n    _;\\n  }\\n\\n  uint public grossNetworkProduct;\\n\\n  uint public totalDiscountGranted;\\n\\n  // We keep track of deployed locks to ensure that callers are all deployed locks.\\n  mapping(address => LockBalances) public locks;\\n\\n  // global base token URI\\n  // Used by locks where the owner has not set a custom base URI.\\n  string public globalBaseTokenURI;\\n\\n  // global base token symbol\\n  // Used by locks where the owner has not set a custom symbol\\n  string public globalTokenSymbol;\\n\\n  // The address of the latest public lock template, used by default when `createLock` is called\\n  address public publicLockAddress;\\n\\n  // Map token address to oracle contract address if the token is supported\\n  // Used for GDP calculations\\n  mapping(address => IUniswapOracleV3) public uniswapOracles;\\n\\n  // The WETH token address, used for value calculations\\n  address public weth;\\n\\n  // The UDT token address, used to mint tokens on referral\\n  address public udt;\\n\\n  // The approx amount of gas required to purchase a key\\n  uint public estimatedGasForPurchase;\\n\\n  // Blockchain ID the network id on which this version of Unlock is operating\\n  uint public chainId;\\n\\n  // store proxy admin\\n  address public proxyAdminAddress;\\n  ProxyAdmin private proxyAdmin;\\n\\n  // publicLock templates\\n  mapping(address => uint16) private _publicLockVersions;\\n  mapping(uint16 => address) private _publicLockImpls;\\n  uint16 public publicLockLatestVersion;\\n\\n  // protocol fee\\n  uint public protocolFee;\\n\\n  // UDT SwapBurner contract address\\n  address public swapBurnerAddress;\\n\\n  // errors\\n  error Unlock__MANAGER_ONLY();\\n  error Unlock__VERSION_TOO_HIGH();\\n  error Unlock__MISSING_TEMPLATE();\\n  error Unlock__ALREADY_DEPLOYED();\\n  error Unlock__MISSING_PROXY_ADMIN();\\n  error Unlock__MISSING_LOCK_TEMPLATE();\\n  error Unlock__MISSING_LOCK(address lockAddress);\\n  error Unlock__INVALID_AMOUNT();\\n  error Unlock__INVALID_TOKEN();\\n\\n  // Events\\n  event NewLock(address indexed lockOwner, address indexed newLockAddress);\\n\\n  event LockUpgraded(address lockAddress, uint16 version);\\n\\n  event ConfigUnlock(\\n    address udt,\\n    address weth,\\n    uint estimatedGasForPurchase,\\n    string globalTokenSymbol,\\n    string globalTokenURI,\\n    uint chainId\\n  );\\n\\n  event SetLockTemplate(address publicLockAddress);\\n\\n  event GNPChanged(\\n    uint grossNetworkProduct,\\n    uint _valueInETH,\\n    address tokenAddress,\\n    uint value,\\n    address lockAddress\\n  );\\n\\n  event ResetTrackedValue(uint grossNetworkProduct, uint totalDiscountGranted);\\n\\n  event UnlockTemplateAdded(address indexed impl, uint16 indexed version);\\n\\n  event SwapBurnerChanged(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  // Use initialize instead of a constructor to support proxies (for upgradeability via OZ).\\n  function initialize(address _unlockOwner) public initializer {\\n    // We must manually initialize Ownable\\n    UnlockOwnable.__initializeOwnable(_unlockOwner);\\n    // add a proxy admin on deployment\\n    _deployProxyAdmin();\\n  }\\n\\n  function initializeProxyAdmin() public onlyOwner {\\n    if (proxyAdminAddress != address(0)) {\\n      revert Unlock__ALREADY_DEPLOYED();\\n    }\\n    _deployProxyAdmin();\\n  }\\n\\n  /**\\n   * @dev Deploy the ProxyAdmin contract that will manage lock templates upgrades\\n   * This deploys an instance of ProxyAdmin used by PublicLock transparent proxies.\\n   */\\n  function _deployProxyAdmin() private returns (address) {\\n    proxyAdmin = new ProxyAdmin();\\n    proxyAdminAddress = address(proxyAdmin);\\n    return address(proxyAdmin);\\n  }\\n\\n  /**\\n   * @dev Helper to get the version number of a template from his address\\n   */\\n  function publicLockVersions(address _impl) external view returns (uint16) {\\n    return _publicLockVersions[_impl];\\n  }\\n\\n  /**\\n   * @dev Helper to get the address of a template based on its version number\\n   */\\n  function publicLockImpls(uint16 _version) external view returns (address) {\\n    return _publicLockImpls[_version];\\n  }\\n\\n  /**\\n   * @dev Registers a new PublicLock template immplementation\\n   * The template is identified by a version number\\n   * Once registered, the template can be used to upgrade an existing Lock\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function addLockTemplate(address impl, uint16 version) public onlyOwner {\\n    // if the template has not been initialized,\\n    // claim the template so that no-one else could\\n    try IPublicLock(impl).initialize(address(this), 0, address(0), 0, 0, \\\"\\\") {\\n      // renounce the lock manager role that was added during initialization\\n      IPublicLock(impl).renounceLockManager();\\n    } catch {\\n      // failure means that the template is already initialized\\n    }\\n\\n    _publicLockVersions[impl] = version;\\n    _publicLockImpls[version] = impl;\\n\\n    emit UnlockTemplateAdded(impl, version);\\n  }\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass type(uint).max for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) public returns (address) {\\n    bytes memory data = abi.encodeWithSignature(\\n      \\\"initialize(address,uint256,address,uint256,uint256,string)\\\",\\n      msg.sender,\\n      _expirationDuration,\\n      _tokenAddress,\\n      _keyPrice,\\n      _maxNumberOfKeys,\\n      _lockName\\n    );\\n\\n    return createUpgradeableLock(data);\\n  }\\n\\n  /**\\n   * @notice Create upgradeable lock\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(bytes memory data) public returns (address) {\\n    address newLock = createUpgradeableLockAtVersion(\\n      data,\\n      publicLockLatestVersion\\n    );\\n    return newLock;\\n  }\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) public returns (address) {\\n    if (proxyAdminAddress == address(0)) {\\n      revert Unlock__MISSING_PROXY_ADMIN();\\n    }\\n\\n    // get lock version\\n    address publicLockImpl = _publicLockImpls[_lockVersion];\\n    if (publicLockImpl == address(0)) {\\n      revert Unlock__MISSING_LOCK_TEMPLATE();\\n    }\\n\\n    // deploy a proxy pointing to impl\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(\\n      publicLockImpl,\\n      proxyAdminAddress,\\n      data\\n    );\\n    address payable newLock = payable(address(proxy));\\n\\n    // assign the new Lock\\n    locks[newLock] = LockBalances({\\n      deployed: true,\\n      totalSales: 0,\\n      yieldedDiscountTokens: 0\\n    });\\n\\n    // trigger event\\n    emit NewLock(msg.sender, newLock);\\n    return newLock;\\n  }\\n\\n  /**\\n   * @dev Upgrade a Lock template implementation\\n   * @param lockAddress the address of the lock to be upgraded\\n   * @param version the version number of the template\\n   * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n   */\\n\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address) {\\n    if (proxyAdminAddress == address(0)) {\\n      revert Unlock__MISSING_PROXY_ADMIN();\\n    }\\n\\n    // check perms\\n    if (_isLockManager(lockAddress, msg.sender) != true) {\\n      revert Unlock__MANAGER_ONLY();\\n    }\\n\\n    // check version\\n    IPublicLock lock = IPublicLock(lockAddress);\\n    uint16 currentVersion = lock.publicLockVersion();\\n\\n    if (version != currentVersion + 1) {\\n      revert Unlock__VERSION_TOO_HIGH();\\n    }\\n\\n    // make our upgrade\\n    address impl = _publicLockImpls[version];\\n    if (impl == address(0)) {\\n      revert Unlock__MISSING_TEMPLATE();\\n    }\\n\\n    ITransparentUpgradeableProxy proxy = ITransparentUpgradeableProxy(\\n      lockAddress\\n    );\\n\\n    proxyAdmin.upgrade(proxy, impl);\\n\\n    // let's upgrade the data schema\\n    // the function is called with empty bytes as migration behaviour is set by the lock in accordance to data version\\n    lock.migrate(\\\"0x\\\");\\n\\n    emit LockUpgraded(lockAddress, version);\\n    return lockAddress;\\n  }\\n\\n  function _isLockManager(\\n    address lockAddress,\\n    address _sender\\n  ) private view returns (bool isManager) {\\n    IPublicLock lock = IPublicLock(lockAddress);\\n    return lock.isLockManager(_sender);\\n  }\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   */\\n  function computeAvailableDiscountFor(\\n    address /* _purchaser */,\\n    uint /* _keyPrice */\\n  ) public pure returns (uint discount, uint tokens) {\\n    return (0, 0);\\n  }\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint) {\\n    return block.basefee;\\n  }\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer\\n  ) public onlyFromDeployedLock {\\n    if (_value > 0) {\\n      uint valueInETH;\\n      address tokenAddress = IPublicLock(msg.sender).tokenAddress();\\n      if (tokenAddress != address(0) && tokenAddress != weth) {\\n        // If priced in an ERC-20 token, find the supported uniswap oracle\\n        IUniswapOracleV3 oracle = uniswapOracles[tokenAddress];\\n        if (address(oracle) != address(0)) {\\n          valueInETH = oracle.updateAndConsult(tokenAddress, _value, weth);\\n        }\\n      } else {\\n        // If priced in ETH (or value is 0), no conversion is required\\n        valueInETH = _value;\\n      }\\n\\n      updateGrossNetworkProduct(\\n        valueInETH,\\n        tokenAddress,\\n        _value,\\n        msg.sender // lockAddress\\n      );\\n\\n      // If GNP does not overflow, the lock totalSales should be safe\\n      locks[msg.sender].totalSales += valueInETH;\\n\\n      // Distribute UDT\\n      // version 13 is the first version for which locks can be paying the fee.\\n      // Prior versions should not distribute UDT if they don't \\\"pay\\\" the fee.\\n      if (\\n        _referrer != address(0) &&\\n        IPublicLock(msg.sender).publicLockVersion() >= 13\\n      ) {\\n        IUniswapOracleV3 udtOracle = uniswapOracles[udt];\\n        if (address(udtOracle) != address(0)) {\\n          // Get the value of 1 UDT (w/ 18 decimals) in ETH\\n          uint udtPrice = udtOracle.updateAndConsult(udt, 10 ** 18, weth);\\n\\n          uint balance = IMintableERC20(udt).balanceOf(address(this));\\n\\n          // base fee default to 100 GWEI for chains that does\\n          uint baseFee;\\n          try this.networkBaseFee() returns (uint _basefee) {\\n            // no assigned value\\n            if (_basefee == 0) {\\n              baseFee = 100;\\n            } else {\\n              baseFee = _basefee;\\n            }\\n          } catch {\\n            // block.basefee not supported\\n            baseFee = 100;\\n          }\\n\\n          // tokensToDistribute is either == to the gas cost\\n          uint tokensToDistribute = ((estimatedGasForPurchase * baseFee) *\\n            (10 ** 18)) / udtPrice;\\n\\n          // or tokensToDistribute is capped by network GDP growth\\n          // we distribute tokens using asymptotic curve between 0 and 0.5\\n          uint maxTokens = (balance * valueInETH) /\\n            (2 + (2 * valueInETH) / grossNetworkProduct) /\\n            grossNetworkProduct;\\n\\n          // cap to GDP growth!\\n          if (tokensToDistribute > maxTokens) {\\n            tokensToDistribute = maxTokens;\\n          }\\n\\n          if (tokensToDistribute > 0) {\\n            if (balance > tokensToDistribute) {\\n              // Only distribute if there are enough tokens\\n              IMintableERC20(udt).transfer(_referrer, tokensToDistribute);\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Update the GNP by a new value.\\n   * Emits an event to simply tracking\\n   */\\n  function updateGrossNetworkProduct(\\n    uint _valueInETH,\\n    address _tokenAddress,\\n    uint _value,\\n    address _lock\\n  ) internal {\\n    // increase GNP\\n    grossNetworkProduct = grossNetworkProduct + _valueInETH;\\n\\n    emit GNPChanged(\\n      grossNetworkProduct,\\n      _valueInETH,\\n      _tokenAddress,\\n      _value,\\n      _lock\\n    );\\n  }\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] only Kept for backwards compatibility\\n   */\\n  function recordConsumedDiscount(\\n    uint /* _discount */,\\n    uint /* _tokens */\\n  ) public view onlyFromDeployedLock {\\n    return;\\n  }\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16) {\\n    return 13;\\n  }\\n\\n  /**\\n   * Set the fee used by the protocol\\n   * @param _protocolFee fee in basic point\\n   */\\n  function setProtocolFee(uint _protocolFee) external onlyOwner {\\n    protocolFee = _protocolFee;\\n  }\\n\\n  /**\\n   * Set the UDT Swap and Burn contract address\\n   * @param _swapBurnerAddress the address of the SwapBurner contract instance\\n   */\\n  function setSwapBurner(address _swapBurnerAddress) external onlyOwner {\\n    address prevSwapBurnerAddress = swapBurnerAddress;\\n    swapBurnerAddress = _swapBurnerAddress;\\n    emit SwapBurnerChanged(prevSwapBurnerAddress, swapBurnerAddress);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external onlyOwner {\\n    udt = _udt;\\n    weth = _weth;\\n    estimatedGasForPurchase = _estimatedGasForPurchase;\\n\\n    globalTokenSymbol = _symbol;\\n    globalBaseTokenURI = _URI;\\n\\n    chainId = _chainId;\\n\\n    emit ConfigUnlock(\\n      _udt,\\n      _weth,\\n      _estimatedGasForPurchase,\\n      _symbol,\\n      _URI,\\n      _chainId\\n    );\\n  }\\n\\n  /**\\n   * @notice Set the default PublicLock template to use when creating locks\\n   */\\n  function setLockTemplate(address _publicLockAddress) external onlyOwner {\\n    if (_publicLockVersions[_publicLockAddress] == 0) {\\n      revert Unlock__MISSING_LOCK_TEMPLATE();\\n    }\\n    // set latest version\\n    publicLockLatestVersion = _publicLockVersions[_publicLockAddress];\\n    // set corresponding template\\n    publicLockAddress = _publicLockAddress;\\n    emit SetLockTemplate(_publicLockAddress);\\n  }\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external onlyOwner {\\n    uniswapOracles[_tokenAddress] = IUniswapOracleV3(_oracleAddress);\\n    if (_oracleAddress != address(0)) {\\n      IUniswapOracleV3(_oracleAddress).update(_tokenAddress, weth);\\n    }\\n  }\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external onlyOwner {\\n    grossNetworkProduct = _grossNetworkProduct;\\n    totalDiscountGranted = _totalDiscountGranted;\\n\\n    emit ResetTrackedValue(_grossNetworkProduct, _totalDiscountGranted);\\n  }\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI() external view returns (string memory) {\\n    return globalBaseTokenURI;\\n  }\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol() external view returns (string memory) {\\n    return globalTokenSymbol;\\n  }\\n\\n  // for doc, see IUnlock.sol\\n  function getAdmin() public view returns (address) {\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  // for doc, see IUnlock.sol\\n  function postLockUpgrade() public {\\n    // check if lock hasnot already been deployed here and version is correct\\n    if (\\n      locks[msg.sender].deployed == false &&\\n      IPublicLock(msg.sender).publicLockVersion() == 13 &&\\n      block.chainid == 1 &&\\n      IPublicLock(msg.sender).unlockProtocol() ==\\n      0x3d5409CcE1d45233dE1D4eBDEe74b8E004abDD13 // hardcoded address of previous Unlock\\n    ) {\\n      IUnlock previousUnlock = IUnlock(\\n        0x3d5409CcE1d45233dE1D4eBDEe74b8E004abDD13\\n      );\\n\\n      (\\n        bool deployed,\\n        uint totalSales,\\n        uint yieldedDiscountTokens\\n      ) = previousUnlock.locks(msg.sender);\\n\\n      // record lock from old Unlock in this one\\n      if (deployed) {\\n        locks[msg.sender] = LockBalances(\\n          deployed,\\n          totalSales,\\n          yieldedDiscountTokens\\n        );\\n      } else {\\n        revert Unlock__MISSING_LOCK(msg.sender);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Internal helper to transfer token held by this contract\\n   */\\n  function _transfer(address token, address to, uint256 amount) internal {\\n    if (token != address(0)) {\\n      IMintableERC20(token).transfer(to, amount);\\n    } else {\\n      payable(to).transfer(amount);\\n    }\\n  }\\n\\n  /**\\n   * Functions which transfers tokens held by the contract\\n   * It handles both ERC20 and the base currency.\\n   * @dev This function is onlyOwner\\n   * @param token the address of the token to transfer (pass the 0x0 address for the base currency)\\n   * @param to the address to transfer the tokens to\\n   * @param amount the amount of tokens to transfer\\n   */\\n  function transferTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) public onlyOwner {\\n    _transfer(token, to, amount);\\n  }\\n\\n  /**\\n   * Send tokens held by this contract to the UDT SwapBurner contract. The tokens sent to the\\n   * contract are then swapped for UDT and UDT itself will be sent to a burner address.\\n   * @notice This function can be called by anyone (not only the contract owner) as a way to ensure decentralization.\\n   * @param token the address of the token (zero address for native) to swap and burn\\n   * @param amount the amount of tokens to swap and burn\\n   */\\n  function swapAndBurn(address token, uint256 amount, uint24 poolFee) public {\\n    if (token == udt) {\\n      revert Unlock__INVALID_TOKEN();\\n    }\\n    _transfer(token, swapBurnerAddress, amount);\\n    ISwapBurner(swapBurnerAddress).swapAndBurn(token, poolFee);\\n  }\\n\\n  /**\\n   * Removes a lock from the list of locks. This will prevent the lock from being able to receive governance tokens.\\n   * The lock will still be able to sell its memberships.\\n   * @dev This function is onlyOwner\\n   * @param lock address of the lock to remove\\n   */\\n  function removeLock(address lock) external onlyOwner {\\n    delete locks[lock];\\n  }\\n\\n  // required to receive ETH / withdraw ETH\\n  receive() external payable {\\n    if (msg.value <= 0) {\\n      revert Unlock__INVALID_AMOUNT();\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 80\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TransparentUpgradeableProxy", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "80", "ConstructorArguments": "000000000000000000000000fe9fd6af67e48d9f05aa88679ac294e3f28532ee0000000000000000000000009c381f1c68a7a020d90c7314c01a164fbf01ea18000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001246eadde43000000000000000000000000c61678ed37c4e2259a872993b475e845856708500000000000000000000000000000000000000000000000000000000001e133800000000000000000000000007391a131ccb43a571a34e09f986080d117b4313c0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002c4d69636b6579204d656d6520537562736372697074696f6e204e46542028762e302e302e3120414c50484129000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}