{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface IOwnable is IOwnableInternal, IERC173 {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/IOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/ISafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\n\\ninterface ISafeOwnable is ISafeOwnableInternal, IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/OwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/SafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        _setOwner(msg.sender);\\n        delete SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice grant permission to given address to claim contract ownership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        _setNomineeOwner(account);\\n    }\\n\\n    /**\\n     * @notice set nominee owner\\n     */\\n    function _setNomineeOwner(address account) internal virtual {\\n        SafeOwnableStorage.layout().nomineeOwner = account;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/data/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC165Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return contract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC173Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC2981Internal } from './IERC2981Internal.sol';\\n\\n/**\\n * @title ERC2981 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2981\\n */\\ninterface IERC2981 is IERC2981Internal, IERC165 {\\n    /**\\n     * @notice called with the sale price to determine how much royalty is owed and to whom\\n     * @param tokenId the ERC721 or ERC1155 token id to query for royalty information\\n     * @param salePrice the sale price of the given asset\\n     * @return receiever rightful recipient of royalty\\n     * @return royaltyAmount amount of royalty owed\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiever, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC2981Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC2981 interface\\n */\\ninterface IERC2981Internal {\\n\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC721Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal virtual {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from '../base/IDiamondBase.sol';\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/common/ERC2981/ERC2981Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC2981Storage {\\n    struct Layout {\\n        // token id -> royalty (denominated in basis points)\\n        mapping(uint256 => uint16) royaltiesBPS;\\n        uint16 defaultRoyaltyBPS;\\n        // token id -> receiver address\\n        mapping(uint256 => address) royaltyReceivers;\\n        address defaultRoyaltyReceiver;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC2981');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DiamondOperatorFilter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { IOperatorFilterRegistry } from \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @dev copied from operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\n * @dev some of the control flow was removed to remove unnecessary branches\\n */\\ncontract DiamondOperatorFilter {\\n    IOperatorFilterRegistry constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    /// @dev The upgradeable initialize function that should be called when the contract is being upgraded.\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy) internal {\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondWritableRevokable/DiamondWritableRevokable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { OwnableInternal } from \\\"@solidstate/contracts/access/ownable/OwnableInternal.sol\\\";\\nimport { IDiamondWritable } from \\\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\\\";\\nimport { DiamondWritableInternal } from \\\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\\\";\\nimport { DiamondWritableRevokableStorage } from \\\"./DiamondWritableRevokableStorage.sol\\\";\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract with built in revokability\\n */\\nabstract contract DiamondWritableRevokable is IDiamondWritable, DiamondWritableInternal, OwnableInternal {\\n    error UpgradeabilityRevoked();\\n\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     * @dev also checks to ensure upgradeability has not been revoked\\n     */\\n    function diamondCut(FacetCut[] calldata facetCuts, address target, bytes calldata data) external onlyOwner {\\n        if (DiamondWritableRevokableStorage.layout().isUpgradeabiltyRevoked) revert UpgradeabilityRevoked();\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondWritableRevokable/DiamondWritableRevokableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nlibrary DiamondWritableRevokableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"keepers.contracts.storage.diamond.writable.revokable\\\");\\n\\n    struct Layout {\\n        bool isUpgradeabiltyRevoked;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/KeepersERC721/KeepersERC721Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nlibrary KeepersERC721Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"keepers.contracts.storage.keepers.erc721.storage\\\");\\n\\n    // @dev struct which describes a commit\\n    // @dev use uint128 for tight variable packing\\n    struct MintCommit {\\n        uint128 numNFTs;\\n        uint128 commitBlock;\\n    }\\n\\n    struct Layout {\\n        // @dev keeps track of available tokens for fisher yates shuffle\\n        mapping(uint256 => uint256) availableTokens;\\n        // @dev a mapping of user address to their pending commit\\n        mapping(address => MintCommit) pendingCommits;\\n        // Mint parameters\\n        mapping(address => uint256) mintCountPerAddress;\\n        // the following variables will be tightly packed\\n        uint16 numAvailableTokens;\\n        uint16 maxPerAddress;\\n        uint32 saleStartTimestamp; // max val in 2106\\n        uint32 saleCompleteTimestamp;\\n        uint160 numPendingCommitNFTs;\\n        address withdrawAddress;\\n        address vaultAddress;\\n        uint256 maxMintsForSalesTier; // when kept at 0 it is ignored\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Terms/TermsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nlibrary TermsStorage {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"keepers.contracts.storage.terms\\\");\\n\\n    struct Layout {\\n        mapping(uint256 => string) termsParts; // mapping of term part number to term part string\\n        Counters.Counter termsVersion;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/KeepersDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*                                                                                                                                                                                                                                                                            \\n                                       ..';;::::::;;;::::;,'.                                       \\n                                   .,;;;;;,'....     ....';;;;;;'.                                  \\n                                ';;;,..                       .';;:,.                               \\n                             .,;,.                                .';;'                             \\n                           .,;.                  ...                 .,;.                           \\n                          .;.                                          .;;.                         \\n                         ',.                                             ';.                        \\n                        ''                                                .,.                       \\n                       .'                                                  .,                       \\n                      .'.                      .....                        ..                      \\n                      ..                    .;;,,,;,,;,.                     ..                     \\n                     ..                    ;c'       .;c'                    ..                     \\n                     ..                   ;c.          'c.                    .                     \\n                     .                .',;dl.         .;dl,,'.                ..                    \\n                     .              ,:;,..:xc:,.    .;:od,.',;;.               .                    \\n                    .             .:c.     ,c:cc.  ,l:::.     'c'              .                    \\n                    .             ,l.       .,:docldl;'        ,c.                                  \\n                                  ,c.        ';ddldxl,.        ,c.                                  \\n                                  .::.     '::lo' .;oc:;.     .c'                                   \\n                                   .,:,...;dc::.    '::do...';:.                                    \\n                                      ':clkd,.        .cxdlc;.                                      \\n                                    .,;,,,od:;.     .,;ldc,,;;'                                     \\n                                   ,c,.   .:c:c,   .:::c,    .:c.                                   \\n                                  'l.       ,;cxc;:do:;.       ;c.                                  \\n                                  ,c.        .;xkxOkl.         ,c.                                  \\n                                  .c,      .;:lx:';od::'      .c:                                   \\n                                   .:;.   .lc;c,   .:::l;   .,c;                                    \\n                                     .,;;:do;,.      .;cxl;;;,.                                     \\n                                     ';;;:do;'.      .,cxl;;;,.                                     \\n                                   .:;.   'oc::'   .;::o:.  .,c;.                                   \\n                                  .l'      .::ld;.,ld::,      .c;                                   \\n                                  ;c.        .:xkxOko'         ,c.                                  \\n                                  .l'      .,;cxc;cdo:;.      .c:                                   \\n                                   'c;.   .cc;c;   .c::l,    'c;.                                   \\n                                    .';;,;od:,.     .,;lxc,;;;.                                     \\n                                        .'l:           .o:..                                        \\n                                          'l'         .::.                                          \\n                                           .:;'......,:;.                                           \\n                                             .,;,,,,,'.                                             \\n                                                                                                    \\n                                                                                                    \\n                                 ..                              ...                                \\n                                  .''.                        .''..                                 \\n                                    ',,'.                  ..,,,.    ......                         \\n                                  ..,;:c;''...        .....'..          ...':c'                     \\n                               .;:;;'.    ................                 .:Kx.                    \\n                            .:lc,.                                   ..';:cokd'                     \\n                           ;xo.                                 ..,:ldkkOOxo,                       \\n                          ;0l                            ...',:oxO0KXK0xl;.                         \\n                          ;0x'   ................''',;:lodkOKXNWNX0ko:'.                            \\n                           ,oxdoccclodxxxkkkOO00KKXXXNWWWWWNK0xoc;..                                \\n                             .':lloodxkO00KKKKKK0OOOkxdoc:;'..                                      \\n                                    ................                                                                                                                                                                       \\n*/\\n\\npragma solidity 0.8.18;\\n\\nimport { SolidStateDiamondRevokableUpgradability } from \\\"./SolidStateDiamondRevokableUpgradability.sol\\\";\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { IERC721 } from \\\"@solidstate/contracts/interfaces/IERC721.sol\\\";\\nimport { IERC165 } from \\\"@solidstate/contracts/interfaces/IERC165.sol\\\";\\nimport { IERC2981 } from \\\"@solidstate/contracts/interfaces/IERC2981.sol\\\";\\nimport { IERC721Enumerable } from \\\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\\\";\\nimport { ERC2981Storage } from \\\"@solidstate/contracts/token/common/ERC2981/ERC2981Storage.sol\\\";\\nimport { KeepersERC721Storage } from \\\"./facets/KeepersERC721/KeepersERC721Storage.sol\\\";\\nimport { ERC721MetadataStorage } from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport { TermsStorage } from \\\"./facets/Terms/TermsStorage.sol\\\";\\nimport { ConstantsLib } from \\\"./library/ConstantsLib.sol\\\";\\nimport { DiamondWritableInternal } from \\\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\\\";\\nimport { CANONICAL_CORI_SUBSCRIPTION } from \\\"operator-filter-registry/src/lib/Constants.sol\\\";\\nimport { DiamondOperatorFilter } from \\\"./DiamondOperatorFilter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title KeepersDiamond \\\"Diamond\\\" proxy implementation based on SolidState Diamond Reference\\n */\\ncontract KeepersDiamond is SolidStateDiamondRevokableUpgradability, AccessControlInternal, DiamondOperatorFilter {\\n    using Counters for Counters.Counter;\\n\\n    constructor(string memory name_, string memory symbol_, string memory baseURI_) {\\n        // ERC165 - note: other interfaces are set in SolidStateDiamondRevokableUpgradability\\n        _setSupportsInterface(type(IERC721).interfaceId, true);\\n        _setSupportsInterface(type(IERC721Enumerable).interfaceId, true);\\n        _setSupportsInterface(type(IERC2981).interfaceId, true);\\n\\n        // AccessControl\\n        _grantRole(ConstantsLib.KEEPERS_TERMS_OPERATOR, msg.sender);\\n        _grantRole(ConstantsLib.KEEPERS_LICENSE_OPERATOR, msg.sender);\\n\\n        // ERC2981\\n        ERC2981Storage.layout().defaultRoyaltyBPS = 700; // 7%\\n        ERC2981Storage.layout().defaultRoyaltyReceiver = msg.sender;\\n\\n        // mint parameters\\n        KeepersERC721Storage.layout().maxPerAddress = 10;\\n        KeepersERC721Storage.layout().numAvailableTokens = uint16(ConstantsLib.MAX_TICKETS);\\n\\n        // Metadata\\n        ERC721MetadataStorage.layout().name = name_;\\n        ERC721MetadataStorage.layout().symbol = symbol_;\\n        ERC721MetadataStorage.layout().baseURI = baseURI_;\\n\\n        // Terms version\\n        TermsStorage.layout().termsVersion.increment(); // Set terms to V1 by default\\n\\n        // Set up Operator Filter Registry\\n        __OperatorFilterer_init(CANONICAL_CORI_SUBSCRIPTION);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ConstantsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary ConstantsLib {\\n    // mint params\\n    uint256 internal constant MINT_PRICE = 0.5 ether;\\n    uint256 internal constant ALLOWLSIT_MINT_PRICE = 0.25 ether;\\n\\n    uint256 internal constant MAX_TICKETS = 20000;\\n    uint256 internal constant MIN_COMMITMENT_BLOCKS = 4;\\n    uint256 internal constant MAX_COMMITMENT_BLOCKS = 100;\\n    uint256 internal constant SPECIAL_TICKETS_COUNT = 10;\\n    uint256 internal constant SPECIAL_TICKET_MINT_ODDS = 1000;\\n\\n    // access control\\n    bytes32 internal constant KEEPERS_TERMS_OPERATOR = keccak256(\\\"KEEPERS_TERMS_OPERATOR\\\");\\n    bytes32 internal constant KEEPERS_LICENSE_OPERATOR = keccak256(\\\"KEEPERS_LICENSE_OPERATOR\\\");\\n    bytes32 internal constant KEEPERS_MINT_OPERATOR = keccak256(\\\"KEEPERS_MINT_OPERATOR\\\");\\n\\n    // token states\\n    uint256 internal constant TOKEN_STATE_UNCONVERTED = 0;\\n    uint256 internal constant TOKEN_STATE_USER_CONVERTED = 1;\\n    uint256 internal constant TOKEN_STATE_ADMIN_CONVERTED = 2;\\n\\n    // room naming\\n    uint256 internal constant NO_ROOM_NAMING_RIGHTS = 0;\\n    uint256 internal constant MAX_ROOM_NAME_LENGTH = 40;\\n    uint256 internal constant MIN_ROOM_ID = 1;\\n\\n    // traits\\n    uint256 internal constant MIN_TRAIT_ID = 1;\\n    uint256 internal constant MAX_TRAIT_ID = 242;\\n\\n    uint256 internal constant BLACK_BODY_ID = 1;\\n    uint256 internal constant GLASS_BODY_ID = 10;\\n    uint256 internal constant MAX_NON_SPECIAL_BODY_ID = 9;\\n\\n    // rarities\\n    // bitmap for ultra rare traits 0000001111100000000000111001101110000000000000000100010000001111100000000000000000000000000000000000000000011100000000000000000000100000000000000000000011101010001000000000000000010000000000000000000000000000000000000000000000000000000000001110000000000000\\n    uint256 internal constant RARITY_ULTRARARE =\\n        1752737185771013737644568005558321144114900560241663114319964015025618739200;\\n    // bitmap for rare traits 0011100000000000000111000000000000000000000000000001100111110000000000000000000000000000000000001000000111100000000000000000010010000001000000000000111100010101110000000000001000100100000000000000000000000000000000000101000001000000111111110000000000000000\\n    uint256 internal constant RARITY_RARE =\\n        25329712769560669564647724112116350647150594218874243813999282872231118438400;\\n    // bitmap for uncommon traits 0000010000000100010000000110010000000000000000001010000000000000000000000000000000000000000001010001111000000000000000000000000001010100001111111111000000000000000100001000110111001000000000000000000000000000000000001010111100110111000000000000000000000000\\n    uint256 internal constant RARITY_UNCOMMON =\\n        1816763190353297512045086567763279289688669177570068147176572168506815021056;\\n    // bitmap for common traits 0100000000011011101000000000000001111111111111110000001000000000011111111111111111111111111110100110000000000011111111111111101100001010110000000000000000000000000011110111000000000011111111111111111111111111111111110000000010001000000000000000000000000000\\n    uint256 internal constant RARITY_COMMON =\\n        28996831472973116897448113818906002845680828376134306944232972948193012613120;\\n\\n    // misc\\n    uint256 internal constant EMPTY_BITMAP = 0;\\n    string internal constant WHERE_TO_FIND_TERMS =\\n        \\\"Terms and conditions can be found by calling getTerms() on the Keepers contract.\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/SolidStateDiamondRevokableUpgradability.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { IOwnable, Ownable, OwnableInternal } from \\\"@solidstate/contracts/access/ownable/Ownable.sol\\\";\\nimport { ISafeOwnable, SafeOwnable } from \\\"@solidstate/contracts/access/ownable/SafeOwnable.sol\\\";\\nimport { IERC165 } from \\\"@solidstate/contracts/interfaces/IERC165.sol\\\";\\nimport { IERC173 } from \\\"@solidstate/contracts/interfaces/IERC173.sol\\\";\\nimport { ERC165Base, ERC165BaseStorage } from \\\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\\\";\\nimport { DiamondBase } from \\\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\\\";\\nimport { DiamondFallback, IDiamondFallback } from \\\"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\\\";\\nimport { DiamondReadable, IDiamondReadable } from \\\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\\\";\\nimport { IDiamondWritable } from \\\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\\\";\\nimport { DiamondWritableRevokable } from \\\"./facets/DiamondWritableRevokable/DiamondWritableRevokable.sol\\\";\\nimport { ISolidStateDiamond } from \\\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\\\";\\n\\n/**\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation with DiamondWritableRevokable\\n */\\nabstract contract SolidStateDiamondRevokableUpgradability is\\n    ISolidStateDiamond,\\n    DiamondBase,\\n    DiamondFallback,\\n    DiamondReadable,\\n    DiamondWritableRevokable,\\n    SafeOwnable,\\n    ERC165Base\\n{\\n    constructor() {\\n        bytes4[] memory selectors = new bytes4[](12);\\n        uint256 selectorIndex;\\n\\n        // register DiamondFallback\\n\\n        selectors[selectorIndex++] = IDiamondFallback.getFallbackAddress.selector;\\n        selectors[selectorIndex++] = IDiamondFallback.setFallbackAddress.selector;\\n\\n        _setSupportsInterface(type(IDiamondFallback).interfaceId, true);\\n\\n        // register DiamondWritable\\n\\n        selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\n\\n        _setSupportsInterface(type(IDiamondWritable).interfaceId, true);\\n\\n        // register DiamondReadable\\n\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetFunctionSelectors.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\n\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n\\n        // register SafeOwnable\\n        selectors[selectorIndex++] = Ownable.owner.selector;\\n        selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\n        selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\n        selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\n\\n        _setSupportsInterface(type(IERC173).interfaceId, true);\\n\\n        // diamond cut\\n\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\n\\n        facetCuts[0] = FacetCut({ target: address(this), action: FacetCutAction.ADD, selectors: selectors });\\n\\n        _diamondCut(facetCuts, address(0), \\\"\\\");\\n\\n        // set owner\\n\\n        _setOwner(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transferOwnership(address account) internal virtual override(OwnableInternal, SafeOwnable) {\\n        super._transferOwnership(account);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondFallback\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        override(DiamondBase, DiamondFallback)\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/lib/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DiamondWritable__InvalidInitializationParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__RemoveTargetNotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__ReplaceTargetIsIdentical\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__TargetHasNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proxy__ImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeOwnable__NotNomineeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpgradeabilityRevoked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KeepersDiamond", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000074b6565706572730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064b45455045520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003068747470733a2f2f6b6565706572732d746f6b656e2d6d657461646174612e73332e616d617a6f6e6177732e636f6d2f00000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xff119b334609937de3eabb0f6971718d6114ec77", "SwarmSource": ""}