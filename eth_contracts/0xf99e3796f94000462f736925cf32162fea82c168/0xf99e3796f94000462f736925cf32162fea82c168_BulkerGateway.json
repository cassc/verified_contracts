{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/extensions/BulkerGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport {IWETH} from \\\"src/interfaces/extensions/IWETH.sol\\\";\\nimport {IWSTETH} from \\\"src/interfaces/extensions/IWSTETH.sol\\\";\\nimport {IMorpho} from \\\"src/interfaces/IMorpho.sol\\\";\\nimport {IBulkerGateway} from \\\"src/interfaces/extensions/IBulkerGateway.sol\\\";\\n\\nimport {Types} from \\\"src/libraries/Types.sol\\\";\\nimport {Math} from \\\"@morpho-utils/math/Math.sol\\\";\\nimport {SafeTransferLib, ERC20} from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\nimport {ERC20 as ERC20Permit2, Permit2Lib} from \\\"@permit2/libraries/Permit2Lib.sol\\\";\\n\\n/// @title BulkerGateway.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Contract allowing to bundle multiple interactions with Morpho together.\\ncontract BulkerGateway is IBulkerGateway {\\n    using SafeTransferLib for ERC20;\\n    using Permit2Lib for ERC20Permit2;\\n\\n    /* CONSTANTS */\\n\\n    /// @dev The address of the WETH contract.\\n    address internal constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /// @dev The address of the stETH contract.\\n    address internal constant _ST_ETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n    /// @dev The address of the wstETH contract.\\n    address internal constant _WST_ETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n\\n    /* IMMUTABLES */\\n\\n    IMorpho internal immutable _MORPHO;\\n\\n    /* CONSTRUCTOR */\\n\\n    constructor(address morpho) {\\n        if (morpho == address(0)) revert AddressIsZero();\\n\\n        _MORPHO = IMorpho(morpho);\\n\\n        ERC20(_WETH).safeApprove(morpho, type(uint256).max);\\n        ERC20(_ST_ETH).safeApprove(_WST_ETH, type(uint256).max);\\n        ERC20(_WST_ETH).safeApprove(morpho, type(uint256).max);\\n    }\\n\\n    /* EXTERNAL */\\n\\n    /// @notice Returns the address of the WETH contract.\\n    function WETH() external pure returns (address) {\\n        return _WETH;\\n    }\\n\\n    /// @notice Returns the address of the stETH contract.\\n    function stETH() external pure returns (address) {\\n        return _ST_ETH;\\n    }\\n\\n    /// @notice Returns the address of the wstETH contract.\\n    function wstETH() external pure returns (address) {\\n        return _WST_ETH;\\n    }\\n\\n    /// @notice Returns the address of the Morpho protocol.\\n    function MORPHO() external view returns (address) {\\n        return address(_MORPHO);\\n    }\\n\\n    /// @notice Executes the given batch of actions, with the given input data.\\n    ///         Those actions, if not performed in the correct order, with the proper action's configuration\\n    ///         and with the proper inclusion of skim final calls, could leave funds in the Bulker contract.\\n    /// @param actions The batch of action to execute, one after the other.\\n    /// @param data The array of data corresponding to each input action.\\n    function execute(ActionType[] calldata actions, bytes[] calldata data) external payable {\\n        uint256 nbActions = actions.length;\\n        if (nbActions != data.length) {\\n            revert InconsistentParameters(nbActions, data.length);\\n        }\\n\\n        for (uint256 i; i < nbActions; ++i) {\\n            _performAction(actions[i], data[i]);\\n        }\\n    }\\n\\n    /// @dev Only the WETH contract is allowed to transfer ETH to this contract, without any calldata.\\n    receive() external payable {\\n        if (msg.sender != _WETH) revert OnlyWETH();\\n    }\\n\\n    /* INTERNAL */\\n\\n    /// @dev Performs the given action, given its associated parameters.\\n    /// @param action The type of action to perform on behalf of the caller.\\n    /// @param data The data to decode, associated with the action.\\n    function _performAction(ActionType action, bytes calldata data) internal {\\n        if (action == ActionType.APPROVE2) {\\n            _approve2(data);\\n        } else if (action == ActionType.TRANSFER_FROM2) {\\n            _transferFrom2(data);\\n        } else if (action == ActionType.APPROVE_MANAGER) {\\n            _approveManager(data);\\n        } else if (action == ActionType.SUPPLY) {\\n            _supply(data);\\n        } else if (action == ActionType.SUPPLY_COLLATERAL) {\\n            _supplyCollateral(data);\\n        } else if (action == ActionType.BORROW) {\\n            _borrow(data);\\n        } else if (action == ActionType.REPAY) {\\n            _repay(data);\\n        } else if (action == ActionType.WITHDRAW) {\\n            _withdraw(data);\\n        } else if (action == ActionType.WITHDRAW_COLLATERAL) {\\n            _withdrawCollateral(data);\\n        } else if (action == ActionType.WRAP_ETH) {\\n            _wrapEth(data);\\n        } else if (action == ActionType.UNWRAP_ETH) {\\n            _unwrapEth(data);\\n        } else if (action == ActionType.WRAP_ST_ETH) {\\n            _wrapStEth(data);\\n        } else if (action == ActionType.UNWRAP_ST_ETH) {\\n            _unwrapStEth(data);\\n        } else if (action == ActionType.SKIM) {\\n            _skim(data);\\n        } else if (action == ActionType.CLAIM_REWARDS) {\\n            _claimRewards(data);\\n        } else {\\n            revert UnsupportedAction(action);\\n        }\\n    }\\n\\n    /* INTERNAL ACTIONS */\\n\\n    /// @dev Approves the given `amount` of `asset` from sender to be spent by this contract via Permit2 with the given `deadline` & EIP712 `signature`.\\n    function _approve2(bytes calldata data) internal {\\n        (address asset, uint256 amount, uint256 deadline, Types.Signature memory signature) =\\n            abi.decode(data, (address, uint256, uint256, Types.Signature));\\n        if (amount == 0) revert AmountIsZero();\\n\\n        ERC20Permit2(asset).simplePermit2(\\n            msg.sender, address(this), amount, deadline, signature.v, signature.r, signature.s\\n        );\\n    }\\n\\n    /// @dev Transfers the given `amount` of `asset` from sender to this contract via ERC20 transfer with Permit2 fallback.\\n    function _transferFrom2(bytes calldata data) internal {\\n        (address asset, uint256 amount) = abi.decode(data, (address, uint256));\\n        if (amount == 0) revert AmountIsZero();\\n\\n        ERC20Permit2(asset).transferFrom2(msg.sender, address(this), amount);\\n    }\\n\\n    /// @dev Approves this contract to manage the position of `msg.sender` via EIP712 `signature`.\\n    function _approveManager(bytes calldata data) internal {\\n        (bool isAllowed, uint256 nonce, uint256 deadline, Types.Signature memory signature) =\\n            abi.decode(data, (bool, uint256, uint256, Types.Signature));\\n\\n        _MORPHO.approveManagerWithSig(msg.sender, address(this), isAllowed, nonce, deadline, signature);\\n    }\\n\\n    /// @dev Supplies `amount` of `asset` of `onBehalf` using permit2 in a single tx.\\n    ///         The supplied amount cannot be used as collateral but is eligible for the peer-to-peer matching.\\n    function _supply(bytes calldata data) internal {\\n        (address asset, uint256 amount, address onBehalf, uint256 maxIterations) =\\n            abi.decode(data, (address, uint256, address, uint256));\\n        if (onBehalf == address(this)) revert AddressIsBulker();\\n\\n        amount = Math.min(amount, ERC20(asset).balanceOf(address(this)));\\n\\n        _approveMaxToMorpho(asset);\\n\\n        _MORPHO.supply(asset, amount, onBehalf, maxIterations);\\n    }\\n\\n    /// @dev Supplies `amount` of `asset` collateral to the pool on behalf of `onBehalf`.\\n    function _supplyCollateral(bytes calldata data) internal {\\n        (address asset, uint256 amount, address onBehalf) = abi.decode(data, (address, uint256, address));\\n        if (onBehalf == address(this)) revert AddressIsBulker();\\n\\n        amount = Math.min(amount, ERC20(asset).balanceOf(address(this)));\\n\\n        _approveMaxToMorpho(asset);\\n\\n        _MORPHO.supplyCollateral(asset, amount, onBehalf);\\n    }\\n\\n    /// @dev Borrows `amount` of `asset` on behalf of the sender. Sender must have previously approved the bulker as their manager on Morpho.\\n    function _borrow(bytes calldata data) internal {\\n        (address asset, uint256 amount, address receiver, uint256 maxIterations) =\\n            abi.decode(data, (address, uint256, address, uint256));\\n\\n        _MORPHO.borrow(asset, amount, msg.sender, receiver, maxIterations);\\n    }\\n\\n    /// @dev Repays `amount` of `asset` on behalf of `onBehalf`.\\n    function _repay(bytes calldata data) internal {\\n        (address asset, uint256 amount, address onBehalf) = abi.decode(data, (address, uint256, address));\\n        if (onBehalf == address(this)) revert AddressIsBulker();\\n\\n        amount = Math.min(amount, ERC20(asset).balanceOf(address(this)));\\n\\n        _approveMaxToMorpho(asset);\\n\\n        _MORPHO.repay(asset, amount, onBehalf);\\n    }\\n\\n    /// @dev Withdraws `amount` of `asset` on behalf of `onBehalf`. Sender must have previously approved the bulker as their manager on Morpho.\\n    function _withdraw(bytes calldata data) internal {\\n        (address asset, uint256 amount, address receiver, uint256 maxIterations) =\\n            abi.decode(data, (address, uint256, address, uint256));\\n\\n        _MORPHO.withdraw(asset, amount, msg.sender, receiver, maxIterations);\\n    }\\n\\n    /// @dev Withdraws `amount` of `asset` on behalf of sender. Sender must have previously approved the bulker as their manager on Morpho.\\n    function _withdrawCollateral(bytes calldata data) internal {\\n        (address asset, uint256 amount, address receiver) = abi.decode(data, (address, uint256, address));\\n\\n        _MORPHO.withdrawCollateral(asset, amount, msg.sender, receiver);\\n    }\\n\\n    /// @dev Wraps the given input of ETH to WETH.\\n    function _wrapEth(bytes calldata data) internal {\\n        (uint256 amount) = abi.decode(data, (uint256));\\n\\n        amount = Math.min(amount, address(this).balance);\\n        if (amount == 0) revert AmountIsZero();\\n\\n        IWETH(_WETH).deposit{value: amount}();\\n    }\\n\\n    /// @dev Unwraps the given input of WETH to ETH.\\n    function _unwrapEth(bytes calldata data) internal {\\n        (uint256 amount, address receiver) = abi.decode(data, (uint256, address));\\n        if (receiver == address(this)) revert AddressIsBulker();\\n        if (receiver == address(0)) revert AddressIsZero();\\n\\n        amount = Math.min(amount, ERC20(_WETH).balanceOf(address(this)));\\n        if (amount == 0) revert AmountIsZero();\\n\\n        IWETH(_WETH).withdraw(amount);\\n\\n        SafeTransferLib.safeTransferETH(receiver, amount);\\n    }\\n\\n    /// @dev Wraps the given input of stETH to wstETH.\\n    function _wrapStEth(bytes calldata data) internal {\\n        (uint256 amount) = abi.decode(data, (uint256));\\n\\n        amount = Math.min(amount, ERC20(_ST_ETH).balanceOf(address(this)));\\n        if (amount == 0) revert AmountIsZero();\\n\\n        IWSTETH(_WST_ETH).wrap(amount);\\n    }\\n\\n    /// @dev Unwraps the given input of wstETH to stETH.\\n    function _unwrapStEth(bytes calldata data) internal {\\n        (uint256 amount, address receiver) = abi.decode(data, (uint256, address));\\n        if (receiver == address(this)) revert AddressIsBulker();\\n        if (receiver == address(0)) revert AddressIsZero();\\n\\n        amount = Math.min(amount, ERC20(_WST_ETH).balanceOf(address(this)));\\n        if (amount == 0) revert AmountIsZero();\\n\\n        uint256 unwrapped = IWSTETH(_WST_ETH).unwrap(amount);\\n\\n        ERC20(_ST_ETH).safeTransfer(receiver, unwrapped);\\n    }\\n\\n    /// @dev Sends any ERC20 in this contract to the receiver.\\n    function _skim(bytes calldata data) internal {\\n        (address asset, address receiver) = abi.decode(data, (address, address));\\n        if (receiver == address(this)) revert AddressIsBulker();\\n        if (receiver == address(0)) revert AddressIsZero();\\n\\n        uint256 balance = ERC20(asset).balanceOf(address(this));\\n        ERC20(asset).safeTransfer(receiver, balance);\\n    }\\n\\n    /// @dev Claims rewards for the given assets, on behalf of an address, sending the funds to the given address.\\n    function _claimRewards(bytes calldata data) internal {\\n        (address[] memory assets, address onBehalf) = abi.decode(data, (address[], address));\\n        if (onBehalf == address(this)) revert AddressIsBulker();\\n\\n        _MORPHO.claimRewards(assets, onBehalf);\\n    }\\n\\n    /* INTERNAL HELPERS */\\n\\n    /// @dev Gives the max approval to the Morpho contract to spend the given `asset` if not already approved.\\n    function _approveMaxToMorpho(address asset) internal {\\n        if (ERC20(asset).allowance(address(this), address(_MORPHO)) == 0) {\\n            ERC20(asset).safeApprove(address(_MORPHO), type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/extensions/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/extensions/IWSTETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.0;\\n\\ninterface IWSTETH {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function getStETHByWstETH(uint256 wstETHAmount) external view returns (uint256);\\n    function getWstETHByStETH(uint256 stETHAmount) external view returns (uint256);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function name() external view returns (string memory);\\n    function nonces(address owner) external view returns (uint256);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n    function stETH() external view returns (address);\\n    function stEthPerToken() external view returns (uint256);\\n    function symbol() external view returns (string memory);\\n    function tokensPerStEth() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function unwrap(uint256 wstETHAmount) external returns (uint256);\\n    function wrap(uint256 stETHAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMorpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.0;\\n\\nimport {Types} from \\\"../libraries/Types.sol\\\";\\n\\ninterface IMorphoGetters {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function pool() external view returns (address);\\n    function addressesProvider() external view returns (address);\\n    function eModeCategoryId() external view returns (uint256);\\n\\n    function market(address underlying) external view returns (Types.Market memory);\\n    function marketsCreated() external view returns (address[] memory);\\n\\n    function scaledCollateralBalance(address underlying, address user) external view returns (uint256);\\n    function scaledP2PBorrowBalance(address underlying, address user) external view returns (uint256);\\n    function scaledP2PSupplyBalance(address underlying, address user) external view returns (uint256);\\n    function scaledPoolBorrowBalance(address underlying, address user) external view returns (uint256);\\n    function scaledPoolSupplyBalance(address underlying, address user) external view returns (uint256);\\n\\n    function supplyBalance(address underlying, address user) external view returns (uint256);\\n    function borrowBalance(address underlying, address user) external view returns (uint256);\\n    function collateralBalance(address underlying, address user) external view returns (uint256);\\n\\n    function userCollaterals(address user) external view returns (address[] memory);\\n    function userBorrows(address user) external view returns (address[] memory);\\n\\n    function isManagedBy(address delegator, address manager) external view returns (bool);\\n    function userNonce(address user) external view returns (uint256);\\n\\n    function defaultIterations() external view returns (Types.Iterations memory);\\n    function positionsManager() external view returns (address);\\n    function rewardsManager() external view returns (address);\\n    function treasuryVault() external view returns (address);\\n\\n    function isClaimRewardsPaused() external view returns (bool);\\n\\n    function updatedIndexes(address underlying) external view returns (Types.Indexes256 memory);\\n    function liquidityData(address user) external view returns (Types.LiquidityData memory);\\n    function getNext(address underlying, Types.Position position, address user) external view returns (address);\\n    function getBucketsMask(address underlying, Types.Position position) external view returns (uint256);\\n}\\n\\ninterface IMorphoSetters {\\n    function createMarket(address underlying, uint16 reserveFactor, uint16 p2pIndexCursor) external;\\n    function increaseP2PDeltas(address underlying, uint256 amount) external;\\n    function claimToTreasury(address[] calldata underlyings, uint256[] calldata amounts) external;\\n\\n    function setPositionsManager(address positionsManager) external;\\n    function setRewardsManager(address rewardsManager) external;\\n    function setTreasuryVault(address treasuryVault) external;\\n    function setDefaultIterations(Types.Iterations memory defaultIterations) external;\\n    function setP2PIndexCursor(address underlying, uint16 p2pIndexCursor) external;\\n    function setReserveFactor(address underlying, uint16 newReserveFactor) external;\\n\\n    function setAssetIsCollateralOnPool(address underlying, bool isCollateral) external;\\n    function setAssetIsCollateral(address underlying, bool isCollateral) external;\\n    function setIsClaimRewardsPaused(bool isPaused) external;\\n    function setIsPaused(address underlying, bool isPaused) external;\\n    function setIsPausedForAllMarkets(bool isPaused) external;\\n    function setIsSupplyPaused(address underlying, bool isPaused) external;\\n    function setIsSupplyCollateralPaused(address underlying, bool isPaused) external;\\n    function setIsBorrowPaused(address underlying, bool isPaused) external;\\n    function setIsRepayPaused(address underlying, bool isPaused) external;\\n    function setIsWithdrawPaused(address underlying, bool isPaused) external;\\n    function setIsWithdrawCollateralPaused(address underlying, bool isPaused) external;\\n    function setIsLiquidateBorrowPaused(address underlying, bool isPaused) external;\\n    function setIsLiquidateCollateralPaused(address underlying, bool isPaused) external;\\n    function setIsP2PDisabled(address underlying, bool isP2PDisabled) external;\\n    function setIsDeprecated(address underlying, bool isDeprecated) external;\\n}\\n\\ninterface IMorpho is IMorphoGetters, IMorphoSetters {\\n    function initialize(\\n        address addressesProvider,\\n        uint8 eModeCategoryId,\\n        address newPositionsManager,\\n        Types.Iterations memory newDefaultIterations\\n    ) external;\\n\\n    function supply(address underlying, uint256 amount, address onBehalf, uint256 maxIterations)\\n        external\\n        returns (uint256 supplied);\\n    function supplyWithPermit(\\n        address underlying,\\n        uint256 amount,\\n        address onBehalf,\\n        uint256 maxIterations,\\n        uint256 deadline,\\n        Types.Signature calldata signature\\n    ) external returns (uint256 supplied);\\n    function supplyCollateral(address underlying, uint256 amount, address onBehalf)\\n        external\\n        returns (uint256 supplied);\\n    function supplyCollateralWithPermit(\\n        address underlying,\\n        uint256 amount,\\n        address onBehalf,\\n        uint256 deadline,\\n        Types.Signature calldata signature\\n    ) external returns (uint256 supplied);\\n\\n    function borrow(address underlying, uint256 amount, address onBehalf, address receiver, uint256 maxIterations)\\n        external\\n        returns (uint256 borrowed);\\n\\n    function repay(address underlying, uint256 amount, address onBehalf) external returns (uint256 repaid);\\n    function repayWithPermit(\\n        address underlying,\\n        uint256 amount,\\n        address onBehalf,\\n        uint256 deadline,\\n        Types.Signature calldata signature\\n    ) external returns (uint256 repaid);\\n\\n    function withdraw(address underlying, uint256 amount, address onBehalf, address receiver, uint256 maxIterations)\\n        external\\n        returns (uint256 withdrawn);\\n    function withdrawCollateral(address underlying, uint256 amount, address onBehalf, address receiver)\\n        external\\n        returns (uint256 withdrawn);\\n\\n    function approveManager(address manager, bool isAllowed) external;\\n    function approveManagerWithSig(\\n        address delegator,\\n        address manager,\\n        bool isAllowed,\\n        uint256 nonce,\\n        uint256 deadline,\\n        Types.Signature calldata signature\\n    ) external;\\n\\n    function liquidate(address underlyingBorrowed, address underlyingCollateral, address user, uint256 amount)\\n        external\\n        returns (uint256 repaid, uint256 seized);\\n\\n    function claimRewards(address[] calldata assets, address onBehalf)\\n        external\\n        returns (address[] memory rewardTokens, uint256[] memory claimedAmounts);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/extensions/IBulkerGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.0;\\n\\ninterface IBulkerGateway {\\n    /* ERRORS */\\n\\n    /// @notice Thrown when execution parameters don't have the same length.\\n    /// @param nbActions The number of input actions.\\n    /// @param nbData The number of data inputs.\\n    error InconsistentParameters(uint256 nbActions, uint256 nbData);\\n\\n    /// @notice Thrown when another address than WETH sends ETH to the contract.\\n    error OnlyWETH();\\n\\n    /// @notice Thrown when an address used as parameter is the zero address.\\n    error AddressIsZero();\\n\\n    /// @notice Thrown when an address parameter is the bulker's address.\\n    error AddressIsBulker();\\n\\n    /// @notice Thrown when an amount used as parameter is zero.\\n    error AmountIsZero();\\n\\n    /// @notice Thrown when the action is unsupported.\\n    error UnsupportedAction(ActionType action);\\n\\n    /* ENUMS */\\n\\n    enum ActionType {\\n        APPROVE2,\\n        TRANSFER_FROM2,\\n        APPROVE_MANAGER,\\n        SUPPLY,\\n        SUPPLY_COLLATERAL,\\n        BORROW,\\n        REPAY,\\n        WITHDRAW,\\n        WITHDRAW_COLLATERAL,\\n        WRAP_ETH,\\n        UNWRAP_ETH,\\n        WRAP_ST_ETH,\\n        UNWRAP_ST_ETH,\\n        SKIM,\\n        CLAIM_REWARDS\\n    }\\n\\n    /* FUNCTIONS */\\n\\n    function WETH() external pure returns (address);\\n    function stETH() external pure returns (address);\\n    function wstETH() external pure returns (address);\\n\\n    function MORPHO() external view returns (address);\\n\\n    function execute(ActionType[] calldata actions, bytes[] calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"src/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport {IAaveOracle} from \\\"@aave-v3-core/interfaces/IAaveOracle.sol\\\";\\n\\nimport {DataTypes} from \\\"@aave-v3-core/protocol/libraries/types/DataTypes.sol\\\";\\n\\nimport {LogarithmicBuckets} from \\\"@morpho-data-structures/LogarithmicBuckets.sol\\\";\\n\\n/// @title Types\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.xyz\\n/// @notice Library exposing all Types used in Morpho.\\nlibrary Types {\\n    /* ENUMS */\\n\\n    /// @notice Enumeration of the different position types in the protocol.\\n    enum Position {\\n        POOL_SUPPLIER,\\n        P2P_SUPPLIER,\\n        POOL_BORROWER,\\n        P2P_BORROWER\\n    }\\n\\n    /* NESTED STRUCTS */\\n\\n    /// @notice Contains the market side delta data.\\n    struct MarketSideDelta {\\n        uint256 scaledDelta; // The delta amount in pool unit.\\n        uint256 scaledP2PTotal; // The total peer-to-peer amount in peer-to-peer unit.\\n    }\\n\\n    /// @notice Contains the delta data for both `supply` and `borrow`.\\n    struct Deltas {\\n        MarketSideDelta supply; // The `MarketSideDelta` related to the supply side.\\n        MarketSideDelta borrow; // The `MarketSideDelta` related to the borrow side.\\n    }\\n\\n    /// @notice Contains the market side indexes.\\n    struct MarketSideIndexes {\\n        uint128 poolIndex; // The pool index (in ray).\\n        uint128 p2pIndex; // The peer-to-peer index (in ray).\\n    }\\n\\n    /// @notice Contains the indexes for both `supply` and `borrow`.\\n    struct Indexes {\\n        MarketSideIndexes supply; // The `MarketSideIndexes` related to the supply side.\\n        MarketSideIndexes borrow; // The `MarketSideIndexes` related to the borrow side.\\n    }\\n\\n    /// @notice Contains the different pauses statuses possible in Morpho.\\n    struct PauseStatuses {\\n        bool isP2PDisabled;\\n        bool isSupplyPaused;\\n        bool isSupplyCollateralPaused;\\n        bool isBorrowPaused;\\n        bool isWithdrawPaused;\\n        bool isWithdrawCollateralPaused;\\n        bool isRepayPaused;\\n        bool isLiquidateCollateralPaused;\\n        bool isLiquidateBorrowPaused;\\n        bool isDeprecated;\\n    }\\n\\n    /* STORAGE STRUCTS */\\n\\n    /// @notice Contains the market data that is stored in storage.\\n    /// @dev This market struct is able to be passed into memory.\\n    struct Market {\\n        // SLOT 0-1\\n        Indexes indexes;\\n        // SLOT 2-5\\n        Deltas deltas; // 1024 bits\\n        // SLOT 6\\n        address underlying; // 160 bits\\n        PauseStatuses pauseStatuses; // 80 bits\\n        bool isCollateral; // 8 bits\\n        // SLOT 7\\n        address variableDebtToken; // 160 bits\\n        uint32 lastUpdateTimestamp; // 32 bits\\n        uint16 reserveFactor; // 16 bits\\n        uint16 p2pIndexCursor; // 16 bits\\n        // SLOT 8\\n        address aToken; // 160 bits\\n        // SLOT 9\\n        address stableDebtToken; // 160 bits\\n        // SLOT 10\\n        uint256 idleSupply; // 256 bits\\n    }\\n\\n    /// @notice Contains storage-only dynamic arrays and mappings.\\n    struct MarketBalances {\\n        LogarithmicBuckets.Buckets poolSuppliers; // In pool unit.\\n        LogarithmicBuckets.Buckets p2pSuppliers; // In peer-to-peer unit.\\n        LogarithmicBuckets.Buckets poolBorrowers; // In pool unit.\\n        LogarithmicBuckets.Buckets p2pBorrowers; // In peer-to-peer unit.\\n        mapping(address => uint256) collateral; // In pool unit.\\n    }\\n\\n    /// @notice Contains the minimum number of iterations for a `repay` or a `withdraw`.\\n    struct Iterations {\\n        uint128 repay;\\n        uint128 withdraw;\\n    }\\n\\n    /* STACK AND RETURN STRUCTS */\\n\\n    /// @notice Contains the data related to the liquidity of a user.\\n    struct LiquidityData {\\n        uint256 borrowable; // The maximum debt value allowed to borrow (in base currency).\\n        uint256 maxDebt; // The maximum debt value allowed before being liquidatable (in base currency).\\n        uint256 debt; // The debt value (in base currency).\\n    }\\n\\n    /// @notice The paramaters used to compute the new peer-to-peer indexes.\\n    struct IndexesParams {\\n        MarketSideIndexes256 lastSupplyIndexes; // The last supply indexes stored (in ray).\\n        MarketSideIndexes256 lastBorrowIndexes; // The last borrow indexes stored (in ray).\\n        uint256 poolSupplyIndex; // The current pool supply index (in ray).\\n        uint256 poolBorrowIndex; // The current pool borrow index (in ray).\\n        uint256 reserveFactor; // The reserve factor percentage (10 000 = 100%).\\n        uint256 p2pIndexCursor; // The peer-to-peer index cursor (10 000 = 100%).\\n        Deltas deltas; // The deltas and peer-to-peer amounts.\\n        uint256 proportionIdle; // The amount of proportion idle (in underlying).\\n    }\\n\\n    /// @notice Contains the data related to growth factors as part of the peer-to-peer indexes computation.\\n    struct GrowthFactors {\\n        uint256 poolSupplyGrowthFactor; // The pool's supply index growth factor (in ray).\\n        uint256 p2pSupplyGrowthFactor; // Peer-to-peer supply index growth factor (in ray).\\n        uint256 poolBorrowGrowthFactor; // The pool's borrow index growth factor (in ray).\\n        uint256 p2pBorrowGrowthFactor; // Peer-to-peer borrow index growth factor (in ray).\\n    }\\n\\n    /// @notice Contains the market side indexes as uint256 instead of uint128.\\n    struct MarketSideIndexes256 {\\n        uint256 poolIndex; // The pool index (in ray).\\n        uint256 p2pIndex; // The peer-to-peer index (in ray).\\n    }\\n\\n    /// @notice Contains the indexes as uint256 instead of uint128.\\n    struct Indexes256 {\\n        MarketSideIndexes256 supply; // The `MarketSideIndexes` related to the supply as uint256.\\n        MarketSideIndexes256 borrow; // The `MarketSideIndexes` related to the borrow as uint256.\\n    }\\n\\n    /// @notice Contains the `v`, `r` and `s` parameters of an ECDSA signature.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// @notice Variables used in the matching engine.\\n    struct MatchingEngineVars {\\n        address underlying; // The underlying asset address.\\n        MarketSideIndexes256 indexes; // The indexes of the market side.\\n        uint256 amount; // The amount to promote or demote (in underlying).\\n        uint256 maxIterations; // The maximum number of iterations allowed.\\n        bool borrow; // Whether the process happens on the borrow side or not.\\n        function (address, address, uint256, uint256, bool) returns (uint256, uint256) updateDS; // This function will be used to update the data-structure.\\n        bool demoting; // True for demote, False for promote.\\n        function(uint256, uint256, MarketSideIndexes256 memory, uint256)\\n            pure returns (uint256, uint256, uint256) step; // This function will be used to decide whether to use the algorithm for promoting or for demoting.\\n    }\\n\\n    /// @notice Variables used in the liquidity computation process of a `user`.\\n    /// @dev Used to avoid stack too deep.\\n    struct LiquidityVars {\\n        address user; // The user address.\\n        IAaveOracle oracle; // The oracle used by Aave.\\n        DataTypes.EModeCategory eModeCategory; // The data related to the eMode category (could be empty if not in any e-mode).\\n    }\\n\\n    /// @notice Variables used during a borrow or withdraw.\\n    /// @dev Used to avoid stack too deep.\\n    struct BorrowWithdrawVars {\\n        uint256 onPool; // The working scaled balance on pool of the user.\\n        uint256 inP2P; // The working scaled balance in peer-to-peer of the user.\\n        uint256 toWithdraw; // The amount to withdraw from the pool (in underlying).\\n        uint256 toBorrow; // The amount to borrow on the pool (in underlying).\\n    }\\n\\n    /// @notice Variables used during a supply or repay.\\n    /// @dev Used to avoid stack too deep.\\n    struct SupplyRepayVars {\\n        uint256 onPool; // The working scaled balance on pool of the user.\\n        uint256 inP2P; // The working scaled balance in peer-to-peer of the user.\\n        uint256 toSupply; // The amount to supply on the pool (in underlying).\\n        uint256 toRepay; // The amount to repay on the pool (in underlying).\\n    }\\n\\n    /// @notice Variables used during a liquidate.\\n    /// @dev Used to avoid stack too deep.\\n    struct LiquidateVars {\\n        uint256 closeFactor; // The close factor used during the liquidation process.\\n        uint256 seized; // The amount of collateral to be seized (in underlying).\\n    }\\n\\n    /// @notice Variables used to compute the amount to seize during a liquidation.\\n    /// @dev Used to avoid stack too deep.\\n    struct AmountToSeizeVars {\\n        uint256 liquidationBonus; // The liquidation bonus used during the liquidation process.\\n        uint256 borrowedTokenUnit; // The borrowed token unit.\\n        uint256 collateralTokenUnit; // The collateral token unit.\\n        uint256 borrowedPrice; // The borrowed token price (in base currency).\\n        uint256 collateralPrice; // The collateral token price (in base currency).\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/morpho-utils/src/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// @title Math Library.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library to perform simple math manipulations.\\nlibrary Math {\\n    function abs(int256 x) internal pure returns (int256 y) {\\n        if (x == type(int256).min) return type(int256).max;\\n\\n        assembly {\\n            let mask := sar(255, x)\\n            y := xor(add(x, mask), mask)\\n        }\\n    }\\n\\n    function safeAbs(int256 x) internal pure returns (int256 y) {\\n        require(x != type(int256).min);\\n\\n        assembly {\\n            let mask := sar(255, x)\\n            y := xor(add(x, mask), mask)\\n        }\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := xor(x, mul(xor(x, y), gt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns max(x - y, 0).\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns x / y rounded up (x / y + boolAsInt(x % y > 0)).\\n    function divUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        // Division by 0 if\\n        //    y = 0\\n        assembly {\\n            if iszero(y) { revert(0, 0) }\\n\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns the floor of log2(x) and returns 0 when x = 0.\\n    /// @dev Uses a method by dichotomy to find the highest bit set of x.\\n    function log2(uint256 x) internal pure returns (uint256 y) {\\n        assembly {\\n            // Finds if x has a 1 on the first 128 bits. If not then do nothing.\\n            // If that is the case then the result is more than 128.\\n            let z := shl(7, gt(x, 0xffffffffffffffffffffffffffffffff))\\n            y := z\\n            x := shr(z, x)\\n\\n            // Using y as an accumulator, we can now focus on the last 128 bits of x.\\n            // Repeat this process to divide the number of bits to handle by 2 every time.\\n            z := shl(6, gt(x, 0xffffffffffffffff))\\n            y := add(y, z)\\n            x := shr(z, x)\\n\\n            z := shl(5, gt(x, 0xffffffff))\\n            y := add(y, z)\\n            x := shr(z, x)\\n\\n            z := shl(4, gt(x, 0xffff))\\n            y := add(y, z)\\n            x := shr(z, x)\\n\\n            z := shl(3, gt(x, 0xff))\\n            y := add(y, z)\\n            x := shr(z, x)\\n\\n            z := shl(2, gt(x, 0xf))\\n            y := add(y, z)\\n            x := shr(z, x)\\n\\n            z := shl(1, gt(x, 3))\\n            y := add(add(y, z), gt(shr(z, x), 1))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/permit2/src/libraries/Permit2Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\nimport {IDAIPermit} from \\\"../interfaces/IDAIPermit.sol\\\";\\nimport {IAllowanceTransfer} from \\\"../interfaces/IAllowanceTransfer.sol\\\";\\nimport {SafeCast160} from \\\"./SafeCast160.sol\\\";\\n\\n/// @title Permit2Lib\\n/// @notice Enables efficient transfers and EIP-2612/DAI\\n/// permits for any token by falling back to Permit2.\\nlibrary Permit2Lib {\\n    using SafeCast160 for uint256;\\n    /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\\n    bytes32 internal constant DAI_DOMAIN_SEPARATOR = 0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\\n\\n    /// @dev The address for the WETH9 contract on Ethereum mainnet, encoded as a bytes32.\\n    bytes32 internal constant WETH9_ADDRESS = 0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\\n\\n    /// @dev The address of the Permit2 contract the library will use.\\n    IAllowanceTransfer internal constant PERMIT2 =\\n        IAllowanceTransfer(address(0x000000000022D473030F116dDEE9F6B43aC78BA3));\\n\\n    /// @notice Transfer a given amount of tokens from one user to another.\\n    /// @param token The token to transfer.\\n    /// @param from The user to transfer from.\\n    /// @param to The user to transfer to.\\n    /// @param amount The amount to transfer.\\n    function transferFrom2(ERC20 token, address from, address to, uint256 amount) internal {\\n        // Generate calldata for a standard transferFrom call.\\n        bytes memory inputData = abi.encodeCall(ERC20.transferFrom, (from, to, amount));\\n\\n        bool success; // Call the token contract as normal, capturing whether it succeeded.\\n        assembly {\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0), 1), iszero(returndatasize())),\\n                    // Counterintuitively, this call() must be positioned after the or() in the\\n                    // surrounding and() because and() evaluates its arguments from right to left.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the first slot of scratch space.\\n                    call(gas(), token, 0, add(inputData, 32), mload(inputData), 0, 32)\\n                )\\n        }\\n\\n        // We'll fall back to using Permit2 if calling transferFrom on the token directly reverted.\\n        if (!success) PERMIT2.transferFrom(from, to, amount.toUint160(), address(token));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              PERMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Permit a user to spend a given amount of\\n    /// another user's tokens via native EIP-2612 permit if possible, falling\\n    /// back to Permit2 if native permit fails or is not implemented on the token.\\n    /// @param token The token to permit spending.\\n    /// @param owner The user to permit spending from.\\n    /// @param spender The user to permit spending to.\\n    /// @param amount The amount to permit spending.\\n    /// @param deadline  The timestamp after which the signature is no longer valid.\\n    /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n    /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n    /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n    function permit2(\\n        ERC20 token,\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        // Generate calldata for a call to DOMAIN_SEPARATOR on the token.\\n        bytes memory inputData = abi.encodeWithSelector(ERC20.DOMAIN_SEPARATOR.selector);\\n\\n        bool success; // Call the token contract as normal, capturing whether it succeeded.\\n        bytes32 domainSeparator; // If the call succeeded, we'll capture the return value here.\\n\\n        assembly {\\n            // If the token is WETH9, we know it doesn't have a DOMAIN_SEPARATOR, and we'll skip this step.\\n            // We make sure to mask the token address as its higher order bits aren't guaranteed to be clean.\\n            if iszero(eq(and(token, 0xffffffffffffffffffffffffffffffffffffffff), WETH9_ADDRESS)) {\\n                success :=\\n                    and(\\n                        // Should resolve false if its not 32 bytes or its first word is 0.\\n                        and(iszero(iszero(mload(0))), eq(returndatasize(), 32)),\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the and() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        // We send a maximum of 5000 gas to prevent tokens with fallbacks from using a ton of gas.\\n                        // which should be plenty to allow tokens to fetch their DOMAIN_SEPARATOR from storage, etc.\\n                        staticcall(5000, token, add(inputData, 32), mload(inputData), 0, 32)\\n                    )\\n\\n                domainSeparator := mload(0) // Copy the return value into the domainSeparator variable.\\n            }\\n        }\\n\\n        // If the call to DOMAIN_SEPARATOR succeeded, try using permit on the token.\\n        if (success) {\\n            // We'll use DAI's special permit if it's DOMAIN_SEPARATOR matches,\\n            // otherwise we'll just encode a call to the standard permit function.\\n            inputData = domainSeparator == DAI_DOMAIN_SEPARATOR\\n                ? abi.encodeCall(IDAIPermit.permit, (owner, spender, token.nonces(owner), deadline, true, v, r, s))\\n                : abi.encodeCall(ERC20.permit, (owner, spender, amount, deadline, v, r, s));\\n\\n            assembly {\\n                success := call(gas(), token, 0, add(inputData, 32), mload(inputData), 0, 0)\\n            }\\n        }\\n\\n        if (!success) {\\n            // If the initial DOMAIN_SEPARATOR call on the token failed or a\\n            // subsequent call to permit failed, fall back to using Permit2.\\n            simplePermit2(token, owner, spender, amount, deadline, v, r, s);\\n        }\\n    }\\n\\n    /// @notice Simple unlimited permit on the Permit2 contract.\\n    /// @param token The token to permit spending.\\n    /// @param owner The user to permit spending from.\\n    /// @param spender The user to permit spending to.\\n    /// @param amount The amount to permit spending.\\n    /// @param deadline  The timestamp after which the signature is no longer valid.\\n    /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n    /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n    /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n    function simplePermit2(\\n        ERC20 token,\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        (,, uint48 nonce) = PERMIT2.allowance(owner, address(token), spender);\\n\\n        PERMIT2.permit(\\n            owner,\\n            IAllowanceTransfer.PermitSingle({\\n                details: IAllowanceTransfer.PermitDetails({\\n                    token: address(token),\\n                    amount: amount.toUint160(),\\n                    // Use an unlimited expiration because it most\\n                    // closely mimics how a standard approval works.\\n                    expiration: type(uint48).max,\\n                    nonce: nonce\\n                }),\\n                spender: spender,\\n                sigDeadline: deadline\\n            }),\\n            bytes.concat(r, s, bytes1(v))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-v3-core/contracts/interfaces/IAaveOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPriceOracleGetter} from './IPriceOracleGetter.sol';\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n  /**\\n   * @dev Emitted after the base currency is set\\n   * @param baseCurrency The base currency of used for price quotes\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n  /**\\n   * @dev Emitted after the price source of an asset is updated\\n   * @param asset The address of the asset\\n   * @param source The price source of the asset\\n   */\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n  /**\\n   * @dev Emitted after the address of fallback oracle is updated\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Sets or replaces price sources of assets\\n   * @param assets The addresses of the assets\\n   * @param sources The addresses of the price sources\\n   */\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /**\\n   * @notice Sets the fallback oracle\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  /**\\n   * @notice Returns a list of prices from a list of assets addresses\\n   * @param assets The list of assets addresses\\n   * @return The prices of the given assets\\n   */\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns the address of the source for an asset address\\n   * @param asset The address of the asset\\n   * @return The address of the source\\n   */\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the fallback oracle\\n   * @return The address of the fallback oracle\\n   */\\n  function getFallbackOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/aave-v3-core/contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/morpho-data-structures/src/LogarithmicBuckets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BucketDLL.sol\\\";\\n\\n/// @title LogarithmicBuckets\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.xyz\\n/// @notice The logarithmic buckets data-structure.\\nlibrary LogarithmicBuckets {\\n    using BucketDLL for BucketDLL.List;\\n\\n    struct Buckets {\\n        mapping(uint256 => BucketDLL.List) buckets;\\n        mapping(address => uint256) valueOf;\\n        uint256 bucketsMask;\\n    }\\n\\n    /* ERRORS */\\n\\n    /// @notice Thrown when the address is zero at insertion.\\n    error ZeroAddress();\\n\\n    /// @notice Thrown when 0 value is inserted.\\n    error ZeroValue();\\n\\n    /* INTERNAL */\\n\\n    /// @notice Updates an account in the `buckets`.\\n    /// @param buckets The buckets to update.\\n    /// @param id The address of the account.\\n    /// @param newValue The new value of the account.\\n    /// @param head Indicates whether to insert the new values at the head or at the tail of the buckets list.\\n    function update(\\n        Buckets storage buckets,\\n        address id,\\n        uint256 newValue,\\n        bool head\\n    ) internal {\\n        if (id == address(0)) revert ZeroAddress();\\n        uint256 value = buckets.valueOf[id];\\n        buckets.valueOf[id] = newValue;\\n\\n        if (value == 0) {\\n            if (newValue == 0) revert ZeroValue();\\n            // `highestSetBit` is used to compute the bucket associated with `newValue`.\\n            _insert(buckets, id, highestSetBit(newValue), head);\\n            return;\\n        }\\n\\n        // `highestSetBit` is used to compute the bucket associated with `value`.\\n        uint256 currentBucket = highestSetBit(value);\\n        if (newValue == 0) {\\n            _remove(buckets, id, currentBucket);\\n            return;\\n        }\\n\\n        // `highestSetBit` is used to compute the bucket associated with `newValue`.\\n        uint256 newBucket = highestSetBit(newValue);\\n        if (newBucket != currentBucket) {\\n            _remove(buckets, id, currentBucket);\\n            _insert(buckets, id, newBucket, head);\\n        }\\n    }\\n\\n    /// @notice Returns the address in `buckets` that is a candidate for matching the value `value`.\\n    /// @param buckets The buckets to get the head.\\n    /// @param value The value to match.\\n    /// @return The address of the head.\\n    function getMatch(Buckets storage buckets, uint256 value) internal view returns (address) {\\n        uint256 bucketsMask = buckets.bucketsMask;\\n        if (bucketsMask == 0) return address(0);\\n\\n        uint256 next = nextBucket(value, bucketsMask);\\n        if (next != 0) return buckets.buckets[next].getNext(address(0));\\n\\n        // `highestSetBit` is used to compute the highest non-empty bucket.\\n        // Knowing that `next` == 0, it is also the highest previous non-empty bucket.\\n        uint256 prev = highestSetBit(bucketsMask);\\n        return buckets.buckets[prev].getNext(address(0));\\n    }\\n\\n    /* PRIVATE */\\n\\n    /// @notice Removes an account in the `buckets`.\\n    /// @dev Does not update the value.\\n    /// @param buckets The buckets to modify.\\n    /// @param id The address of the account to remove.\\n    /// @param bucket The mask of the bucket where to remove.\\n    function _remove(\\n        Buckets storage buckets,\\n        address id,\\n        uint256 bucket\\n    ) private {\\n        if (buckets.buckets[bucket].remove(id)) buckets.bucketsMask &= ~bucket;\\n    }\\n\\n    /// @notice Inserts an account in the `buckets`.\\n    /// @dev Expects that `id` != 0.\\n    /// @dev Does not update the value.\\n    /// @param buckets The buckets to modify.\\n    /// @param id The address of the account to update.\\n    /// @param bucket The mask of the bucket where to insert.\\n    /// @param head Whether to insert at the head or at the tail of the list.\\n    function _insert(\\n        Buckets storage buckets,\\n        address id,\\n        uint256 bucket,\\n        bool head\\n    ) private {\\n        if (buckets.buckets[bucket].insert(id, head)) buckets.bucketsMask |= bucket;\\n    }\\n\\n    /* PURE HELPERS */\\n\\n    /// @notice Returns the highest set bit.\\n    /// @dev Used to compute the bucket associated to a given `value`.\\n    /// @dev Used to compute the highest non empty bucket given the `bucketsMask`.\\n    function highestSetBit(uint256 value) internal pure returns (uint256) {\\n        uint256 lowerMask = setLowerBits(value);\\n        return lowerMask ^ (lowerMask >> 1);\\n    }\\n\\n    /// @notice Sets all the bits lower than (or equal to) the highest bit in the input.\\n    /// @dev This is the same as rounding the input the nearest upper value of the form `2 ** n - 1`.\\n    function setLowerBits(uint256 x) internal pure returns (uint256 y) {\\n        assembly {\\n            x := or(x, shr(1, x))\\n            x := or(x, shr(2, x))\\n            x := or(x, shr(4, x))\\n            x := or(x, shr(8, x))\\n            x := or(x, shr(16, x))\\n            x := or(x, shr(32, x))\\n            x := or(x, shr(64, x))\\n            y := or(x, shr(128, x))\\n        }\\n    }\\n\\n    /// @notice Returns the lowest non-empty bucket containing larger values.\\n    /// @dev The bucket returned is the lowest that is in `bucketsMask` and not in `lowerMask`.\\n    function nextBucket(uint256 value, uint256 bucketsMask) internal pure returns (uint256 bucket) {\\n        uint256 lowerMask = setLowerBits(value);\\n        assembly {\\n            let higherBucketsMask := and(not(lowerMask), bucketsMask)\\n            bucket := and(higherBucketsMask, add(not(higherBucketsMask), 1))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/permit2/lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/permit2/src/interfaces/IDAIPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDAIPermit {\\n    /// @param holder The address of the token owner.\\n    /// @param spender The address of the token spender.\\n    /// @param nonce The owner's nonce, increases at each call to permit.\\n    /// @param expiry The timestamp at which the permit is no longer valid.\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\\n    /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n    /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n    /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/permit2/src/interfaces/IAllowanceTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer {\\n    /// @notice Thrown when an allowance on a token has expired.\\n    /// @param deadline The timestamp at which the allowed amount is no longer valid\\n    error AllowanceExpired(uint256 deadline);\\n\\n    /// @notice Thrown when an allowance on a token has been depleted.\\n    /// @param amount The maximum amount allowed\\n    error InsufficientAllowance(uint256 amount);\\n\\n    /// @notice Thrown when too many nonces are invalidated.\\n    error ExcessiveInvalidation();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n    event NonceInvalidation(\\n        address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce\\n    );\\n\\n    /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n    event Approval(\\n        address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration\\n    );\\n\\n    /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n    event Permit(\\n        address indexed owner,\\n        address indexed token,\\n        address indexed spender,\\n        uint160 amount,\\n        uint48 expiration,\\n        uint48 nonce\\n    );\\n\\n    /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n    event Lockdown(address indexed owner, address token, address spender);\\n\\n    /// @notice The permit data for a token\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n\\n    /// @notice The permit message signed for multiple token allowances\\n    struct PermitBatch {\\n        // the permit data for multiple token allowances\\n        PermitDetails[] details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n\\n    /// @notice The saved permissions\\n    /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    /// @notice A token spender pair.\\n    struct TokenSpenderPair {\\n        // the token the spender is approved\\n        address token;\\n        // the spender address\\n        address spender;\\n    }\\n\\n    /// @notice Details for a token transfer.\\n    struct AllowanceTransferDetails {\\n        // the owner of the token\\n        address from;\\n        // the recipient of the token\\n        address to;\\n        // the amount of the token\\n        uint160 amount;\\n        // the token to be transferred\\n        address token;\\n    }\\n\\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n    function allowance(address, address, address) external view returns (uint160, uint48, uint48);\\n\\n    /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n    /// @param token The token to approve\\n    /// @param spender The spender address to approve\\n    /// @param amount The approved amount of the token\\n    /// @param expiration The timestamp at which the approval is no longer valid\\n    /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n    /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n    /// @param owner The owner of the tokens being approved\\n    /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n    /// @param signature The owner's signature over the permit data\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n    /// @param owner The owner of the tokens being approved\\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n    /// @param signature The owner's signature over the permit data\\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n    /// @notice Transfer approved tokens from one address to another\\n    /// @param from The address to transfer from\\n    /// @param to The address of the recipient\\n    /// @param amount The amount of the token to transfer\\n    /// @param token The token address to transfer\\n    /// @dev Requires the from address to have approved at least the desired amount\\n    /// of tokens to msg.sender.\\n    function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n    /// @notice Transfer approved tokens in a batch\\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n    /// @dev Requires the from addresses to have approved at least the desired amount\\n    /// of tokens to msg.sender.\\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n    /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n    /// by batch revoking approvals\\n    /// @param approvals Array of approvals to revoke.\\n    function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n    /// @notice Invalidate nonces for a given (token, spender) pair\\n    /// @param token The token to invalidate nonces for\\n    /// @param spender The spender to invalidate nonces for\\n    /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n    /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n    function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\"\r\n    },\r\n    \"lib/permit2/src/libraries/SafeCast160.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary SafeCast160 {\\n    /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160\\n    error UnsafeCast();\\n\\n    /// @notice Safely casts uint256 to uint160\\n    /// @param value The uint256 to be cast\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) revert UnsafeCast();\\n        return uint160(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-v3-core/contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   */\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   */\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-v3-core/contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"lib/morpho-data-structures/src/BucketDLL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// @title BucketDLL\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.xyz\\n/// @notice The doubly linked list used in logarithmic buckets.\\nlibrary BucketDLL {\\n    /* STRUCTS */\\n\\n    struct Account {\\n        address prev;\\n        address next;\\n    }\\n\\n    struct List {\\n        mapping(address => Account) accounts;\\n    }\\n\\n    /* INTERNAL */\\n\\n    /// @notice Returns the next id address from the current `id`.\\n    /// @dev Pass the address 0 to get the head of the list.\\n    /// @param list The list to search in.\\n    /// @param id The address of the current account.\\n    /// @return The address of the next account.\\n    function getNext(List storage list, address id) internal view returns (address) {\\n        return list.accounts[id].next;\\n    }\\n\\n    /// @notice Removes an account of the `list`.\\n    /// @dev This function should not be called with `id` equal to address 0.\\n    /// @dev This function should not be called with an `_id` that is not in the list.\\n    /// @param list The list to search in.\\n    /// @param id The address of the account.\\n    /// @return Whether the bucket is empty after removal.\\n    function remove(List storage list, address id) internal returns (bool) {\\n        Account memory account = list.accounts[id];\\n        address prev = account.prev;\\n        address next = account.next;\\n\\n        list.accounts[prev].next = next;\\n        list.accounts[next].prev = prev;\\n\\n        delete list.accounts[id];\\n\\n        return (prev == address(0) && next == address(0));\\n    }\\n\\n    /// @notice Inserts an account in the `list`.\\n    /// @dev This function should not be called with `id` equal to address 0.\\n    /// @dev This function should not be called with an `id` that is already in the list.\\n    /// @param list The list to search in.\\n    /// @param id The address of the account.\\n    /// @param atHead Tells whether to insert at the head or at the tail of the list.\\n    /// @return Whether the bucket was empty before insertion.\\n    function insert(\\n        List storage list,\\n        address id,\\n        bool atHead\\n    ) internal returns (bool) {\\n        if (atHead) {\\n            address head = list.accounts[address(0)].next;\\n            list.accounts[address(0)].next = id;\\n            list.accounts[head].prev = id;\\n            list.accounts[id].next = head;\\n            return head == address(0);\\n        } else {\\n            address tail = list.accounts[address(0)].prev;\\n            list.accounts[address(0)].prev = id;\\n            list.accounts[tail].next = id;\\n            list.accounts[id].prev = tail;\\n            return tail == address(0);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@aave-v3-core/=lib/aave-v3-core/contracts/\",\r\n      \"@aave-v3-periphery/=lib/aave-v3-periphery/contracts/\",\r\n      \"@aave/core-v3/=lib/morpho-utils/lib/aave-v3-core/\",\r\n      \"@ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@morpho-data-structures/=lib/morpho-data-structures/src/\",\r\n      \"@morpho-utils/=lib/morpho-utils/src/\",\r\n      \"@openzeppelin-upgradeable/=lib/morpho-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/=lib/morpho-utils/lib/openzeppelin-contracts/\",\r\n      \"@permit2/=lib/permit2/src/\",\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"aave-v3-core/=lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-v3-periphery/contracts/\",\r\n      \"config/=config/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"morpho-data-structures/=lib/morpho-data-structures/\",\r\n      \"morpho-utils/=lib/morpho-utils/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/morpho-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"permit2/=lib/permit2/\",\r\n      \"solmate/=lib/permit2/lib/solmate/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"weird-erc20/=lib/solmate/lib/weird-erc20/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"morpho\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsBulker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nbActions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbData\",\"type\":\"uint256\"}],\"name\":\"InconsistentParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IBulkerGateway.ActionType\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"UnsupportedAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MORPHO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBulkerGateway.ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BulkerGateway", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000033333aea097c193e66081e930c33020272b33333", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://15c36d02a07cc1cb610fca7af0bda7ad882c694907424fead54e420f612d982a"}