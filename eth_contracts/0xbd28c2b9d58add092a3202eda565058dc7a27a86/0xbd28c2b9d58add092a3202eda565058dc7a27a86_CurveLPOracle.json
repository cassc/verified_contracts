{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracles/CurveLPOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../libraries/Types.sol\\\";\\nimport \\\"../../libraries/ScaledMath.sol\\\";\\nimport \\\"../../libraries/ScaledMath.sol\\\";\\nimport \\\"../../libraries/CurvePoolUtils.sol\\\";\\nimport \\\"../../interfaces/IOracle.sol\\\";\\nimport \\\"../../interfaces/IController.sol\\\";\\nimport \\\"../../interfaces/vendor/ICurveFactory.sol\\\";\\nimport \\\"../../interfaces/vendor/ICurvePoolV0.sol\\\";\\nimport \\\"../../interfaces/vendor/ICurvePoolV1.sol\\\";\\nimport \\\"../../interfaces/vendor/ICurveMetaRegistry.sol\\\";\\n\\ncontract CurveLPOracle is IOracle, Ownable {\\n    using ScaledMath for uint256;\\n\\n    event ImbalanceThresholdUpdated(address indexed token, uint256 threshold);\\n\\n    uint256 internal constant _DEFAULT_IMBALANCE_THRESHOLD = 0.02e18;\\n    uint256 internal constant _MAX_IMBALANCE_THRESHOLD = 0.1e18;\\n    mapping(address => uint256) public imbalanceThresholds;\\n\\n    IOracle private immutable _genericOracle;\\n    IController private immutable controller;\\n\\n    constructor(address genericOracle, address controller_) {\\n        _genericOracle = IOracle(genericOracle);\\n        controller = IController(controller_);\\n    }\\n\\n    function isTokenSupported(address token) external view override returns (bool) {\\n        address pool = _getCurvePool(token);\\n        ICurveRegistryCache curveRegistryCache_ = controller.curveRegistryCache();\\n        if (!curveRegistryCache_.isRegistered(pool)) return false;\\n        address[] memory coins = curveRegistryCache_.coins(pool);\\n        for (uint256 i; i < coins.length; i++) {\\n            if (!_genericOracle.isTokenSupported(coins[i])) return false;\\n        }\\n        return true;\\n    }\\n\\n    function getUSDPrice(address token) external view returns (uint256) {\\n        // Getting the pool data\\n        address pool = _getCurvePool(token);\\n        ICurveRegistryCache curveRegistryCache_ = controller.curveRegistryCache();\\n        require(curveRegistryCache_.isRegistered(pool), \\\"token not supported\\\");\\n        uint256[] memory decimals = curveRegistryCache_.decimals(pool);\\n        address[] memory coins = curveRegistryCache_.coins(pool);\\n\\n        // Adding up the USD value of all the coins in the pool\\n        uint256 value;\\n        uint256 numberOfCoins = curveRegistryCache_.nCoins(pool);\\n        uint256[] memory prices = new uint256[](numberOfCoins);\\n        uint256[] memory thresholds = new uint256[](numberOfCoins);\\n        for (uint256 i; i < numberOfCoins; i++) {\\n            address coin = coins[i];\\n            uint256 price = _genericOracle.getUSDPrice(coin);\\n            prices[i] = price;\\n            thresholds[i] = imbalanceThresholds[token];\\n            require(price > 0, \\\"price is 0\\\");\\n            uint256 balance = _getBalance(pool, i);\\n            require(balance > 0, \\\"balance is 0\\\");\\n            value += balance.convertScale(uint8(decimals[i]), 18).mulDown(price);\\n        }\\n\\n        // Verifying the pool is balanced\\n        CurvePoolUtils.ensurePoolBalanced(\\n            CurvePoolUtils.PoolMeta({\\n                pool: pool,\\n                numberOfCoins: numberOfCoins,\\n                assetType: curveRegistryCache_.assetType(pool),\\n                decimals: decimals,\\n                prices: prices,\\n                thresholds: thresholds\\n            })\\n        );\\n\\n        // Returning the value of the pool in USD per LP Token\\n        return value.divDown(IERC20(token).totalSupply());\\n    }\\n\\n    function setImbalanceThreshold(address token, uint256 threshold) external onlyOwner {\\n        require(threshold <= _MAX_IMBALANCE_THRESHOLD, \\\"threshold too high\\\");\\n        imbalanceThresholds[token] = threshold;\\n        emit ImbalanceThresholdUpdated(token, threshold);\\n    }\\n\\n    function _getCurvePool(address lpToken_) internal view returns (address) {\\n        return controller.curveRegistryCache().poolFromLpToken(lpToken_);\\n    }\\n\\n    function _getBalance(address curvePool, uint256 index) internal view returns (uint256) {\\n        if (controller.curveRegistryCache().interfaceVersion(curvePool) == 0) {\\n            return ICurvePoolV0(curvePool).balances(int128(uint128(index)));\\n        }\\n        return ICurvePoolV1(curvePool).balances(index);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nlibrary Types {\\n    struct Coin {\\n        address coinAddress;\\n        uint8 decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/ScaledMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nlibrary ScaledMath {\\n    uint256 internal constant DECIMALS = 18;\\n    uint256 internal constant ONE = 10**DECIMALS;\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * b) / (10**decimals);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * 10**decimals) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE) - 1) / b + 1;\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / int256(ONE);\\n    }\\n\\n    function mulDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * b) / uint128(ONE);\\n    }\\n\\n    function mulDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * b) / int256(10**decimals);\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * int256(ONE)) / b;\\n    }\\n\\n    function divDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * uint128(ONE)) / b;\\n    }\\n\\n    function divDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * int256(10**decimals)) / b;\\n    }\\n\\n    function convertScale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function convertScale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function upscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a * (10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a / (10**(fromDecimals - toDecimals));\\n    }\\n\\n    function upscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a * int256(10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a / int256(10**(fromDecimals - toDecimals));\\n    }\\n\\n    function intPow(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 result = ONE;\\n        for (uint256 i; i < n; ) {\\n            result = mulDown(result, a);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function absSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a >= b ? a - b : b - a;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/CurvePoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/vendor/ICurvePoolV2.sol\\\";\\nimport \\\"../interfaces/vendor/ICurvePoolV1.sol\\\";\\nimport \\\"./ScaledMath.sol\\\";\\n\\nlibrary CurvePoolUtils {\\n    using ScaledMath for uint256;\\n\\n    uint256 internal constant _DEFAULT_IMBALANCE_THRESHOLD = 0.02e18;\\n\\n    enum AssetType {\\n        USD,\\n        ETH,\\n        BTC,\\n        OTHER,\\n        CRYPTO\\n    }\\n\\n    struct PoolMeta {\\n        address pool;\\n        uint256 numberOfCoins;\\n        AssetType assetType;\\n        uint256[] decimals;\\n        uint256[] prices;\\n        uint256[] thresholds;\\n    }\\n\\n    function ensurePoolBalanced(PoolMeta memory poolMeta) internal view {\\n        uint256 fromDecimals = poolMeta.decimals[0];\\n        uint256 fromBalance = 10**fromDecimals;\\n        uint256 fromPrice = poolMeta.prices[0];\\n        for (uint256 i = 1; i < poolMeta.numberOfCoins; i++) {\\n            uint256 toDecimals = poolMeta.decimals[i];\\n            uint256 toPrice = poolMeta.prices[i];\\n            uint256 toExpectedUnscaled = (fromBalance * fromPrice) / toPrice;\\n            uint256 toExpected = toExpectedUnscaled.convertScale(\\n                uint8(fromDecimals),\\n                uint8(toDecimals)\\n            );\\n\\n            uint256 toActual;\\n\\n            if (poolMeta.assetType == AssetType.CRYPTO) {\\n                // Handling crypto pools\\n                toActual = ICurvePoolV2(poolMeta.pool).get_dy(0, i, fromBalance);\\n            } else {\\n                // Handling other pools\\n                toActual = ICurvePoolV1(poolMeta.pool).get_dy(0, int128(uint128(i)), fromBalance);\\n            }\\n\\n            require(\\n                _isWithinThreshold(toExpected, toActual, poolMeta.thresholds[i]),\\n                \\\"pool is not balanced\\\"\\n            );\\n        }\\n    }\\n\\n    function _isWithinThreshold(\\n        uint256 a,\\n        uint256 b,\\n        uint256 imbalanceTreshold\\n    ) internal pure returns (bool) {\\n        if (imbalanceTreshold == 0) imbalanceTreshold = _DEFAULT_IMBALANCE_THRESHOLD;\\n        if (a > b) return (a - b).divDown(a) <= imbalanceTreshold;\\n        return (b - a).divDown(b) <= imbalanceTreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    event TokenUpdated(address indexed token, address feed, uint256 maxDelay, bool isEthPrice);\\n\\n    /// @notice returns the price in USD of symbol.\\n    function getUSDPrice(address token) external view returns (uint256);\\n\\n    /// @notice returns if the given token is supported for pricing.\\n    function isTokenSupported(address token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./pools/ITorusPool.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./tokenomics/IInflationManager.sol\\\";\\nimport \\\"./tokenomics/ILpTokenStaker.sol\\\";\\nimport \\\"./ICurveRegistryCache.sol\\\";\\n\\ninterface IController {\\n    event PoolAdded(address indexed pool);\\n    event PoolRemoved(address indexed pool);\\n    event PoolShutdown(address indexed pool);\\n    event ConvexBoosterSet(address convexBooster);\\n    event CurveHandlerSet(address curveHandler);\\n    event ConvexHandlerSet(address convexHandler);\\n    event CurveRegistryCacheSet(address curveRegistryCache);\\n    event InflationManagerSet(address inflationManager);\\n    event PriceOracleSet(address priceOracle);\\n    event WeightUpdateMinDelaySet(uint256 weightUpdateMinDelay);\\n\\n    struct WeightUpdate {\\n        address torusPoolAddress;\\n        ITorusPool.PoolWeight[] weights;\\n    }\\n\\n    // inflation manager\\n\\n    function inflationManager() external view returns (IInflationManager);\\n\\n    function setInflationManager(address manager) external;\\n\\n    // views\\n    function curveRegistryCache() external view returns (ICurveRegistryCache);\\n\\n    /// lp token staker\\n    function setLpTokenStaker(address _lpTokenStaker) external;\\n\\n    function lpTokenStaker() external view returns (ILpTokenStaker);\\n\\n    // oracle\\n    function priceOracle() external view returns (IOracle);\\n\\n    function setPriceOracle(address oracle) external;\\n\\n    // pool functions\\n\\n    function listPools() external view returns (address[] memory);\\n\\n    function listActivePools() external view returns (address[] memory);\\n\\n    function isPool(address poolAddress) external view returns (bool);\\n\\n    function isActivePool(address poolAddress) external view returns (bool);\\n\\n    function addPool(address poolAddress) external;\\n\\n    function shutdownPool(address poolAddress) external;\\n\\n    function removePool(address poolAddress) external;\\n\\n    function torusToken() external view returns (address);\\n\\n    function lastWeightUpdate(address poolAddress) external view returns (uint256);\\n\\n    function updateWeights(WeightUpdate memory update) external;\\n\\n    function updateAllWeights(WeightUpdate[] memory weights) external;\\n\\n    // handler functions\\n\\n    function convexBooster() external view returns (address);\\n\\n    function curveHandler() external view returns (address);\\n\\n    function convexHandler() external view returns (address);\\n\\n    function setConvexBooster(address _convexBooster) external;\\n\\n    function setCurveHandler(address _curveHandler) external;\\n\\n    function setConvexHandler(address _convexHandler) external;\\n\\n    function setCurveRegistryCache(address curveRegistryCache_) external;\\n\\n    function emergencyMinter() external view returns (address);\\n\\n    function setWeightUpdateMinDelay(uint256 delay) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurveFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurveFactory {\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_decimals(address curvePool_) external view returns (uint256[4] memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV0 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[5] calldata min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[6] calldata min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[7] calldata min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[8] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(int128 i) external view returns (address);\\n\\n    function balances(int128 i) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV1 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurveMetaRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurveMetaRegistry {\\n    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\\n    event NewAdmin(address indexed admin);\\n\\n    function add_registry_handler(address _registry_handler) external;\\n\\n    function update_registry_handler(uint256 _index, address _registry_handler)\\n        external;\\n\\n    function get_registry_handlers_from_pool(address _pool)\\n        external\\n        view\\n        returns (address[10] memory);\\n\\n    function get_base_registry(address registry_handler)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 i\\n    ) external view returns (address);\\n\\n    function find_pools_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function get_admin_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_admin_balances(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_balances(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_base_pool(address _pool) external view returns (address);\\n\\n    function get_base_pool(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _handler_id\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_fees(address _pool) external view returns (uint256[10] memory);\\n\\n    function get_fees(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[10] memory);\\n\\n    function get_gauge(address _pool) external view returns (address);\\n\\n    function get_gauge(address _pool, uint256 gauge_idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_gauge(\\n        address _pool,\\n        uint256 gauge_idx,\\n        uint256 _handler_id\\n    ) external view returns (address);\\n\\n    function get_gauge_type(address _pool) external view returns (int128);\\n\\n    function get_gauge_type(address _pool, uint256 gauge_idx)\\n        external\\n        view\\n        returns (int128);\\n\\n    function get_gauge_type(\\n        address _pool,\\n        uint256 gauge_idx,\\n        uint256 _handler_id\\n    ) external view returns (int128);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function get_lp_token(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_n_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_n_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_n_underlying_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_pool_asset_type(address _pool) external view returns (uint256);\\n\\n    function get_pool_asset_type(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_pool_from_lp_token(address _token)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_pool_from_lp_token(address _token, uint256 _handler_id)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_pool_params(address _pool)\\n        external\\n        view\\n        returns (uint256[20] memory);\\n\\n    function get_pool_params(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[20] memory);\\n\\n    function get_pool_name(address _pool) external view returns (string memory);\\n\\n    function get_pool_name(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function get_underlying_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_balances(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_underlying_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_underlying_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_decimals(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price_from_lp_token(\\n        address _token,\\n        uint256 _handler_id\\n    ) external view returns (uint256);\\n\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    function is_meta(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function is_registered(address _pool) external view returns (bool);\\n\\n    function is_registered(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 _index) external view returns (address);\\n\\n    function address_provider() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function get_registry(uint256 arg0) external view returns (address);\\n\\n    function registry_length() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV2 {\\n    function token() external view returns (address);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory amounts)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 token_amount, uint256 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/ITorusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./ILpToken.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"../IOracle.sol\\\";\\n\\ninterface ITorusPool {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 depositedAmount,\\n        uint256 lpReceived\\n    );\\n    event Withdraw(address indexed account, uint256 amount);\\n    event NewWeight(address indexed curvePool, uint256 newWeight);\\n    event NewMaxIdleCurveLpRatio(uint256 newRatio);\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event HandledDepeggedCurvePool(address curvePool_);\\n    event HandledInvalidConvexPid(address curvePool_, uint256 pid_);\\n    event CurvePoolAdded(address curvePool_);\\n    event CurvePoolRemoved(address curvePool_);\\n    event Shutdown();\\n    event DepegThresholdUpdated(uint256 newThreshold);\\n    event MaxDeviationUpdated(uint256 newMaxDeviation);\\n\\n    struct PoolWeight {\\n        address poolAddress;\\n        uint256 weight;\\n    }\\n\\n    struct PoolWithAmount {\\n        address poolAddress;\\n        uint256 amount;\\n    }\\n\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    function lpToken() external view returns (ILpToken);\\n\\n    function rewardManager() external view returns (IRewardManager);\\n\\n    function depositFor(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external payable returns (uint256);\\n\\n    function deposit(uint256 _amount, uint256 _minLpReceived) external payable returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external payable returns (uint256);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function usdExchangeRate() external view returns (uint256);\\n\\n    function allCurvePools() external view returns (address[] memory);\\n\\n    function curvePoolsCount() external view returns (uint256);\\n\\n    function getCurvePoolAtIndex(uint256 _index) external view returns (address);\\n\\n    function unstakeAndWithdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external;\\n\\n    function getWeight(address curvePool) external view returns (uint256);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function getAllocatedUnderlying() external view returns (PoolWithAmount[] memory);\\n\\n    function removeCurvePool(address pool) external;\\n\\n    function addCurvePool(address pool) external;\\n\\n    function totalCurveLpBalance(address curvePool_) external view returns (uint256);\\n\\n    function rebalancingRewardActive() external view returns (bool);\\n\\n    function totalDeviationAfterWeightUpdate() external view returns (uint256);\\n\\n    function computeTotalDeviation() external view returns (uint256);\\n\\n    /// @notice returns the total amount of funds held by this pool in terms of underlying\\n    function totalUnderlying() external view returns (uint256);\\n\\n    function getTotalAndPerPoolUnderlying()\\n        external\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        );\\n\\n    /// @notice same as `totalUnderlying` but returns a cached version\\n    /// that might be slightly outdated if oracle prices have changed\\n    /// @dev this is useful in cases where we want to reduce gas usage and do\\n    /// not need a precise value\\n    function cachedTotalUnderlying() external view returns (uint256);\\n\\n    function handleInvalidConvexPid(address pool) external;\\n\\n    function shutdownPool() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function handleDepeggedCurvePool(address curvePool_) external;\\n\\n    function isBalanced() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/IInflationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IInflationManager {\\n    event TokensClaimed(address indexed pool, uint256 torusAmount);\\n    event RebalancingRewardHandlerAdded(address indexed pool, address indexed handler);\\n    event RebalancingRewardHandlerRemoved(address indexed pool, address indexed handler);\\n    event PoolWeightsUpdated();\\n\\n    function executeInflationRateUpdate() external;\\n\\n    function updatePoolWeights() external;\\n\\n    /// @notice returns the weights of the Torus pools to know how much inflation\\n    /// each of them will receive, as well as the total amount of USD value in all the pools\\n    function computePoolWeights()\\n        external\\n        view\\n        returns (\\n            address[] memory _pools,\\n            uint256[] memory poolWeights,\\n            uint256 totalUSDValue\\n        );\\n\\n    function computePoolWeight(address pool)\\n        external\\n        view\\n        returns (uint256 poolWeight, uint256 totalUSDValue);\\n\\n    function currentInflationRate() external view returns (uint256);\\n\\n    function getCurrentPoolInflationRate(address pool) external view returns (uint256);\\n\\n    function handleRebalancingRewards(\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external;\\n\\n    function addPoolRebalancingRewardHandler(address poolAddress, address rebalancingRewardHandler)\\n        external;\\n\\n    function removePoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function rebalancingRewardHandlers(address poolAddress)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function hasPoolRebalancingRewardHandlers(address poolAddress, address handler)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ILpTokenStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface ILpTokenStaker {\\n    event LpTokenStaked(address indexed account, uint256 amount);\\n    event LpTokenUnstaked(address indexed account, uint256 amount);\\n    event TokensClaimed(address indexed pool, uint256 torusAmount);\\n    event Shutdown();\\n\\n    function stake(uint256 amount, address torusPool) external;\\n\\n    function unstake(uint256 amount, address torusPool) external;\\n\\n    function stakeFor(\\n        uint256 amount,\\n        address torusPool,\\n        address account\\n    ) external;\\n\\n    function unstakeFor(\\n        uint256 amount,\\n        address torusPool,\\n        address account\\n    ) external;\\n\\n    function unstakeFrom(uint256 amount, address account) external;\\n\\n    function getUserBalanceForPool(address torusPool, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBalanceForPool(address torusPool) external view returns (uint256);\\n\\n    function updateBoost(address user) external;\\n\\n    function claimTORUSRewardsForPool(address pool) external;\\n\\n    function claimableTorus(address pool) external view returns (uint256);\\n\\n    function checkpoint(address pool) external returns (uint256);\\n\\n    function shutdown() external;\\n\\n    function getBoost(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/ICurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./vendor/IBooster.sol\\\";\\nimport \\\"../libraries/CurvePoolUtils.sol\\\";\\n\\ninterface ICurveRegistryCache {\\n    function BOOSTER() external view returns (IBooster);\\n\\n    function initPool(address pool_) external;\\n\\n    function initPool(address pool_, uint256 pid_) external;\\n\\n    function lpToken(address pool_) external view returns (address);\\n\\n    function assetType(address pool_) external view returns (CurvePoolUtils.AssetType);\\n\\n    function isRegistered(address pool_) external view returns (bool);\\n\\n    function hasCoinDirectly(address pool_, address coin_) external view returns (bool);\\n\\n    function hasCoinAnywhere(address pool_, address coin_) external view returns (bool);\\n\\n    function basePool(address pool_) external view returns (address);\\n\\n    function coinIndex(address pool_, address coin_) external view returns (int128);\\n\\n    function nCoins(address pool_) external view returns (uint256);\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function decimals(address pool_) external view returns (uint256[] memory);\\n\\n    function interfaceVersion(address pool_) external view returns (uint256);\\n\\n    function poolFromLpToken(address lpToken_) external view returns (address);\\n\\n    function coins(address pool_) external view returns (address[] memory);\\n\\n    function getPid(address _pool) external view returns (uint256);\\n\\n    function getRewardPool(address _pool) external view returns (address);\\n\\n    function isShutdownPid(uint256 pid_) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/ILpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ILpToken is IERC20Metadata {\\n    function mint(address account, uint256 amount) external returns (uint256);\\n\\n    function burn(address _owner, uint256 _amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IRewardManager {\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event SoldRewardTokens(uint256 targetTokenReceived);\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardRemoved(address reward);\\n    event ExtraRewardsCurvePoolSet(address extraReward, address curvePool);\\n    event FeesSet(uint256 feePercentage);\\n    event FeesEnabled(uint256 feePercentage);\\n    event EarningsClaimed(\\n        address indexed claimedBy,\\n        uint256 torusEarned,\\n        uint256 crvEarned,\\n        uint256 cvxEarned\\n    );\\n\\n    struct RewardMeta {\\n        uint256 earnedIntegral;\\n        uint256 lastEarned;\\n        mapping(address => uint256) accountIntegral;\\n        mapping(address => uint256) accountShare;\\n    }\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function poolCheckpoint() external returns (bool);\\n\\n    function addExtraReward(address reward) external returns (bool);\\n\\n    function addBatchExtraRewards(address[] memory rewards) external;\\n\\n    function pool() external view returns (address);\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function claimableRewards(address account)\\n        external\\n        view\\n        returns (\\n            uint256 torusRewards,\\n            uint256 crvRewards,\\n            uint256 cvxRewards\\n        );\\n\\n    function claimEarnings()\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function claimPoolEarningsAndSellRewardTokens() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface IBooster {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.8/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genericOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ImbalanceThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEthPrice\",\"type\":\"bool\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"imbalanceThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setImbalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveLPOracle", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c807305e3dc2b16adabee33f94f3aece0ce0fce6000000000000000000000000f88480d07880fe97c4c69fb22337b07420721843", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}