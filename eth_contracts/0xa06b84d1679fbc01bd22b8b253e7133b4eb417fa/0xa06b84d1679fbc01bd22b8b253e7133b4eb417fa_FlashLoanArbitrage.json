{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILendingPool {\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata modes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function getReserveData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 availableLiquidity,\r\n            uint256 totalStableDebt,\r\n            uint256 totalVariableDebt,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n\r\n    function getUserAccountData(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalCollateralETH,\r\n            uint256 totalDebtETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IPriceOracle {\r\n    function getAssetPrice(address asset) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ncontract FlashLoanArbitrage {\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    IUniswapV2Router02 public sushiswapRouter;\r\n    address public owner;\r\n    address public WETH;\r\n\r\n    // Address Constants (with checksums)\r\n    address constant AAVE_LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\r\n    address constant UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant SUSHISWAP_ROUTER = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    constructor() {\r\n        addressesProvider = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES_PROVIDER);\r\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER);\r\n        sushiswapRouter = IUniswapV2Router02(SUSHISWAP_ROUTER);\r\n        WETH = WETH_ADDRESS;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function executeArbitrage(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts\r\n    ) external onlyOwner {\r\n        require(tokens.length == amounts.length, \"Tokens and amounts length mismatch\");\r\n\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        bytes memory params = abi.encode(tokens, amounts);\r\n        uint16 referralCode = 0;\r\n\r\n        lendingPool.flashLoan(\r\n            address(this),\r\n            tokens,\r\n            amounts,\r\n            new uint256[](tokens.length),\r\n            address(this),\r\n            params,\r\n            referralCode\r\n        );\r\n    }\r\n\r\n    function executeOperation(\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata premiums,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external returns (bool) {\r\n        require(initiator == address(this), \"Invalid initiator\");\r\n\r\n        // Decode params\r\n        (address[] memory tokens, uint256[] memory borrowAmounts) = abi.decode(params, (address[], uint256[]));\r\n\r\n        // Execute arbitrage logic\r\n        _executeArbitrageLogic(tokens, borrowAmounts);\r\n\r\n        // Repay flash loan\r\n        _repayFlashLoan(assets, amounts, premiums);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _executeArbitrageLogic(address[] memory tokens, uint256[] memory borrowAmounts) internal {\r\n        // Implement your arbitrage logic here\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 amountIn = borrowAmounts[i];\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = tokens[i];\r\n            path[1] = WETH;\r\n\r\n            uint256[] memory uniswapAmountsOut = uniswapRouter.getAmountsOut(amountIn, path);\r\n            uint256[] memory sushiswapAmountsOut = sushiswapRouter.getAmountsOut(amountIn, path);\r\n\r\n            // Example logic to compare and execute swaps\r\n            if (uniswapAmountsOut[1] > sushiswapAmountsOut[1]) {\r\n                // Swap on Uniswap\r\n                uniswapRouter.swapExactTokensForTokens(\r\n                    amountIn,\r\n                    uniswapAmountsOut[1],\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                // Swap on Sushiswap\r\n                sushiswapRouter.swapExactTokensForTokens(\r\n                    amountIn,\r\n                    sushiswapAmountsOut[1],\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _repayFlashLoan(address[] memory assets, uint256[] memory amounts, uint256[] memory premiums) internal {\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            uint256 amountOwing = amounts[i] + premiums[i];\r\n            IERC20(assets[i]).approve(address(lendingPool), amountOwing);\r\n        }\r\n    }\r\n\r\n    function getMaxBorrowableAmount(address asset) public view returns (uint256) {\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        (, , uint256 availableBorrowsETH, , , ) = lendingPool.getUserAccountData(address(this));\r\n        \r\n        IPriceOracle oracle = IPriceOracle(addressesProvider.getPriceOracle());\r\n        uint256 assetPrice = oracle.getAssetPrice(asset);\r\n        \r\n        return (availableBorrowsETH * 1e18) / assetPrice;\r\n    }\r\n\r\n    function getReserveData(address asset) public view returns (uint256 availableLiquidity) {\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        (availableLiquidity, , , , , , , , , ) = lendingPool.getReserveData(asset);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"executeArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getMaxBorrowableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlashLoanArbitrage", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ff89d71853abaa0e6936866837fddce9f22123b7050a53879e3fa6b63a1f24c"}