{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title Protocol Owned Liquidity\r\n@author 0xkorin, Yearn Finance\r\n@license Copyright (c) Yearn Finance, 2023 - all rights reserved\r\n@notice\r\n    Contract to manage the protocol owned liquidity.\r\n    Actual operations are implemented in individual modules, this contract only serves to \r\n    manage its permissions. Modules can be approved to mint or burn yETH, receive ETH and receive tokens.\r\n    yETH can only be minted up to the debt ceiling, which is determined by the amount of ETH deposited\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface Token:\r\n    def mint(_account: address, _amount: uint256): nonpayable\r\n    def burn(_account: address, _amount: uint256): nonpayable\r\n\r\ntoken: public(immutable(address))\r\nmanagement: public(address)\r\npending_management: public(address)\r\navailable: public(uint256)\r\ndebt: public(uint256)\r\nnative_allowance: public(HashMap[address, uint256])\r\nmint_allowance: public(HashMap[address, uint256])\r\nburn_allowance: public(HashMap[address, uint256])\r\nkilled: public(bool)\r\n\r\nNATIVE: constant(address) = 0x0000000000000000000000000000000000000000\r\nMINT: constant(address)   = 0x0000000000000000000000000000000000000001\r\nBURN: constant(address)   = 0x0000000000000000000000000000000000000002\r\n\r\nevent Mint:\r\n    account: indexed(address)\r\n    amount: uint256\r\n\r\nevent Burn:\r\n    account: indexed(address)\r\n    amount: uint256\r\n\r\nevent Approve:\r\n    token: indexed(address)\r\n    spender: indexed(address)\r\n    amount: uint256\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\nevent Kill: pass\r\n\r\n@external\r\ndef __init__(_token: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _token yETH token address\r\n    \"\"\"\r\n    token = _token\r\n    self.management = msg.sender\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    \"\"\"\r\n    @notice Receive ETH and raise debt ceiling\r\n    \"\"\"\r\n    self.available += msg.value\r\n    pass\r\n\r\n@external\r\n@payable\r\ndef receive_native():\r\n    \"\"\"\r\n    @notice Receive ETH without raising the debt ceiling\r\n    @dev Modules should use this when sending back previously received ETH\r\n    \"\"\"\r\n    pass\r\n\r\n@external\r\ndef send_native(_receiver: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Send ETH\r\n    @param _receiver Account to send the ETH to\r\n    @param _amount Amount of ETH to send\r\n    @dev Requires prior permission by management\r\n    \"\"\"\r\n    assert _amount > 0\r\n    self.native_allowance[msg.sender] -= _amount\r\n    raw_call(_receiver, b\"\", value=_amount)\r\n\r\n@external\r\ndef mint(_amount: uint256):\r\n    \"\"\"\r\n    @notice Mint yETH\r\n    @param _amount Amount of ETH to mint\r\n    @dev Cannot mint more than the debt ceiling\r\n    @dev Requires prior permission by management\r\n    \"\"\"\r\n    assert _amount > 0\r\n    assert not self.killed\r\n    self.mint_allowance[msg.sender] -= _amount\r\n    debt: uint256 = self.debt + _amount\r\n    assert debt <= self.available\r\n    self.debt = debt\r\n    Token(token).mint(self, _amount)\r\n    log Mint(msg.sender, _amount)\r\n\r\n@external\r\ndef burn(_amount: uint256):\r\n    \"\"\"\r\n    @notice Burn yETH\r\n    @param _amount Amount of yETH to burn\r\n    @dev Requires prior permission by management\r\n    \"\"\"\r\n    assert _amount > 0\r\n    self.burn_allowance[msg.sender] -= _amount\r\n    self.debt -= _amount\r\n    Token(token).burn(self, _amount)\r\n    log Burn(msg.sender, _amount)\r\n\r\n# MANAGEMENT FUNCTIONS\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)\r\n\r\n@external\r\ndef approve(_token: address, _spender: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Approve `_spender` to spend `_amount` of `_token` from the POL\r\n    @param _token\r\n        Token to give approval for.\r\n        Use special designated values to set minting/burning/native allowances\r\n    @param _spender Account to give approvel to\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    self._approve(_token, _spender, _amount)\r\n\r\n@external\r\ndef increase_allowance(_token: address, _spender: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Increase `_spender`s allowance to spend `_token` by `_amount`\r\n    @param _token \r\n        Token to give increase in allowance for.\r\n        Use special designated values to set minting/burning/native allowances\r\n    @param _spender Account to increase in allowance of\r\n    @param _amount Amount to increase allowance by\r\n    \"\"\"\r\n    allowance: uint256 = 0\r\n    if _token == NATIVE:\r\n        allowance = self.native_allowance[_spender]\r\n    elif _token == MINT:\r\n        allowance = self.mint_allowance[_spender]\r\n    elif _token == BURN:\r\n        allowance = self.burn_allowance[_spender]\r\n    else:\r\n        allowance = ERC20(_token).allowance(self, _spender)\r\n\r\n    self._approve(_token, _spender, allowance + _amount)\r\n\r\n@external\r\ndef decrease_allowance(_token: address, _spender: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Decrease `_spender`s allowance to spend `_token` by `_amount`\r\n    @param _token\r\n        Token to decrease allowance for.\r\n        Use special designated values to set minting/burning/native allowances\r\n    @param _spender Account to decrease allowance of\r\n    @param _amount Amount to decrease allowance by\r\n    @dev If decrease is larger than current allowance, it will be set to zero\r\n    \"\"\"\r\n    allowance: uint256 = 0\r\n    if _token == NATIVE:\r\n        allowance = self.native_allowance[_spender]\r\n    elif _token == MINT:\r\n        allowance = self.mint_allowance[_spender]\r\n    elif _token == BURN:\r\n        allowance = self.burn_allowance[_spender]\r\n    else:\r\n        allowance = ERC20(_token).allowance(self, _spender)\r\n\r\n    if _amount > allowance:\r\n        allowance = 0\r\n    else:\r\n        allowance -= _amount\r\n    self._approve(_token, _spender, allowance)\r\n\r\n@internal\r\ndef _approve(_token: address, _spender: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Approve `_spender` to spend `_amount` of `_token` from the POL\r\n    @param _token\r\n        Token to give approval for.\r\n        Use special designated values to set minting/burning/native allowances\r\n    @param _spender Account to give approvel to\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    if _token == NATIVE:\r\n        self.native_allowance[_spender] = _amount\r\n    elif _token == MINT:\r\n        self.mint_allowance[_spender] = _amount\r\n    elif _token == BURN:\r\n        self.burn_allowance[_spender] = _amount\r\n    else:\r\n        ERC20(_token).approve(_spender, _amount)\r\n    log Approve(_token, _spender, _amount)\r\n\r\n@external\r\ndef kill():\r\n    \"\"\"\r\n    @notice Kill the POL, permanently disabling yETH minting\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.killed = True\r\n    log Kill()", "ABI": "[{\"name\":\"Mint\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Burn\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approve\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Kill\",\"inputs\":[],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"receive_native\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"send_native\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increase_allowance\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decrease_allowance\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kill\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"available\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debt\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"native_allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"mint_allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"burn_allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "Protocol Owned Liquidity", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000001bed97cbc3c24a4fb5c069c6e311a967386131f7", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}