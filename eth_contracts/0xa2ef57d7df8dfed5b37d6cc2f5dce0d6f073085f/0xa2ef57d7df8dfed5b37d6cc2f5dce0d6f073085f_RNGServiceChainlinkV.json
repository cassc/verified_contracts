{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/owner-manager/Manageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts.\\n * @notice Contract module based on Ownable which provides a basic access\\n *         control mechanism, where there is an owner and a manager that can be\\n *         granted exclusive access to specific functions.\\n *\\n *         The `owner` is first set by passing the address of the `initialOwner`\\n *         to the Ownable constructor.\\n *\\n *         The owner account can be transferred through a two steps process:\\n *         1. The current `owner` calls {transferOwnership} to set a\\n *            `pendingOwner`.\\n *         2. The `pendingOwner` calls {acceptOwnership} to accept the ownership\\n *            transfer.\\n *\\n *         The manager account needs to be set using {setManager}.\\n *\\n *         This module is used through inheritance. It will make available the\\n *         modifiers `onlyManager`, `onlyOwner` and `onlyManagerOrOwner`, which\\n *         can be applied to your functions to restrict their use to the manager\\n *         and/or the owner.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    function __Manageable_init_unchained(address _initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/owner-manager/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts.\\n * @notice Contract module which provides a basic access control mechanism,\\n *         where there is an account (an owner) that can be granted exclusive\\n *         access to specific functions.\\n *\\n *         The `owner` is first set by passing the address of the `initialOwner`\\n *         to the Ownable Initialize.\\n *\\n *         The owner account can be transferred through a two steps process:\\n *         1. The current `owner` calls {transferOwnership} to set a\\n *            `pendingOwner`.\\n *         2. The `pendingOwner` calls {claimOwnership} to accept the ownership\\n *            transfer.\\n *\\n *         This module is used through inheritance. It will make available the\\n *         modifier `onlyOwner`, which can be applied to your functions to\\n *         restrict their use to the owner.\\n */\\nabstract contract Ownable is Initializable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial\\n     *         owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    function __Ownable_init_unchained(address _initialOwner) internal onlyInitializing {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Allows current owner to set the `_pendingOwner` address.\\n     * @param _newOwner Address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n     * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n     * @dev This function is only callable by the `_pendingOwner`.\\n     */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n\\n        _owner = _newOwner;\\n\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the `pendingOwner`.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/rng-service/chainlink/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice Interface for contracts using VRF randomness.\\n */\\nabstract contract VRFConsumerBaseV2 is Initializable {\\n    /* =============== Errors =============== */\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    /* ========== Global Variables ========== */\\n\\n    address private vrfCoordinator;\\n\\n    /* ============ Constructor ============= */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {}\\n\\n    /* ============== External ============== */\\n\\n    /**\\n     * @notice Is called by VRFCoordinator when it receives a valid VRF proof.\\n     * Then calls `fulfillRandomness`, after validating the origin of the call.\\n     */\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    /* ============== Internal ============== */\\n\\n    /**\\n     * @notice Unchained initialization of VRFCinsumerBaseV2 contract.\\n     * @param _vrfCoordinator An initial VRF Coordinator contract address\\n     */\\n    function __VRFConsumerBaseV2_init_unchained(address _vrfCoordinator) internal onlyInitializing {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice Handles the VRF response.\\n     * @param requestId The ID initially returned by `requestRandomWords`\\n     * @param randomWords The VRF output expanded to the requested number of\\n     *                    words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/rng-service/interfaces/IRNGService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Random Numbers Generator Interface\\n * @notice Provides an interface for requesting random numbers from 3rd-party\\n *         RNG services (Chainlink VRF, Starkware VDF, etc.).\\n */\\ninterface IRNGService {\\n    /**\\n     * @notice Emitted when a new request for a random numbers has been\\n     *         submitted.\\n     * @param requestId The indexed ID of the request used to get the results of\\n     *                  the RNG service\\n     * @param vrfRequestId A request ID from 3rd party random numbers provider\\n     * @param numWords An amount of random numbers to request\\n     * @param sender The indexed address of the sender of the request\\n     */\\n    event RandomNumbersRequested(\\n        uint32 indexed requestId,\\n        uint256 indexed vrfRequestId,\\n        uint32 numWords,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Emitted when an existing request for a random numbers has been\\n     *         completed.\\n     * @param requestId The indexed ID of the request used to get the results of\\n     *                  the RNG service\\n     * @param randomNumbers The random numbers produced by the 3rd-party service\\n     */\\n    event RandomNumbersCompleted(uint32 indexed requestId, uint256[] randomNumbers);\\n\\n    /**\\n     * @notice Gets the last request ID used by the RNG service.\\n     * @return requestId The last request ID used in the last request\\n     */\\n    function getLastRequestId() external view returns (uint32 requestId);\\n\\n    /**\\n     * @notice Gets the fee for making a request against an RNG service.\\n     * @return feeToken The address of the token that is used to pay fees\\n     * @return requestFee The fee required to be paid to make a request\\n     */\\n    function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\n\\n    /**\\n     * @notice Sends a request for a random numbers to the 3rd-party service.\\n     * @dev Some services will complete the request immediately, others may have\\n     *      a time-delay.\\n     * @dev Some services require payment in the form of a token, such as $LINK\\n     *      for Chainlink VRF.\\n     * @dev The calling contract should \\\"lock\\\" all activity until the result is\\n     *      available via the `requestId`.\\n     * @param numWords An amount of random numbers to request\\n     * @return requestId The ID of the request used to get the results of the\\n     *                   RNG service\\n     * @return lockBlock The block number at which the RNG service will start\\n     *                   generating time-delayed randomness\\n     */\\n    function requestRandomNumbers(uint32 numWords) external returns (uint32 requestId, uint32 lockBlock);\\n\\n    /**\\n     * @notice Checks if the request for randomness from the 3rd-party service\\n     *         has completed.\\n     * @dev For time-delayed requests, this function is used to check/confirm\\n     *      completion.\\n     * @param requestId The ID of the request used to get the results of the RNG\\n     *                  service\\n     * @return isCompleted `true` if the request has completed and a random\\n     *                     number is available, `false` otherwise\\n     */\\n    function isRequestCompleted(uint32 requestId) external view returns (bool isCompleted);\\n\\n    /**\\n     * @notice Gets an array of random numbers produced by the 3rd-party service.\\n     * @param requestId The ID of the request used to get the results of the RNG\\n     *                  service\\n     * @return numbers An array of random numbers\\n     */\\n    function getRandomNumbers(uint32 requestId) external view returns (uint256[] memory numbers);\\n}\\n\"\r\n    },\r\n    \"contracts/rng-service/interfaces/IRNGServiceChainlinkV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"./IRNGService.sol\\\";\\n\\n/**\\n * @title RNG Chainlink V2 Interface\\n * @notice Provides an interface for requesting random numbers from Chainlink\\n *         VRF V2.\\n */\\ninterface IRNGServiceChainlinkV2 is IRNGService {\\n    /**\\n     * @notice Get Chainlink VRF keyHash associated with this contract.\\n     * @return bytes32 Chainlink VRF keyHash\\n     */\\n    function getKeyHash() external view returns (bytes32);\\n\\n    /**\\n     * @notice Get Chainlink VRF subscription ID associated with this contract.\\n     * @return uint64 Chainlink VRF subscription ID\\n     */\\n    function getSubscriptionId() external view returns (uint64);\\n\\n    /**\\n     * @notice Get Chainlink VRF coordinator contract address associated with\\n     *         this contract.\\n     * @return address Chainlink VRF coordinator address\\n     */\\n    function getVrfCoordinator() external view returns (VRFCoordinatorV2Interface);\\n\\n    /**\\n     * @notice Set Chainlink VRF keyHash.\\n     * @dev This function is only callable by the owner.\\n     * @param keyHash Chainlink VRF keyHash\\n     */\\n    function setKeyHash(bytes32 keyHash) external;\\n\\n    /**\\n     * @notice Set Chainlink VRF subscription ID associated with this contract.\\n     * @dev This function is only callable by the owner.\\n     * @param subscriptionId Chainlink VRF subscription ID\\n     */\\n    function setSubscriptionId(uint64 subscriptionId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/rng-service/RNGServiceChainlinkV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"./interfaces/IRNGServiceChainlinkV2.sol\\\";\\n\\nimport \\\"./chainlink/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"../owner-manager/Manageable.sol\\\";\\n\\ncontract RNGServiceChainlinkV2 is IRNGServiceChainlinkV2, VRFConsumerBaseV2, Manageable {\\n    /* ========== Global Variables ========== */\\n\\n    /// @dev Reference to the VRFCoordinatorV2 deployed contract\\n    VRFCoordinatorV2Interface internal vrfCoordinator;\\n\\n    /// @dev A counter for the number of requests made used for request IDs\\n    uint32 internal requestCounter;\\n\\n    /// @dev Chainlink VRF subscription ID\\n    uint64 internal subscriptionId;\\n\\n    /// @dev Hash of the public key used to verify the VRF proof\\n    bytes32 internal keyHash;\\n\\n    /// @dev A lists of random numbers from past requests mapped by internal\\n    ///      request ID\\n    mapping(uint32 => uint256[]) internal randomNumbers;\\n\\n    /// @dev A list of flags that indicates if internal request ID is completed\\n    ///      or not\\n    mapping(uint32 => bool) internal requestCompleted;\\n\\n    /// @dev A list of blocks to be locked at based on past requests mapped by\\n    ///      request ID\\n    mapping(uint32 => uint32) internal requestLockBlock;\\n\\n    /// @dev A mapping from Chainlink request IDs to internal request IDs\\n    mapping(uint256 => uint32) internal chainlinkRequestIds;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Emitted when the Chainlink VRF key hash is set\\n     * @param keyHash Chainlink VRF key hash\\n     */\\n    event KeyHashSet(bytes32 keyHash);\\n\\n    /**\\n     * @notice Emitted when the Chainlink VRF subscription ID is set\\n     * @param subscriptionId Chainlink VRF subscription ID\\n     */\\n    event SubscriptionIdSet(uint64 subscriptionId);\\n\\n    /**\\n     * @notice Emitted when the Chainlink VRF Coordinator address is set\\n     * @param vrfCoordinator Address of the VRF Coordinator\\n     */\\n    event VrfCoordinatorSet(VRFCoordinatorV2Interface indexed vrfCoordinator);\\n\\n    /* ============ Constructor ============ */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /* ============ Initialize ============ */\\n\\n    /**\\n     * @notice Constructs RNGServiceChainlinkV2 with passed parameters.\\n     * @param _owner Owner of the contract\\n     * @param _vrfCoordinator Address of the VRF Coordinator\\n     * @param _subscriptionId Chainlink VRF subscription ID\\n     * @param _keyHash Hash of the public key used to verify the VRF proof\\n     */\\n    function initialize(\\n        address _owner,\\n        VRFCoordinatorV2Interface _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash\\n    ) external virtual initializer {\\n        __RNGServiceChainlinkV2_init(_owner, _vrfCoordinator, _subscriptionId, _keyHash);\\n    }\\n\\n    /* ============== External ============== */\\n\\n    /// @inheritdoc IRNGService\\n    function requestRandomNumbers(\\n        uint32 numWords\\n    ) external override onlyManager returns (uint32 requestId, uint32 lockBlock) {\\n        (uint16 minRequestConfirmations, uint32 maxGasLimit, ) = vrfCoordinator.getRequestConfig();\\n        uint256 _vrfRequestId = vrfCoordinator.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            minRequestConfirmations,\\n            maxGasLimit,\\n            numWords\\n        );\\n\\n        ++requestCounter;\\n\\n        uint32 _requestCounter = requestCounter;\\n\\n        requestId = _requestCounter;\\n        lockBlock = uint32(block.number);\\n\\n        chainlinkRequestIds[_vrfRequestId] = _requestCounter;\\n        requestLockBlock[_requestCounter] = lockBlock;\\n\\n        emit RandomNumbersRequested(_requestCounter, _vrfRequestId, numWords, msg.sender);\\n    }\\n\\n    /// @inheritdoc IRNGService\\n    function isRequestCompleted(uint32 _internalRequestId) external view returns (bool isCompleted) {\\n        return requestCompleted[_internalRequestId];\\n    }\\n\\n    /// @inheritdoc IRNGService\\n    function getRandomNumbers(uint32 _internalRequestId) external view returns (uint256[] memory numbers) {\\n        return randomNumbers[_internalRequestId];\\n    }\\n\\n    /// @inheritdoc IRNGService\\n    function getLastRequestId() external view returns (uint32 requestId) {\\n        return requestCounter;\\n    }\\n\\n    /// @inheritdoc IRNGService\\n    function getRequestFee() external pure returns (address feeToken, uint256 requestFee) {\\n        return (address(0), 0);\\n    }\\n\\n    /// @inheritdoc IRNGServiceChainlinkV2\\n    function getKeyHash() external view returns (bytes32) {\\n        return keyHash;\\n    }\\n\\n    /// @inheritdoc IRNGServiceChainlinkV2\\n    function getSubscriptionId() external view returns (uint64) {\\n        return subscriptionId;\\n    }\\n\\n    /// @inheritdoc IRNGServiceChainlinkV2\\n    function getVrfCoordinator() external view returns (VRFCoordinatorV2Interface) {\\n        return vrfCoordinator;\\n    }\\n\\n    /// @inheritdoc IRNGServiceChainlinkV2\\n    function setSubscriptionId(uint64 _subscriptionId) external onlyOwner {\\n        _setSubscriptionId(_subscriptionId);\\n    }\\n\\n    /// @inheritdoc IRNGServiceChainlinkV2\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\n        _setKeyHash(_keyHash);\\n    }\\n\\n    /* ============== Internal ============== */\\n\\n    /**\\n     * @notice Callback function called by VRF Coordinator\\n     * @dev The VRF Coordinator will only call it once it has verified the proof\\n     *      associated with the randomness.\\n     * @param _vrfRequestId Chainlink VRF request ID\\n     * @param _randomWords Chainlink VRF array of random words (numbers)\\n     */\\n    function fulfillRandomWords(uint256 _vrfRequestId, uint256[] memory _randomWords) internal override {\\n        uint32 _internalRequestId = chainlinkRequestIds[_vrfRequestId];\\n\\n        require(_internalRequestId > 0, \\\"RNGServiceChainlinkV2/requestId-incorrect\\\");\\n\\n        randomNumbers[_internalRequestId] = _randomWords;\\n        requestCompleted[_internalRequestId] = true;\\n\\n        emit RandomNumbersCompleted(_internalRequestId, _randomWords);\\n    }\\n\\n    /**\\n     * @notice Set Chainlink VRF Coordinator contract address.\\n     * @param _vrfCoordinator Chainlink VRF Coordinator contract address\\n     */\\n    function _setVRFCoordinator(VRFCoordinatorV2Interface _vrfCoordinator) internal {\\n        require(address(_vrfCoordinator) != address(0), \\\"RNGServiceChainlinkV2/vrf-coordinator-not-zero-addr\\\");\\n\\n        vrfCoordinator = _vrfCoordinator;\\n\\n        emit VrfCoordinatorSet(_vrfCoordinator);\\n    }\\n\\n    /**\\n     * @notice Set Chainlink VRF subscription ID associated with this contract.\\n     * @param _subscriptionId Chainlink VRF subscription ID\\n     */\\n    function _setSubscriptionId(uint64 _subscriptionId) internal {\\n        require(_subscriptionId > 0, \\\"RNGServiceChainlinkV2/subscriptionId-gt-zero\\\");\\n\\n        subscriptionId = _subscriptionId;\\n\\n        emit SubscriptionIdSet(_subscriptionId);\\n    }\\n\\n    /**\\n     * @notice Set Chainlink VRF key hash.\\n     * @param _keyHash Chainlink VRF key hash\\n     */\\n    function _setKeyHash(bytes32 _keyHash) internal {\\n        require(_keyHash != bytes32(0), \\\"RNGServiceChainlinkV2/keyHash-not-empty\\\");\\n\\n        keyHash = _keyHash;\\n\\n        emit KeyHashSet(_keyHash);\\n    }\\n\\n    /**\\n     * @notice Constructs RNGServiceChainlinkV2 with passed parameters.\\n     * @param _owner Owner of the contract\\n     * @param _vrfCoordinator Address of the VRF Coordinator\\n     * @param _subscriptionId Chainlink VRF subscription ID\\n     * @param _keyHash Hash of the public key used to verify the VRF proof\\n     */\\n    function __RNGServiceChainlinkV2_init(\\n        address _owner,\\n        VRFCoordinatorV2Interface _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash\\n    ) internal onlyInitializing {\\n        __Manageable_init_unchained(_owner);\\n        __VRFConsumerBaseV2_init_unchained(address(_vrfCoordinator));\\n        __RNGServiceChainlinkV2_init_unchained(_vrfCoordinator, _subscriptionId, _keyHash);\\n    }\\n\\n    /**\\n     * @notice Unchained initialization of RNGServiceChainlinkV2 contract.\\n     * @param _vrfCoordinator Address of the VRF Coordinator\\n     * @param _subscriptionId Chainlink VRF subscription ID\\n     * @param _keyHash Hash of the public key used to verify the VRF proof\\n     */\\n    function __RNGServiceChainlinkV2_init_unchained(\\n        VRFCoordinatorV2Interface _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash\\n    ) internal onlyInitializing {\\n        _setVRFCoordinator(_vrfCoordinator);\\n        _setSubscriptionId(_subscriptionId);\\n        _setKeyHash(_keyHash);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"KeyHashSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomNumbers\",\"type\":\"uint256[]\"}],\"name\":\"RandomNumbersCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vrfRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomNumbersRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"SubscriptionIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"VrfCoordinatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRequestId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_internalRequestId\",\"type\":\"uint32\"}],\"name\":\"getRandomNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_internalRequestId\",\"type\":\"uint32\"}],\"name\":\"isRequestCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomNumbers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RNGServiceChainlinkV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}