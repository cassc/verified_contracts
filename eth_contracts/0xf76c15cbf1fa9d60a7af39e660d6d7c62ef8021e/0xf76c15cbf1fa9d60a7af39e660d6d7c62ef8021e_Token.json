{"SourceCode": "// SPDX-License-Identifier: MIT\r\n    \r\n    /**\r\n        Wagyu Protocol\r\n    \r\n        Website: wagyuprotocol.io/\r\n        Twitter: twitter.com/ProtocolWagyu\r\n        Telegram: t.me/wagyuprotocol\r\n        Bot: t.me/thewagyubot\r\n    **/\r\n    \r\n    pragma solidity ^0.8.22;\r\n    \r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n    \r\n        function _msgData() internal view virtual returns (bytes calldata) {\r\n            return msg.data;\r\n        }\r\n    }\r\n    \r\n    interface IERC20 {\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address to, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n    \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n    \r\n    interface IERC20Metadata is IERC20 {\r\n        function name() external view returns (string memory);\r\n        function symbol() external view returns (string memory);\r\n        function decimals() external view returns (uint8);\r\n    }\r\n    \r\n    contract ERC20 is Context, IERC20, IERC20Metadata {\r\n        mapping(address => uint256) private _balances;\r\n        mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n        uint256 private _totalSupply;\r\n    \r\n        string private _name;\r\n        string private _symbol;\r\n    \r\n        constructor(string memory name_, string memory symbol_) {\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n        }\r\n    \r\n        function name() public view virtual override returns (string memory) {\r\n            return _name;\r\n        }\r\n    \r\n        function symbol() public view virtual override returns (string memory) {\r\n            return _symbol;\r\n        }\r\n    \r\n        function decimals() public view virtual override returns (uint8) {\r\n            return 18;\r\n        }\r\n    \r\n        function totalSupply() public view virtual override returns (uint256) {\r\n            return _totalSupply;\r\n        }\r\n    \r\n        function balanceOf(address account) public view virtual override returns (uint256) {\r\n            return _balances[account];\r\n        }\r\n    \r\n        function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n            address owner = _msgSender();\r\n            _transfer(owner, to, amount);\r\n            return true;\r\n        }\r\n    \r\n        function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n    \r\n        function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n            address owner = _msgSender();\r\n            _approve(owner, spender, amount);\r\n            return true;\r\n        }\r\n    \r\n        function transferFrom(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) public virtual override returns (bool) {\r\n            address spender = _msgSender();\r\n            _spendAllowance(from, spender, amount);\r\n            _transfer(from, to, amount);\r\n            return true;\r\n        }\r\n    \r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n            address owner = _msgSender();\r\n            _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n            return true;\r\n        }\r\n    \r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n            address owner = _msgSender();\r\n            uint256 currentAllowance = _allowances[owner][spender];\r\n            require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - subtractedValue);\r\n            }\r\n    \r\n            return true;\r\n        }\r\n    \r\n        function _transfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(from != address(0), \"ERC20: transfer from the zero address\");\r\n            require(to != address(0), \"ERC20: transfer to the zero address\");\r\n    \r\n            _beforeTokenTransfer(from, to, amount);\r\n    \r\n            uint256 fromBalance = _balances[from];\r\n            require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            unchecked {\r\n                _balances[from] = fromBalance - amount;\r\n            }\r\n            _balances[to] += amount;\r\n    \r\n            emit Transfer(from, to, amount);\r\n    \r\n            _afterTokenTransfer(from, to, amount);\r\n        }\r\n    \r\n        function _mint(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: mint to the zero address\");\r\n    \r\n            _beforeTokenTransfer(address(0), account, amount);\r\n    \r\n            _totalSupply += amount;\r\n            _balances[account] += amount;\r\n            emit Transfer(address(0), account, amount);\r\n    \r\n            _afterTokenTransfer(address(0), account, amount);\r\n        }\r\n    \r\n        function _burn(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n    \r\n            _beforeTokenTransfer(account, address(0), amount);\r\n    \r\n            uint256 accountBalance = _balances[account];\r\n            require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[account] = accountBalance - amount;\r\n            }\r\n            _totalSupply -= amount;\r\n    \r\n            emit Transfer(account, address(0), amount);\r\n    \r\n            _afterTokenTransfer(account, address(0), amount);\r\n        }\r\n    \r\n        function _approve(\r\n            address owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    \r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n    \r\n        function _spendAllowance(\r\n            address owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            uint256 currentAllowance = allowance(owner, spender);\r\n            if (currentAllowance != type(uint256).max) {\r\n                require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n                unchecked {\r\n                    _approve(owner, spender, currentAllowance - amount);\r\n                }\r\n            }\r\n        }\r\n    \r\n        function _beforeTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n    \r\n        function _afterTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n    }\r\n    \r\n    abstract contract Ownable is Context {\r\n        address private _owner;\r\n    \r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n        constructor() {\r\n            _transferOwnership(_msgSender());\r\n        }\r\n    \r\n        function owner() public view virtual returns (address) {\r\n            return _owner;\r\n        }\r\n    \r\n        modifier onlyOwner() {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n    \r\n        function renounceOwnership() public virtual onlyOwner {\r\n            _transferOwnership(address(0));\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            _transferOwnership(newOwner);\r\n        }\r\n    \r\n        function _transferOwnership(address newOwner) internal virtual {\r\n            address oldOwner = _owner;\r\n            _owner = newOwner;\r\n            emit OwnershipTransferred(oldOwner, newOwner);\r\n        }\r\n    }\r\n    \r\n    library SafeMath {\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a + b;\r\n        }\r\n    \r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a - b;\r\n        }\r\n    \r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a * b;\r\n        }\r\n    \r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a / b;\r\n        }\r\n    \r\n        function sub(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b <= a, errorMessage);\r\n                return a - b;\r\n            }\r\n        }\r\n    \r\n        function div(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a / b;\r\n            }\r\n        }\r\n    }\r\n    \r\n    interface IUniswapV2Factory {\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    }\r\n    \r\n    interface IUniswapV2Router02 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n            function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n    \r\n    contract Token is ERC20, Ownable {\r\n        using SafeMath for uint256;\r\n    \r\n        IUniswapV2Router02 private constant _router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    \r\n        address public uniV2Pair;\r\n        address public immutable teamAddr;\r\n        address public immutable revshareAddr;\r\n    \r\n        uint256 public maxHoldings;\r\n        uint256 public feeThreshold;\r\n    \r\n        uint256 public buyFee;\r\n        uint256 public sellFee;\r\n    \r\n        bool private _inSwap;\r\n        mapping (address => bool) private _isExcludedFromLimits;\r\n    \r\n        event RevFee(uint256 indexed value);\r\n    \r\n        constructor() ERC20(\"Wagyu\", \"WAGYU\") payable {\r\n            uint256 totalSupply = 10000000 * 1e18;\r\n            uint256 lpSupply = totalSupply.mul(20).div(100);\r\n    \r\n            maxHoldings = totalSupply.mul(25).div(10000);\r\n            feeThreshold = totalSupply.mul(5).div(1000);\r\n    \r\n            teamAddr = 0x2d8991553C4F89F3D4830EcAD6234B352ef35223;\r\n            revshareAddr = 0x0024B0ACaE52C8FB8C080DeF6D71FEbFB3602bdD;\r\n    \r\n            buyFee = 30;\r\n            sellFee = 30;\r\n    \r\n            _isExcludedFromLimits[teamAddr] = true;\r\n            _isExcludedFromLimits[revshareAddr] = true;\r\n            _isExcludedFromLimits[msg.sender] = true;\r\n            _isExcludedFromLimits[tx.origin] = true;\r\n            _isExcludedFromLimits[address(this)] = true;\r\n            _isExcludedFromLimits[address(0xdead)] = true;\r\n    \r\n            _mint(tx.origin, totalSupply.sub(lpSupply));\r\n            _mint(msg.sender, lpSupply);\r\n        }\r\n    \r\n        function _transfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal override {\r\n            require(from != address(0), \"Transfer from the zero address not allowed.\");\r\n            require(to != address(0), \"Transfer to the zero address not allowed.\");\r\n            require(amount > 0, 'Transfer amount must be greater than zero.');\r\n    \r\n            bool excluded = _isExcludedFromLimits[from] || _isExcludedFromLimits[to];\r\n            require(uniV2Pair != address(0) || excluded, \"Liquidity pair not yet created.\");\r\n    \r\n            bool isSell = to == uniV2Pair;\r\n            bool isBuy = from == uniV2Pair;\r\n    \r\n            if (!isSell && maxHoldings > 0 && !excluded)\r\n                require(balanceOf(to) + amount <= maxHoldings, \"Balance exceeds max holdings amount, consider using a second wallet.\");\r\n    \r\n            if (\r\n                balanceOf(address(this)) >= feeThreshold &&\r\n                !_inSwap &&\r\n                isSell &&\r\n                !excluded\r\n            ) {\r\n                _inSwap = true;\r\n                swapFees();\r\n                _inSwap = false;\r\n            }\r\n    \r\n            uint256 fee = isBuy ? buyFee : sellFee;\r\n    \r\n            if (fee > 0) {\r\n                if (!excluded && !_inSwap && (isBuy || isSell)) {\r\n                    uint256 fees = amount.mul(fee).div(100);\r\n    \r\n                    if (fees > 0)\r\n                        super._transfer(from, address(this), fees);\r\n    \r\n                    amount = amount.sub(fees);\r\n                }\r\n            }\r\n    \r\n            super._transfer(from, to, amount);\r\n        }\r\n    \r\n        function swapFees() public {\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            if (contractBalance == 0) return;\r\n            if (contractBalance > feeThreshold) contractBalance = feeThreshold;\r\n    \r\n            uint256 initETHBal = address(this).balance;\r\n    \r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _router.WETH();\r\n    \r\n            _approve(address(this), address(_router), contractBalance);\r\n    \r\n            _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractBalance,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n    \r\n            uint256 ethFee = address(this).balance.sub(initETHBal);\r\n            uint256 revFee = ethFee.mul(20).div(100);\r\n    \r\n            ethFee = ethFee.sub(revFee);\r\n            payable(teamAddr).transfer(ethFee);\r\n            payable(revshareAddr).transfer(revFee);\r\n    \r\n            emit RevFee(revFee);\r\n        }\r\n    \r\n        function feedWagyu() external onlyOwner {\r\n            require(uniV2Pair == address(0), \"The pair has already been created.\");\r\n            uniV2Pair = IUniswapV2Factory(_router.factory()).getPair(address(this), _router.WETH());\r\n        }\r\n    \r\n        function updateFeeThreshold(uint256 newThreshold) external onlyOwner {\r\n            require(newThreshold >= totalSupply().mul(1).div(100000), \"Swap threshold cannot be lower than 0.001% total supply.\");\r\n            require(newThreshold <= totalSupply().mul(2).div(100), \"Swap threshold cannot be higher than 2% total supply.\");\r\n            feeThreshold = newThreshold;\r\n        }\r\n    \r\n        function updateFees(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\r\n            require(newBuyFee <= 5 && newSellFee <= 5, 'Attempting to set fee higher than initial fee.'); // smaller than or equal to initial fee\r\n            buyFee = newBuyFee;\r\n            sellFee = newSellFee;\r\n        }\r\n    \r\n        function removeHoldingLimit() external onlyOwner {\r\n            maxHoldings = 0;\r\n        }\r\n    \r\n        function removeStuckETH() external onlyOwner {\r\n            payable(teamAddr).transfer(address(this).balance);\r\n        }\r\n    \r\n        function removeStuckERC20(IERC20 token) external onlyOwner {\r\n            token.transfer(teamAddr, token.balanceOf(address(this)));\r\n        }\r\n    \r\n        receive() external payable {}\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedWagyu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revshareAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"updateFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://664128d2e232c13516e9aacd1e4452763fd9f029f91a81efe05d861fbaa780bf"}