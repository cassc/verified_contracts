{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AIOracleCallbackReceiver.sol\": {\r\n      \"content\": \"// SampleContract.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IAIOracle.sol\\\";\\n\\n/// @notice A base contract for writing a AIOracle app\\nabstract contract AIOracleCallbackReceiver {\\n\\n    // Address of the AIOracle contract\\n    IAIOracle public immutable aiOracle;\\n\\n    // Invalid callback source error\\n    error UnauthorizedCallbackSource(IAIOracle expected, IAIOracle found);\\n\\n    /// @notice Initialize the contract, binding it to a specified AIOracle contract\\n    constructor(IAIOracle _aiOracle) {\\n        aiOracle = _aiOracle;\\n    }\\n\\n    /// @notice Verify this is a callback by the aiOracle contract \\n    modifier onlyAIOracleCallback() {\\n        IAIOracle foundRelayAddress = IAIOracle(msg.sender);\\n        if (foundRelayAddress != aiOracle) {\\n            revert UnauthorizedCallbackSource(aiOracle, foundRelayAddress);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev the callback function in OAO, should add the modifier onlyAIOracleCallback!\\n     * @param requestId Id for the request in OAO (unique per request)\\n     * @param output AI model's output\\n     * @param callbackData user-defined data (The same as when the user call aiOracle.requestCallback)\\n     */\\n    function aiOracleCallback(uint256 requestId, bytes calldata output, bytes calldata callbackData) external virtual;\\n\\n    function isFinalized(uint256 requestId) external view returns (bool) {\\n        return aiOracle.isFinalized(requestId);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAIOracle.sol\": {\r\n      \"content\": \"// SampleContract.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAIOracle {\\n    /// @notice Event emitted upon receiving a callback request through requestCallback.\\n    event AICallbackRequest(\\n        address indexed account,\\n        uint256 indexed requestId,\\n        uint256 modelId,\\n        bytes input,\\n        address callbackContract,\\n        uint64 gasLimit,\\n        bytes callbackData\\n    );\\n\\n    /// @notice Event emitted when the result is uploaded or update.\\n    event AICallbackResult(\\n        address indexed account,\\n        uint256 indexed requestId,\\n        address invoker,\\n        bytes output\\n    );\\n\\n    /**\\n     * initiate a request in OAO\\n     * @param modelId ID for AI model\\n     * @param input input for AI model\\n     * @param callbackContract address of callback contract\\n     * @param gasLimit gas limitation of calling the callback function\\n     * @param callbackData optional, user-defined data, will send back to the callback function\\n     * @return requestID\\n     */\\n    function requestCallback(\\n        uint256 modelId,\\n        bytes memory input,\\n        address callbackContract,\\n        uint64 gasLimit,\\n        bytes memory callbackData\\n    ) external payable returns (uint256);\\n\\n    function estimateFee(uint256 modelId, uint256 gasLimit) external view returns (uint256);\\n\\n    function isFinalized(uint256 requestId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/SimplePrompt.sol\": {\r\n      \"content\": \"// SampleContract.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IAIOracle.sol\\\";\\nimport \\\"./AIOracleCallbackReceiver.sol\\\";\\n\\n// this contract is for ai.ora.io website\\ncontract SimplePrompt is AIOracleCallbackReceiver {\\n\\n    event promptsUpdated(\\n        uint256 requestId,\\n        string output,\\n        bytes callbackData\\n    );\\n\\n    event promptRequest(\\n        uint256 requestId,\\n        address sender, \\n        uint256 modelId,\\n        string prompt\\n    );\\n\\n    struct AIOracleRequest {\\n        address sender;\\n        uint256 modelId;\\n        bytes input;\\n        bytes output;\\n    }\\n\\n    address immutable owner;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    // requestId => AIOracleRequest\\n    mapping(uint256 => AIOracleRequest) public requests;\\n\\n    // modelId => callback gasLimit\\n    mapping(uint256 => uint64) public callbackGasLimit;\\n\\n    /// @notice Initialize the contract, binding it to a specified AIOracle.\\n    constructor(IAIOracle _aiOracle) AIOracleCallbackReceiver(_aiOracle) {\\n        owner = msg.sender;\\n        callbackGasLimit[50] = 200_000; // SD 500k\\n        callbackGasLimit[11] = 1_500_000; // llama\\n        callbackGasLimit[9] = 1_500_000; // grok\\n    }\\n\\n    function setCallbackGasLimit(uint256 modelId, uint64 gasLimit) external onlyOwner {\\n        callbackGasLimit[modelId] = gasLimit;\\n    }\\n\\n    // the callback function, only the AI Oracle can call this function\\n    function aiOracleCallback(uint256 requestId, bytes calldata output, bytes calldata callbackData) external override onlyAIOracleCallback() {\\n        emit promptsUpdated(requestId, string(output), callbackData);\\n    }\\n\\n    function estimateFee(uint256 modelId) public view returns (uint256) {\\n        return aiOracle.estimateFee(modelId, callbackGasLimit[modelId]);\\n    }\\n\\n    function calculateAIResult(uint256 modelId, string calldata prompt) payable external {\\n        bytes memory input = bytes(prompt);\\n        // we do not need to set the callbackData in this example\\n        uint256 requestId = aiOracle.requestCallback{value: msg.value}(\\n            modelId, input, address(this), callbackGasLimit[modelId], \\\"\\\"\\n        );\\n        emit promptRequest(requestId, msg.sender, modelId, prompt);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAIOracle\",\"name\":\"_aiOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IAIOracle\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"contract IAIOracle\",\"name\":\"found\",\"type\":\"address\"}],\"name\":\"UnauthorizedCallbackSource\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modelId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"}],\"name\":\"promptRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"promptsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aiOracle\",\"outputs\":[{\"internalType\":\"contract IAIOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"aiOracleCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modelId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"}],\"name\":\"calculateAIResult\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modelId\",\"type\":\"uint256\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modelId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modelId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"setCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimplePrompt", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000a0f4321214bb6c7811dd8a71cf587bdaf03f0a0", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}