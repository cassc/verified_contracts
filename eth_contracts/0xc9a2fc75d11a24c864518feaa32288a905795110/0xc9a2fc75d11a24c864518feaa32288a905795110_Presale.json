{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { Withdrawable } from \\\"delegatecall/Withdrawable.sol\\\";\\n\\nimport { Errors } from \\\"src/libraries/Errors.sol\\\";\\nimport { MathHelper } from \\\"src/libraries/MathHelper.sol\\\";\\nimport { ERC20Helper } from \\\"src/libraries/ERC20Helper.sol\\\";\\nimport { Round, RoundState } from \\\"src/types/Round.sol\\\";\\nimport { Configuration } from \\\"src/types/Configuration.sol\\\";\\nimport { Fees } from \\\"src/types/Fees.sol\\\";\\nimport { IMembership } from \\\"src/types/IMembership.sol\\\";\\nimport { IVest } from \\\"src/types/IVest.sol\\\";\\nimport { IPresale } from \\\"src/types/IPresale.sol\\\";\\n\\n/**\\n * @title Presale\\n * @author\\n * @notice\\n */\\ncontract Presale is IPresale, Context, Withdrawable, Initializable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    //-------------------------------------------------------------------------\\n    // Constants & Immutables\\n\\n    uint256 internal constant ROUND_LOCK_PERIOD = 1 hours;\\n    uint256 internal constant TGE_LISTING_DIFFERENCE = 5 days;\\n\\n    /// @notice ERC20 implementation of the token sold.\\n    IERC20 public tokenA;\\n\\n    /// @notice ERC20 implementation of the token collected.\\n    IERC20 public tokenB;\\n\\n    /// @notice Address of the manager.\\n    address public manager;\\n\\n    /// @notice An address of a parent Vest smart contract\\n    IVest public parentVest;\\n\\n    /// @notice Address of the beneficiary.\\n    address public beneficiary;\\n\\n    IMembership public membership;\\n\\n    /// @notice How much time in seconds since `listingTimestamp` do Users have to claimback TokenA\\n    uint256 public claimbackPeriod;\\n\\n    /// @notice Fees applicable to this presale\\n    Fees internal fees;\\n\\n    //-------------------------------------------------------------------------\\n    // Storage\\n\\n    /// @notice Amount of tokens available to distribution during the vesting.\\n    uint256 public liquidityA;\\n\\n    /// @notice Amount of tokens collected during the sale.\\n    uint256 public liquidityB;\\n\\n    /// @notice Amount of tokens collected during the sale that are available to withdraw.\\n    uint256 public nonClaimableBackTokenB;\\n\\n    /// @notice Timestamp indicating when the tge should be available.\\n    uint256 public listingTimestamp;\\n\\n    /// @notice Indicates whether the account participated in the sale state of given round.\\n    mapping(uint256 roundId => mapping(address => bool)) public roundParticipants;\\n\\n    /// @notice Incremental value for indexing rounds.\\n    uint256 internal roundSerialId;\\n\\n    /// @notice List of rounds ids.\\n    EnumerableSet.UintSet internal roundsIds;\\n\\n    /// @notice Collection of the rounds.\\n    mapping(uint256 roundId => Round) internal rounds;\\n\\n    /// @notice Ensures that the account is eligible for withdrawal.\\n    modifier protectedWithdrawal() override {\\n        if (_msgSender() != manager) revert Errors.Unauthorized(_msgSender());\\n        _;\\n    }\\n\\n    /// @notice Ensure the sender is the manager.\\n    /// @param account Address of the sender.\\n    modifier onlyManager(address account) {\\n        if (account != manager) revert Errors.Unauthorized(account);\\n        _;\\n    }\\n\\n    /// @notice Ensure the sender is the beneficiary.\\n    /// @param account Address of the sender.\\n    modifier onlyBeneficiary(address account) {\\n        if (account != beneficiary) revert Errors.Unauthorized(account);\\n        _;\\n    }\\n\\n    /// @notice Ensure the sender is the owner of the membership.\\n    /// @param membershipId Id of the membership.\\n    modifier onlyMember(uint256 membershipId) {\\n        if (membership.ownerOf(membershipId) != _msgSender()) revert Errors.AccountMismatch(_msgSender());\\n        _;\\n    }\\n\\n    /// @notice Ensures that the selected round has given state.\\n    /// @param roundId Id of the round.\\n    /// @param expected Expected state of the round.\\n    modifier onlyRoundInState(uint256 roundId, RoundState expected) {\\n        RoundState current = getRoundState(roundId);\\n\\n        if (current != expected) revert RoundStateMismatch(roundId, current, expected);\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract state initialization.\\n    /// @param configuration Configuration of the presale.\\n    /// @param rounds_ Rounds of the presale.\\n    /// @param fees_ Fees applicable to this presale\\n    function initialize(Configuration memory configuration, Round[] memory rounds_, Fees memory fees_)\\n        public\\n        initializer\\n    {\\n        address deployer = _msgSender();\\n        /// @dev This contract is only allowed to be deployed by the Vest contract since we rely on fees validation and an address for fee collector\\n        if (!ERC165Checker.supportsInterface(deployer, type(IVest).interfaceId)) {\\n            revert InvalidDeployer();\\n        }\\n        if (address(configuration.tokenB) == address(0)) revert Errors.UnacceptableReference();\\n        if (address(configuration.tokenA) == address(0)) revert Errors.UnacceptableReference();\\n        if (address(configuration.manager) == address(0)) revert Errors.UnacceptableReference();\\n        if (address(configuration.beneficiary) == address(0)) revert Errors.UnacceptableReference();\\n        if (address(configuration.membership.factory) == address(0)) revert Errors.UnacceptableReference();\\n\\n        parentVest = IVest(deployer);\\n\\n        /// @dev not emitting an event since fees can\u2019t change after being set in a constructor\\n        fees = fees_;\\n\\n        tokenB = configuration.tokenB;\\n        tokenA = configuration.tokenA;\\n\\n        manager = configuration.manager;\\n        beneficiary = configuration.beneficiary;\\n\\n        listingTimestamp = configuration.listingTimestamp;\\n        claimbackPeriod = configuration.claimbackPeriod;\\n\\n        membership = IMembership(configuration.membership.factory);\\n        membership.initialize(address(this), configuration.membership.metadata, configuration.membership.descriptor);\\n\\n        uint256 size = rounds_.length;\\n        for (uint256 i = 0; i < size; i++) {\\n            _addRound(rounds_[i]);\\n        }\\n\\n        emit ListingTimestampUpdated(listingTimestamp);\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Domain\\n\\n    function claim(uint256 membershipId) external onlyMember(membershipId) returns (uint256) {\\n        uint256 tgeTimestamp = getTgeTimestamp();\\n\\n        IMembership.Usage memory usage = membership.getUsage(membershipId);\\n\\n        // when is the first claim\\n        if (usage.current == 0) {\\n            uint256 timestamp = block.timestamp;\\n\\n            // must be after tgeTimestamp\\n            if (tgeTimestamp == 0 || timestamp < tgeTimestamp) revert ClaimNotAllowed(membershipId);\\n\\n            IMembership.Attributes memory attributes = membership.getAttributes(membershipId);\\n\\n            if (attributes.price > 0 && timestamp < listingTimestamp + claimbackPeriod) {\\n                uint256 denominator = 10 ** ERC20Helper.decimals(tokenA);\\n\\n                /// @dev overflow not possible because `nonClaimableBackTokenB` always less than tokenB total supply.\\n                unchecked {\\n                    nonClaimableBackTokenB += usage.max * attributes.price / denominator;\\n                }\\n            }\\n        }\\n\\n        uint256 unlocked = membership.unlocked(tgeTimestamp, usage.max, membership.getAttributes(membershipId));\\n        uint256 releasable = unlocked - usage.current;\\n\\n        if (releasable == 0) revert ClaimNotAllowed(membershipId);\\n\\n        uint256 newId = membership.consume(membershipId, releasable);\\n\\n        ERC20Helper.transfer(tokenA, _msgSender(), releasable);\\n\\n        emit Claimed(membershipId, releasable);\\n\\n        return newId;\\n    }\\n\\n    /// @notice Transfers `tokenB` tokens and creates the membership.\\n    /// @param roundId Id of the round.\\n    /// @param amountA amount of token A to buy\\n    /// @param attributes The membership attributes.\\n    /// @param proof Merkle tree proof.\\n    function buy(uint256 roundId, uint256 amountA, IMembership.Attributes memory attributes, bytes32[] calldata proof)\\n        external\\n        onlyRoundInState(roundId, RoundState.SALE)\\n        returns (uint256)\\n    {\\n        address sender = _msgSender();\\n\\n        if (amountA == 0) revert Errors.UnacceptableValue();\\n        if (amountA > attributes.allocation) revert Errors.UnacceptableValue();\\n        if (attributes.tgeDenominator == 0) revert Errors.DenominatorZero();\\n        if (attributes.cliffDenominator == 0) revert Errors.DenominatorZero();\\n        if (attributes.cliffNumerator > 0 && attributes.cliffDuration == 0) revert CliffWithImmediateUnlock();\\n        if (attributes.vestingPeriodCount > 0 && attributes.vestingPeriodDuration == 0) {\\n            revert VestingWithImmediateUnlock();\\n        }\\n        if (attributes.vestingPeriodCount == 1) revert CliffLikeVesting();\\n        if (attributes.tgeNumerator == 0 && attributes.cliffDuration == 0 && attributes.vestingPeriodCount == 0) {\\n            revert VestingWithoutUnlocks();\\n        }\\n        if (attributes.vestingPeriodCount == 0 && attributes.cliffNumerator > 0) {\\n            revert CliffHeightWithoutSubsequentUnlocks();\\n        }\\n        if (\\n            attributes.cliffDuration == 0 && attributes.vestingPeriodCount == 0\\n                && attributes.tgeNumerator != attributes.tgeDenominator\\n        ) revert VestingSize();\\n        if (attributes.tgeNumerator > attributes.tgeDenominator) revert VestingSize();\\n        if (attributes.cliffNumerator > attributes.cliffDenominator) revert VestingSize();\\n        if (attributes.tgeNumerator > 0 && attributes.cliffNumerator > 0) {\\n            uint256 commonDenominator = attributes.tgeDenominator * attributes.cliffDenominator;\\n            uint256 totalUnlocks = attributes.tgeNumerator * attributes.cliffDenominator\\n                + attributes.cliffNumerator * attributes.tgeDenominator;\\n            if (totalUnlocks > commonDenominator) revert VestingSize();\\n        }\\n\\n        bool authorized = _canParticipateInSale(roundId, sender, attributes, proof);\\n\\n        if (!authorized) revert Errors.AccountMismatch(sender);\\n\\n        roundParticipants[roundId][sender] = true;\\n\\n        uint256 boughtA = _buy(0, attributes.allocation, attributes.price, amountA);\\n        return membership.mint(sender, roundId, 0, boughtA, attributes);\\n    }\\n\\n    /// @notice Transfers `tokenB` tokens and updates usage of the given membership.\\n    /// @param membershipId Id of the membership.\\n    /// @param amountA Amount of tokens to extend the membership.\\n    function extend(uint256 membershipId, uint256 amountA)\\n        external\\n        onlyRoundInState(membership.getRoundId(membershipId), RoundState.SALE)\\n        onlyMember(membershipId)\\n        returns (uint256)\\n    {\\n        IMembership.Usage memory usage = membership.getUsage(membershipId);\\n        IMembership.Attributes memory attributes = membership.getAttributes(membershipId);\\n\\n        uint256 released = _buy(usage.max, attributes.allocation, attributes.price, amountA);\\n\\n        if (attributes.price > 0 && usage.current > 0) {\\n            uint256 denominator = 10 ** ERC20Helper.decimals(tokenA);\\n\\n            /// @dev overflow not possible because `nonClaimableBackTokenB` always less than tokenB total supply.\\n            unchecked {\\n                nonClaimableBackTokenB += amountA * attributes.price / denominator;\\n            }\\n        }\\n\\n        return membership.extend(membershipId, released);\\n    }\\n\\n    /**\\n     * @notice Claimback `tokenB` tokens to the membership owner and adds `tokenA` tokens back to the `liquidityA`.\\n     * @param membershipId Id of the membership.\\n     * @param amountA Amount of `tokenA` tokens to claimback.\\n     *\\n     * Requirements:\\n     * - the caller must have a membership\\n     * - the membership must have an ability to claimback (`availableA` > 0)\\n     * - when the `listingTimestamp` is different from zero => the current timestamp\\n     *   must be earlier than the sum of `listingTimestamp` and `claimbackPeriod`\\n     */\\n    function claimback(uint256 membershipId, uint256 amountA)\\n        external\\n        onlyMember(membershipId)\\n        returns (uint256 newPublicId)\\n    {\\n        if (amountA == 0) revert ClaimbackNotAllowed(membershipId);\\n\\n        // must be within claimback period\\n        if (listingTimestamp != 0 && block.timestamp >= listingTimestamp + claimbackPeriod) {\\n            revert ClaimbackNotAllowed(membershipId);\\n        }\\n\\n        IMembership.Usage memory usage = membership.getUsage(membershipId);\\n\\n        if (usage.current > 0) revert ClaimbackNotAllowed(membershipId);\\n\\n        uint256 claimableBackA = MathHelper.min(amountA, usage.max);\\n\\n        // Calculates the number of `tokenB` tokens to be claimbacked to the membership owner.\\n        IMembership.Attributes memory attributes = membership.getAttributes(membershipId);\\n        uint256 denominatorA = 10 ** ERC20Helper.decimals(tokenA);\\n        uint256 claimableBackB = claimableBackA * attributes.price / denominatorA;\\n\\n        if (claimableBackB == 0) revert ClaimbackNotAllowed(membershipId);\\n\\n        unchecked {\\n            liquidityA += claimableBackA;\\n            liquidityB -= claimableBackB;\\n        }\\n\\n        newPublicId = membership.reduce(membershipId, claimableBackA);\\n        ERC20Helper.transfer(tokenB, _msgSender(), claimableBackB);\\n\\n        emit Claimbacked(membershipId, claimableBackA);\\n    }\\n\\n    /// @notice Beneficiary can update listing timestamp.\\n    /// @param listingTimestamp_ new listing timestamp.\\n    function updateListingTimestamp(uint256 listingTimestamp_) external onlyBeneficiary(_msgSender()) {\\n        // The value cannot be in the past.\\n        if (listingTimestamp_ < block.timestamp) revert Errors.UnacceptableValue();\\n\\n        // Cannot set listing timestamp if tge has already passed.\\n        if (listingTimestamp != 0 && getTgeTimestamp() <= block.timestamp) revert Errors.UnacceptableValue();\\n\\n        listingTimestamp = listingTimestamp_;\\n\\n        emit ListingTimestampUpdated(listingTimestamp_);\\n    }\\n\\n    /// @notice Deposits the `tokenA`.\\n    /// @param amountA Amount of the tokens to deposit.\\n    function depositTokenA(uint256 amountA) external {\\n        uint256 deposited = ERC20Helper.transferFrom(tokenA, _msgSender(), address(this), amountA);\\n\\n        if (deposited != amountA) revert TokenWithTransferFees(address(tokenA));\\n\\n        /// @dev overflow is not possible because transferred amount cannot be higher than token supply.\\n        unchecked {\\n            liquidityA += deposited;\\n        }\\n\\n        emit DepositedA(deposited);\\n    }\\n\\n    /// @inheritdoc Withdrawable\\n    function withdrawToken(address to, IERC20 token, uint256 amount)\\n        public\\n        override(IPresale, Withdrawable)\\n        protectedWithdrawal\\n    {\\n        if (address(token) == address(tokenA) || address(token) == address(tokenB)) {\\n            revert Errors.UnacceptableReference();\\n        }\\n\\n        super.withdrawToken(to, token, amount);\\n    }\\n\\n    /// @notice Beneficiary can withdraw `tokenA` at any time.\\n    /// @param amount amount of `tokenA` to withdraw.\\n    function withdrawTokenA(uint256 amount) external onlyBeneficiary(_msgSender()) {\\n        if (amount > liquidityA) revert Errors.UnacceptableValue();\\n\\n        /// @dev underflow not possible because we checked before that `amount` < `liquidityA`\\n        unchecked {\\n            liquidityA -= amount;\\n        }\\n\\n        ERC20Helper.transfer(tokenA, beneficiary, amount);\\n\\n        emit WithdrawnA(amount);\\n    }\\n\\n    /// @notice Withdraws the `tokenB` tokens to the beneficiary.\\n    function withdrawTokenB() external {\\n        if (listingTimestamp == 0) revert UnacceptableListingTimestamp();\\n\\n        uint256 withdrawable = nonClaimableBackTokenB;\\n\\n        /// @notice if claimback timestamp in past beneficiary can get all liquidity.\\n        if (block.timestamp > listingTimestamp + claimbackPeriod) {\\n            withdrawable = liquidityB;\\n        }\\n\\n        if (withdrawable == 0) revert Errors.UnacceptableValue();\\n\\n        nonClaimableBackTokenB = 0;\\n        unchecked {\\n            liquidityB -= withdrawable;\\n        }\\n\\n        uint256 fee;\\n        Fees memory fees_ = fees;\\n        if (fees_.tokenBFeeNumerator != 0 && fees_.tokenBFeeDenominator != 0) {\\n            /// @dev over/underflow not possible here because fee always will be less than `withdrawable` such as percent of fee cannot be higher or equal than 100.\\n            unchecked {\\n                fee = (withdrawable * fees_.tokenBFeeNumerator) / fees_.tokenBFeeDenominator;\\n            }\\n\\n            if (fee > 0) {\\n                unchecked {\\n                    withdrawable -= fee;\\n                }\\n\\n                ERC20Helper.transfer(tokenB, getFeeCollector(), fee);\\n            }\\n        }\\n\\n        ERC20Helper.transfer(tokenB, beneficiary, withdrawable);\\n\\n        emit WithdrawnB(withdrawable + fee);\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Rounds configuration\\n\\n    /// @notice Adds new round.\\n    /// @param round Configuration of the round.\\n    function addRound(Round memory round) external onlyManager(_msgSender()) {\\n        _addRound(round);\\n    }\\n\\n    /// @notice Updates the round.\\n    /// @param roundId Id of the round.\\n    /// @param round Configuration of the round.\\n    function updateRound(uint256 roundId, Round memory round) external onlyManager(_msgSender()) {\\n        if (round.startTimestamp >= round.endTimestamp) revert Errors.UnacceptableValue();\\n\\n        if (block.timestamp >= rounds[roundId].startTimestamp - ROUND_LOCK_PERIOD) {\\n            revert RoundIsLocked(roundId);\\n        }\\n\\n        rounds[roundId] = round;\\n\\n        emit IPresale.RoundUpdated(roundId);\\n    }\\n\\n    /// @notice Removes the round.\\n    /// @param roundId Id of the round.\\n    function removeRound(uint256 roundId) external onlyManager(_msgSender()) {\\n        if (!roundsIds.contains(roundId)) revert RoundNotExists(roundId);\\n\\n        if (block.timestamp >= rounds[roundId].startTimestamp - ROUND_LOCK_PERIOD) {\\n            revert RoundIsLocked(roundId);\\n        }\\n\\n        roundsIds.remove(roundId);\\n\\n        emit IPresale.RoundUpdated(roundId);\\n    }\\n\\n    /// @notice Updates the round whitelist configuration.\\n    /// @param roundId Id of the round.\\n    /// @param whitelistRoot Merkle tree root.\\n    /// @param proofsUri The uri of the proofs.\\n    function updateWhitelist(uint256 roundId, bytes32 whitelistRoot, string memory proofsUri)\\n        external\\n        onlyManager(_msgSender())\\n    {\\n        if (!roundsIds.contains(roundId)) revert RoundNotExists(roundId);\\n\\n        rounds[roundId].proofsUri = proofsUri;\\n        rounds[roundId].whitelistRoot = whitelistRoot;\\n\\n        emit RoundUpdated(roundId);\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Misc\\n\\n    /// @notice Returns the list of the rounds and their ids and states.\\n    function getRounds()\\n        external\\n        view\\n        returns (uint256[] memory ids, Round[] memory rounds_, RoundState[] memory states)\\n    {\\n        ids = roundsIds.values();\\n\\n        uint256 size = ids.length;\\n        rounds_ = new Round[](size);\\n        states = new RoundState[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            rounds_[i] = rounds[ids[i]];\\n            states[i] = getRoundState(ids[i]);\\n        }\\n\\n        return (ids, rounds_, states);\\n    }\\n\\n    /// @notice Returns the round.\\n    /// @param roundId Id of the round.\\n    function getRound(uint256 roundId) public view returns (Round memory) {\\n        if (!roundsIds.contains(roundId)) revert RoundNotExists(roundId);\\n\\n        return rounds[roundId];\\n    }\\n\\n    /// @notice Returns the round state.\\n    /// @param roundId Id of the round.\\n    function getRoundState(uint256 roundId) public view returns (RoundState) {\\n        if (!roundsIds.contains(roundId)) revert RoundNotExists(roundId);\\n\\n        uint256 timestamp = block.timestamp;\\n\\n        if (timestamp < rounds[roundId].startTimestamp) return RoundState.PENDING;\\n\\n        if (timestamp >= rounds[roundId].endTimestamp || liquidityA == 0) {\\n            return RoundState.VESTING;\\n        }\\n\\n        return RoundState.SALE;\\n    }\\n\\n    function getTgeTimestamp() public view returns (uint256) {\\n        if (listingTimestamp < TGE_LISTING_DIFFERENCE) return 0;\\n\\n        return listingTimestamp - TGE_LISTING_DIFFERENCE;\\n    }\\n\\n    function getFees() public view returns (Fees memory fees_) {\\n        fees_ = fees;\\n    }\\n\\n    function getFeeCollector() public view returns (address feeCollector_) {\\n        feeCollector_ = parentVest.owner();\\n    }\\n\\n    /// @notice Adds new round.\\n    /// @param round Configuration of the round.\\n    function _addRound(Round memory round) internal {\\n        if (bytes(round.name).length == 0) revert Errors.UnacceptableValue();\\n        if (round.startTimestamp == 0 || round.endTimestamp == 0) revert Errors.UnacceptableValue();\\n        if (round.startTimestamp >= round.endTimestamp) revert Errors.UnacceptableValue();\\n\\n        unchecked {\\n            ++roundSerialId;\\n        }\\n\\n        roundsIds.add(roundSerialId);\\n\\n        rounds[roundSerialId] = round;\\n\\n        emit RoundUpdated(roundSerialId);\\n    }\\n\\n    /**\\n     * @notice Pays for `tokenA` with `tokenB`\\n     * @param bought how much a participant already bought\\n     * @param allocation what\u2019s participant\u2019s allocation\\n     * @param price attributes.price of the membership\\n     * @param amountA Amount of tokenA to extend the membership.\\n     */\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _buy(uint256 bought, uint256 allocation, uint256 price, uint256 amountA) internal returns (uint256) {\\n        uint256 available = MathHelper.min(liquidityA, allocation - bought);\\n        uint256 buyingA = MathHelper.min(amountA, available);\\n\\n        if (buyingA == 0) revert OutOfLiquidityA();\\n\\n        uint256 tokenADecimals = ERC20Helper.decimals(tokenA);\\n        uint256 amountBPaidSoFar = bought * price / 10 ** tokenADecimals;\\n        uint256 amountBSumAfterThisTransaction = (bought + buyingA) * price / 10 ** tokenADecimals;\\n        uint256 amountB = amountBSumAfterThisTransaction - amountBPaidSoFar;\\n        if (amountB > 0) {\\n            uint256 receivedB = ERC20Helper.transferFrom(tokenB, _msgSender(), address(this), amountB);\\n\\n            if (receivedB != amountB) revert TokenWithTransferFees(address(tokenB));\\n\\n            unchecked {\\n                liquidityB += amountB;\\n            }\\n        }\\n\\n        unchecked {\\n            liquidityA -= buyingA;\\n        }\\n\\n        return buyingA;\\n    }\\n\\n    /**\\n     * @notice Determines whether an account can participate in sale state of a given round.\\n     *\\n     * Account cannot participate in the sale state if it is not on the whitelist or has\\n     * already participated in a round.\\n     *\\n     * @param roundId Id of the round.\\n     * @param account The address of the account.\\n     * @param attributes The membership attributes.\\n     * @param proof Merkle tree proof.\\n     */\\n    function _canParticipateInSale(\\n        uint256 roundId,\\n        address account,\\n        IMembership.Attributes memory attributes,\\n        bytes32[] memory proof\\n    ) internal view returns (bool) {\\n        if (roundParticipants[roundId][account]) revert ProofsUsedUp(roundId, account);\\n\\n        return MerkleProof.verify(\\n            proof,\\n            rounds[roundId].whitelistRoot,\\n            keccak256(\\n                abi.encode(\\n                    account,\\n                    attributes.price,\\n                    attributes.allocation,\\n                    attributes.claimableBackUnit,\\n                    attributes.tgeNumerator,\\n                    attributes.tgeDenominator,\\n                    attributes.cliffDuration,\\n                    attributes.cliffNumerator,\\n                    attributes.cliffDenominator,\\n                    attributes.vestingPeriodCount,\\n                    attributes.vestingPeriodDuration\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/delegatecall/contracts/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Withdrawable\\n *\\n * @notice This contract allows for withdrawing tokens and native Ether from the contract.\\n * It also provides a method to receive Ether into the contract.\\n */\\nabstract contract Withdrawable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Reference address is `address(0)`.\\n    error WithdrawToZeroAddress();\\n\\n    /// @notice Ensures the caller is eligible to withdraw.\\n    modifier protectedWithdrawal() virtual;\\n\\n    receive() external payable virtual { }\\n\\n    /// @notice Withdraws the token to the recipient.\\n    /// @param to Address of the recipient.\\n    /// @param token_ Address of the token.\\n    /// @param amount Amount to withdraw.\\n    function withdrawToken(address to, IERC20 token_, uint256 amount) public virtual protectedWithdrawal {\\n        if (to == address(0)) revert WithdrawToZeroAddress();\\n\\n        token_.safeTransfer(to, amount);\\n    }\\n\\n    /// @notice Withdraws the native coin to the recipient.\\n    /// @param to Address of the recipient.\\n    function withdrawCoin(address payable to) public virtual protectedWithdrawal {\\n        if (to == address(0)) revert WithdrawToZeroAddress();\\n\\n        to.transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nlibrary Errors {\\n    /// @notice Given value is out of safe bounds.\\n    error UnacceptableValue();\\n\\n    /// @notice Given reference is `address(0)`.\\n    error UnacceptableReference();\\n\\n    /// @notice The caller account is not authorized to perform an operation.\\n    /// @param account Address of the account.\\n    error Unauthorized(address account);\\n\\n    /// @notice The caller account is not authorized to perform an operation.\\n    /// @param account Address of the account.\\n    error AccountMismatch(address account);\\n\\n    /// @notice Denominators cannot equal zero because division by zero is not allowed.\\n    error DenominatorZero();\\n}\\n\"\r\n    },\r\n    \"src/libraries/MathHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\n/**\\n * @title MathHelper\\n * @notice A utility library for performing mathematical operations on values.\\n */\\nlibrary MathHelper {\\n    /// @notice Returns a smaller number.\\n    /// @param a Number to compare.\\n    /// @param b Number to compare.\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? b : a;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/ERC20Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title ERC20Helper\\n/// @notice Contains helper methods for interacting with ERC20 tokens.\\nlibrary ERC20Helper {\\n    /// @notice Transfers tokens from the calling contract to a recipient.\\n    /// @param token The contract address of the token which will be transferred.\\n    /// @param to The recipient of the transfer.\\n    /// @param value The value of the transfer.\\n    function transfer(IERC20 token, address to, uint256 value) internal {\\n        SafeERC20.safeTransfer(token, to, value);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from sender to a recipient and returns transferred amount.\\n     * @param token The contract address of the token which will be transferred.\\n     * @param sender The sender of the transfer.\\n     * @param to The recipient of the transfer.\\n     * @param value The value of the transfer.\\n     *\\n     * @dev Transferring tokens in some protocol functions cannot rely on given `amount`\\n     * because in the case of a token that collects tax or handles the `transfer` in a\\n     * custom way. In that case the value may not reflect the actual transferred value.\\n     *\\n     * Solution:\\n     * - before the transfer: save the current balance\\n     * - after the transfer: subtract this value from the new balance\\n     */\\n    function transferFrom(IERC20 token, address sender, address to, uint256 value) internal returns (uint256) {\\n        uint256 balance = token.balanceOf(to);\\n\\n        SafeERC20.safeTransferFrom(token, sender, to, value);\\n\\n        return token.balanceOf(to) - balance;\\n    }\\n\\n    /// @notice Returns the decimals places of the token.\\n    ///  @param token The contract address of the token.\\n    function decimals(IERC20 token) internal view returns (uint256) {\\n        return IERC20Metadata(address(token)).decimals();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/types/Round.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nenum RoundState {\\n    PENDING,\\n    SALE,\\n    VESTING\\n}\\n\\nstruct Round {\\n    string name;\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    bytes32 whitelistRoot;\\n    string proofsUri;\\n}\\n\"\r\n    },\r\n    \"src/types/Configuration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { IMembership } from \\\"./IMembership.sol\\\";\\n\\nimport { IMembershipDescriptor } from \\\"src/utils/MembershipDescriptor.sol\\\";\\n\\nstruct MembershipConfiguration {\\n    address factory;\\n    IMembershipDescriptor descriptor;\\n    IMembership.Metadata metadata;\\n}\\n\\nstruct Configuration {\\n    IERC20 tokenA;\\n    IERC20 tokenB;\\n    address manager;\\n    address beneficiary;\\n    uint256 listingTimestamp;\\n    uint256 claimbackPeriod;\\n    MembershipConfiguration membership;\\n}\\n\"\r\n    },\r\n    \"src/types/Fees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nstruct Fees {\\n    uint16 tokenAFeeNumerator;\\n    uint16 tokenAFeeDenominator;\\n    uint16 tokenBFeeNumerator;\\n    uint16 tokenBFeeDenominator;\\n    uint16 nftFeeNumerator;\\n    uint16 nftFeeDenominator;\\n}\\n\"\r\n    },\r\n    \"src/types/IMembership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport { IMembershipDescriptor } from \\\"src/utils/MembershipDescriptor.sol\\\";\\n\\n/**\\n * @title Membership\\n * @author\\n * @notice\\n */\\ninterface IMembership is IERC2981, IERC721, IERC721Enumerable {\\n    struct Usage {\\n        uint256 max;\\n        uint256 current;\\n    }\\n\\n    struct Metadata {\\n        address token;\\n        string color;\\n        string description;\\n    }\\n\\n    struct Attributes {\\n        uint256 price;\\n        uint256 allocation;\\n        uint256 claimableBackUnit;\\n        uint32 tgeNumerator;\\n        uint32 tgeDenominator;\\n        uint32 cliffDuration;\\n        uint32 cliffNumerator;\\n        uint32 cliffDenominator;\\n        uint32 vestingPeriodCount;\\n        uint32 vestingPeriodDuration;\\n    }\\n\\n    /// @notice Creates new membership and transfers it to given owner.\\n    /// @param owner_ Address of new address owner.\\n    /// @param roundId Id of the assigned round.\\n    /// @param maxUsage Max usage of the new membership.\\n    /// @param attributes Attributes attached to the membership.\\n    function mint(address owner_, uint256 roundId, uint256 currentUsage, uint256 maxUsage, Attributes memory attributes)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Contract state initialization.\\n    /// @param presale_ Address of the presale.\\n    /// @param metadata Metadata of the membership.\\n    /// @param descriptor Address to external descriptor.\\n    function initialize(address presale_, Metadata memory metadata, IMembershipDescriptor descriptor) external;\\n\\n    function extend(uint256 publicId, uint256 amount) external returns (uint256 newId);\\n    function reduce(uint256 publicId, uint256 amount) external returns (uint256 newId);\\n    function consume(uint256 publicId, uint256 amount) external returns (uint256 newId);\\n\\n    /// @notice Returns the start timestamp.\\n    function getStart() external view returns (uint256);\\n\\n    /// @notice Returns the usage by given membership id.\\n    function getUsage(uint256 membershipId) external view returns (Usage memory);\\n\\n    /// @notice Returns the round by given membership id.\\n    function getRoundId(uint256 membershipId) external view returns (uint256);\\n\\n    /// @notice Returns the attributes by given membership id.\\n    function getAttributes(uint256 membershipId) external view returns (Attributes memory);\\n\\n    /// @notice Returns releasable amount in the given timestamp.\\n    /// @param membershipId Id of the membership.\\n    function unlocked(uint256 membershipId) external view returns (uint256);\\n    function unlocked(uint256 start, uint256 allocation, IMembership.Attributes memory attributes)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/types/IVest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { Fees } from \\\"./Fees.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IVest is IERC165 {\\n    event FeesUpdated(Fees);\\n\\n    error FeesDontMatch();\\n\\n    function setFees(Fees memory) external;\\n\\n    function getFees() external view returns (Fees memory);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/types/IPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { Fees } from \\\"./Fees.sol\\\";\\nimport { Configuration } from \\\"./Configuration.sol\\\";\\nimport { Round, RoundState } from \\\"./Round.sol\\\";\\nimport { IVest } from \\\"./IVest.sol\\\";\\nimport { IMembership } from \\\"./IMembership.sol\\\";\\n\\ninterface IPresale {\\n    /// @notice Event emitted when the funds has been claimed with SaleMembership\\n    /// @param membershipId an id of the SaleMembership used to claim funds\\n    event ClaimedWithSaleMembership(uint256 indexed membershipId);\\n\\n    /// @notice Event emitted when the funds has been claimed.\\n    /// @param vMembershipId Id of the membership.\\n    /// @param amountA Amount of the claimed funds.\\n    event Claimed(uint256 indexed vMembershipId, uint256 amountA);\\n\\n    /// @notice Event emitted when the funds has been claimbacked.\\n    /// @param vMembershipId Id of the membership.\\n    /// @param amountA Amount of the claimbacked funds.\\n    event Claimbacked(uint256 indexed vMembershipId, uint256 amountA);\\n\\n    /// @notice Event emitted when the funds has been deposited.\\n    /// @param amount Amount of the deposited funds.\\n    event DepositedA(uint256 amount);\\n\\n    /// @notice Event emitted when the funds has been withdrawn.\\n    /// @param amount Amount of the withdrawn funds.\\n    event WithdrawnA(uint256 amount);\\n\\n    /// @notice Event emitted when the funds has been withdrawn.\\n    /// @param amount Amount of the withdrawn funds.\\n    event WithdrawnB(uint256 amount);\\n\\n    /// @notice Event emitted when the round has been updated.\\n    event RoundUpdated(uint256 indexed id);\\n\\n    /// @notice Event emitted when the tge start timestamp has been updated.\\n    /// @param timestamp The new timestamp.\\n    event ListingTimestampUpdated(uint256 timestamp);\\n\\n    //-------------------------------------------------------------------------\\n    // Errors\\n\\n    /// @notice Cannot update the locked round.\\n    /// @param id Id of the round.\\n    error RoundIsLocked(uint256 id);\\n\\n    /// @notice The round with given id does not exist.\\n    /// @param id Id of the round.\\n    error RoundNotExists(uint256 id);\\n\\n    /// @notice Round is in a different state.\\n    /// @param id The id of updated round.\\n    /// @param current Current state of the round.\\n    /// @param expected Expected state of the round.\\n    error RoundStateMismatch(uint256 id, RoundState current, RoundState expected);\\n\\n    /// @notice Claim not allowed by given membership.\\n    /// @param membershipId Id of the membership.\\n    error ClaimNotAllowed(uint256 membershipId);\\n\\n    /// @notice Claimback not allowed for given membership.\\n    /// @param membershipId Id of the membership.\\n    error ClaimbackNotAllowed(uint256 membershipId);\\n\\n    /// @notice Listing timestamp is not set.\\n    error UnacceptableListingTimestamp();\\n\\n    /// @notice Cliffs that unblock tokens immediately are not allowed\\n    error CliffWithImmediateUnlock();\\n\\n    /// @notice Vesting periods with duration 0 are not allowed\\n    error VestingWithImmediateUnlock();\\n\\n    /// @notice Vesting with only one period is too short. Either use cliff or increase period count.\\n    error CliffLikeVesting();\\n\\n    /// @notice The vesting is configured such that it would never unlock any tokens.\\n    error VestingWithoutUnlocks();\\n\\n    /// @notice Cliff height is specified but no vesting periods follow. In that case, all tokens will be unlocked at cliff end so cliffNumerator should equal zero.\\n    error CliffHeightWithoutSubsequentUnlocks();\\n\\n    /// @notice When vesting is configured such that it will never release 100% tokens or it will release more than 100% of tokens.\\n    error VestingSize();\\n\\n    /// @notice This protocol does not support tokens with transfer fees\\n    error TokenWithTransferFees(address tokenAddress);\\n\\n    /// @notice Proofs can\u2019t be used twice\\n    error ProofsUsedUp(uint256 roundId, address whitelistedAddress);\\n\\n    /// @notice Remaining usage of the membership is zero.\\n    /// @param membershipId Id of the membership.\\n    error MembershipUsed(uint256 membershipId);\\n\\n    /// @notice `LiquidityA` is lower than needed.\\n    error OutOfLiquidityA();\\n\\n    error InvalidDeployer();\\n\\n    function tokenA() external view returns (IERC20);\\n    function tokenB() external view returns (IERC20);\\n    function manager() external view returns (address);\\n    function parentVest() external view returns (IVest);\\n    function beneficiary() external view returns (address);\\n    function membership() external view returns (IMembership);\\n    function claimbackPeriod() external view returns (uint256);\\n    function getFees() external view returns (Fees memory fees);\\n    function liquidityA() external view returns (uint256);\\n    function liquidityB() external view returns (uint256);\\n    function listingTimestamp() external view returns (uint256);\\n    function getTgeTimestamp() external view returns (uint256);\\n    function nonClaimableBackTokenB() external view returns (uint256);\\n    function getFeeCollector() external view returns (address feeCollector);\\n    function getRound(uint256 roundId) external view returns (Round memory);\\n    function getRounds()\\n        external\\n        view\\n        returns (uint256[] memory ids, Round[] memory rounds, RoundState[] memory states);\\n    function getRoundState(uint256 roundId) external view returns (RoundState);\\n    function initialize(Configuration memory configuration, Round[] memory rounds_, Fees memory fees_) external;\\n    function addRound(Round memory round) external;\\n    function updateRound(uint256 roundId, Round memory round) external;\\n    function removeRound(uint256 roundId) external;\\n    function updateWhitelist(uint256 roundId, bytes32 whitelistRoot, string memory proofsUri) external;\\n    function updateListingTimestamp(uint256 listingTimestamp) external;\\n    function depositTokenA(uint256 tokenA) external;\\n    function withdrawTokenA(uint256 tokenA) external;\\n    function withdrawTokenB() external;\\n    function withdrawToken(address to, IERC20 token, uint256 amount) external;\\n    function buy(uint256 roundId, uint256 amountA, IMembership.Attributes memory attributes, bytes32[] calldata proof)\\n        external\\n        returns (uint256 membershipId);\\n    function extend(uint256 membershipId, uint256 amountA) external returns (uint256 newId);\\n    function claim(uint256 membershipId) external returns (uint256 newMembershipId);\\n    function claimback(uint256 membershipId, uint256 amountA) external returns (uint256 newId);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/utils/MembershipDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IMembership } from \\\"src/types/IMembership.sol\\\";\\nimport { MembershipSVG } from \\\"src/libraries/MembershipSVG.sol\\\";\\n\\ninterface IMembershipDescriptor {\\n    /// @notice Generates the name of the membership.\\n    /// @param metadata Metadata of the membership.\\n    function name(IMembership.Metadata memory metadata) external view returns (string memory);\\n\\n    /// @notice Generates the symbol of the membership.\\n    /// @param metadata Metadata of the membership.\\n    function symbol(IMembership.Metadata memory metadata) external view returns (string memory);\\n\\n    /// @notice Generates encoded JSON metadata.\\n    /// @param start Date of the start.\\n    /// @param usage Usage of the membership.\\n    /// @param metadata Metadata of the membership.\\n    /// @param attributes Attributes of the membership.\\n    /// @return encoded JSON metadata in base64.\\n    function tokenURI(\\n        uint256 start,\\n        IMembership.Usage memory usage,\\n        IMembership.Metadata memory metadata,\\n        IMembership.Attributes memory attributes\\n    ) external view returns (string memory);\\n}\\n\\ncontract MembershipDescriptor is IMembershipDescriptor {\\n    using Strings for address;\\n    using Strings for uint32;\\n    using Strings for uint256;\\n\\n    /// @inheritdoc IMembershipDescriptor\\n    function name(IMembership.Metadata memory metadata) public view returns (string memory) {\\n        string memory name_ = IERC20Metadata(address(metadata.token)).name();\\n\\n        return string.concat(name_, \\\" Vesting\\\");\\n    }\\n\\n    /// @inheritdoc IMembershipDescriptor\\n    function symbol(IMembership.Metadata memory metadata) public view returns (string memory) {\\n        string memory symbol_ = IERC20Metadata(address(metadata.token)).symbol();\\n\\n        return string.concat(\\\"v\\\", symbol_);\\n    }\\n\\n    /// @inheritdoc IMembershipDescriptor\\n    function tokenURI(\\n        uint256 start,\\n        IMembership.Usage memory usage,\\n        IMembership.Metadata memory metadata,\\n        IMembership.Attributes memory attributes\\n    ) public view virtual returns (string memory) {\\n        string memory json = string.concat(\\n            '{\\\"attributes\\\":',\\n            _traits(start, usage, metadata, attributes),\\n            ',\\\"description\\\":\\\"',\\n            metadata.description,\\n            '\\\",\\\"name\\\":\\\"',\\n            _title(metadata),\\n            '\\\",\\\"image\\\":\\\"',\\n            _image(usage, metadata),\\n            '\\\"}'\\n        );\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", Base64.encode(bytes(json)));\\n    }\\n\\n    /// @notice Generates title for given membership.\\n    /// @param metadata Metadata of the membership.\\n    function _title(IMembership.Metadata memory metadata) internal view returns (string memory) {\\n        string memory symbol_ = IERC20Metadata(address(metadata.token)).symbol();\\n\\n        return string.concat(\\\"Vesting of \\\", symbol_);\\n    }\\n\\n    /// @notice Generates encoded image.\\n    /// @param usage Usage of the membership.\\n    /// @param metadata Metadata of the membership.\\n    /// @return encoded image.\\n    function _image(IMembership.Usage memory usage, IMembership.Metadata memory metadata)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        uint256 denominator = 10 ** IERC20Metadata(address(metadata.token)).decimals();\\n\\n        string memory svg = MembershipSVG.generate(\\n            MembershipSVG.Params({\\n                color: metadata.color,\\n                title: name(metadata),\\n                max: usage.max / denominator,\\n                current: usage.current / denominator\\n            })\\n        );\\n\\n        return string.concat(\\\"data:image/svg+xml;base64,\\\", Base64.encode(bytes(svg)));\\n    }\\n\\n    /// @notice Generates traits metadata.\\n    /// @param start Date of the start.\\n    /// @param usage Usage of the membership.\\n    /// @param metadata Metadata of the membership.\\n    /// @return encoded image.\\n    function _traits(\\n        uint256 start,\\n        IMembership.Usage memory usage,\\n        IMembership.Metadata memory metadata,\\n        IMembership.Attributes memory attributes\\n    ) internal view returns (string memory) {\\n        uint256 denominator = 10 ** IERC20Metadata(address(metadata.token)).decimals();\\n\\n        string memory traits0 = string.concat(\\n            '[{\\\"trait_type\\\":\\\"Usage\\\",\\\"display_type\\\":\\\"boost_percentage\\\",\\\"value\\\":',\\n            (usage.max > 0 ? usage.current * 100 / usage.max : 0).toString(),\\n            '},{\\\"trait_type\\\":\\\"Vested tokens\\\",\\\"display_type\\\":\\\"number\\\",\\\"value\\\":',\\n            Strings.toString(usage.max / denominator),\\n            '},{\\\"trait_type\\\":\\\"Claimed tokens\\\",\\\"display_type\\\":\\\"number\\\",\\\"value\\\":',\\n            Strings.toString(usage.current / denominator),\\n            '},{\\\"trait_type\\\":\\\"TGE\\\",\\\"display_type\\\":\\\"boost_percentage\\\",\\\"value\\\":',\\n            (attributes.tgeDenominator > 0 ? attributes.tgeNumerator * 100 / attributes.tgeDenominator : 0).toString(),\\n            '},{\\\"trait_type\\\":\\\"Vesting start\\\",\\\"display_type\\\":\\\"date\\\",\\\"value\\\":',\\n            start.toString(),\\n            '},{\\\"trait_type\\\":\\\"Vesting end\\\",\\\"display_type\\\":\\\"date\\\",\\\"value\\\":',\\n            (start + attributes.cliffDuration + (attributes.vestingPeriodCount * attributes.vestingPeriodDuration))\\n                .toString()\\n        );\\n\\n        /// @dev split to avoid the stack too deep error\\n        string memory traits1 = string.concat(\\n            '},{\\\"trait_type\\\":\\\"Cliff duration\\\",\\\"value\\\":\\\"',\\n            _getCliffDurationText(attributes.cliffDuration),\\n            '\\\"},{\\\"trait_type\\\":\\\"Cliff unlock\\\",\\\"display_type\\\":\\\"boost_percentage\\\",\\\"value\\\":',\\n            (attributes.cliffDenominator > 0 ? attributes.cliffNumerator * 100 / attributes.cliffDenominator : 0)\\n                .toString(),\\n            '},{\\\"trait_type\\\":\\\"Unlock frequency\\\",\\\"value\\\":\\\"',\\n            _getUnlockFrequencyText(attributes.vestingPeriodDuration),\\n            '\\\"},{\\\"trait_type\\\":\\\"Vested token name\\\",\\\"value\\\":\\\"',\\n            IERC20Metadata(address(metadata.token)).name(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Vested token symbol\\\",\\\"value\\\":\\\"',\\n            IERC20Metadata(address(metadata.token)).symbol(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Vested token address\\\",\\\"value\\\":\\\"',\\n            Strings.toHexString(uint160(metadata.token), 20),\\n            '\\\"}]'\\n        );\\n\\n        return string.concat(traits0, traits1);\\n    }\\n\\n    /// @notice Convert the cliff duration to human-readable value.\\n    /// @param value Value of the cliff duration.\\n    /// @return Human-readable value.\\n    function _getCliffDurationText(uint256 value) internal pure virtual returns (string memory) {\\n        if (value == 0) return \\\"no cliff\\\";\\n\\n        (uint256 period, string memory label) = _humanize(value);\\n\\n        return string.concat(period.toString(), \\\" \\\", label);\\n    }\\n\\n    /// @notice Convert the unlock frequency to human-readable value.\\n    /// @param value Value of the unlock frequency.\\n    /// @return Human-readable value.\\n    function _getUnlockFrequencyText(uint256 value) internal pure virtual returns (string memory) {\\n        if (value == 0) return \\\"none\\\";\\n\\n        (uint256 period, string memory label) = _humanize(value);\\n\\n        if (period == 1) return string.concat(\\\"every \\\", label);\\n\\n        return string.concat(\\\"every \\\", period.toString(), \\\" \\\", label);\\n    }\\n\\n    /// @notice Convert the period to a human-readable value.\\n    /// @param value Period to humanize.\\n    /// @return Period in as text value.\\n    function _humanize(uint256 value) internal pure virtual returns (uint256, string memory) {\\n        if (value < 1 hours) return _pluralize(value / 1 minutes, \\\"minute\\\", \\\"minutes\\\");\\n\\n        if (value < 1 days) return _pluralize(value / 1 hours, \\\"hour\\\", \\\"hours\\\");\\n\\n        return _pluralize(value / 1 days, \\\"day\\\", \\\"days\\\");\\n    }\\n\\n    /// @notice Returns a label based on the given value.\\n    /// @param value The value on which the selection of the label is based.\\n    /// @param singular Singular label.\\n    /// @param plural Plural label.\\n    /// @return Generated label.\\n    function _pluralize(uint256 value, string memory singular, string memory plural)\\n        internal\\n        pure\\n        virtual\\n        returns (uint256, string memory)\\n    {\\n        return (value, value == 1 ? singular : plural);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/MembershipSVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title MembershipSVG\\n * @notice A library for generating the membership SVG.\\n */\\nlibrary MembershipSVG {\\n    using Strings for uint256;\\n\\n    struct Params {\\n        string color;\\n        string title;\\n        uint256 max;\\n        uint256 current;\\n    }\\n\\n    string internal constant ELEMENT_OPENING =\\n        '<svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1500 1500\\\" style=\\\"enable-background:new 0 0 1500 1500;\\\" xml:space=\\\"preserve\\\">';\\n\\n    string internal constant ELEMENT_CLOSING = \\\"</svg>\\\";\\n\\n    string internal constant BACKGROUND =\\n        '<rect fill=\\\"#171D24\\\" width=\\\"1500\\\" height=\\\"1500\\\"/><path fill=\\\"#20262F\\\" d=\\\"M479.2,371.4h-51.6v31.2l-31.2-31.2h-31.5l62.7,62.7v547.2L217.1,771v-51.2l203.3,203.3v-31.5l-182-182v-51.2l182,182V809L49.2,437.8v31.6l94.6,94.6v51.2l-94.6-94.6v31.5l94.6,94.6v51.2l-57.7-57.7v31.5l57.7,57.7v51.3L49.2,686v31.5l94.6,94.6v51.2l-94.6-94.6v31.5l323,323.1H321L49.2,851.4v31.5l94.6,94.6v51.2l94.6,94.7v31.5l-94.6-94.6v51.2l-94.6-94.6v31.5l234.4,234.4h31.5l-25.5-25.5h133.9l3.9,3.9l21.7,21.7h31.5l-41.3-41.3l25.6-25.6l66.9,66.9h31.3l-82.6-82.6l25.6-25.6L614.4,1283h31.5l-124-124V776.9l122.8,122.8l66.4-66.4V603.6L479.2,371.4z M282.6,950.8l144.9,144.9v27.5h-23.7L282.6,1002V950.8L282.6,950.8zM427.6,1013.1v51.2L238.4,875v-51.2L427.6,1013.1z M522,611.4l65.5,65.5v51.2L522,662.5V611.4z M552.2,558.8l131,130.8v51.2L552.2,610V558.8z M522,445.9l94.6,94.6v51.2L522,497.1V445.9z M232.6,1282.9L49.2,1099.5v31.5l94.6,94.6l57.3,57.3H232.6zM529.2,1114.7l168,168h14v-17.5l-182-182V1114.7z M711.2,1131.4v-31.5l-182-182v31.5L711.2,1131.4z M659,1161.8v-31.5l-129.7-129.7v31.5L659,1161.8z M529.2,866.6l182,182v-31.5l-182-182V866.6z M65.5,371.4H49.2v15.2l371.2,371.2v-31.6L65.5,371.4z M118.3,1282.9l31.6,0.1L49.2,1182.3v31.5L118.3,1282.9L118.3,1282.9z M711.2,469.7v-31.5l-66.8-66.8H613L711.2,469.7L711.2,469.7z M616.6,426.3l-55-55h-31.5l86.4,86.4l94.6,94.6v-31.5L616.6,426.3z M711.2,371.4h-15.6l15.6,15.6V371.4z M230.9,371.4h-31.5l220.9,220.9v-31.5L230.9,371.4z M313.6,371.4h-31.5l138.3,138.2v-31.5L313.6,371.4z M233.8,488.4L420.4,675v-31.5L265.3,488.4H233.8z\\\"/>';\\n\\n    string internal constant LOGO =\\n        '<polygon style=\\\"fill:none;stroke-miterlimit:10;\\\" points=\\\"194.9,791.3 194.9,990.5 368.1,1088 539.3,990.5 539.3,791.3 368.1,691.8 \\\"/><polyline style=\\\"fill:none;stroke-miterlimit:10;\\\" points=\\\"458.6,1066.1 565.1,1005.5 565.1,776.6 553.6,770 \\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"279.2\\\" y1=\\\"954\\\" x2=\\\"294.4\\\" y2=\\\"938.8\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"257.5\\\" y1=\\\"991.7\\\" x2=\\\"300.3\\\" y2=\\\"948.9\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"235.7\\\" y1=\\\"1029.4\\\" x2=\\\"306.1\\\" y2=\\\"959\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"224\\\" y1=\\\"1057\\\" x2=\\\"311.9\\\" y2=\\\"969.1\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"239.9\\\" y1=\\\"1057\\\" x2=\\\"317.8\\\" y2=\\\"979.2\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"255.9\\\" y1=\\\"1057\\\" x2=\\\"323.6\\\" y2=\\\"989.3\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"271.8\\\" y1=\\\"1057\\\" x2=\\\"329.4\\\" y2=\\\"999.4\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"287.7\\\" y1=\\\"1057\\\" x2=\\\"335.3\\\" y2=\\\"1009.5\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"303.7\\\" y1=\\\"1057\\\" x2=\\\"341.1\\\" y2=\\\"1019.6\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"319.6\\\" y1=\\\"1057\\\" x2=\\\"346.9\\\" y2=\\\"1029.7\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"335.5\\\" y1=\\\"1057\\\" x2=\\\"352.8\\\" y2=\\\"1039.8\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"358.6\\\" y1=\\\"1049.9\\\" x2=\\\"351.5\\\" y2=\\\"1057\\\"/>';\\n\\n    string internal constant DECORATORS =\\n        '<path style=\\\"fill:none;stroke:#383838;stroke-width:2;stroke-miterlimit:10;stroke-dasharray:4.0182,10.0455;\\\" d=\\\"M799.2,1357c-13.1-21.2-20.8-47.4-20.8-75.6c0-20.8,4.2-40.4,11.6-57.8\\\"/><polygon style=\\\"fill:#FFFFFF;\\\" points=\\\"92.9,78.2 72.6,97.5 72.6,139.5 81.4,148.2 135.1,148.2 144.8,158 144.8,254.2 138.5,247.8 138.5,173.8 133,179.3 133,246.1 133,261.5 212.7,341.3 267.8,341.3 338,411.7 262.6,411.7 297.7,446.8 278.9,446.8 233.2,401.1 196.1,401.1 62.8,267.8 62.8,211.9 73.4,201.5 115.6,201.5 102,187.9 63.4,187.9 63.4,94.3 81,78.2 \\\"/><polyline style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" points=\\\"280.3,446.3 716.9,446.3 755.4,407.8 973.2,407.8 \\\"/><circle style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" cx=\\\"978\\\" cy=\\\"407.8\\\" r=\\\"4.8\\\"/><circle style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" cx=\\\"674.8\\\" cy=\\\"65.7\\\" r=\\\"4.8\\\"/><polyline style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" points=\\\"69.8,100.3 105.2,66.4 280.3,66.4 305.4,91.5 649,91.5 671.6,69 \\\"/><path style=\\\"fill:#FFFFFF;\\\" d=\\\"M1408.7,290.1L1209.4,90.8l-28.5-0.2L1380.3,290h28.4L1408.7,290.1L1408.7,290.1z M1387.1,299.7h-12.2l-186.8-186.8h-34.7L1110.5,70h-17.7l32.9,32.9h-70.5l65.7,66h51.5l74.7,74.7V258l135.1,135.1h55.5l13.6-13.6V364L1387.1,299.7z\\\"/>';\\n\\n    /// @notice Generate the svg markup.\\n    /// @param params Params with the svg configuration.\\n    function generate(Params memory params) internal pure returns (string memory) {\\n        uint256 percentage = params.max > 0 ? params.current * 100 / params.max : 0;\\n\\n        uint256 progress = 10000 - (percentage * 100);\\n\\n        return string.concat(\\n            ELEMENT_OPENING,\\n            BACKGROUND,\\n            cards(params.color, 100 - percentage),\\n            elements(params.color, progress),\\n            DECORATORS,\\n            labels(params.title, params.max, params.current),\\n            ELEMENT_CLOSING\\n        );\\n    }\\n\\n    /// @notice Generate the cards markup.\\n    /// @param color Color of the elements.\\n    /// @param percentage Percentage value to print.\\n    function cards(string memory color, uint256 percentage) internal pure returns (string memory) {\\n        return string.concat(\\n            string.concat('<g fill=\\\"', color, '\\\">'),\\n            '<path d=\\\"M1343.7,522.3v-10.9l-24.9-24.9h-13.6l-3.3,3.1h-195.7l-18.6,18.6h-12.8l-3.5,3.1h-87.6l-2.9-2.9h-35.9l-2.9,2.9H829l-3.1-3.1h-9.1l-24.2,24.2v11.2l3,3v64.3l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v61l-3.1-5.6V715l24.3,24.3h24.9l-3.3-3.1h175.8l-3.1,3.1h11.1l22.5,22.5h6.5l-3.3-3.1h248.4l9.8-9.8h4.4l13.1-13.1v-78.6l20.2-20.2v-23.9l-3.1-3.3v-84L1343.7,522.3z M1295.2,756.3H1047l-22.5-22.5H819.2l-21-21v-178l21-21h270.7l21.7-21.7h204.7l21.6,21.6v121.1l-20.2,20.2v78.6L1295.2,756.3z\\\"/>',\\n            '<path d=\\\"M1343.7,848.9V838l-24.9-24.9h-13.6l-3.3,3.1h-195.7l-18.6,18.6h-12.8l-3.5,3.1h-87.6l-2.9-2.9h-35.9l-2.9,2.9H829l-3.1-3.1h-9.1L792.6,859v11.2l3,3v64.3l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v61l-3.1-5.6v20.9l24.3,24.3h24.9l-3.3-3.1h175.8l-3.1,3.1h11.1l22.5,22.5h6.5l-3.3-3.1h248.4l9.8-9.8h4.4l13.1-13.1v-78.6l20.2-20.2v-23.9l-3.1-3.3v-84L1343.7,848.9z M1295.2,1082.9H1047l-22.5-22.5H819.2l-21-21v-178l21-21h270.7l21.7-21.7h204.7l21.6,21.6v121.1l-20.2,20.2v78.6L1295.2,1082.9z\\\"/>',\\n            '<path d=\\\"M1337.8,1279.1L1337.8,1279.1c-2,0-3.7-1.6-3.7-3.7l0,0c0-2,1.6-3.7,3.7-3.7l0,0c2,0,3.7,1.6,3.7,3.7l0,0C1341.5,1277.5,1339.8,1279.1,1337.8,1279.1z\\\"/>',\\n            '<text transform=\\\"matrix(1 0 0 1 1066.4193 1071.1001)\\\" style=\\\"font-size:28px; text-transform:uppercase; font-family:Futura,Arial,monospace; font-weight: 900\\\">claimed</text>',\\n            '<text transform=\\\"matrix(1 0 0 1 1057.7942 744.2)\\\" style=\\\"font-size:28px; text-transform:uppercase; font-family:Futura,Arial,monospace; font-weight: 900\\\">purchased</text>',\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 1066.1456 1290.5452)\\\" style=\\\"font-size:28px; text-transform:uppercase; font-family:Futura,Arial,monospace; font-weight: 900\\\">',\\n                percentage.toString(),\\n                \\\"% left</text>\\\"\\n            ),\\n            \\\"</g>\\\"\\n        );\\n    }\\n\\n    /// @notice Generate the elements markup.\\n    /// @param color Color of the elements.\\n    /// @param progress Progress value to print.\\n    function elements(string memory color, uint256 progress) internal pure returns (string memory) {\\n        return string.concat(\\n            string.concat('<g stroke=\\\"', color, '\\\">'),\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M999.4,1354.6c-21.1,25.2-52.8,41.1-88.2,41.1c-63.5,0-115.1-51.6-115.1-115.1s51.6-115.1,115.1-115.1c8,0,15.7,0.8,23.2,2.4\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M954.2,1396.8c-57.4,21.3-123.2-2.8-152.5-58.4c-4-7.6-7.1-15.3-9.4-23.2\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M991,1186c11.9,10,22,22.4,29.8,36.9c14.7,28,17.7,59.1,10.6,87.7\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M1337.8,1285.2L1337.8,1285.2c-5.4,0-9.8-4.4-9.8-9.8l0,0c0-5.4,4.4-9.8,9.8-9.8l0,0c5.4,0,9.8,4.4,9.8,9.8l0,0C1347.6,1280.8,1343.2,1285.2,1337.8,1285.2z\\\"/>',\\n            '<polyline style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" points=\\\"991,1363.6 1022.7,1395.2 1305.8,1395.2 1337.8,1363.2 1337.8,1275.4 \\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;stroke-dasharray:6.1193,6.1193;\\\" d=\\\"M943.5,1170.1c47.9,13.9,82.9,58.1,82.9,110.5c0,26-8.6,49.9-23.1,69.2\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;stroke-dasharray:6.0368,6.0368;\\\" d=\\\"M861.9,1167.2c22.5-9.8,46.7-12.4,69.6-8.6\\\"/>',\\n            '<circle cx=\\\"911.3\\\" cy=\\\"1280.6\\\" r=\\\"84.8\\\" style=\\\"fill:none;stroke:#393E4A;stroke-width:28;stroke-miterlimit:10;\\\"/>',\\n            string.concat(\\n                '<circle cx=\\\"911.3\\\" cy=\\\"1280.6\\\" r=\\\"84.8\\\" style=\\\"fill:none;stroke-width:28;stroke-miterlimit:10;\\\" pathLength=\\\"10000\\\" stroke-dasharray=\\\"10000\\\" stroke-dashoffset=\\\"',\\n                progress.toString(),\\n                '\\\" transform=\\\"rotate(-90)\\\" transform-origin=\\\"911.3 1280.6\\\"/>'\\n            ),\\n            LOGO,\\n            \\\"</g>\\\"\\n        );\\n    }\\n\\n    /// @notice Generate the labels markup.\\n    /// @param title Label to print.\\n    /// @param max Value to print.\\n    /// @param current Value to print.\\n    function labels(string memory title, uint256 max, uint256 current) internal pure returns (string memory) {\\n        return string.concat(\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 259.3455 289.9893)\\\" style=\\\"fill:#FFFFFF; font-family:Futura,Arial,monospace; font-weight: 900;\\\" font-size=\\\"65px\\\">',\\n                title,\\n                \\\"</text>\\\"\\n            ),\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 872.9004 644.1)\\\" style=\\\"fill:#FFFFFF; font-family:Futura,Arial,monospace; font-weight: 900;\\\" font-size=\\\"50px\\\">',\\n                max.toString(),\\n                \\\"</text>\\\"\\n            ),\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 872.9005 966.0894)\\\" style=\\\"fill:#FFFFFF; font-family:Futura,Arial,monospace; font-weight: 900;\\\" font-size=\\\"50px\\\">',\\n                current.toString(),\\n                \\\"</text>\\\"\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"delegatecall/=lib/delegatecall/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"solidity-stringutils/=lib/solidity-stringutils/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"ClaimNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"ClaimbackNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CliffHeightWithoutSubsequentUnlocks\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CliffLikeVesting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CliffWithImmediateUnlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DenominatorZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"MembershipUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfLiquidityA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"ProofsUsedUp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RoundIsLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RoundNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundState\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"enum RoundState\",\"name\":\"expected\",\"type\":\"uint8\"}],\"name\":\"RoundStateMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenWithTransferFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnacceptableListingTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnacceptableReference\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnacceptableValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingWithImmediateUnlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingWithoutUnlocks\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vMembershipId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"Claimbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vMembershipId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"ClaimedWithSaleMembership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ListingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RoundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnB\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proofsUri\",\"type\":\"string\"}],\"internalType\":\"struct Round\",\"name\":\"round\",\"type\":\"tuple\"}],\"name\":\"addRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBackUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tgeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tgeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriodCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriodDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct IMembership.Attributes\",\"name\":\"attributes\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"claimback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPublicId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimbackPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"depositTokenA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenAFeeNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenAFeeDenominator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenBFeeNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenBFeeDenominator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nftFeeNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nftFeeDenominator\",\"type\":\"uint16\"}],\"internalType\":\"struct Fees\",\"name\":\"fees_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proofsUri\",\"type\":\"string\"}],\"internalType\":\"struct Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundState\",\"outputs\":[{\"internalType\":\"enum RoundState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proofsUri\",\"type\":\"string\"}],\"internalType\":\"struct Round[]\",\"name\":\"rounds_\",\"type\":\"tuple[]\"},{\"internalType\":\"enum RoundState[]\",\"name\":\"states\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTgeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimbackPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IMembershipDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IMembership.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct MembershipConfiguration\",\"name\":\"membership\",\"type\":\"tuple\"}],\"internalType\":\"struct Configuration\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proofsUri\",\"type\":\"string\"}],\"internalType\":\"struct Round[]\",\"name\":\"rounds_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenAFeeNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenAFeeDenominator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenBFeeNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenBFeeDenominator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nftFeeNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nftFeeDenominator\",\"type\":\"uint16\"}],\"internalType\":\"struct Fees\",\"name\":\"fees_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membership\",\"outputs\":[{\"internalType\":\"contract IMembership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonClaimableBackTokenB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentVest\",\"outputs\":[{\"internalType\":\"contract IVest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"removeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundParticipants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingTimestamp_\",\"type\":\"uint256\"}],\"name\":\"updateListingTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proofsUri\",\"type\":\"string\"}],\"internalType\":\"struct Round\",\"name\":\"round\",\"type\":\"tuple\"}],\"name\":\"updateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proofsUri\",\"type\":\"string\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokenB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}