{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableBurnableERC20 is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n    function burn(uint256 _amount) external;\\n    function transferOwner(address _owner) external;\\n    function setMinter(address _minter, bool _status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStETH is IERC20 {\\n    function submit(address _referral) external payable returns (uint _recievedShares);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultFactory.sol\\\";\\n\\ninterface IVault {\\n    function initialize(address) external;\\n\\n    function factory() external view returns (IVaultFactory);\\n    function owner() external view returns (address);\\n    function deposited() external view returns (uint);\\n    function minted() external view returns (uint);\\n    function availableBalance() external view returns (uint);\\n    function pendingYield() external view returns (uint);\\n    function mintRatio() external view returns (uint);\\n    \\n    function deposit(uint) external returns (uint);\\n    function withdraw(uint) external;\\n    function mint(uint) external;\\n    function burn(uint) external;\\n    function redeem(uint) external;\\n    function claim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IMintableBurnableERC20.sol\\\";\\n\\ninterface IVaultFactory {\\n    function collateral() external view returns (IERC20);\\n    function token() external view returns (IMintableBurnableERC20);\\n    function feeManager() external view returns (address);\\n\\n    function createVault(address) external returns (address);\\n    function getVault(address) external view returns (address);\\n    function allVaults(uint) external view returns (address);\\n    function isVault(address) external view returns (bool);\\n    function isVaultManager(address) external view returns (bool);\\n    function vaultsLength() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/peripheral/VaultManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IVaultFactory.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IStETH.sol\\\";\\n\\n// Stateless contracts for executing vault interactions. Used by external contracts, UIs and looper admins.\\ncontract VaultManager is Ownable {\\n\\n    IVaultFactory public immutable factory;\\n\\n    constructor(address _factory) {\\n        factory = IVaultFactory(_factory);\\n    }\\n\\n    function depositAndMintWithETH(uint _mintAmount) external payable {\\n        IStETH stETH = IStETH(address(factory.collateral()));\\n        uint before = factory.collateral().balanceOf(address(this));\\n        if (msg.value > 0) {\\n            stETH.submit{value: msg.value}(address(0));\\n        }\\n        uint actualDepositedAmount = factory.collateral().balanceOf(address(this)) - before;\\n        _depositAndMint(actualDepositedAmount, _mintAmount);\\n    }\\n\\n    function depositAndMint(uint _depositAmount, uint _mintAmount) external {\\n        uint before = factory.collateral().balanceOf(address(this));\\n        factory.collateral().transferFrom(msg.sender, address(this), _depositAmount);\\n        uint actualDepositedAmount = factory.collateral().balanceOf(address(this)) - before;\\n        _depositAndMint(actualDepositedAmount, _mintAmount);\\n    }\\n\\n    function _depositAndMint(uint _depositAmount, uint _mintAmount) internal {\\n        IVault vault = IVault(factory.getVault(msg.sender));\\n        require(address(vault) != address(0), \\\"vault not exist\\\");\\n        if (_depositAmount > 0) {\\n            factory.collateral().approve(address(vault), _depositAmount);\\n            vault.deposit(_depositAmount);\\n        }\\n        uint available = vault.availableBalance();\\n        // Cap mint at available balance\\n        _mintAmount = _mintAmount > available ? available : _mintAmount;\\n\\n        if (_mintAmount > 0) {\\n            vault.mint(_mintAmount);\\n        }\\n    }\\n\\n    function burnAndWithdraw(uint _burnAmount, uint _withdrawAmount) external {\\n        IVault vault = IVault(factory.getVault(msg.sender));\\n        require(address(vault) != address(0), \\\"vault not exist\\\");\\n        if (_burnAmount > 0) {\\n            factory.token().transferFrom(msg.sender, address(this), _burnAmount);\\n            factory.token().approve(address(vault), _burnAmount);\\n            vault.burn(_burnAmount);\\n        }\\n        if (_withdrawAmount > 0) {\\n            vault.withdraw(_withdrawAmount);\\n        }\\n    }\\n\\n    function redeem(uint _amount, IVault[] calldata vaults) external {\\n        uint vaultManagerCollateralBefore = factory.collateral().balanceOf(address(this));\\n        factory.token().transferFrom(msg.sender, address(this), _amount);\\n        for (uint i=0; i<vaults.length; i++) {\\n            uint amountToRedeem = _amount > vaults[i].minted() ? vaults[i].minted() : _amount;\\n\\n            // skip vaults with no minted tokens\\n            if (amountToRedeem > 0) {\\n                factory.token().approve(address(vaults[i]), amountToRedeem);\\n                vaults[i].redeem(amountToRedeem);\\n                _amount -= amountToRedeem;\\n            }\\n\\n            if (_amount == 0) break;\\n        }\\n        // caclulate amount of collateral redeemed and transfer to msg.sender\\n        uint redeemed = factory.collateral().balanceOf(address(this)) - vaultManagerCollateralBefore;\\n        factory.collateral().transfer(msg.sender, redeemed);\\n\\n        require(_amount == 0, \\\"VaultManager: insufficient vault balance to redeem\\\");\\n    }\\n\\n    // Manager should not have any balances, allow rescuing of accidental transfers\\n    function rescue(address _token, address _recipient) external onlyOwner {\\n        uint _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).transfer(_recipient, _balance);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"burnAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndMintWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault[]\",\"name\":\"vaults\",\"type\":\"address[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaultManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1e84a77c73e9ef993532c19b1eba7acb742761f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}