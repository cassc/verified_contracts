{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/ControllableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./GovernableInit.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract ControllableInit is GovernableInit {\\n\\n  constructor() public {\\n  }\\n\\n  function initialize(address _storage) public initializer {\\n    GovernableInit.initialize(_storage);\\n  }\\n\\n  modifier onlyController() {\\n    require(Storage(_storage()).isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return Storage(_storage()).controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/GovernableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract GovernableInit is Initializable {\\n\\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\\n\\n  modifier onlyGovernance() {\\n    require(Storage(_storage()).isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  constructor() public {\\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.governableInit.storage\\\")) - 1));\\n  }\\n\\n  function initialize(address _store) public initializer {\\n    _setStorage(_store);\\n  }\\n\\n  function _setStorage(address newStorage) private {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newStorage)\\n    }\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    _setStorage(_store);\\n  }\\n\\n  function _storage() internal view returns (address str) {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function governance() public view returns (address) {\\n    return Storage(_storage()).governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/compound/IComet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Compound's Comet Main Interface (without Ext)\\n * @notice An efficient monolithic money market protocol\\n * @author Compound\\n */\\ninterface IComet {\\n    struct AssetInfo {\\n        uint8 offset;\\n        address asset;\\n        address priceFeed;\\n        uint64 scale;\\n        uint64 borrowCollateralFactor;\\n        uint64 liquidateCollateralFactor;\\n        uint64 liquidationFactor;\\n        uint128 supplyCap;\\n    }\\n\\n    function supply(address asset, uint amount) external;\\n    function supplyTo(address dst, address asset, uint amount) external;\\n    function supplyFrom(address from, address dst, address asset, uint amount) external;\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n\\n    function transferAsset(address dst, address asset, uint amount) external;\\n    function transferAssetFrom(address src, address dst, address asset, uint amount) external;\\n\\n    function withdraw(address asset, uint amount) external;\\n    function withdrawTo(address to, address asset, uint amount) external;\\n    function withdrawFrom(address src, address to, address asset, uint amount) external;\\n\\n    function approveThis(address manager, address asset, uint amount) external;\\n    function withdrawReserves(address to, uint amount) external;\\n\\n    function absorb(address absorber, address[] calldata accounts) external;\\n    function buyCollateral(address asset, uint minAmount, uint baseAmount, address recipient) external;\\n    function quoteCollateral(address asset, uint baseAmount) external view returns (uint);\\n\\n    function getAssetInfo(uint8 i) external view returns (AssetInfo memory);\\n    function getAssetInfoByAddress(address asset) external view returns (AssetInfo memory);\\n    function getCollateralReserves(address asset) external view returns (uint);\\n    function getReserves() external view returns (int);\\n    function getPrice(address priceFeed) external view returns (uint);\\n\\n    function isBorrowCollateralized(address account) external view returns (bool);\\n    function isLiquidatable(address account) external view returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n    function totalBorrow() external view returns (uint256);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function borrowBalanceOf(address account) external view returns (uint256);\\n\\n    function pause(bool supplyPaused, bool transferPaused, bool withdrawPaused, bool absorbPaused, bool buyPaused) external;\\n    function isSupplyPaused() external view returns (bool);\\n    function isTransferPaused() external view returns (bool);\\n    function isWithdrawPaused() external view returns (bool);\\n    function isAbsorbPaused() external view returns (bool);\\n    function isBuyPaused() external view returns (bool);\\n\\n    function accrueAccount(address account) external;\\n    function getSupplyRate(uint utilization) external view returns (uint64);\\n    function getBorrowRate(uint utilization) external view returns (uint64);\\n    function getUtilization() external view returns (uint);\\n\\n    function governor() external view returns (address);\\n    function pauseGuardian() external view returns (address);\\n    function baseToken() external view returns (address);\\n    function baseTokenPriceFeed() external view returns (address);\\n    function extensionDelegate() external view returns (address);\\n\\n    /// @dev uint64\\n    function supplyKink() external view returns (uint);\\n    /// @dev uint64\\n    function supplyPerSecondInterestRateSlopeLow() external view returns (uint);\\n    /// @dev uint64\\n    function supplyPerSecondInterestRateSlopeHigh() external view returns (uint);\\n    /// @dev uint64\\n    function supplyPerSecondInterestRateBase() external view returns (uint);\\n    /// @dev uint64\\n    function borrowKink() external view returns (uint);\\n    /// @dev uint64\\n    function borrowPerSecondInterestRateSlopeLow() external view returns (uint);\\n    /// @dev uint64\\n    function borrowPerSecondInterestRateSlopeHigh() external view returns (uint);\\n    /// @dev uint64\\n    function borrowPerSecondInterestRateBase() external view returns (uint);\\n    /// @dev uint64\\n    function storeFrontPriceFactor() external view returns (uint);\\n\\n    /// @dev uint64\\n    function baseScale() external view returns (uint);\\n    /// @dev uint64\\n    function trackingIndexScale() external view returns (uint);\\n\\n    /// @dev uint64\\n    function baseTrackingSupplySpeed() external view returns (uint);\\n    /// @dev uint64\\n    function baseTrackingBorrowSpeed() external view returns (uint);\\n    /// @dev uint104\\n    function baseMinForRewards() external view returns (uint);\\n    /// @dev uint104\\n    function baseBorrowMin() external view returns (uint);\\n    /// @dev uint104\\n    function targetReserves() external view returns (uint);\\n\\n    function numAssets() external view returns (uint8);\\n    function decimals() external view returns (uint8);\\n\\n    function initializeStorage() external;\\n}\"\r\n    },\r\n    \"contracts/base/interface/compound/ICometRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Compound's CometRewards Contract\\n * @notice Hold and claim token rewards\\n * @author Compound\\n */\\ninterface ICometRewards {\\n    struct RewardOwed {\\n        address token;\\n        uint owed;\\n    }\\n    function claim(address comet, address src, bool accrue) external;\\n    function getRewardOwed(address comet, address account) external returns (RewardOwed memory);\\n}\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n\\n    event SharePriceChangeLog(\\n      address indexed vault,\\n      address indexed strategy,\\n      uint256 oldSharePrice,\\n      uint256 newSharePrice,\\n      uint256 timestamp\\n    );\\n\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns(bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n    function doHardWork(address _vault) external;\\n\\n    function salvage(address _token, uint256 amount) external;\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n    function profitSharingNumerator() external view returns (uint256);\\n    function profitSharingDenominator() external view returns (uint256);\\n\\n    function feeRewardForwarder() external view returns(address);\\n    function setFeeRewardForwarder(address _value) external;\\n\\n    function addHardWorker(address _worker) external;\\n    function addToWhitelist(address _target) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IFeeRewardForwarderV6.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IFeeRewardForwarderV6 {\\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\\n\\n    function notifyFeeAndBuybackAmounts(uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function notifyFeeAndBuybackAmounts(address _token, uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function profitSharingPool() external view returns (address);\\n    function configureLiquidation(address[] calldata _path, bytes32[] calldata _dexes) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/ILiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.16;\\n\\ninterface ILiquidator {\\n  event Swap(\\n    address indexed buyToken,\\n    address indexed sellToken,\\n    address indexed target,\\n    address initiator,\\n    uint256 amountIn,\\n    uint256 slippage,\\n    uint256 total\\n  );\\n\\n  function swapTokenOnMultipleDEXes(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address target,\\n    bytes32[] calldata dexes,\\n    address[] calldata path\\n  ) external;\\n\\n  function swapTokenOnDEX(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address target,\\n    bytes32 dexName,\\n    address[] calldata path\\n  ) external;\\n\\n  function getAllDexes() external view returns (bytes32[] memory);\\n\\n  function changeDexAddress(bytes32 name, address dexAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/ILiquidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.16;\\n\\ninterface ILiquidatorRegistry {\\n\\n  function universalLiquidator() external view returns(address);\\n\\n  function setUniversalLiquidator(address _ul) external;\\n\\n  function getPath(\\n    bytes32 dex,\\n    address inputToken,\\n    address outputToken\\n  ) external view returns(address[] memory);\\n\\n  function setPath(\\n    bytes32 dex,\\n    address inputToken,\\n    address outputToken,\\n    address[] calldata path\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/upgradability/BaseUpgradeableStrategyStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\ncontract BaseUpgradeableStrategyStorage {\\n\\n  bytes32 internal constant _UNDERLYING_SLOT = 0xa1709211eeccf8f4ad5b6700d52a1a9525b5f5ae1e9e5f9e5a0c2fc23c86e530;\\n  bytes32 internal constant _VAULT_SLOT = 0xefd7c7d9ef1040fc87e7ad11fe15f86e1d11e1df03c6d7c87f7e1f4041f08d41;\\n\\n  bytes32 internal constant _REWARD_TOKEN_SLOT = 0xdae0aafd977983cb1e78d8f638900ff361dc3c48c43118ca1dd77d1af3f47bbf;\\n  bytes32 internal constant _REWARD_POOL_SLOT = 0x3d9bb16e77837e25cada0cf894835418b38e8e18fbec6cfd192eb344bebfa6b8;\\n  bytes32 internal constant _SELL_FLOOR_SLOT = 0xc403216a7704d160f6a3b5c3b149a1226a6080f0a5dd27b27d9ba9c022fa0afc;\\n  bytes32 internal constant _SELL_SLOT = 0x656de32df98753b07482576beb0d00a6b949ebf84c066c765f54f26725221bb6;\\n  bytes32 internal constant _PAUSED_INVESTING_SLOT = 0xa07a20a2d463a602c2b891eb35f244624d9068572811f63d0e094072fb54591a;\\n\\n  bytes32 internal constant _PROFIT_SHARING_NUMERATOR_SLOT = 0xe3ee74fb7893020b457d8071ed1ef76ace2bf4903abd7b24d3ce312e9c72c029;\\n  bytes32 internal constant _PROFIT_SHARING_DENOMINATOR_SLOT = 0x0286fd414602b432a8c80a0125e9a25de9bba96da9d5068c832ff73f09208a3b;\\n\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0x29f7fcd4fe2517c1963807a1ec27b0e45e67c60a874d5eeac7a0b1ab1bb84447;\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x414c5263b05428f1be1bfa98e25407cc78dd031d0d3cd2a2e3d63b488804f22e;\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82b330ca72bcd6db11a26f10ce47ebcfe574a9c646bccbc6f1cd4478eae16b31;\\n\\n  bytes32 internal constant _REWARD_CLAIMABLE_SLOT = 0xbc7c0d42a71b75c3129b337a259c346200f901408f273707402da4b51db3b8e7;\\n  bytes32 internal constant _MULTISIG_SLOT = 0x3e9de78b54c338efbc04e3a091b87dc7efb5d7024738302c548fc59fba1c34e6;\\n\\n  constructor() public {\\n    assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.underlying\\\")) - 1));\\n    assert(_VAULT_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.vault\\\")) - 1));\\n    assert(_REWARD_TOKEN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardToken\\\")) - 1));\\n    assert(_REWARD_POOL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardPool\\\")) - 1));\\n    assert(_SELL_FLOOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.sellFloor\\\")) - 1));\\n    assert(_SELL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.sell\\\")) - 1));\\n    assert(_PAUSED_INVESTING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.pausedInvesting\\\")) - 1));\\n\\n    assert(_PROFIT_SHARING_NUMERATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.profitSharingNumerator\\\")) - 1));\\n    assert(_PROFIT_SHARING_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.profitSharingDenominator\\\")) - 1));\\n\\n    assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementation\\\")) - 1));\\n    assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementationTimestamp\\\")) - 1));\\n    assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementationDelay\\\")) - 1));\\n\\n    assert(_REWARD_CLAIMABLE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardClaimable\\\")) - 1));\\n    assert(_MULTISIG_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.multiSig\\\")) - 1));\\n  }\\n\\n  function _setUnderlying(address _address) internal {\\n    setAddress(_UNDERLYING_SLOT, _address);\\n  }\\n\\n  function underlying() public view returns (address) {\\n    return getAddress(_UNDERLYING_SLOT);\\n  }\\n\\n  function _setRewardPool(address _address) internal {\\n    setAddress(_REWARD_POOL_SLOT, _address);\\n  }\\n\\n  function rewardPool() public view returns (address) {\\n    return getAddress(_REWARD_POOL_SLOT);\\n  }\\n\\n  function _setRewardToken(address _address) internal {\\n    setAddress(_REWARD_TOKEN_SLOT, _address);\\n  }\\n\\n  function rewardToken() public view returns (address) {\\n    return getAddress(_REWARD_TOKEN_SLOT);\\n  }\\n\\n  function _setVault(address _address) internal {\\n    setAddress(_VAULT_SLOT, _address);\\n  }\\n\\n  function vault() public view returns (address) {\\n    return getAddress(_VAULT_SLOT);\\n  }\\n\\n  // a flag for disabling selling for simplified emergency exit\\n  function _setSell(bool _value) internal {\\n    setBoolean(_SELL_SLOT, _value);\\n  }\\n\\n  function sell() public view returns (bool) {\\n    return getBoolean(_SELL_SLOT);\\n  }\\n\\n  function _setPausedInvesting(bool _value) internal {\\n    setBoolean(_PAUSED_INVESTING_SLOT, _value);\\n  }\\n\\n  function pausedInvesting() public view returns (bool) {\\n    return getBoolean(_PAUSED_INVESTING_SLOT);\\n  }\\n\\n  function _setSellFloor(uint256 _value) internal {\\n    setUint256(_SELL_FLOOR_SLOT, _value);\\n  }\\n\\n  function sellFloor() public view returns (uint256) {\\n    return getUint256(_SELL_FLOOR_SLOT);\\n  }\\n\\n  function _setProfitSharingNumerator(uint256 _value) internal {\\n    setUint256(_PROFIT_SHARING_NUMERATOR_SLOT, _value);\\n  }\\n\\n  function profitSharingNumerator() public view returns (uint256) {\\n    return getUint256(_PROFIT_SHARING_NUMERATOR_SLOT);\\n  }\\n\\n  function _setProfitSharingDenominator(uint256 _value) internal {\\n    setUint256(_PROFIT_SHARING_DENOMINATOR_SLOT, _value);\\n  }\\n\\n  function profitSharingDenominator() public view returns (uint256) {\\n    return getUint256(_PROFIT_SHARING_DENOMINATOR_SLOT);\\n  }\\n\\n  function allowedRewardClaimable() public view returns (bool) {\\n    return getBoolean(_REWARD_CLAIMABLE_SLOT);\\n  }\\n\\n  function _setRewardClaimable(bool _value) internal {\\n    setBoolean(_REWARD_CLAIMABLE_SLOT, _value);\\n  }\\n\\n  function multiSig() public view returns(address) {\\n    return getAddress(_MULTISIG_SLOT);\\n  }\\n\\n  function _setMultiSig(address _address) internal {\\n    setAddress(_MULTISIG_SLOT, _address);\\n  }\\n\\n  // upgradeability\\n\\n  function _setNextImplementation(address _address) internal {\\n    setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\\n  }\\n\\n  function nextImplementation() public view returns (address) {\\n    return getAddress(_NEXT_IMPLEMENTATION_SLOT);\\n  }\\n\\n  function _setNextImplementationTimestamp(uint256 _value) internal {\\n    setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\\n  }\\n\\n  function nextImplementationTimestamp() public view returns (uint256) {\\n    return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\\n  }\\n\\n  function _setNextImplementationDelay(uint256 _value) internal {\\n    setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\\n  }\\n\\n  function nextImplementationDelay() public view returns (uint256) {\\n    return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\\n  }\\n\\n  function setBoolean(bytes32 slot, bool _value) internal {\\n    setUint256(slot, _value ? 1 : 0);\\n  }\\n\\n  function setAddress(bytes32 slot, address _address) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _address)\\n    }\\n  }\\n\\n  function setUint256(bytes32 slot, uint256 _value) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _value)\\n    }\\n  }\\n\\n  function setBytes32(bytes32 slot, bytes32 _value) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _value)\\n    }\\n  }\\n\\n  function getBoolean(bytes32 slot) internal view returns (bool) {\\n    return (getUint256(slot) == 1);\\n  }\\n\\n  function getAddress(bytes32 slot) internal view returns (address str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function getUint256(bytes32 slot) internal view returns (uint256 str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/upgradability/BaseUpgradeableStrategyUL.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./BaseUpgradeableStrategyStorage.sol\\\";\\nimport \\\"../inheritance/ControllableInit.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/IFeeRewardForwarderV6.sol\\\";\\nimport \\\"../interface/ILiquidator.sol\\\";\\nimport \\\"../interface/ILiquidatorRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract BaseUpgradeableStrategyUL is Initializable, ControllableInit, BaseUpgradeableStrategyStorage {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 internal constant _UL_REGISTRY_SLOT = 0x7a4b558e8ed4a66729f4a918db093413f0f1ae77c0de7c88bea8b99e084b2a17;\\n  bytes32 internal constant _UL_SLOT = 0xebfe408f65547b28326a79acf512c0f9a2bf4211ece39254d7c3ec96dd3dd242;\\n\\n  mapping(address => mapping(address => address[])) public storedLiquidationPaths;\\n  mapping(address => mapping(address => bytes32[])) public storedLiquidationDexes;\\n\\n  event ProfitsNotCollected(bool sell, bool floor);\\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n  event ProfitAndBuybackLog(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n\\n  modifier restricted() {\\n    require(msg.sender == vault() || msg.sender == controller()\\n      || msg.sender == governance(),\\n      \\\"The sender has to be the controller, governance, or vault\\\");\\n    _;\\n  }\\n\\n  // This is only used in `investAllUnderlying()`\\n  // The user can still freely withdraw from the strategy\\n  modifier onlyNotPausedInvesting() {\\n    require(!pausedInvesting(), \\\"Action blocked as the strategy is in emergency state\\\");\\n    _;\\n  }\\n\\n  constructor() public BaseUpgradeableStrategyStorage() {\\n    assert(_UL_REGISTRY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.ULRegistry\\\")) - 1));\\n    assert(_UL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.UL\\\")) - 1));\\n  }\\n\\n  function initialize(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _rewardPool,\\n    address _rewardToken,\\n    uint256 _profitSharingNumerator,\\n    uint256 _profitSharingDenominator,\\n    bool _sell,\\n    uint256 _sellFloor,\\n    uint256 _implementationChangeDelay,\\n    address _universalLiquidatorRegistry\\n  ) public initializer {\\n    ControllableInit.initialize(\\n      _storage\\n    );\\n    _setUnderlying(_underlying);\\n    _setVault(_vault);\\n    _setRewardPool(_rewardPool);\\n    _setRewardToken(_rewardToken);\\n    _setProfitSharingNumerator(_profitSharingNumerator);\\n    _setProfitSharingDenominator(_profitSharingDenominator);\\n\\n    _setSell(_sell);\\n    _setSellFloor(_sellFloor);\\n    _setNextImplementationDelay(_implementationChangeDelay);\\n    _setPausedInvesting(false);\\n    _setUniversalLiquidatorRegistry(_universalLiquidatorRegistry);\\n    _setUniversalLiquidator(ILiquidatorRegistry(universalLiquidatorRegistry()).universalLiquidator());\\n  }\\n\\n  /**\\n  * Schedules an upgrade for this vault's proxy.\\n  */\\n  function scheduleUpgrade(address impl) public onlyGovernance {\\n    _setNextImplementation(impl);\\n    _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\\n  }\\n\\n  function _finalizeUpgrade() internal {\\n    _setNextImplementation(address(0));\\n    _setNextImplementationTimestamp(0);\\n  }\\n\\n  function shouldUpgrade() external view returns (bool, address) {\\n    return (\\n      nextImplementationTimestamp() != 0\\n        && block.timestamp > nextImplementationTimestamp()\\n        && nextImplementation() != address(0),\\n      nextImplementation()\\n    );\\n  }\\n\\n  // reward notification\\n\\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken()).safeApprove(controller(), 0);\\n      IERC20(rewardToken()).safeApprove(controller(), feeAmount);\\n\\n      IController(controller()).notifyFee(\\n        rewardToken(),\\n        feeAmount\\n      );\\n    } else {\\n      emit ProfitLogInReward(0, 0, block.timestamp);\\n    }\\n  }\\n\\n  function notifyProfitAndBuybackInRewardToken(uint256 _rewardBalance, address pool, uint256 _buybackRatio) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\\n      uint256 buybackAmount = _rewardBalance.sub(feeAmount).mul(_buybackRatio).div(10000);\\n\\n      address forwarder = IController(controller()).feeRewardForwarder();\\n      emit ProfitAndBuybackLog(_rewardBalance, feeAmount, block.timestamp);\\n\\n      IERC20(rewardToken()).safeApprove(forwarder, 0);\\n      IERC20(rewardToken()).safeApprove(forwarder, _rewardBalance);\\n\\n      IFeeRewardForwarderV6(forwarder).notifyFeeAndBuybackAmounts(\\n        rewardToken(),\\n        feeAmount,\\n        pool,\\n        buybackAmount\\n      );\\n    } else {\\n      emit ProfitAndBuybackLog(0, 0, block.timestamp);\\n    }\\n  }\\n\\n  function _setUniversalLiquidatorRegistry(address _address) internal {\\n    setAddress(_UL_REGISTRY_SLOT, _address);\\n  }\\n\\n  function universalLiquidatorRegistry() public view returns (address) {\\n    return getAddress(_UL_REGISTRY_SLOT);\\n  }\\n\\n  function _setUniversalLiquidator(address _address) internal {\\n    setAddress(_UL_SLOT, _address);\\n  }\\n\\n  function universalLiquidator() public view returns (address) {\\n    return getAddress(_UL_SLOT);\\n  }\\n\\n  function configureLiquidation(address[] memory path, bytes32[] memory dexes) public onlyGovernance {\\n    address fromToken = path[0];\\n    address toToken = path[path.length - 1];\\n\\n    require(dexes.length == path.length - 1, \\\"lengths do not match\\\");\\n\\n    storedLiquidationPaths[fromToken][toToken] = path;\\n    storedLiquidationDexes[fromToken][toToken] = dexes;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/compoundV3/CompoundStrategy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../base/interface/IVault.sol\\\";\\nimport \\\"../../base/upgradability/BaseUpgradeableStrategyUL.sol\\\";\\nimport \\\"../../base/interface/compound/IComet.sol\\\";\\nimport \\\"../../base/interface/compound/ICometRewards.sol\\\";\\n\\ncontract CompoundStrategy is BaseUpgradeableStrategyUL {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public constant harvestMSIG = address(0xF49440C1F012d041802b25A73e5B0B9166a75c02);\\n\\n  // additional storage slots (on top of BaseUpgradeableStrategy ones) are defined here\\n  bytes32 internal constant _MARKET_SLOT = 0x7e894854bb2aa938fcac0eb9954ddb51bd061fc228fb4e5b8e859d96c06bfaa0;\\n  bytes32 internal constant _HODL_RATIO_SLOT = 0xb487e573671f10704ed229d25cf38dda6d287a35872859d096c0395110a0adb1;\\n  bytes32 internal constant _HODL_VAULT_SLOT = 0xc26d330f887c749cb38ae7c37873ff08ac4bba7aec9113c82d48a0cf6cc145f2;\\n\\n  uint256 public constant hodlRatioBase = 10000;\\n\\n  constructor() public BaseUpgradeableStrategyUL() {\\n    assert(_MARKET_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.market\\\")) - 1));\\n    assert(_HODL_RATIO_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.hodlRatio\\\")) - 1));\\n    assert(_HODL_VAULT_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.hodlVault\\\")) - 1));\\n  }\\n\\n  function initializeBaseStrategy(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _market,\\n    address _rewardPool,\\n    address _rewardToken,\\n    uint256 _hodlRatio\\n  ) public initializer {\\n\\n    // calculate profit sharing fee depending on hodlRatio\\n    uint256 profitSharingNumerator = 150;\\n    if (_hodlRatio >= 1500) {\\n      profitSharingNumerator = 0;\\n    } else if (_hodlRatio > 0){\\n      // (profitSharingNumerator - hodlRatio/10) * hodlRatioBase / (hodlRatioBase - hodlRatio)\\n      // e.g. with default values: (300 - 1000 / 10) * 10000 / (10000 - 1000)\\n      // = (300 - 100) * 10000 / 9000 = 222\\n      profitSharingNumerator = profitSharingNumerator.sub(_hodlRatio.div(10)) // subtract hodl ratio from profit sharing numerator\\n                                    .mul(hodlRatioBase) // multiply with hodlRatioBase\\n                                    .div(hodlRatioBase.sub(_hodlRatio)); // divide by hodlRatioBase minus hodlRatio\\n    }\\n\\n    BaseUpgradeableStrategyUL.initialize(\\n      _storage,\\n      _underlying,\\n      _vault,\\n      _rewardPool,\\n      _rewardToken,\\n      profitSharingNumerator,  // profit sharing numerator\\n      1000, // profit sharing denominator\\n      true, // sell\\n      0, // sell floor\\n      12 hours, // implementation change delay\\n      address(0x7882172921E99d590E097cD600554339fBDBc480) //UL Registry\\n    );\\n\\n    address _lpt = IComet(_market).baseToken();\\n    require(_lpt == _underlying, \\\"Underlying mismatch\\\");\\n\\n    _setMarket(_market);\\n    setUint256(_HODL_RATIO_SLOT, _hodlRatio);\\n    setAddress(_HODL_VAULT_SLOT, harvestMSIG);\\n  }\\n\\n  function setHodlRatio(uint256 _value) public onlyGovernance {\\n    uint256 profitSharingNumerator = 150;\\n    if (_value >= 1500) {\\n      profitSharingNumerator = 0;\\n    } else if (_value > 0){\\n      // (profitSharingNumerator - hodlRatio/10) * hodlRatioBase / (hodlRatioBase - hodlRatio)\\n      // e.g. with default values: (300 - 1000 / 10) * 10000 / (10000 - 1000)\\n      // = (300 - 100) * 10000 / 9000 = 222\\n      profitSharingNumerator = profitSharingNumerator.sub(_value.div(10)) // subtract hodl ratio from profit sharing numerator\\n                                    .mul(hodlRatioBase) // multiply with hodlRatioBase\\n                                    .div(hodlRatioBase.sub(_value)); // divide by hodlRatioBase minus hodlRatio\\n    }\\n    _setProfitSharingNumerator(profitSharingNumerator);\\n    setUint256(_HODL_RATIO_SLOT, _value);\\n  }\\n\\n  function hodlRatio() public view returns (uint256) {\\n    return getUint256(_HODL_RATIO_SLOT);\\n  }\\n\\n  function setHodlVault(address _address) public onlyGovernance {\\n    setAddress(_HODL_VAULT_SLOT, _address);\\n  }\\n\\n  function hodlVault() public view returns (address) {\\n    return getAddress(_HODL_VAULT_SLOT);\\n  }\\n\\n  function depositArbCheck() public pure returns(bool) {\\n    return true;\\n  }\\n\\n  function _rewardPoolBalance() internal view returns (uint256 balance) {\\n      balance = IComet(market()).balanceOf(address(this));\\n  }\\n\\n  function _emergencyExitRewardPool() internal {\\n    uint256 stakedBalance = _rewardPoolBalance();\\n    if (stakedBalance != 0) {\\n        _withdrawUnderlyingFromPool(stakedBalance);\\n    }\\n  }\\n\\n  function _withdrawUnderlyingFromPool(uint256 amount) internal {\\n    IComet(market()).withdraw(underlying(), Math.min(_rewardPoolBalance(), amount));\\n  }\\n\\n  function _enterRewardPool() internal {\\n    address underlying_ = underlying();\\n    address market_ = market();\\n    uint256 entireBalance = IERC20(underlying_).balanceOf(address(this));\\n    IERC20(underlying_).safeApprove(market_, 0);\\n    IERC20(underlying_).safeApprove(market_, entireBalance);\\n    IComet(market_).supply(underlying_, entireBalance);\\n  }\\n\\n  function _investAllUnderlying() internal onlyNotPausedInvesting {\\n    // this check is needed, because most of the SNX reward pools will revert if\\n    // you try to stake(0).\\n    if(IERC20(underlying()).balanceOf(address(this)) > 0) {\\n      _enterRewardPool();\\n    }\\n  }\\n\\n  /*\\n  *   In case there are some issues discovered about the pool or underlying asset\\n  *   Governance can exit the pool properly\\n  *   The function is only used for emergency to exit the pool\\n  */\\n  function emergencyExit() public onlyGovernance {\\n    _emergencyExitRewardPool();\\n    _setPausedInvesting(true);\\n  }\\n\\n  /*\\n  *   Resumes the ability to invest into the underlying reward pools\\n  */\\n  function continueInvesting() public onlyGovernance {\\n    _setPausedInvesting(false);\\n  }\\n\\n  function unsalvagableTokens(address token) public view returns (bool) {\\n    return (token == rewardToken() || token == underlying() || token == market());\\n  }\\n\\n  function _claimReward() internal {\\n    ICometRewards(rewardPool()).claim(market(), address(this), true);\\n  }\\n\\n  function _liquidateReward() internal {\\n    if (!sell()) {\\n      // Profits can be disabled for possible simplified and rapid exit\\n      emit ProfitsNotCollected(sell(), false);\\n      return;\\n    }\\n    address _rewardToken = rewardToken();\\n    uint256 rewardBalance = IERC20(_rewardToken).balanceOf(address(this));\\n\\n    uint256 toHodl = rewardBalance.mul(hodlRatio()).div(hodlRatioBase);\\n    if (toHodl > 0) {\\n      IERC20(_rewardToken).safeTransfer(hodlVault(), toHodl);\\n      rewardBalance = rewardBalance.sub(toHodl);\\n      if (rewardBalance == 0) {\\n        return;\\n      }\\n    }\\n    notifyProfitInRewardToken(rewardBalance);\\n    uint256 remainingRewardBalance = IERC20(_rewardToken).balanceOf(address(this));\\n\\n    if (remainingRewardBalance == 0) {\\n      return;\\n    }\\n\\n    address _underlying = underlying();\\n    if (_underlying != _rewardToken) {\\n      _swapToToken(_rewardToken, _underlying, remainingRewardBalance);\\n    }\\n  }\\n\\n  function _swapToToken(address tokenIn, address tokenOut, uint256 amountIn) internal returns (uint256) {\\n    uint256 amountOut;\\n    if (storedLiquidationPaths[tokenIn][tokenOut].length > 0) {\\n      address _universalLiquidator = universalLiquidator();\\n      IERC20(tokenIn).safeApprove(_universalLiquidator, 0);\\n      IERC20(tokenIn).safeApprove(_universalLiquidator, amountIn);\\n      ILiquidator(_universalLiquidator).swapTokenOnMultipleDEXes(\\n        amountIn,\\n        1,\\n        address(this), // target\\n        storedLiquidationDexes[tokenIn][tokenOut],\\n        storedLiquidationPaths[tokenIn][tokenOut]\\n      );\\n      amountOut = IERC20(tokenOut).balanceOf(address(this));\\n    } else {\\n      // otherwise we assme token0 is weth itself\\n      amountOut = amountIn;\\n    }\\n    return amountOut;\\n  }\\n\\n  /*\\n  *   Withdraws all the asset to the vault\\n  */\\n  function withdrawAllToVault() public restricted {\\n    _withdrawUnderlyingFromPool(_rewardPoolBalance());\\n    _claimReward();\\n    _liquidateReward();\\n    address underlying_ = underlying();\\n    IERC20(underlying_).safeTransfer(vault(), IERC20(underlying_).balanceOf(address(this)));\\n  }\\n\\n  /*\\n  *   Withdraws all the asset to the vault\\n  */\\n  function withdrawToVault(uint256 _amount) public restricted {\\n    // Typically there wouldn't be any amount here\\n    // however, it is possible because of the emergencyExit\\n    address underlying_ = underlying();\\n    uint256 entireBalance = IERC20(underlying_).balanceOf(address(this));\\n\\n    if(_amount > entireBalance){\\n      // While we have the check above, we still using SafeMath below\\n      // for the peace of mind (in case something gets changed in between)\\n      uint256 needToWithdraw = _amount.sub(entireBalance);\\n      uint256 toWithdraw = Math.min(_rewardPoolBalance(), needToWithdraw);\\n      _withdrawUnderlyingFromPool(toWithdraw);\\n    }\\n    IERC20(underlying_).safeTransfer(vault(), _amount);\\n  }\\n\\n  /*\\n  *   Note that we currently do not have a mechanism here to include the\\n  *   amount of reward that is accrued.\\n  */\\n  function investedUnderlyingBalance() external view returns (uint256) {\\n    if (rewardPool() == address(0)) {\\n      return IERC20(underlying()).balanceOf(address(this));\\n    }\\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\\n    // both are in the units of \\\"underlying\\\"\\n    // The second part is needed because there is the emergency exit mechanism\\n    // which would break the assumption that all the funds are always inside of the reward pool\\n    return _rewardPoolBalance().add(IERC20(underlying()).balanceOf(address(this)));\\n  }\\n\\n  /*\\n  *   Governance or Controller can claim coins that are somehow transferred into the contract\\n  *   Note that they cannot come in take away coins that are used and defined in the strategy itself\\n  */\\n  function salvage(address recipient, address token, uint256 amount) external onlyControllerOrGovernance {\\n     // To make sure that governance cannot come in and take away the coins\\n    require(!unsalvagableTokens(token), \\\"token is defined as not salvagable\\\");\\n    IERC20(token).safeTransfer(recipient, amount);\\n  }\\n\\n  /*\\n  *   Get the reward, sell it in exchange for underlying, invest what you got.\\n  *   It's not much, but it's honest work.\\n  *\\n  *   Note that although `onlyNotPausedInvesting` is not added here,\\n  *   calling `investAllUnderlying()` affectively blocks the usage of `doHardWork`\\n  *   when the investing is being paused by governance.\\n  */\\n  function doHardWork() external onlyNotPausedInvesting restricted {\\n    _claimReward();\\n    _liquidateReward();\\n    _investAllUnderlying();\\n  }\\n\\n  /**\\n  * Can completely disable claiming UNI rewards and selling. Good for emergency withdraw in the\\n  * simplest possible way.\\n  */\\n  function setSell(bool s) public onlyGovernance {\\n    _setSell(s);\\n  }\\n\\n  function _setMarket(address _address) internal {\\n    setAddress(_MARKET_SLOT, _address);\\n  }\\n\\n  function market() public view returns (address) {\\n    return getAddress(_MARKET_SLOT);\\n  }\\n\\n  function finalizeUpgrade() external onlyGovernance {\\n    _finalizeUpgrade();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/compoundV3/CompoundStrategyMainnet_WETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.5.16;\\n\\nimport \\\"./CompoundStrategy.sol\\\";\\n\\ncontract CompoundStrategyMainnet_WETH is CompoundStrategy {\\n\\n  constructor() public {}\\n\\n  function initializeStrategy(\\n    address _storage,\\n    address _vault\\n  ) public initializer {\\n    address underlying = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address market = address(0xA17581A9E3356d9A858b789D68B4d866e593aE94);\\n    address rewards = address(0x1B0e765F6224C21223AeA2af16c1C46E38885a40);\\n    address comp = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n    bytes32 sushiDex = 0xcb2d20206d906069351c89a2cb7cdbd96c71998717cd5a82e724d955b654f67a;\\n    CompoundStrategy.initializeBaseStrategy(\\n      _storage,\\n      underlying,\\n      _vault,\\n      market,\\n      rewards,\\n      comp,\\n      500\\n    );\\n    storedLiquidationPaths[comp][underlying] = [comp, underlying];\\n    storedLiquidationDexes[comp][underlying] = [sushiDex];\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitAndBuybackLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLogInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"floor\",\"type\":\"bool\"}],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedRewardClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dexes\",\"type\":\"bytes32[]\"}],\"name\":\"configureLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestMSIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlRatioBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sellFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_implementationChangeDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_universalLiquidatorRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hodlRatio\",\"type\":\"uint256\"}],\"name\":\"initializeBaseStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setHodlRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHodlVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storedLiquidationDexes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storedLiquidationPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universalLiquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universalLiquidatorRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompoundStrategyMainnet_WETH", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}