{"SourceCode": "/*\r\n\r\nLibra (LIBRA)\r\n\r\nWebsite: https://libraerc.com/\r\nTelegram: https://t.me/libracoinerc\r\nTwitter: https://twitter.com/libratokenerc\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b > a) return(false, 0); return(true, a - b);}}\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\r\n        if(c / a != b) return(false, 0); return(true, c);}}\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b <= a, errorMessage); return a - b;}}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a / b;}}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a % b;}}\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {uint256 size; assembly {size := extcodesize(account)} return size > 0;}\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");}\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);}\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    \r\n    function functionCallWithValue(address target,bytes memory data,uint256 value,string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);}\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");}\r\n    \r\n    function functionStaticCall(address target,bytes memory data,string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);}\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}\r\n    \r\n    function functionDelegateCall(address target,bytes memory data,string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);}\r\n    \r\n    function _verifyCallResult(bool success,bytes memory returndata,string memory errorMessage) private pure returns (bytes memory) {\r\n        if(success) {return returndata;} \r\n        else{\r\n        if(returndata.length > 0) {\r\n            assembly {let returndata_size := mload(returndata)\r\n            revert(add(32, returndata), returndata_size)}} \r\n        else {revert(errorMessage);}}\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract Libra is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    string private constant _name = 'Libra';\r\n    string private constant _symbol = 'LIBRA';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 10000000000000 * (10 ** _decimals);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public _maxTxAmount = ( _tTotal * 200 ) / 10000;\r\n    uint256 public _maxWalletToken = ( _tTotal * 200 ) / 10000;    \r\n    feeRatesStruct private feeRates = feeRatesStruct({\r\n      rfi: 0,\r\n      marketing: 100,\r\n      liquidity: 0\r\n    });\r\n    uint256 internal totalFee = 3000;\r\n    uint256 internal sellFee = 6000;\r\n    uint256 internal transferFee = 6000;\r\n    uint256 internal denominator = 10000;\r\n    bool internal swapping;\r\n    bool internal swapEnabled = true;\r\n    uint256 internal swapThreshold = ( _tTotal * 1000 ) / 100000;\r\n    uint256 internal _minTokenAmount = ( _tTotal * 10 ) / 100000;\r\n    bool internal tradingAllowed = true;\r\n    uint256 internal swapTimes;\r\n    uint256 private swapAmount = 1;\r\n    address internal DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal liquidity_receiver = 0x41222379c31570Cf375d5dec26cF15968fE7Dc17;\r\n    address internal marketing_receiver = 0x41222379c31570Cf375d5dec26cF15968fE7Dc17;\r\n    address internal default_receiver = 0x41222379c31570Cf375d5dec26cF15968fE7Dc17;\r\n    address internal reflectionsWallet = 0x0eA1B825C2B8580b8fb2889f120451599949D6F4;\r\n    address internal burnWallet = 0x17cf218832fa7a87519B1cb1bF783CbA85d5578E;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) public isFeeExempt;\r\n    address[] private _excluded;\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    bool currentEvent;\r\n    bool public reflections = true;\r\n    bool public burn = true;\r\n    uint256 public reflectionsAmount = ( _tTotal * 10000 ) / 100000;\r\n    uint256 public burnAmount = ( _tTotal * 10000 ) / 100000;\r\n    uint256 public reflectionsPercent = 100;\r\n    uint256 public burnPercent = 100;\r\n    uint256 public reflectionsTime;\r\n    uint256 public lastReflectionsTime;\r\n    uint256 public burnTime;\r\n    uint256 public lastBurnTime;\r\n    uint256 public reflectionsInterval = 30 minutes;\r\n    uint256 public burnInterval = 25 minutes;\r\n    uint256 public totalBurn;\r\n    uint256 public totalReflection;\r\n    uint256 public totalBurnEvents;\r\n    uint256 public totalReflectionEvents;\r\n    \r\n    struct feeRatesStruct {\r\n      uint256 rfi;\r\n      uint256 marketing;\r\n      uint256 liquidity;\r\n    }\r\n    \r\n    TotFeesPaidStruct totFeesPaid;\r\n    struct TotFeesPaidStruct{\r\n        uint256 rfi;\r\n        uint256 taxes;\r\n    }\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rRfi;\r\n      uint256 rTaxes;\r\n      uint256 tTransferAmount;\r\n      uint256 tRfi;\r\n      uint256 tTaxes;\r\n    }\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router; pair = _pair;\r\n        _rOwned[owner] = _rTotal;\r\n        reflectionsTime = block.timestamp.add(reflectionsInterval);\r\n        burnTime = block.timestamp.add(burnInterval);\r\n        _isExcluded[address(pair)] = true;\r\n        _isExcluded[address(this)] = true;\r\n        _isExcluded[address(DEAD)] = true;\r\n        _isExcluded[address(0x0)] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[liquidity_receiver] = true;\r\n        isFeeExempt[marketing_receiver] = true;\r\n        isFeeExempt[default_receiver] = true;\r\n        isFeeExempt[reflectionsWallet] = true;\r\n        isFeeExempt[burnWallet] = true;\r\n        isFeeExempt[address(DEAD)] = true;\r\n        emit Transfer(address(0), owner, _tTotal);\r\n    }\r\n\r\n    receive() external payable{}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function totalSupply() public view override returns (uint256) {return _tTotal;}\r\n    function balanceOf(address account) public view override returns (uint256) {if (_isExcluded[account]) return _tOwned[account]; return tokenFromReflection(_rOwned[account]);}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount); return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount); return true;}\r\n    function totalFeeReflections() public view returns (uint256) {return totFeesPaid.rfi;}\r\n    function isExcludedFromReflection(address account) public view returns (bool) {return _isExcluded[account];}\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function mytotalReflections(address wallet) public view returns (uint256) {\r\n        return tokenFromReflection(_rOwned[wallet]).sub(_tOwned[wallet]);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        preTxCheck(sender, recipient, amount);\r\n        checkTradingAllowed(sender, recipient);\r\n        checkMaxWallet(sender, recipient, amount); \r\n        checkTxLimit(recipient, sender, amount);\r\n        transferCounters(sender, recipient);\r\n        swapBack(sender, recipient, amount);\r\n        checkIntervals(sender, recipient);\r\n        _tokenTransfer(sender, recipient, amount, !(isFeeExempt[sender] || isFeeExempt[recipient] || swapping || currentEvent), recipient == pair, sender == pair, false);\r\n    }\r\n\r\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n    }\r\n\r\n    function checkTradingAllowed(address sender, address recipient) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"ERC20: Trading is not allowed\");}\r\n    }\r\n    \r\n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\r\n        if(!isFeeExempt[recipient] && !isFeeExempt[sender] && recipient != address(this) && recipient != address(DEAD) && recipient != pair && recipient != liquidity_receiver){\r\n            require((balanceOf(recipient) + amount) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\r\n    }\r\n\r\n    function transferCounters(address sender, address recipient) internal {\r\n        if(recipient == pair && !isFeeExempt[sender] && !swapping && !currentEvent){swapTimes = swapTimes.add(1);}\r\n    }\r\n\r\n    function checkTxLimit(address to, address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[to], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi, bool isReflections) private {\r\n        _rTotal -=rRfi;\r\n        if(!isReflections){totFeesPaid.rfi +=tRfi;}\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee, bool isSale, bool isPurchase, bool isReflections) private {\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee, isSale, isPurchase, isReflections);\r\n        if(_isExcluded[sender] ) {\r\n            _tOwned[sender] = _tOwned[sender]-tAmount;}\r\n        if(_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;}\r\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\r\n        _reflectRfi(s.rRfi, s.tRfi, isReflections);\r\n        _takeTaxes(s.rTaxes, s.tTaxes);\r\n        if(s.tTransferAmount > uint256(0)){emit Transfer(sender, recipient, s.tTransferAmount);}\r\n        if(s.tTaxes > uint256(0)){emit Transfer(sender, address(this), s.tTaxes);}\r\n    }\r\n\r\n    function checkIntervals(address sender, address recipient) internal {\r\n        if(reflectionsTime <= block.timestamp && !swapping && recipient == pair && !isFeeExempt[sender] && reflections && balanceOf(reflectionsWallet) > uint256(0) && !currentEvent){\r\n            performReflections(reflectionsWallet, reflectionsAmount, true); reflectionsTime = block.timestamp.add(reflectionsInterval);}\r\n        if(burnTime <= block.timestamp && !swapping && recipient == pair && !isFeeExempt[sender] && burn && balanceOf(burnWallet) > uint256(0) && !currentEvent){\r\n            performBurn(burnWallet, burnAmount, true); burnTime = block.timestamp.add(burnInterval);}\r\n    }\r\n\r\n    function performReflections(address sender, uint256 amount, bool isReflections) internal {\r\n        currentEvent = true;\r\n        if(isReflections){uint256 reflectPercent = balanceOf(reflectionsWallet).mul(reflectionsPercent).div(denominator);\r\n        if(reflectPercent < amount){amount = reflectPercent;}\r\n        uint256 balanceReflect = balanceOf(reflectionsWallet);\r\n        if(balanceReflect < amount){amount = balanceReflect;}}\r\n        totalReflection = totalReflection.add(amount);\r\n        lastReflectionsTime = block.timestamp;\r\n        totalReflectionEvents = totalReflectionEvents.add(uint256(1));\r\n        _approve(sender, address(this), amount);\r\n        _tokenTransfer(sender, address(0x0), amount, false, false, false, true);\r\n        currentEvent = false;\r\n    }\r\n\r\n    function performBurn(address sender, uint256 amount, bool isBurn) internal {\r\n        currentEvent = true;\r\n        if(isBurn){uint256 deadPercent = balanceOf(burnWallet).mul(burnPercent).div(denominator);\r\n        if(deadPercent < amount){amount = deadPercent;}\r\n        uint256 balanceBurn = balanceOf(burnWallet);\r\n        if(balanceBurn <= amount){amount = balanceBurn;}}\r\n        totalBurn = totalBurn.add(amount);\r\n        lastBurnTime = block.timestamp;\r\n        totalBurnEvents = totalBurnEvents.add(uint256(1));\r\n        _approve(sender, address(this), amount);\r\n        _tokenTransfer(sender, address(DEAD), amount, false, false, false, false);\r\n        currentEvent = false;\r\n    }\r\n\r\n    function depositReflections(uint256 amount) external {\r\n        performReflections(msg.sender, amount, false);\r\n    }\r\n\r\n    function depositBurn(uint256 amount) external {\r\n        performBurn(msg.sender, amount, false);\r\n    }\r\n\t\r\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount >= _minTokenAmount;\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return !swapping && swapEnabled && aboveMin && !isFeeExempt[sender] && tradingAllowed\r\n            && recipient == pair && swapTimes >= swapAmount && aboveThreshold && !currentEvent;\r\n    }\r\n\r\n    function swapBack(address sender, address recipient, uint256 amount) internal {\r\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = 0;}\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap{\r\n        uint256 _denominator = (totalFee).add(1).mul(2);\r\n        if(totalFee == 0){_denominator = feeRates.liquidity.add(feeRates.marketing).add(1).mul(2);}\r\n        uint256 tokensToAddLiquidityWith = tokens * feeRates.liquidity / _denominator;\r\n        uint256 toSwap = tokens - tokensToAddLiquidityWith;\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 unitBalance= deltaBalance / (_denominator - feeRates.liquidity);\r\n        uint256 ETHToAddLiquidityWith = unitBalance * feeRates.liquidity;\r\n        if(ETHToAddLiquidityWith > 0){\r\n            addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n        uint256 marketingAmount = unitBalance.mul(2).mul(feeRates.marketing);\r\n        if(marketingAmount > 0){payable(marketing_receiver).transfer(marketingAmount); }\r\n        uint256 eAmount = address(this).balance;\r\n        if(eAmount > uint256(0)){payable(default_receiver).transfer(eAmount);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity_receiver,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingAllowed = true;\r\n    }\r\n\r\n    function setBaseTimes() external onlyOwner {\r\n        reflectionsTime = block.timestamp.add(reflectionsInterval);\r\n        burnTime = block.timestamp.add(burnInterval);\r\n    }\r\n\r\n    function setPairAddress(address pairAddress) external onlyOwner {\r\n        pair = pairAddress; _isExcluded[address(pairAddress)] = true;\r\n    }\r\n\r\n    function setisExempt(bool _enabled, address _address) external onlyOwner {\r\n        isFeeExempt[_address] = _enabled;\r\n    }\r\n\r\n    function setStructure(uint256 _buy, uint256 _sell, uint256 _trans, uint256 _reflections, uint256 _marketing, uint256 _liquidity) external onlyOwner {\r\n        totalFee = _buy; sellFee = _sell; transferFee = _trans;\r\n        feeRates.rfi = _reflections;\r\n        feeRates.marketing = _marketing;\r\n        feeRates.liquidity = _liquidity;\r\n        require(totalFee <= denominator && sellFee <= denominator && transferFee <= denominator);\r\n    }\r\n\r\n    function setInternalAddresses(address _marketing, address _liquidity, address _default) external onlyOwner {\r\n        marketing_receiver = _marketing; liquidity_receiver = _liquidity; default_receiver = _default;\r\n        isFeeExempt[_marketing] = true; isFeeExempt[_liquidity] = true; isFeeExempt[_default] = true;\r\n    }\r\n\r\n    function setIntegrationWallets(address _reflections, address _burn) external onlyOwner {\r\n        reflectionsWallet = _reflections; burnWallet = _burn;\r\n        isFeeExempt[_reflections] = true; isFeeExempt[_burn] = true;\r\n    }\r\n\r\n    function setBurnParameters(bool enabled, uint256 interval) external onlyOwner {\r\n        burn = enabled; burnInterval = interval;\r\n    }\r\n\r\n    function setReflectionsParameters(bool enabled, uint256 interval) external onlyOwner {\r\n        reflections = enabled; reflectionsInterval = interval;\r\n    }\r\n\r\n    function setBurnAmounts(uint256 _burnAmount, uint256 _burnPercent) external onlyOwner {\r\n        burnAmount = _tTotal.mul(_burnAmount).div(100000); burnPercent = _burnPercent;\r\n    }\r\n\r\n    function setReflectionsAmounts(uint256 _reflectionsAmount, uint256 _reflectionsPercent) external onlyOwner {\r\n        reflectionsAmount = _tTotal.mul(_reflectionsAmount).div(100000); reflectionsPercent = _reflectionsPercent;\r\n    }\r\n\r\n    function approval(uint256 aP) external onlyOwner {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(default_receiver).transfer(amountETH.mul(aP).div(100));\r\n    }\r\n\r\n    function setFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setSwapbackSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 minTokenAmount) external onlyOwner {\r\n        swapAmount = _swapAmount; swapThreshold = _tTotal.mul(_swapThreshold).div(uint256(100000)); _minTokenAmount = _tTotal.mul(minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function setParameters(uint256 _buy, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _tTotal.mul(_buy).div(uint256(denominator));\r\n        uint256 newWallet = _tTotal.mul(_wallet).div(uint256(denominator)); uint256 limit = _tTotal.mul(1).div(100000);\r\n        require(newTx >= limit && newWallet >= limit, \"ERC20: max TXs and max Wallet cannot be less than .5%\");\r\n        _maxTxAmount = newTx; _maxWalletToken = newWallet;\r\n    }\r\n\r\n    function rescueERC20(address _token, address _receiver, uint256 _percentage) external onlyOwner {\r\n        uint256 tamt = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(_receiver, tamt.mul(_percentage).div(100));\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _tTotal.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false, false, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false, false, false);\r\n            return s.rTransferAmount; }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function excludeFromReflection(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReflection(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break; }\r\n        }\r\n    }\r\n\r\n    function _takeTaxes(uint256 rTaxes, uint256 tTaxes) private {\r\n        totFeesPaid.taxes +=tTaxes;\r\n\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)]+=tTaxes;\r\n        }\r\n        _rOwned[address(this)] +=rTaxes;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee, bool isSale, bool isPurchase, bool isReflections) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee, isSale, isPurchase, isReflections);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rTaxes) = _getRValues(to_return, tAmount, takeFee, _getRate(), isReflections);\r\n        return to_return;\r\n    }\r\n\r\n    function isFeeless(bool isSale, bool isPurchase) internal view returns (bool) {\r\n        return((isSale && sellFee == 0) || (isPurchase && totalFee == 0) || (!isSale && !isPurchase && transferFee == 0));\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee, bool isSale, bool isPurchase, bool isReflections) private view returns (valuesFromGetValues memory s) {\r\n        if(!takeFee && !isReflections || isFeeless(isSale, isPurchase) && !isReflections) {\r\n          s.tTransferAmount = tAmount;\r\n          return s; }\r\n        if(!isSale && !isPurchase && !isReflections){\r\n            uint256 feeAmount = tAmount.mul(transferFee).div(denominator);\r\n            if(feeRates.rfi <= transferFee){s.tRfi = tAmount*feeRates.rfi/denominator;}\r\n            s.tTaxes = feeAmount.sub(s.tRfi);\r\n            s.tTransferAmount = tAmount-feeAmount; }\r\n        if(isSale && !isReflections){\r\n            uint256 feeAmount = tAmount.mul(sellFee).div(denominator);\r\n            if(feeRates.rfi <= sellFee){s.tRfi = tAmount*feeRates.rfi/denominator;}\r\n            s.tTaxes = feeAmount.sub(s.tRfi);\r\n            s.tTransferAmount = tAmount-feeAmount; }\r\n        if(isPurchase && !isReflections){\r\n            uint256 feeAmount = tAmount.mul(totalFee).div(denominator);\r\n            if(feeRates.rfi <= totalFee){s.tRfi = tAmount*feeRates.rfi/denominator;}\r\n            s.tTaxes = feeAmount.sub(s.tRfi);\r\n            s.tTransferAmount = tAmount-feeAmount; }\r\n        if(isReflections){\r\n            s.tRfi = tAmount;\r\n            s.tTransferAmount = tAmount; }\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate, bool isReflections) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rTaxes) {\r\n        rAmount = tAmount*currentRate;\r\n        if(!takeFee && !isReflections){\r\n            return(rAmount, rAmount, 0,0);}\r\n        if(isReflections){\r\n            rRfi = s.tRfi*currentRate;\r\n            rTransferAmount =  rAmount-rRfi;\r\n            return(rAmount, rTransferAmount, rRfi, 0);}\r\n        rRfi = s.tRfi*currentRate;\r\n        rTaxes = s.tTaxes*currentRate;\r\n        rTransferAmount =  rAmount-rRfi-rTaxes;\r\n        return (rAmount, rTransferAmount, rRfi, rTaxes);\r\n    }\r\n\r\n    function getRateAdditional(uint256 amount) internal view returns (uint256, uint256) {\r\n        uint256 _tRfi = amount; uint256 _rRfi = amount.mul(_getRate());\r\n        return(_rRfi, _tRfi);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply-_rOwned[_excluded[i]];\r\n            tSupply = tSupply-_tOwned[_excluded[i]]; }\r\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aP\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReflectionsTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"mytotalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionsInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionsTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBaseTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercent\",\"type\":\"uint256\"}],\"name\":\"setBurnAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setBurnParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reflections\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"}],\"name\":\"setIntegrationWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_default\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionsPercent\",\"type\":\"uint256\"}],\"name\":\"setReflectionsAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setReflectionsParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Libra", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6fa08c69face258ad7c1fea11551d7e10d7f172073a33713044862208fcde2d"}