{"SourceCode": "// SPDX-License-Identifier: MIT \r\n/* \r\nTelegram: https://t.me/steamedhamsportal \r\n*/ \r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol \r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol) \r\npragma solidity ^0.8.1; \r\n/** \r\n * @dev Collection of functions related to the address type \r\n */ \r\nlibrary Address { \r\n    /** \r\n     * @dev Returns true if `account` is a contract. \r\n     * \r\n     * [IMPORTANT] \r\n     * ==== \r\n     * It is unsafe to assume that an address for which this function returns \r\n     * false is an externally-owned account (EOA) and not a contract. \r\n     * \r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses: \r\n     * \r\n     *  - an externally-owned account \r\n     *  - a contract in construction \r\n     *  - an address where a contract will be created \r\n     *  - an address where a contract lived, but was destroyed \r\n     * ==== \r\n     * \r\n     * [IMPORTANT] \r\n     * ==== \r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks! \r\n     * \r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets \r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract \r\n     * constructor. \r\n     * ==== \r\n     */ \r\n    function isContract(address account) internal view returns (bool) { \r\n        // This method relies on extcodesize/address.code.length, which returns 0 \r\n        // for contracts in construction, since the code is only stored at the end \r\n        // of the constructor execution. \r\n        return account.code.length > 0; \r\n    } \r\n    /** \r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to \r\n     * `recipient`, forwarding all available gas and reverting on errors. \r\n     * \r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost \r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit \r\n     * imposed by `transfer`, making them unable to receive funds via \r\n     * `transfer`. {sendValue} removes this limitation. \r\n     * \r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more]. \r\n     * \r\n     * IMPORTANT: because control is transferred to `recipient`, care must be \r\n     * taken to not create reentrancy vulnerabilities. Consider using \r\n     * {ReentrancyGuard} or the \r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */ \r\n    function sendValue(address payable recipient, uint256 amount) internal { \r\n        require( \r\n            address(this).balance >= amount, \r\n            \"Address: insufficient balance\" \r\n        ); \r\n        (bool success, ) = recipient.call{value: amount}(\"\"); \r\n        require( \r\n            success, \r\n            \"Address: unable to send value, recipient may have reverted\" \r\n        ); \r\n    } \r\n    /** \r\n     * @dev Performs a Solidity function call using a low level `call`. A \r\n     * plain `call` is an unsafe replacement for a function call: use this \r\n     * function instead. \r\n     * \r\n     * If `target` reverts with a revert reason, it is bubbled up by this \r\n     * function (like regular Solidity function calls). \r\n     * \r\n     * Returns the raw returned data. To convert to the expected return value, \r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     * \r\n     * Requirements: \r\n     * \r\n     * - `target` must be a contract. \r\n     * - calling `target` with `data` must not revert. \r\n     * \r\n     * _Available since v3.1._ \r\n     */ \r\n    function functionCall(address target, bytes memory data) \r\n        internal \r\n        returns (bytes memory) \r\n    { \r\n        return \r\n            functionCallWithValue( \r\n                target, \r\n                data, \r\n                0, \r\n                \"Address: low-level call failed\" \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with \r\n     * `errorMessage` as a fallback revert reason when `target` reverts. \r\n     * \r\n     * _Available since v3.1._ \r\n     */ \r\n    function functionCall( \r\n        address target, \r\n        bytes memory data, \r\n        string memory errorMessage \r\n    ) internal returns (bytes memory) { \r\n        return functionCallWithValue(target, data, 0, errorMessage); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \r\n     * but also transferring `value` wei to `target`. \r\n     * \r\n     * Requirements: \r\n     * \r\n     * - the calling contract must have an ETH balance of at least `value`. \r\n     * - the called Solidity function must be `payable`. \r\n     * \r\n     * _Available since v3.1._ \r\n     */ \r\n    function functionCallWithValue( \r\n        address target, \r\n        bytes memory data, \r\n        uint256 value \r\n    ) internal returns (bytes memory) { \r\n        return \r\n            functionCallWithValue( \r\n                target, \r\n                data, \r\n                value, \r\n                \"Address: low-level call with value failed\" \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but \r\n     * with `errorMessage` as a fallback revert reason when `target` reverts. \r\n     * \r\n     * _Available since v3.1._ \r\n     */ \r\n    function functionCallWithValue( \r\n        address target, \r\n        bytes memory data, \r\n        uint256 value, \r\n        string memory errorMessage \r\n    ) internal returns (bytes memory) { \r\n        require( \r\n            address(this).balance >= value, \r\n            \"Address: insufficient balance for call\" \r\n        ); \r\n        (bool success, bytes memory returndata) = target.call{value: value}( \r\n            data \r\n        ); \r\n        return \r\n            verifyCallResultFromTarget( \r\n                target, \r\n                success, \r\n                returndata, \r\n                errorMessage \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \r\n     * but performing a static call. \r\n     * \r\n     * _Available since v3.3._ \r\n     */ \r\n    function functionStaticCall(address target, bytes memory data) \r\n        internal \r\n        view \r\n        returns (bytes memory) \r\n    { \r\n        return \r\n            functionStaticCall( \r\n                target, \r\n                data, \r\n                \"Address: low-level static call failed\" \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \r\n     * but performing a static call. \r\n     * \r\n     * _Available since v3.3._ \r\n     */ \r\n    function functionStaticCall( \r\n        address target, \r\n        bytes memory data, \r\n        string memory errorMessage \r\n    ) internal view returns (bytes memory) { \r\n        (bool success, bytes memory returndata) = target.staticcall(data); \r\n        return \r\n            verifyCallResultFromTarget( \r\n                target, \r\n                success, \r\n                returndata, \r\n                errorMessage \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \r\n     * but performing a delegate call. \r\n     * \r\n     * _Available since v3.4._ \r\n     */ \r\n    function functionDelegateCall(address target, bytes memory data) \r\n        internal \r\n        returns (bytes memory) \r\n    { \r\n        return \r\n            functionDelegateCall( \r\n                target, \r\n                data, \r\n                \"Address: low-level delegate call failed\" \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \r\n     * but performing a delegate call. \r\n     * \r\n     * _Available since v3.4._ \r\n     */ \r\n    function functionDelegateCall( \r\n        address target, \r\n        bytes memory data, \r\n        string memory errorMessage \r\n    ) internal returns (bytes memory) { \r\n        (bool success, bytes memory returndata) = target.delegatecall(data); \r\n        return \r\n            verifyCallResultFromTarget( \r\n                target, \r\n                success, \r\n                returndata, \r\n                errorMessage \r\n            ); \r\n    } \r\n    /** \r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling \r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract. \r\n     * \r\n     * _Available since v4.8._ \r\n     */ \r\n    function verifyCallResultFromTarget( \r\n        address target, \r\n        bool success, \r\n        bytes memory returndata, \r\n        string memory errorMessage \r\n    ) internal view returns (bytes memory) { \r\n        if (success) { \r\n            if (returndata.length == 0) { \r\n                // only check isContract if the call was successful and the return data is empty \r\n                // otherwise we already know that it was a contract \r\n                require(isContract(target), \"Address: call to non-contract\"); \r\n            } \r\n            return returndata; \r\n        } else { \r\n            _revert(returndata, errorMessage); \r\n        } \r\n    } \r\n    /** \r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the \r\n     * revert reason or using the provided one. \r\n     * \r\n     * _Available since v4.3._ \r\n     */ \r\n    function verifyCallResult( \r\n        bool success, \r\n        bytes memory returndata, \r\n        string memory errorMessage \r\n    ) internal pure returns (bytes memory) { \r\n        if (success) { \r\n            return returndata; \r\n        } else { \r\n            _revert(returndata, errorMessage); \r\n        } \r\n    } \r\n    function _revert(bytes memory returndata, string memory errorMessage) \r\n        private \r\n        pure \r\n    { \r\n        // Look for revert reason and bubble it up if present \r\n        if (returndata.length > 0) { \r\n            // The easiest way to bubble the revert reason is using memory via assembly \r\n            /// @solidity memory-safe-assembly \r\n            assembly { \r\n                let returndata_size := mload(returndata) \r\n                revert(add(32, returndata), returndata_size) \r\n            } \r\n        } else { \r\n            revert(errorMessage); \r\n        } \r\n    } \r\n} \r\n// File: @openzeppelin/contracts/utils/Context.sol \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol) \r\npragma solidity ^0.8.0; \r\n/** \r\n * @dev Provides information about the current execution context, including the \r\n * sender of the transaction and its data. While these are generally available \r\n * via msg.sender and msg.data, they should not be accessed in such a direct \r\n * manner, since when dealing with meta-transactions the account sending and \r\n * paying for execution may not be the actual sender (as far as an application \r\n * is concerned). \r\n * \r\n * This contract is only required for intermediate, library-like contracts. \r\n */ \r\nabstract contract Context { \r\n    function _msgSender() internal view virtual returns (address) { \r\n        return msg.sender; \r\n    } \r\n    function _msgData() internal view virtual returns (bytes calldata) { \r\n        return msg.data; \r\n    } \r\n} \r\n// File: @openzeppelin/contracts/access/Ownable.sol \r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol) \r\npragma solidity ^0.8.0; \r\n/** \r\n * @dev Contract module which provides a basic access control mechanism, where \r\n * there is an account (an owner) that can be granted exclusive access to \r\n * specific functions. \r\n * \r\n * By default, the owner account will be the one that deploys the contract. This \r\n * can later be changed with {transferOwnership}. \r\n * \r\n * This module is used through inheritance. It will make available the modifier \r\n * `onlyOwner`, which can be applied to your functions to restrict their use to \r\n * the owner. \r\n */ \r\nabstract contract Ownable is Context { \r\n    address private _owner; \r\n    event OwnershipTransferred( \r\n        address indexed previousOwner, \r\n        address indexed newOwner \r\n    ); \r\n    /** \r\n     * @dev Initializes the contract setting the deployer as the initial owner. \r\n     */ \r\n    constructor() { \r\n        _transferOwnership(_msgSender()); \r\n    } \r\n    /** \r\n     * @dev Throws if called by any account other than the owner. \r\n     */ \r\n    modifier onlyOwner() { \r\n        _checkOwner(); \r\n        _; \r\n    } \r\n    /** \r\n     * @dev Returns the address of the current owner. \r\n     */ \r\n    function owner() public view virtual returns (address) { \r\n        return _owner; \r\n    } \r\n    /** \r\n     * @dev Throws if the sender is not the owner. \r\n     */ \r\n    function _checkOwner() internal view virtual { \r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); \r\n    } \r\n    /** \r\n     * @dev Leaves the contract without owner. It will not be possible to call \r\n     * `onlyOwner` functions anymore. Can only be called by the current owner. \r\n     * \r\n     * NOTE: Renouncing ownership will leave the contract without an owner, \r\n     * thereby removing any functionality that is only available to the owner. \r\n     */ \r\n    function renounceOwnership() public virtual onlyOwner { \r\n        _transferOwnership(address(0)); \r\n    } \r\n    /** \r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \r\n     * Can only be called by the current owner. \r\n     */ \r\n    function transferOwnership(address newOwner) public virtual onlyOwner { \r\n        require( \r\n            newOwner != address(0), \r\n            \"Ownable: new owner is the zero address\" \r\n        ); \r\n        _transferOwnership(newOwner); \r\n    } \r\n    /** \r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \r\n     * Internal function without access restriction. \r\n     */ \r\n    function _transferOwnership(address newOwner) internal virtual { \r\n        address oldOwner = _owner; \r\n        _owner = newOwner; \r\n        emit OwnershipTransferred(oldOwner, newOwner); \r\n    } \r\n} \r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol \r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol) \r\npragma solidity ^0.8.0; \r\n/** \r\n * @dev Interface of the ERC20 standard as defined in the EIP. \r\n */ \r\ninterface IERC20 { \r\n    /** \r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to \r\n     * another (`to`). \r\n     * \r\n     * Note that `value` may be zero. \r\n     */ \r\n    event Transfer(address indexed from, address indexed to, uint256 value); \r\n    /** \r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by \r\n     * a call to {approve}. `value` is the new allowance. \r\n     */ \r\n    event Approval( \r\n        address indexed owner, \r\n        address indexed spender, \r\n        uint256 value \r\n    ); \r\n    /** \r\n     * @dev Returns the amount of tokens in existence. \r\n     */ \r\n    function totalSupply() external view returns (uint256); \r\n    /** \r\n     * @dev Returns the amount of tokens owned by `account`. \r\n     */ \r\n    function balanceOf(address account) external view returns (uint256); \r\n    /** \r\n     * @dev Moves `amount` tokens from the caller's account to `to`. \r\n     * \r\n     * Returns a boolean value indicating whether the operation succeeded. \r\n     * \r\n     * Emits a {Transfer} event. \r\n     */ \r\n    function transfer(address to, uint256 amount) external returns (bool); \r\n    /** \r\n     * @dev Returns the remaining number of tokens that `spender` will be \r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \r\n     * zero by default. \r\n     * \r\n     * This value changes when {approve} or {transferFrom} are called. \r\n     */ \r\n    function allowance(address owner, address spender) \r\n        external \r\n        view \r\n        returns (uint256); \r\n    /** \r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens. \r\n     * \r\n     * Returns a boolean value indicating whether the operation succeeded. \r\n     * \r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk \r\n     * that someone may use both the old and the new allowance by unfortunate \r\n     * transaction ordering. One possible solution to mitigate this race \r\n     * condition is to first reduce the spender's allowance to 0 and set the \r\n     * desired value afterwards: \r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \r\n     * \r\n     * Emits an {Approval} event. \r\n     */ \r\n    function approve(address spender, uint256 amount) external returns (bool); \r\n    /** \r\n     * @dev Moves `amount` tokens from `from` to `to` using the \r\n     * allowance mechanism. `amount` is then deducted from the caller's \r\n     * allowance. \r\n     * \r\n     * Returns a boolean value indicating whether the operation succeeded. \r\n     * \r\n     * Emits a {Transfer} event. \r\n     */ \r\n    function transferFrom( \r\n        address from, \r\n        address to, \r\n        uint256 amount \r\n    ) external returns (bool); \r\n} \r\n// File: contracts/1_Storage.sol \r\ninterface IUniswapV2Router01 { \r\n    function factory() external pure returns (address); \r\n    function WETH() external pure returns (address); \r\n    function addLiquidity( \r\n        address tokenA, \r\n        address tokenB, \r\n        uint256 amountADesired, \r\n        uint256 amountBDesired, \r\n        uint256 amountAMin, \r\n        uint256 amountBMin, \r\n        address to, \r\n        uint256 deadline \r\n    ) \r\n        external \r\n        returns ( \r\n            uint256 amountA, \r\n            uint256 amountB, \r\n            uint256 liquidity \r\n        ); \r\n    function addLiquidityETH( \r\n        address token, \r\n        uint256 amountTokenDesired, \r\n        uint256 amountTokenMin, \r\n        uint256 amountETHMin, \r\n        address to, \r\n        uint256 deadline \r\n    ) \r\n        external \r\n        payable \r\n        returns ( \r\n            uint256 amountToken, \r\n            uint256 amountETH, \r\n            uint256 liquidity \r\n        ); \r\n    function removeLiquidity( \r\n        address tokenA, \r\n        address tokenB, \r\n        uint256 liquidity, \r\n        uint256 amountAMin, \r\n        uint256 amountBMin, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256 amountA, uint256 amountB); \r\n    function removeLiquidityETH( \r\n        address token, \r\n        uint256 liquidity, \r\n        uint256 amountTokenMin, \r\n        uint256 amountETHMin, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256 amountToken, uint256 amountETH); \r\n    function removeLiquidityWithPermit( \r\n        address tokenA, \r\n        address tokenB, \r\n        uint256 liquidity, \r\n        uint256 amountAMin, \r\n        uint256 amountBMin, \r\n        address to, \r\n        uint256 deadline, \r\n        bool approveMax, \r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s \r\n    ) external returns (uint256 amountA, uint256 amountB); \r\n    function removeLiquidityETHWithPermit( \r\n        address token, \r\n        uint256 liquidity, \r\n        uint256 amountTokenMin, \r\n        uint256 amountETHMin, \r\n        address to, \r\n        uint256 deadline, \r\n        bool approveMax, \r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s \r\n    ) external returns (uint256 amountToken, uint256 amountETH); \r\n    function swapExactTokensForTokens( \r\n        uint256 amountIn, \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256[] memory amounts); \r\n    function swapTokensForExactTokens( \r\n        uint256 amountOut, \r\n        uint256 amountInMax, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256[] memory amounts); \r\n    function swapExactETHForTokens( \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external payable returns (uint256[] memory amounts); \r\n    function swapTokensForExactETH( \r\n        uint256 amountOut, \r\n        uint256 amountInMax, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256[] memory amounts); \r\n    function swapExactTokensForETH( \r\n        uint256 amountIn, \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256[] memory amounts); \r\n    function swapETHForExactTokens( \r\n        uint256 amountOut, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external payable returns (uint256[] memory amounts); \r\n    function quote( \r\n        uint256 amountA, \r\n        uint256 reserveA, \r\n        uint256 reserveB \r\n    ) external pure returns (uint256 amountB); \r\n    function getAmountOut( \r\n        uint256 amountIn, \r\n        uint256 reserveIn, \r\n        uint256 reserveOut \r\n    ) external pure returns (uint256 amountOut); \r\n    function getAmountIn( \r\n        uint256 amountOut, \r\n        uint256 reserveIn, \r\n        uint256 reserveOut \r\n    ) external pure returns (uint256 amountIn); \r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) \r\n        external \r\n        view \r\n        returns (uint256[] memory amounts); \r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) \r\n        external \r\n        view \r\n        returns (uint256[] memory amounts); \r\n} \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 { \r\n    function removeLiquidityETHSupportingFeeOnTransferTokens( \r\n        address token, \r\n        uint256 liquidity, \r\n        uint256 amountTokenMin, \r\n        uint256 amountETHMin, \r\n        address to, \r\n        uint256 deadline \r\n    ) external returns (uint256 amountETH); \r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( \r\n        address token, \r\n        uint256 liquidity, \r\n        uint256 amountTokenMin, \r\n        uint256 amountETHMin, \r\n        address to, \r\n        uint256 deadline, \r\n        bool approveMax, \r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s \r\n    ) external returns (uint256 amountETH); \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens( \r\n        uint256 amountIn, \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external; \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens( \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external payable; \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens( \r\n        uint256 amountIn, \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline \r\n    ) external; \r\n} \r\ninterface IUniswapV2Factory { \r\n    event PairCreated( \r\n        address indexed token0, \r\n        address indexed token1, \r\n        address pair, \r\n        uint256 \r\n    ); \r\n    function feeTo() external view returns (address); \r\n    function feeToSetter() external view returns (address); \r\n    function getPair(address tokenA, address tokenB) \r\n        external \r\n        view \r\n        returns (address pair); \r\n    function allPairs(uint256) external view returns (address pair); \r\n    function allPairsLength() external view returns (uint256); \r\n    function createPair(address tokenA, address tokenB) \r\n        external \r\n        returns (address pair); \r\n    function setFeeTo(address) external; \r\n    function setFeeToSetter(address) external; \r\n} \r\npragma solidity >=0.8.18; \r\ncontract SteamedHams is IERC20, Ownable { \r\n    using Address for address; \r\n    mapping(address => uint256) private _balance; \r\n    mapping(address => mapping(address => uint256)) private _allowances; \r\n    mapping(address => bool) private _isExcludedFromFee; \r\n    mapping(address => bool) private _isExcludedFromMaxWallet; \r\n    uint256 private constant MAX = ~uint256(0); \r\n    uint256 private constant TOTALSUPPLY = 100000000 * 10**9; \r\n    string private constant NAME = \"Steamed Hams\"; \r\n    string private constant SYMBOL = \"$STEAMEDHAMS\"; \r\n    uint8 private constant DECIMALS = 9; \r\n    IUniswapV2Router02 public uniswapV2Router; \r\n    address public uniswapV2Pair; \r\n    bool private inSwapAndLiquify; \r\n    bool private sell = false; \r\n    uint32 buyTax = 2000; \r\n    uint32 sellTax = 2000 ; \r\n    address taxWallet; \r\n    bool swapAndLiquifyEnabled = true; \r\n    uint256 maxWalletSize = 3000000 * 10**9; //3% \r\n    uint256 numTokensSellToSwap = 200000 * 10**9; //0.2% \r\n    modifier lockTheSwap() { \r\n        inSwapAndLiquify = true; \r\n        _; \r\n        inSwapAndLiquify = false; \r\n    } \r\n    constructor() payable { \r\n        _balance[owner()] = TOTALSUPPLY; \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( \r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D \r\n        ); \r\n        // Create a uniswap pair for this new token \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) \r\n            .createPair(address(this), _uniswapV2Router.WETH()); \r\n        // set the rest of the contract variables \r\n        uniswapV2Router = _uniswapV2Router; \r\n        taxWallet = payable(0x7747e393e6A1cF0F12834432543D3cBa5EE18b4c); \r\n        // exclude owner and this contract from fee and maxWallet \r\n        _isExcludedFromFee[owner()] = true; \r\n        _isExcludedFromFee[address(this)] = true; \r\n        _isExcludedFromMaxWallet[owner()] = true; \r\n        _isExcludedFromMaxWallet[address(this)] = true; \r\n        emit Transfer(address(0), owner(), TOTALSUPPLY); \r\n    } \r\n    //to recieve ETH from uniswapV2Router when swaping \r\n    receive() external payable {} \r\n    function name() public pure returns (string memory) { \r\n        return NAME; \r\n    } \r\n    function symbol() public pure returns (string memory) { \r\n        return SYMBOL; \r\n    } \r\n    function decimals() public pure returns (uint8) { \r\n        return DECIMALS; \r\n    } \r\n    function totalSupply() public pure override returns (uint256) { \r\n        return TOTALSUPPLY; \r\n    } \r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return _balance[account]; \r\n    } \r\n    function transfer(address recipient, uint256 amount) \r\n        public \r\n        override \r\n        returns (bool) \r\n    { \r\n        _transfer(_msgSender(), recipient, amount); \r\n        return true; \r\n    } \r\n    function allowance(address owner, address spender) \r\n        public \r\n        view \r\n        override \r\n        returns (uint256) \r\n    { \r\n        return _allowances[owner][spender]; \r\n    } \r\n    function approve(address spender, uint256 amount) \r\n        public \r\n        override \r\n        returns (bool) \r\n    { \r\n        _approve(_msgSender(), spender, amount); \r\n        return true; \r\n    } \r\n    function transferFrom( \r\n        address sender, \r\n        address recipient, \r\n        uint256 amount \r\n    ) public override returns (bool) { \r\n        _transfer(sender, recipient, amount); \r\n        _approve( \r\n            sender, \r\n            _msgSender(), \r\n            _allowances[sender][msg.sender] - amount \r\n        ); \r\n        return true; \r\n    } \r\n    function _approve( \r\n        address owner, \r\n        address spender, \r\n        uint256 amount \r\n    ) private { \r\n        require(owner != address(0), \"ERC20: approve from the zero address\"); \r\n        require(spender != address(0), \"ERC20: approve to the zero address\"); \r\n        _allowances[owner][spender] = amount; \r\n        emit Approval(owner, spender, amount); \r\n    } \r\n    //Set Sell Taxes Functions. Capped at 10% \r\n    function setSellTax(uint32 newSellTax) external onlyOwner { \r\n        sellTax = newSellTax; \r\n    } \r\n    //Set BUy Taxes Functions. Capped at 10% \r\n    function setBuyTax(uint32 newBuyTax) external onlyOwner { \r\n        buyTax = newBuyTax; \r\n    } \r\n    //Update wallet functions \r\n    function isExcludedFromFee(address account) public view returns (bool) { \r\n        return _isExcludedFromFee[account]; \r\n    } \r\n    function isExcludedFromMaxWallet(address account) \r\n        public \r\n        view \r\n        returns (bool) \r\n    { \r\n        return _isExcludedFromMaxWallet[account]; \r\n    } \r\n    //main transfer function \r\n    function _transfer( \r\n        address from, \r\n        address to, \r\n        uint256 amount \r\n    ) private { \r\n        require(from != address(0), \"ERC20: transfer from the zero address\"); \r\n        require(to != address(0), \"ERC20: transfer to the zero address\"); \r\n        require(amount > 0, \"Transfer amount must be greater than zero\"); \r\n        uint256 contractTokenBalance = balanceOf(address(this)); \r\n        uint256 swapAmount = 0; \r\n        sell = false; \r\n        if (to == uniswapV2Pair) { \r\n            sell = true; \r\n        } \r\n        //swap if conditions are met \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToSwap; \r\n        if ( \r\n            from != uniswapV2Pair && \r\n            overMinTokenBalance && \r\n            !inSwapAndLiquify && \r\n            swapAndLiquifyEnabled \r\n        ) { \r\n             if (contractTokenBalance >= numTokensSellToSwap * 2) { \r\n                swapAmount = numTokensSellToSwap; \r\n            } else { \r\n                swapAmount = contractTokenBalance; \r\n            } \r\n           swapTaxes(swapAmount); \r\n        } \r\n        //check if enabled for tax free \r\n        bool takeFee = true; \r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) { \r\n            takeFee = false; \r\n        } \r\n        _transferStandard(from, to, amount, takeFee); \r\n    } \r\n    function swapTaxes(uint256 bal) private lockTheSwap { \r\n    \r\n       \r\n            swapTokensForEth(bal); \r\n            uint256 balance = address(this).balance; \r\n            payable(taxWallet).transfer(balance); \r\n    } \r\n    function _transferStandard( \r\n        address sender, \r\n        address recipient, \r\n        uint256 tAmount, \r\n        bool takeFee \r\n    ) private { \r\n        uint256 taxAmount = 0; \r\n        if ((sender == owner() || recipient == owner())) { \r\n            _balance[recipient] = _balance[recipient] + (tAmount); \r\n            _balance[sender] = _balance[sender] - (tAmount); \r\n            emit Transfer(sender, recipient, tAmount); \r\n        } else { \r\n            if (takeFee == true) { \r\n                if ( \r\n                    recipient != uniswapV2Pair && \r\n                    (_isExcludedFromMaxWallet[sender] != true || \r\n                        _isExcludedFromMaxWallet[recipient] != true) \r\n                ) { \r\n                    require( \r\n                        (balanceOf(recipient) + (tAmount)) <= maxWalletSize, \r\n                        \"Transfer exceeds max wallet size\" \r\n                    ); \r\n                } \r\n                if (sell == true) { \r\n                    taxAmount = ((tAmount * sellTax) / (10000)); \r\n                } else { \r\n                    taxAmount = ((tAmount * buyTax) / (10000)); \r\n                } \r\n                uint256 tTransferAmount = tAmount - (taxAmount); \r\n                _balance[sender] = _balance[sender] - (tAmount); \r\n                _balance[recipient] = _balance[recipient] + (tTransferAmount); \r\n                _balance[address(this)]  = _balance[address(this)] + (taxAmount); \r\n                emit Transfer(sender, recipient, tTransferAmount); \r\n            } else { \r\n                _balance[sender] = _balance[sender] - (tAmount); \r\n                _balance[recipient] = _balance[recipient] + (tAmount); \r\n                emit Transfer(sender, recipient, tAmount); \r\n            } \r\n        } \r\n    } \r\n    //swap tokens to eth \r\n    function swapTokensForEth(uint256 tokenAmount) private { \r\n        // generate the uniswap pair path of token -> weth \r\n        address[] memory path = new address[](2); \r\n        path[0] = address(this); \r\n        path[1] = uniswapV2Router.WETH(); \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount); \r\n        // make the swap \r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( \r\n            tokenAmount, \r\n            0, // accept any amount of ETH \r\n            path, \r\n            address(this), \r\n            block.timestamp \r\n        ); \r\n    } \r\n\r\n    function disableLimt() external onlyOwner { \r\n        maxWalletSize = MAX; \r\n        swapAndLiquifyEnabled = false; \r\n        buyTax = 0; \r\n        sellTax = 0; \r\n    } \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newBuyTax\",\"type\":\"uint32\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newSellTax\",\"type\":\"uint32\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SteamedHams", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc4573fa42b52d3815253645108473a1875b4545eaec534dabddb71f958a9250"}