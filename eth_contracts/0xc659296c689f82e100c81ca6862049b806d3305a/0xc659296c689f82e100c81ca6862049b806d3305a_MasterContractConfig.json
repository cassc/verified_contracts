{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/periphery/MasterContractConfigurationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.22;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {ICauldronV1} from \\\"interfaces/ICauldronV1.sol\\\";\\n\\nstruct MasterContractConfiguration {\\n    uint24 collaterizationRate;\\n    uint24 liquidationMultiplier;\\n}\\n\\ncontract MasterContractConfigurationRegistry is Owned {\\n    error ErrInvalidConfigration();\\n    error ErrInvalidMasterContract(ICauldronV1 masterContract);\\n    error ErrLengthMismatch();\\n\\n    mapping(ICauldronV1 => MasterContractConfiguration) public configurations;\\n\\n    constructor(address owner_) Owned(owner_) {}\\n\\n    function setConfigurations(\\n        ICauldronV1[] calldata masterContracts_,\\n        MasterContractConfiguration[] calldata configurations_\\n    ) external onlyOwner {\\n        if (masterContracts_.length != configurations_.length) {\\n            revert ErrLengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < masterContracts_.length; ++i) {\\n            ICauldronV1 masterContract = masterContracts_[i];\\n            MasterContractConfiguration calldata configuration = configurations_[i];\\n\\n            if (address(masterContract) == address(0)) {\\n                revert ErrInvalidMasterContract(masterContract);\\n            }\\n\\n            if (configuration.collaterizationRate == 0 || configuration.liquidationMultiplier == 0) {\\n                revert ErrInvalidConfigration();\\n            }\\n\\n            configurations[masterContract] = configuration;\\n        }\\n    }\\n\\n    function removeConfigurations(ICauldronV1[] calldata masterContracts_) external onlyOwner {\\n        for (uint256 i = 0; i < masterContracts_.length; ++i) {\\n            ICauldronV1 masterContract = masterContracts_[i];\\n\\n            if (address(masterContract) == address(0)) {\\n                revert ErrInvalidMasterContract(masterContract);\\n            }\\n\\n            delete configurations[masterContract];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICauldronV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IOracle} from \\\"interfaces/IOracle.sol\\\";\\n\\ninterface ICauldronV1 {\\n    function accrue() external;\\n\\n    function withdrawFees() external;\\n\\n    function accrueInfo() external view returns (uint64, uint128);\\n\\n    function setFeeTo(address newFeeTo) external;\\n\\n    function feeTo() external view returns (address);\\n\\n    function masterContract() external view returns (ICauldronV1);\\n\\n    function bentoBox() external view returns (address);\\n\\n    function exchangeRate() external view returns (uint256 rate);\\n\\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function oracleData() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IOracle {\\n    function decimals() external view returns (uint8);\\n\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"/=src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"BoringSolidity/=lib/BoringSolidity/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"utils/=utils/\",\r\n      \"libraries/=src/libraries/\",\r\n      \"interfaces/=src/interfaces/\",\r\n      \"cauldrons/=src/cauldrons/\",\r\n      \"swappers/=src/swappers/\",\r\n      \"oracles/=src/oracles/\",\r\n      \"strategies/=src/strategies/\",\r\n      \"tokens/=src/tokens/\",\r\n      \"periphery/=src/periphery/\",\r\n      \"mixins/=src/mixins/\",\r\n      \"lenses/=src/lenses/\",\r\n      \"surl/=lib/surl/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"forge-deploy/=lib/forge-deploy/contracts/\",\r\n      \"ExcessivelySafeCall/=lib/ExcessivelySafeCall/src/\",\r\n      \"safe-contracts/=lib/safe-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 400\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrInvalidConfigration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ICauldronV1\",\"name\":\"masterContract\",\"type\":\"address\"}],\"name\":\"ErrInvalidMasterContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ICauldronV1\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"configurations\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"collaterizationRate\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationMultiplier\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICauldronV1[]\",\"name\":\"masterContracts_\",\"type\":\"address[]\"}],\"name\":\"removeConfigurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICauldronV1[]\",\"name\":\"masterContracts_\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"collaterizationRate\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"liquidationMultiplier\",\"type\":\"uint24\"}],\"internalType\":\"struct MasterContractConfiguration[]\",\"name\":\"configurations_\",\"type\":\"tuple[]\"}],\"name\":\"setConfigurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterContractConfigurationRegistry", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "0000000000000000000000008764f421ab0c682b4ba1d7e269c09187c1efbfaf", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}