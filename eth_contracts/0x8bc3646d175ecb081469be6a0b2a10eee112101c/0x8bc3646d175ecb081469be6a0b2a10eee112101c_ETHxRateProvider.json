{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ETHxRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IRateProvider.sol\\\";\\nimport \\\"./interfaces/IStaderStakePoolManager.sol\\\";\\n\\n/**\\n * @title ETHx Rate Provider\\n * @notice Returns the value of ETHx in terms of ETH\\n */\\ncontract ETHxRateProvider is IRateProvider {\\n    IStaderStakePoolManager public immutable STADER_STAKE_POOL_MANAGER;\\n\\n    constructor(IStaderStakePoolManager _staderStakePoolManager) {\\n        STADER_STAKE_POOL_MANAGER = _staderStakePoolManager;\\n    }\\n\\n    /**\\n     * @return the value of ETHx in terms of ETH\\n     */\\n    function getRate() external view override returns (uint256) {\\n        return STADER_STAKE_POOL_MANAGER.getExchangeRate() / 10 ** 18;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n// TODO: pull this from the monorepo\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStaderStakePoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface IStaderStakePoolManager {\\n    // Errors\\n    error InvalidDepositAmount();\\n    error UnsupportedOperation();\\n    error InsufficientBalance();\\n    error TransferFailed();\\n    error PoolIdDoesNotExit();\\n    error CooldownNotComplete();\\n    error UnsupportedOperationInSafeMode();\\n\\n    // Events\\n    event UpdatedStaderConfig(address staderConfig);\\n    event Deposited(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n    event ExecutionLayerRewardsReceived(uint256 amount);\\n    event AuctionedEthReceived(uint256 amount);\\n    event ReceivedExcessEthFromPool(uint8 indexed poolId);\\n    event TransferredETHToUserWithdrawManager(uint256 amount);\\n    event ETHTransferredToPool(uint256 indexed poolId, address poolAddress, uint256 validatorCount);\\n    event WithdrawVaultUserShareReceived(uint256 amount);\\n    event UpdatedExcessETHDepositCoolDown(uint256 excessETHDepositCoolDown);\\n\\n    function deposit(address _receiver) external payable returns (uint256);\\n\\n    function previewDeposit(uint256 _assets) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 _shares) external view returns (uint256);\\n\\n    function getExchangeRate() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function convertToShares(uint256 _assets) external view returns (uint256);\\n\\n    function convertToAssets(uint256 _shares) external view returns (uint256);\\n\\n    function maxDeposit() external view returns (uint256);\\n\\n    function minDeposit() external view returns (uint256);\\n\\n    function receiveExecutionLayerRewards() external payable;\\n\\n    function receiveWithdrawVaultUserShare() external payable;\\n\\n    function receiveEthFromAuction() external payable;\\n\\n    function receiveExcessEthFromPool(uint8 _poolId) external payable;\\n\\n    function transferETHToUserWithdrawManager(uint256 _amount) external;\\n\\n    function validatorBatchDeposit(uint8 _poolId) external;\\n\\n    function depositETHOverTargetWeight() external;\\n\\n    function isVaultHealthy() external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IStaderStakePoolManager\",\"name\":\"_staderStakePoolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STADER_STAKE_POOL_MANAGER\",\"outputs\":[{\"internalType\":\"contract IStaderStakePoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETHxRateProvider", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cf5ea1b38380f6af39068375516daf40ed70d299", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}