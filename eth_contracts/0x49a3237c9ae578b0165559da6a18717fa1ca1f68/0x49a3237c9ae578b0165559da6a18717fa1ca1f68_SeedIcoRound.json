{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\ncontract SeedIcoRound is ReentrancyGuard {\r\n    IERC20 immutable GRL;\r\n    IERC20 immutable DAI;\r\n    AggregatorV3Interface private ethToUsdPriceFeed;\r\n    AggregatorV3Interface private daiToEthPriceFeed;\r\n\r\n    uint256 public immutable totalTokens = 1 * 10 ** 8 * 10 ** 9;\r\n    address public immutable admin;\r\n    uint256 public tokensSold;\r\n    bool public isGCOStarted;\r\n    address immutable fundReceiver;\r\n    uint256 private immutable tokensPerPhase = 2 * 10 ** 7 * 10 ** 9;\r\n    uint256[] private pricePerPhase;\r\n\r\n    uint256 private startTime;\r\n    uint256 private immutable phaseDuration;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor(IERC20 _grl, IERC20 _dai) {\r\n        pricePerPhase = new uint256[](5);\r\n        pricePerPhase[0] = 20000000000000000; //0.02\r\n        pricePerPhase[1] = 24000000000000000; //0.024\r\n        pricePerPhase[2] = 28800000000000000; //0.0288\r\n        pricePerPhase[3] = 34560000000000000; //0.03456\r\n        pricePerPhase[4] = 41470000000000000; //0.04147\r\n        GRL = _grl;\r\n        DAI = _dai;\r\n        ethToUsdPriceFeed = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        ); //mainnet\r\n        daiToEthPriceFeed = AggregatorV3Interface(\r\n            0x773616E4d11A78F511299002da57A0a94577F1f4\r\n        ); //mainnet\r\n        admin = msg.sender;\r\n        phaseDuration = 604800;\r\n        fundReceiver = address(0x48FD2F7CaC483A923F3F164997B2b6435AF50205);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin, \"You're not authorized!\");\r\n        _;\r\n    }\r\n\r\n    function buyWithEth() public noReentrant  payable {\r\n        require(msg.value > 0, \"Inavlid eth amount\");\r\n        (uint256 grlEthPrice, ) = getGrlPrice();\r\n        require(msg.value >= grlEthPrice, \"Lower value than Price\");\r\n        uint256 tokensToBuy = grlOfEth(msg.value);\r\n        require(\r\n            tokensSold + tokensToBuy <= totalTokens,\r\n            \"Not enough tokens left\"\r\n        );\r\n        require(\r\n            block.timestamp <= startTime + phaseDuration * 5,\r\n            \"No more coin offering!\"\r\n        );\r\n        GRL.transfer(msg.sender, tokensToBuy);\r\n        (bool success, ) = fundReceiver.call{value: msg.value}(\"\");\r\n        require(success);\r\n        tokensSold += tokensToBuy;\r\n        emit Transfer(address(this), msg.sender, tokensToBuy);\r\n    }\r\n\r\n    function buyWithDAI(uint256 _amountOfDAI) noReentrant public {\r\n        require(_amountOfDAI > 0);\r\n        (, uint256 priceOfGrl) = getGrlPrice();\r\n        require(_amountOfDAI >= priceOfGrl, \"Lower value than Price\");\r\n        uint256 tokensToBuy = grlOfDai(_amountOfDAI);\r\n        require(\r\n            tokensSold + tokensToBuy <= totalTokens,\r\n            \"Not enough tokens left\"\r\n        );\r\n        require(\r\n            block.timestamp <= startTime + phaseDuration * 5,\r\n            \"No more coin offering!\"\r\n        );\r\n        require(\r\n            DAI.transferFrom(msg.sender, fundReceiver, _amountOfDAI),\r\n            \"You must Deposit some DAI\"\r\n        );\r\n        GRL.transfer(msg.sender, tokensToBuy);\r\n        tokensSold += tokensToBuy;\r\n    }\r\n\r\n    function ethPriceInUSD() public view returns (uint256) {\r\n        int256 answer = ethToUsdPriceFeed.latestAnswer();\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    function daiPriceInEth() public view returns (uint256) {\r\n        (, int256 answer, , , ) = daiToEthPriceFeed.latestRoundData();\r\n        return uint256(answer);\r\n    }\r\n\r\n    function convertDaiToEth(uint256 daiAmount) public view returns (uint256) {\r\n        uint256 daiPrice = daiPriceInEth();\r\n        uint256 daiAmountInEth = (daiPrice * daiAmount) / 1000000000000000000;\r\n        return daiAmountInEth;\r\n    }\r\n\r\n    function convertEthToUsd(uint256 ethAmount) public view returns (uint256) {\r\n        uint256 ethPrice = ethPriceInUSD();\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n\r\n    function startGCO() external onlyOwner {\r\n        startTime = block.timestamp;\r\n        isGCOStarted = true;\r\n    }\r\n\r\n    function grlOfDai(uint256 _amountOfDAI) public view returns (uint256) {\r\n        (, uint256 price) = getGrlPrice();\r\n        uint256 tokensCalculated = (_amountOfDAI * 10 ** 9) / price;\r\n        return tokensCalculated;\r\n    }\r\n\r\n    function grlOfEth(uint256 _amountOfEth) public view returns (uint256) {\r\n        (, uint256 price) = getGrlPrice();\r\n        uint256 convertedUsd = convertEthToUsd(_amountOfEth);\r\n        uint256 tokensCalculated = (convertedUsd * 10 ** 9) / price;\r\n        return tokensCalculated;\r\n    }\r\n\r\n    function getGrlPrice() public view returns (uint256, uint256) {\r\n        require(isGCOStarted == true, \"GCO not started yet!\");\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 fixedFrice = pricePerPhase[4];\r\n        uint256 grlEthPrice;\r\n        uint256 grlPrice;\r\n        if (currentTime <= startTime + phaseDuration) {\r\n            grlPrice = pricePerPhase[0];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[0]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase ||\r\n            currentTime <= startTime + phaseDuration * 2\r\n        ) {\r\n            grlPrice = pricePerPhase[1];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[1]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase * 2 ||\r\n            currentTime <= startTime + phaseDuration * 3\r\n        ) {\r\n            grlPrice = pricePerPhase[2];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[2]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase * 3 ||\r\n            currentTime <= startTime + phaseDuration * 4\r\n        ) {\r\n            grlPrice = pricePerPhase[3];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[3]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase * 4 ||\r\n            currentTime <= startTime + phaseDuration * 5\r\n        ) {\r\n            grlPrice = fixedFrice;\r\n            grlEthPrice = convertDaiToEth(fixedFrice);\r\n        } else {\r\n            grlPrice = fixedFrice;\r\n            grlEthPrice = convertDaiToEth(fixedFrice);\r\n        }\r\n\r\n        return (grlEthPrice, grlPrice);\r\n    }\r\n\r\n    function withdrawGRL() external onlyOwner {\r\n        uint256 grlBalance = GRL.balanceOf(address(this));\r\n        require(grlBalance > 0, \"no GRL in contract!\");\r\n        GRL.transfer(admin, grlBalance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_grl\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfDAI\",\"type\":\"uint256\"}],\"name\":\"buyWithDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"convertDaiToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrlPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfDAI\",\"type\":\"uint256\"}],\"name\":\"grlOfDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfEth\",\"type\":\"uint256\"}],\"name\":\"grlOfEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGCOStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGCO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGRL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeedIcoRound", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ef5eff55f665b66385b6692ebd80680e581d81da0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c781fafaf7cf602d857a8964bb4d5e3b3b331e79bbcca41f2b9386902e8e4cc5"}