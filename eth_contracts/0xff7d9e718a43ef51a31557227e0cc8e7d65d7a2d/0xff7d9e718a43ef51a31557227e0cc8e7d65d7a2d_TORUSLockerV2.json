{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenomics/TORUSLockerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../libraries/ScaledMath.sol\\\";\\nimport \\\"../../interfaces/tokenomics/ITORUSLockerV2.sol\\\";\\nimport \\\"../../interfaces/tokenomics/ITORUSToken.sol\\\";\\nimport \\\"../../interfaces/tokenomics/ITORUSVoteLocker.sol\\\";\\nimport \\\"../../interfaces/IController.sol\\\";\\n\\ncontract TORUSLockerV2 is ITORUSLockerV2, Ownable {\\n    using SafeERC20 for ITORUSToken;\\n    using SafeERC20 for IERC20;\\n    using ScaledMath for uint256;\\n    using ScaledMath for uint128;\\n    using MerkleProof for MerkleProof.Proof;\\n\\n    uint128 internal constant _MIN_LOCK_TIME = 120 days;\\n    uint128 internal constant _MAX_LOCK_TIME = 240 days;\\n    uint128 internal constant _GRACE_PERIOD = 28 days;\\n    uint128 internal constant _MIN_BOOST = 1e18;\\n    uint128 internal constant _MAX_BOOST = 1.5e18;\\n    uint128 internal constant _KICK_PENALTY = 1e17;\\n    uint256 internal constant _MAX_KICK_PENALTY_AMOUNT = 1000e18;\\n\\n    ITORUSToken public immutable torusToken;\\n\\n    // Boost data\\n    mapping(address => uint256) public lockedBalance;\\n    mapping(address => uint256) public lockedBoosted;\\n    mapping(address => VoteLock[]) public voteLocks;\\n    mapping(address => uint256) internal _airdroppedBoost;\\n    mapping(address => bool) public override claimedAirdrop;\\n    uint64 internal _nextId;\\n    uint256 public totalLocked;\\n    uint256 public totalBoosted;\\n    bool public isShutdown;\\n\\n    // Fee data\\n    IERC20 public immutable crv;\\n    IERC20 public immutable cvx;\\n    uint256 public accruedFeesIntegralCrv;\\n    uint256 public accruedFeesIntegralCvx;\\n    mapping(address => uint256) public perAccountAccruedCrv;\\n    mapping(address => uint256) public perAccountFeesCrv;\\n    mapping(address => uint256) public perAccountAccruedCvx;\\n    mapping(address => uint256) public perAccountFeesCvx;\\n\\n    address public immutable treasury;\\n    IController public immutable controller;\\n\\n    constructor(address _controller, address _torusToken, address _treasury, address _crv, address _cvx) Ownable() {\\n        controller = IController(_controller);\\n        torusToken = ITORUSToken(_torusToken);\\n        treasury = _treasury;\\n        crv = IERC20(_crv);\\n        cvx = IERC20(_cvx);\\n    }\\n\\n    function lock(uint256 amount, uint64 lockTime) external override {\\n        lock(amount, lockTime, false);\\n    }\\n\\n    /// @notice Lock an amount of TORUS for vlTORUS.\\n    /// @param amount Amount of TORUS to lock.\\n    /// @param lockTime Duration of the lock.\\n    /// @param relock_ `True` if this is a relock of an existing lock.\\n    function lock(uint256 amount, uint64 lockTime, bool relock_) public override {\\n        lockFor(amount, lockTime, relock_, msg.sender);\\n    }\\n\\n    /// @notice Lock an amount of TORUS for vlTORUS.\\n    /// @param amount Amount of TORUS to lock.\\n    /// @param lockTime Duration of the lock.\\n    /// @param relock_ `True` if this is a relock of all existing locks.\\n    /// @param account The account to receive the vlTORUS.\\n    function lockFor(uint256 amount, uint64 lockTime, bool relock_, address account) public override {\\n        require(!isShutdown, \\\"locker suspended\\\");\\n        require((_MIN_LOCK_TIME <= lockTime) && (lockTime <= _MAX_LOCK_TIME), \\\"lock time invalid\\\");\\n        require(!relock_ || msg.sender == account, \\\"relock only for self\\\");\\n        _feeCheckpoint(account);\\n        torusToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint128 boost = computeBoost(lockTime);\\n        uint64 unlockTime = uint64(block.timestamp) + lockTime;\\n        uint256 boostedAmount;\\n\\n        if (relock_) {\\n            uint256 length = voteLocks[account].length;\\n            for (uint256 i; i < length; i++) {\\n                require(voteLocks[account][i].unlockTime < unlockTime, \\\"cannot move the unlock time up\\\");\\n            }\\n            delete voteLocks[account];\\n            totalBoosted -= lockedBoosted[account];\\n            lockedBoosted[account] = 0;\\n            _addVoteLock(account, lockedBalance[account] + amount, unlockTime, boost);\\n            boostedAmount = (lockedBalance[account] + amount).mulDown(uint256(boost));\\n        } else {\\n            _addVoteLock(account, amount, unlockTime, boost);\\n            boostedAmount = amount.mulDown(boost);\\n        }\\n        totalLocked += amount;\\n        totalBoosted += boostedAmount;\\n        lockedBalance[account] += amount;\\n        lockedBoosted[account] += boostedAmount;\\n        emit Locked(account, amount, unlockTime, relock_);\\n    }\\n\\n    /// @notice Process all expired locks of msg.sender and withdraw unlocked TORUS.\\n    function executeAvailableUnlocks() external override returns (uint256) {\\n        return executeAvailableUnlocksFor(msg.sender);\\n    }\\n\\n    /// @notice Process all expired locks of msg.sender and withdraw unlocked TORUS to `dst`.\\n    function executeAvailableUnlocksFor(address dst) public override returns (uint256) {\\n        require(dst != address(0), \\\"invalid destination\\\");\\n        _feeCheckpoint(msg.sender);\\n        uint256 sumUnlockable;\\n        uint256 sumBoosted;\\n        VoteLock[] storage _pending = voteLocks[msg.sender];\\n        uint256 i = _pending.length;\\n        while (i > 0) {\\n            i = i - 1;\\n\\n            if (isShutdown || _pending[i].unlockTime <= block.timestamp) {\\n                sumUnlockable += _pending[i].amount;\\n                sumBoosted += _pending[i].amount.mulDown(_pending[i].boost);\\n                _pending[i] = _pending[_pending.length - 1];\\n                _pending.pop();\\n            }\\n        }\\n        totalLocked -= sumUnlockable;\\n        totalBoosted -= sumBoosted;\\n        lockedBalance[msg.sender] -= sumUnlockable;\\n        lockedBoosted[msg.sender] -= sumBoosted;\\n        torusToken.safeTransfer(dst, sumUnlockable);\\n        emit UnlockExecuted(msg.sender, sumUnlockable);\\n        return sumUnlockable;\\n    }\\n\\n    /// @notice Process specified locks of msg.sender and withdraw unlocked TORUS to `dst`.\\n    /// @param dst Destination address to receive unlocked TORUS.\\n    /// @param lockIds Array of lock IDs to process.\\n    /// @return unlocked Amount of TORUS unlocked.\\n    function executeUnlocks(address dst, uint64[] calldata lockIds) public override returns (uint256) {\\n        _feeCheckpoint(msg.sender);\\n        uint256 sumUnlockable;\\n        uint256 sumBoosted;\\n        VoteLock[] storage _pending = voteLocks[msg.sender];\\n        for (uint256 idIndex; idIndex < lockIds.length; idIndex++) {\\n            uint256 index = _getLockIndexById(msg.sender, lockIds[idIndex]);\\n            require(isShutdown || _pending[index].unlockTime <= block.timestamp, \\\"lock not expired\\\");\\n            sumUnlockable += _pending[index].amount;\\n            sumBoosted += _pending[index].amount.mulDown(_pending[index].boost);\\n            _pending[index] = _pending[_pending.length - 1];\\n            _pending.pop();\\n        }\\n        totalLocked -= sumUnlockable;\\n        totalBoosted -= sumBoosted;\\n        lockedBalance[msg.sender] -= sumUnlockable;\\n        lockedBoosted[msg.sender] -= sumBoosted;\\n        torusToken.safeTransfer(dst, sumUnlockable);\\n        emit UnlockExecuted(msg.sender, sumUnlockable);\\n        return sumUnlockable;\\n    }\\n\\n    /// @notice Get unlocked TORUS balance for an address\\n    /// @param user Address to get unlocked TORUS balance for\\n    /// @return Unlocked TORUS balance\\n    function unlockableBalance(address user) public view override returns (uint256) {\\n        uint256 sumUnlockable = 0;\\n        VoteLock[] storage _pending = voteLocks[user];\\n        uint256 length = _pending.length;\\n        for (uint256 i; i < length; i++) {\\n            if (_pending[i].unlockTime <= uint128(block.timestamp)) {\\n                sumUnlockable += _pending[i].amount;\\n            }\\n        }\\n        return sumUnlockable;\\n    }\\n\\n    /// @notice Get unlocked boosted TORUS balance for an address\\n    /// @param user Address to get unlocked boosted TORUS balance for\\n    /// @return Unlocked boosted TORUS balance\\n    function unlockableBalanceBoosted(address user) public view override returns (uint256) {\\n        uint256 sumUnlockable = 0;\\n        VoteLock[] storage _pending = voteLocks[user];\\n        uint256 length = _pending.length;\\n        for (uint256 i; i < length; i++) {\\n            if (_pending[i].unlockTime <= uint128(block.timestamp)) {\\n                sumUnlockable += _pending[i].amount.mulDown(_pending[i].boost);\\n            }\\n        }\\n        return sumUnlockable;\\n    }\\n\\n    function shutDown() external override onlyOwner {\\n        require(!isShutdown, \\\"locker already suspended\\\");\\n        isShutdown = true;\\n        emit Shutdown();\\n    }\\n\\n    function recoverToken(address token) external override {\\n        require(token != address(torusToken) && token != address(crv) && token != address(cvx), \\\"cannot withdraw token\\\");\\n        IERC20 _token = IERC20(token);\\n        _token.safeTransfer(treasury, _token.balanceOf(address(this)));\\n        emit TokenRecovered(token);\\n    }\\n\\n    /// @notice Relock a specific lock\\n    /// @dev Users locking TORUS can create multiple locks therefore individual locks can be relocked separately.\\n    /// @param lockId Id of the lock to relock.\\n    /// @param lockTime Duration for which the locks's TORUS amount should be relocked for.\\n    function relock(uint64 lockId, uint64 lockTime) external override {\\n        require(!isShutdown, \\\"locker suspended\\\");\\n        require((_MIN_LOCK_TIME <= lockTime) && (lockTime <= _MAX_LOCK_TIME), \\\"lock time invalid\\\");\\n        _feeCheckpoint(msg.sender);\\n        _relock(lockId, lockTime);\\n    }\\n\\n    /// @notice Relock specified locks\\n    /// @param lockIds Ids of the locks to relock.\\n    /// @param lockTime Duration for which the locks's TORUS amount should be relocked for.\\n    function relockMultiple(uint64[] calldata lockIds, uint64 lockTime) external override {\\n        require(!isShutdown, \\\"locker suspended\\\");\\n        require((_MIN_LOCK_TIME <= lockTime) && (lockTime <= _MAX_LOCK_TIME), \\\"lock time invalid\\\");\\n        _feeCheckpoint(msg.sender);\\n        for (uint256 i; i < lockIds.length; i++) {\\n            _relock(lockIds[i], lockTime);\\n        }\\n    }\\n\\n    function _relock(uint64 lockId, uint64 lockTime) internal {\\n        uint256 lockIndex = _getLockIndexById(msg.sender, lockId);\\n\\n        uint128 boost = computeBoost(lockTime);\\n\\n        uint64 unlockTime = uint64(block.timestamp) + lockTime;\\n\\n        VoteLock[] storage locks = voteLocks[msg.sender];\\n        require(locks[lockIndex].unlockTime < unlockTime, \\\"cannot move the unlock time up\\\");\\n        uint256 amount = locks[lockIndex].amount;\\n        uint256 previousBoostedAmount = locks[lockIndex].amount.mulDown(locks[lockIndex].boost);\\n        locks[lockIndex] = locks[locks.length - 1];\\n        locks.pop();\\n\\n        _addVoteLock(msg.sender, amount, unlockTime, boost);\\n        uint256 boostedAmount = amount.mulDown(boost);\\n\\n        totalBoosted = totalBoosted + boostedAmount - previousBoostedAmount;\\n        lockedBoosted[msg.sender] = lockedBoosted[msg.sender] + boostedAmount - previousBoostedAmount;\\n\\n        emit Relocked(msg.sender, amount);\\n    }\\n\\n    function relock(uint64 lockTime) external override {\\n        require(!isShutdown, \\\"locker suspended\\\");\\n        require((_MIN_LOCK_TIME <= lockTime) && (lockTime <= _MAX_LOCK_TIME), \\\"lock time invalid\\\");\\n        _feeCheckpoint(msg.sender);\\n\\n        uint128 boost = computeBoost(lockTime);\\n\\n        uint64 unlockTime = uint64(block.timestamp) + lockTime;\\n\\n        uint256 length = voteLocks[msg.sender].length;\\n        for (uint256 i; i < length; i++) {\\n            require(voteLocks[msg.sender][i].unlockTime < unlockTime, \\\"cannot move the unlock time up\\\");\\n        }\\n        delete voteLocks[msg.sender];\\n        totalBoosted -= lockedBoosted[msg.sender];\\n        lockedBoosted[msg.sender] = 0;\\n        _addVoteLock(msg.sender, lockedBalance[msg.sender], unlockTime, boost);\\n        uint256 boostedAmount = lockedBalance[msg.sender].mulDown(uint256(boost));\\n        totalBoosted += boostedAmount;\\n        lockedBoosted[msg.sender] += boostedAmount;\\n        emit Relocked(msg.sender, lockedBalance[msg.sender]);\\n    }\\n\\n    /// @notice Kick an expired lock\\n    function kick(address user, uint64 lockId) external override {\\n        uint256 lockIndex = _getLockIndexById(user, lockId);\\n        VoteLock[] storage _pending = voteLocks[user];\\n        require(_pending[lockIndex].unlockTime + _GRACE_PERIOD <= uint128(block.timestamp), \\\"cannot kick this lock\\\");\\n        _feeCheckpoint(user);\\n        uint256 amount = _pending[lockIndex].amount;\\n        totalLocked -= amount;\\n        totalBoosted -= amount.mulDown(_pending[lockIndex].boost);\\n        lockedBalance[user] -= amount;\\n        lockedBoosted[user] -= amount.mulDown(_pending[lockIndex].boost);\\n        uint256 kickPenalty = amount.mulDown(_KICK_PENALTY);\\n        if (kickPenalty > _MAX_KICK_PENALTY_AMOUNT) {\\n            kickPenalty = _MAX_KICK_PENALTY_AMOUNT;\\n        }\\n        torusToken.safeTransfer(user, amount - kickPenalty);\\n        torusToken.safeTransfer(msg.sender, kickPenalty);\\n        emit KickExecuted(user, msg.sender, amount);\\n        _pending[lockIndex] = _pending[_pending.length - 1];\\n        _pending.pop();\\n    }\\n\\n    function receiveFees(uint256 amountCrv, uint256 amountCvx) external override {\\n        crv.safeTransferFrom(msg.sender, address(this), amountCrv);\\n        cvx.safeTransferFrom(msg.sender, address(this), amountCvx);\\n        accruedFeesIntegralCrv += amountCrv.divDown(totalBoosted);\\n        accruedFeesIntegralCvx += amountCvx.divDown(totalBoosted);\\n        emit FeesReceived(msg.sender, amountCrv, amountCvx);\\n    }\\n\\n    function claimFees() external override returns (uint256 crvAmount, uint256 cvxAmount) {\\n        _feeCheckpoint(msg.sender);\\n        crvAmount = perAccountFeesCrv[msg.sender];\\n        cvxAmount = perAccountFeesCvx[msg.sender];\\n        crv.safeTransfer(msg.sender, crvAmount);\\n        cvx.safeTransfer(msg.sender, cvxAmount);\\n        perAccountFeesCrv[msg.sender] = 0;\\n        perAccountFeesCvx[msg.sender] = 0;\\n        emit FeesClaimed(msg.sender, crvAmount, cvxAmount);\\n    }\\n\\n    function claimableFees(address account)\\n        external\\n        view\\n        override\\n        returns (uint256 claimableCrv, uint256 claimableCvx)\\n    {\\n        uint256 boost_ = lockedBoosted[account];\\n        claimableCrv =\\n            perAccountFeesCrv[account] + boost_.mulDown(accruedFeesIntegralCrv - perAccountAccruedCrv[account]);\\n        claimableCvx =\\n            perAccountFeesCvx[account] + boost_.mulDown(accruedFeesIntegralCvx - perAccountAccruedCvx[account]);\\n    }\\n\\n    function balanceOf(address user) external view override returns (uint256) {\\n        return totalVoteBoost(user);\\n    }\\n\\n    function _feeCheckpoint(address account) internal {\\n        uint256 boost_ = lockedBoosted[account];\\n        perAccountFeesCrv[account] += boost_.mulDown(accruedFeesIntegralCrv - perAccountAccruedCrv[account]);\\n        perAccountAccruedCrv[account] = accruedFeesIntegralCrv;\\n        perAccountFeesCvx[account] += boost_.mulDown(accruedFeesIntegralCvx - perAccountAccruedCvx[account]);\\n        perAccountAccruedCvx[account] = accruedFeesIntegralCvx;\\n    }\\n\\n    function computeBoost(uint128 lockTime) public pure override returns (uint128) {\\n        return (\\n            (_MAX_BOOST - _MIN_BOOST).mulDownUint128(\\n                (lockTime - _MIN_LOCK_TIME).divDownUint128(_MAX_LOCK_TIME - _MIN_LOCK_TIME)\\n            ) + _MIN_BOOST\\n        );\\n    }\\n\\n    function totalVoteBoost(address account) public view override returns (uint256) {\\n        return totalRewardsBoost(account).mulDown(controller.lpTokenStaker().getBoost(account));\\n    }\\n\\n    function totalRewardsBoost(address account) public view override returns (uint256) {\\n        return lockedBoosted[account] - unlockableBalanceBoosted(account);\\n    }\\n\\n    function userLocks(address account) external view override returns (VoteLock[] memory) {\\n        return voteLocks[account];\\n    }\\n\\n    function _getLockIndexById(address user, uint64 id) internal view returns (uint256) {\\n        uint256 length_ = voteLocks[user].length;\\n        for (uint256 i; i < length_; i++) {\\n            if (voteLocks[user][i].id == id) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"lock doesn't exist\\\");\\n    }\\n\\n    function _addVoteLock(address user, uint256 amount, uint64 unlockTime, uint128 boost) internal {\\n        uint64 id = _nextId;\\n        voteLocks[user].push(VoteLock(amount, unlockTime, boost, id));\\n        _nextId = id + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/ScaledMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nlibrary ScaledMath {\\n    uint256 internal constant DECIMALS = 18;\\n    uint256 internal constant ONE = 10**DECIMALS;\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * b) / (10**decimals);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * 10**decimals) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE) - 1) / b + 1;\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / int256(ONE);\\n    }\\n\\n    function mulDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * b) / uint128(ONE);\\n    }\\n\\n    function mulDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * b) / int256(10**decimals);\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * int256(ONE)) / b;\\n    }\\n\\n    function divDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * uint128(ONE)) / b;\\n    }\\n\\n    function divDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * int256(10**decimals)) / b;\\n    }\\n\\n    function convertScale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function convertScale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function upscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a * (10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a / (10**(fromDecimals - toDecimals));\\n    }\\n\\n    function upscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a * int256(10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a / int256(10**(fromDecimals - toDecimals));\\n    }\\n\\n    function intPow(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 result = ONE;\\n        for (uint256 i; i < n; ) {\\n            result = mulDown(result, a);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function absSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a >= b ? a - b : b - a;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ITORUSLockerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/MerkleProof.sol\\\";\\n\\ninterface ITORUSLockerV2 {\\n    event Locked(address indexed account, uint256 amount, uint256 unlockTime, bool relocked);\\n    event UnlockExecuted(address indexed account, uint256 amount);\\n    event Relocked(address indexed account, uint256 amount);\\n    event KickExecuted(address indexed account, address indexed kicker, uint256 amount);\\n    event FeesReceived(address indexed sender, uint256 crvAmount, uint256 cvxAmount);\\n    event FeesClaimed(address indexed claimer, uint256 crvAmount, uint256 cvxAmount);\\n    event AirdropBoostClaimed(address indexed claimer, uint256 amount);\\n    event Shutdown();\\n    event TokenRecovered(address indexed token);\\n\\n    struct VoteLock {\\n        uint256 amount;\\n        uint64 unlockTime;\\n        uint128 boost;\\n        uint64 id;\\n    }\\n\\n    function lock(uint256 amount, uint64 lockTime) external;\\n\\n    function lock(\\n        uint256 amount,\\n        uint64 lockTime,\\n        bool relock\\n    ) external;\\n\\n    function lockFor(\\n        uint256 amount,\\n        uint64 lockTime,\\n        bool relock,\\n        address account\\n    ) external;\\n\\n    function relock(uint64 lockId, uint64 lockTime) external;\\n\\n    function relock(uint64 lockTime) external;\\n\\n    function relockMultiple(uint64[] calldata lockIds, uint64 lockTime) external;\\n\\n    function totalBoosted() external view returns (uint256);\\n\\n    function shutDown() external;\\n\\n    function recoverToken(address token) external;\\n\\n    function executeAvailableUnlocks() external returns (uint256);\\n\\n    function executeAvailableUnlocksFor(address dst) external returns (uint256);\\n\\n    function executeUnlocks(address dst, uint64[] calldata lockIds) external returns (uint256);\\n\\n    // This will need to include the boosts etc.\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function unlockableBalance(address user) external view returns (uint256);\\n\\n    function unlockableBalanceBoosted(address user) external view returns (uint256);\\n\\n    function kick(address user, uint64 lockId) external;\\n\\n    function receiveFees(uint256 amountCrv, uint256 amountCvx) external;\\n\\n    function claimableFees(address account)\\n        external\\n        view\\n        returns (uint256 claimableCrv, uint256 claimableCvx);\\n\\n    function claimFees() external returns (uint256 crvAmount, uint256 cvxAmount);\\n\\n    function computeBoost(uint128 lockTime) external view returns (uint128);\\n\\n    function claimedAirdrop(address account) external view returns (bool);\\n\\n    function totalVoteBoost(address account) external view returns (uint256);\\n\\n    function totalRewardsBoost(address account) external view returns (uint256);\\n\\n    function userLocks(address account) external view returns (VoteLock[] memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ITORUSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITORUSToken is IERC20 {\\n    event MinterAdded(address minter);\\n    event MinterRemoved(address minter);\\n    event InitialDistributionMinted(uint256 amount);\\n    event AirdropMinted(uint256 amount);\\n    event AMMRewardsMinted(uint256 amount);\\n    event TreasuryRewardsMinted(uint256 amount);\\n    event SeedShareMinted(uint256 amount);\\n\\n    /// @notice adds a new minter\\n    function addMinter(address newMinter) external;\\n\\n    /// @notice renounces the minter rights of the sender\\n    function renounceMinterRights() external;\\n\\n    /// @notice mints the initial distribution amount to the distribution contract\\n    function mintInitialDistribution(address distribution) external;\\n\\n    /// @notice mints the airdrop amount to the airdrop contract\\n    function mintAirdrop(address airdropHandler) external;\\n\\n    /// @notice mints the amm rewards\\n    function mintAMMRewards(address ammGauge) external;\\n\\n    /// @notice mints `amount` to `account`\\n    function mint(address account, uint256 amount) external returns (uint256);\\n\\n    /// @notice returns a list of all authorized minters\\n    function listMinters() external view returns (address[] memory);\\n\\n    /// @notice returns the ratio of inflation already minted\\n    function inflationMintedRatio() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ITORUSVoteLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface ITORUSVoteLocker {\\n    event Locked(address indexed account, uint256 amount, uint256 unlockTime, bool relocked);\\n    event UnlockExecuted(address indexed account, uint256 amount);\\n\\n    function lock(uint256 amount) external;\\n\\n    function lock(uint256 amount, bool relock) external;\\n\\n    function shutDown() external;\\n\\n    function recoverToken(address token) external;\\n\\n    function executeAvailableUnlocks() external returns (uint256);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function unlockableBalance(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./pools/ITorusPool.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./tokenomics/IInflationManager.sol\\\";\\nimport \\\"./tokenomics/ILpTokenStaker.sol\\\";\\nimport \\\"./ICurveRegistryCache.sol\\\";\\n\\ninterface IController {\\n    event PoolAdded(address indexed pool);\\n    event PoolRemoved(address indexed pool);\\n    event PoolShutdown(address indexed pool);\\n    event ConvexBoosterSet(address convexBooster);\\n    event CurveHandlerSet(address curveHandler);\\n    event ConvexHandlerSet(address convexHandler);\\n    event CurveRegistryCacheSet(address curveRegistryCache);\\n    event InflationManagerSet(address inflationManager);\\n    event PriceOracleSet(address priceOracle);\\n    event WeightUpdateMinDelaySet(uint256 weightUpdateMinDelay);\\n\\n    struct WeightUpdate {\\n        address torusPoolAddress;\\n        ITorusPool.PoolWeight[] weights;\\n    }\\n\\n    // inflation manager\\n\\n    function inflationManager() external view returns (IInflationManager);\\n\\n    function setInflationManager(address manager) external;\\n\\n    // views\\n    function curveRegistryCache() external view returns (ICurveRegistryCache);\\n\\n    /// lp token staker\\n    function setLpTokenStaker(address _lpTokenStaker) external;\\n\\n    function lpTokenStaker() external view returns (ILpTokenStaker);\\n\\n    // oracle\\n    function priceOracle() external view returns (IOracle);\\n\\n    function setPriceOracle(address oracle) external;\\n\\n    // pool functions\\n\\n    function listPools() external view returns (address[] memory);\\n\\n    function listActivePools() external view returns (address[] memory);\\n\\n    function isPool(address poolAddress) external view returns (bool);\\n\\n    function isActivePool(address poolAddress) external view returns (bool);\\n\\n    function addPool(address poolAddress) external;\\n\\n    function shutdownPool(address poolAddress) external;\\n\\n    function removePool(address poolAddress) external;\\n\\n    function torusToken() external view returns (address);\\n\\n    function lastWeightUpdate(address poolAddress) external view returns (uint256);\\n\\n    function updateWeights(WeightUpdate memory update) external;\\n\\n    function updateAllWeights(WeightUpdate[] memory weights) external;\\n\\n    // handler functions\\n\\n    function convexBooster() external view returns (address);\\n\\n    function curveHandler() external view returns (address);\\n\\n    function convexHandler() external view returns (address);\\n\\n    function setConvexBooster(address _convexBooster) external;\\n\\n    function setCurveHandler(address _curveHandler) external;\\n\\n    function setConvexHandler(address _convexHandler) external;\\n\\n    function setCurveRegistryCache(address curveRegistryCache_) external;\\n\\n    function emergencyMinter() external view returns (address);\\n\\n    function setWeightUpdateMinDelay(uint256 delay) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nlibrary MerkleProof {\\n    struct Proof {\\n        uint16 nodeIndex;\\n        bytes32[] hashes;\\n    }\\n\\n    function isValid(\\n        Proof memory proof,\\n        bytes32 node,\\n        bytes32 merkleTorus\\n    ) internal pure returns (bool) {\\n        uint256 length = proof.hashes.length;\\n        uint16 nodeIndex = proof.nodeIndex;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (nodeIndex % 2 == 0) {\\n                node = keccak256(abi.encodePacked(node, proof.hashes[i]));\\n            } else {\\n                node = keccak256(abi.encodePacked(proof.hashes[i], node));\\n            }\\n            nodeIndex /= 2;\\n        }\\n\\n        return node == merkleTorus;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/ITorusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./ILpToken.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"../IOracle.sol\\\";\\n\\ninterface ITorusPool {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 depositedAmount,\\n        uint256 lpReceived\\n    );\\n    event Withdraw(address indexed account, uint256 amount);\\n    event NewWeight(address indexed curvePool, uint256 newWeight);\\n    event NewMaxIdleCurveLpRatio(uint256 newRatio);\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event HandledDepeggedCurvePool(address curvePool_);\\n    event HandledInvalidConvexPid(address curvePool_, uint256 pid_);\\n    event CurvePoolAdded(address curvePool_);\\n    event CurvePoolRemoved(address curvePool_);\\n    event Shutdown();\\n    event DepegThresholdUpdated(uint256 newThreshold);\\n    event MaxDeviationUpdated(uint256 newMaxDeviation);\\n\\n    struct PoolWeight {\\n        address poolAddress;\\n        uint256 weight;\\n    }\\n\\n    struct PoolWithAmount {\\n        address poolAddress;\\n        uint256 amount;\\n    }\\n\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    function lpToken() external view returns (ILpToken);\\n\\n    function rewardManager() external view returns (IRewardManager);\\n\\n    function depositFor(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 _amount, uint256 _minLpReceived) external returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external returns (uint256);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function usdExchangeRate() external view returns (uint256);\\n\\n    function allCurvePools() external view returns (address[] memory);\\n\\n    function curvePoolsCount() external view returns (uint256);\\n\\n    function getCurvePoolAtIndex(uint256 _index) external view returns (address);\\n\\n    function unstakeAndWithdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external;\\n\\n    function getWeight(address curvePool) external view returns (uint256);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function getAllocatedUnderlying() external view returns (PoolWithAmount[] memory);\\n\\n    function removeCurvePool(address pool) external;\\n\\n    function addCurvePool(address pool) external;\\n\\n    function totalCurveLpBalance(address curvePool_) external view returns (uint256);\\n\\n    function rebalancingRewardActive() external view returns (bool);\\n\\n    function totalDeviationAfterWeightUpdate() external view returns (uint256);\\n\\n    function computeTotalDeviation() external view returns (uint256);\\n\\n    /// @notice returns the total amount of funds held by this pool in terms of underlying\\n    function totalUnderlying() external view returns (uint256);\\n\\n    function getTotalAndPerPoolUnderlying()\\n        external\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        );\\n\\n    /// @notice same as `totalUnderlying` but returns a cached version\\n    /// that might be slightly outdated if oracle prices have changed\\n    /// @dev this is useful in cases where we want to reduce gas usage and do\\n    /// not need a precise value\\n    function cachedTotalUnderlying() external view returns (uint256);\\n\\n    function handleInvalidConvexPid(address pool) external;\\n\\n    function shutdownPool() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function handleDepeggedCurvePool(address curvePool_) external;\\n\\n    function isBalanced() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    event TokenUpdated(address indexed token, address feed, uint256 maxDelay, bool isEthPrice);\\n\\n    /// @notice returns the price in USD of symbol.\\n    function getUSDPrice(address token) external view returns (uint256);\\n\\n    /// @notice returns if the given token is supported for pricing.\\n    function isTokenSupported(address token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/IInflationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IInflationManager {\\n    event TokensClaimed(address indexed pool, uint256 torusAmount);\\n    event RebalancingRewardHandlerAdded(address indexed pool, address indexed handler);\\n    event RebalancingRewardHandlerRemoved(address indexed pool, address indexed handler);\\n    event PoolWeightsUpdated();\\n\\n    function executeInflationRateUpdate() external;\\n\\n    function updatePoolWeights() external;\\n\\n    /// @notice returns the weights of the Torus pools to know how much inflation\\n    /// each of them will receive, as well as the total amount of USD value in all the pools\\n    function computePoolWeights()\\n        external\\n        view\\n        returns (\\n            address[] memory _pools,\\n            uint256[] memory poolWeights,\\n            uint256 totalUSDValue\\n        );\\n\\n    function computePoolWeight(address pool)\\n        external\\n        view\\n        returns (uint256 poolWeight, uint256 totalUSDValue);\\n\\n    function currentInflationRate() external view returns (uint256);\\n\\n    function getCurrentPoolInflationRate(address pool) external view returns (uint256);\\n\\n    function handleRebalancingRewards(\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external;\\n\\n    function addPoolRebalancingRewardHandler(address poolAddress, address rebalancingRewardHandler)\\n        external;\\n\\n    function removePoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function rebalancingRewardHandlers(address poolAddress)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function hasPoolRebalancingRewardHandlers(address poolAddress, address handler)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ILpTokenStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface ILpTokenStaker {\\n    event LpTokenStaked(address indexed account, uint256 amount);\\n    event LpTokenUnstaked(address indexed account, uint256 amount);\\n    event TokensClaimed(address indexed pool, uint256 torAmount);\\n    event Shutdown();\\n\\n    function stake(uint256 amount, address torusPool) external;\\n\\n    function unstake(uint256 amount, address torusPool) external;\\n\\n    function stakeFor(\\n        uint256 amount,\\n        address torusPool,\\n        address account\\n    ) external;\\n\\n    function unstakeFor(\\n        uint256 amount,\\n        address torusPool,\\n        address account\\n    ) external;\\n\\n    function unstakeFrom(uint256 amount, address account) external;\\n\\n    function getUserBalanceForPool(address torusPool, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBalanceForPool(address torusPool) external view returns (uint256);\\n\\n    function updateBoost(address user) external;\\n\\n    function claimTORRewardsForPool(address pool) external;\\n\\n    function claimableTorus(address pool) external view returns (uint256);\\n\\n    function checkpoint(address pool) external returns (uint256);\\n\\n    function shutdown() external;\\n\\n    function getBoost(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/ICurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./vendor/IBooster.sol\\\";\\nimport \\\"../libraries/CurvePoolUtils.sol\\\";\\n\\ninterface ICurveRegistryCache {\\n    function BOOSTER() external view returns (IBooster);\\n\\n    function initPool(address pool_) external;\\n\\n    function initPool(address pool_, uint256 pid_) external;\\n\\n    function lpToken(address pool_) external view returns (address);\\n\\n    function assetType(address pool_) external view returns (CurvePoolUtils.AssetType);\\n\\n    function isRegistered(address pool_) external view returns (bool);\\n\\n    function hasCoinDirectly(address pool_, address coin_) external view returns (bool);\\n\\n    function hasCoinAnywhere(address pool_, address coin_) external view returns (bool);\\n\\n    function basePool(address pool_) external view returns (address);\\n\\n    function coinIndex(address pool_, address coin_) external view returns (int128);\\n\\n    function nCoins(address pool_) external view returns (uint256);\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function decimals(address pool_) external view returns (uint256[] memory);\\n\\n    function interfaceVersion(address pool_) external view returns (uint256);\\n\\n    function poolFromLpToken(address lpToken_) external view returns (address);\\n\\n    function coins(address pool_) external view returns (address[] memory);\\n\\n    function getPid(address _pool) external view returns (uint256);\\n\\n    function getRewardPool(address _pool) external view returns (address);\\n\\n    function isShutdownPid(uint256 pid_) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/ILpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ILpToken is IERC20Metadata {\\n    function mint(address account, uint256 amount) external returns (uint256);\\n\\n    function burn(address _owner, uint256 _amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IRewardManager {\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event SoldRewardTokens(uint256 targetTokenReceived);\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardRemoved(address reward);\\n    event ExtraRewardsCurvePoolSet(address extraReward, address curvePool);\\n    event FeesSet(uint256 feePercentage);\\n    event FeesEnabled(uint256 feePercentage);\\n    event EarningsClaimed(\\n        address indexed claimedBy,\\n        uint256 torusEarned,\\n        uint256 crvEarned,\\n        uint256 cvxEarned\\n    );\\n\\n    struct RewardMeta {\\n        uint256 earnedIntegral;\\n        uint256 lastEarned;\\n        mapping(address => uint256) accountIntegral;\\n        mapping(address => uint256) accountShare;\\n    }\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function poolCheckpoint() external returns (bool);\\n\\n    function addExtraReward(address reward) external returns (bool);\\n\\n    function addBatchExtraRewards(address[] memory rewards) external;\\n\\n    function pool() external view returns (address);\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function claimableRewards(address account)\\n        external\\n        view\\n        returns (\\n            uint256 torusRewards,\\n            uint256 crvRewards,\\n            uint256 cvxRewards\\n        );\\n\\n    function claimEarnings()\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function claimPoolEarningsAndSellRewardTokens() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface IBooster {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"libraries/CurvePoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/vendor/ICurvePoolV2.sol\\\";\\nimport \\\"../interfaces/vendor/ICurvePoolV1.sol\\\";\\nimport \\\"./ScaledMath.sol\\\";\\n\\nlibrary CurvePoolUtils {\\n    using ScaledMath for uint256;\\n\\n    uint256 internal constant _DEFAULT_IMBALANCE_THRESHOLD = 0.02e18;\\n\\n    enum AssetType {\\n        USD,\\n        ETH,\\n        BTC,\\n        OTHER,\\n        CRYPTO\\n    }\\n\\n    struct PoolMeta {\\n        address pool;\\n        uint256 numberOfCoins;\\n        AssetType assetType;\\n        uint256[] decimals;\\n        uint256[] prices;\\n        uint256[] thresholds;\\n    }\\n\\n    function ensurePoolBalanced(PoolMeta memory poolMeta) internal view {\\n        uint256 fromDecimals = poolMeta.decimals[0];\\n        uint256 fromBalance = 10**fromDecimals;\\n        uint256 fromPrice = poolMeta.prices[0];\\n        for (uint256 i = 1; i < poolMeta.numberOfCoins; i++) {\\n            uint256 toDecimals = poolMeta.decimals[i];\\n            uint256 toPrice = poolMeta.prices[i];\\n            uint256 toExpectedUnscaled = (fromBalance * fromPrice) / toPrice;\\n            uint256 toExpected = toExpectedUnscaled.convertScale(\\n                uint8(fromDecimals),\\n                uint8(toDecimals)\\n            );\\n\\n            uint256 toActual;\\n\\n            if (poolMeta.assetType == AssetType.CRYPTO) {\\n                // Handling crypto pools\\n                toActual = ICurvePoolV2(poolMeta.pool).get_dy(0, i, fromBalance);\\n            } else {\\n                // Handling other pools\\n                toActual = ICurvePoolV1(poolMeta.pool).get_dy(0, int128(uint128(i)), fromBalance);\\n            }\\n\\n            require(\\n                _isWithinThreshold(toExpected, toActual, poolMeta.thresholds[i]),\\n                \\\"pool is not balanced\\\"\\n            );\\n        }\\n    }\\n\\n    function _isWithinThreshold(\\n        uint256 a,\\n        uint256 b,\\n        uint256 imbalanceTreshold\\n    ) internal pure returns (bool) {\\n        if (imbalanceTreshold == 0) imbalanceTreshold = _DEFAULT_IMBALANCE_THRESHOLD;\\n        if (a > b) return (a - b).divDown(a) <= imbalanceTreshold;\\n        return (b - a).divDown(b) <= imbalanceTreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV2 {\\n    function token() external view returns (address);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory amounts)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 token_amount, uint256 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV1 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.8/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_torusToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropBoostClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cvxAmount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cvxAmount\",\"type\":\"uint256\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kicker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KickExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"relocked\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedFeesIntegralCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accruedFeesIntegralCvx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crvAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cvxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableCrv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableCvx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"}],\"name\":\"computeBoost\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeAvailableUnlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"executeAvailableUnlocksFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"lockIds\",\"type\":\"uint64[]\"}],\"name\":\"executeUnlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockId\",\"type\":\"uint64\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"relock_\",\"type\":\"bool\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"relock_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perAccountAccruedCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perAccountAccruedCvx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perAccountFeesCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perAccountFeesCvx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCrv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCvx\",\"type\":\"uint256\"}],\"name\":\"receiveFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lockId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"lockIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"name\":\"relockMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torusToken\",\"outputs\":[{\"internalType\":\"contract ITORUSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalRewardsBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalVoteBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockableBalanceBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"unlockTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"boost\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"internalType\":\"struct ITORUSLockerV2.VoteLock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"unlockTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"boost\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TORUSLockerV2", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8e01d9722b60de968d0826631d1bda273a08a8200000000000000000000000058aadb9aea02418f42bf8f776595d86f78d45ee4000000000000000000000000899112a204f534057dd7318f09b614b1f59ed124000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}