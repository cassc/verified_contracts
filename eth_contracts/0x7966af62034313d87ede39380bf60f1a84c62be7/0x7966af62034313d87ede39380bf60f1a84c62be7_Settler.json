{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Settler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IERC20, IERC20Meta} from \\\"./IERC20.sol\\\";\\nimport {ISignatureTransfer} from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\n\\nimport {Permit2Payment} from \\\"./core/Permit2Payment.sol\\\";\\nimport {Basic} from \\\"./core/Basic.sol\\\";\\nimport {OtcOrderSettlement} from \\\"./core/OtcOrderSettlement.sol\\\";\\nimport {UniswapV3} from \\\"./core/UniswapV3.sol\\\";\\nimport {UniswapV2} from \\\"./core/UniswapV2.sol\\\";\\nimport {IPSM, MakerPSM} from \\\"./core/MakerPSM.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"./vendor/SafeTransferLib.sol\\\";\\nimport {UnsafeMath} from \\\"./utils/UnsafeMath.sol\\\";\\nimport {FullMath} from \\\"./vendor/FullMath.sol\\\";\\nimport {FreeMemory} from \\\"./utils/FreeMemory.sol\\\";\\n\\nimport {ISettlerActions} from \\\"./ISettlerActions.sol\\\";\\nimport {TooMuchSlippage} from \\\"./core/SettlerErrors.sol\\\";\\n\\n/// @dev This library omits index bounds/overflow checking when accessing calldata arrays for gas efficiency, but still includes checks against `calldatasize()` for safety.\\nlibrary CalldataDecoder {\\n    function decodeCall(bytes[] calldata data, uint256 i)\\n        internal\\n        pure\\n        returns (bytes4 selector, bytes calldata args)\\n    {\\n        assembly (\\\"memory-safe\\\") {\\n            // helper functions\\n            function panic(code) {\\n                mstore(0x00, 0x4e487b71) // keccak256(\\\"Panic(uint256)\\\")[:4]\\n                mstore(0x20, code)\\n                revert(0x1c, 0x24)\\n            }\\n            function overflow() {\\n                panic(0x11) // 0x11 -> arithmetic under-/over- flow\\n            }\\n            function bad_calldata() {\\n                revert(0x00, 0x00) // empty reason for malformed calldata\\n            }\\n\\n            // initially, we set `args.offset` to the pointer to the length. this is 32 bytes before the actual start of data\\n            args.offset :=\\n                add(\\n                    data.offset,\\n                    calldataload(\\n                        add(shl(5, i), data.offset) // can't overflow; we assume `i` is in-bounds\\n                    )\\n                )\\n            // because the offset to `args` stored in `data` is arbitrary, we have to check it\\n            if lt(args.offset, add(shl(5, data.length), data.offset)) { overflow() }\\n            if iszero(lt(args.offset, calldatasize())) { bad_calldata() }\\n            // now we load `args.length` and set `args.offset` to the start of data\\n            args.length := calldataload(args.offset)\\n            args.offset := add(args.offset, 0x20) // can't overflow; calldata can't be that long\\n            {\\n                // check that the end of `args` is in-bounds\\n                let end := add(args.offset, args.length)\\n                if lt(end, args.offset) { overflow() }\\n                if gt(end, calldatasize()) { bad_calldata() }\\n            }\\n            // slice off the first 4 bytes of `args` as the selector\\n            if lt(args.length, 4) {\\n                // loading selector results in out-of-bounds read\\n                panic(0x32) // 0x32 -> out-of-bounds array access\\n            }\\n            selector := calldataload(args.offset) // solidity cleans dirty bits automatically\\n            args.length := sub(args.length, 4) // can't underflow; checked above\\n            args.offset := add(args.offset, 4) // can't overflow/oob; we already checked `end`\\n        }\\n    }\\n}\\n\\n/// @custom:security-contact security@0x.org\\ncontract Settler is Permit2Payment, Basic, OtcOrderSettlement, UniswapV3, UniswapV2, MakerPSM, FreeMemory {\\n    using SafeTransferLib for IERC20;\\n    using SafeTransferLib for address payable;\\n    using UnsafeMath for uint256;\\n    using FullMath for uint256;\\n    using CalldataDecoder for bytes[];\\n\\n    error ActionInvalid(uint256 i, bytes4 action, bytes data);\\n\\n    receive() external payable {}\\n\\n    // When you change this, you must make corresponding changes to\\n    // `sh/deploy_new_chain.sh` to set `constructor_args`.\\n    constructor(address uniFactory, bytes32 poolInitCodeHash, address dai)\\n        Permit2Payment()\\n        Basic()\\n        OtcOrderSettlement()\\n        UniswapV3(uniFactory, poolInitCodeHash)\\n        UniswapV2()\\n        MakerPSM(dai)\\n    {}\\n\\n    struct AllowedSlippage {\\n        address buyToken;\\n        address recipient;\\n        uint256 minAmountOut;\\n    }\\n\\n    function _checkSlippageAndTransfer(AllowedSlippage calldata slippage) internal {\\n        // This final slippage check effectively prohibits custody optimization on the\\n        // final hop of every swap. This is gas-inefficient. This is on purpose. Because\\n        // ISettlerActions.BASIC_SELL could interact with an intents-based settlement\\n        // mechanism, we must ensure that the user's want token increase is coming\\n        // directly from us instead of from some other form of exchange of value.\\n        (address buyToken, address recipient, uint256 minAmountOut) =\\n            (slippage.buyToken, slippage.recipient, slippage.minAmountOut);\\n        if (minAmountOut != 0 || buyToken != address(0)) {\\n            if (buyToken == ETH_ADDRESS) {\\n                uint256 amountOut = address(this).balance;\\n                if (amountOut < minAmountOut) {\\n                    revert TooMuchSlippage(buyToken, minAmountOut, amountOut);\\n                }\\n                payable(recipient).safeTransferETH(amountOut);\\n            } else {\\n                uint256 amountOut = IERC20(buyToken).balanceOf(address(this));\\n                if (amountOut < minAmountOut) {\\n                    revert TooMuchSlippage(buyToken, minAmountOut, amountOut);\\n                }\\n                IERC20(buyToken).safeTransfer(recipient, amountOut);\\n            }\\n        }\\n    }\\n\\n    function _otcVIP(bytes calldata data) internal DANGEROUS_freeMemory {\\n        (\\n            address recipient,\\n            ISignatureTransfer.PermitTransferFrom memory makerPermit,\\n            address maker,\\n            bytes memory makerSig,\\n            ISignatureTransfer.PermitTransferFrom memory takerPermit,\\n            bytes memory takerSig\\n        ) = abi.decode(\\n            data,\\n            (\\n                address,\\n                ISignatureTransfer.PermitTransferFrom,\\n                address,\\n                bytes,\\n                ISignatureTransfer.PermitTransferFrom,\\n                bytes\\n            )\\n        );\\n\\n        fillOtcOrder(recipient, makerPermit, maker, makerSig, takerPermit, takerSig);\\n    }\\n\\n    function _uniV3VIP(bytes calldata data) internal DANGEROUS_freeMemory {\\n        (\\n            address recipient,\\n            uint256 amountIn,\\n            uint256 amountOutMin,\\n            bytes memory path,\\n            ISignatureTransfer.PermitTransferFrom memory permit,\\n            bytes memory sig\\n        ) = abi.decode(data, (address, uint256, uint256, bytes, ISignatureTransfer.PermitTransferFrom, bytes));\\n\\n        sellTokenForTokenToUniswapV3VIP(recipient, path, amountIn, amountOutMin, permit, sig);\\n    }\\n\\n    function execute(bytes[] calldata actions, AllowedSlippage calldata slippage) public payable {\\n        if (actions.length != 0) {\\n            (bytes4 action, bytes calldata data) = actions.decodeCall(0);\\n            if (action == ISettlerActions.SETTLER_OTC_PERMIT2.selector) {\\n                _otcVIP(data);\\n            } else if (action == ISettlerActions.UNISWAPV3_PERMIT2_SWAP_EXACT_IN.selector) {\\n                _uniV3VIP(data);\\n            } else {\\n                _dispatch(0, action, data, _msgSender());\\n            }\\n        }\\n\\n        for (uint256 i = 1; i < actions.length; i = i.unsafeInc()) {\\n            (bytes4 action, bytes calldata data) = actions.decodeCall(i);\\n            _dispatch(i, action, data, _msgSender());\\n        }\\n\\n        _checkSlippageAndTransfer(slippage);\\n    }\\n\\n    function _hashArrayOfBytes(bytes[] calldata actions) internal pure returns (bytes32 result) {\\n        // This function deliberately does no bounds checking on `actions` for\\n        // gas efficiency. We assume that `actions` will get used elsewhere in\\n        // this context and any OOB or other malformed calldata will result in a\\n        // revert later.\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            let hashesLength := shl(5, actions.length)\\n            for {\\n                let i := actions.offset\\n                let dst := ptr\\n                let end := add(i, hashesLength)\\n            } lt(i, end) {\\n                i := add(i, 0x20)\\n                dst := add(dst, 0x20)\\n            } {\\n                let src := add(actions.offset, calldataload(i))\\n                let length := calldataload(src)\\n                calldatacopy(dst, add(src, 0x20), length)\\n                mstore(dst, keccak256(dst, length))\\n            }\\n            result := keccak256(ptr, hashesLength)\\n        }\\n    }\\n\\n    function _hashActionsAndSlippage(bytes[] calldata actions, AllowedSlippage calldata slippage)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        // This function does not check for or clean any dirty bits that might\\n        // exist in `slippage`. We assume that `slippage` will be used elsewhere\\n        // in this context and that if there are dirty bits it will result in a\\n        // revert later.\\n        bytes32 arrayOfBytesHash = _hashArrayOfBytes(actions);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, ACTIONS_AND_SLIPPAGE_TYPEHASH)\\n            calldatacopy(add(ptr, 0x20), slippage, 0x60)\\n            mstore(add(ptr, 0x80), arrayOfBytesHash)\\n            result := keccak256(ptr, 0xa0)\\n        }\\n    }\\n\\n    function _metaTxnOtcVIP(bytes calldata data, address msgSender, bytes calldata sig) internal DANGEROUS_freeMemory {\\n        // An optimized path involving a maker/taker in a single trade\\n        // The OTC order is signed by both maker and taker, validation is\\n        // performed inside the OtcOrderSettlement so there is no need to\\n        // validate `sig` against `actions` here\\n        (\\n            address recipient,\\n            ISignatureTransfer.PermitTransferFrom memory makerPermit,\\n            address maker,\\n            bytes memory makerSig,\\n            ISignatureTransfer.PermitTransferFrom memory takerPermit\\n        ) = abi.decode(\\n            data,\\n            (address, ISignatureTransfer.PermitTransferFrom, address, bytes, ISignatureTransfer.PermitTransferFrom)\\n        );\\n        fillOtcOrderMetaTxn(recipient, makerPermit, maker, makerSig, takerPermit, msgSender, sig);\\n    }\\n\\n    function _metaTxnTransferFrom(bytes calldata data, address msgSender, bytes calldata sig)\\n        internal\\n        DANGEROUS_freeMemory\\n    {\\n        (address recipient, ISignatureTransfer.PermitTransferFrom memory permit) =\\n            abi.decode(data, (address, ISignatureTransfer.PermitTransferFrom));\\n        (ISignatureTransfer.SignatureTransferDetails memory transferDetails,,) =\\n            _permitToTransferDetails(permit, recipient);\\n\\n        // We simultaneously transfer-in the taker's tokens and authenticate the\\n        // metatransaction.\\n        _transferFrom(permit, transferDetails, msgSender, sig);\\n    }\\n\\n    function _metaTxnUniV3VIP(bytes calldata data, address msgSender, bytes calldata sig)\\n        internal\\n        DANGEROUS_freeMemory\\n    {\\n        (\\n            address recipient,\\n            uint256 amountIn,\\n            uint256 amountOutMin,\\n            bytes memory path,\\n            ISignatureTransfer.PermitTransferFrom memory permit\\n        ) = abi.decode(data, (address, uint256, uint256, bytes, ISignatureTransfer.PermitTransferFrom));\\n        sellTokenForTokenToUniswapV3MetaTxn(recipient, path, amountIn, amountOutMin, msgSender, permit, sig);\\n    }\\n\\n    function executeMetaTxn(\\n        bytes[] calldata actions,\\n        AllowedSlippage calldata slippage,\\n        address msgSender,\\n        bytes calldata sig\\n    ) public metaTx(msgSender, _hashActionsAndSlippage(actions, slippage)) {\\n        if (actions.length != 0) {\\n            (bytes4 action, bytes calldata data) = actions.decodeCall(0);\\n\\n            // By forcing the first action to be one of the witness-aware\\n            // actions, we ensure that the entire sequence of actions is\\n            // authorized. `msgSender` is the signer of the metatransaction.\\n\\n            if (action == ISettlerActions.METATXN_SETTLER_OTC_PERMIT2.selector) {\\n                _metaTxnOtcVIP(data, msgSender, sig);\\n            } else if (action == ISettlerActions.METATXN_PERMIT2_TRANSFER_FROM.selector) {\\n                _metaTxnTransferFrom(data, msgSender, sig);\\n            } else if (action == ISettlerActions.METATXN_UNISWAPV3_PERMIT2_SWAP_EXACT_IN.selector) {\\n                _metaTxnUniV3VIP(data, msgSender, sig);\\n            } else {\\n                revert ActionInvalid({i: 0, action: action, data: data});\\n            }\\n        }\\n\\n        for (uint256 i = 1; i < actions.length; i = i.unsafeInc()) {\\n            (bytes4 action, bytes calldata data) = actions.decodeCall(i);\\n            _dispatch(i, action, data, msgSender);\\n        }\\n\\n        _checkSlippageAndTransfer(slippage);\\n    }\\n\\n    function _dispatch(uint256 i, bytes4 action, bytes calldata data, address msgSender)\\n        internal\\n        DANGEROUS_freeMemory\\n    {\\n        if (action == ISettlerActions.PERMIT2_TRANSFER_FROM.selector) {\\n            (address recipient, ISignatureTransfer.PermitTransferFrom memory permit, bytes memory sig) =\\n                abi.decode(data, (address, ISignatureTransfer.PermitTransferFrom, bytes));\\n            (ISignatureTransfer.SignatureTransferDetails memory transferDetails,,) =\\n                _permitToTransferDetails(permit, recipient);\\n            _transferFrom(permit, transferDetails, msgSender, sig);\\n        } else if (action == ISettlerActions.SETTLER_OTC_SELF_FUNDED.selector) {\\n            (\\n                address recipient,\\n                ISignatureTransfer.PermitTransferFrom memory permit,\\n                address maker,\\n                bytes memory makerSig,\\n                IERC20 takerToken,\\n                uint256 maxTakerAmount\\n            ) = abi.decode(data, (address, ISignatureTransfer.PermitTransferFrom, address, bytes, IERC20, uint256));\\n\\n            fillOtcOrderSelfFunded(recipient, permit, maker, makerSig, takerToken, maxTakerAmount, msgSender);\\n        } else if (action == ISettlerActions.UNISWAPV3_SWAP_EXACT_IN.selector) {\\n            (address recipient, uint256 bips, uint256 amountOutMin, bytes memory path) =\\n                abi.decode(data, (address, uint256, uint256, bytes));\\n\\n            sellTokenForTokenToUniswapV3(recipient, path, bips, amountOutMin);\\n        } else if (action == ISettlerActions.UNISWAPV2_SWAP.selector) {\\n            (address recipient, address sellToken, address pool, uint8 swapInfo, uint256 bips, uint256 amountOutMin) =\\n                abi.decode(data, (address, address, address, uint8, uint256, uint256));\\n\\n            sellToUniswapV2(recipient, sellToken, pool, swapInfo, bips, amountOutMin);\\n        } else if (action == ISettlerActions.MAKER_PSM_SELL_GEM.selector) {\\n            (address recipient, uint256 bips, IPSM psm, IERC20Meta gemToken) =\\n                abi.decode(data, (address, uint256, IPSM, IERC20Meta));\\n\\n            makerPsmSellGem(recipient, bips, psm, gemToken);\\n        } else if (action == ISettlerActions.MAKER_PSM_BUY_GEM.selector) {\\n            (address recipient, uint256 bips, IPSM psm, IERC20Meta gemToken) =\\n                abi.decode(data, (address, uint256, IPSM, IERC20Meta));\\n\\n            makerPsmBuyGem(recipient, bips, psm, gemToken);\\n        } else if (action == ISettlerActions.BASIC_SELL.selector) {\\n            (address pool, IERC20 sellToken, uint256 proportion, uint256 offset, bytes memory _data) =\\n                abi.decode(data, (address, IERC20, uint256, uint256, bytes));\\n\\n            basicSellToPool(pool, sellToken, proportion, offset, _data);\\n        } else if (action == ISettlerActions.POSITIVE_SLIPPAGE.selector) {\\n            (address recipient, IERC20 token, uint256 expectedAmount) = abi.decode(data, (address, IERC20, uint256));\\n            if (token == IERC20(ETH_ADDRESS)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > expectedAmount) {\\n                    unchecked {\\n                        payable(recipient).safeTransferETH(balance - expectedAmount);\\n                    }\\n                }\\n            } else {\\n                uint256 balance = token.balanceOf(address(this));\\n                if (balance > expectedAmount) {\\n                    unchecked {\\n                        token.safeTransfer(recipient, balance - expectedAmount);\\n                    }\\n                }\\n            }\\n        } else {\\n            revert ActionInvalid({i: i, action: action, data: data});\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n\\n    event Transfer(address indexed, address indexed, uint256);\\n    event Approval(address indexed, address indexed, uint256);\\n}\\n\\ninterface IERC20Meta is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/permit2/src/interfaces/ISignatureTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from \\\"./IEIP712.sol\\\";\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n    /// @param maxAmount The maximum amount a spender can request to transfer\\n    error InvalidAmount(uint256 maxAmount);\\n\\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n    error LengthMismatch();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n    struct TokenPermissions {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount that can be spent\\n        uint256 amount;\\n    }\\n\\n    /// @notice The signed permit message for a single token transfer\\n    struct PermitTransferFrom {\\n        TokenPermissions permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Specifies the recipient address and amount for batched transfers.\\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n    struct SignatureTransferDetails {\\n        // recipient address\\n        address to;\\n        // spender requested amount\\n        uint256 requestedAmount;\\n    }\\n\\n    /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n    /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n    /// @dev Note that a user still signs over a spender address\\n    struct PermitBatchTransferFrom {\\n        // the tokens and corresponding amounts permitted for a transfer\\n        TokenPermissions[] permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n    /// @dev It returns a uint256 bitmap\\n    /// @dev The index, or wordPosition is capped at type(uint248).max\\n    function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers multiple tokens using a signed permit message\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers multiple tokens using a signed permit message\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n    /// @dev The wordPos is maxed at type(uint248).max\\n    /// @param wordPos A number to index the nonceBitmap at\\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\"\r\n    },\r\n    \"src/core/Permit2Payment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {ForwarderNotAllowed, InvalidSignatureLen, ConfusedDeputy} from \\\"./SettlerErrors.sol\\\";\\nimport {AllowanceHolderContext} from \\\"../allowanceholder/AllowanceHolderContext.sol\\\";\\nimport {SettlerAbstract} from \\\"../SettlerAbstract.sol\\\";\\n\\nimport {ISignatureTransfer} from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\nimport {Revert} from \\\"../utils/Revert.sol\\\";\\n\\nlibrary TransientStorage {\\n    // bytes32(uint256(keccak256(\\\"operator slot\\\")) - 1)\\n    bytes32 private constant _OPERATOR_SLOT = 0x009355806b743562f351db2e3726091207f49fa1cdccd5c65a7d4860ce3abbe9;\\n    // bytes32(uint256(keccak256(\\\"witness slot\\\")) - 1)\\n    bytes32 private constant _WITNESS_SLOT = 0x1643bf8e9fdaef48c4abf5a998de359be44a235ac7aebfbc05485e093720deaa;\\n    // bytes32(uint256(keccak256(\\\"metatx signer slot\\\")) - 1)\\n    bytes32 private constant _METATX_SIGNER_SLOT = 0xfc7be34027b4062d13b31d75182f37b703b5ad960f0e73236593535549bb277d;\\n\\n    error ReentrantCallback(address oldOperator);\\n\\n    function setOperator(address operator) internal {\\n        address currentSigner;\\n        assembly (\\\"memory-safe\\\") {\\n            currentSigner := tload(_METATX_SIGNER_SLOT)\\n        }\\n        if (operator == currentSigner) {\\n            revert ConfusedDeputy();\\n        }\\n        address currentOperator;\\n        assembly (\\\"memory-safe\\\") {\\n            currentOperator := tload(_OPERATOR_SLOT)\\n        }\\n        if (currentOperator != address(0) && msg.sender != currentOperator) {\\n            revert ReentrantCallback(currentOperator);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(_OPERATOR_SLOT, and(0xffffffffffffffffffffffffffffffffffffffff, operator))\\n        }\\n    }\\n\\n    error OperatorNotSpent(address oldOperator);\\n\\n    function checkSpentOperator() internal view {\\n        address currentOperator;\\n        assembly (\\\"memory-safe\\\") {\\n            currentOperator := tload(_OPERATOR_SLOT)\\n        }\\n        if (currentOperator != address(0)) {\\n            revert OperatorNotSpent(currentOperator);\\n        }\\n    }\\n\\n    function getAndClearOperator() internal returns (address operator) {\\n        assembly (\\\"memory-safe\\\") {\\n            operator := tload(_OPERATOR_SLOT)\\n            if operator { tstore(_OPERATOR_SLOT, 0) }\\n        }\\n    }\\n\\n    error ReentrantMetatransaction(bytes32 oldWitness);\\n\\n    function setWitness(bytes32 newWitness, address signer) internal {\\n        bytes32 currentWitness;\\n        assembly (\\\"memory-safe\\\") {\\n            currentWitness := tload(_WITNESS_SLOT)\\n        }\\n        if (currentWitness != bytes32(0)) {\\n            revert ReentrantMetatransaction(currentWitness);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(_WITNESS_SLOT, newWitness)\\n            tstore(_METATX_SIGNER_SLOT, and(0xffffffffffffffffffffffffffffffffffffffff, signer))\\n        }\\n    }\\n\\n    error WitnessNotSpent(bytes32 oldWitness);\\n\\n    function checkSpentWitness() internal view {\\n        bytes32 currentWitness;\\n        assembly (\\\"memory-safe\\\") {\\n            currentWitness := tload(_WITNESS_SLOT)\\n        }\\n        if (currentWitness != bytes32(0)) {\\n            revert WitnessNotSpent(currentWitness);\\n        }\\n    }\\n\\n    function getAndClearWitness() internal returns (bytes32 witness, address signer) {\\n        assembly (\\\"memory-safe\\\") {\\n            witness := tload(_WITNESS_SLOT)\\n            if witness {\\n                signer := tload(_METATX_SIGNER_SLOT)\\n                tstore(_METATX_SIGNER_SLOT, 0)\\n                tstore(_WITNESS_SLOT, 0)\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Permit2PaymentBase is AllowanceHolderContext, SettlerAbstract {\\n    using Revert for bool;\\n\\n    /// @dev Permit2 address\\n    ISignatureTransfer internal constant _PERMIT2 = ISignatureTransfer(0x000000000022D473030F116dDEE9F6B43aC78BA3);\\n\\n    function isRestrictedTarget(address target) internal pure override returns (bool) {\\n        return target == address(_PERMIT2) || target == address(_ALLOWANCE_HOLDER);\\n    }\\n\\n    function _setOperatorAndCall(address payable target, uint256 value, bytes memory data)\\n        internal\\n        override\\n        returns (bytes memory)\\n    {\\n        TransientStorage.setOperator(target);\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        success.maybeRevert(returndata);\\n        TransientStorage.checkSpentOperator();\\n        return returndata;\\n    }\\n\\n    function _setOperatorAndCall(address target, bytes memory data) internal override returns (bytes memory) {\\n        return _setOperatorAndCall(payable(target), 0, data);\\n    }\\n\\n    modifier metaTx(address msgSender, bytes32 witness) override {\\n        TransientStorage.setWitness(witness, msgSender);\\n        TransientStorage.setOperator(_msgSender());\\n        _;\\n        TransientStorage.checkSpentOperator();\\n        TransientStorage.checkSpentWitness();\\n    }\\n}\\n\\nabstract contract Permit2Payment is Permit2PaymentBase {\\n    // `string.concat` isn't recognized by solc as compile-time constant, but `abi.encodePacked` is\\n    // This is defined here as `private` and not in `SettlerAbstract` as `internal` because no other\\n    // contract/file should reference it. The *ONLY* approved way to make a transfer using this\\n    // witness string is by setting the witness with `_setWitness`\\n    string private constant _ACTIONS_AND_SLIPPAGE_WITNESS = string(\\n        abi.encodePacked(\\\"ActionsAndSlippage actionsAndSlippage)\\\", ACTIONS_AND_SLIPPAGE_TYPE, TOKEN_PERMISSIONS_TYPE)\\n    );\\n\\n    function _permitToTransferDetails(ISignatureTransfer.PermitTransferFrom memory permit, address recipient)\\n        internal\\n        pure\\n        override\\n        returns (ISignatureTransfer.SignatureTransferDetails memory transferDetails, address token, uint256 amount)\\n    {\\n        transferDetails.to = recipient;\\n        transferDetails.requestedAmount = amount = permit.permitted.amount;\\n        token = permit.permitted.token;\\n    }\\n\\n    // This function is provided *EXCLUSIVELY* for use here and in OtcOrderSettlement. Any other use\\n    // of this function is forbidden. You must use the overload that does *NOT* take a `witness`\\n    // argument.\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes32 witness,\\n        string memory witnessTypeString,\\n        bytes memory sig,\\n        bool isForwarded\\n    ) internal override {\\n        if (isForwarded) revert ForwarderNotAllowed();\\n        _PERMIT2.permitWitnessTransferFrom(permit, transferDetails, from, witness, witnessTypeString, sig);\\n    }\\n\\n    // See comment in above overload\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes32 witness,\\n        string memory witnessTypeString,\\n        bytes memory sig\\n    ) internal override {\\n        _transferFrom(permit, transferDetails, from, witness, witnessTypeString, sig, _isForwarded());\\n    }\\n\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes memory sig,\\n        bool isForwarded\\n    ) internal override {\\n        if (from != _msgSender() && msg.sender != TransientStorage.getAndClearOperator()) {\\n            revert ConfusedDeputy();\\n        }\\n        {\\n            (bytes32 witness, address signer) = TransientStorage.getAndClearWitness();\\n            if (witness != bytes32(0)) {\\n                if (from != signer) {\\n                    revert ConfusedDeputy();\\n                }\\n                return _transferFrom(\\n                    permit, transferDetails, from, witness, _ACTIONS_AND_SLIPPAGE_WITNESS, sig, isForwarded\\n                );\\n            }\\n        }\\n        if (isForwarded) {\\n            if (sig.length != 0) revert InvalidSignatureLen();\\n            _ALLOWANCE_HOLDER.transferFrom(\\n                permit.permitted.token, from, transferDetails.to, transferDetails.requestedAmount\\n            );\\n        } else {\\n            _PERMIT2.permitTransferFrom(permit, transferDetails, from, sig);\\n        }\\n    }\\n\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes memory sig\\n    ) internal override {\\n        _transferFrom(permit, transferDetails, from, sig, _isForwarded());\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/Basic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {SettlerAbstract} from \\\"../SettlerAbstract.sol\\\";\\nimport {InvalidOffset, ConfusedDeputy, InvalidTarget} from \\\"./SettlerErrors.sol\\\";\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../vendor/SafeTransferLib.sol\\\";\\nimport {FullMath} from \\\"../vendor/FullMath.sol\\\";\\nimport {Panic} from \\\"../utils/Panic.sol\\\";\\nimport {Revert} from \\\"../utils/Revert.sol\\\";\\n\\nabstract contract Basic is SettlerAbstract {\\n    using SafeTransferLib for IERC20;\\n    using FullMath for uint256;\\n    using Revert for bool;\\n\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Sell to a pool with a generic approval, transferFrom interaction.\\n    /// offset in the calldata is used to update the sellAmount given a proportion of the sellToken balance\\n    function basicSellToPool(address pool, IERC20 sellToken, uint256 bips, uint256 offset, bytes memory data)\\n        internal\\n    {\\n        if (isRestrictedTarget(pool)) {\\n            revert ConfusedDeputy();\\n        }\\n\\n        bool success;\\n        bytes memory returnData;\\n        uint256 value;\\n        if (sellToken == IERC20(ETH_ADDRESS)) {\\n            value = address(this).balance.mulDiv(bips, 10_000);\\n            if (data.length == 0) {\\n                if (offset != 0) revert InvalidOffset();\\n                (success, returnData) = payable(pool).call{value: value}(\\\"\\\");\\n                success.maybeRevert(returnData);\\n                return;\\n            } else {\\n                if ((offset += 32) > data.length) {\\n                    Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n                }\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore(add(data, offset), value)\\n                }\\n            }\\n        } else if (address(sellToken) == address(0)) {\\n            if (offset != 0) revert InvalidOffset();\\n        } else {\\n            uint256 amount = sellToken.balanceOf(address(this)).mulDiv(bips, 10_000);\\n            if ((offset += 32) > data.length) {\\n                Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                mstore(add(data, offset), amount)\\n            }\\n            if (address(sellToken) != pool) {\\n                sellToken.safeApproveIfBelow(pool, amount);\\n            }\\n        }\\n        (success, returnData) = payable(pool).call{value: value}(data);\\n        success.maybeRevert(returnData);\\n        // forbid sending data to EOAs\\n        if (returnData.length == 0 && pool.code.length == 0) revert InvalidTarget();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/OtcOrderSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {ISignatureTransfer} from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\nimport {SettlerAbstract} from \\\"../SettlerAbstract.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"../vendor/SafeTransferLib.sol\\\";\\nimport {FullMath} from \\\"../vendor/FullMath.sol\\\";\\n\\nabstract contract OtcOrderSettlement is SettlerAbstract {\\n    using SafeTransferLib for IERC20;\\n    using FullMath for uint256;\\n\\n    struct Consideration {\\n        address token;\\n        uint256 amount;\\n        address counterparty;\\n        bool partialFillAllowed;\\n    }\\n\\n    string internal constant CONSIDERATION_TYPE =\\n        \\\"Consideration(address token,uint256 amount,address counterparty,bool partialFillAllowed)\\\";\\n    // `string.concat` isn't recognized by solc as compile-time constant, but `abi.encodePacked` is\\n    string internal constant CONSIDERATION_WITNESS =\\n        string(abi.encodePacked(\\\"Consideration consideration)\\\", CONSIDERATION_TYPE, TOKEN_PERMISSIONS_TYPE));\\n    bytes32 internal constant CONSIDERATION_TYPEHASH =\\n        0x7d806873084f389a66fd0315dead7adaad8ae6e8b6cf9fb0d3db61e5a91c3ffa;\\n\\n    string internal constant OTC_ORDER_TYPE =\\n        \\\"OtcOrder(Consideration makerConsideration,Consideration takerConsideration)\\\";\\n    string internal constant OTC_ORDER_TYPE_RECURSIVE = string(abi.encodePacked(OTC_ORDER_TYPE, CONSIDERATION_TYPE));\\n    bytes32 internal constant OTC_ORDER_TYPEHASH = 0x4efcac36537dd5721596376472101aec5ff380b23b286c66cdfe70a509c0cef3;\\n\\n    function _hashConsideration(Consideration memory consideration) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := sub(consideration, 0x20)\\n            let oldValue := mload(ptr)\\n            mstore(ptr, CONSIDERATION_TYPEHASH)\\n            result := keccak256(ptr, 0xa0)\\n            mstore(ptr, oldValue)\\n        }\\n    }\\n\\n    function _logOtcOrder(bytes32 makerConsiderationHash, bytes32 takerConsiderationHash, uint128 makerFilledAmount)\\n        private\\n    {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, OTC_ORDER_TYPEHASH)\\n            mstore(0x20, makerConsiderationHash)\\n            let ptr := mload(0x40)\\n            mstore(0x40, takerConsiderationHash)\\n            let orderHash := keccak256(0x00, 0x60)\\n            mstore(0x40, ptr)\\n            mstore(0x10, makerFilledAmount)\\n            mstore(0x00, orderHash)\\n            log0(0x00, 0x30)\\n        }\\n    }\\n\\n    constructor() {\\n        assert(CONSIDERATION_TYPEHASH == keccak256(bytes(CONSIDERATION_TYPE)));\\n        assert(OTC_ORDER_TYPEHASH == keccak256(bytes(OTC_ORDER_TYPE_RECURSIVE)));\\n    }\\n\\n    /// @dev Settle an OtcOrder between maker and taker transferring funds directly between\\n    /// the counterparties. Either two Permit2 signatures are consumed, with the maker Permit2 containing\\n    /// a witness of the OtcOrder, or AllowanceHolder is supported for the taker payment.\\n    function fillOtcOrder(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory makerPermit,\\n        address maker,\\n        bytes memory makerSig,\\n        ISignatureTransfer.PermitTransferFrom memory takerPermit,\\n        bytes memory takerSig\\n    ) internal {\\n        return fillOtcOrderMetaTxn(recipient, makerPermit, maker, makerSig, takerPermit, _msgSender(), takerSig);\\n    }\\n\\n    /// @dev Settle an OtcOrder between maker and taker transfering funds directly between\\n    /// the counterparties. Both Maker and Taker have signed the same order, and submission\\n    /// is via a third party\\n    /// @dev the taker's witness is not calculated nor verified here as calling function is trusted\\n    function fillOtcOrderMetaTxn(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory makerPermit,\\n        address maker,\\n        bytes memory makerSig,\\n        ISignatureTransfer.PermitTransferFrom memory takerPermit,\\n        address taker,\\n        bytes memory takerSig\\n    ) internal {\\n        (\\n            ISignatureTransfer.SignatureTransferDetails memory makerTransferDetails,\\n            address makerToken,\\n            uint256 makerAmount\\n        ) = _permitToTransferDetails(makerPermit, recipient);\\n        (\\n            ISignatureTransfer.SignatureTransferDetails memory takerTransferDetails,\\n            address takerToken,\\n            uint256 takerAmount\\n        ) = _permitToTransferDetails(takerPermit, maker);\\n\\n        bytes32 witness = _hashConsideration(\\n            Consideration({token: takerToken, amount: takerAmount, counterparty: taker, partialFillAllowed: false})\\n        );\\n        _transferFrom(takerPermit, takerTransferDetails, taker, takerSig);\\n        _transferFrom(makerPermit, makerTransferDetails, maker, witness, CONSIDERATION_WITNESS, makerSig, false);\\n\\n        _logOtcOrder(\\n            witness,\\n            _hashConsideration(\\n                Consideration({token: makerToken, amount: makerAmount, counterparty: maker, partialFillAllowed: false})\\n            ),\\n            uint128(makerAmount)\\n        );\\n    }\\n\\n    /// @dev Settle an OtcOrder between maker and Settler retaining funds in this contract.\\n    /// @dev pre-condition: msgSender has been authenticated against the requestor\\n    /// One Permit2 signature is consumed, with the maker Permit2 containing a witness of the OtcOrder.\\n    // In this variant, Maker pays recipient and Settler pays Maker\\n    function fillOtcOrderSelfFunded(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        address maker,\\n        bytes memory makerSig,\\n        IERC20 takerToken,\\n        uint256 maxTakerAmount,\\n        address msgSender\\n    ) internal {\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails;\\n        Consideration memory takerConsideration;\\n        takerConsideration.partialFillAllowed = true;\\n        uint256 buyAmount;\\n        (transferDetails, takerConsideration.token, buyAmount) = _permitToTransferDetails(permit, recipient);\\n        takerConsideration.amount = buyAmount;\\n        takerConsideration.counterparty = maker;\\n\\n        Consideration memory makerConsideration = Consideration({\\n            token: address(takerToken),\\n            amount: maxTakerAmount,\\n            counterparty: msgSender,\\n            partialFillAllowed: true\\n        });\\n        bytes32 witness = _hashConsideration(makerConsideration);\\n\\n        uint256 takerAmount = takerToken.balanceOf(address(this));\\n        if (takerAmount > maxTakerAmount) {\\n            takerAmount = maxTakerAmount;\\n        }\\n        transferDetails.requestedAmount = transferDetails.requestedAmount.unsafeMulDiv(takerAmount, maxTakerAmount);\\n\\n        takerToken.safeTransfer(maker, takerAmount);\\n        _transferFrom(permit, transferDetails, maker, witness, CONSIDERATION_WITNESS, makerSig, false);\\n\\n        _logOtcOrder(witness, _hashConsideration(takerConsideration), uint128(buyAmount));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/UniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {ISignatureTransfer} from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\nimport {UnsafeMath} from \\\"../utils/UnsafeMath.sol\\\";\\nimport {Panic} from \\\"../utils/Panic.sol\\\";\\nimport {SafeTransferLib} from \\\"../vendor/SafeTransferLib.sol\\\";\\nimport {AddressDerivation} from \\\"../utils/AddressDerivation.sol\\\";\\nimport {SettlerAbstract} from \\\"../SettlerAbstract.sol\\\";\\n\\nimport {TooMuchSlippage, ConfusedDeputy} from \\\"./SettlerErrors.sol\\\";\\n\\ninterface IUniswapV3Pool {\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive),\\n    /// or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n}\\n\\nabstract contract UniswapV3 is SettlerAbstract {\\n    using UnsafeMath for uint256;\\n    using SafeTransferLib for IERC20;\\n\\n    /// @dev UniswapV3 Factory contract address\\n    address private immutable UNI_FACTORY_ADDRESS;\\n    /// @dev UniswapV3 pool init code hash.\\n    bytes32 private immutable UNI_POOL_INIT_CODE_HASH;\\n    /// @dev Minimum size of an encoded swap path:\\n    ///      sizeof(address(inputToken) | uint24(fee) | address(outputToken))\\n    uint256 private constant SINGLE_HOP_PATH_SIZE = 0x2b;\\n    /// @dev How many bytes to skip ahead in an encoded path to start at the next hop:\\n    ///      sizeof(address(inputToken) | uint24(fee))\\n    uint256 private constant PATH_SKIP_HOP_SIZE = 0x17;\\n    /// @dev The size of the swap callback prefix data before the Permit2 data.\\n    uint256 private constant SWAP_CALLBACK_PREFIX_DATA_SIZE = 0x3f;\\n    /// @dev The offset from the pointer to the length of the swap callback prefix data to the start of the Permit2 data.\\n    uint256 private constant SWAP_CALLBACK_PERMIT2DATA_OFFSET = 0x5f;\\n    uint256 private constant PERMIT_DATA_SIZE = 0x80;\\n    uint256 private constant ISFORWARDED_DATA_SIZE = 0x20;\\n    /// @dev Minimum tick price sqrt ratio.\\n    uint160 private constant MIN_PRICE_SQRT_RATIO = 4295128739;\\n    /// @dev Minimum tick price sqrt ratio.\\n    uint160 private constant MAX_PRICE_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n    /// @dev Mask of lower 20 bytes.\\n    uint256 private constant ADDRESS_MASK = 0x00ffffffffffffffffffffffffffffffffffffffff;\\n    /// @dev Mask of lower 3 bytes.\\n    uint256 private constant UINT24_MASK = 0xffffff;\\n\\n    constructor(address uniFactory, bytes32 poolInitCodeHash) {\\n        UNI_FACTORY_ADDRESS = uniFactory;\\n        UNI_POOL_INIT_CODE_HASH = poolInitCodeHash;\\n    }\\n\\n    /// @dev Sell a token for another token directly against uniswap v3.\\n    /// @param encodedPath Uniswap-encoded path.\\n    /// @param bips proportion of current balance of the first token in the path to sell.\\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @return buyAmount Amount of the last token in the path bought.\\n    function sellTokenForTokenToUniswapV3(\\n        address recipient,\\n        bytes memory encodedPath,\\n        uint256 bips,\\n        uint256 minBuyAmount\\n    ) internal returns (uint256 buyAmount) {\\n        buyAmount = _swap(\\n            recipient,\\n            encodedPath,\\n            // We don't care about phantom overflow here because reserves are\\n            // limited to 128 bits. Any token balance that would overflow here\\n            // would also break UniV3.\\n            (IERC20(address(bytes20(encodedPath))).balanceOf(address(this)) * bips).unsafeDiv(10_000),\\n            minBuyAmount,\\n            address(this), // payer\\n            new bytes(SWAP_CALLBACK_PREFIX_DATA_SIZE)\\n        );\\n    }\\n\\n    /// @dev Sell a token for another token directly against uniswap v3. Payment is using a Permit2 signature.\\n    /// @param encodedPath Uniswap-encoded path.\\n    /// @param sellAmount amount of the first token in the path to sell.\\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param permit The PermitTransferFrom allowing this contract to spend the taker's tokens\\n    /// @param sig The taker's signature for Permit2\\n    /// @return buyAmount Amount of the last token in the path bought.\\n    function sellTokenForTokenToUniswapV3VIP(\\n        address recipient,\\n        bytes memory encodedPath,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes memory sig\\n    ) internal returns (uint256 buyAmount) {\\n        bytes memory swapCallbackData =\\n            new bytes(SWAP_CALLBACK_PREFIX_DATA_SIZE + PERMIT_DATA_SIZE + ISFORWARDED_DATA_SIZE + sig.length);\\n        _encodePermit2Data(swapCallbackData, permit, sig, _isForwarded());\\n\\n        buyAmount = _swap(recipient, encodedPath, sellAmount, minBuyAmount, _msgSender(), swapCallbackData);\\n    }\\n\\n    /// @dev Sell a token for another token directly against uniswap v3. Payment is using a Permit2 signature.\\n    /// @param encodedPath Uniswap-encoded path.\\n    /// @param sellAmount amount of the first token in the path to sell.\\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param payer The taker of the transaction and the signer of the permit\\n    /// @param permit The PermitTransferFrom allowing this contract to spend the taker's tokens\\n    /// @param sig The taker's signature for Permit2\\n    /// @return buyAmount Amount of the last token in the path bought.\\n    function sellTokenForTokenToUniswapV3MetaTxn(\\n        address recipient,\\n        bytes memory encodedPath,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        address payer,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes memory sig\\n    ) internal returns (uint256 buyAmount) {\\n        bytes memory swapCallbackData =\\n            new bytes(SWAP_CALLBACK_PREFIX_DATA_SIZE + PERMIT_DATA_SIZE + ISFORWARDED_DATA_SIZE + sig.length);\\n        _encodePermit2Data(swapCallbackData, permit, sig, false);\\n\\n        buyAmount = _swap(recipient, encodedPath, sellAmount, minBuyAmount, payer, swapCallbackData);\\n    }\\n\\n    // Executes successive swaps along an encoded uniswap path.\\n    function _swap(\\n        address recipient,\\n        bytes memory encodedPath,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        address payer,\\n        bytes memory swapCallbackData\\n    ) private returns (uint256 buyAmount) {\\n        if (sellAmount > uint256(type(int256).max)) {\\n            Panic.panic(Panic.ARITHMETIC_OVERFLOW);\\n        }\\n\\n        IERC20 outputToken;\\n        while (true) {\\n            bool isPathMultiHop = _isPathMultiHop(encodedPath);\\n            bool zeroForOne;\\n            IUniswapV3Pool pool;\\n            {\\n                (IERC20 token0, uint24 fee, IERC20 token1) = _decodeFirstPoolInfoFromPath(encodedPath);\\n                outputToken = token1;\\n                if (!(zeroForOne = token0 < token1)) {\\n                    (token0, token1) = (token1, token0);\\n                }\\n                pool = _toPool(token0, fee, token1);\\n                _updateSwapCallbackData(swapCallbackData, token0, fee, token1, payer);\\n            }\\n\\n            int256 amount0;\\n            int256 amount1;\\n            if (payer == address(this)) {\\n                (amount0, amount1) = pool.swap(\\n                    // Intermediate tokens go to this contract.\\n                    isPathMultiHop ? address(this) : recipient,\\n                    zeroForOne,\\n                    int256(sellAmount),\\n                    zeroForOne ? MIN_PRICE_SQRT_RATIO + 1 : MAX_PRICE_SQRT_RATIO - 1,\\n                    swapCallbackData\\n                );\\n            } else {\\n                (amount0, amount1) = abi.decode(\\n                    _setOperatorAndCall(\\n                        address(pool),\\n                        abi.encodeCall(\\n                            pool.swap,\\n                            (\\n                                // Intermediate tokens go to this contract.\\n                                isPathMultiHop ? address(this) : recipient,\\n                                zeroForOne,\\n                                int256(sellAmount),\\n                                zeroForOne ? MIN_PRICE_SQRT_RATIO + 1 : MAX_PRICE_SQRT_RATIO - 1,\\n                                swapCallbackData\\n                            )\\n                        )\\n                    ),\\n                    (int256, int256)\\n                );\\n            }\\n\\n            {\\n                int256 _buyAmount = -(zeroForOne ? amount1 : amount0);\\n                if (_buyAmount < 0) {\\n                    Panic.panic(Panic.ARITHMETIC_OVERFLOW);\\n                }\\n                buyAmount = uint256(_buyAmount);\\n            }\\n            if (!isPathMultiHop) {\\n                // Done.\\n                break;\\n            }\\n            // Continue with next hop.\\n            payer = address(this); // Subsequent hops are paid for by us.\\n            sellAmount = buyAmount;\\n            // Skip to next hop along path.\\n            encodedPath = _shiftHopFromPathInPlace(encodedPath);\\n            assembly (\\\"memory-safe\\\") {\\n                mstore(swapCallbackData, SWAP_CALLBACK_PREFIX_DATA_SIZE)\\n            }\\n        }\\n        if (buyAmount < minBuyAmount) {\\n            revert TooMuchSlippage(address(outputToken), minBuyAmount, buyAmount);\\n        }\\n    }\\n\\n    // Return whether or not an encoded uniswap path contains more than one hop.\\n    function _isPathMultiHop(bytes memory encodedPath) private pure returns (bool) {\\n        return encodedPath.length > SINGLE_HOP_PATH_SIZE;\\n    }\\n\\n    function _decodeFirstPoolInfoFromPath(bytes memory encodedPath)\\n        private\\n        pure\\n        returns (IERC20 inputToken, uint24 fee, IERC20 outputToken)\\n    {\\n        if (encodedPath.length < SINGLE_HOP_PATH_SIZE) {\\n            Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Solidity cleans dirty bits automatically\\n            inputToken := mload(add(encodedPath, 0x14))\\n            fee := mload(add(encodedPath, 0x17))\\n            outputToken := mload(add(encodedPath, SINGLE_HOP_PATH_SIZE))\\n        }\\n    }\\n\\n    // Skip past the first hop of an encoded uniswap path in-place.\\n    function _shiftHopFromPathInPlace(bytes memory encodedPath) private pure returns (bytes memory) {\\n        if (encodedPath.length < PATH_SKIP_HOP_SIZE) {\\n            Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            let length := sub(mload(encodedPath), PATH_SKIP_HOP_SIZE)\\n            encodedPath := add(encodedPath, PATH_SKIP_HOP_SIZE)\\n            mstore(encodedPath, length)\\n        }\\n        return encodedPath;\\n    }\\n\\n    function _encodePermit2Data(\\n        bytes memory swapCallbackData,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes memory sig,\\n        bool isForwarded\\n    ) private pure {\\n        assembly (\\\"memory-safe\\\") {\\n            {\\n                let permitted := mload(permit)\\n                mstore(add(swapCallbackData, SWAP_CALLBACK_PERMIT2DATA_OFFSET), mload(permitted))\\n                mstore(add(swapCallbackData, add(SWAP_CALLBACK_PERMIT2DATA_OFFSET, 0x20)), mload(add(permitted, 0x20)))\\n            }\\n            mstore(add(swapCallbackData, add(SWAP_CALLBACK_PERMIT2DATA_OFFSET, 0x40)), mload(add(permit, 0x20)))\\n            mstore(add(swapCallbackData, add(SWAP_CALLBACK_PERMIT2DATA_OFFSET, 0x60)), mload(add(permit, 0x40)))\\n            mstore(add(swapCallbackData, add(SWAP_CALLBACK_PERMIT2DATA_OFFSET, PERMIT_DATA_SIZE)), and(isForwarded, 1))\\n            mcopy(\\n                add(\\n                    swapCallbackData,\\n                    add(add(SWAP_CALLBACK_PERMIT2DATA_OFFSET, PERMIT_DATA_SIZE), ISFORWARDED_DATA_SIZE)\\n                ),\\n                add(sig, 0x20),\\n                mload(sig)\\n            )\\n        }\\n    }\\n\\n    // Update `swapCallbackData` in place with new values.\\n    function _updateSwapCallbackData(\\n        bytes memory swapCallbackData,\\n        IERC20 token0,\\n        uint24 fee,\\n        IERC20 token1,\\n        address payer\\n    ) private pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(swapCallbackData)\\n            mstore(add(swapCallbackData, 0x3f), payer)\\n            mstore(add(swapCallbackData, 0x2b), token1)\\n            mstore(add(swapCallbackData, 0x17), fee)\\n            mstore(add(swapCallbackData, 0x14), token0)\\n            mstore(swapCallbackData, length)\\n        }\\n    }\\n\\n    // Compute the pool address given two tokens and a fee.\\n    function _toPool(IERC20 inputToken, uint24 fee, IERC20 outputToken) private view returns (IUniswapV3Pool) {\\n        // address(keccak256(abi.encodePacked(\\n        //     hex\\\"ff\\\",\\n        //     UNI_FACTORY_ADDRESS,\\n        //     keccak256(abi.encode(inputToken, outputToken, fee)),\\n        //     UNI_POOL_INIT_CODE_HASH\\n        // )))\\n        (IERC20 token0, IERC20 token1) =\\n            inputToken < outputToken ? (inputToken, outputToken) : (outputToken, inputToken);\\n        bytes32 salt;\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(0x00, and(ADDRESS_MASK, token0))\\n            mstore(0x20, and(ADDRESS_MASK, token1))\\n            mstore(0x40, and(UINT24_MASK, fee))\\n            salt := keccak256(0x00, 0x60)\\n            mstore(0x40, ptr)\\n        }\\n        return IUniswapV3Pool(\\n            AddressDerivation.deriveDeterministicContract(UNI_FACTORY_ADDRESS, salt, UNI_POOL_INIT_CODE_HASH)\\n        );\\n    }\\n\\n    error ZeroSwapAmount();\\n\\n    /// @dev The UniswapV3 pool swap callback which pays the funds requested\\n    ///      by the caller/pool to the pool. Can only be called by a valid\\n    ///      UniswapV3 pool.\\n    /// @param amount0Delta Token0 amount owed.\\n    /// @param amount1Delta Token1 amount owed.\\n    /// @param data Arbitrary data forwarded from swap() caller. A packed encoding of: inputToken, outputToken, fee, payer, permit\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        // Decode the data.\\n        IERC20 token0;\\n        uint24 fee;\\n        IERC20 token1;\\n        address payer;\\n        assembly (\\\"memory-safe\\\") {\\n            {\\n                let firstWord := calldataload(data.offset)\\n                token0 := shr(0x60, firstWord)\\n                fee := shr(0x48, firstWord)\\n            }\\n            token1 := calldataload(add(data.offset, 0xb))\\n            payer := calldataload(add(data.offset, 0x1f))\\n        }\\n        if (msg.sender != address(_toPool(token0, fee, token1))) {\\n            revert ConfusedDeputy();\\n        }\\n\\n        bytes calldata permit2Data = data[SWAP_CALLBACK_PREFIX_DATA_SIZE:];\\n        // Pay the amount owed to the pool.\\n        if (amount0Delta > 0) {\\n            _pay(token0, payer, uint256(amount0Delta), permit2Data);\\n        } else if (amount1Delta > 0) {\\n            _pay(token1, payer, uint256(amount1Delta), permit2Data);\\n        } else {\\n            revert ZeroSwapAmount();\\n        }\\n    }\\n\\n    function _pay(IERC20 token, address payer, uint256 amount, bytes calldata permit2Data) private {\\n        if (payer == address(this)) {\\n            token.safeTransfer(msg.sender, amount);\\n        } else {\\n            (ISignatureTransfer.PermitTransferFrom memory permit, bool isForwarded) =\\n                abi.decode(permit2Data, (ISignatureTransfer.PermitTransferFrom, bool));\\n            bytes calldata sig = permit2Data[PERMIT_DATA_SIZE + ISFORWARDED_DATA_SIZE:];\\n            (ISignatureTransfer.SignatureTransferDetails memory transferDetails,,) =\\n                _permitToTransferDetails(permit, msg.sender);\\n            _transferFrom(permit, transferDetails, payer, sig, isForwarded);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/UniswapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {UnsafeMath} from \\\"../utils/UnsafeMath.sol\\\";\\nimport {Panic} from \\\"../utils/Panic.sol\\\";\\nimport {TooMuchSlippage} from \\\"./SettlerErrors.sol\\\";\\n\\ninterface IUniV2Pair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112, uint112, uint32);\\n    function swap(uint256, uint256, address, bytes calldata) external;\\n}\\n\\nabstract contract UniswapV2 {\\n    using UnsafeMath for uint256;\\n\\n    // bytes4(keccak256(\\\"getReserves()\\\"))\\n    uint32 private constant UNI_PAIR_RESERVES_SELECTOR = 0x0902f1ac;\\n    // bytes4(keccak256(\\\"swap(uint256,uint256,address,bytes)\\\"))\\n    uint32 private constant UNI_PAIR_SWAP_SELECTOR = 0x022c0d9f;\\n    // bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n    uint32 private constant ERC20_TRANSFER_SELECTOR = 0xa9059cbb;\\n    // bytes4(keccak256(\\\"balanceOf(address)\\\"))\\n    uint32 private constant ERC20_BALANCEOF_SELECTOR = 0x70a08231;\\n\\n    /// @dev Sell a token for another token using UniswapV2.\\n    function sellToUniswapV2(\\n        address recipient,\\n        address sellToken,\\n        address pool,\\n        uint8 swapInfo,\\n        uint256 bips,\\n        uint256 minBuyAmount\\n    ) internal {\\n        // Preventing calls to Permit2 or AH is not explicitly required as neither of these contracts implement the `swap` nor `transfer` selector\\n\\n        // |7|6|5|4|3|2|1|0| - bit positions in swapInfo (uint8)\\n        // |0|0|0|0|0|0|F|Z| - Z: zeroForOne flag, F: sellTokenHasFee flag\\n        bool zeroForOne = (swapInfo & 1) == 1; // Extract the least significant bit (bit 0)\\n        bool sellTokenHasFee = (swapInfo & 2) >> 1 == 1; // Extract the second least significant bit (bit 1) and shift it right\\n\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        // If bips is zero we assume there are no funds within this contract, skip the updating sellAmount.\\n        // This case occurs if the pool is being chained, in which the funds have been sent directly to the pool\\n        if (bips != 0) {\\n            // We don't care about phantom overflow here because reserves are\\n            // limited to 112 bits. Any token balance that would overflow here would\\n            // also break UniV2.\\n            // It is *possible* to set `bips` above the basis and therefore\\n            // cause an overflow on this multiplication. However, `bips` is\\n            // passed as authenticated calldata, so this is a GIGO error that we\\n            // do not attempt to fix.\\n            unchecked {\\n                sellAmount = (IERC20(sellToken).balanceOf(address(this)) * bips).unsafeDiv(10_000);\\n            }\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n\\n            // transfer sellAmount (a non zero amount) of sellToken to the pool\\n            if sellAmount {\\n                mstore(ptr, ERC20_TRANSFER_SELECTOR)\\n                mstore(add(ptr, 0x20), pool)\\n                mstore(add(ptr, 0x40), sellAmount)\\n                // ...||ERC20_TRANSFER_SELECTOR|pool|sellAmount|\\n                if iszero(call(gas(), sellToken, 0, add(ptr, 0x1c), 0x44, 0x00, 0x20)) { bubbleRevert(ptr) }\\n                if iszero(or(iszero(returndatasize()), and(iszero(lt(returndatasize(), 0x20)), eq(mload(0x00), 1)))) {\\n                    revert(0, 0)\\n                }\\n            }\\n\\n            // get pool reserves\\n            let sellReserve\\n            let buyReserve\\n            mstore(0x00, UNI_PAIR_RESERVES_SELECTOR)\\n            // ||UNI_PAIR_RESERVES_SELECTOR|\\n            if iszero(staticcall(gas(), pool, 0x1c, 0x04, 0x00, 0x40)) { bubbleRevert(ptr) }\\n            if lt(returndatasize(), 0x40) { revert(0, 0) }\\n            {\\n                let r := shl(5, zeroForOne)\\n                buyReserve := mload(r)\\n                sellReserve := mload(xor(0x20, r))\\n            }\\n\\n            // Update the sell amount in the following cases:\\n            //   the funds are in the pool already (flagged by sellAmount being 0)\\n            //   the sell token has a fee (flagged by sellTokenHasFee)\\n            if or(iszero(sellAmount), sellTokenHasFee) {\\n                // retrieve the sellToken balance of the pool\\n                mstore(0x00, ERC20_BALANCEOF_SELECTOR)\\n                mstore(0x20, and(0xffffffffffffffffffffffffffffffffffffffff, pool))\\n                // ||ERC20_BALANCEOF_SELECTOR|pool|\\n                if iszero(staticcall(gas(), sellToken, 0x1c, 0x24, 0x00, 0x20)) { bubbleRevert(ptr) }\\n                if lt(returndatasize(), 0x20) { revert(0, 0) }\\n                let bal := mload(0x00)\\n\\n                // determine real sellAmount by comparing pool's sellToken balance to reserve amount\\n                if lt(bal, sellReserve) {\\n                    mstore(0x00, 0x4e487b71) // selector for `Panic(uint256)`\\n                    mstore(0x20, 0x11) // panic code for arithmetic underflow\\n                    revert(0x1c, 0x24)\\n                }\\n                sellAmount := sub(bal, sellReserve)\\n            }\\n\\n            // compute buyAmount based on sellAmount and reserves\\n            let sellAmountWithFee := mul(sellAmount, 997)\\n            buyAmount := div(mul(sellAmountWithFee, buyReserve), add(sellAmountWithFee, mul(sellReserve, 1000)))\\n            let swapCalldata := add(ptr, 0x1c)\\n            // set up swap call selector and empty callback data\\n            mstore(ptr, UNI_PAIR_SWAP_SELECTOR)\\n            mstore(add(ptr, 0x80), 0x80) // offset to length of data\\n            mstore(add(ptr, 0xa0), 0) // length of data\\n\\n            // set amount0Out and amount1Out\\n            {\\n                // If `zeroForOne`, offset is 0x24, else 0x04\\n                let offset := add(0x04, shl(5, zeroForOne))\\n                mstore(add(swapCalldata, offset), buyAmount)\\n                mstore(add(swapCalldata, xor(0x20, offset)), 0)\\n            }\\n\\n            mstore(add(swapCalldata, 0x44), and(0xffffffffffffffffffffffffffffffffffffffff, recipient))\\n            // ...||UNI_PAIR_SWAP_SELECTOR|amount0Out|amount1Out|recipient|data|\\n\\n            // perform swap at the pool sending bought tokens to the recipient\\n            if iszero(call(gas(), pool, 0, swapCalldata, 0xa4, 0, 0)) { bubbleRevert(swapCalldata) }\\n\\n            // revert with the return data from the most recent call\\n            function bubbleRevert(p) {\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (buyAmount < minBuyAmount) {\\n            revert TooMuchSlippage(\\n                zeroForOne ? IUniV2Pair(pool).token1() : IUniV2Pair(pool).token0(), minBuyAmount, sellAmount\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/MakerPSM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IERC20, IERC20Meta} from \\\"../IERC20.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"../vendor/SafeTransferLib.sol\\\";\\nimport {UnsafeMath} from \\\"../utils/UnsafeMath.sol\\\";\\n\\ninterface IPSM {\\n    /// @dev Get the fee for selling DAI to USDC in PSM\\n    /// @return tout toll out [wad]\\n    function tout() external view returns (uint256);\\n\\n    /// @dev Get the address of the underlying vault powering PSM\\n    /// @return address of gemJoin contract\\n    function gemJoin() external view returns (address);\\n\\n    /// @dev Sell USDC for DAI\\n    /// @param usr The address of the account trading USDC for DAI.\\n    /// @param gemAmt The amount of USDC to sell in USDC base units\\n    function sellGem(address usr, uint256 gemAmt) external;\\n\\n    /// @dev Buy USDC for DAI\\n    /// @param usr The address of the account trading DAI for USDC\\n    /// @param gemAmt The amount of USDC to buy in USDC base units\\n    function buyGem(address usr, uint256 gemAmt) external;\\n}\\n\\nabstract contract MakerPSM {\\n    using UnsafeMath for uint256;\\n    using SafeTransferLib for IERC20;\\n    using SafeTransferLib for IERC20Meta;\\n\\n    // Maker units https://github.com/makerdao/dss/blob/master/DEVELOPING.md\\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    IERC20 internal immutable DAI;\\n\\n    constructor(address dai) {\\n        DAI = IERC20(dai);\\n    }\\n\\n    function makerPsmSellGem(address recipient, uint256 bips, IPSM psm, IERC20Meta gemToken) internal {\\n        // phantom overflow can't happen here because PSM prohibits gemToken with decimals > 18\\n        uint256 sellAmount = (gemToken.balanceOf(address(this)) * bips).unsafeDiv(10_000);\\n        gemToken.safeApproveIfBelow(psm.gemJoin(), sellAmount);\\n        psm.sellGem(recipient, sellAmount);\\n    }\\n\\n    function makerPsmBuyGem(address recipient, uint256 bips, IPSM psm, IERC20Meta gemToken) internal {\\n        // phantom overflow can't happen here because DAI has decimals = 18\\n        uint256 sellAmount = (DAI.balanceOf(address(this)) * bips).unsafeDiv(10_000);\\n        unchecked {\\n            uint256 feeDivisor = psm.tout() + WAD; // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\\n            // overflow can't happen at all because DAI is reasonable and PSM prohibits gemToken with decimals > 18\\n            uint256 buyAmount = (sellAmount * 10 ** uint256(gemToken.decimals())).unsafeDiv(feeDivisor);\\n\\n            DAI.safeApproveIfBelow(address(psm), sellAmount);\\n            psm.buyGem(recipient, buyAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vendor/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.25;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    uint32 private constant _TRANSFER_FROM_FAILED_SELECTOR = 0x7939f424; // bytes4(keccak256(\\\"TransferFromFailed()\\\"))\\n    uint32 private constant _TRANSFER_FAILED_SELECTOR = 0x90b8ec18; // bytes4(keccak256(\\\"TransferFailed()\\\"))\\n    uint32 private constant _APPROVE_FAILED_SELECTOR = 0x3e3f8f73; // bytes4(keccak256(\\\"ApproveFailed()\\\"))\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address payable to, uint256 amount) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            // Transfer the ETH and store if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                let freeMemoryPointer := mload(0x40)\\n                returndatacopy(freeMemoryPointer, 0, returndatasize())\\n                revert(freeMemoryPointer, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n            // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)) {\\n                returndatacopy(freeMemoryPointer, 0, returndatasize())\\n                revert(freeMemoryPointer, returndatasize())\\n            }\\n            // We check that the call either returned exactly 1 (can't just be non-zero data), or had no\\n            // return data.\\n            if iszero(or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize()))) {\\n                mstore(0, _TRANSFER_FROM_FAILED_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n            // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)) {\\n                returndatacopy(freeMemoryPointer, 0, returndatasize())\\n                revert(freeMemoryPointer, returndatasize())\\n            }\\n            // We check that the call either returned exactly 1 (can't just be non-zero data), or had no\\n            // return data.\\n            if iszero(or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize()))) {\\n                mstore(0, _TRANSFER_FAILED_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    function safeApprove(IERC20 token, address to, uint256 amount) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n            // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)) {\\n                returndatacopy(freeMemoryPointer, 0, returndatasize())\\n                revert(freeMemoryPointer, returndatasize())\\n            }\\n            // We check that the call either returned exactly 1 (can't just be non-zero data), or had no\\n            // return data.\\n            if iszero(or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize()))) {\\n                mstore(0, _APPROVE_FAILED_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    function safeApproveIfBelow(IERC20 token, address spender, uint256 amount) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance < amount) {\\n            if (allowance != 0) {\\n                safeApprove(token, spender, 0);\\n            }\\n            safeApprove(token, spender, type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/UnsafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nlibrary UnsafeMath {\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    function unsafeInc(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    function unsafeNeg(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            return -x;\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 numerator, uint256 denominator) internal pure returns (uint256 quotient) {\\n        assembly (\\\"memory-safe\\\") {\\n            quotient := div(numerator, denominator)\\n        }\\n    }\\n\\n    function unsafeDiv(int256 numerator, int256 denominator) internal pure returns (int256 quotient) {\\n        assembly (\\\"memory-safe\\\") {\\n            quotient := sdiv(numerator, denominator)\\n        }\\n    }\\n\\n    function unsafeMod(uint256 numerator, uint256 denominator) internal pure returns (uint256 remainder) {\\n        assembly (\\\"memory-safe\\\") {\\n            remainder := mod(numerator, denominator)\\n        }\\n    }\\n\\n    function unsafeMod(int256 numerator, int256 denominator) internal pure returns (int256 remainder) {\\n        assembly (\\\"memory-safe\\\") {\\n            remainder := smod(numerator, denominator)\\n        }\\n    }\\n\\n    function unsafeMulMod(uint256 a, uint256 b, uint256 m) internal pure returns (uint256 r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r := mulmod(a, b, m)\\n        }\\n    }\\n\\n    function unsafeAddMod(uint256 a, uint256 b, uint256 m) internal pure returns (uint256 r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r := addmod(a, b, m)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vendor/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {UnsafeMath} from \\\"../utils/UnsafeMath.sol\\\";\\nimport {Panic} from \\\"../utils/Panic.sol\\\";\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\n/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\nlibrary FullMath {\\n    using UnsafeMath for uint256;\\n\\n    /// @notice 512-bit multiply [prod1 prod0] = a * b\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return prod0 Least significant 256 bits of the product\\n    /// @return prod1 Most significant 256 bits of the product\\n    /// @return remainder Remainder of full-precision division\\n    function _mulDivSetup(uint256 a, uint256 b, uint256 denominator)\\n        private\\n        pure\\n        returns (uint256 prod0, uint256 prod1, uint256 remainder)\\n    {\\n        // Compute the product mod 2**256 and mod 2**256 - 1 then use the Chinese\\n        // Remainder Theorem to reconstruct the 512 bit result. The result is stored\\n        // in two 256 variables such that product = prod1 * 2**256 + prod0\\n        assembly (\\\"memory-safe\\\") {\\n            // Full-precision multiplication\\n            {\\n                let mm := mulmod(a, b, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            remainder := mulmod(a, b, denominator)\\n        }\\n    }\\n\\n    /// @notice 512-bit by 256-bit division.\\n    /// @param prod0 Least significant 256 bits of the product\\n    /// @param prod1 Most significant 256 bits of the product\\n    /// @param denominator The divisor\\n    /// @param remainder Remainder of full-precision division\\n    /// @return The 256-bit result\\n    /// @dev Overflow and division by zero aren't checked and are GIGO errors\\n    function _mulDivInvert(uint256 prod0, uint256 prod1, uint256 denominator, uint256 remainder)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 inv;\\n        assembly (\\\"memory-safe\\\") {\\n            // Make division exact by rounding [prod1 prod0] down to a multiple of\\n            // denominator\\n            // Subtract 256 bit number from 512 bit number\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n\\n            // Factor powers of two out of denominator\\n            {\\n                // Compute largest power of two divisor of denominator.\\n                // Always >= 1.\\n                let twos := and(sub(0, denominator), denominator)\\n\\n                // Divide denominator by power of two\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by the factors of two\\n                prod0 := div(prod0, twos)\\n                // Shift in bits from prod1 into prod0. For this we need to flip `twos`\\n                // such that it is 2**256 / twos.\\n                // If twos is zero, then it becomes one\\n                twos := add(div(sub(0, twos), twos), 1)\\n                prod0 := or(prod0, mul(prod1, twos))\\n            }\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse modulo 2**256\\n            // such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct correct for\\n            // four bits. That is, denominator * inv = 1 mod 2**4\\n            inv := xor(mul(3, denominator), 2)\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\\n        }\\n\\n        // Because the division is now exact we can divide by multiplying with the\\n        // modular inverse of denominator. This will give us the correct result\\n        // modulo 2**256. Since the precoditions guarantee that the outcome is less\\n        // than 2**256, this is the final result.  We don't need to compute the high\\n        // bits of the result and prod1 is no longer required.\\n        unchecked {\\n            return prod0 * inv;\\n        }\\n    }\\n\\n    /// @notice Calculates a\u00d7b\u00f7denominator with full precision then rounds towards 0. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return The 256-bit result\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256) {\\n        (uint256 prod0, uint256 prod1, uint256 remainder) = _mulDivSetup(a, b, denominator);\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        if (denominator <= prod1) {\\n            Panic.panic(denominator == 0 ? Panic.DIVISION_BY_ZERO : Panic.ARITHMETIC_OVERFLOW);\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            return prod0.unsafeDiv(denominator);\\n        }\\n        return _mulDivInvert(prod0, prod1, denominator, remainder);\\n    }\\n\\n    /// @notice Calculates a\u00d7b\u00f7denominator with full precision then rounds towards 0. Overflowing a uint256 or denominator == 0 are GIGO errors\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return The 256-bit result\\n    function unsafeMulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256) {\\n        (uint256 prod0, uint256 prod1, uint256 remainder) = _mulDivSetup(a, b, denominator);\\n        // Overflow and zero-division checks are skipped\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            return prod0.unsafeDiv(denominator);\\n        }\\n        return _mulDivInvert(prod0, prod1, denominator, remainder);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/FreeMemory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nabstract contract FreeMemory {\\n    modifier DANGEROUS_freeMemory() {\\n        uint256 freeMemPtr;\\n        assembly (\\\"memory-safe\\\") {\\n            freeMemPtr := mload(0x40)\\n        }\\n        _;\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x40, freeMemPtr)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ISettlerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {ISignatureTransfer} from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\n\\ninterface ISettlerActions {\\n    /// @dev Transfer funds from msg.sender Permit2.\\n    function PERMIT2_TRANSFER_FROM(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes memory sig\\n    ) external;\\n\\n    /// @dev Transfer funds from metatransaction requestor into the Settler contract using Permit2. Only for use in `Settler.executeMetaTxn` where the signature is provided as calldata\\n    function METATXN_PERMIT2_TRANSFER_FROM(address recipient, ISignatureTransfer.PermitTransferFrom memory) external;\\n\\n    /// @dev Settle an OtcOrder between maker and taker transfering funds directly between the parties\\n    // Post-req: Payout if recipient != taker\\n    function SETTLER_OTC_PERMIT2(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory makerPermit,\\n        address maker,\\n        bytes memory makerSig,\\n        ISignatureTransfer.PermitTransferFrom memory takerPermit,\\n        bytes memory takerSig\\n    ) external;\\n\\n    /// @dev Settle an OtcOrder between maker and taker transfering funds directly between the parties for the entire amount\\n    function METATXN_SETTLER_OTC_PERMIT2(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory makerPermit,\\n        address maker,\\n        bytes memory makerSig,\\n        ISignatureTransfer.PermitTransferFrom memory takerPermit\\n    ) external;\\n\\n    /// @dev Settle an OtcOrder between Maker and Settler. Transfering funds from the Settler contract to maker.\\n    /// Retaining funds in the settler contract.\\n    // Pre-req: Funded\\n    // Post-req: Payout\\n    function SETTLER_OTC_SELF_FUNDED(\\n        address recipient,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        address maker,\\n        bytes memory makerSig,\\n        address takerToken,\\n        uint256 maxTakerAmount\\n    ) external;\\n\\n    /// @dev Trades against UniswapV3 using the contracts balance for funding\\n    // Pre-req: Funded\\n    // Post-req: Payout\\n    function UNISWAPV3_SWAP_EXACT_IN(address recipient, uint256 bips, uint256 amountOutMin, bytes memory path)\\n        external;\\n\\n    /// @dev Trades against UniswapV3 using user funds via Permit2 for funding\\n    function UNISWAPV3_PERMIT2_SWAP_EXACT_IN(\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes memory path,\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes memory sig\\n    ) external;\\n\\n    function MAKER_PSM_SELL_GEM(address recipient, uint256 bips, address psm, address gemToken) external;\\n    function MAKER_PSM_BUY_GEM(address recipient, uint256 bips, address psm, address gemToken) external;\\n\\n    /// @dev Trades against UniswapV3 using user funds via Permit2 for funding. Metatransaction variant. Signature is over all actions.\\n    function METATXN_UNISWAPV3_PERMIT2_SWAP_EXACT_IN(\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes memory path,\\n        ISignatureTransfer.PermitTransferFrom memory permit\\n    ) external;\\n\\n    /// @dev Trades against UniswapV2 using the contracts balance for funding\\n    function UNISWAPV2_SWAP(\\n        address recipient,\\n        address sellToken,\\n        address pool,\\n        uint8 swapInfo,\\n        uint256 bips,\\n        uint256 amountOutMin\\n    ) external;\\n\\n    function POSITIVE_SLIPPAGE(address recipient, address token, uint256 expectedAmount) external;\\n\\n    /// @dev Trades against a basic AMM which follows the approval, transferFrom(msg.sender) interaction\\n    // Pre-req: Funded\\n    // Post-req: Payout\\n    function BASIC_SELL(address pool, address sellToken, uint256 bips, uint256 offset, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"src/core/SettlerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\n/// @notice Thrown when an offset is not the expected value\\nerror InvalidOffset();\\n\\n/// @notice Thrown when a validating a target contract to avoid certain types of targets\\nerror ConfusedDeputy();\\n\\n/// @notice Thrown when a target contract is invalid given the context\\nerror InvalidTarget();\\n\\n/// @notice Thrown when validating the caller against the expected caller\\nerror InvalidSender();\\n\\n/// @notice Thrown in cases when using a Trusted Forwarder / AllowanceHolder is not allowed\\nerror ForwarderNotAllowed();\\n\\n/// @notice Thrown when a signature length is not the expected length\\nerror InvalidSignatureLen();\\n\\n/// @notice Thrown when a slippage limit is exceeded\\nerror TooMuchSlippage(address token, uint256 expected, uint256 actual);\\n\"\r\n    },\r\n    \"lib/permit2/src/interfaces/IEIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/allowanceholder/AllowanceHolderContext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {Context} from \\\"../Context.sol\\\";\\nimport {IAllowanceHolder} from \\\"./IAllowanceHolder.sol\\\";\\n\\nabstract contract AllowanceHolderContext is Context {\\n    IAllowanceHolder internal constant _ALLOWANCE_HOLDER = IAllowanceHolder(0x0000000000001fF3684f28c67538d4D072C22734);\\n\\n    function _isForwarded() internal view virtual override returns (bool) {\\n        return super._isForwarded() || super._msgSender() == address(_ALLOWANCE_HOLDER);\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        sender = super._msgSender();\\n        if (sender == address(_ALLOWANCE_HOLDER)) {\\n            // ERC-2771 like usage where the _trusted_ `AllowanceHolder` has appended the appropriate\\n            // msg.sender to the msg data\\n            assembly (\\\"memory-safe\\\") {\\n                sender := shr(0x60, calldataload(sub(calldatasize(), 0x14)))\\n            }\\n        }\\n    }\\n\\n    // this is here to avoid foot-guns and make it very explicit that we intend\\n    // to pass the confused deputy check in AllowanceHolder\\n    function balanceOf(address) external pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore8(0x00, 0x00)\\n            revert(0x00, 0x01)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SettlerAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {Permit2PaymentAbstract} from \\\"./core/Permit2PaymentAbstract.sol\\\";\\n\\nabstract contract SettlerAbstract is Permit2PaymentAbstract {\\n    // Permit2 Witness for meta transactions\\n    string internal constant ACTIONS_AND_SLIPPAGE_TYPE =\\n        \\\"ActionsAndSlippage(address buyToken,address recipient,uint256 minAmountOut,bytes[] actions)\\\";\\n    bytes32 internal constant ACTIONS_AND_SLIPPAGE_TYPEHASH =\\n        0x7d6b6ac05bf0d3f905c044bcb7baf6b20670f84c2275870747ac3b8fa8c43e12;\\n\\n    constructor() {\\n        assert(ACTIONS_AND_SLIPPAGE_TYPEHASH == keccak256(bytes(ACTIONS_AND_SLIPPAGE_TYPE)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Revert.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nlibrary Revert {\\n    function _revert(bytes memory reason) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            revert(add(reason, 0x20), mload(reason))\\n        }\\n    }\\n\\n    function maybeRevert(bool success, bytes memory reason) internal pure {\\n        if (!success) {\\n            _revert(reason);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Panic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nlibrary Panic {\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71) // selector for `Panic(uint256)`\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n\\n    // https://docs.soliditylang.org/en/latest/control-structures.html#panic-via-assert-and-error-via-require\\n    uint8 internal constant GENERIC = 0x00;\\n    uint8 internal constant ASSERT_FAIL = 0x01;\\n    uint8 internal constant ARITHMETIC_OVERFLOW = 0x11;\\n    uint8 internal constant DIVISION_BY_ZERO = 0x12;\\n    uint8 internal constant ENUM_CAST = 0x21;\\n    uint8 internal constant CORRUPT_STORAGE_ARRAY = 0x22;\\n    uint8 internal constant POP_EMPTY_ARRAY = 0x31;\\n    uint8 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    uint8 internal constant OUT_OF_MEMORY = 0x41;\\n    uint8 internal constant ZERO_FUNCTION_POINTER = 0x51;\\n}\\n\"\r\n    },\r\n    \"src/utils/AddressDerivation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {Panic} from \\\"./Panic.sol\\\";\\nimport {UnsafeMath} from \\\"./UnsafeMath.sol\\\";\\n\\nlibrary AddressDerivation {\\n    using UnsafeMath for uint256;\\n\\n    uint256 internal constant _SECP256K1_P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n    uint256 internal constant _SECP256K1_N = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n    uint256 internal constant SECP256K1_GX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\\n    uint256 internal constant SECP256K1_GY = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\\n\\n    error InvalidCurve(uint256 x, uint256 y);\\n\\n    // keccak256(abi.encodePacked(ECMUL([x, y], k)))[12:]\\n    function deriveEOA(uint256 x, uint256 y, uint256 k) internal pure returns (address) {\\n        if (k == 0) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        if (k >= _SECP256K1_N || x >= _SECP256K1_P || y >= _SECP256K1_P) {\\n            Panic.panic(Panic.ARITHMETIC_OVERFLOW);\\n        }\\n\\n        // +/-7 are neither square nor cube mod p, so we only have to check one\\n        // coordinate against 0. if it is 0, then the other is too (the point at\\n        // infinity) or the point is invalid\\n        if (\\n            x == 0\\n                || y.unsafeMulMod(y, _SECP256K1_P)\\n                    != x.unsafeMulMod(x, _SECP256K1_P).unsafeMulMod(x, _SECP256K1_P).unsafeAddMod(7, _SECP256K1_P)\\n        ) {\\n            revert InvalidCurve(x, y);\\n        }\\n\\n        unchecked {\\n            // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384\\n            return ecrecover(\\n                bytes32(0), uint8(27 + (y & 1)), bytes32(x), bytes32(UnsafeMath.unsafeMulMod(x, k, _SECP256K1_N))\\n            );\\n        }\\n    }\\n\\n    // keccak256(RLP([deployer, nonce]))[12:]\\n    function deriveContract(address deployer, uint64 nonce) internal pure returns (address result) {\\n        if (nonce == 0) {\\n            assembly (\\\"memory-safe\\\") {\\n                mstore(\\n                    0x00,\\n                    or(\\n                        0xd694000000000000000000000000000000000000000080,\\n                        shl(8, and(0xffffffffffffffffffffffffffffffffffffffff, deployer))\\n                    )\\n                )\\n                result := keccak256(0x09, 0x17)\\n            }\\n        } else if (nonce < 0x80) {\\n            assembly (\\\"memory-safe\\\") {\\n                // we don't care about dirty bits in `deployer`; they'll be overwritten later\\n                mstore(0x14, deployer)\\n                mstore(0x00, 0xd694)\\n                mstore8(0x34, nonce)\\n                result := keccak256(0x1e, 0x17)\\n            }\\n        } else {\\n            // compute ceil(log_256(nonce)) + 1\\n            uint256 nonceLength = 8;\\n            unchecked {\\n                if ((uint256(nonce) >> 32) != 0) {\\n                    nonceLength += 32;\\n                    if (nonce == type(uint64).max) {\\n                        Panic.panic(Panic.ARITHMETIC_OVERFLOW);\\n                    }\\n                }\\n                if ((uint256(nonce) >> 8) >= (1 << nonceLength)) {\\n                    nonceLength += 16;\\n                }\\n                if (uint256(nonce) >= (1 << nonceLength)) {\\n                    nonceLength += 8;\\n                }\\n                // ceil\\n                if ((uint256(nonce) << 8) >= (1 << nonceLength)) {\\n                    nonceLength += 8;\\n                }\\n                // bytes, not bits\\n                nonceLength >>= 3;\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                // we don't care about dirty bits in `deployer` or `nonce`. they'll be overwritten later\\n                mstore(nonceLength, nonce)\\n                mstore8(0x20, add(0x7f, nonceLength))\\n                mstore(0x00, deployer)\\n                mstore8(0x0a, add(0xd5, nonceLength))\\n                mstore8(0x0b, 0x94)\\n                result := keccak256(0x0a, add(0x16, nonceLength))\\n            }\\n        }\\n    }\\n\\n    // keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, initHash))[12:]\\n    function deriveDeterministicContract(address deployer, bytes32 salt, bytes32 initHash)\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // we don't care about dirty bits in `deployer`; they'll be overwritten later\\n            mstore(ptr, deployer)\\n            mstore8(add(ptr, 0x0b), 0xff)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(add(ptr, 0x40), initHash)\\n            result := keccak256(add(ptr, 0x0b), 0x55)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nabstract contract AbstractContext {\\n    function _msgSender() internal view virtual returns (address);\\n\\n    function _msgData() internal view virtual returns (bytes calldata);\\n\\n    function _isForwarded() internal view virtual returns (bool);\\n}\\n\\nabstract contract Context is AbstractContext {\\n    function _msgSender() internal view virtual override returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _isForwarded() internal view virtual override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/allowanceholder/IAllowanceHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IAllowanceHolder {\\n    /// @notice Executes against `target` with the `data` payload. Prior to execution, token permits\\n    ///         are temporarily stored for the duration of the transaction. These permits can be\\n    ///         consumed by the `operator` during the execution\\n    /// @notice `operator` consumes the funds during its operations by calling back into\\n    ///         `AllowanceHolder` with `transferFrom`, consuming a token permit.\\n    /// @dev Neither `exec` nor `transferFrom` check that `token` contains code.\\n    /// @dev msg.sender is forwarded to target appended to the msg data (similar to ERC-2771)\\n    /// @param operator An address which is allowed to consume the token permits\\n    /// @param token The ERC20 token the caller has authorised to be consumed\\n    /// @param amount The quantity of `token` the caller has authorised to be consumed\\n    /// @param target A contract to execute operations with `data`\\n    /// @param data The data to forward to `target`\\n    /// @return result The returndata from calling `target` with `data`\\n    /// @notice If calling `target` with `data` reverts, the revert is propagated\\n    function exec(address operator, address token, uint256 amount, address payable target, bytes calldata data)\\n        external\\n        payable\\n        returns (bytes memory result);\\n\\n    /// @notice The counterpart to `exec` which allows for the consumption of token permits later\\n    ///         during execution\\n    /// @dev *DOES NOT* check that `token` contains code. This function vacuously succeeds if\\n    ///      `token` is empty.\\n    /// @dev can only be called by the `operator` previously registered in `exec`\\n    /// @param token The ERC20 token to transfer\\n    /// @param owner The owner of tokens to transfer\\n    /// @param recipient The destination/beneficiary of the ERC20 `transferFrom`\\n    /// @param amount The quantity of `token` to transfer`\\n    /// @return true\\n    function transferFrom(address token, address owner, address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/core/Permit2PaymentAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {AbstractContext} from \\\"../Context.sol\\\";\\n\\nimport {ISignatureTransfer} from \\\"permit2/src/interfaces/ISignatureTransfer.sol\\\";\\n\\nabstract contract Permit2PaymentAbstract is AbstractContext {\\n    string internal constant TOKEN_PERMISSIONS_TYPE = \\\"TokenPermissions(address token,uint256 amount)\\\";\\n\\n    function isRestrictedTarget(address) internal view virtual returns (bool);\\n\\n    function _permitToTransferDetails(ISignatureTransfer.PermitTransferFrom memory permit, address recipient)\\n        internal\\n        pure\\n        virtual\\n        returns (ISignatureTransfer.SignatureTransferDetails memory transferDetails, address token, uint256 amount);\\n\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes32 witness,\\n        string memory witnessTypeString,\\n        bytes memory sig,\\n        bool isForwarded\\n    ) internal virtual;\\n\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes32 witness,\\n        string memory witnessTypeString,\\n        bytes memory sig\\n    ) internal virtual;\\n\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes memory sig,\\n        bool isForwarded\\n    ) internal virtual;\\n\\n    function _transferFrom(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        ISignatureTransfer.SignatureTransferDetails memory transferDetails,\\n        address from,\\n        bytes memory sig\\n    ) internal virtual;\\n\\n    function _setOperatorAndCall(address payable target, uint256 value, bytes memory data)\\n        internal\\n        virtual\\n        returns (bytes memory);\\n\\n    function _setOperatorAndCall(address target, bytes memory data) internal virtual returns (bytes memory);\\n\\n    modifier metaTx(address msgSender, bytes32 witness) virtual;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solmate/=lib/solmate/\",\r\n      \"permit2/=lib/permit2/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"cancun\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniFactory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolInitCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"action\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ActionInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfusedDeputy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForwarderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTarget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"OperatorNotSpent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"ReentrantCallback\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oldWitness\",\"type\":\"bytes32\"}],\"name\":\"ReentrantMetatransaction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"TooMuchSlippage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oldWitness\",\"type\":\"bytes32\"}],\"name\":\"WitnessNotSpent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSwapAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"actions\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct Settler.AllowedSlippage\",\"name\":\"slippage\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"actions\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct Settler.AllowedSlippage\",\"name\":\"slippage\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"executeMetaTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Settler", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f984e34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b540000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "cancun", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}