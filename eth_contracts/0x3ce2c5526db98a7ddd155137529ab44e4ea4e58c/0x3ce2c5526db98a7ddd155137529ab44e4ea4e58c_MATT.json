{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"main\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n\\nIntroducing $MATT. An upside-down ZOGZ based conglomerate meme project.\\n\\nTelegram: https://t.me/mattcoineth\\nWebsite: https://mattcoineth.com\\nTwitter: https://x.com/mattcoineth\\n\\n**/\\npragma solidity 0.8.20;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract MATT is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _buyerMap;\\n    mapping (address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = false;\\n    address payable private _taxWallet;\\n\\n    uint256 private _initialBuyTax=10;\\n    uint256 private _initialSellTax=15;\\n    uint256 private _finalBuyTax=2;\\n    uint256 private _finalSellTax=2;\\n    uint256 private _reduceBuyTaxAt=15;\\n    uint256 private _reduceSellTaxAt=15;\\n    uint256 private _preventSwapBefore=35;\\n    uint256 private _buyCount=0;\\n\\n    uint8 private constant _decimals = 6;\\n    uint256 private constant _tTotal = 111111111111 * 10**_decimals;\\n    string private constant _name = unicode\\\"\u01dd\u1d09qqn\u0279\u05e4s\u1d09qo\u0279\u0500s\u01ddlqqnlq\u0183\u0250\u0279\u029e\u028doqu\u1d09\u0250\u0279uo\u1d09llo\u0279\u2534\u0265\u0254\u0287\u1d09Mx\u0250l\u0279o\u05e4\u028e\u026f\u0250\u01dd\u0279\u0186uooWsn\u025fooZ\u0265\u0287\u0250\u01ddpu\u01dd\u01dd\u0279\u05e4\u028eu\u1d09\u0250\u0279qll\u0250\u0279o\u2132\u0279\u01dd\u029e\u0254nsod\u1d09\u02e5\u01ddp\u028el\u0500\u0265\u0287\u0279o\u05e4\u0254\u01dd\u026f\u0279oW\u028dop\u0250\u0265S\u0287s\u0250\u01ddq\u028eu\u1d09\u0250\u0265\u0186\u029e\u0254\u1d09p\u01ddn\u0183uo\u2534\u0183uo\u02e5do\u0287\u029e\u0254o\u0186\u029e\u0254Ipu\u2200\u026fn\u0279plop\u0287\u0250\u0254\u029eu\u1d09oZ\u0183o\u026fSl\u1d09\u028c\u01ddp-\u01ddH\u01dd\u0254\u0250\u025f\u0183opx\u1d09l\u0250\u01ddSuo\u0279\u0250\u029e\u0250poS\u028e\u029e\u0279o\u0500\u0287\u01dd\u029e\u0254oS\u029e\u0254\u1d09\u028d\u0265\u0254u\u1d09\u0500\u028doqu\u1d09\u0250\u0279lo\u1d09\u0287u\u2200\u025flnM\u0183\u1d09q\u1d09pun\u0250\u0279\u05e4\u0279\u01dd\u0287\u0287\u1d09\u0265S\u0287\u1d09\u0279\u05e4\u0265\u0287\u0250\u01dd\u0279q\u01ddlq\u1d09\u0279\u0279oH\u0279\u01dd\u029e\u0254\u1d09l\u029e\u0183oo\u0279\u029eu\u0250\u1d09l\u1d09\u0287d\u01dd\u0279\u0279\u01dd\u029e\u0254\u1d09\u02e5\u029e\u01dd\u0279\u0265S\u028el\u01ddsoS\u028e\u026f\u026fnW\u01dd\u0265\u2534\u0250dd\u0250ZXZ\u0190p\u1d09op\u0250l\u0183\u01ddZ\u0250\u0279\u0250uo\u1d09ll\u1d09Z\u0287\u0250\u0254qoq\u0279\u01ddd\u026fo\u0265\u0186\u029e\u0254o\u0186\u0279\u01dd\u029eu\u1d09opu\u1d09\u0250\u0279pqol\u05e4qoo\u05e4uo\u026fn\u0279n\u05e4\u028e\u025f\u025fnH\u029e\u0254o\u0186\u0287oHp\u01dd\u0279\u0279o\u0287\u0250\u0254\u1d09ld\u01dd\u0279\u028es\u01ddu\u1d09\u0279u\u0279o\u0287d\u0250uS\u0250s\u01dd\u01dd\u0279\u2534x\u0250l\u05e4oq\u026fn\u05e4\u029e\u0254np\u028e\u029e\u0254np\u0279\u01ddpu\u1d09\u0279\u05e4\u026fn\u0265\u0186\u0287\u1d09\u0265s\u029e\u0254\u0250nQs\u0254\u1d09\u026fouo\u0183\u0183\u0250\u0265Su\u1d09\u0265dlopoll\u01dd\u0183u\u0250\u0287d\u01dd\u0279\u0287s\u0250\u01ddq\u01dd\u0254\u0250\u025f\u029e\u0254o\u0500\u0279\u01ddd\u1d09\u0500\u0287\u0279odss\u1d09\u0500\u0250l\u0279\u0250uS\u1d09\u0254ndS\u0183opp\u0279\u1d09q\u0250\u0183\u0250\u05e4\u0279\u1d09S\u0250qqnl\u2132\u0287so\u0265\u05e4d\u01dd\u01dd\u0279\u0186\u0265\u0287\u0250\u01ddpuo\u0183\u0250\u0279p\u028e\u0250\u05e4u\u1d09n\u0183u\u01dd\u0500\u0279\u01ddl\u0250\u01ddp\u0250lns\u0279n\u2534\u025f\u025f\u1d09lq\u0183\u0183op\u028e\u0183\u0183op\u029e\u0254n\u2132\u0287\u0250\u2132s\u0250dss\u0250\u05e4lln\u029es\u0287so\u0265\u05e4u\u1d09l\u026f\u01dd\u0279\u05e4\u0279\u01dd\u029eoo\u02e5oo\u05e4\u0254W\u0287\u0279ouS\u0279\u01dddd\u1d09l\u2132z\u01dd\u028e\u01dd\u028epu\u0250\u0186\u0183\u0279o\u2132\u01dd\u1d09\u0265\u0254ooq\u01ddl\u0250\u0265M\u01dd\u0279o\u029el\u0250\u039bp\u1d09\u029e\u01dd\u0265\u2534\u01dd\u028c\u0250M\u0183\u1d09qu\u0250\u026f\u028epu\u2200\u01dd\u01ddd\u0279nlZ\u017fp\u0279\u01ddp\u0250\u039b\u029e\u0279op\u029e\u0279oq\u025floMpu\u0250\u02e5\u028eddoHp\u0279o\u02e5\u029e\u0279op\u01ddd\u01dd\u0500\\\";\\n    string private constant _symbol = unicode\\\"MATT\\\";\\n    uint256 public _maxTxAmount =   2222222222 * 10**_decimals;\\n    uint256 public _maxWalletSize = 2222222222 * 10**_decimals;\\n    uint256 public _taxSwapThreshold=555555556 * 10**_decimals;\\n    uint256 public _maxTaxSwap=555555556 * 10**_decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor () {\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount=0;\\n        if (from != owner() && to != owner()) {\\n            require(!bots[from] && !bots[to]);\\n            taxAmount=amount.mul((tradingOpen)?0:_initialBuyTax).div(100);\\n            if (transferDelayEnabled) {\\n              if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\n                require(_holderLastTransferTimestamp[tx.origin] < block.number,\\\"Only one transfer per block allowed.\\\");\\n                _holderLastTransferTimestamp[tx.origin] = block.number;\\n              }\\n            }\\n\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n                if(_buyCount<_preventSwapBefore){\\n                  require(!isContract(to));\\n                }\\n                _buyCount++;\\n                _buyerMap[to]=true;\\n                taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\n            }\\n\\n            if(to == uniswapV2Pair && from!= address(this) ){\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\\\"Seller is not buyer\\\");\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if(taxAmount>0){\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\n          emit Transfer(from, address(this),taxAmount);\\n        }\\n        _balances[from]=_balances[from].sub(amount);\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\n      return (a>b)?b:a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        if(tokenAmount==0){return;}\\n        if(!tradingOpen){return;}\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner{\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize=_tTotal;\\n        transferDelayEnabled=false;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function isBot(address a) public view returns (bool){\\n      return bots[a];\\n    }\\n\\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        IUniswapV2Factory factory=IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = factory.getPair(address(this),uniswapV2Router.WETH());\\n        if(uniswapV2Pair==address(0x0)){\\n          uniswapV2Pair = factory.createPair(address(this), uniswapV2Router.WETH());\\n        }\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }\\n\\n    \\n    \\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MATT", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}