{"SourceCode": "pragma solidity ^0.8.3;\r\n\r\n\r\ninterface IERC20Upgradeable {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary AddressUpgradeable {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                \r\n                \r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        \r\n        if (returndata.length > 0) {\r\n            \r\n            \r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Initializable {\r\n    \r\n    uint8 private _initialized;\r\n\r\n    \r\n    bool private _initializing;\r\n\r\n    \r\n    event Initialized(uint8 version);\r\n\r\n    \r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    \r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    \r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    \r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    \r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    \r\n    uint256[50] private __gap;\r\n}\r\n\r\ncontract ERC20Upgradeable is\r\n  Initializable,\r\n  ContextUpgradeable,\r\n  IERC20Upgradeable {\r\n  \r\n  mapping(address => uint256) internal _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  \r\n  function __ERC20_init(\r\n    string memory name_,\r\n    string memory symbol_\r\n  ) internal initializer {\r\n    __Context_init_unchained();\r\n    __ERC20_init_unchained(name_, symbol_);\r\n  }\r\n\r\n  function __ERC20_init_unchained(\r\n    string memory name_,\r\n    string memory symbol_\r\n  ) internal initializer {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  \r\n  function name() public view virtual returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  \r\n  function symbol() public view virtual returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  \r\n  function decimals() public view virtual returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  \r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  \r\n  function balanceOf(\r\n    address account\r\n  ) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  \r\n  function transfer(\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  \r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(\r\n      currentAllowance >= amount,\r\n      \"ERC20: transfer amount exceeds allowance\"\r\n    );\r\n    _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  \r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public virtual returns (bool) {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender] + addedValue\r\n    );\r\n    return true;\r\n  }\r\n\r\n  \r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(\r\n      currentAllowance >= subtractedValue,\r\n      \"ERC20: decreased allowance below zero\"\r\n    );\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n    return true;\r\n  }\r\n\r\n  \r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[sender] = senderBalance - amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  \r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  \r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    _balances[account] = accountBalance - amount;\r\n    _totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  \r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  \r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  uint256[45] private __gap;\r\n}\r\n\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    \r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        \r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    \r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        \r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    \r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        \r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    \r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        \r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MathUpgradeable {\r\n    enum Rounding {\r\n        Down, \r\n        Up, \r\n        Zero \r\n    }\r\n\r\n    \r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    \r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    \r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    \r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    \r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            \r\n            \r\n            \r\n            uint256 prod0; \r\n            uint256 prod1; \r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            \r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            \r\n            require(denominator > prod1);\r\n\r\n            \r\n            \r\n            \r\n\r\n            \r\n            uint256 remainder;\r\n            assembly {\r\n                \r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                \r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            \r\n            \r\n\r\n            \r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                \r\n                denominator := div(denominator, twos)\r\n\r\n                \r\n                prod0 := div(prod0, twos)\r\n\r\n                \r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            \r\n            prod0 |= prod1 * twos;\r\n\r\n            \r\n            \r\n            \r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            \r\n            \r\n            inverse *= 2 - denominator * inverse; \r\n            inverse *= 2 - denominator * inverse; \r\n            inverse *= 2 - denominator * inverse; \r\n            inverse *= 2 - denominator * inverse; \r\n            inverse *= 2 - denominator * inverse; \r\n            inverse *= 2 - denominator * inverse; \r\n\r\n            \r\n            \r\n            \r\n            \r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    \r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    \r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        \r\n        \r\n        \r\n        \r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    \r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    \r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    \r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    \r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    \r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    \r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    \r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ArraysUpgradeable {\r\n    using StorageSlotUpgradeable for bytes32;\r\n\r\n    \r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = MathUpgradeable.average(low, high);\r\n\r\n            \r\n            \r\n            if (unsafeAccess(array, mid).value > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        \r\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n\r\n    \r\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\r\n        bytes32 slot;\r\n        \r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getAddressSlot();\r\n    }\r\n\r\n    \r\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\r\n        bytes32 slot;\r\n        \r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getBytes32Slot();\r\n    }\r\n\r\n    \r\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\r\n        bytes32 slot;\r\n        \r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getUint256Slot();\r\n    }\r\n}\r\n\r\nlibrary CountersUpgradeable {\r\n    struct Counter {\r\n        \r\n        \r\n        \r\n        uint256 _value; \r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\nabstract contract ERC20SnapshotUpgradeable is Initializable, ERC20Upgradeable {\r\n  function __ERC20Snapshot_init() internal initializer {\r\n    __Context_init_unchained();\r\n    __ERC20Snapshot_init_unchained();\r\n  }\r\n\r\n  function __ERC20Snapshot_init_unchained() internal initializer {}\r\n\r\n  \r\n  \r\n\r\n  using ArraysUpgradeable for uint256[];\r\n  using CountersUpgradeable for CountersUpgradeable.Counter;\r\n\r\n  \r\n  \r\n  struct Snapshots {\r\n    uint256[] ids;\r\n    uint256[] values;\r\n  }\r\n\r\n  mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n  Snapshots private _totalSupplySnapshots;\r\n\r\n  \r\n  CountersUpgradeable.Counter private _currentSnapshotId;\r\n\r\n  \r\n  event Snapshot(uint256 id);\r\n\r\n  \r\n  function _snapshot() internal virtual returns (uint256) {\r\n    _currentSnapshotId.increment();\r\n\r\n    uint256 currentId = _currentSnapshotId.current();\r\n    emit Snapshot(currentId);\r\n    return currentId;\r\n  }\r\n\r\n  \r\n  function balanceOfAt(\r\n    address account,\r\n    uint256 snapshotId\r\n  ) public view virtual returns (uint256) {\r\n    (bool snapshotted, uint256 value) = _valueAt(\r\n      snapshotId,\r\n      _accountBalanceSnapshots[account]\r\n    );\r\n\r\n    return snapshotted ? value : balanceOf(account);\r\n  }\r\n\r\n  \r\n  function totalSupplyAt(\r\n    uint256 snapshotId\r\n  ) public view virtual returns (uint256) {\r\n    (bool snapshotted, uint256 value) = _valueAt(\r\n      snapshotId,\r\n      _totalSupplySnapshots\r\n    );\r\n\r\n    return snapshotted ? value : totalSupply();\r\n  }\r\n\r\n  \r\n  \r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual override {\r\n    super._beforeTokenTransfer(from, to, amount);\r\n\r\n    if (from == address(0)) {\r\n      \r\n      _updateAccountSnapshot(to);\r\n      _updateTotalSupplySnapshot();\r\n    } else if (to == address(0)) {\r\n      \r\n      _updateAccountSnapshot(from);\r\n      _updateTotalSupplySnapshot();\r\n    } else {\r\n      \r\n      _updateAccountSnapshot(from);\r\n      _updateAccountSnapshot(to);\r\n    }\r\n  }\r\n\r\n  function _valueAt(\r\n    uint256 snapshotId,\r\n    Snapshots storage snapshots\r\n  ) private view returns (bool, uint256) {\r\n    require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n    \r\n    require(\r\n      snapshotId <= _currentSnapshotId.current(),\r\n      \"ERC20Snapshot: nonexistent id\"\r\n    );\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n    if (index == snapshots.ids.length) {\r\n      return (false, 0);\r\n    } else {\r\n      return (true, snapshots.values[index]);\r\n    }\r\n  }\r\n\r\n  function _updateAccountSnapshot(address account) internal {\r\n    _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n  }\r\n\r\n  function _updateTotalSupplySnapshot() internal {\r\n    _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n  }\r\n\r\n  function _updateSnapshot(\r\n    Snapshots storage snapshots,\r\n    uint256 currentValue\r\n  ) private {\r\n    uint256 currentId = _currentSnapshotId.current();\r\n    if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n      snapshots.ids.push(currentId);\r\n      snapshots.values.push(currentValue);\r\n    }\r\n  }\r\n\r\n  function _lastSnapshotId(\r\n    uint256[] storage ids\r\n  ) private view returns (uint256) {\r\n    if (ids.length == 0) {\r\n      return 0;\r\n    } else {\r\n      return ids[ids.length - 1];\r\n    }\r\n  }\r\n\r\n  uint256[46] private __gap;\r\n}\r\n\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    \r\n    event Paused(address account);\r\n\r\n    \r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    \r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    \r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    \r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    \r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    \r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    \r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    \r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    \r\n    uint256[49] private __gap;\r\n}\r\n\r\nabstract contract ERC20PausableUpgradeable is\r\n  Initializable,\r\n  ERC20Upgradeable,\r\n  PausableUpgradeable {\r\n  function __ERC20Pausable_init() internal initializer {\r\n    __Context_init_unchained();\r\n    __Pausable_init_unchained();\r\n    __ERC20Pausable_init_unchained();\r\n  }\r\n\r\n  function __ERC20Pausable_init_unchained() internal initializer {}\r\n\r\n  \r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual override {\r\n    super._beforeTokenTransfer(from, to, amount);\r\n\r\n    require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n  }\r\n\r\n  uint256[50] private __gap;\r\n}\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    \r\n    uint256[49] private __gap;\r\n}\r\n\r\nlibrary console {\r\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n\tfunction _sendLogPayload(bytes memory payload) private view {\r\n\t\tuint256 payloadLength = payload.length;\r\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\r\n\t\tassembly {\r\n\t\t\tlet payloadStart := add(payload, 32)\r\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction log() internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n\t}\r\n\r\n\tfunction logInt(int256 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n\t}\r\n\r\n\tfunction logUint(uint256 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n\t}\r\n\r\n\tfunction logString(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction logBool(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction logAddress(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes(bytes memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes1(bytes1 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes2(bytes2 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes3(bytes3 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes4(bytes4 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes5(bytes5 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes6(bytes6 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes7(bytes7 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes8(bytes8 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes9(bytes9 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes10(bytes10 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes11(bytes11 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes12(bytes12 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes13(bytes13 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes14(bytes14 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes15(bytes15 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes16(bytes16 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes17(bytes17 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes18(bytes18 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes19(bytes19 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes20(bytes20 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes21(bytes21 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes22(bytes22 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes23(bytes23 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes24(bytes24 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes25(bytes25 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes26(bytes26 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes27(bytes27 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes28(bytes28 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes29(bytes29 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes30(bytes30 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes31(bytes31 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes32(bytes32 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint256 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n\t}\r\n\r\n\tfunction log(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction log(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction log(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n}\r\n\r\ncontract DeHubTokenV4WithVersion is\r\n  OwnableUpgradeable,\r\n  ERC20Upgradeable,\r\n  ERC20PausableUpgradeable,\r\n  ERC20SnapshotUpgradeable {\r\n  event AuthorizedSnapshotter(address account);\r\n  event DeauthorizedSnapshotter(address account);\r\n  event BuySellTaxRate(uint256 buyTaxRate, uint256 sellTaxRate);\r\n\r\n  \r\n  enum TransactionType {\r\n    REGULAR,\r\n    TAX,\r\n    SELL,\r\n    BUY\r\n  }\r\n\r\n  \r\n  mapping(address => bool) authorizedToSnapshot;\r\n\r\n  \r\n  \r\n  \r\n  uint256 public buyTaxRate;\r\n  uint256 public sellTaxRate;\r\n\r\n  \r\n  \r\n  \r\n  \r\n  mapping(address => bool) public poolsToTax;\r\n\r\n  address public taxTo;\r\n\r\n  \r\n  uint256 internal accumulatedTax;\r\n\r\n  uint256 public version;\r\n\r\n  function initialize(\r\n    string memory name,\r\n    string memory symbol\r\n  ) public initializer {\r\n    __Ownable_init();\r\n    __ERC20_init(name, symbol);\r\n    __ERC20Snapshot_init();\r\n    __ERC20Pausable_init();\r\n  }\r\n\r\n  \r\n  function initializeImplementation() public initializer {\r\n    __Ownable_init();\r\n    _pause();\r\n  }\r\n\r\n  \r\n  function mint(address account, uint256 amount) external onlyOwner {\r\n    _mint(account, amount);\r\n  }\r\n\r\n  \r\n  function burn(address account, uint256 amount) external onlyOwner {\r\n    _burn(account, amount);\r\n  }\r\n\r\n  \r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  \r\n  function unpause() external onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n  \r\n  function snapshot() external returns (uint256) {\r\n    require(\r\n      authorizedToSnapshot[_msgSender()] || _msgSender() == owner(),\r\n      \"zDAOToken: Not authorized to snapshot\"\r\n    );\r\n    return _snapshot();\r\n  }\r\n\r\n  \r\n  function authorizeSnapshotter(address account) external onlyOwner {\r\n    require(\r\n      !authorizedToSnapshot[account],\r\n      \"zDAOToken: Account already authorized\"\r\n    );\r\n\r\n    authorizedToSnapshot[account] = true;\r\n    emit AuthorizedSnapshotter(account);\r\n  }\r\n\r\n  \r\n  function deauthorizeSnapshotter(address account) external onlyOwner {\r\n    require(authorizedToSnapshot[account], \"zDAOToken: Account not authorized\");\r\n\r\n    authorizedToSnapshot[account] = false;\r\n    emit DeauthorizedSnapshotter(account);\r\n  }\r\n\r\n  \r\n  function transferBulk(\r\n    address[] calldata recipients,\r\n    uint256[] calldata amounts\r\n  ) external onlyOwner returns (bool) {\r\n    require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    require(recipients.length == amounts.length, \"Invalid arguments length\");\r\n\r\n    address sender = _msgSender();\r\n\r\n    uint256 length = recipients.length;\r\n    uint256 total = 0;\r\n    for (uint256 i = 0; i < length; ++i) {\r\n      total += amounts[i];\r\n    }\r\n    require(\r\n      _balances[sender] >= total,\r\n      \"ERC20: transfer amount exceeds balance\"\r\n    );\r\n\r\n    _balances[sender] -= total;\r\n    _updateAccountSnapshot(sender);\r\n\r\n    for (uint256 i = 0; i < length; ++i) {\r\n      address recipient = recipients[i];\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n      \r\n      \r\n\r\n      _balances[recipient] += amounts[i];\r\n\r\n      _updateAccountSnapshot(recipient);\r\n\r\n      emit Transfer(sender, recipient, amounts[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  \r\n  function transferFromBulk(\r\n    address sender,\r\n    address[] calldata recipients,\r\n    uint256[] calldata amounts\r\n  ) external onlyOwner returns (bool) {\r\n    require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    require(recipients.length == amounts.length, \"Invalid arguments length\");\r\n\r\n    uint256 length = recipients.length;\r\n    uint256 total = 0;\r\n    for (uint256 i = 0; i < length; ++i) {\r\n      total += amounts[i];\r\n    }\r\n    require(\r\n      _balances[sender] >= total,\r\n      \"ERC20: transfer amount exceeds balance\"\r\n    );\r\n\r\n    \r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(\r\n      currentAllowance >= total,\r\n      \"ERC20: transfer total exceeds allowance\"\r\n    );\r\n    _approve(sender, _msgSender(), currentAllowance - total);\r\n\r\n    _balances[sender] -= total;\r\n    _updateAccountSnapshot(sender);\r\n\r\n    for (uint256 i = 0; i < length; ++i) {\r\n      address recipient = recipients[i];\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n      \r\n      \r\n\r\n      _balances[recipient] += amounts[i];\r\n\r\n      _updateAccountSnapshot(recipient);\r\n\r\n      emit Transfer(sender, recipient, amounts[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function burnBulk(\r\n    address[] calldata accounts,\r\n    uint256[] calldata amounts\r\n  ) external onlyOwner {\r\n    require(accounts.length == amounts.length, \"Invalid argument\");\r\n    uint256 len = accounts.length;\r\n    for (uint256 i = 0; i < len; ++i) {\r\n      _burn(accounts[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  \r\n  function setBuySellTaxRate(\r\n    uint256 buyTaxRate_,\r\n    uint256 sellTaxRate_\r\n  ) external onlyOwner {\r\n    require(buyTaxRate != buyTaxRate_ && sellTaxRate != sellTaxRate_);\r\n\r\n    buyTaxRate = buyTaxRate_;\r\n    sellTaxRate = sellTaxRate_;\r\n\r\n    emit BuySellTaxRate(buyTaxRate_, sellTaxRate_);\r\n  }\r\n\r\n  \r\n  function setTaxTo(address taxTo_) external onlyOwner {\r\n    require(taxTo != taxTo_);\r\n\r\n    taxTo = taxTo_;\r\n  }\r\n\r\n  function addPoolToTax(address pool_) external onlyOwner {\r\n    require(pool_ != address(0));\r\n\r\n    poolsToTax[pool_] = true;\r\n  }\r\n\r\n  function removePoolToTax(address pool_) external onlyOwner {\r\n    require(pool_ != address(0));\r\n\r\n    poolsToTax[pool_] = false;\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  )\r\n    internal\r\n    virtual\r\n    override(\r\n      ERC20PausableUpgradeable,\r\n      ERC20SnapshotUpgradeable,\r\n      ERC20Upgradeable\r\n    )\r\n  {\r\n    bool alreadyPaused = paused();\r\n    if (to == address(0)) {\r\n      if (alreadyPaused) {\r\n        _unpause();\r\n      }\r\n    }\r\n    super._beforeTokenTransfer(from, to, amount);\r\n    if (to == address(0)) {\r\n      if (alreadyPaused) {\r\n        _pause();\r\n      }\r\n    }\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual override {\r\n    uint256 taxAmount = _takeFee(sender, recipient, amount);\r\n\r\n    \r\n    super._transfer(sender, recipient, amount - taxAmount);\r\n\r\n    \r\n    if (taxAmount > 0) {\r\n      super._transfer(sender, address(this), taxAmount);\r\n      accumulatedTax += taxAmount;\r\n    }\r\n  }\r\n\r\n  function _takeFee(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual returns (uint256) {\r\n    \r\n    if (_getTransactionType(sender, recipient) == TransactionType.SELL) {\r\n      \r\n      return (amount * sellTaxRate) / 10000;\r\n    } else if (_getTransactionType(sender, recipient) == TransactionType.BUY) {\r\n      \r\n      return (amount * buyTaxRate) / 10000;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  \r\n  function _getTransactionType(\r\n    address from,\r\n    address to\r\n  ) internal view returns (TransactionType) {\r\n    if (poolsToTax[from] && !poolsToTax[to]) {\r\n      \r\n      return TransactionType.BUY;\r\n    } else if (!poolsToTax[from] && poolsToTax[to]) {\r\n      \r\n      return TransactionType.SELL;\r\n    } else if (from == address(this) || to == address(this)) {\r\n      return TransactionType.TAX;\r\n    }\r\n    return TransactionType.REGULAR;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary SafeMathUpgradeable {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            \r\n            \r\n            \r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Uniswap is OwnableUpgradeable {\r\n  using SafeMathUpgradeable for uint256;\r\n  \r\n  IUniswapV2Router02 internal uniswapV2Router;\r\n  \r\n  address internal uniswapV2Pair;\r\n  \r\n  address internal routerAddr;\r\n\r\n  \r\n  receive() external payable {}\r\n\r\n  function setRouter(address router, address pair) external onlyOwner {\r\n    require(router != address(0));\r\n    uniswapV2Router = IUniswapV2Router02(router);\r\n    uniswapV2Pair = pair;\r\n    emit RouterSet(router, pair);\r\n  }\r\n\r\n  \r\n  function swapTokensForETH(uint256 tokenAmount) internal returns (uint256) {\r\n    if (address(uniswapV2Router) != address(0)) {\r\n      uint256 initialBalance = address(this).balance;\r\n      \r\n      address[] memory path = new address[](2);\r\n      path[0] = address(this);\r\n      path[1] = uniswapV2Router.WETH();\r\n\r\n      \r\n      uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        0, \r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n\r\n      uint256 ethReceived = address(this).balance.sub(initialBalance);\r\n      return ethReceived;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function swapTokensByPath(\r\n    uint256 tokenAmountIn,\r\n    uint256 tokenAmountOutMin,\r\n    address[] memory path,\r\n    address to\r\n  ) internal {\r\n    if (address(uniswapV2Router) != address(0)) {\r\n      \r\n      uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        tokenAmountIn,\r\n        tokenAmountOutMin,\r\n        path,\r\n        to,\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n  event RouterSet(address indexed router, address indexed pair);\r\n\r\n  \r\n  modifier pcsInitialized() {\r\n    require(routerAddr != address(0), \"Router address has not been set!\");\r\n    _;\r\n  }\r\n}\r\n\r\ncontract DeHubTokenV5 is DeHubTokenV4WithVersion, Uniswap {\r\n  event SoldTax(uint256 tokensSold, uint256 usdtReceived);\r\n  event SetMinTaxForSell(uint256 minTaxForSell);\r\n\r\n  \r\n  \r\n  uint256 public minTaxForSell;\r\n\r\n  address public USDT;\r\n\r\n  bool internal inTriggerProcess;\r\n  modifier lockTheProcess() {\r\n    inTriggerProcess = true;\r\n    _;\r\n    inTriggerProcess = false;\r\n  }\r\n\r\n  \r\n  function upgradeToV5() external {\r\n    require(version < 5, \"DeHubToken: Already upgraded to version 5\");\r\n    version = 5;\r\n    console.log(\"v\", version);\r\n  }\r\n\r\n  function setUSDT(address USDT_) external onlyOwner {\r\n    USDT = USDT_;\r\n  }\r\n\r\n  function setMinTaxForSell(uint256 minTaxForSell_) external onlyOwner {\r\n    require(minTaxForSell != minTaxForSell_);\r\n    minTaxForSell = minTaxForSell_;\r\n    emit SetMinTaxForSell(minTaxForSell_);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual override {\r\n    super._beforeTokenTransfer(from, to, amount);\r\n\r\n    TransactionType txType = _getTransactionType(from, to);\r\n    \r\n    \r\n    if (!inTriggerProcess && txType == TransactionType.REGULAR) {\r\n      _triggerSellTax();\r\n    }\r\n  }\r\n\r\n  function _takeFee(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual override returns (uint256) {\r\n    if (inTriggerProcess) {\r\n      return 0;\r\n    }\r\n    return super._takeFee(sender, recipient, amount);\r\n  }\r\n\r\n  function _canSellTax(\r\n    uint256 contractTokenBalance\r\n  ) internal view virtual returns (bool) {\r\n    return contractTokenBalance >= minTaxForSell && minTaxForSell > 0;\r\n  }\r\n\r\n  function _triggerSellTax() internal virtual {\r\n    uint256 contractTokenBalance = balanceOf(address(this));\r\n    if (_canSellTax(contractTokenBalance)) {\r\n      _sellTax(contractTokenBalance);\r\n    }\r\n  }\r\n\r\n  function _sellTax(uint256 tokenAmount) internal virtual lockTheProcess {\r\n    uint256 tokensSold;\r\n    uint256 usdtReceived;\r\n\r\n    if (taxTo != address(0) && tokenAmount > 0) {\r\n      \r\n      _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n      address[] memory path = new address[](2);\r\n      path[0] = address(this);\r\n      path[1] = USDT;\r\n\r\n      uint256 initialBalance = IERC20(USDT).balanceOf(taxTo);\r\n      swapTokensByPath(tokenAmount, 1, path, taxTo);\r\n      usdtReceived = IERC20(USDT).balanceOf(taxTo) - initialBalance;\r\n      if (usdtReceived > 0) {\r\n        tokensSold = tokenAmount;\r\n      }\r\n    }\r\n    emit SoldTax(tokensSold, usdtReceived);\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedSnapshotter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTaxRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTaxRate\",\"type\":\"uint256\"}],\"name\":\"BuySellTaxRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DeauthorizedSnapshotter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTaxForSell\",\"type\":\"uint256\"}],\"name\":\"SetMinTaxForSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtReceived\",\"type\":\"uint256\"}],\"name\":\"SoldTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"addPoolToTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorizeSnapshotter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deauthorizeSnapshotter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTaxForSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsToTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"removePoolToTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTaxRate_\",\"type\":\"uint256\"}],\"name\":\"setBuySellTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTaxForSell_\",\"type\":\"uint256\"}],\"name\":\"setMinTaxForSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxTo_\",\"type\":\"address\"}],\"name\":\"setTaxTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"USDT_\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBulk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFromBulk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeToV5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeHubTokenV5", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22aea497f0e96fa4ddb4f29f8ec5207ff5b830f6b6c9a3f8be68608a319c4233"}