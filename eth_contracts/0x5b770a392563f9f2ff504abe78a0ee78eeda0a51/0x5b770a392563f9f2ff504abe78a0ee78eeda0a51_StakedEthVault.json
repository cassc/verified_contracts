{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/unstable/vaults/base/StakedEthVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"contracts/unstable/interfaces/InUSD.sol\\\";\\r\\nimport \\\"contracts/unstable/interfaces/IConfigurator.sol\\\";\\r\\nimport \\\"contracts/unstable/interfaces/IZkOracle.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract StakedEthVault is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    InUSD public immutable nUSD;\\r\\n    IERC20 public immutable collateralAsset;\\r\\n    IConfigurator public immutable configurator;\\r\\n\\r\\n    uint256 public poolTotalCirculation;\\r\\n\\r\\n    // Maybe using struct packing would save some gas on critical functions\\r\\n    mapping(address => uint256) public depositedAsset;\\r\\n    mapping(address => uint256) public borrowed;\\r\\n    mapping(address => uint256) public feeStored;\\r\\n    mapping(address => uint256) public feeUpdatedAt;\\r\\n\\r\\n    event DepositEther(address indexed onBehalfOf, address asset, uint256 etherAmount, uint256 assetAmount, uint256 timestamp);\\r\\n\\r\\n    event DepositAsset(address indexed onBehalfOf, address asset, uint256 amount, uint256 timestamp);\\r\\n    event WithdrawAsset(address indexed sponsor, address asset, address indexed onBehalfOf, uint256 amount, uint256 timestamp);\\r\\n    event Mint(address indexed sponsor, address indexed onBehalfOf, uint256 amount, uint256 originationFee, uint256 timestamp);\\r\\n    event Burn(address indexed sponsor, address indexed onBehalfOf, uint256 amount, uint256 timestamp);\\r\\n    event LiquidationRecord(address indexed provider, address indexed keeper, address indexed onBehalfOf, uint256 nusdAmount, uint256 LiquidateAssetAmount, uint256 keeperReward, bool superLiquidation);\\r\\n    event Redemption(address indexed caller, address indexed provider, uint256 nusdToProtocol, uint256 nusdToRepay, uint256 collateralReceived);\\r\\n\\r\\n    // MultiRewards farming functionality\\r\\n    struct Reward {\\r\\n        uint256 rewardsDuration;\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardRate;\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    mapping(address => Reward) public rewardData;\\r\\n    address[] public rewardTokens;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\r\\n    mapping(address => mapping(address => uint256)) public rewards;\\r\\n\\r\\n    event RewardAdded(uint256 reward);\\r\\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\\r\\n    event RewardsDurationUpdated(address token, uint256 newDuration);\\r\\n    event Recovered(address token, uint256 amount);\\r\\n\\r\\n    //constructor\\r\\n    constructor(address _collateral, address _configurator) {\\r\\n        collateralAsset = IERC20(_collateral);\\r\\n        configurator = IConfigurator(_configurator);\\r\\n        nUSD = InUSD(configurator.nUSD());\\r\\n    }\\r\\n\\r\\n    function totalDepositedAsset() public view virtual returns (uint256) {\\r\\n        return collateralAsset.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit staked ETH, update the interest distribution, can mint nUSD directly\\r\\n     * Emits a `DepositAsset` event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `assetAmount` Must be higher than 0.\\r\\n     * - `mintAmount` Send 0 if deposit only, no mint of nUSD\\r\\n     */\\r\\n    function depositAssetToMint(uint256 assetAmount, uint256 mintAmount) external updateReward(msg.sender) virtual {\\r\\n        require(assetAmount > 0, \\\"Deposit should be > 0\\\");\\r\\n        collateralAsset.safeTransferFrom(msg.sender, address(this), assetAmount);\\r\\n\\r\\n        depositedAsset[msg.sender] += assetAmount;\\r\\n        if (mintAmount > 0) {\\r\\n            _mintnUSD(msg.sender, msg.sender, mintAmount);\\r\\n        }\\r\\n        emit DepositAsset(msg.sender, address(collateralAsset), assetAmount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw collateral assets to an address\\r\\n     * Emits a `WithdrawAsset` event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `onBehalfOf` cannot be the zero address.\\r\\n     * - `amount` Must be higher than 0.\\r\\n     *\\r\\n     * @dev Withdraw collateral. Check user\u2019s collateral ratio after withdrawal, should be higher than `safeCollateralRatio`\\r\\n     */\\r\\n    function withdraw(address onBehalfOf, uint256 amount) external updateReward(msg.sender) virtual {\\r\\n        require(onBehalfOf != address(0), \\\"to zero address\\\");\\r\\n        require(amount != 0, \\\"zero amount\\\");\\r\\n        _withdraw(msg.sender, onBehalfOf, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The mint amount number of nUSD is minted to the address\\r\\n     * Emits a `Mint` event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `onBehalfOf` cannot be the zero address.\\r\\n     */\\r\\n    function mint(address onBehalfOf, uint256 amount) external virtual {\\r\\n        require(onBehalfOf != address(0), \\\"to zero address\\\");\\r\\n        require(amount != 0, \\\"zero amount\\\");\\r\\n        _mintnUSD(msg.sender, onBehalfOf, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn the amount of nUSD and payback the amount of minted nUSD\\r\\n     * Emits a `Burn` event.\\r\\n     * Requirements:\\r\\n     * - `onBehalfOf` cannot be the zero address.\\r\\n     * - `amount` Must be higher than 0.\\r\\n     * @dev Calling the internal`_repay`function.\\r\\n     */\\r\\n    function burn(address onBehalfOf, uint256 amount) external virtual {\\r\\n        require(onBehalfOf != address(0), \\\"to zero address\\\");\\r\\n        require(amount != 0, \\\"zero amount\\\");\\r\\n        _repay(msg.sender, onBehalfOf, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Keeper liquidates borrowers whose collateral ratio is below badCollateralRatio, using nUSD provided by Liquidation Provider.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - onBehalfOf Collateral Ratio should be below badCollateralRatio\\r\\n     * - assetAmount should be less than 50% of collateral - If liquidating 50% of the collateral doesn't bring the position to health, you should allow a full liquidation.\\r\\n     * - provider should authorize Unstable to utilize nUSD\\r\\n     * @dev After liquidation, borrower's debt is reduced by assetAmount * assetPrice, providers and keepers can receive up to an additional 10% liquidation reward.\\r\\n     */\\r\\n    //TODO: logic for full liquidation in case 50% doesn't bring to health\\r\\n    function liquidation(address provider, address debtor, uint256 assetAmount) external updateReward(provider) virtual {\\r\\n        uint256 assetPrice = getAssetPrice();\\r\\n        uint256 debtorCollateralRatio = getCollateralRatio(debtor);\\r\\n        require(debtorCollateralRatio < configurator.getBadCollateralRatio(address(this)), \\\"Borrowers collateral ratio should below badCollateralRatio\\\");\\r\\n        require(assetAmount * 2 <= depositedAsset[debtor], \\\"a max of 50% collateral can be liquidated\\\");\\r\\n        require(nUSD.allowance(provider, address(this)) != 0 || msg.sender == provider, \\\"provider should authorize to provide liquidation nUSD\\\");\\r\\n        uint256 nusdAmount = assetAmount * assetPrice / 1e18;\\r\\n\\r\\n        _repay(provider, debtor, nusdAmount);\\r\\n        uint256 reducedAsset = assetAmount;\\r\\n        //If collateralRatio is 100-110%, liquidator bonus is less than 10%\\r\\n        if(debtorCollateralRatio > 100_00 && debtorCollateralRatio < 110_00) {\\r\\n            reducedAsset = assetAmount * debtorCollateralRatio / 100_00;\\r\\n        }\\r\\n        //If collateralRatio is more than 110%, 10% liquidation bonus\\r\\n        if(debtorCollateralRatio >= 110_00) {\\r\\n            reducedAsset = assetAmount * 11 / 10; //10% bonus\\r\\n        }\\r\\n        depositedAsset[debtor] -= reducedAsset;\\r\\n        uint256 rewardToKeeper;\\r\\n        //Send keeper reward <- Which is taken from the liquidator payment.\\r\\n        uint256 keeperReward = configurator.getKeeperReward(address(this));\\r\\n        if (msg.sender != provider && debtorCollateralRatio >= 100_00 + keeperReward) {\\r\\n            rewardToKeeper = assetAmount * keeperReward / 100_00;\\r\\n            collateralAsset.safeTransfer(msg.sender, rewardToKeeper);\\r\\n        }\\r\\n        collateralAsset.safeTransfer(provider, reducedAsset - rewardToKeeper);\\r\\n        emit LiquidationRecord(provider, msg.sender, debtor, nusdAmount, reducedAsset, rewardToKeeper, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Choose a Redemption Provider, redeem `nusdAmount` of nUSD and get 1:1 value of collateral minus fees\\r\\n     * Emits a `Redemption` event.\\r\\n     *\\r\\n     * *Requirements:\\r\\n     * - `provider` must be a Redemption Provider\\r\\n     * - `provider`debt must equal to or above`nusdAmount`\\r\\n     */\\r\\n    function redemption(address provider, uint256 nusdAmount, uint256 minReceiveAmount) external updateReward(provider) virtual {\\r\\n        require(provider != msg.sender, \\\"no self redeem\\\"); //TODO: is this necessary?\\r\\n        (, , uint256 nusdToProtocol, uint256 nusdToRepay, , uint256 collateralReceived) = calculateRedemption(provider, nusdAmount);\\r\\n        require(collateralReceived >= minReceiveAmount, \\\"Collateral amount is less than minReceiveAmount\\\");\\r\\n        if(nusdToProtocol > 0) {\\r\\n            nUSD.transferFrom(msg.sender, address(configurator), nusdToProtocol);\\r\\n        }\\r\\n        _repay(msg.sender, provider, nusdToRepay);\\r\\n        depositedAsset[provider] -= collateralReceived;\\r\\n        collateralAsset.safeTransfer(msg.sender, collateralReceived);\\r\\n        emit Redemption(msg.sender, provider, nusdToProtocol, nusdToRepay, collateralReceived);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate redemption for a provider and nusdAmount\\r\\n     */\\r\\n    function calculateRedemption(address provider, uint256 nusdAmount) public view returns\\r\\n    (uint256 providerFee, uint256 protocolFee, uint256 nusdToProtocol, uint256 nusdToRepay, uint256 nusdToConvert, uint256 collateralReceived) {\\r\\n        // providerFee, protocolFee and nusdToConvert are never used.\\r\\n        require(nusdAmount > 0, \\\"redemption should be > 0\\\");\\r\\n        require(getBorrowedOf(provider) >= nusdAmount, \\\"nusdAmount cannot surpass providers debt\\\");\\r\\n        uint256 assetPrice = getAssetPrice();\\r\\n        uint256 providerCollateralRatio = (depositedAsset[provider] * assetPrice * 10_000) / getBorrowedOf(provider) / 1e18;\\r\\n        (providerFee, protocolFee) = configurator.getRedemptionFee(address(this), providerCollateralRatio);\\r\\n        nusdToProtocol = nusdAmount * protocolFee / 10_000;\\r\\n        nusdToRepay = nusdAmount - nusdToProtocol;\\r\\n        nusdToConvert = nusdToRepay * (10_000 - providerFee) / 10_000;\\r\\n        collateralReceived = nusdToConvert * 1e18 / assetPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the maximum amount of nUSD that can be redeemed from a specified provider\\r\\n     */\\r\\n    function getRedeemableAmount(address provider) public view returns(uint256) {\\r\\n        IConfigurator.RedemptionConfig memory config = configurator.getRedemptionConfig(address(this));\\r\\n        if(!config.enabled) return 0;\\r\\n        if(getBorrowedOf(provider) == 0) return 0;\\r\\n        if(getCollateralRatio(provider) > config.maxCollateralRatio || getCollateralRatio(provider) < 10_000) return 0;\\r\\n        return getBorrowedOf(provider);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Refresh accrued interest fee before adding totalSupply. Check providers collateralRatio cannot below `safeCollateralRatio`after minting. Collect origination fee.\\r\\n     */\\r\\n    function _mintnUSD(address _provider, address _onBehalfOf, uint256 _mintAmount) internal virtual {\\r\\n        require(!isDepegged(), \\\"Collateral is depegged, minting paused\\\");\\r\\n        require(poolTotalCirculation + _mintAmount <= configurator.mintVaultMaxSupply(address(this)), \\\"exceeds cap\\\");\\r\\n        _updateFee(_provider);\\r\\n\\r\\n        borrowed[_provider] += _mintAmount;\\r\\n        uint256 originationFee = getOriginationFee(_mintAmount);\\r\\n        nUSD.mint(address(configurator), originationFee);\\r\\n        nUSD.mint(_onBehalfOf, _mintAmount - originationFee);\\r\\n        poolTotalCirculation += _mintAmount;\\r\\n        require(_checkHealth(_provider), \\\"user is unhealthy after mint\\\");\\r\\n        emit Mint(_provider, _onBehalfOf, _mintAmount, originationFee, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate origination fee based on pool utilization.\\r\\n     */\\r\\n    function getOriginationFee(uint256 _mintAmount) public view returns(uint256) {\\r\\n        (uint256 minOriginationFee, uint256 maxOriginationFee) = configurator.getOriginationFee(address(this));\\r\\n        uint256 poolUtilization = (poolTotalCirculation + _mintAmount) * 1e18 / configurator.mintVaultMaxSupply(address(this));\\r\\n        return (maxOriginationFee - minOriginationFee) * poolUtilization * _mintAmount / 1e18 / 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn _provideramount nUSD to payback minted nUSD for _onBehalfOf.\\r\\n     * @dev Refresh accrued interest fee before reducing nUSDCirculation.\\r\\n     */\\r\\n    function _repay(address _provider, address _onBehalfOf, uint256 _amount) internal virtual {\\r\\n        // _amount can be more than the amount owed, and the excess will be ignored.\\r\\n        _updateFee(_onBehalfOf);\\r\\n        uint256 _feeStored = feeStored[_onBehalfOf];\\r\\n        uint256 _toRepay = _min(borrowed[_onBehalfOf] + _feeStored, _amount);\\r\\n\\r\\n        if(_toRepay > _feeStored) {\\r\\n            if(_feeStored > 0) {\\r\\n                nUSD.transferFrom(_provider, address(configurator), _feeStored);\\r\\n                feeStored[_onBehalfOf] = 0;\\r\\n            }\\r\\n            // First we repay the fees, then principal with the rest\\r\\n            nUSD.burn(_provider, _toRepay - _feeStored);\\r\\n            borrowed[_onBehalfOf] -= _toRepay - _feeStored;\\r\\n            poolTotalCirculation -= _toRepay - _feeStored;\\r\\n        } else {\\r\\n            // The user provided an amount to repay below the fees owed, so we only repay fees and no principal.\\r\\n            nUSD.transferFrom(_provider, address(configurator), _toRepay);\\r\\n            feeStored[_onBehalfOf] = _feeStored - _toRepay;\\r\\n        }\\r\\n        emit Burn(_provider, _onBehalfOf, _toRepay, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address _provider, address _onBehalfOf, uint256 _amount) internal virtual {\\r\\n        require(depositedAsset[_provider] >= _amount, \\\"Withdraw amount exceeds deposited amount.\\\");\\r\\n        depositedAsset[_provider] -= _amount;\\r\\n        collateralAsset.safeTransfer(_onBehalfOf, _amount);\\r\\n        if (getBorrowedOf(_provider) > 0) {\\r\\n            require(_checkHealth(_provider), \\\"User is unhealthy after withdraw\\\");\\r\\n        }\\r\\n        emit WithdrawAsset(_provider, address(collateralAsset), _onBehalfOf, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param user The address of the user.\\r\\n     * @dev Get USD value of current collateral asset and minted nUSD through price oracle / Collateral asset USD value must higher than safe Collateral Ratio.\\r\\n     * @return true if the user is healthy, false otherwise.\\r\\n     */\\r\\n    function _checkHealth(address user) internal view returns(bool) {\\r\\n        uint256 price = getAssetPrice();\\r\\n        if (((depositedAsset[user] * price * 10_000) / getBorrowedOf(user)) < configurator.getSafeCollateralRatio(address(this))) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateFee(address user) internal {\\r\\n        if (block.timestamp > feeUpdatedAt[user]) {\\r\\n            feeStored[user] += _newFee(user);\\r\\n            feeUpdatedAt[user] = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _newFee(address user) internal view returns (uint256) {\\r\\n        uint256 secondsInYear = 86_400 * 365;\\r\\n        uint256 secondsSinceLastFee = block.timestamp - feeUpdatedAt[user];\\r\\n        return borrowed[user] * configurator.borrowApr(address(this)) * secondsSinceLastFee / secondsInYear / 10_000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Return configured oracle address\\r\\n    */\\r\\n    function getZkOracle() public view returns (address) {\\r\\n        return configurator.zkOracleAddress(address(collateralAsset));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return rate of collateral asset in ETH terms through zkOracle.\\r\\n     */\\r\\n    function getMarketRate() public view returns (uint256) {\\r\\n        IZkOracle zkOracle = IZkOracle(getZkOracle());\\r\\n        return zkOracle.getMarketRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return redemption rate of collateral asset in ETH terms through zkOracle.\\r\\n     */\\r\\n    function getRedemptionRate() public view returns (uint256) {\\r\\n        IZkOracle zkOracle = IZkOracle(getZkOracle());\\r\\n        return zkOracle.getRedemptionRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return value of collateral asset in underlying terms through zkOracle.\\r\\n     * @notice This will have a market rate and also redemption rate\\r\\n     */\\r\\n    function getAssetToUnderlyingRate() public view returns (uint256) {\\r\\n        uint256 redemptionRate = getRedemptionRate();\\r\\n\\r\\n        if(configurator.useMarketRate(address(this))) {\\r\\n            uint256 marketRate = getMarketRate();\\r\\n            if(marketRate == 0) {\\r\\n                return redemptionRate; //In case market price oracle is broken, default to redemptionRate\\r\\n            } else { // If chainlink prices flash crash below minAnswer, you will get stale prices. I'm not sure you can do much about that.\\r\\n                return _min(marketRate, redemptionRate); //even if marketRate is toggled, don't allow over-peg valuation\\r\\n            }\\r\\n        } else {\\r\\n            return redemptionRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the collateral asset is depegged according to threshold set in configurator\\r\\n     */\\r\\n    function isDepegged() public view returns (bool) {\\r\\n        uint256 marketRate = getMarketRate();\\r\\n        if(marketRate == 0) {\\r\\n            return false; //if market rate oracle is zero, presume market rate is not configured and take no action\\r\\n        }\\r\\n        uint256 redemptionRate = getRedemptionRate();\\r\\n        uint256 minMarketRate = redemptionRate * (10_000 - configurator.getDepegThreshold(address(this))) / 10_000;\\r\\n        return marketRate < minMarketRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return value of underlying asset in USD terms.\\r\\n     * @notice This *should* only be market rate, returns chainlink ETH price as default\\r\\n     */\\r\\n    function getUnderlyingToUsdPrice() public view returns (uint256) {\\r\\n        (,int price, , , ) = AggregatorV3Interface(configurator.etherOracle()).latestRoundData();\\r\\n        return uint256(price) * 1e10;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get USD value of collateral asset\\r\\n     */\\r\\n    function getAssetPrice() public view returns (uint256) {\\r\\n        return getAssetToUnderlyingRate() * getUnderlyingToUsdPrice() / 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current borrowing amount for the user, including borrowed shares and accumulated fees.\\r\\n     * @param user The address of the user.\\r\\n     * @return The total borrowing amount for the user.\\r\\n     */\\r\\n    function getBorrowedOf(address user) public view returns (uint256) {\\r\\n        return borrowed[user] + feeStored[user] + _newFee(user);\\r\\n    }\\r\\n\\r\\n    function getPoolTotalCirculation() public view returns (uint256) {\\r\\n        return poolTotalCirculation;\\r\\n    }\\r\\n\\r\\n    function getAsset() external view returns (address) {\\r\\n        return address(collateralAsset);\\r\\n    }\\r\\n\\r\\n    //View functions - frontend friendly\\r\\n    function getCollateralRatio(address user) public view returns (uint256) {\\r\\n        if (getBorrowedOf(user) == 0) return 10_000 * 1e18; //really big number\\r\\n        return (depositedAsset[user] * getAssetPrice() * 10_000) / getBorrowedOf(user) / 1e18;\\r\\n    }\\r\\n\\r\\n    function getOverallCollateralRatio() public view returns (uint256) {\\r\\n        return (totalDepositedAsset() * getAssetPrice() * 10_000) / poolTotalCirculation / 1e18;\\r\\n    }\\r\\n\\r\\n    function getLiquidateableAmount(address user) public view returns (uint256 collateralAmount, uint256 nUsdAmount) {\\r\\n        if (getCollateralRatio(user) > configurator.getSafeCollateralRatio(address(this))) return (0, 0);\\r\\n        collateralAmount = depositedAsset[user] / 2;\\r\\n        nUsdAmount = collateralAmount * getAssetPrice() / 1e18;\\r\\n    }\\r\\n\\r\\n    function getLiquidateFund(address user) public view returns (uint256 nusdAmount) {\\r\\n        InUSD token = InUSD(configurator.nUSD());\\r\\n        uint256 approval = token.allowance(user, address(this));\\r\\n        if (approval == 0) return 0;\\r\\n        uint256 bal = token.balanceOf(user);\\r\\n        nusdAmount = approval > bal ? bal : approval; // You have a _min function\\r\\n    }\\r\\n\\r\\n    function getWithdrawableAmount(address user) public view returns (uint256) {\\r\\n        if (getBorrowedOf(user) == 0)\\r\\n            return depositedAsset[user];\\r\\n        uint256 safeCollateralRatio = configurator.getSafeCollateralRatio(address(this));\\r\\n        if (getCollateralRatio(user) <= safeCollateralRatio) return 0;\\r\\n        return depositedAsset[user] * (getCollateralRatio(user) - safeCollateralRatio) / getCollateralRatio(user);\\r\\n    }\\r\\n\\r\\n    function roomToCap() public view returns (uint256) {\\r\\n        if(poolTotalCirculation >= configurator.mintVaultMaxSupply(address(this))) return 0; //deal with case where it's above cap\\r\\n        return configurator.mintVaultMaxSupply(address(this)) - poolTotalCirculation;\\r\\n    }\\r\\n\\r\\n    function getMaxMintableAmountWithDeposit(address user, uint256 deposit) public view returns (uint256 nusdAmount) {\\r\\n        uint256 newDepositedAmount = depositedAsset[user] + deposit;\\r\\n        uint256 safeCollateralRatio = configurator.getSafeCollateralRatio(address(this));\\r\\n        uint256 userBorrow = getBorrowedOf(user);\\r\\n        uint256 cap = configurator.mintVaultMaxSupply(address(this));\\r\\n        uint256 maxBorrowAtSafeRatio = newDepositedAmount * getAssetPrice() * 10_000 / safeCollateralRatio / 1e18;\\r\\n        uint256 effectiveMax = _min(maxBorrowAtSafeRatio, cap);\\r\\n\\r\\n        if(userBorrow >= effectiveMax) {\\r\\n            return 0; //if user has already borrowed more than the max, then no mintable amount\\r\\n        } else {\\r\\n            uint256 mintMax = effectiveMax - userBorrow;\\r\\n            return mintMax - getOriginationFee(mintMax);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTVL() public view returns (uint256) {\\r\\n        return totalDepositedAsset() * getAssetPrice();\\r\\n    }\\r\\n\\r\\n    function _min(uint256 _a, uint256 _b) private pure returns (uint256) {\\r\\n        return _a < _b ? _a : _b;\\r\\n    }\\r\\n\\r\\n    //MultiRewards farming functionality\\r\\n    //Modified from https://github.com/curvefi/multi-rewards\\r\\n    //staked asset is replaced with deposited collateral (depositedOf[user])\\r\\n    //access control is managed via rewardManager as specified in configurator\\r\\n\\r\\n    //views for multirewards\\r\\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\\r\\n        return _min(block.timestamp, rewardData[_rewardsToken].periodFinish);\\r\\n    }\\r\\n\\r\\n    //total balance of collateral asset\\r\\n    function _totalSupply() internal view returns(uint256) {\\r\\n        return totalDepositedAsset();\\r\\n    }\\r\\n\\r\\n    function rewardPerToken(address _rewardsToken) public view returns (uint256) {\\r\\n        if (_totalSupply() == 0) {\\r\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\r\\n        }\\r\\n        return rewardData[_rewardsToken].rewardPerTokenStored +\\r\\n            (lastTimeRewardApplicable(_rewardsToken) - rewardData[_rewardsToken].lastUpdateTime) *\\r\\n            rewardData[_rewardsToken].rewardRate * 1e18 / _totalSupply();\\r\\n    }\\r\\n\\r\\n    function earned(address account, address _rewardsToken) public view returns (uint256) {\\r\\n        return (depositedAsset[account] * (rewardPerToken(_rewardsToken) - userRewardPerTokenPaid[account][_rewardsToken])) /\\r\\n        1e18 + rewards[account][_rewardsToken];\\r\\n    }\\r\\n\\r\\n    function getRewardForDuration(address _rewardsToken) external view returns (uint256) {\\r\\n        return rewardData[_rewardsToken].rewardRate * rewardData[_rewardsToken].rewardsDuration;\\r\\n    }\\r\\n\\r\\n    //multiRewards restricted functions\\r\\n    function addReward(address _rewardsToken, uint256 _rewardsDuration) public onlyRewardManager {\\r\\n        require(_rewardsToken != address(collateralAsset) && _rewardsToken != address(nUSD), \\\"Reward cannot be collateral asset or nUSD\\\");\\r\\n        require(rewardData[_rewardsToken].rewardsDuration == 0, \\\"Reward already exists\\\");\\r\\n        rewardTokens.push(_rewardsToken);\\r\\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\\r\\n    }\\r\\n\\r\\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external onlyRewardManager updateReward(address(0)) {\\r\\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), reward);\\r\\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\\r\\n            rewardData[_rewardsToken].rewardRate = reward / rewardData[_rewardsToken].rewardsDuration;\\r\\n        } else {\\r\\n            uint256 remaining = rewardData[_rewardsToken].periodFinish - block.timestamp;\\r\\n            uint256 leftover = remaining * rewardData[_rewardsToken].rewardRate;\\r\\n            rewardData[_rewardsToken].rewardRate = (reward + leftover) / rewardData[_rewardsToken].rewardsDuration;\\r\\n        }\\r\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\r\\n        rewardData[_rewardsToken].periodFinish = block.timestamp + rewardData[_rewardsToken].rewardsDuration;\\r\\n        emit RewardAdded(reward);\\r\\n    }\\r\\n\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyRewardManager {\\r\\n        require(tokenAddress != address(collateralAsset) && tokenAddress != address(nUSD), \\\"Cannot withdraw collateral asset or nUSD\\\");\\r\\n        require(rewardData[tokenAddress].lastUpdateTime == 0, \\\"Cannot withdraw reward token\\\");\\r\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\r\\n        emit Recovered(tokenAddress, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function setRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) external onlyRewardManager {\\r\\n        require(block.timestamp > rewardData[_rewardsToken].periodFinish, \\\"Reward period still active\\\");\\r\\n        require(_rewardsDuration > 0, \\\"Reward duration must be non-zero\\\");\\r\\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\\r\\n        emit RewardsDurationUpdated(_rewardsToken, rewardData[_rewardsToken].rewardsDuration);\\r\\n    }\\r\\n\\r\\n    //modifier\\r\\n    modifier updateReward(address account) {\\r\\n        for (uint256 i = 0; i < rewardTokens.length; ) {\\r\\n            address token = rewardTokens[i];\\r\\n            rewardData[token].rewardPerTokenStored = rewardPerToken(token);\\r\\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\r\\n            if (account != address(0)) {\\r\\n                rewards[account][token] = earned(account, token);\\r\\n                userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\\r\\n            }\\r\\n            unchecked {i = i+1;}\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRewardManager() {\\r\\n        require(configurator.isRewardManager(msg.sender), \\\"Not reward manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //multirewards mutative functions\\r\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\r\\n        for (uint256 i = 0; i < rewardTokens.length; ) {\\r\\n            address _rewardsToken = rewardTokens[i];\\r\\n            uint256 reward = rewards[msg.sender][_rewardsToken];\\r\\n            if (reward > 0) {\\r\\n                rewards[msg.sender][_rewardsToken] = 0;\\r\\n                IERC20(_rewardsToken).safeTransfer(msg.sender, reward);\\r\\n                emit RewardPaid(msg.sender, _rewardsToken, reward);\\r\\n            }\\r\\n            unchecked { i = i+1; }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/unstable/interfaces/InUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface InUSD {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/unstable/interfaces/IConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IConfigurator {\\r\\n    struct OriginationFeeConfig {\\r\\n        uint16 minOriginationFee; // fee at 0% utilization\\r\\n        uint16 maxOriginationFee; // fee at 100% utilization\\r\\n    }\\r\\n\\r\\n    struct RedemptionConfig {\\r\\n        bool enabled; //whether a vault can redeem\\r\\n        uint16 baseFee; // base fee for redemption\\r\\n        uint16 maxMultiplier; // fee for redemption\\r\\n        uint16 maxCollateralRatio; // collateral ratio for max fee multiplier\\r\\n        uint16 providerShare; // share of redemption fee that goes to provider\\r\\n    }\\r\\n\\r\\n    function zkOracleAddress(address vault) external view returns(address);\\r\\n    function vaultEnabled(address vault) external view returns(bool);\\r\\n    function vaultMintPaused(address vault) external view returns(bool);\\r\\n    function vaultBurnPaused(address vault) external view returns(bool);\\r\\n    function mintVaultMaxSupply(address vault) external view returns(uint256);\\r\\n    function getBadCollateralRatio(address vault) external view returns(uint256);\\r\\n    function getSafeCollateralRatio(address vault) external view returns(uint256);\\r\\n    function borrowApr(address vault) external view returns(uint256);\\r\\n    function getKeeperReward(address vault) external view returns(uint256);\\r\\n    function getOriginationFee(address vault) external view returns(uint256, uint256);\\r\\n    function getRedemptionFee(address vault, uint256 collateralRatio) external view returns(uint256, uint256);\\r\\n    function getRedemptionConfig(address vault) external view returns(RedemptionConfig memory);\\r\\n    function getDepegThreshold(address vault) external view returns(uint256);\\r\\n    function useMarketRate(address vault) external view returns(bool);\\r\\n\\r\\n    function treasury() external view returns(address);\\r\\n    function flashloanFee() external view returns(uint256);\\r\\n    function owner() external view returns (address);\\r\\n    function admin() external view returns(address);\\r\\n    function nUSD() external view returns(address);\\r\\n    function etherOracle() external view returns(address);\\r\\n    function getAllVaults() external view returns(address[] memory);\\r\\n    function getAllCollaterals() external view returns(address[] memory);\\r\\n    function isRewardManager(address user) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/unstable/interfaces/IZkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IZkOracle {\\r\\n    //@notice returns the address of the asset\\r\\n    function assetAddress() external view returns (address);\\r\\n    //@notice returns the market rate of the collateral in terms of underlying\\r\\n    function getMarketRate() external view returns (uint256);\\r\\n    //@notice returns the backing or redemption rate of the collateral in terms of underlying\\r\\n    function getRedemptionRate() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@ethereum-waffle/=node_modules/@ethereum-waffle/\",\r\n      \"@layerzerolabs/=node_modules/@layerzerolabs/\",\r\n      \"@openzeppelin-3/=node_modules/@openzeppelin-3/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@redstone-finance/=node_modules/@redstone-finance/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"erc721a/=node_modules/erc721a/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nusdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LiquidateAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keeperReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"superLiquidation\",\"type\":\"bool\"}],\"name\":\"LiquidationRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nusdToProtocol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nusdToRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralReceived\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nusdAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"providerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nusdToProtocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nusdToRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nusdToConvert\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract IConfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"depositAssetToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetToUnderlyingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLiquidateFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLiquidateableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nUsdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getMaxMintableAmountWithDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"getOriginationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOverallCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getRedeemableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingToUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepegged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nUSD\",\"outputs\":[{\"internalType\":\"contract InUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTotalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveAmount\",\"type\":\"uint256\"}],\"name\":\"redemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomToCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakedEthVault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000a1290d69c65a6fe4df752f95823fae25cb99e5a70000000000000000000000008a65c07f438a631d4209cfbfc680a596bb0c1513", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}