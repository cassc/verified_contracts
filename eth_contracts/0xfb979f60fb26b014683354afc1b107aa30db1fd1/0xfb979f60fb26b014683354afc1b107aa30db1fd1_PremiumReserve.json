{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract PremiumReserve {\r\n    \r\n    modifier ownerOnly {\r\n    require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n    _;\r\n}\r\n\r\n      constructor(address _team1, address _team2, address _team3, address _team4, uint256 price) {\r\n        team1 = payable(_team1);\r\n        team2 = payable(_team2);\r\n        team3 = payable(_team3);\r\n        team4 = payable(_team4);\r\n        owner = payable(msg.sender);\r\n        PremiumPrice = price;\r\n        \r\n    }\r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    address payable private team1;\r\n    address payable private team2;\r\n    address payable private team3;\r\n    address payable private team4;\r\n    address private owner;\r\n    \r\n    uint256 public PremiumPrice;\r\n    uint internal totalReserved;\r\n    uint public uniqueUsers;\r\n    uint internal maxReserves = 490;\r\n    bool public reserveOn;\r\n    mapping(address => uint256) internal reserved;\r\n    mapping(address => bool) internal canReserve;\r\n\r\n    function start() public {\r\n        reserveOn = true;\r\n\r\n\r\n    }\r\n\r\n\r\n    function end() public {\r\n        reserveOn = false;\r\n\r\n\r\n    }\r\n\r\n   function ReserveImmortal(uint256 amount) public payable {\r\n    require(reserveOn, \"Reserve has not started yet.\");\r\n    require(canReserve[msg.sender], \"Not Eligible\");\r\n    require(reserved[msg.sender] + amount <= 2, \"User Max Reserved\");\r\n    require(totalReserved + amount <= maxReserves, \"Max Reserved\");\r\n    require(msg.value == (PremiumPrice * amount), \"Insufficient Funds\");\r\n    \r\n    if(reserved[msg.sender] == 0) {\r\n        uniqueUsers++;\r\n\r\n    }\r\n    \r\n    reserved[msg.sender] += amount;\r\n    totalReserved += amount;\r\n    emit Transfer(address(0), msg.sender, amount);\r\n}   \r\n    function name() public view virtual returns (string memory) {\r\n        return \"Immortal Reserve\";\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return \"IR\";\r\n    }\r\n\r\n    function getReserved(address user) public view returns (uint256) {\r\n        return reserved[user];\r\n    }\r\n    \r\n     function isAllowed(address user) public view returns (bool) {\r\n        return canReserve[user];\r\n    }\r\n\r\n    function getTotalReserved() public view returns (uint256) {\r\n        return totalReserved;\r\n    }\r\n    \r\n    function addToCanReserve(address user) internal {\r\n        canReserve[user] = true;\r\n    }\r\n    \r\n    function addMultipleToCanReserve(address[] memory users) public ownerOnly  {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            addToCanReserve(users[i]);\r\n        }\r\n    }\r\n\r\n    function withdraw() public ownerOnly {\r\n        require(address(this).balance > 0, \"No funds to withdraw\");\r\n\r\n        uint256 totalBalance = address(this).balance;\r\n        uint256 team1Share = (totalBalance * 64) / 100;\r\n        uint256 team2Share = (totalBalance * 20) / 100;\r\n        uint256 team3Share = (totalBalance * 10) / 100;\r\n        uint256 team4Share = (totalBalance * 6) / 100;\r\n\r\n        team1.transfer(team1Share);\r\n        team2.transfer(team2Share);\r\n        team3.transfer(team3Share);\r\n        team4.transfer(team4Share);\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team4\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PremiumPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveImmortal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addMultipleToCanReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PremiumReserve", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e6bb1cb8c00f77451d8016028151a2615c46e435000000000000000000000000cac8219986bdf99ec18849f5414cfa04a135da96000000000000000000000000e6bb1cb8c00f77451d8016028151a2615c46e435000000000000000000000000e361364c3d3f67d0882aadd7576d01c2b5dd48c90000000000000000000000000000000000000000000000000118aa14d9418000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5d727778e8663f8bb071c2761fdeb0fe6d21d629d92588df8fddafd6007eeb9c"}