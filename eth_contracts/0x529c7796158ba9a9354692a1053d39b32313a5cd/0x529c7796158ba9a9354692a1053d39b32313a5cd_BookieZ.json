{"SourceCode": "/**\r\n WELCOME TO ZE DICE.\r\n DIVE INTO THE WORLD OF PUMPMENTAL BETTING.\r\n\r\n    .-------.\r\n   / *   * /|\r\n  / *   * / |\r\n .-------.* |\r\n | *   * | *.\r\n | *   * | /\r\n | *   * |/\r\n '-------'\r\n\r\nWebsite: https://wagerzz.gg/\r\nTelegram: https://t.me/+roYJUAvu9rJmZDQ0\r\nX: https://twitter.com/wagerzz_gg\r\n**/\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBuyBack.sol\r\n\r\npragma solidity ^0.8.15;\r\n\r\ninterface IBuyBackToken {\r\n    function buyBackTokens(uint256 amountInWei) payable external;\r\n}\r\n\r\n\r\n// File contracts/BookieZ.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\n\r\ncontract BookieZ is Ownable {\r\n\r\n    mapping (uint256 => address) public resultsToToken;\r\n    bool public initialized;\r\n    uint256 public lastTotalPrize;\r\n    uint256 public lastDiceOutcome;\r\n    uint256 public pendingToBeBought;\r\n    address public diceRollerBot = 0x16719D5A9512e1B1628Ad2992c08F2964EabE367;\r\n\r\n    event ResultToTokenAddressSet(uint256 indexed result, address tokenAddress);\r\n\r\n    constructor() {\r\n        initialized = false;\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwnerOrDiceRollerBot() {\r\n        require(msg.sender == owner() || msg.sender == diceRollerBot, \"Only the owner or diceRollerBot can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidResult(uint256 _result) {\r\n        require(_result >= 1 && _result <= 6, \"Result must be between 1 and 6\");\r\n        _;\r\n    }\r\n\r\n    function setDiceRollerBot(address _diceRollerBot) external onlyOwner {\r\n        diceRollerBot = _diceRollerBot;\r\n    }\r\n\r\n    function announceDiceOutcome(uint256 _result, uint256 _amount) external onlyOwnerOrDiceRollerBot onlyValidResult(_result) {\r\n        require(_amount <= address(this).balance, \"Cannot buy back more than the actual balance\");\r\n\r\n        if (_amount == 0) {\r\n            _amount = address(this).balance;\r\n        }\r\n        lastTotalPrize = address(this).balance;\r\n        pendingToBeBought = address(this).balance;\r\n        lastDiceOutcome = _result;\r\n\r\n        IBuyBackToken(resultsToToken[_result]).buyBackTokens{value: _amount}(_amount);\r\n        pendingToBeBought -= _amount;\r\n    }\r\n\r\n    function buyBackWinnerToken(uint256 _amount) external onlyOwnerOrDiceRollerBot {\r\n        require(_amount <= pendingToBeBought, \"Cannot buy back more than the actual balance\");\r\n\r\n        if (_amount == 0) {\r\n            _amount = pendingToBeBought;\r\n        }\r\n\r\n        IBuyBackToken(resultsToToken[lastDiceOutcome]).buyBackTokens{value: _amount}(_amount);\r\n        pendingToBeBought -= _amount;\r\n    }\r\n\r\n    function initializeParams(\r\n        address token1,\r\n        address token2,\r\n        address token3,\r\n        address token4,\r\n        address token5,\r\n        address token6\r\n    ) external onlyOwner {\r\n        require(!initialized, \"Already initialized\");\r\n\r\n        resultsToToken[1] = token1;\r\n        resultsToToken[2] = token2;\r\n        resultsToToken[3] = token3;\r\n        resultsToToken[4] = token4;\r\n        resultsToToken[5] = token5;\r\n        resultsToToken[6] = token6;\r\n\r\n        initialized = true;\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ResultToTokenAddressSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"announceDiceOutcome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyBackWinnerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diceRollerBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token6\",\"type\":\"address\"}],\"name\":\"initializeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDiceOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingToBeBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resultsToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diceRollerBot\",\"type\":\"address\"}],\"name\":\"setDiceRollerBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BookieZ", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f97995818426115dcc6b40ff17ea895bc494abf343d504c52b26d101a2ec4801"}