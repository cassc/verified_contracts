{"SourceCode": "// File: yield-space-pool/src/Utils/PoolErrors.sol\r\n\r\n\r\npragma solidity >=0.8.15;\r\n\r\n/* POOL ERRORS\r\n ******************************************************************************************************************/\r\n\r\n/// The pool is currently paused.\r\nerror Paused();\r\n\r\n/// The pool has matured and maybe you should too.\r\nerror AfterMaturity();\r\n\r\n/// The approval of the sharesToken failed miserably.\r\nerror ApproveFailed();\r\n\r\n/// The update would cause the FYToken cached to be less than the total supply. This should never happen but may\r\n/// occur due to unexpected rounding errors.  We cannot allow this to happen as it could have many unexpected and\r\n/// side effects which may pierce the fabric of the space-time continuum.\r\nerror FYTokenCachedBadState();\r\n\r\n/// The pool has already been initialized. What are you thinking?\r\n/// @dev To save gas, total supply == 0 is checked instead of a state variable.\r\nerror Initialized();\r\n\r\n/// Trade results in negative interest rates because fyToken balance < (newSharesBalance * mu). Don't neg me.\r\nerror NegativeInterestRatesNotAllowed(\r\n    uint128 newFYTokenBalance,\r\n    uint128 newSharesBalanceTimesMu\r\n);\r\n\r\n/// Represents the fee in bps, and it cannot be larger than 10,000.\r\n/// @dev https://en.wikipedia.org/wiki/10,000 per wikipedia:\r\n/// 10,000 (ten thousand) is the natural number following 9,999 and preceding 10,001.\r\n/// @param proposedFee The fee that was proposed.\r\nerror InvalidFee(uint16 proposedFee);\r\n\r\n/// The year is 2106 and an invalid maturity date was passed into the constructor.\r\n/// Maturity date must be less than type(uint32).max\r\nerror MaturityOverflow();\r\n\r\n/// Mu cannot be zero. And you're not a hero.\r\nerror MuCannotBeZero();\r\n\r\n/// Not enough base was found in the pool contract to complete the requested action. You just wasted gas.\r\n/// @param baseAvailable The amount of unaccounted for base tokens.\r\n/// @param baseNeeded The amount of base tokens required for the mint.\r\nerror NotEnoughBaseIn(uint256 baseAvailable, uint256 baseNeeded);\r\n\r\n/// Not enough fYTokens were found in the pool contract to complete the requested action :( smh.\r\n/// @param fYTokensAvailable The amount of unaccounted for fYTokens.\r\n/// @param fYTokensNeeded The amount of fYToken tokens required for the mint.\r\nerror NotEnoughFYTokenIn(uint256 fYTokensAvailable, uint256 fYTokensNeeded);\r\n\r\n/// The pool has not been initialized yet. INTRUDER ALERT!\r\n/// @dev To save gas, total supply == 0 is checked instead of a state variable\r\nerror NotInitialized();\r\n\r\n/// The reserves have changed compared with the last cache which causes the burn to fall outside the bounds of min/max\r\n/// slippage ratios selected. This is likely the result of a peanut butter sandwich attack.\r\n/// @param newRatio The ratio that would have resulted from the mint.\r\n/// @param minRatio The minimum ratio allowed as specified by the caller.\r\n/// @param maxRatio The maximum ratio allowed as specified by the caller\r\nerror SlippageDuringBurn(uint256 newRatio, uint256 minRatio, uint256 maxRatio);\r\n\r\n/// The reserves have changed compared with the last cache which causes the mint to fall outside the bounds of min/max\r\n/// slippage ratios selected. This is likely the result of a bologna sandwich attack.\r\n/// @param newRatio The ratio that would have resulted from the mint.\r\n/// @param minRatio The minimum ratio allowed as specified by the caller.\r\n/// @param maxRatio The maximum ratio allowed as specified by the caller\r\nerror SlippageDuringMint(uint256 newRatio, uint256 minRatio, uint256 maxRatio);\r\n\r\n/// Minimum amount of fyToken (per the min arg) would not be met for the trade. Try again.\r\n/// @param fyTokenOut fyTokens that would be obtained through the trade.\r\n/// @param min The minimum amount of fyTokens as specified by the caller.\r\nerror SlippageDuringSellBase(uint128 fyTokenOut, uint128 min);\r\n\r\n/// Minimum amount of base (per the min arg) would not be met for the trade. Maybe you'll get lucky next time.\r\n/// @param baseOut bases that would be obtained through the trade.\r\n/// @param min The minimum amount of bases as specified by the caller.\r\nerror SlippageDuringSellFYToken(uint128 baseOut, uint128 min);\r\n\r\n/// Unauthorized user attempted to call a method\r\nerror Unauthorized();\r\n\r\n// File: yield-space-pool/src/Utils/PoolEvents.sol\r\n\r\n\r\npragma solidity >=0.8.15;\r\n\r\n/* POOL EVENTS\r\n ******************************************************************************************************************/\r\n\r\nabstract contract PoolEvents {\r\n    /// Fees have been updated.\r\n    event FeesSet(uint16 g1Fee);\r\n\r\n    // Pool has been paused/unpaused\r\n    event PausePool(bool state);\r\n\r\n    /// Indicates that a Strategy has been set for the pool\r\n    event SetStrategy(address indexed strategy);\r\n\r\n    /// Pool is matured and all LP tokens burned. gg.\r\n    event gg();\r\n\r\n    /// gm.  Pool is initialized.\r\n    event gm();\r\n\r\n    /// A liquidity event has occured (burn / mint).\r\n    event Liquidity(\r\n        uint32 maturity,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed fyTokenTo,\r\n        int256 base,\r\n        int256 fyTokens,\r\n        int256 poolTokens\r\n    );\r\n\r\n    /// The _update fn has run and cached balances updated.\r\n    event Sync(\r\n        uint112 baseCached,\r\n        uint112 fyTokenCached,\r\n        uint256 cumulativeBalancesRatio\r\n    );\r\n\r\n    /// One of the four trading functions has been called:\r\n    /// - buyBase\r\n    /// - sellBase\r\n    /// - buyFYToken\r\n    /// - sellFYToken\r\n    event Trade(\r\n        uint32 maturity,\r\n        address indexed from,\r\n        address indexed to,\r\n        int256 base,\r\n        int256 fyTokens\r\n    );\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/Math64x64.sol\r\n\r\n\r\npragma solidity >=0.8.15; /*\r\n  __     ___      _     _\r\n  \\ \\   / (_)    | |   | |  \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\r\n   \\ \\_/ / _  ___| | __| |  \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551  \u2588\u2588\u2551\r\n    \\   / | |/ _ \\ |/ _` |  \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\r\n     | |  | |  __/ | (_| |  \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\r\n     |_|  |_|\\___|_|\\__,_|  \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551\u2588\u2588\u2554\u255d \u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551\r\n       yieldprotocol.com    \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d      \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d      \u255a\u2550\u255d\r\n*/\r\n\r\n/// Smart contract library of mathematical functions operating with signed\r\n/// 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n/// basically a simple fraction whose numerator is signed 128-bit integer and\r\n/// denominator is 2^64.  As long as denominator is always the same, there is no\r\n/// need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n/// represented by int128 type holding only the numerator.\r\n/// @title  Math64x64.sol\r\n/// @author Mikhail Vladimirov - ABDK Consulting\r\n/// https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol\r\nlibrary Math64x64 {\r\n    /* CONVERTERS\r\n     ******************************************************************************************************************/\r\n    /*\r\n     * Minimum value signed 64.64-bit fixed point number may have.\r\n     */\r\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n    /*\r\n     * Maximum value signed 64.64-bit fixed point number may have.\r\n     */\r\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /// @dev Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n    /// number.  Revert on overflow.\r\n    /// @param x signed 256-bit integer number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function fromInt(int256 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n            return int128(x << 64);\r\n        }\r\n    }\r\n\r\n    /// @dev Convert signed 64.64 fixed point number into signed 64-bit integer number rounding down.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64-bit integer number\r\n    function toInt(int128 x) internal pure returns (int64) {\r\n        unchecked {\r\n            return int64(x >> 64);\r\n        }\r\n    }\r\n\r\n    /// @dev Convert unsigned 256-bit integer number into signed 64.64-bit fixed point number.  Revert on overflow.\r\n    /// @param x unsigned 256-bit integer number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function fromUInt(uint256 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x <= 0x7FFFFFFFFFFFFFFF);\r\n            return int128(int256(x << 64));\r\n        }\r\n    }\r\n\r\n    /// @dev Convert signed 64.64 fixed point number into unsigned 64-bit integer number rounding down.\r\n    /// Reverts on underflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return unsigned 64-bit integer number\r\n    function toUInt(int128 x) internal pure returns (uint64) {\r\n        unchecked {\r\n            require(x >= 0);\r\n            return uint64(uint128(x >> 64));\r\n        }\r\n    }\r\n\r\n    /// @dev Convert signed 128.128 fixed point number into signed 64.64-bit fixed point number rounding down.\r\n    /// Reverts on overflow.\r\n    /// @param x signed 128.128-bin fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function from128x128(int256 x) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = x >> 64;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Convert signed 64.64 fixed point number into signed 128.128 fixed point number.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 128.128 fixed point number\r\n    function to128x128(int128 x) internal pure returns (int256) {\r\n        unchecked {\r\n            return int256(x) << 64;\r\n        }\r\n    }\r\n\r\n    /* OPERATIONS\r\n     ******************************************************************************************************************/\r\n\r\n    /// @dev Calculate x + y.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function add(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = int256(x) + y;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x - y.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function sub(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = int256(x) - y;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x///y rounding down.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function mul(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = (int256(x) * y) >> 64;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n    /// number and y is signed 256-bit integer number.  Revert on overflow.\r\n    /// @param x signed 64.64 fixed point number\r\n    /// @param y signed 256-bit integer number\r\n    /// @return signed 256-bit integer number\r\n    function muli(int128 x, int256 y) internal pure returns (int256) {\r\n        //NOTE: This reverts if y == type(int128).min\r\n        unchecked {\r\n            if (x == MIN_64x64) {\r\n                require(\r\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n                        y <= 0x1000000000000000000000000000000000000000000000000\r\n                );\r\n                return -y << 63;\r\n            } else {\r\n                bool negativeResult = false;\r\n                if (x < 0) {\r\n                    x = -x;\r\n                    negativeResult = true;\r\n                }\r\n                if (y < 0) {\r\n                    y = -y; // We rely on overflow behavior here\r\n                    negativeResult = !negativeResult;\r\n                }\r\n                uint256 absoluteResult = mulu(x, uint256(y));\r\n                if (negativeResult) {\r\n                    require(\r\n                        absoluteResult <=\r\n                            0x8000000000000000000000000000000000000000000000000000000000000000\r\n                    );\r\n                    return -int256(absoluteResult); // We rely on overflow behavior here\r\n                } else {\r\n                    require(\r\n                        absoluteResult <=\r\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n                    );\r\n                    return int256(absoluteResult);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\r\n    /// @param x signed 64.64 fixed point number\r\n    /// @param y unsigned 256-bit integer number\r\n    /// @return unsigned 256-bit integer number\r\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (y == 0) return 0;\r\n\r\n            require(x >= 0);\r\n\r\n            uint256 lo = (uint256(int256(x)) *\r\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n            uint256 hi = uint256(int256(x)) * (y >> 128);\r\n\r\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            hi <<= 64;\r\n\r\n            require(\r\n                hi <=\r\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\r\n                        lo\r\n            );\r\n            return hi + lo;\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x / y rounding towards zero.  Revert on overflow or when y is zero.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function div(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            require(y != 0);\r\n            int256 result = (int256(x) << 64) / y;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n    /// integer numbers.  Revert on overflow or when y is zero.\r\n    /// @param x signed 256-bit integer number\r\n    /// @param y signed 256-bit integer number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function divi(int256 x, int256 y) internal pure returns (int128) {\r\n        unchecked {\r\n            require(y != 0);\r\n\r\n            bool negativeResult = false;\r\n            if (x < 0) {\r\n                x = -x; // We rely on overflow behavior here\r\n                negativeResult = true;\r\n            }\r\n            if (y < 0) {\r\n                y = -y; // We rely on overflow behavior here\r\n                negativeResult = !negativeResult;\r\n            }\r\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\r\n            if (negativeResult) {\r\n                require(absoluteResult <= 0x80000000000000000000000000000000);\r\n                return -int128(absoluteResult); // We rely on overflow behavior here\r\n            } else {\r\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n                return int128(absoluteResult); // We rely on overflow behavior here\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n    /// integer numbers.  Revert on overflow or when y is zero.\r\n    /// @param x unsigned 256-bit integer number\r\n    /// @param y unsigned 256-bit integer number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\r\n        unchecked {\r\n            require(y != 0);\r\n            uint128 result = divuu(x, y);\r\n            require(result <= uint128(MAX_64x64));\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate -x.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function neg(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x != MIN_64x64);\r\n            return -x;\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate |x|.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function abs(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x != MIN_64x64);\r\n            return x < 0 ? -x : x;\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n    ///zero.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function inv(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x != 0);\r\n            int256 result = int256(0x100000000000000000000000000000000) / x;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function avg(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            return int128((int256(x) + int256(y)) >> 1);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n    /// Revert on overflow or in case x * y is negative.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 m = int256(x) * int256(y);\r\n            require(m >= 0);\r\n            require(\r\n                m <\r\n                    0x4000000000000000000000000000000000000000000000000000000000000000\r\n            );\r\n            return int128(sqrtu(uint256(m)));\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\r\n    /// also see:https://hackmd.io/gbnqA3gCTR6z-F0HHTxF-A#33-Normalized-Fractional-Exponentiation\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @param y uint256 value\r\n    /// @return signed 64.64-bit fixed point number\r\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\r\n        unchecked {\r\n            bool negative = x < 0 && y & 1 == 1;\r\n\r\n            uint256 absX = uint128(x < 0 ? -x : x);\r\n            uint256 absResult;\r\n            absResult = 0x100000000000000000000000000000000;\r\n\r\n            if (absX <= 0x10000000000000000) {\r\n                absX <<= 63;\r\n                while (y != 0) {\r\n                    if (y & 0x1 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    if (y & 0x2 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    if (y & 0x4 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    if (y & 0x8 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    y >>= 4;\r\n                }\r\n\r\n                absResult >>= 64;\r\n            } else {\r\n                uint256 absXShift = 63;\r\n                if (absX < 0x1000000000000000000000000) {\r\n                    absX <<= 32;\r\n                    absXShift -= 32;\r\n                }\r\n                if (absX < 0x10000000000000000000000000000) {\r\n                    absX <<= 16;\r\n                    absXShift -= 16;\r\n                }\r\n                if (absX < 0x1000000000000000000000000000000) {\r\n                    absX <<= 8;\r\n                    absXShift -= 8;\r\n                }\r\n                if (absX < 0x10000000000000000000000000000000) {\r\n                    absX <<= 4;\r\n                    absXShift -= 4;\r\n                }\r\n                if (absX < 0x40000000000000000000000000000000) {\r\n                    absX <<= 2;\r\n                    absXShift -= 2;\r\n                }\r\n                if (absX < 0x80000000000000000000000000000000) {\r\n                    absX <<= 1;\r\n                    absXShift -= 1;\r\n                }\r\n\r\n                uint256 resultShift = 0;\r\n                while (y != 0) {\r\n                    require(absXShift < 64);\r\n\r\n                    if (y & 0x1 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                        resultShift += absXShift;\r\n                        if (absResult > 0x100000000000000000000000000000000) {\r\n                            absResult >>= 1;\r\n                            resultShift += 1;\r\n                        }\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n                    absXShift <<= 1;\r\n                    if (absX >= 0x100000000000000000000000000000000) {\r\n                        absX >>= 1;\r\n                        absXShift += 1;\r\n                    }\r\n\r\n                    y >>= 1;\r\n                }\r\n\r\n                require(resultShift < 64);\r\n                absResult >>= 64 - resultShift;\r\n            }\r\n            int256 result = negative ? -int256(absResult) : int256(absResult);\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function sqrt(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x >= 0);\r\n            return int128(sqrtu(uint256(int256(x)) << 64));\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate binary logarithm of x.  Revert if x <= 0.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function log_2(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x > 0);\r\n\r\n            int256 msb = 0;\r\n            int256 xc = x;\r\n            if (xc >= 0x10000000000000000) {\r\n                xc >>= 64;\r\n                msb += 64;\r\n            }\r\n            if (xc >= 0x100000000) {\r\n                xc >>= 32;\r\n                msb += 32;\r\n            }\r\n            if (xc >= 0x10000) {\r\n                xc >>= 16;\r\n                msb += 16;\r\n            }\r\n            if (xc >= 0x100) {\r\n                xc >>= 8;\r\n                msb += 8;\r\n            }\r\n            if (xc >= 0x10) {\r\n                xc >>= 4;\r\n                msb += 4;\r\n            }\r\n            if (xc >= 0x4) {\r\n                xc >>= 2;\r\n                msb += 2;\r\n            }\r\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n            int256 result = (msb - 64) << 64;\r\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\r\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n                ux *= ux;\r\n                uint256 b = ux >> 255;\r\n                ux >>= 127 + b;\r\n                result += bit * int256(b);\r\n            }\r\n\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate natural logarithm of x.  Revert if x <= 0.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x > 0);\r\n\r\n            return\r\n                int128(\r\n                    int256(\r\n                        (uint256(int256(log_2(x))) *\r\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate binary exponent of x.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function exp_2(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x < 0x400000000000000000); // Overflow\r\n\r\n            if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n            uint256 result = 0x80000000000000000000000000000000;\r\n\r\n            if (x & 0x8000000000000000 > 0)\r\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\r\n            if (x & 0x4000000000000000 > 0)\r\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\r\n            if (x & 0x2000000000000000 > 0)\r\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\r\n            if (x & 0x1000000000000000 > 0)\r\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\r\n            if (x & 0x800000000000000 > 0)\r\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\r\n            if (x & 0x400000000000000 > 0)\r\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\r\n            if (x & 0x200000000000000 > 0)\r\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\r\n            if (x & 0x100000000000000 > 0)\r\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\r\n            if (x & 0x80000000000000 > 0)\r\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\r\n            if (x & 0x40000000000000 > 0)\r\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\r\n            if (x & 0x20000000000000 > 0)\r\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\r\n            if (x & 0x10000000000000 > 0)\r\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\r\n            if (x & 0x8000000000000 > 0)\r\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\r\n            if (x & 0x4000000000000 > 0)\r\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\r\n            if (x & 0x2000000000000 > 0)\r\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\r\n            if (x & 0x1000000000000 > 0)\r\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\r\n            if (x & 0x800000000000 > 0)\r\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\r\n            if (x & 0x400000000000 > 0)\r\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\r\n            if (x & 0x200000000000 > 0)\r\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\r\n            if (x & 0x100000000000 > 0)\r\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\r\n            if (x & 0x80000000000 > 0)\r\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\r\n            if (x & 0x40000000000 > 0)\r\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\r\n            if (x & 0x20000000000 > 0)\r\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\r\n            if (x & 0x10000000000 > 0)\r\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\r\n            if (x & 0x8000000000 > 0)\r\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\r\n            if (x & 0x4000000000 > 0)\r\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\r\n            if (x & 0x2000000000 > 0)\r\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\r\n            if (x & 0x1000000000 > 0)\r\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\r\n            if (x & 0x800000000 > 0)\r\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\r\n            if (x & 0x400000000 > 0)\r\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\r\n            if (x & 0x200000000 > 0)\r\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\r\n            if (x & 0x100000000 > 0)\r\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\r\n            if (x & 0x80000000 > 0)\r\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\r\n            if (x & 0x40000000 > 0)\r\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\r\n            if (x & 0x20000000 > 0)\r\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\r\n            if (x & 0x10000000 > 0)\r\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\r\n            if (x & 0x8000000 > 0)\r\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\r\n            if (x & 0x4000000 > 0)\r\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\r\n            if (x & 0x2000000 > 0)\r\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\r\n            if (x & 0x1000000 > 0)\r\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\r\n            if (x & 0x800000 > 0)\r\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\r\n            if (x & 0x400000 > 0)\r\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\r\n            if (x & 0x200000 > 0)\r\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\r\n            if (x & 0x100000 > 0)\r\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\r\n            if (x & 0x80000 > 0)\r\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\r\n            if (x & 0x40000 > 0)\r\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\r\n            if (x & 0x20000 > 0)\r\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\r\n            if (x & 0x10000 > 0)\r\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\r\n            if (x & 0x8000 > 0)\r\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\r\n            if (x & 0x4000 > 0)\r\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\r\n            if (x & 0x2000 > 0)\r\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\r\n            if (x & 0x1000 > 0)\r\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\r\n            if (x & 0x800 > 0)\r\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\r\n            if (x & 0x400 > 0)\r\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\r\n            if (x & 0x200 > 0)\r\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\r\n            if (x & 0x100 > 0)\r\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\r\n            if (x & 0x80 > 0)\r\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\r\n            if (x & 0x40 > 0)\r\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\r\n            if (x & 0x20 > 0)\r\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\r\n            if (x & 0x10 > 0)\r\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\r\n            if (x & 0x8 > 0)\r\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\r\n            if (x & 0x4 > 0)\r\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\r\n            if (x & 0x2 > 0)\r\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\r\n            if (x & 0x1 > 0)\r\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\r\n\r\n            result >>= uint256(int256(63 - (x >> 64)));\r\n            require(result <= uint256(int256(MAX_64x64)));\r\n\r\n            return int128(int256(result));\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate natural exponent of x.  Revert on overflow.\r\n    /// @param x signed 64.64-bit fixed point number\r\n    /// @return signed 64.64-bit fixed point number\r\n    function exp(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x < 0x400000000000000000); // Overflow\r\n\r\n            if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n            return\r\n                exp_2(\r\n                    int128(\r\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n    /// integer numbers.  Revert on overflow or when y is zero.\r\n    /// @param x unsigned 256-bit integer number\r\n    /// @param y unsigned 256-bit integer number\r\n    /// @return unsigned 64.64-bit fixed point number\r\n    function divuu(uint256 x, uint256 y) internal pure returns (uint128) {\r\n        // ^^ changed visibility from private to internal for testing\r\n        unchecked {\r\n            require(y != 0);\r\n\r\n            uint256 result;\r\n\r\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                result = (x << 64) / y;\r\n            else {\r\n                uint256 msb = 192;\r\n                uint256 xc = x >> 192;\r\n                if (xc >= 0x100000000) {\r\n                    xc >>= 32;\r\n                    msb += 32;\r\n                }\r\n                if (xc >= 0x10000) {\r\n                    xc >>= 16;\r\n                    msb += 16;\r\n                }\r\n                if (xc >= 0x100) {\r\n                    xc >>= 8;\r\n                    msb += 8;\r\n                }\r\n                if (xc >= 0x10) {\r\n                    xc >>= 4;\r\n                    msb += 4;\r\n                }\r\n                if (xc >= 0x4) {\r\n                    xc >>= 2;\r\n                    msb += 2;\r\n                }\r\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\r\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n                uint256 hi = result * (y >> 128);\r\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n                uint256 xh = x >> 192;\r\n                uint256 xl = x << 64;\r\n\r\n                if (xl < lo) xh -= 1;\r\n                xl -= lo; // We rely on overflow behavior here\r\n                lo = hi << 128;\r\n                if (xl < lo) xh -= 1;\r\n                xl -= lo; // We rely on overflow behavior here\r\n\r\n                assert(xh == hi >> 128);\r\n\r\n                result += xl / y;\r\n            }\r\n\r\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            return uint128(result);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer number.\r\n    /// @param x unsigned 256-bit integer number\r\n    /// @return unsigned 128-bit integer number\r\n    function sqrtu(uint256 x) internal pure returns (uint128) {\r\n        // ^^ changed visibility from private to internal for testing\r\n\r\n        unchecked {\r\n            if (x == 0) return 0;\r\n            else {\r\n                uint256 xx = x;\r\n                uint256 r = 1;\r\n                if (xx >= 0x100000000000000000000000000000000) {\r\n                    xx >>= 128;\r\n                    r <<= 64;\r\n                }\r\n                if (xx >= 0x10000000000000000) {\r\n                    xx >>= 64;\r\n                    r <<= 32;\r\n                }\r\n                if (xx >= 0x100000000) {\r\n                    xx >>= 32;\r\n                    r <<= 16;\r\n                }\r\n                if (xx >= 0x10000) {\r\n                    xx >>= 16;\r\n                    r <<= 8;\r\n                }\r\n                if (xx >= 0x100) {\r\n                    xx >>= 8;\r\n                    r <<= 4;\r\n                }\r\n                if (xx >= 0x10) {\r\n                    xx >>= 4;\r\n                    r <<= 2;\r\n                }\r\n                if (xx >= 0x8) {\r\n                    r <<= 1;\r\n                }\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1; // Seven iterations should be enough\r\n                uint256 r1 = x / r;\r\n                return uint128(r < r1 ? r : r1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/Exp64x64.sol\r\n\r\n\r\npragma solidity >=0.8.15; /*\r\n   __     ___      _     _\r\n   \\ \\   / (_)    | |   | | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\r\n    \\ \\_/ / _  ___| | __| | \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551  \u2588\u2588\u2551\r\n     \\   / | |/ _ \\ |/ _` | \u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\r\n      | |  | |  __/ | (_| | \u2588\u2588\u2554\u2550\u2550\u255d   \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\r\n      |_|  |_|\\___|_|\\__,_| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d \u2588\u2588\u2557\u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551\u2588\u2588\u2554\u255d \u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551\r\n       yieldprotocol.com    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d      \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d      \u255a\u2550\u255d\r\n                            Gas optimized math library custom-built by ABDK -- Copyright \u00a9 2019 */\r\n\r\n\r\nlibrary Exp64x64 {\r\n    using Math64x64 for int128;\r\n\r\n    /// @dev Raises a 64.64 number to the power of another 64.64 number\r\n    /// x^y = 2^(y*log_2(x))\r\n    /// https://ethereum.stackexchange.com/questions/79903/exponential-function-with-fractional-numbers\r\n    function pow(int128 x, int128 y) internal pure returns (int128) {\r\n        return y.mul(x.log_2()).exp_2();\r\n    }\r\n\r\n    /* Mikhail Vladimirov, [Jul 6, 2022 at 12:26:12 PM (Jul 6, 2022 at 12:28:29 PM)]:\r\n        In simple words, when have an n-bits wide number x and raise it to a power \u03b1, then the result would be \u03b1*n bits wide.  This, if \u03b1<1, the result will loose precision, and if \u03b1>1, the result could exceed range.\r\n\r\n        So, the pow function multiplies the result by 2^(n * (1 - \u03b1)).  We have:\r\n\r\n        x \u2208 [0; 2^n)\r\n        x^\u03b1 \u2208 [0; 2^(\u03b1*n))\r\n        x^\u03b1 * 2^(n * (1 - \u03b1)) \u2208 [0; 2^(\u03b1*n) * 2^(n * (1 - \u03b1))) = [0; 2^(\u03b1*n + n * (1 - \u03b1))) = [0; 2^(n * (\u03b1 +  (1 - \u03b1)))) =  [0; 2^n)\r\n\r\n        So the normalization returns the result back into the proper range.\r\n\r\n        Now note, that:\r\n\r\n        pow (pow (x, \u03b1), 1/\u03b1) =\r\n        pow (x^\u03b1 * 2^(n * (1 -\u03b1)) , 1/\u03b1) =\r\n        (x^\u03b1 * 2^(n * (1 -\u03b1)))^(1/\u03b1) * 2^(n * (1 -1/\u03b1)) =\r\n        x^(\u03b1 * (1/\u03b1)) * 2^(n * (1 -\u03b1) * (1/\u03b1)) * 2^(n * (1 -1/\u03b1)) =\r\n        x * 2^(n * (1/\u03b1 -1)) * 2^(n * (1 -1/\u03b1)) =\r\n        x * 2^(n * (1/\u03b1 -1) + n * (1 -1/\u03b1)) =\r\n        x\r\n\r\n        So, for formulas that look like:\r\n\r\n        (a x^\u03b1 + b y^\u03b1 + ...)^(1/\u03b1)\r\n\r\n        The pow function could be used instead of normal power. */\r\n    /// @dev Raise given number x into power specified as a simple fraction y/z and then\r\n    /// multiply the result by the normalization factor 2^(128 /// (1 - y/z)).\r\n    /// Revert if z is zero, or if both x and y are zeros.\r\n    /// @param x number to raise into given power y/z -- integer\r\n    /// @param y numerator of the power to raise x into  -- 64.64\r\n    /// @param z denominator of the power to raise x into  -- 64.64\r\n    /// @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z)) -- integer\r\n    function pow(\r\n        uint128 x,\r\n        uint128 y,\r\n        uint128 z\r\n    ) internal pure returns (uint128) {\r\n        unchecked {\r\n            require(z != 0);\r\n\r\n            if (x == 0) {\r\n                require(y != 0);\r\n                return 0;\r\n            } else {\r\n                uint256 l = (uint256(\r\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)\r\n                ) * y) / z;\r\n                if (l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\r\n                else\r\n                    return\r\n                        pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\r\n    /// in case x is zero.\r\n    /// @param x number to calculate base 2 logarithm of\r\n    /// @return base 2 logarithm of x, multiplied by 2^121\r\n    function log_2(uint128 x) internal pure returns (uint128) {\r\n        unchecked {\r\n            require(x != 0);\r\n\r\n            uint256 b = x;\r\n\r\n            uint256 l = 0xFE000000000000000000000000000000;\r\n\r\n            if (b < 0x10000000000000000) {\r\n                l -= 0x80000000000000000000000000000000;\r\n                b <<= 64;\r\n            }\r\n            if (b < 0x1000000000000000000000000) {\r\n                l -= 0x40000000000000000000000000000000;\r\n                b <<= 32;\r\n            }\r\n            if (b < 0x10000000000000000000000000000) {\r\n                l -= 0x20000000000000000000000000000000;\r\n                b <<= 16;\r\n            }\r\n            if (b < 0x1000000000000000000000000000000) {\r\n                l -= 0x10000000000000000000000000000000;\r\n                b <<= 8;\r\n            }\r\n            if (b < 0x10000000000000000000000000000000) {\r\n                l -= 0x8000000000000000000000000000000;\r\n                b <<= 4;\r\n            }\r\n            if (b < 0x40000000000000000000000000000000) {\r\n                l -= 0x4000000000000000000000000000000;\r\n                b <<= 2;\r\n            }\r\n            if (b < 0x80000000000000000000000000000000) {\r\n                l -= 0x2000000000000000000000000000000;\r\n                b <<= 1;\r\n            }\r\n\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x1000000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x800000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x400000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x200000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x100000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x80000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x40000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x20000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x10000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x8000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x4000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x2000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x1000000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x800000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x400000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x200000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x100000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x80000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x40000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x20000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x10000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x8000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x4000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x2000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x1000000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x800000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x400000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x200000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x100000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x80000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x40000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x20000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x10000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x8000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x4000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x2000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x1000000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x800000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x400000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x200000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x100000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x80000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x40000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x20000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x10000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x8000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x4000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x2000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x1000000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x800000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x400000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x200000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x100000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x80000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x40000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x20000000000000000;\r\n            }\r\n            b = (b * b) >> 127;\r\n            if (b >= 0x100000000000000000000000000000000) {\r\n                b >>= 1;\r\n                l |= 0x10000000000000000;\r\n            } /*\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\r\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) l |= 0x1; */\r\n\r\n            return uint128(l);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate 2 raised into given power.\r\n    /// @param x power to raise 2 into, multiplied by 2^121\r\n    /// @return 2 raised into given power\r\n    function pow_2(uint128 x) internal pure returns (uint128) {\r\n        unchecked {\r\n            uint256 r = 0x80000000000000000000000000000000;\r\n            if (x & 0x1000000000000000000000000000000 > 0)\r\n                r = (r * 0xb504f333f9de6484597d89b3754abe9f) >> 127;\r\n            if (x & 0x800000000000000000000000000000 > 0)\r\n                r = (r * 0x9837f0518db8a96f46ad23182e42f6f6) >> 127;\r\n            if (x & 0x400000000000000000000000000000 > 0)\r\n                r = (r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90) >> 127;\r\n            if (x & 0x200000000000000000000000000000 > 0)\r\n                r = (r * 0x85aac367cc487b14c5c95b8c2154c1b2) >> 127;\r\n            if (x & 0x100000000000000000000000000000 > 0)\r\n                r = (r * 0x82cd8698ac2ba1d73e2a475b46520bff) >> 127;\r\n            if (x & 0x80000000000000000000000000000 > 0)\r\n                r = (r * 0x8164d1f3bc0307737be56527bd14def4) >> 127;\r\n            if (x & 0x40000000000000000000000000000 > 0)\r\n                r = (r * 0x80b1ed4fd999ab6c25335719b6e6fd20) >> 127;\r\n            if (x & 0x20000000000000000000000000000 > 0)\r\n                r = (r * 0x8058d7d2d5e5f6b094d589f608ee4aa2) >> 127;\r\n            if (x & 0x10000000000000000000000000000 > 0)\r\n                r = (r * 0x802c6436d0e04f50ff8ce94a6797b3ce) >> 127;\r\n            if (x & 0x8000000000000000000000000000 > 0)\r\n                r = (r * 0x8016302f174676283690dfe44d11d008) >> 127;\r\n            if (x & 0x4000000000000000000000000000 > 0)\r\n                r = (r * 0x800b179c82028fd0945e54e2ae18f2f0) >> 127;\r\n            if (x & 0x2000000000000000000000000000 > 0)\r\n                r = (r * 0x80058baf7fee3b5d1c718b38e549cb93) >> 127;\r\n            if (x & 0x1000000000000000000000000000 > 0)\r\n                r = (r * 0x8002c5d00fdcfcb6b6566a58c048be1f) >> 127;\r\n            if (x & 0x800000000000000000000000000 > 0)\r\n                r = (r * 0x800162e61bed4a48e84c2e1a463473d9) >> 127;\r\n            if (x & 0x400000000000000000000000000 > 0)\r\n                r = (r * 0x8000b17292f702a3aa22beacca949013) >> 127;\r\n            if (x & 0x200000000000000000000000000 > 0)\r\n                r = (r * 0x800058b92abbae02030c5fa5256f41fe) >> 127;\r\n            if (x & 0x100000000000000000000000000 > 0)\r\n                r = (r * 0x80002c5c8dade4d71776c0f4dbea67d6) >> 127;\r\n            if (x & 0x80000000000000000000000000 > 0)\r\n                r = (r * 0x8000162e44eaf636526be456600bdbe4) >> 127;\r\n            if (x & 0x40000000000000000000000000 > 0)\r\n                r = (r * 0x80000b1721fa7c188307016c1cd4e8b6) >> 127;\r\n            if (x & 0x20000000000000000000000000 > 0)\r\n                r = (r * 0x8000058b90de7e4cecfc487503488bb1) >> 127;\r\n            if (x & 0x10000000000000000000000000 > 0)\r\n                r = (r * 0x800002c5c8678f36cbfce50a6de60b14) >> 127;\r\n            if (x & 0x8000000000000000000000000 > 0)\r\n                r = (r * 0x80000162e431db9f80b2347b5d62e516) >> 127;\r\n            if (x & 0x4000000000000000000000000 > 0)\r\n                r = (r * 0x800000b1721872d0c7b08cf1e0114152) >> 127;\r\n            if (x & 0x2000000000000000000000000 > 0)\r\n                r = (r * 0x80000058b90c1aa8a5c3736cb77e8dff) >> 127;\r\n            if (x & 0x1000000000000000000000000 > 0)\r\n                r = (r * 0x8000002c5c8605a4635f2efc2362d978) >> 127;\r\n            if (x & 0x800000000000000000000000 > 0)\r\n                r = (r * 0x800000162e4300e635cf4a109e3939bd) >> 127;\r\n            if (x & 0x400000000000000000000000 > 0)\r\n                r = (r * 0x8000000b17217ff81bef9c551590cf83) >> 127;\r\n            if (x & 0x200000000000000000000000 > 0)\r\n                r = (r * 0x800000058b90bfdd4e39cd52c0cfa27c) >> 127;\r\n            if (x & 0x100000000000000000000000 > 0)\r\n                r = (r * 0x80000002c5c85fe6f72d669e0e76e411) >> 127;\r\n            if (x & 0x80000000000000000000000 > 0)\r\n                r = (r * 0x8000000162e42ff18f9ad35186d0df28) >> 127;\r\n            if (x & 0x40000000000000000000000 > 0)\r\n                r = (r * 0x80000000b17217f84cce71aa0dcfffe7) >> 127;\r\n            if (x & 0x20000000000000000000000 > 0)\r\n                r = (r * 0x8000000058b90bfc07a77ad56ed22aaa) >> 127;\r\n            if (x & 0x10000000000000000000000 > 0)\r\n                r = (r * 0x800000002c5c85fdfc23cdead40da8d6) >> 127;\r\n            if (x & 0x8000000000000000000000 > 0)\r\n                r = (r * 0x80000000162e42fefc25eb1571853a66) >> 127;\r\n            if (x & 0x4000000000000000000000 > 0)\r\n                r = (r * 0x800000000b17217f7d97f692baacded5) >> 127;\r\n            if (x & 0x2000000000000000000000 > 0)\r\n                r = (r * 0x80000000058b90bfbead3b8b5dd254d7) >> 127;\r\n            if (x & 0x1000000000000000000000 > 0)\r\n                r = (r * 0x8000000002c5c85fdf4eedd62f084e67) >> 127;\r\n            if (x & 0x800000000000000000000 > 0)\r\n                r = (r * 0x800000000162e42fefa58aef378bf586) >> 127;\r\n            if (x & 0x400000000000000000000 > 0)\r\n                r = (r * 0x8000000000b17217f7d24a78a3c7ef02) >> 127;\r\n            if (x & 0x200000000000000000000 > 0)\r\n                r = (r * 0x800000000058b90bfbe9067c93e474a6) >> 127;\r\n            if (x & 0x100000000000000000000 > 0)\r\n                r = (r * 0x80000000002c5c85fdf47b8e5a72599f) >> 127;\r\n            if (x & 0x80000000000000000000 > 0)\r\n                r = (r * 0x8000000000162e42fefa3bdb315934a2) >> 127;\r\n            if (x & 0x40000000000000000000 > 0)\r\n                r = (r * 0x80000000000b17217f7d1d7299b49c46) >> 127;\r\n            if (x & 0x20000000000000000000 > 0)\r\n                r = (r * 0x8000000000058b90bfbe8e9a8d1c4ea0) >> 127;\r\n            if (x & 0x10000000000000000000 > 0)\r\n                r = (r * 0x800000000002c5c85fdf4745969ea76f) >> 127;\r\n            if (x & 0x8000000000000000000 > 0)\r\n                r = (r * 0x80000000000162e42fefa3a0df5373bf) >> 127;\r\n            if (x & 0x4000000000000000000 > 0)\r\n                r = (r * 0x800000000000b17217f7d1cff4aac1e1) >> 127;\r\n            if (x & 0x2000000000000000000 > 0)\r\n                r = (r * 0x80000000000058b90bfbe8e7db95a2f1) >> 127;\r\n            if (x & 0x1000000000000000000 > 0)\r\n                r = (r * 0x8000000000002c5c85fdf473e61ae1f8) >> 127;\r\n            if (x & 0x800000000000000000 > 0)\r\n                r = (r * 0x800000000000162e42fefa39f121751c) >> 127;\r\n            if (x & 0x400000000000000000 > 0)\r\n                r = (r * 0x8000000000000b17217f7d1cf815bb96) >> 127;\r\n            if (x & 0x200000000000000000 > 0)\r\n                r = (r * 0x800000000000058b90bfbe8e7bec1e0d) >> 127;\r\n            if (x & 0x100000000000000000 > 0)\r\n                r = (r * 0x80000000000002c5c85fdf473dee5f17) >> 127;\r\n            if (x & 0x80000000000000000 > 0)\r\n                r = (r * 0x8000000000000162e42fefa39ef5438f) >> 127;\r\n            if (x & 0x40000000000000000 > 0)\r\n                r = (r * 0x80000000000000b17217f7d1cf7a26c8) >> 127;\r\n            if (x & 0x20000000000000000 > 0)\r\n                r = (r * 0x8000000000000058b90bfbe8e7bcf4a4) >> 127;\r\n            if (x & 0x10000000000000000 > 0)\r\n                r = (r * 0x800000000000002c5c85fdf473de72a2) >> 127; /*\r\n      if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\r\n      if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\r\n      if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\r\n      if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\r\n      if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\r\n      if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\r\n      if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\r\n      if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\r\n      if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\r\n      if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\r\n      if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\r\n      if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\r\n      if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\r\n      if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\r\n      if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\r\n      if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\r\n      if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\r\n      if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\r\n      if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\r\n      if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\r\n      if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\r\n      if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\r\n      if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\r\n      if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\r\n      if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\r\n      if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\r\n      if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\r\n      if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\r\n      if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\r\n      if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\r\n      if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\r\n      if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\r\n      if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\r\n      if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\r\n      if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\r\n      if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\r\n      if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\r\n      if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\r\n      if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\r\n      if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\r\n      if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\r\n      if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\r\n      if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\r\n      if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\r\n      if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\r\n      if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\r\n      if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\r\n      if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\r\n      if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\r\n      if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\r\n      if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\r\n      if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\r\n      if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\r\n      if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\r\n      if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\r\n      if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\r\n      if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\r\n      if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\r\n      if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\r\n      if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\r\n      if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\r\n      if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\r\n      if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\r\n      if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\r\n\r\n            r >>= 127 - (x >> 121);\r\n\r\n            return uint128(r);\r\n        }\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/WDiv.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary WDiv {\r\n    // Fixed point arithmetic in 18 decimal units\r\n    // Taken from https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol\r\n    /// @dev Divide an amount by a fixed point factor with 18 decimals\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x * 1e18) / y;\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/RDiv.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary RDiv {\r\n    // Fixed point arithmetic for ray (27 decimal units)\r\n    /// @dev Divide an amount by a fixed point factor with 27 decimals\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x * 1e27) / y;\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/CastU128U104.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary CastU128U104 {\r\n    /// @dev Safely cast an uint128 to an uint104\r\n    function u104(uint128 x) internal pure returns (uint104 y) {\r\n        require(x <= type(uint104).max, 'Cast overflow');\r\n        y = uint104(x);\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/CastU128I128.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary CastU128I128 {\r\n    /// @dev Safely cast an uint128 to an int128\r\n    function i128(uint128 x) internal pure returns (int128 y) {\r\n        require (x <= uint128(type(int128).max), \"Cast overflow\");\r\n        y = int128(x);\r\n    }\r\n}\r\n// File: yield-space-pool/src/Utils/CastU128U112.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary CastU128U112 {\r\n    /// @dev Safely cast an uint128 to an uint112\r\n    function u112(uint128 x) internal pure returns (uint112 y) {\r\n        require (x <= type(uint112).max, \"Cast overflow\");\r\n        y = uint112(x);\r\n    }\r\n}\r\n// File: yield-space-pool/src/Utils/CastU256U104.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary CastU256U104 {\r\n    /// @dev Safely cast an uint256 to an uint104\r\n    function u104(uint256 x) internal pure returns (uint104 y) {\r\n        require(x <= type(uint104).max, 'Cast overflow');\r\n        y = uint104(x);\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/CastU256I256.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary CastU256I256 {\r\n    /// @dev Safely cast an uint256 to an int256\r\n    function i256(uint256 x) internal pure returns (int256 y) {\r\n        require (x <= uint256(type(int256).max), \"Cast overflow\");\r\n        y = int256(x);\r\n    }\r\n}\r\n// File: yield-space-pool/src/Utils/CastU256U112.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary CastU256U112 {\r\n    /// @dev Safely cast an uint256 to an uint112\r\n    function u112(uint256 x) internal pure returns (uint112 y) {\r\n        require (x <= type(uint112).max, \"Cast overflow\");\r\n        y = uint112(x);\r\n    }\r\n}\r\n// File: yield-space-pool/src/Utils/CastU256U128.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary CastU256U128 {\r\n    /// @dev Safely cast an uint256 to an uint128\r\n    function u128(uint256 x) internal pure returns (uint128 y) {\r\n        require (x <= type(uint128).max, \"Cast overflow\");\r\n        y = uint128(x);\r\n    }\r\n}\r\n// File: yield-space-pool/src/Utils/YieldMath.sol\r\n\r\n\r\npragma solidity >=0.8.15;\r\n/*\r\n   __     ___      _     _\r\n   \\ \\   / (_)    | |   | | \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\r\n    \\ \\_/ / _  ___| | __| | \u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\r\n     \\   / | |/ _ \\ |/ _` |  \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\r\n      | |  | |  __/ | (_| |   \u255a\u2588\u2588\u2554\u255d  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\r\n      |_|  |_|\\___|_|\\__,_|    \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\r\n       yieldprotocol.com       \u255a\u2550\u255d   \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/// Ethereum smart contract library implementing Yield Math model with yield bearing tokens.\r\n/// @dev see Mikhail Vladimirov (ABDK) explanations of the math: https://hackmd.io/gbnqA3gCTR6z-F0HHTxF-A#Yield-Math\r\nlibrary YieldMath {\r\n    using Math64x64 for int128;\r\n    using Math64x64 for uint128;\r\n    using Math64x64 for int256;\r\n    using Math64x64 for uint256;\r\n    using Exp64x64 for uint128;\r\n    using Exp64x64 for int128;\r\n    using CastU256U128 for uint256;\r\n    using CastU128I128 for uint128;\r\n\r\n    uint128 public constant WAD = 1e18;\r\n    uint128 public constant ONE = 0x10000000000000000; //   In 64.64\r\n    uint256 public constant MAX = type(uint128).max; //     Used for overflow checks\r\n\r\n    /* CORE FUNCTIONS\r\n     ******************************************************************************************************************/\r\n\r\n    /* ----------------------------------------------------------------------------------------------------------------\r\n                                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    .-:::::::::::-.\r\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                        \u2502                               \u2502                  .:::::::::::::::::.\r\n      \u2502$            $\u2502                       \\\u2502                               \u2502/                :  _______  __   __ :\r\n      \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510                     \\\u2502                               \u2502/               :: |       ||  | |  |::\r\n      \u2502 \u2502$            $\u2502                      \u2502    fyTokenOutForSharesIn      \u2502               ::: |    ___||  |_|  |:::\r\n      \u2502$\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6      \u2502                               \u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6    ::: |   |___ |       |:::\r\n      \u2514\u2500\u2524 \u2502$            $\u2502                    \u2502                               \u2502               ::: |    ___||_     _|:::\r\n        \u2502$\u2502  `sharesIn`  \u2502                   /\u2502                               \u2502\\              ::: |   |      |   |  :::\r\n        \u2514\u2500\u2524              \u2502                   /\u2502                               \u2502\\               :: |___|      |___|  ::\r\n          \u2502$            $\u2502                    \u2502                      \\(^o^)/  \u2502                 :       ????        :\r\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502                     YieldMath \u2502                  `:::::::::::::::::'\r\n                                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    `-:::::::::::-'\r\n    */\r\n    /// Calculates the amount of fyToken a user would get for given amount of shares.\r\n    /// https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param sharesIn shares amount to be traded\r\n    /// @param timeTillMaturity time till maturity in seconds e.g. 90 days in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64.  e.g. 25 years in seconds\r\n    /// @param g fee coefficient, multiplied by 2^64 -- sb under 1.0 for selling shares to pool\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- starts as c at initialization\r\n    /// @return fyTokenOut the amount of fyToken a user would get for given amount of shares\r\n    function fyTokenOutForSharesIn(\r\n        uint128 sharesReserves, // z\r\n        uint128 fyTokenReserves, // x\r\n        uint128 sharesIn, // x == \u0394z\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128) {\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n\r\n            uint128 a = _computeA(timeTillMaturity, k, g);\r\n\r\n            uint256 sum;\r\n            {\r\n                /* https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n\r\n                y = fyToken reserves\r\n                z = shares reserves\r\n                x = \u0394z (sharesIn)\r\n\r\n                     y - (                         sum                           )^(   invA   )\r\n                     y - ((    Za         ) + (  Ya  ) - (       Zxa           ) )^(   invA   )\r\n                \u0394y = y - ( c/\u03bc * (\u03bcz)^(1-t) +  y^(1-t) -  c/\u03bc * (\u03bcz + \u03bcx)^(1-t)  )^(1 / (1 - t))\r\n\r\n                */\r\n                uint256 normalizedSharesReserves;\r\n                require(\r\n                    (normalizedSharesReserves = mu.mulu(sharesReserves)) <= MAX,\r\n                    'YieldMath: Rate overflow (nsr)'\r\n                );\r\n\r\n                // za = c/\u03bc * (normalizedSharesReserves ** a)\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 za;\r\n                require(\r\n                    (za = c.div(mu).mulu(\r\n                        uint128(normalizedSharesReserves).pow(a, ONE)\r\n                    )) <= MAX,\r\n                    'YieldMath: Rate overflow (za)'\r\n                );\r\n\r\n                // ya = fyTokenReserves ** a\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 ya = fyTokenReserves.pow(a, ONE);\r\n\r\n                // normalizedSharesIn = \u03bc * sharesIn\r\n                uint256 normalizedSharesIn;\r\n                require(\r\n                    (normalizedSharesIn = mu.mulu(sharesIn)) <= MAX,\r\n                    'YieldMath: Rate overflow (nsi)'\r\n                );\r\n\r\n                // zx = normalizedSharesReserves + sharesIn * \u03bc\r\n                uint256 zx;\r\n                require(\r\n                    (zx = normalizedSharesReserves + normalizedSharesIn) <= MAX,\r\n                    'YieldMath: Too many shares in'\r\n                );\r\n\r\n                // zxa = c/\u03bc * zx ** a\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 zxa;\r\n                require(\r\n                    (zxa = c.div(mu).mulu(uint128(zx).pow(a, ONE))) <= MAX,\r\n                    'YieldMath: Rate overflow (zxa)'\r\n                );\r\n\r\n                sum = za + ya - zxa;\r\n\r\n                require(sum <= (za + ya), 'YieldMath: Sum underflow');\r\n            }\r\n\r\n            // result = fyTokenReserves - (sum ** (1/a))\r\n            // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n            // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n            uint256 fyTokenOut;\r\n            require(\r\n                (fyTokenOut =\r\n                    uint256(fyTokenReserves) -\r\n                    sum.u128().pow(ONE, a)) <= MAX,\r\n                'YieldMath: Rounding error'\r\n            );\r\n\r\n            require(\r\n                fyTokenOut <= fyTokenReserves,\r\n                'YieldMath: > fyToken reserves'\r\n            );\r\n\r\n            return uint128(fyTokenOut);\r\n        }\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------------------------------------------\r\n          .-:::::::::::-.                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n        .:::::::::::::::::.                     \u2502                               \u2502\r\n       :  _______  __   __ :                   \\\u2502                               \u2502/              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n      :: |       ||  | |  |::                  \\\u2502                               \u2502/              \u2502$            $\u2502\r\n     ::: |    ___||  |_|  |:::                  \u2502    sharesOutForFYTokenIn      \u2502               \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\r\n     ::: |   |___ |       |:::   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6      \u2502                               \u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6    \u2502 \u2502$            $\u2502\r\n     ::: |    ___||_     _|:::                  \u2502                               \u2502               \u2502$\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\r\n     ::: |   |      |   |  :::                 /\u2502                               \u2502\\              \u2514\u2500\u2524 \u2502$            $\u2502\r\n      :: |___|      |___|  ::                  /\u2502                               \u2502\\                \u2502$\u2502    SHARES    \u2502\r\n       :     `fyTokenIn`   :                    \u2502                      \\(^o^)/  \u2502                 \u2514\u2500\u2524     ????     \u2502\r\n        `:::::::::::::::::'                     \u2502                     YieldMath \u2502                   \u2502$            $\u2502\r\n          `-:::::::::::-'                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    */\r\n    /// Calculates the amount of shares a user would get for certain amount of fyToken.\r\n    /// @param sharesReserves shares reserves amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param fyTokenIn fyToken amount to be traded\r\n    /// @param timeTillMaturity time till maturity in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64\r\n    /// @param g fee coefficient, multiplied by 2^64\r\n    /// @param c price of shares in terms of Dai, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- starts as c at initialization\r\n    /// @return amount of Shares a user would get for given amount of fyToken\r\n    function sharesOutForFYTokenIn(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 fyTokenIn,\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128) {\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n            return\r\n                _sharesOutForFYTokenIn(\r\n                    sharesReserves,\r\n                    fyTokenReserves,\r\n                    fyTokenIn,\r\n                    _computeA(timeTillMaturity, k, g),\r\n                    c,\r\n                    mu\r\n                );\r\n        }\r\n    }\r\n\r\n    /// @dev Splitting sharesOutForFYTokenIn in two functions to avoid stack depth limits.\r\n    function _sharesOutForFYTokenIn(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 fyTokenIn,\r\n        uint128 a,\r\n        int128 c,\r\n        int128 mu\r\n    ) private pure returns (uint128) {\r\n        /* https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n\r\n            y = fyToken reserves\r\n            z = shares reserves\r\n            x = \u0394y (fyTokenIn)\r\n\r\n                 z - (                                rightTerm                                              )\r\n                 z - (invMu) * (      Za              ) + ( Ya   ) - (    Yxa      ) / (c / \u03bc) )^(   invA    )\r\n            \u0394z = z -   1/\u03bc   * ( ( (c / \u03bc) * (\u03bcz)^(1-t) +  y^(1-t) - (y + x)^(1-t) ) / (c / \u03bc) )^(1 / (1 - t))\r\n\r\n        */\r\n        unchecked {\r\n            // normalizedSharesReserves = \u03bc * sharesReserves\r\n            uint256 normalizedSharesReserves;\r\n            require(\r\n                (normalizedSharesReserves = mu.mulu(sharesReserves)) <= MAX,\r\n                'YieldMath: Rate overflow (nsr)'\r\n            );\r\n\r\n            uint128 rightTerm;\r\n            {\r\n                uint256 zaYaYxa;\r\n                {\r\n                    // za = c/\u03bc * (normalizedSharesReserves ** a)\r\n                    // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                    // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                    uint256 za;\r\n                    require(\r\n                        (za = c.div(mu).mulu(\r\n                            uint128(normalizedSharesReserves).pow(a, ONE)\r\n                        )) <= MAX,\r\n                        'YieldMath: Rate overflow (za)'\r\n                    );\r\n\r\n                    // ya = fyTokenReserves ** a\r\n                    // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                    // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                    uint256 ya = fyTokenReserves.pow(a, ONE);\r\n\r\n                    // yxa = (fyTokenReserves + x) ** a   # x is aka \u0394y\r\n                    // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                    // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                    uint256 yxa = (fyTokenReserves + fyTokenIn).pow(a, ONE);\r\n\r\n                    require(\r\n                        (zaYaYxa = (za + ya - yxa)) <= MAX,\r\n                        'YieldMath: Rate overflow (yxa)'\r\n                    );\r\n                }\r\n\r\n                rightTerm = uint128( // Cast zaYaYxa/(c/\u03bc).pow(1/a).div(\u03bc) from int128 to uint128 - always positive\r\n                    int128( // Cast zaYaYxa/(c/\u03bc).pow(1/a) from uint128 to int128 - always < zaYaYxa/(c/\u03bc)\r\n                        uint128( // Cast zaYaYxa/(c/\u03bc) from int128 to uint128 - always positive\r\n                            zaYaYxa.divu(uint128(c.div(mu))) // Cast c/\u03bc from int128 to uint128 - always positive\r\n                        ).pow(uint128(ONE), a) // Cast 2^64 from int128 to uint128 - always positive\r\n                    ).div(mu)\r\n                );\r\n            }\r\n            require(rightTerm <= sharesReserves, 'YieldMath: Rate underflow');\r\n\r\n            return sharesReserves - rightTerm;\r\n        }\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------------------------------------------\r\n          .-:::::::::::-.                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n        .:::::::::::::::::.                     \u2502                               \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n       :  _______  __   __ :                   \\\u2502                               \u2502/             \u2502$            $\u2502\r\n      :: |       ||  | |  |::                  \\\u2502                               \u2502/             \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\r\n     ::: |    ___||  |_|  |:::                  \u2502    fyTokenInForSharesOut      \u2502              \u2502 \u2502$            $\u2502\r\n     ::: |   |___ |       |:::   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6      \u2502                               \u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6   \u2502$\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\r\n     ::: |    ___||_     _|:::                  \u2502                               \u2502              \u2514\u2500\u2524 \u2502$            $\u2502\r\n     ::: |   |      |   |  :::                 /\u2502                               \u2502\\               \u2502$\u2502              \u2502\r\n      :: |___|      |___|  ::                  /\u2502                               \u2502\\               \u2514\u2500\u2524  `sharesOut` \u2502\r\n       :        ????       :                    \u2502                      \\(^o^)/  \u2502                  \u2502$            $\u2502\r\n        `:::::::::::::::::'                     \u2502                     YieldMath \u2502                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n          `-:::::::::::-'                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    */\r\n    /// Calculates the amount of fyToken a user could sell for given amount of Shares.\r\n    /// @param sharesReserves shares reserves amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param sharesOut Shares amount to be traded\r\n    /// @param timeTillMaturity time till maturity in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64\r\n    /// @param g fee coefficient, multiplied by 2^64\r\n    /// @param c price of shares in terms of Dai, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- starts as c at initialization\r\n    /// @return fyTokenIn the amount of fyToken a user could sell for given amount of Shares\r\n    function fyTokenInForSharesOut(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 sharesOut,\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128) {\r\n        /* https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n\r\n                y = fyToken reserves\r\n                z = shares reserves\r\n                x = \u0394z (sharesOut)\r\n\r\n                     (                  sum                                )^(   invA    ) - y\r\n                     (    Za          ) + (  Ya  ) - (       Zxa           )^(   invA    ) - y\r\n                \u0394y = ( c/\u03bc * (\u03bcz)^(1-t) +  y^(1-t) - c/\u03bc * (\u03bcz - \u03bcx)^(1-t) )^(1 / (1 - t)) - y\r\n\r\n            */\r\n\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n\r\n            uint128 a = _computeA(timeTillMaturity, k, g);\r\n            uint256 sum;\r\n            {\r\n                // normalizedSharesReserves = \u03bc * sharesReserves\r\n                uint256 normalizedSharesReserves;\r\n                require(\r\n                    (normalizedSharesReserves = mu.mulu(sharesReserves)) <= MAX,\r\n                    'YieldMath: Rate overflow (nsr)'\r\n                );\r\n\r\n                // za = c/\u03bc * (normalizedSharesReserves ** a)\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 za;\r\n                require(\r\n                    (za = c.div(mu).mulu(\r\n                        uint128(normalizedSharesReserves).pow(a, ONE)\r\n                    )) <= MAX,\r\n                    'YieldMath: Rate overflow (za)'\r\n                );\r\n\r\n                // ya = fyTokenReserves ** a\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 ya = fyTokenReserves.pow(a, ONE);\r\n\r\n                // normalizedSharesOut = \u03bc * sharesOut\r\n                uint256 normalizedSharesOut;\r\n                require(\r\n                    (normalizedSharesOut = mu.mulu(sharesOut)) <= MAX,\r\n                    'YieldMath: Rate overflow (nso)'\r\n                );\r\n\r\n                // zx = normalizedSharesReserves + sharesOut * \u03bc\r\n                require(\r\n                    normalizedSharesReserves >= normalizedSharesOut,\r\n                    'YieldMath: Too many shares in'\r\n                );\r\n                uint256 zx = normalizedSharesReserves - normalizedSharesOut;\r\n\r\n                // zxa = c/\u03bc * zx ** a\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 zxa = c.div(mu).mulu(uint128(zx).pow(a, ONE));\r\n\r\n                // sum = za + ya - zxa\r\n                // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\r\n                require(\r\n                    (sum = za + ya - zxa) <= MAX,\r\n                    'YieldMath: > fyToken reserves'\r\n                );\r\n            }\r\n\r\n            // result = fyTokenReserves - (sum ** (1/a))\r\n            // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n            // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n            uint256 result;\r\n            require(\r\n                (result =\r\n                    uint256(uint128(sum).pow(ONE, a)) -\r\n                    uint256(fyTokenReserves)) <= MAX,\r\n                'YieldMath: Rounding error'\r\n            );\r\n\r\n            return uint128(result);\r\n        }\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------------------------------------------\r\n                                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    .-:::::::::::-.\r\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                        \u2502                               \u2502                  .:::::::::::::::::.\r\n      \u2502$            $\u2502                       \\\u2502                               \u2502/                :  _______  __   __ :\r\n      \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510                     \\\u2502                               \u2502/               :: |       ||  | |  |::\r\n      \u2502 \u2502$            $\u2502                      \u2502    sharesInForFYTokenOut      \u2502               ::: |    ___||  |_|  |:::\r\n      \u2502$\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6      \u2502                               \u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6    ::: |   |___ |       |:::\r\n      \u2514\u2500\u2524 \u2502$            $\u2502                    \u2502                               \u2502               ::: |    ___||_     _|:::\r\n        \u2502$\u2502    SHARES    \u2502                   /\u2502                               \u2502\\              ::: |   |      |   |  :::\r\n        \u2514\u2500\u2524     ????     \u2502                   /\u2502                               \u2502\\               :: |___|      |___|  ::\r\n          \u2502$            $\u2502                    \u2502                      \\(^o^)/  \u2502                 :   `fyTokenOut`    :\r\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502                     YieldMath \u2502                  `:::::::::::::::::'\r\n                                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    `-:::::::::::-'\r\n    */\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param fyTokenOut fyToken amount to be traded\r\n    /// @param timeTillMaturity time till maturity in seconds e.g. 90 days in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64.  e.g. 25 years in seconds\r\n    /// @param g fee coefficient, multiplied by 2^64 -- sb under 1.0 for selling shares to pool\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- starts as c at initialization\r\n    /// @return result the amount of shares a user would have to pay for given amount of fyToken\r\n    function sharesInForFYTokenOut(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 fyTokenOut,\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128) {\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n            return\r\n                _sharesInForFYTokenOut(\r\n                    sharesReserves,\r\n                    fyTokenReserves,\r\n                    fyTokenOut,\r\n                    _computeA(timeTillMaturity, k, g),\r\n                    c,\r\n                    mu\r\n                );\r\n        }\r\n    }\r\n\r\n    /// @dev Splitting sharesInForFYTokenOut in two functions to avoid stack depth limits\r\n    function _sharesInForFYTokenOut(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 fyTokenOut,\r\n        uint128 a,\r\n        int128 c,\r\n        int128 mu\r\n    ) private pure returns (uint128) {\r\n        /* https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n\r\n        y = fyToken reserves\r\n        z = shares reserves\r\n        x = \u0394y (fyTokenOut)\r\n\r\n             1/\u03bc * (                 subtotal                            )^(   invA    ) - z\r\n             1/\u03bc * ((     Za       ) + (  Ya  ) - (    Yxa    )) / (c/\u03bc) )^(   invA    ) - z\r\n        \u0394z = 1/\u03bc * (( c/\u03bc * \u03bcz^(1-t) +  y^(1-t) - (y - x)^(1-t)) / (c/\u03bc) )^(1 / (1 - t)) - z\r\n\r\n        */\r\n        unchecked {\r\n            // normalizedSharesReserves = \u03bc * sharesReserves\r\n            require(\r\n                mu.mulu(sharesReserves) <= MAX,\r\n                'YieldMath: Rate overflow (nsr)'\r\n            );\r\n\r\n            // za = c/\u03bc * (normalizedSharesReserves ** a)\r\n            // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n            // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n            uint256 za = c.div(mu).mulu(\r\n                uint128(mu.mulu(sharesReserves)).pow(a, ONE)\r\n            );\r\n            require(za <= MAX, 'YieldMath: Rate overflow (za)');\r\n\r\n            // ya = fyTokenReserves ** a\r\n            // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n            // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n            uint256 ya = fyTokenReserves.pow(a, ONE);\r\n\r\n            // yxa = (fyTokenReserves - x) ** a\u00df\r\n            // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n            // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n            uint256 yxa = (fyTokenReserves - fyTokenOut).pow(a, ONE);\r\n            require(\r\n                fyTokenOut <= fyTokenReserves,\r\n                'YieldMath: Underflow (yxa)'\r\n            );\r\n\r\n            uint256 zaYaYxa;\r\n            require(\r\n                (zaYaYxa = (za + ya - yxa)) <= MAX,\r\n                'YieldMath: Rate overflow (zyy)'\r\n            );\r\n\r\n            int128 subtotal = int128(ONE).div(mu).mul(\r\n                (\r\n                    uint128(zaYaYxa.divu(uint128(c.div(mu)))).pow(\r\n                        uint128(ONE),\r\n                        uint128(a)\r\n                    )\r\n                ).i128()\r\n            );\r\n\r\n            // subtotal is calculated as a positive fraction multiplied by a uint so it cannot underflow when casting to uint and its ok to use a raw casting\r\n            uint128 sharesOut = uint128(subtotal) - sharesReserves;\r\n            require(\r\n                sharesOut <= uint128(subtotal),\r\n                'YieldMath: Underflow error'\r\n            );\r\n            return sharesOut;\r\n        }\r\n    }\r\n\r\n    /// Calculates the max amount of fyToken a user could sell.\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param timeTillMaturity time till maturity in seconds e.g. 90 days in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64.  e.g. 25 years in seconds\r\n    /// @param g fee coefficient, multiplied by 2^64 -- sb over 1.0 for buying shares from the pool\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @return fyTokenIn the max amount of fyToken a user could sell\r\n    function maxFYTokenIn(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128 fyTokenIn) {\r\n        /* https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n\r\n                Y = fyToken reserves\r\n                Z = shares reserves\r\n                y = maxFYTokenIn\r\n\r\n                     (                  sum        )^(   invA    ) - Y\r\n                     (    Za          ) + (  Ya  ) )^(   invA    ) - Y\r\n                \u0394y = ( c/\u03bc * (\u03bcz)^(1-t) +  Y^(1-t) )^(1 / (1 - t)) - Y\r\n\r\n            */\r\n\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n\r\n            uint128 a = _computeA(timeTillMaturity, k, g);\r\n            uint256 sum;\r\n            {\r\n                // normalizedSharesReserves = \u03bc * sharesReserves\r\n                uint256 normalizedSharesReserves;\r\n                require(\r\n                    (normalizedSharesReserves = mu.mulu(sharesReserves)) <= MAX,\r\n                    'YieldMath: Rate overflow (nsr)'\r\n                );\r\n\r\n                // za = c/\u03bc * (normalizedSharesReserves ** a)\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 za;\r\n                require(\r\n                    (za = c.div(mu).mulu(\r\n                        uint128(normalizedSharesReserves).pow(a, ONE)\r\n                    )) <= MAX,\r\n                    'YieldMath: Rate overflow (za)'\r\n                );\r\n\r\n                // ya = fyTokenReserves ** a\r\n                // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n                // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n                uint256 ya = fyTokenReserves.pow(a, ONE);\r\n\r\n                // sum = za + ya\r\n                // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\r\n                require(\r\n                    (sum = za + ya) <= MAX,\r\n                    'YieldMath: > fyToken reserves'\r\n                );\r\n            }\r\n\r\n            // result = (sum ** (1/a)) - fyTokenReserves\r\n            // The \u201cpow(x, y, z)\u201d function not only calculates x^(y/z) but also normalizes the result to\r\n            // fit into 64.64 fixed point number, i.e. it actually calculates: x^(y/z) * (2^63)^(1 - y/z)\r\n            uint256 result;\r\n            require(\r\n                (result =\r\n                    uint256(uint128(sum).pow(ONE, a)) -\r\n                    uint256(fyTokenReserves)) <= MAX,\r\n                'YieldMath: Rounding error'\r\n            );\r\n\r\n            fyTokenIn = uint128(result);\r\n        }\r\n    }\r\n\r\n    /// Calculates the max amount of fyToken a user could get.\r\n    /// https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param timeTillMaturity time till maturity in seconds e.g. 90 days in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64.  e.g. 25 years in seconds\r\n    /// @param g fee coefficient, multiplied by 2^64 -- sb under 1.0 for selling shares to pool\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- c at initialization\r\n    /// @return fyTokenOut the max amount of fyToken a user could get\r\n    function maxFYTokenOut(\r\n        uint128 sharesReserves,\r\n        uint128 fyTokenReserves,\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128 fyTokenOut) {\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n\r\n            int128 a = int128(_computeA(timeTillMaturity, k, g));\r\n\r\n            /*\r\n                y = maxFyTokenOut\r\n                Y = fyTokenReserves (virtual)\r\n                Z = sharesReserves\r\n\r\n                    Y - ( (       numerator           ) / (  denominator  ) )^invA\r\n                    Y - ( ( (    Za      ) + (  Ya  ) ) / (  denominator  ) )^invA\r\n                y = Y - ( (   c/\u03bc * (\u03bcZ)^a +    Y^a   ) / (    c/\u03bc + 1    ) )^(1/a)\r\n            */\r\n\r\n            // za = c/\u03bc * ((\u03bc * (sharesReserves / 1e18)) ** a)\r\n            int128 za = c.div(mu).mul(mu.mul(sharesReserves.divu(WAD)).pow(a));\r\n\r\n            // ya = (fyTokenReserves / 1e18) ** a\r\n            int128 ya = fyTokenReserves.divu(WAD).pow(a);\r\n\r\n            // numerator = za + ya\r\n            int128 numerator = za.add(ya);\r\n\r\n            // denominator = c/u + 1\r\n            int128 denominator = c.div(mu).add(int128(ONE));\r\n\r\n            // rightTerm = (numerator / denominator) ** (1/a)\r\n            int128 rightTerm = numerator.div(denominator).pow(\r\n                int128(ONE).div(a)\r\n            );\r\n\r\n            // maxFYTokenOut_ = fyTokenReserves - (rightTerm * 1e18)\r\n            require(\r\n                (fyTokenOut = fyTokenReserves - uint128(rightTerm.mulu(WAD))) <=\r\n                    MAX,\r\n                'YieldMath: Underflow error'\r\n            );\r\n            require(\r\n                fyTokenOut <= fyTokenReserves,\r\n                'YieldMath: Underflow error'\r\n            );\r\n        }\r\n    }\r\n\r\n    /// Calculates the max amount of base a user could sell.\r\n    /// https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param timeTillMaturity time till maturity in seconds e.g. 90 days in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64.  e.g. 25 years in seconds\r\n    /// @param g fee coefficient, multiplied by 2^64 -- sb under 1.0 for selling shares to pool\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- c at initialization\r\n    /// @return sharesIn Calculates the max amount of base a user could sell.\r\n    function maxSharesIn(\r\n        uint128 sharesReserves, // z\r\n        uint128 fyTokenReserves, // x\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128 sharesIn) {\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n\r\n            int128 a = int128(_computeA(timeTillMaturity, k, g));\r\n\r\n            /*\r\n                y = maxSharesIn_\r\n                Y = fyTokenReserves (virtual)\r\n                Z = sharesReserves\r\n\r\n                    1/\u03bc ( (       numerator           ) / (  denominator  ) )^invA  - Z\r\n                    1/\u03bc ( ( (    Za      ) + (  Ya  ) ) / (  denominator  ) )^invA  - Z\r\n                y = 1/\u03bc ( ( c/\u03bc * (\u03bcZ)^a   +    Y^a   ) / (     c/u + 1   ) )^(1/a) - Z\r\n            */\r\n\r\n            // za = c/\u03bc * ((\u03bc * (sharesReserves / 1e18)) ** a)\r\n            int128 za = c.div(mu).mul(mu.mul(sharesReserves.divu(WAD)).pow(a));\r\n\r\n            // ya = (fyTokenReserves / 1e18) ** a\r\n            int128 ya = fyTokenReserves.divu(WAD).pow(a);\r\n\r\n            // numerator = za + ya\r\n            int128 numerator = za.add(ya);\r\n\r\n            // denominator = c/u + 1\r\n            int128 denominator = c.div(mu).add(int128(ONE));\r\n\r\n            // leftTerm = 1/\u03bc * (numerator / denominator) ** (1/a)\r\n            int128 leftTerm = int128(ONE).div(mu).mul(\r\n                numerator.div(denominator).pow(int128(ONE).div(a))\r\n            );\r\n\r\n            // maxSharesIn_ = (leftTerm * 1e18) - sharesReserves\r\n            require(\r\n                (sharesIn = uint128(leftTerm.mulu(WAD)) - sharesReserves) <=\r\n                    MAX,\r\n                'YieldMath: Underflow error'\r\n            );\r\n            require(\r\n                sharesIn <= uint128(leftTerm.mulu(WAD)),\r\n                'YieldMath: Underflow error'\r\n            );\r\n        }\r\n    }\r\n\r\n    /*\r\n    This function is not needed as it's return value is driven directly by the shares liquidity of the pool\r\n\r\n    https://hackmd.io/lRZ4mgdrRgOpxZQXqKYlFw?view#MaxSharesOut\r\n\r\n    function maxSharesOut(\r\n        uint128 sharesReserves, // z\r\n        uint128 fyTokenReserves, // x\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128 maxSharesOut_) {} */\r\n\r\n    /// Calculates the total supply invariant.\r\n    /// https://docs.google.com/spreadsheets/d/14K_McZhlgSXQfi6nFGwDvDh4BmOu6_Hczi_sFreFfOE/\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param totalSupply total supply\r\n    /// @param timeTillMaturity time till maturity in seconds e.g. 90 days in seconds\r\n    /// @param k time till maturity coefficient, multiplied by 2^64.  e.g. 25 years in seconds\r\n    /// @param g fee coefficient, multiplied by 2^64 -- use under 1.0 (g2)\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- c at initialization\r\n    /// @return result Calculates the total supply invariant.\r\n    function invariant(\r\n        uint128 sharesReserves, // z\r\n        uint128 fyTokenReserves, // x\r\n        uint256 totalSupply, // s\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g,\r\n        int128 c,\r\n        int128 mu\r\n    ) public pure returns (uint128 result) {\r\n        if (totalSupply == 0) return 0;\r\n        int128 a = int128(_computeA(timeTillMaturity, k, g));\r\n\r\n        result = _invariant(\r\n            sharesReserves,\r\n            fyTokenReserves,\r\n            totalSupply,\r\n            a,\r\n            c,\r\n            mu\r\n        );\r\n    }\r\n\r\n    /// @param sharesReserves yield bearing vault shares reserve amount\r\n    /// @param fyTokenReserves fyToken reserves amount\r\n    /// @param totalSupply total supply\r\n    /// @param a 1 - g * t computed\r\n    /// @param c price of shares in terms of their base, multiplied by 2^64\r\n    /// @param mu (\u03bc) Normalization factor -- c at initialization\r\n    /// @return result Calculates the total supply invariant.\r\n    function _invariant(\r\n        uint128 sharesReserves, // z\r\n        uint128 fyTokenReserves, // x\r\n        uint256 totalSupply, // s\r\n        int128 a,\r\n        int128 c,\r\n        int128 mu\r\n    ) internal pure returns (uint128 result) {\r\n        unchecked {\r\n            require(c > 0 && mu > 0, 'YieldMath: c and mu must be positive');\r\n\r\n            /*\r\n                y = invariant\r\n                Y = fyTokenReserves (virtual)\r\n                Z = sharesReserves\r\n                s = total supply\r\n\r\n                    c/\u03bc ( (       numerator           ) / (  denominator  ) )^invA  / s \r\n                    c/\u03bc ( ( (    Za      ) + (  Ya  ) ) / (  denominator  ) )^invA  / s \r\n                y = c/\u03bc ( ( c/\u03bc * (\u03bcZ)^a   +    Y^a   ) / (     c/u + 1   ) )^(1/a) / s\r\n            */\r\n\r\n            // za = c/\u03bc * ((\u03bc * (sharesReserves / 1e18)) ** a)\r\n            int128 za = c.div(mu).mul(mu.mul(sharesReserves.divu(WAD)).pow(a));\r\n\r\n            // ya = (fyTokenReserves / 1e18) ** a\r\n            int128 ya = fyTokenReserves.divu(WAD).pow(a);\r\n\r\n            // numerator = za + ya\r\n            int128 numerator = za.add(ya);\r\n\r\n            // denominator = c/u + 1\r\n            int128 denominator = c.div(mu).add(int128(ONE));\r\n\r\n            // topTerm = c/\u03bc * (numerator / denominator) ** (1/a)\r\n            int128 topTerm = c.div(mu).mul(\r\n                (numerator.div(denominator)).pow(int128(ONE).div(a))\r\n            );\r\n\r\n            result = uint128((topTerm.mulu(WAD) * WAD) / totalSupply);\r\n        }\r\n    }\r\n\r\n    /* UTILITY FUNCTIONS\r\n     ******************************************************************************************************************/\r\n\r\n    function _computeA(\r\n        uint128 timeTillMaturity,\r\n        int128 k,\r\n        int128 g\r\n    ) private pure returns (uint128) {\r\n        // t = k * timeTillMaturity\r\n        int128 t = k.mul(timeTillMaturity.fromUInt());\r\n        require(t >= 0, 'YieldMath: t must be positive'); // Meaning neither T or k can be negative\r\n\r\n        // a = (1 - gt)\r\n        int128 a = int128(ONE).sub(g.mul(t));\r\n        require(a > 0, 'YieldMath: Too far from maturity');\r\n        require(a <= int128(ONE), 'YieldMath: g must be positive');\r\n\r\n        return uint128(a);\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/RevertMsgExtractor.sol\r\n\r\n\r\n// Taken from https://github.com/sushiswap/BoringSolidity/blob/441e51c0544cf2451e6116fe00515e71d7c42e2c/contracts/BoringBatchable.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\nlibrary RevertMsgExtractor {\r\n    /// @dev Helper function to extract a useful revert message from a failed call.\r\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\r\n    function getRevertMsg(bytes memory returnData)\r\n        internal pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            returnData := add(returnData, 0x04)\r\n        }\r\n        return abi.decode(returnData, (string)); // All that remains is the revert string\r\n    }\r\n}\r\n// File: yield-space-pool/src/Interfaces/IERC2612.sol\r\n\r\n\r\n// Code adaFYTokened from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC2612 standard as defined in the EIP.\r\n *\r\n * Adds the {permit} method, which can be used to change one's\r\n * {IERC20-allowance} without having to send a transaction, by signing a\r\n * message. This allows users to spend tokens without having to hold Ether.\r\n *\r\n * See https://eips.ethereum.org/EIPS/eip-2612.\r\n */\r\ninterface IERC2612 {\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IERC5095.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\ninterface IERC5095 is IERC2612 {\r\n    function maturity() external view returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function convertToUnderlying(uint256) external view returns (uint256);\r\n\r\n    function convertToShares(uint256) external view returns (uint256);\r\n\r\n    function maxRedeem(address) external view returns (uint256);\r\n\r\n    function previewRedeem(uint256) external view returns (uint256);\r\n\r\n    function maxWithdraw(address) external view returns (uint256);\r\n\r\n    function previewWithdraw(uint256) external view returns (uint256);\r\n\r\n    function previewDeposit(uint256) external view returns (uint256);\r\n\r\n    function withdraw(uint256, address, address) external returns (uint256);\r\n\r\n    function redeem(uint256, address, address) external returns (uint256);\r\n\r\n    function deposit(uint256, address) external returns (uint256);\r\n\r\n    function mint(uint256, address) external returns (uint256);\r\n\r\n    function authMint(address, uint256) external returns (bool);\r\n\r\n    function authBurn(address, uint256) external returns (bool);\r\n\r\n    function authApprove(address, address, uint256) external returns (bool);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the number of decimals the token uses\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/TransferHelper.sol\r\n\r\n\r\n// Taken from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\n// USDT is a well known token that returns nothing for its transfer, transferFrom, and approve functions\r\n// and part of the reason this library exists\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with the underlying revert message if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\r\n        );\r\n        if (!(success && _returnTrueOrNothing(data)))\r\n            revert(RevertMsgExtractor.getRevertMsg(data));\r\n    }\r\n\r\n    /// @notice Approves a spender to transfer tokens from msg.sender\r\n    /// @dev Errors with the underlying revert message if transfer fails\r\n    /// @param token The contract address of the token which will be approved\r\n    /// @param spender The approved spender\r\n    /// @param value The value of the allowance\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\r\n        );\r\n        if (!(success && _returnTrueOrNothing(data)))\r\n            revert(RevertMsgExtractor.getRevertMsg(data));\r\n    }\r\n\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @dev Errors with the underlying revert message if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(\r\n                IERC20.transferFrom.selector,\r\n                from,\r\n                to,\r\n                value\r\n            )\r\n        );\r\n        if (!(success && _returnTrueOrNothing(data)))\r\n            revert(RevertMsgExtractor.getRevertMsg(data));\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Errors with the underlying revert message if transfer fails\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address payable to, uint256 value) internal {\r\n        (bool success, bytes memory data) = to.call{value: value}(new bytes(0));\r\n        if (!success) revert(RevertMsgExtractor.getRevertMsg(data));\r\n    }\r\n\r\n    function _returnTrueOrNothing(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Utils/MinimalTransferHelper.sol\r\n\r\n\r\n// Taken from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\n\r\n// helper methods for transferring ERC20 tokens that do not consistently return true/false\r\nlibrary MinimalTransferHelper {\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with the base revert message if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) revert(RevertMsgExtractor.getRevertMsg(data));\r\n    }\r\n}\r\n// File: yield-space-pool/src/Interfaces/IMaturingToken.sol\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\ninterface IMaturingToken is IERC20 {\r\n    function maturity() external view returns (uint256);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IJoin.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IJoin {\r\n    /// @dev asset managed by this contract\r\n    function asset() external view returns (address);\r\n\r\n    /// @dev Add tokens to this contract.\r\n    function join(address user, uint128 wad) external returns (uint128);\r\n\r\n    /// @dev Remove tokens to this contract.\r\n    function exit(address user, uint128 wad) external returns (uint128);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IFYToken.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IFYToken is IERC20, IERC5095 {\r\n    /// @dev Asset that is returned on redemption.\r\n    function base() external view returns (address);\r\n\r\n    /// @dev Source of redemption funds.\r\n    function join() external view returns (IJoin);\r\n\r\n    /// @dev Unix time at which redemption of FYToken for base are possible\r\n    function maturity() external view returns (uint256);\r\n\r\n    /// @dev Record price data at maturity\r\n    function mature() external;\r\n\r\n    /// @dev Mint FYToken providing an equal amount of base to the protocol\r\n    function mintWithbase(address to, uint256 amount) external;\r\n\r\n    /// @dev Burn FYToken after maturity for an amount of base.\r\n    function redeem(address to, uint256 amount) external returns (uint256);\r\n\r\n    /// @dev Mint FYToken.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param to Wallet to mint the FYToken in.\r\n    /// @param FYTokenAmount Amount of FYToken to mint.\r\n    function mint(address to, uint256 FYTokenAmount) external;\r\n\r\n    /// @dev Burn FYToken.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param from Wallet to burn the FYToken from.\r\n    /// @param FYTokenAmount Amount of FYToken to burn.\r\n    function burn(address from, uint256 FYTokenAmount) external;\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IERC20Metadata.sol\r\n\r\n\r\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the oFYTokenional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IYVToken.sol\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\n\r\n//TODO: Merge with IYvToken found in vault-v2/oracles\r\ninterface IYVToken is IERC20, IERC20Metadata {\r\n    /// @dev Used to deposit underlying & get yvTokens in return\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _recipient\r\n    ) external returns (uint256);\r\n\r\n    /// @notice Returns the price for a single Yearn Vault share.\r\n    /// @dev total vault assets / total token supply (calculated not cached)\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function mint(address, uint256) external;\r\n\r\n    function token() external view returns (address);\r\n\r\n    /// @dev Used to redeem yvTokens for underlying\r\n    function withdraw(\r\n        uint256 _amount,\r\n        address _recipient\r\n    ) external returns (uint256);\r\n\r\n    /// @dev several public attributes that can be read from the token\r\n    function lastReport() external view returns (uint256);\r\n\r\n    function lockedProfit() external view returns (uint256);\r\n\r\n    function lockedProfitDegradation() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IERC4626.sol\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\n\r\ninterface IERC4626 is IERC20, IERC20Metadata {\r\n    function asset() external returns (IERC20);\r\n\r\n    function convertToAssets(uint256 shares) external view returns (uint256);\r\n\r\n    function convertToShares(uint256 assets) external view returns (uint256);\r\n\r\n    function deposit(\r\n        uint256 assets,\r\n        address receiver\r\n    ) external returns (uint256 shares);\r\n\r\n    function mint(\r\n        address receiver,\r\n        uint256 shares\r\n    ) external returns (uint256 assets);\r\n\r\n    function previewDeposit(\r\n        uint256 assets\r\n    ) external view returns (uint256 shares);\r\n\r\n    function previewRedeem(\r\n        uint256 shares\r\n    ) external view returns (uint256 assets);\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 assets);\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IERC20Like.sol\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\n\r\ninterface IERC20Like is IERC20, IERC20Metadata {\r\n    function mint(address receiver, uint256 shares) external;\r\n}\r\n\r\n// File: yield-space-pool/src/ERC/ERC20.sol\r\n\r\n\r\n// Inspired on token.sol from DappHub. Natspec adpated from OpenZeppelin.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Calls to {transferFrom} do not check for allowance if the caller is the owner\r\n * of the funds. This allows to reduce the number of approvals that are necessary.\r\n *\r\n * Finally, {transferFrom} does not decrease the allowance if it is set to\r\n * type(uint256).max. This reduces the gas costs without any likely impact.\r\n */\r\ncontract ERC20 is IERC20Metadata {\r\n    uint256 internal _totalSupply;\r\n    mapping(address => uint256) internal _balanceOf;\r\n    mapping(address => mapping(address => uint256)) internal _allowance;\r\n    string public override name = '???';\r\n    string public override symbol = '???';\r\n    uint8 public override decimals = 18;\r\n\r\n    /**\r\n     *  @dev Sets the values for {name}, {symbol} and {decimals}.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address guy\r\n    ) external view virtual override returns (uint256) {\r\n        return _balanceOf[guy];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view virtual override returns (uint256) {\r\n        return _allowance[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint wad\r\n    ) external virtual override returns (bool) {\r\n        return _setAllowance(msg.sender, spender, wad);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have a balance of at least `wad`.\r\n     */\r\n    function transfer(\r\n        address dst,\r\n        uint wad\r\n    ) external virtual override returns (bool) {\r\n        return _transfer(msg.sender, dst, wad);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `src` must have a balance of at least `wad`.\r\n     * - the caller is not `src`, it must have allowance for ``src``'s tokens of at least\r\n     * `wad`.\r\n     */\r\n    /// if_succeeds {:msg \"TransferFrom - decrease allowance\"} msg.sender != src ==> old(_allowance[src][msg.sender]) >= wad;\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint wad\r\n    ) external virtual override returns (bool) {\r\n        _decreaseAllowance(src, wad);\r\n\r\n        return _transfer(src, dst, wad);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `wad` from `src` to `dst`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `src` must have a balance of at least `amount`.\r\n     */\r\n    /// if_succeeds {:msg \"Transfer - src decrease\"} old(_balanceOf[src]) >= _balanceOf[src];\r\n    /// if_succeeds {:msg \"Transfer - dst increase\"} _balanceOf[dst] >= old(_balanceOf[dst]);\r\n    /// if_succeeds {:msg \"Transfer - supply\"} old(_balanceOf[src]) + old(_balanceOf[dst]) == _balanceOf[src] + _balanceOf[dst];\r\n    function _transfer(\r\n        address src,\r\n        address dst,\r\n        uint wad\r\n    ) internal virtual returns (bool) {\r\n        require(_balanceOf[src] >= wad, 'ERC20: Insufficient balance');\r\n        unchecked {\r\n            _balanceOf[src] = _balanceOf[src] - wad;\r\n        }\r\n        _balanceOf[dst] = _balanceOf[dst] + wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the allowance granted to `spender` by `owner`.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     */\r\n    function _setAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint wad\r\n    ) internal virtual returns (bool) {\r\n        _allowance[owner][spender] = wad;\r\n        emit Approval(owner, spender, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the allowance granted to the caller by `src`, unless src == msg.sender or _allowance[src][msg.sender] == MAX\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance, if the allowance is updated.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `wad`, unless src == msg.sender\r\n     */\r\n    /// if_succeeds {:msg \"Decrease allowance - underflow\"} old(_allowance[src][msg.sender]) <= _allowance[src][msg.sender];\r\n    function _decreaseAllowance(\r\n        address src,\r\n        uint wad\r\n    ) internal virtual returns (bool) {\r\n        if (src != msg.sender) {\r\n            uint256 allowed = _allowance[src][msg.sender];\r\n            if (allowed != type(uint).max) {\r\n                require(allowed >= wad, 'ERC20: Insufficient approval');\r\n                unchecked {\r\n                    _setAllowance(src, msg.sender, allowed - wad);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @dev Creates `wad` tokens and assigns them to `dst`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    /// if_succeeds {:msg \"Mint - balance overflow\"} old(_balanceOf[dst]) >= _balanceOf[dst];\r\n    /// if_succeeds {:msg \"Mint - supply overflow\"} old(_totalSupply) >= _totalSupply;\r\n    function _mint(address dst, uint wad) internal virtual returns (bool) {\r\n        _balanceOf[dst] = _balanceOf[dst] + wad;\r\n        _totalSupply = _totalSupply + wad;\r\n        emit Transfer(address(0), dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `wad` tokens from `src`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `src` must have at least `wad` tokens.\r\n     */\r\n    /// if_succeeds {:msg \"Burn - balance underflow\"} old(_balanceOf[src]) <= _balanceOf[src];\r\n    /// if_succeeds {:msg \"Burn - supply underflow\"} old(_totalSupply) <= _totalSupply;\r\n    function _burn(address src, uint wad) internal virtual returns (bool) {\r\n        unchecked {\r\n            require(_balanceOf[src] >= wad, 'ERC20: Insufficient balance');\r\n            _balanceOf[src] = _balanceOf[src] - wad;\r\n            _totalSupply = _totalSupply - wad;\r\n            emit Transfer(src, address(0), wad);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Interfaces/IPool.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IPool is IERC20, IERC2612 {\r\n    function baseToken() external view returns (IERC20Like);\r\n\r\n    function base() external view returns (IERC20);\r\n\r\n    function burn(\r\n        address baseTo,\r\n        address fyTokenTo,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    ) external returns (uint256, uint256, uint256);\r\n\r\n    function burnForBase(\r\n        address to,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    ) external returns (uint256, uint256);\r\n\r\n    function buyBase(\r\n        address to,\r\n        uint128 baseOut,\r\n        uint128 max\r\n    ) external returns (uint128);\r\n\r\n    function buyBasePreview(uint128 baseOut) external view returns (uint128);\r\n\r\n    function buyFYToken(\r\n        address to,\r\n        uint128 fyTokenOut,\r\n        uint128 max\r\n    ) external returns (uint128);\r\n\r\n    function buyFYTokenPreview(\r\n        uint128 fyTokenOut\r\n    ) external view returns (uint128);\r\n\r\n    function currentCumulativeRatio()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentCumulativeRatio_,\r\n            uint256 blockTimestampCurrent\r\n        );\r\n\r\n    function cumulativeRatioLast() external view returns (uint256);\r\n\r\n    function fyToken() external view returns (IMaturingToken);\r\n\r\n    function g1() external view returns (int128);\r\n\r\n    function g2() external view returns (int128);\r\n\r\n    function getC() external view returns (int128);\r\n\r\n    function getCurrentSharePrice() external view returns (uint256);\r\n\r\n    function getCache()\r\n        external\r\n        view\r\n        returns (\r\n            uint104 baseCached,\r\n            uint104 fyTokenCached,\r\n            uint32 blockTimestampLast,\r\n            uint16 g1Fee_\r\n        );\r\n\r\n    function getBaseBalance() external view returns (uint128);\r\n\r\n    function getFYTokenBalance() external view returns (uint128);\r\n\r\n    function getSharesBalance() external view returns (uint128);\r\n\r\n    function init(address to) external returns (uint256, uint256, uint256);\r\n\r\n    function maturity() external view returns (uint32);\r\n\r\n    function mint(\r\n        address to,\r\n        address remainder,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    ) external returns (uint256, uint256, uint256);\r\n\r\n    function mu() external view returns (int128);\r\n\r\n    function mintWithBase(\r\n        address to,\r\n        address remainder,\r\n        uint256 fyTokenToBuy,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    ) external returns (uint256, uint256, uint256);\r\n\r\n    function retrieveBase(address to) external returns (uint128 retrieved);\r\n\r\n    function retrieveFYToken(address to) external returns (uint128 retrieved);\r\n\r\n    function retrieveShares(address to) external returns (uint128 retrieved);\r\n\r\n    function scaleFactor() external view returns (uint96);\r\n\r\n    function sellBase(address to, uint128 min) external returns (uint128);\r\n\r\n    function sellBasePreview(uint128 baseIn) external view returns (uint128);\r\n\r\n    function sellFYToken(address to, uint128 min) external returns (uint128);\r\n\r\n    function sellFYTokenPreview(\r\n        uint128 fyTokenIn\r\n    ) external view returns (uint128);\r\n\r\n    function setFees(uint16 g1Fee_) external;\r\n\r\n    function sharesToken() external view returns (IERC20Like);\r\n\r\n    function ts() external view returns (int128);\r\n\r\n    function wrap(address receiver) external returns (uint256 shares);\r\n\r\n    function wrapPreview(uint256 assets) external view returns (uint256 shares);\r\n\r\n    function unwrap(address receiver) external returns (uint256 assets);\r\n\r\n    function unwrapPreview(\r\n        uint256 shares\r\n    ) external view returns (uint256 assets);\r\n\r\n    /// Returns the max amount of FYTokens that can be sold to the pool\r\n    function maxFYTokenIn() external view returns (uint128);\r\n\r\n    /// Returns the max amount of FYTokens that can be bought from the pool\r\n    function maxFYTokenOut() external view returns (uint128);\r\n\r\n    /// Returns the max amount of Base that can be sold to the pool\r\n    function maxBaseIn() external view returns (uint128);\r\n\r\n    /// Returns the max amount of Base that can be bought from the pool\r\n    function maxBaseOut() external view returns (uint128);\r\n\r\n    /// Returns the result of the total supply invariant function\r\n    function invariant() external view returns (uint128);\r\n\r\n    /// Sets the pool's admin\r\n    function setAdmin(address) external;\r\n\r\n    /// Returns the admin\r\n    function admin() external view returns (address);\r\n\r\n    /// Sets the pool's strategy\r\n    function setStrategy(address) external;\r\n\r\n    /// Returns the pool's strategy\r\n    function strategy() external view returns (address);\r\n\r\n    /// Pauses the pool\r\n    function pause(bool) external;\r\n\r\n    /// Returns whether the pool is paused or not\r\n    function paused() external view returns (bool);\r\n}\r\n\r\n// File: yield-space-pool/src/ERC/ERC20Permit.sol\r\n\r\n\r\n// AdaFYTokened from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to use their tokens\r\n * without sending any transactions by setting {IERC20-allowance} with a\r\n * signature using the {permit} method, and then spend them via\r\n * {IERC20-transferFrom}.\r\n *\r\n * The {permit} signature mechanism conforms to the {IERC2612} interface.\r\n */\r\nabstract contract ERC20Permit is ERC20, IERC2612 {\r\n    mapping(address => uint256) public override nonces;\r\n\r\n    bytes32 public immutable PERMIT_TYPEHASH =\r\n        keccak256(\r\n            'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\r\n        );\r\n    bytes32 private immutable _DOMAIN_SEPARATOR;\r\n    uint256 public immutable deploymentChainId;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) ERC20(name_, symbol_, decimals_) {\r\n        deploymentChainId = block.chainid;\r\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);\r\n    }\r\n\r\n    /// @dev Calculate the DOMAIN_SEPARATOR.\r\n    function _calculateDomainSeparator(\r\n        uint256 chainId\r\n    ) private view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\r\n                        'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\r\n                    ),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(bytes(version())),\r\n                    chainId,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /// @dev Return the DOMAIN_SEPARATOR.\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\r\n        return\r\n            block.chainid == deploymentChainId\r\n                ? _DOMAIN_SEPARATOR\r\n                : _calculateDomainSeparator(block.chainid);\r\n    }\r\n\r\n    /// @dev Setting the version as a function so that it can be overriden\r\n    function version() public pure virtual returns (string memory) {\r\n        return '1';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC2612-permit}.\r\n     *\r\n     * In cases where the free oFYTokenion is not a concern, deadline can simply be\r\n     * set to uint(-1), so it should be seen as an oFYTokenional parameter\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override {\r\n        require(deadline >= block.timestamp, 'ERC20Permit: expired deadline');\r\n\r\n        bytes32 hashStruct = keccak256(\r\n            abi.encode(\r\n                PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                amount,\r\n                nonces[owner]++,\r\n                deadline\r\n            )\r\n        );\r\n\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                block.chainid == deploymentChainId\r\n                    ? _DOMAIN_SEPARATOR\r\n                    : _calculateDomainSeparator(block.chainid),\r\n                hashStruct\r\n            )\r\n        );\r\n\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(\r\n            signer != address(0) && signer == owner,\r\n            'ERC20Permit: invalid signature'\r\n        );\r\n\r\n        _setAllowance(owner, spender, amount);\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/Pool.sol\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n   __     ___      _     _\r\n   \\ \\   / (_)    | |   | |  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\r\n    \\ \\_/ / _  ___| | __| |  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551        \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\r\n     \\   / | |/ _ \\ |/ _` |  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\r\n      | |  | |  __/ | (_| |  \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551        \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\r\n      |_|  |_|\\___|_|\\__,_|  \u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n       yieldprotocol.com     \u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\r\n\r\n                                                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n                                                \u2502no       \u2502\r\n                                                \u2502lifeguard\u2502\r\n                                                \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2518       ==+\r\n                    be cool, stay in pool         \u2502     \u2502    =======+\r\n                                             _____\u2502_____\u2502______    |+\r\n                                      \\  .-'\"___________________`-.|+\r\n                                        ( .'\"                   '-.)+\r\n                                        |`-..__________________..-'|+\r\n                                        |                          |+\r\n             .-:::::::::::-.            |                          |+      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n           .:::::::::::::::::.          |         ---  ---         |+      \u2502$            $\u2502\r\n          :  _______  __   __ :        .|         (o)  (o)         |+.     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\r\n         :: |       ||  | |  |::      /`|                          |+'\\    \u2502 \u2502$            $\u2502\r\n        ::: |    ___||  |_|  |:::    / /|            [             |+\\ \\   \u2502$\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\r\n        ::: |   |___ |       |:::   / / |        ----------        |+ \\ \\  \u2514\u2500\u2524 \u2502$  ERC4626   $\u2502\r\n        ::: |    ___||_     _|:::.-\" ;  \\        \\________/        /+  \\ \"--/\u2502$\u2502  Tokenized   \u2502\r\n        ::: |   |      |   |  ::),.-'    `-..__________________..-' +=  `---=\u2514\u2500\u2524 Vault Shares \u2502\r\n         :: |___|      |___|  ::=/              |    | |    |                  \u2502$            $\u2502\r\n          :       TOKEN       :                 |    | |    |                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n           `:::::::::::::::::'                  |    | |    |\r\n             `-:::::::::::-'                    +----+ +----+\r\n                `'''''''`                  _..._|____| |____| _..._\r\n                                         .` \"-. `%   | |    %` .-\" `.\r\n                                        /      \\    .: :.     /      \\\r\n                                        '-..___|_..=:` `-:=.._|___..-'\r\n*/\r\n\r\n/// A Yieldspace AMM implementation for pools which provide liquidity and trading of fyTokens vs base tokens.\r\n/// **The base tokens in this implementation are converted to ERC4626 compliant tokenized vault shares.**\r\n/// See whitepaper and derived formulas: https://hackmd.io/lRZ4mgdrRgOpxZQXqKYlFw\r\n//\r\n//  Useful terminology:\r\n//    base - Example: DAI. The underlying token of the fyToken. Sometimes referred to as \"asset\" or \"base\".\r\n//    shares - Example: yvDAI. Upon receipt, base is deposited (wrapped) in a tokenized vault.\r\n//    c - Current price of shares in terms of base (in 64.64 bit)\r\n//    mu - also called c0 is the initial c of shares at contract deployment\r\n//    Reserves are tracked in shares * mu for consistency.\r\n//\r\n/// @title  Pool.sol\r\n/// @dev    Uses ABDK 64.64 mathlib for precision and reduced gas.\r\n/// @author Adapted by @devtooligan from original work by @alcueca and UniswapV2. Maths and whitepaper by @aniemerg.\r\ncontract Pool is PoolEvents, IPool, ERC20Permit {\r\n    /* LIBRARIES\r\n     *****************************************************************************************************************/\r\n\r\n    using WDiv for uint256;\r\n    using RDiv for uint256;\r\n    using Math64x64 for int128;\r\n    using Math64x64 for uint256;\r\n    using CastU128I128 for uint128;\r\n    using CastU128U104 for uint128;\r\n    using CastU256U104 for uint256;\r\n    using CastU256U128 for uint256;\r\n    using CastU256I256 for uint256;\r\n    using TransferHelper for IMaturingToken;\r\n    using TransferHelper for IERC20Like;\r\n\r\n    /* MODIFIERS\r\n     *****************************************************************************************************************/\r\n\r\n    /// Trading can only be done before maturity.\r\n    modifier beforeMaturity() {\r\n        if (block.timestamp >= maturity) revert AfterMaturity();\r\n        _;\r\n    }\r\n\r\n    /// Allows only the authorized contract to execute the method\r\n    modifier authorized(address a) {\r\n        if (msg.sender != a) revert Unauthorized();\r\n        _;\r\n    }\r\n\r\n    /// Ensures pool is not paused before execution\r\n    modifier unpaused() {\r\n        if (paused == true) revert Paused();\r\n        _;\r\n    }\r\n\r\n    /* IMMUTABLES\r\n     *****************************************************************************************************************/\r\n\r\n    /// The fyToken for the corresponding base token. Ex. yvDAI's fyToken will be fyDAI. Even though we convert base\r\n    /// in this contract to a wrapped tokenized vault (e.g. Yearn Vault Dai), the fyToken is still payable in\r\n    /// the base token upon maturity.\r\n    IMaturingToken public immutable fyToken;\r\n\r\n    /// This pool accepts a pair of base and fyToken tokens.\r\n    /// When these are deposited into a tokenized vault they become shares.\r\n    /// It is an ERC20 token.\r\n    IERC20Like public immutable baseToken;\r\n\r\n    /// This pool is to be paired up with a strategy contract that handles its roller functionality.\r\n    address public strategy;\r\n\r\n    /// Decimals of base tokens (fyToken, lp token, and usually the sharesToken).\r\n    uint256 public immutable baseDecimals;\r\n\r\n    /// When base comes into this contract it is deposited into a 3rd party tokenized vault in return for shares.\r\n    /// @dev For most of this contract, only the ERC20 functionality of the shares token is required. As such, shares\r\n    /// are cast as \"IERC20Like\" and when that 4626 functionality is needed, they are recast as IERC4626.\r\n    /// This wei, modules for non-4626 compliant base tokens can import this contract and override 4626 specific fn's.\r\n    IERC20Like public immutable sharesToken;\r\n\r\n    /// Time stretch == 1 / seconds in x years where x varies per contract (64.64)\r\n    int128 public ts;\r\n\r\n    /// The normalization coefficient, the initial c value or price per 1 share of base (64.64)\r\n    int128 public mu;\r\n\r\n    /// Pool's maturity date (not 64.64)\r\n    uint32 public immutable maturity;\r\n\r\n    /// Used to scale up to 18 decimals (not 64.64)\r\n    uint96 public immutable scaleFactor;\r\n\r\n    /* STRUCTS\r\n     *****************************************************************************************************************/\r\n\r\n    struct Cache {\r\n        uint16 g1Fee;\r\n        uint104 sharesCached;\r\n        uint104 fyTokenCached;\r\n        uint32 blockTimestampLast;\r\n    }\r\n\r\n    /* STORAGE\r\n     *****************************************************************************************************************/\r\n\r\n    // The following 4 vars use one storage slot and can be retrieved in a Cache struct with getCache()\r\n\r\n    /// This number is used to calculate the fees for buying/selling fyTokens.\r\n    /// @dev This is a fp4 that represents a ratio out 1, where 1 is represented by 10000.\r\n    uint16 public g1Fee;\r\n\r\n    /// Shares reserves, cached.\r\n    uint104 internal sharesCached;\r\n\r\n    /// fyToken reserves, cached.\r\n    uint104 internal fyTokenCached;\r\n\r\n    /// block.timestamp of last time reserve caches were updated.\r\n    uint32 internal blockTimestampLast;\r\n\r\n    /// This is a LAGGING, time weighted sum of the fyToken:shares reserves ratio measured in ratio seconds.\r\n    /// @dev Footgun \ud83d\udd2b alert!  Be careful, this number is probably not what you need and it should normally be\r\n    /// considered with blockTimestampLast. For consumption as a TWAR observation, use currentCumulativeRatio().\r\n    /// In future pools, this function's visibility may be changed to internal.\r\n    /// @return a fixed point factor with 27 decimals (ray).\r\n    uint256 public cumulativeRatioLast;\r\n\r\n    /// Admin has access to certain setter methods\r\n    address public admin;\r\n\r\n    /// Paused flag\r\n    bool public paused;\r\n\r\n    /* CONSTRUCTOR FUNCTIONS\r\n     *****************************************************************************************************************/\r\n    constructor(\r\n        address sharesToken_, //    address of shares token\r\n        address fyToken_, //  address of fyToken\r\n        int128 ts_, //        time stretch(64.64)\r\n        uint16 g1Fee_ //      fees (in bps) when buying fyToken\r\n    )\r\n        ERC20Permit(\r\n            string(abi.encodePacked(IERC20Like(fyToken_).name(), ' LP')),\r\n            string(abi.encodePacked(IERC20Like(fyToken_).symbol(), 'LP')),\r\n            IERC20Like(fyToken_).decimals()\r\n        )\r\n    {\r\n        /*  __   __        __  ___  __        __  ___  __   __\r\n           /  ` /  \\ |\\ | /__`  |  |__) |  | /  `  |  /  \\ |__)\r\n           \\__, \\__/ | \\| .__/  |  |  \\ \\__/ \\__,  |  \\__/ |  \\ */\r\n\r\n        // Set the admin as the sender of the contract\r\n        admin = msg.sender;\r\n\r\n        // Set maturity with check to make sure its not 2107 yet.\r\n        uint256 maturity_ = IMaturingToken(fyToken_).maturity();\r\n        if (maturity_ > uint256(type(uint32).max)) revert MaturityOverflow();\r\n        maturity = uint32(maturity_);\r\n\r\n        // Set sharesToken.\r\n        sharesToken = IERC20Like(sharesToken_);\r\n\r\n        // Cache baseToken to save loads of SLOADs.\r\n        IERC20Like baseToken_ = _getBaseAsset(sharesToken_);\r\n\r\n        // Call approve hook for sharesToken.\r\n        _approveSharesToken(baseToken_, sharesToken_);\r\n\r\n        // NOTE: LP tokens, baseToken and fyToken should have the same decimals.  Within this core contract, it is\r\n        // presumed that sharesToken also has the same decimals. If this is not the case, a separate module must be\r\n        // used to overwrite _getSharesBalance() and other affected functions (see PoolEuler.sol for example).\r\n        baseDecimals = baseToken_.decimals();\r\n\r\n        // Set other immutables.\r\n        baseToken = baseToken_;\r\n        fyToken = IMaturingToken(fyToken_);\r\n        ts = ts_;\r\n        scaleFactor = uint96(10 ** (18 - uint96(baseDecimals))); // No more than 18 decimals allowed, reverts on underflow.\r\n\r\n        // Set mu with check for 0.\r\n        if ((mu = _getC()) == 0) {\r\n            revert MuCannotBeZero();\r\n        }\r\n\r\n        // Set g1Fee state variable with out of bounds check.\r\n        if ((g1Fee = g1Fee_) > 10000) revert InvalidFee(g1Fee_);\r\n        emit FeesSet(g1Fee_);\r\n    }\r\n\r\n    /// This is used by the constructor to give max approval to sharesToken.\r\n    /// @dev This should be overridden by modules if needed.\r\n    /// @dev safeAprove will revert approve is unsuccessful\r\n    function _approveSharesToken(\r\n        IERC20Like baseToken_,\r\n        address sharesToken_\r\n    ) internal virtual {\r\n        baseToken_.safeApprove(sharesToken_, type(uint256).max);\r\n    }\r\n\r\n    /// This is used by the constructor to set the base token as immutable.\r\n    /// @dev This should be overridden by modules.\r\n    /// We use the IERC20Like interface, but this should be an ERC20 asset per EIP4626.\r\n    function _getBaseAsset(\r\n        address sharesToken_\r\n    ) internal virtual returns (IERC20Like) {\r\n        return IERC20Like(address(IERC4626(sharesToken_).asset()));\r\n    }\r\n\r\n    /* LIQUIDITY FUNCTIONS\r\n\r\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n        \u2502  mint, new life. gm!                            \u2502\r\n        \u2502  buy, sell, mint more, trade, trade -- stop     \u2502\r\n        \u2502  mature, burn. gg~                              \u2502\r\n        \u2502                                                 \u2502\r\n        \u2502 \"Watashinojinsei (My Life)\" - haiku by Poolie   \u2502\r\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n     *****************************************************************************************************************/\r\n\r\n    /*mint\r\n                                                                                              v\r\n         ___                                                                           \\            /\r\n         |_ \\_/                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n         |   |                    \u2502                               \u2502                 `    _......._     '   gm!\r\n                                 \\\u2502                               \u2502/                  .-:::::::::::-.\r\n           \u2502                     \\\u2502                               \u2502/             `   :    __    ____ :   /\r\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba      \u2502            mint               \u2502                 ::   / /   / __ \\::\r\n                                  \u2502                               \u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u25b6    _   ::  / /   / /_/ /::   _\r\n           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba      \u2502                               \u2502                 :: / /___/ ____/ ::\r\n           \u2502                     /\u2502                               \u2502\\                ::/_____/_/      ::\r\n                                 /\u2502                               \u2502\\             '   :               :   `\r\n         B A S E                  \u2502                      \\(^o^)/  \u2502                   `-:::::::::::-'\r\n                                  \u2502                     Pool.sol  \u2502                 ,    `'''''''`     .\r\n                                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                                                                                       /            \\\r\n                                                                                              ^\r\n    */\r\n    /// Mint liquidity tokens in exchange for adding base and fyToken\r\n    /// The amount of liquidity tokens to mint is calculated from the amount of unaccounted for fyToken in this contract.\r\n    /// A proportional amount of asset tokens need to be present in this contract, also unaccounted for.\r\n    /// @dev _totalSupply > 0 check important here to prevent unauthorized initialization.\r\n    /// @param to Wallet receiving the minted liquidity tokens.\r\n    /// @param remainder Wallet receiving any surplus base.\r\n    /// @param minRatio Minimum ratio of shares to fyToken in the pool (fp18).\r\n    /// @param maxRatio Maximum ratio of shares to fyToken in the pool (fp18).\r\n    /// @return baseIn The amount of base found in the contract that was used for the mint.\r\n    /// @return fyTokenIn The amount of fyToken found that was used for the mint\r\n    /// @return lpTokensMinted The amount of LP tokens minted.\r\n    function mint(\r\n        address to,\r\n        address remainder,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        unpaused\r\n        returns (uint256 baseIn, uint256 fyTokenIn, uint256 lpTokensMinted)\r\n    {\r\n        if (_totalSupply == 0) revert NotInitialized();\r\n\r\n        (baseIn, fyTokenIn, lpTokensMinted) = _mint(\r\n            to,\r\n            remainder,\r\n            0,\r\n            minRatio,\r\n            maxRatio\r\n        );\r\n    }\r\n\r\n    //  \u2566\u250c\u2510\u250c\u252c\u250c\u252c\u2510\u252c\u250c\u2500\u2510\u252c  \u252c\u250c\u2500\u2510\u250c\u2500\u2510  \u2554\u2550\u2557\u250c\u2500\u2510\u250c\u2500\u2510\u252c\r\n    //  \u2551\u2502\u2502\u2502\u2502 \u2502 \u2502\u251c\u2500\u2524\u2502  \u2502\u250c\u2500\u2518\u251c\u2524   \u2560\u2550\u255d\u2502 \u2502\u2502 \u2502\u2502\r\n    //  \u2569\u2518\u2514\u2518\u2534 \u2534 \u2534\u2534 \u2534\u2534\u2500\u2518\u2534\u2514\u2500\u2518\u2514\u2500\u2518  \u2569  \u2514\u2500\u2518\u2514\u2500\u2518\u2534\u2500\u2518\r\n    /// @dev This is the exact same as mint() but with auth added and skip the supply > 0 check\r\n    /// and checks instead that supply == 0.\r\n    /// This intialize mechanism is different than UniV2.  Tokens addresses are added at contract creation.\r\n    /// This pool is considered initialized after the first LP token is minted.\r\n    /// @param to Wallet receiving the minted liquidity tokens.\r\n    /// @return baseIn The amount of base found that was used for the mint.\r\n    /// @return fyTokenIn The amount of fyToken found that was used for the mint\r\n    /// @return lpTokensMinted The amount of LP tokens minted.\r\n    function init(\r\n        address to\r\n    )\r\n        external\r\n        virtual\r\n        authorized(admin)\r\n        returns (uint256 baseIn, uint256 fyTokenIn, uint256 lpTokensMinted)\r\n    {\r\n        if (_totalSupply != 0) revert Initialized();\r\n\r\n        // address(this) used for the remainder, but actually this parameter is not used at all in this case because\r\n        // there will never be any left over base in this case\r\n        (baseIn, fyTokenIn, lpTokensMinted) = _mint(\r\n            to,\r\n            address(this),\r\n            0,\r\n            0,\r\n            type(uint256).max\r\n        );\r\n\r\n        emit gm();\r\n    }\r\n\r\n    /* mintWithBase\r\n                                                                                             V\r\n                                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \\            /\r\n                                  \u2502                               \u2502                 `    _......._     '   gm!\r\n                                 \\\u2502                               \u2502/                  .-:::::::::::-.\r\n                                 \\\u2502                               \u2502/             `   :    __    ____ :   /\r\n                                  \u2502         mintWithBase          \u2502                 ::   / /   / __ \\::\r\n         B A S E     \u2500\u2500\u2500\u2500\u2500\u2500\u25ba      \u2502                               \u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u25b6    _   ::  / /   / /_/ /::   _\r\n                                  \u2502                               \u2502                 :: / /___/ ____/ ::\r\n                                 /\u2502                               \u2502\\                ::/_____/_/      ::\r\n                                 /\u2502                               \u2502\\             '   :               :   `\r\n                                  \u2502                      \\(^o^)/  \u2502                   `-:::::::::::-'\r\n                                  \u2502                     Pool.sol  \u2502                 ,    `'''''''`     .\r\n                                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    /           \\\r\n                                                                                            ^\r\n    */\r\n    /// Mint liquidity tokens in exchange for adding only base.\r\n    /// The amount of liquidity tokens is calculated from the amount of fyToken to buy from the pool.\r\n    /// The base tokens need to be previously transferred and present in this contract.\r\n    /// @dev _totalSupply > 0 check important here to prevent minting before initialization.\r\n    /// @param to Wallet receiving the minted liquidity tokens.\r\n    /// @param remainder Wallet receiving any leftover base at the end.\r\n    /// @param fyTokenToBuy Amount of `fyToken` being bought in the Pool, from this we calculate how much base it will be taken in.\r\n    /// @param minRatio Minimum ratio of shares to fyToken in the pool (fp18).\r\n    /// @param maxRatio Maximum ratio of shares to fyToken in the pool (fp18).\r\n    /// @return baseIn The amount of base found that was used for the mint.\r\n    /// @return fyTokenIn The amount of fyToken found that was used for the mint\r\n    /// @return lpTokensMinted The amount of LP tokens minted.\r\n    function mintWithBase(\r\n        address to,\r\n        address remainder,\r\n        uint256 fyTokenToBuy,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        unpaused\r\n        returns (uint256 baseIn, uint256 fyTokenIn, uint256 lpTokensMinted)\r\n    {\r\n        if (_totalSupply == 0) revert NotInitialized();\r\n        (baseIn, fyTokenIn, lpTokensMinted) = _mint(\r\n            to,\r\n            remainder,\r\n            fyTokenToBuy,\r\n            minRatio,\r\n            maxRatio\r\n        );\r\n    }\r\n\r\n    /// This is the internal function called by the external mint functions.\r\n    /// Mint liquidity tokens, with an optional internal trade to buy fyToken beforehand.\r\n    /// The amount of liquidity tokens is calculated from the amount of fyTokenToBuy from the pool,\r\n    /// plus the amount of extra, unaccounted for fyToken in this contract.\r\n    /// The base tokens also need to be previously transferred and present in this contract.\r\n    /// Only usable before maturity.\r\n    /// @dev Warning: This fn does not check if supply > 0 like the external functions do.\r\n    /// This function overloads the ERC20._mint(address, uint) function.\r\n    /// @param to Wallet receiving the minted liquidity tokens.\r\n    /// @param remainder Wallet receiving any surplus base.\r\n    /// @param fyTokenToBuy Amount of `fyToken` being bought in the Pool.\r\n    /// @param minRatio Minimum ratio of shares to fyToken in the pool (fp18).\r\n    /// @param maxRatio Maximum ratio of shares to fyToken in the pool (fp18).\r\n    /// @return baseIn The amount of base found that was used for the mint.\r\n    /// @return fyTokenIn The amount of fyToken found that was used for the mint\r\n    /// @return lpTokensMinted The amount of LP tokens minted.\r\n    function _mint(\r\n        address to,\r\n        address remainder,\r\n        uint256 fyTokenToBuy,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    )\r\n        internal\r\n        beforeMaturity\r\n        returns (uint256 baseIn, uint256 fyTokenIn, uint256 lpTokensMinted)\r\n    {\r\n        // Wrap all base found in this contract.\r\n        baseIn = baseToken.balanceOf(address(this));\r\n\r\n        _wrap(address(this));\r\n\r\n        // Gather data\r\n        uint256 supply = _totalSupply;\r\n        Cache memory cache = _getCache();\r\n        uint256 realFYTokenCached_ = cache.fyTokenCached - supply; // The fyToken cache includes the virtual fyToken, equal to the supply\r\n        uint256 sharesBalance = _getSharesBalance();\r\n\r\n        // Check the burn wasn't sandwiched\r\n        if (realFYTokenCached_ != 0) {\r\n            if (\r\n                uint256(cache.sharesCached).wdiv(realFYTokenCached_) <\r\n                minRatio ||\r\n                uint256(cache.sharesCached).wdiv(realFYTokenCached_) > maxRatio\r\n            )\r\n                revert SlippageDuringMint(\r\n                    uint256(cache.sharesCached).wdiv(realFYTokenCached_),\r\n                    minRatio,\r\n                    maxRatio\r\n                );\r\n        } else if (maxRatio < type(uint256).max) {\r\n            revert SlippageDuringMint(type(uint256).max, minRatio, maxRatio);\r\n        }\r\n\r\n        // Calculate token amounts\r\n        uint256 sharesIn;\r\n        if (supply == 0) {\r\n            // **First mint**\r\n            // Initialize at 1 pool token\r\n            sharesIn = sharesBalance;\r\n            lpTokensMinted = _mulMu(sharesIn);\r\n        } else if (realFYTokenCached_ == 0) {\r\n            // Edge case, no fyToken in the Pool after initialization\r\n            sharesIn = sharesBalance - cache.sharesCached;\r\n            lpTokensMinted = (supply * sharesIn) / cache.sharesCached;\r\n        } else {\r\n            // There is an optional virtual trade before the mint\r\n            uint256 sharesToSell;\r\n            if (fyTokenToBuy != 0) {\r\n                sharesToSell = _buyFYTokenPreview(\r\n                    fyTokenToBuy.u128(),\r\n                    cache.sharesCached,\r\n                    cache.fyTokenCached,\r\n                    _computeG1(cache.g1Fee)\r\n                );\r\n            }\r\n\r\n            // We use all the available fyTokens, plus optional virtual trade. Surplus is in base tokens.\r\n            fyTokenIn = fyToken.balanceOf(address(this)) - realFYTokenCached_;\r\n            lpTokensMinted =\r\n                (supply * (fyTokenToBuy + fyTokenIn)) /\r\n                (realFYTokenCached_ - fyTokenToBuy);\r\n\r\n            sharesIn =\r\n                sharesToSell +\r\n                ((cache.sharesCached + sharesToSell) * lpTokensMinted) /\r\n                supply;\r\n\r\n            if ((sharesBalance - cache.sharesCached) < sharesIn) {\r\n                revert NotEnoughBaseIn(\r\n                    _unwrapPreview(sharesBalance - cache.sharesCached),\r\n                    _unwrapPreview(sharesIn)\r\n                );\r\n            }\r\n        }\r\n\r\n        // Update TWAR\r\n        _update(\r\n            (cache.sharesCached + sharesIn).u128(),\r\n            (cache.fyTokenCached + fyTokenIn + lpTokensMinted).u128(), // Include \"virtual\" fyToken from new minted LP tokens\r\n            cache.sharesCached,\r\n            cache.fyTokenCached\r\n        );\r\n\r\n        // Execute mint\r\n        _mint(to, lpTokensMinted);\r\n\r\n        // Return any unused base tokens\r\n        if (sharesBalance > cache.sharesCached + sharesIn) _unwrap(remainder);\r\n\r\n        // confirm new virtual fyToken balance is not less than new supply\r\n        if (\r\n            (cache.fyTokenCached + fyTokenIn + lpTokensMinted) <\r\n            supply + lpTokensMinted\r\n        ) {\r\n            revert FYTokenCachedBadState();\r\n        }\r\n\r\n        emit Liquidity(\r\n            maturity,\r\n            msg.sender,\r\n            to,\r\n            address(0),\r\n            -(baseIn.i256()),\r\n            -(fyTokenIn.i256()),\r\n            lpTokensMinted.i256()\r\n        );\r\n    }\r\n\r\n    /* burn\r\n                        (   (\r\n                        )    (\r\n                   (  (|   (|  )\r\n                )   )\\/ ( \\/(( (    gg            ___\r\n                ((  /     ))\\))))\\      \u250c~~~~~~\u25ba  |_ \\_/\r\n                 )\\(          |  )      \u2502         |   |\r\n                /:  | __    ____/:      \u2502\r\n                ::   / /   / __ \\::  \u2500\u2500\u2500\u2524\r\n                ::  / /   / /_/ /::     \u2502\r\n                :: / /___/ ____/ ::     \u2514~~~~~~\u25ba  B A S E\r\n                ::/_____/_/      ::\r\n                 :               :\r\n                  `-:::::::::::-'\r\n                     `'''''''`\r\n    */\r\n    /// Burn liquidity tokens in exchange for base and fyToken.\r\n    /// The liquidity tokens need to be previously tranfsferred to this contract.\r\n    /// @param baseTo Wallet receiving the base tokens.\r\n    /// @param fyTokenTo Wallet receiving the fyTokens.\r\n    /// @param minRatio Minimum ratio of shares to fyToken in the pool (fp18).\r\n    /// @param maxRatio Maximum ratio of shares to fyToken in the pool (fp18).\r\n    /// @return lpTokensBurned The amount of LP tokens burned.\r\n    /// @return baseOut The amount of base tokens received.\r\n    /// @return fyTokenOut The amount of fyTokens received.\r\n    function burn(\r\n        address baseTo,\r\n        address fyTokenTo,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        unpaused\r\n        returns (uint256 lpTokensBurned, uint256 baseOut, uint256 fyTokenOut)\r\n    {\r\n        (lpTokensBurned, baseOut, fyTokenOut) = _burn(\r\n            baseTo,\r\n            fyTokenTo,\r\n            false,\r\n            minRatio,\r\n            maxRatio\r\n        );\r\n    }\r\n\r\n    /* burnForBase\r\n\r\n                        (   (\r\n                        )    (\r\n                    (  (|   (|  )\r\n                 )   )\\/ ( \\/(( (    gg\r\n                 ((  /     ))\\))))\\\r\n                  )\\(          |  )\r\n                /:  | __    ____/:\r\n                ::   / /   / __ \\::   ~~~~~~~\u25ba   B A S E\r\n                ::  / /   / /_/ /::\r\n                :: / /___/ ____/ ::\r\n                ::/_____/_/      ::\r\n                 :               :\r\n                  `-:::::::::::-'\r\n                     `'''''''`\r\n    */\r\n    /// Burn liquidity tokens in exchange for base.\r\n    /// The liquidity provider needs to have called `pool.approve`.\r\n    /// Only usable before maturity.\r\n    /// @param to Wallet receiving the base and fyToken.\r\n    /// @param minRatio Minimum ratio of shares to fyToken in the pool (fp18).\r\n    /// @param maxRatio Maximum ratio of shares to fyToken in the pool (fp18).\r\n    /// @return lpTokensBurned The amount of lp tokens burned.\r\n    /// @return baseOut The amount of base tokens returned.\r\n    function burnForBase(\r\n        address to,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        unpaused\r\n        beforeMaturity\r\n        returns (uint256 lpTokensBurned, uint256 baseOut)\r\n    {\r\n        (lpTokensBurned, baseOut, ) = _burn(\r\n            to,\r\n            address(0),\r\n            true,\r\n            minRatio,\r\n            maxRatio\r\n        );\r\n    }\r\n\r\n    /// Burn liquidity tokens in exchange for base.\r\n    /// The liquidity provider needs to have called `pool.approve`.\r\n    /// @dev This function overloads the ERC20._burn(address, uint) function.\r\n    /// @param baseTo Wallet receiving the base.\r\n    /// @param fyTokenTo Wallet receiving the fyToken.\r\n    /// @param tradeToBase Whether the resulting fyToken should be traded for base tokens.\r\n    /// @param minRatio Minimum ratio of shares to fyToken in the pool (fp18).\r\n    /// @param maxRatio Maximum ratio of shares to fyToken in the pool (fp18).\r\n    /// @return lpTokensBurned The amount of pool tokens burned.\r\n    /// @return baseOut The amount of base tokens returned.\r\n    /// @return fyTokenOut The amount of fyTokens returned.\r\n    function _burn(\r\n        address baseTo,\r\n        address fyTokenTo,\r\n        bool tradeToBase,\r\n        uint256 minRatio,\r\n        uint256 maxRatio\r\n    )\r\n        internal\r\n        returns (uint256 lpTokensBurned, uint256 baseOut, uint256 fyTokenOut)\r\n    {\r\n        // Gather data\r\n        lpTokensBurned = _balanceOf[address(this)];\r\n        uint256 supply = _totalSupply;\r\n\r\n        Cache memory cache = _getCache();\r\n        uint96 scaleFactor_ = scaleFactor;\r\n\r\n        // The fyToken cache includes the virtual fyToken, equal to the supply.\r\n        uint256 realFYTokenCached_ = cache.fyTokenCached - supply;\r\n\r\n        // Check the burn wasn't sandwiched\r\n        if (realFYTokenCached_ != 0) {\r\n            if (\r\n                (uint256(cache.sharesCached).wdiv(realFYTokenCached_) <\r\n                    minRatio) ||\r\n                (uint256(cache.sharesCached).wdiv(realFYTokenCached_) >\r\n                    maxRatio)\r\n            ) {\r\n                revert SlippageDuringBurn(\r\n                    uint256(cache.sharesCached).wdiv(realFYTokenCached_),\r\n                    minRatio,\r\n                    maxRatio\r\n                );\r\n            }\r\n        }\r\n\r\n        // Calculate trade\r\n        uint256 sharesOut = (lpTokensBurned * cache.sharesCached) / supply;\r\n        fyTokenOut = (lpTokensBurned * realFYTokenCached_) / supply;\r\n\r\n        if (tradeToBase) {\r\n            sharesOut +=\r\n                YieldMath.sharesOutForFYTokenIn( //                                 This is a virtual sell\r\n                    (cache.sharesCached - sharesOut.u128()) * scaleFactor_, //     Cache, minus virtual burn\r\n                    (cache.fyTokenCached - fyTokenOut.u128()) * scaleFactor_, //  Cache, minus virtual burn\r\n                    fyTokenOut.u128() * scaleFactor_, //                          Sell the virtual fyToken obtained\r\n                    maturity - uint32(block.timestamp), //                         This can't be called after maturity\r\n                    ts,\r\n                    _computeG2(cache.g1Fee),\r\n                    _getC(),\r\n                    mu\r\n                ) /\r\n                scaleFactor_;\r\n            fyTokenOut = 0;\r\n        }\r\n\r\n        // Update TWAR\r\n        _update(\r\n            (cache.sharesCached - sharesOut).u128(),\r\n            (cache.fyTokenCached - fyTokenOut - lpTokensBurned).u128(), // Exclude \"virtual\" fyToken from new minted LP tokens\r\n            cache.sharesCached,\r\n            cache.fyTokenCached\r\n        );\r\n\r\n        // Burn and transfer\r\n        _burn(address(this), lpTokensBurned); // This is calling the actual ERC20 _burn.\r\n        baseOut = _unwrap(baseTo);\r\n\r\n        if (fyTokenOut != 0) fyToken.safeTransfer(fyTokenTo, fyTokenOut);\r\n\r\n        // confirm new virtual fyToken balance is not less than new supply\r\n        if (\r\n            (cache.fyTokenCached - fyTokenOut - lpTokensBurned) <\r\n            supply - lpTokensBurned\r\n        ) {\r\n            revert FYTokenCachedBadState();\r\n        }\r\n\r\n        emit Liquidity(\r\n            maturity,\r\n            msg.sender,\r\n            baseTo,\r\n            fyTokenTo,\r\n            baseOut.i256(),\r\n            fyTokenOut.i256(),\r\n            -(lpTokensBurned.i256())\r\n        );\r\n\r\n        if (supply == lpTokensBurned && block.timestamp >= maturity) {\r\n            emit gg();\r\n        }\r\n    }\r\n\r\n    /* TRADING FUNCTIONS\r\n     ****************************************************************************************************************/\r\n\r\n    /* buyBase\r\n\r\n                         I want to buy `uint128 baseOut` worth of base tokens.\r\n             _______     I've transferred you some fyTokens -- that should be enough.\r\n            /   GUY \\         .:::::::::::::::::.\r\n     (^^^|   \\===========    :  _______  __   __ :                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n      \\(\\/    | _  _ |      :: |       ||  | |  |::                \u2502no       \u2502\r\n       \\ \\   (. o  o |     ::: |    ___||  |_|  |:::               \u2502lifeguard\u2502\r\n        \\ \\   |   ~  |     ::: |   |___ |       |:::               \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2518       ==+\r\n        \\  \\   \\ == /      ::: |    ___||_     _|::      ok guy      \u2502     \u2502    =======+\r\n         \\  \\___|  |___    ::: |   |      |   |  :::            _____\u2502_____\u2502______    |+\r\n          \\ /   \\__/   \\    :: |___|      |___|  ::         .-'\"___________________`-.|+\r\n           \\            \\    :                   :         ( .'\"                   '-.)+\r\n            --|  GUY |\\_/\\  / `:::::::::::::::::'          |`-..__________________..-'|+\r\n              |      | \\  \\/ /  `-:::::::::::-'            |                          |+\r\n              |      |  \\   /      `'''''''`               |                          |+\r\n              |      |   \\_/                               |       ---     ---        |+\r\n              |______|                                     |       (o )    (o )       |+\r\n              |__GG__|             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      /`|                          |+\r\n              |      |             \u2502$            $\u2502     / /|            [             |+\r\n              |  |   |             \u2502   B A S E    \u2502    / / |        ----------        |+\r\n              |  |  _|             \u2502   baseOut    \u2502\\.-\" ;  \\        \\________/        /+\r\n              |  |  |              \u2502$            $\u2502),.-'    `-..__________________..-' +=\r\n              |  |  |              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                |    | |    |\r\n              (  (  |                                              |    | |    |\r\n              |  |  |                                              |    | |    |\r\n              |  |  |                                              T----T T----T\r\n             _|  |  |                                         _..._L____J L____J _..._\r\n            (_____[__)                                      .` \"-. `%   | |    %` .-\" `.\r\n                                                           /      \\    .: :.     /      \\\r\n                                                           '-..___|_..=:` `-:=.._|___..-'\r\n    */\r\n    /// Buy base with fyToken.\r\n    /// The trader needs to have transferred in the necessary amount of fyTokens in advance.\r\n    /// @param to Wallet receiving the base being bought.\r\n    /// @param baseOut Amount of base being bought that will be deposited in `to` wallet.\r\n    /// @dev The final parameter has been deprecated and was left in for backwards compatibility.\r\n    /// @return fyTokenIn Amount of fyToken that will be taken from caller.\r\n    function buyBase(\r\n        address to,\r\n        uint128 baseOut,\r\n        uint128\r\n    ) external virtual override unpaused returns (uint128 fyTokenIn) {\r\n        // Calculate trade and cache values\r\n        uint128 fyTokenBalance = _getFYTokenBalance();\r\n        Cache memory cache = _getCache();\r\n\r\n        uint128 sharesOut = _wrapPreview(baseOut).u128();\r\n        fyTokenIn = _buyBasePreview(\r\n            sharesOut,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG2(cache.g1Fee)\r\n        );\r\n\r\n        // Checks\r\n        if (fyTokenBalance - cache.fyTokenCached < fyTokenIn) {\r\n            revert NotEnoughFYTokenIn(\r\n                fyTokenBalance - cache.fyTokenCached,\r\n                fyTokenIn\r\n            );\r\n        }\r\n\r\n        // Update TWAR\r\n        _update(\r\n            cache.sharesCached - sharesOut,\r\n            cache.fyTokenCached + fyTokenIn,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached\r\n        );\r\n\r\n        // Transfer\r\n        _unwrap(to);\r\n\r\n        emit Trade(\r\n            maturity,\r\n            msg.sender,\r\n            to,\r\n            baseOut.i128(),\r\n            -(fyTokenIn.i128())\r\n        );\r\n    }\r\n\r\n    /// Returns how much fyToken would be required to buy `baseOut` base.\r\n    /// @dev Note: This fn takes baseOut as a param while the internal fn takes sharesOut.\r\n    /// @param baseOut Amount of base hypothetically desired.\r\n    /// @return fyTokenIn Amount of fyToken hypothetically required.\r\n    function buyBasePreview(\r\n        uint128 baseOut\r\n    ) external view virtual override returns (uint128 fyTokenIn) {\r\n        Cache memory cache = _getCache();\r\n        fyTokenIn = _buyBasePreview(\r\n            _wrapPreview(baseOut).u128(),\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG2(cache.g1Fee)\r\n        );\r\n    }\r\n\r\n    /// Returns how much fyToken would be required to buy `sharesOut`.\r\n    /// @dev Note: This fn takes sharesOut as a param while the external fn takes baseOut.\r\n    function _buyBasePreview(\r\n        uint128 sharesOut,\r\n        uint104 sharesBalance,\r\n        uint104 fyTokenBalance,\r\n        int128 g2_\r\n    ) internal view beforeMaturity returns (uint128 fyTokenIn) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n        fyTokenIn =\r\n            YieldMath.fyTokenInForSharesOut(\r\n                sharesBalance * scaleFactor_,\r\n                fyTokenBalance * scaleFactor_,\r\n                sharesOut * scaleFactor_,\r\n                maturity - uint32(block.timestamp), // This can't be called after maturity\r\n                ts,\r\n                g2_,\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n    }\r\n\r\n    /*buyFYToken\r\n\r\n                         I want to buy `uint128 fyTokenOut` worth of fyTokens.\r\n             _______     I've transferred you some base tokens -- that should be enough.\r\n            /   GUY \\                                                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n     (^^^|   \\===========  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                           \u2502no       \u2502\r\n      \\(\\/    | _  _ |     \u2502$            $\u2502                           \u2502lifeguard\u2502\r\n       \\ \\   (. o  o |     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510                         \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2518       ==+\r\n        \\ \\   |   ~  |     \u2502 \u2502$            $\u2502   hmm, let's see here     \u2502     \u2502    =======+\r\n        \\  \\   \\ == /      \u2502 \u2502   B A S E    \u2502                      _____\u2502_____\u2502______    |+\r\n         \\  \\___|  |___    \u2502$\u2502              \u2502                  .-'\"___________________`-.|+\r\n          \\ /   \\__/   \\   \u2514\u2500\u2524$            $\u2502                 ( .'\"                   '-.)+\r\n           \\            \\    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 |`-..__________________..-'|+\r\n            --|  GUY |\\_/\\  / /                               |                          |+\r\n              |      | \\  \\/ /                                |                          |+\r\n              |      |  \\   /         _......._             /`|       ---     ---        |+\r\n              |      |   \\_/       .-:::::::::::-.         / /|       (o )    (o )       |+\r\n              |______|           .:::::::::::::::::.      / / |                          |+\r\n              |__GG__|          :  _______  __   __ : _.-\" ;  |            [             |+\r\n              |      |         :: |       ||  | |  |::),.-'   |        ----------        |+\r\n              |  |   |        ::: |    ___||  |_|  |:::/      \\        \\________/        /+\r\n              |  |  _|        ::: |   |___ |       |:::        `-..__________________..-' +=\r\n              |  |  |         ::: |    ___||_     _|:::               |    | |    |\r\n              |  |  |         ::: |   |      |   |  :::               |    | |    |\r\n              (  (  |          :: |___|      |___|  ::                |    | |    |\r\n              |  |  |           :     fyTokenOut    :                 T----T T----T\r\n              |  |  |            `:::::::::::::::::'             _..._L____J L____J _..._\r\n             _|  |  |              `-:::::::::::-'             .` \"-. `%   | |    %` .-\" `.\r\n            (_____[__)                `'''''''`               /      \\    .: :.     /      \\\r\n                                                              '-..___|_..=:` `-:=.._|___..-'\r\n    */\r\n    /// Buy fyToken with base.\r\n    /// The trader needs to have transferred in the correct amount of base tokens in advance.\r\n    /// @param to Wallet receiving the fyToken being bought.\r\n    /// @param fyTokenOut Amount of fyToken being bought that will be deposited in `to` wallet.\r\n    /// @dev The final parameter has been deprecated and was left in for backwards compatibility.\r\n    /// @return baseIn Amount of base that will be used.\r\n    function buyFYToken(\r\n        address to,\r\n        uint128 fyTokenOut,\r\n        uint128\r\n    ) external virtual override unpaused returns (uint128 baseIn) {\r\n        // Wrap any base assets found in contract.\r\n        _wrap(address(this));\r\n\r\n        // Calculate trade\r\n        uint128 sharesBalance = _getSharesBalance();\r\n        Cache memory cache = _getCache();\r\n        uint128 sharesIn = _buyFYTokenPreview(\r\n            fyTokenOut,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG1(cache.g1Fee)\r\n        );\r\n        baseIn = _unwrapPreview(sharesIn).u128();\r\n\r\n        // Checks\r\n        if (sharesBalance - cache.sharesCached < sharesIn)\r\n            revert NotEnoughBaseIn(\r\n                _unwrapPreview(sharesBalance - cache.sharesCached),\r\n                baseIn\r\n            );\r\n\r\n        // Update TWAR\r\n        _update(\r\n            cache.sharesCached + sharesIn,\r\n            cache.fyTokenCached - fyTokenOut,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached\r\n        );\r\n\r\n        // Transfer\r\n        fyToken.safeTransfer(to, fyTokenOut);\r\n\r\n        // confirm new virtual fyToken balance is not less than new supply\r\n        if ((cache.fyTokenCached - fyTokenOut) < _totalSupply) {\r\n            revert FYTokenCachedBadState();\r\n        }\r\n\r\n        emit Trade(\r\n            maturity,\r\n            msg.sender,\r\n            to,\r\n            -(baseIn.i128()),\r\n            fyTokenOut.i128()\r\n        );\r\n    }\r\n\r\n    /// Returns how much base would be required to buy `fyTokenOut`.\r\n    /// @param fyTokenOut Amount of fyToken hypothetically desired.\r\n    /// @dev Note: This returns an amount in base.  The internal fn returns amount of shares.\r\n    /// @return baseIn Amount of base hypothetically required.\r\n    function buyFYTokenPreview(\r\n        uint128 fyTokenOut\r\n    ) external view virtual override returns (uint128 baseIn) {\r\n        Cache memory cache = _getCache();\r\n        uint128 sharesIn = _buyFYTokenPreview(\r\n            fyTokenOut,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG1(cache.g1Fee)\r\n        );\r\n\r\n        baseIn = _unwrapPreview(sharesIn).u128();\r\n    }\r\n\r\n    /// Returns how many shares are required to buy `fyTokenOut` fyTokens.\r\n    /// @dev Note: This returns an amount in shares.  The external fn returns amount of base.\r\n    function _buyFYTokenPreview(\r\n        uint128 fyTokenOut,\r\n        uint128 sharesBalance,\r\n        uint128 fyTokenBalance,\r\n        int128 g1_\r\n    ) internal view beforeMaturity returns (uint128 sharesIn) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n\r\n        sharesIn =\r\n            YieldMath.sharesInForFYTokenOut(\r\n                sharesBalance * scaleFactor_,\r\n                fyTokenBalance * scaleFactor_,\r\n                fyTokenOut * scaleFactor_,\r\n                maturity - uint32(block.timestamp), // This can't be called after maturity\r\n                ts,\r\n                g1_,\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n\r\n        uint128 newSharesMulMu = _mulMu(sharesBalance + sharesIn).u128();\r\n        if ((fyTokenBalance - fyTokenOut) < newSharesMulMu) {\r\n            revert NegativeInterestRatesNotAllowed(\r\n                fyTokenBalance - fyTokenOut,\r\n                newSharesMulMu\r\n            );\r\n        }\r\n    }\r\n\r\n    /* sellBase\r\n\r\n                         I've transfered you some base tokens.\r\n             _______     Can you swap them for fyTokens?\r\n            /   GUY \\                                                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n     (^^^|   \\===========  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                           \u2502no       \u2502\r\n      \\(\\/    | _  _ |     \u2502$            $\u2502                           \u2502lifeguard\u2502\r\n       \\ \\   (. o  o |     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510                         \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2518       ==+\r\n        \\ \\   |   ~  |     \u2502 \u2502$            $\u2502             can           \u2502     \u2502    =======+\r\n        \\  \\   \\ == /      \u2502 \u2502              \u2502                      _____\u2502_____\u2502______    |+\r\n         \\  \\___|  |___    \u2502$\u2502    baseIn    \u2502                  .-'\"___________________`-.|+\r\n          \\ /   \\__/   \\   \u2514\u2500\u2524$            $\u2502                 ( .'\"                   '-.)+\r\n           \\            \\   ( \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 |`-..__________________..-'|+\r\n            --|  GUY |\\_/\\  / /                               |                          |+\r\n              |      | \\  \\/ /                                |                          |+\r\n              |      |  \\   /         _......._             /`|       ---     ---        |+\r\n              |      |   \\_/       .-:::::::::::-.         / /|       (o )    (o )       |+\r\n              |______|           .:::::::::::::::::.      / / |                          |+\r\n              |__GG__|          :  _______  __   __ : _.-\" ;  |            [             |+\r\n              |      |         :: |       ||  | |  |::),.-'   |        ----------        |+\r\n              |  |   |        ::: |    ___||  |_|  |:::/      \\        \\________/        /+\r\n              |  |  _|        ::: |   |___ |       |:::        `-..__________________..-' +=\r\n              |  |  |         ::: |    ___||_     _|:::               |    | |    |\r\n              |  |  |         ::: |   |      |   |  :::               |    | |    |\r\n              (  (  |          :: |___|      |___|  ::                |    | |    |\r\n              |  |  |           :      ????         :                 T----T T----T\r\n              |  |  |            `:::::::::::::::::'             _..._L____J L____J _..._\r\n             _|  |  |              `-:::::::::::-'             .` \"-. `%   | |    %` .-\" `.\r\n            (_____[__)                `'''''''`               /      \\    .: :.     /      \\\r\n                                                              '-..___|_..=:` `-:=.._|___..-'\r\n    */\r\n    /// Sell base for fyToken.\r\n    /// The trader needs to have transferred the amount of base to sell to the pool before calling this fn.\r\n    /// @param to Wallet receiving the fyToken being bought.\r\n    /// @param min Minimum accepted amount of fyToken.\r\n    /// @return fyTokenOut Amount of fyToken that will be deposited on `to` wallet.\r\n    function sellBase(\r\n        address to,\r\n        uint128 min\r\n    ) external virtual override unpaused returns (uint128 fyTokenOut) {\r\n        // Wrap any base assets found in contract.\r\n        _wrap(address(this));\r\n\r\n        // Calculate trade\r\n        Cache memory cache = _getCache();\r\n        uint104 sharesBalance = _getSharesBalance();\r\n        uint128 sharesIn = sharesBalance - cache.sharesCached;\r\n        fyTokenOut = _sellBasePreview(\r\n            sharesIn,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG1(cache.g1Fee)\r\n        );\r\n\r\n        // Check slippage\r\n        if (fyTokenOut < min) revert SlippageDuringSellBase(fyTokenOut, min);\r\n\r\n        // Update TWAR\r\n        _update(\r\n            sharesBalance,\r\n            cache.fyTokenCached - fyTokenOut,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached\r\n        );\r\n\r\n        // Transfer\r\n        fyToken.safeTransfer(to, fyTokenOut);\r\n\r\n        // confirm new virtual fyToken balance is not less than new supply\r\n        if ((cache.fyTokenCached - fyTokenOut) < _totalSupply) {\r\n            revert FYTokenCachedBadState();\r\n        }\r\n\r\n        emit Trade(\r\n            maturity,\r\n            msg.sender,\r\n            to,\r\n            -(_unwrapPreview(sharesIn).u128().i128()),\r\n            fyTokenOut.i128()\r\n        );\r\n    }\r\n\r\n    /// Returns how much fyToken would be obtained by selling `baseIn`.\r\n    /// @dev Note: This external fn takes baseIn while the internal fn takes sharesIn.\r\n    /// @param baseIn Amount of base hypothetically sold.\r\n    /// @return fyTokenOut Amount of fyToken hypothetically bought.\r\n    function sellBasePreview(\r\n        uint128 baseIn\r\n    ) external view virtual override returns (uint128 fyTokenOut) {\r\n        Cache memory cache = _getCache();\r\n        fyTokenOut = _sellBasePreview(\r\n            _wrapPreview(baseIn).u128(),\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG1(cache.g1Fee)\r\n        );\r\n    }\r\n\r\n    /// Returns how much fyToken would be obtained by selling `sharesIn`.\r\n    /// @dev Note: This internal fn takes sharesIn while the external fn takes baseIn.\r\n    function _sellBasePreview(\r\n        uint128 sharesIn,\r\n        uint104 sharesBalance,\r\n        uint104 fyTokenBalance,\r\n        int128 g1_\r\n    ) internal view beforeMaturity returns (uint128 fyTokenOut) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n        fyTokenOut =\r\n            YieldMath.fyTokenOutForSharesIn(\r\n                sharesBalance * scaleFactor_,\r\n                fyTokenBalance * scaleFactor_,\r\n                sharesIn * scaleFactor_,\r\n                maturity - uint32(block.timestamp), // This can't be called after maturity\r\n                ts,\r\n                g1_,\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n\r\n        uint128 newSharesMulMu = _mulMu(sharesBalance + sharesIn).u128();\r\n        if ((fyTokenBalance - fyTokenOut) < newSharesMulMu) {\r\n            revert NegativeInterestRatesNotAllowed(\r\n                fyTokenBalance - fyTokenOut,\r\n                newSharesMulMu\r\n            );\r\n        }\r\n    }\r\n\r\n    /*sellFYToken\r\n                         I've transferred you some fyTokens.\r\n             _______     Can you swap them for base?\r\n            /   GUY \\         .:::::::::::::::::.\r\n     (^^^|   \\===========    :  _______  __   __ :                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n      \\(\\/    | _  _ |      :: |       ||  | |  |::                \u2502no       \u2502\r\n       \\ \\   (. o  o |     ::: |    ___||  |_|  |:::               \u2502lifeguard\u2502\r\n        \\ \\   |   ~  |     ::: |   |___ |       |:::               \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2518       ==+\r\n        \\  \\   \\ == /      ::: |    ___||_     _|:::     lfg         \u2502     \u2502    =======+\r\n         \\  \\___|  |___    ::: |   |      |   |  :::            _____\u2502_____\u2502______    |+\r\n          \\ /   \\__/   \\    :: |___|      |___|  ::         .-'\"___________________`-.|+\r\n           \\            \\    :      fyTokenIn    :         ( .'\"                   '-.)+\r\n            --|  GUY |\\_/\\  / `:::::::::::::::::'          |`-..__________________..-'|+\r\n              |      | \\  \\/ /  `-:::::::::::-'            |                          |+\r\n              |      |  \\   /      `'''''''`               |                          |+\r\n              |      |   \\_/                               |       ---     ---        |+\r\n              |______|                                     |       (o )    (o )       |+\r\n              |__GG__|             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      /`|                          |+\r\n              |      |             \u2502$            $\u2502     / /|            [             |+\r\n              |  |   |             \u2502   B A S E    \u2502    / / |        ----------        |+\r\n              |  |  _|             \u2502    ????      \u2502\\.-\" ;  \\        \\________/        /+\r\n              |  |  |              \u2502$            $\u2502),.-'    `-..__________________..-' +=\r\n              |  |  |              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                |    | |    |\r\n              (  (  |                                              |    | |    |\r\n              |  |  |                                              |    | |    |\r\n              |  |  |                                              T----T T----T\r\n             _|  |  |                                         _..._L____J L____J _..._\r\n            (_____[__)                                      .` \"-. `%   | |    %` .-\" `.\r\n                                                           /      \\    .: :.     /      \\\r\n                                                           '-..___|_..=:` `-:=.._|___..-'\r\n    */\r\n    /// Sell fyToken for base.\r\n    /// The trader needs to have transferred the amount of fyToken to sell to the pool before in the same transaction.\r\n    /// @param to Wallet receiving the base being bought.\r\n    /// @param min Minimum accepted amount of base.\r\n    /// @return baseOut Amount of base that will be deposited on `to` wallet.\r\n    function sellFYToken(\r\n        address to,\r\n        uint128 min\r\n    ) external virtual override unpaused returns (uint128 baseOut) {\r\n        // Calculate trade\r\n        Cache memory cache = _getCache();\r\n        uint104 fyTokenBalance = _getFYTokenBalance();\r\n        uint128 fyTokenIn = fyTokenBalance - cache.fyTokenCached;\r\n        uint128 sharesOut = _sellFYTokenPreview(\r\n            fyTokenIn,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG2(cache.g1Fee)\r\n        );\r\n\r\n        // Update TWAR\r\n        _update(\r\n            cache.sharesCached - sharesOut,\r\n            fyTokenBalance,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached\r\n        );\r\n\r\n        // Transfer\r\n        baseOut = _unwrap(to).u128();\r\n\r\n        // Check slippage\r\n        if (baseOut < min) revert SlippageDuringSellFYToken(baseOut, min);\r\n\r\n        emit Trade(\r\n            maturity,\r\n            msg.sender,\r\n            to,\r\n            baseOut.i128(),\r\n            -(fyTokenIn.i128())\r\n        );\r\n    }\r\n\r\n    /// Returns how much base would be obtained by selling `fyTokenIn` fyToken.\r\n    /// @dev Note: This external fn returns baseOut while the internal fn returns sharesOut.\r\n    /// @param fyTokenIn Amount of fyToken hypothetically sold.\r\n    /// @return baseOut Amount of base hypothetically bought.\r\n    function sellFYTokenPreview(\r\n        uint128 fyTokenIn\r\n    ) public view virtual returns (uint128 baseOut) {\r\n        Cache memory cache = _getCache();\r\n        uint128 sharesOut = _sellFYTokenPreview(\r\n            fyTokenIn,\r\n            cache.sharesCached,\r\n            cache.fyTokenCached,\r\n            _computeG2(cache.g1Fee)\r\n        );\r\n        baseOut = _unwrapPreview(sharesOut).u128();\r\n    }\r\n\r\n    /// Returns how much base would be obtained by selling `fyTokenIn` fyToken.\r\n    /// An alternate version of the preview method which allows manual shares and fyToken input\r\n    /// @dev Note: This external fn returns baseOut while the internal fn returns sharesOut.\r\n    /// @param fyTokenIn Amount of fyToken hypothetically sold.\r\n    /// @param shares The amount of shares held by the pool\r\n    /// @param fyTokens The amount of fyTokens (including virtual) held by the pool\r\n    /// @return baseOut Amount of base hypothetically bought.\r\n    function sellFYTokenPreview(\r\n        uint128 fyTokenIn,\r\n        uint128 shares,\r\n        uint128 fyTokens\r\n    ) public view virtual returns (uint128 baseOut) {\r\n        uint128 sharesOut = _sellFYTokenPreview(\r\n            fyTokenIn,\r\n            uint104(shares),\r\n            uint104(fyTokens),\r\n            _computeG2(g1Fee)\r\n        );\r\n        baseOut = _unwrapPreview(sharesOut).u128();\r\n    }\r\n\r\n    /// Returns how much shares would be obtained by selling `fyTokenIn` fyToken.\r\n    /// @dev Note: This internal fn returns sharesOut while the external fn returns baseOut.\r\n    function _sellFYTokenPreview(\r\n        uint128 fyTokenIn,\r\n        uint104 sharesBalance,\r\n        uint104 fyTokenBalance,\r\n        int128 g2_\r\n    ) internal view beforeMaturity returns (uint128 sharesOut) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n\r\n        sharesOut =\r\n            YieldMath.sharesOutForFYTokenIn(\r\n                sharesBalance * scaleFactor_,\r\n                fyTokenBalance * scaleFactor_,\r\n                fyTokenIn * scaleFactor_,\r\n                maturity - uint32(block.timestamp), // This can't be called after maturity\r\n                ts,\r\n                g2_,\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n    }\r\n\r\n    /* LIQUIDITY FUNCTIONS\r\n     ****************************************************************************************************************/\r\n\r\n    /// @inheritdoc IPool\r\n    function maxFYTokenIn() public view override returns (uint128 fyTokenIn) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n        Cache memory cache = _getCache();\r\n        fyTokenIn =\r\n            YieldMath.maxFYTokenIn(\r\n                cache.sharesCached * scaleFactor_,\r\n                cache.fyTokenCached * scaleFactor_,\r\n                maturity - uint32(block.timestamp), // This can't be called after maturity\r\n                ts,\r\n                _computeG2(cache.g1Fee),\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function maxFYTokenOut() public view override returns (uint128 fyTokenOut) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n        Cache memory cache = _getCache();\r\n        fyTokenOut =\r\n            YieldMath.maxFYTokenOut(\r\n                cache.sharesCached * scaleFactor_,\r\n                cache.fyTokenCached * scaleFactor_,\r\n                maturity - uint32(block.timestamp), // This can't be called after maturity\r\n                ts,\r\n                _computeG1(cache.g1Fee),\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function maxBaseIn() public view override returns (uint128 baseIn) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n        Cache memory cache = _getCache();\r\n        uint128 sharesIn = ((YieldMath.maxSharesIn(\r\n            cache.sharesCached * scaleFactor_,\r\n            cache.fyTokenCached * scaleFactor_,\r\n            maturity - uint32(block.timestamp), // This can't be called after maturity\r\n            ts,\r\n            _computeG1(cache.g1Fee),\r\n            _getC(),\r\n            mu\r\n        ) / 1e8) * 1e8) / scaleFactor_; // Shave 8 wei/decimals to deal with precision issues on the decimal functions\r\n\r\n        baseIn = _unwrapPreview(sharesIn).u128();\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function maxBaseOut() public view override returns (uint128 baseOut) {\r\n        uint128 sharesOut = _getCache().sharesCached;\r\n        baseOut = _unwrapPreview(sharesOut).u128();\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function invariant() public view override returns (uint128 result) {\r\n        uint96 scaleFactor_ = scaleFactor;\r\n        Cache memory cache = _getCache();\r\n        result =\r\n            YieldMath.invariant(\r\n                cache.sharesCached * scaleFactor_,\r\n                cache.fyTokenCached * scaleFactor_,\r\n                _totalSupply * scaleFactor_,\r\n                maturity - uint32(block.timestamp),\r\n                ts,\r\n                _computeG2(cache.g1Fee),\r\n                _getC(),\r\n                mu\r\n            ) /\r\n            scaleFactor_;\r\n    }\r\n\r\n    /* WRAPPING FUNCTIONS\r\n     ****************************************************************************************************************/\r\n\r\n    /// Wraps any base asset tokens found in the contract, converting them to base tokenized vault shares.\r\n    /// @dev This is provided as a convenience and uses the 4626 deposit method.\r\n    /// @param receiver The address to which the wrapped tokens will be sent.\r\n    /// @return shares The amount of wrapped tokens sent to the receiver.\r\n    function wrap(address receiver) external returns (uint256 shares) {\r\n        shares = _wrap(receiver);\r\n    }\r\n\r\n    /// Internal function for wrapping base tokens whichwraps the entire balance of base found in this contract.\r\n    /// @dev This should be overridden by modules.\r\n    /// @param receiver The address the wrapped tokens should be sent.\r\n    /// @return shares The amount of wrapped tokens that are sent to the receiver.\r\n    function _wrap(address receiver) internal virtual returns (uint256 shares) {\r\n        uint256 assets = baseToken.balanceOf(address(this));\r\n        if (assets == 0) {\r\n            shares = 0;\r\n        } else {\r\n            shares = IERC4626(address(sharesToken)).deposit(assets, receiver);\r\n        }\r\n    }\r\n\r\n    /// Preview how many shares will be received when depositing a given amount of base.\r\n    /// @dev This should be overridden by modules.\r\n    /// @param assets The amount of base tokens to preview the deposit.\r\n    /// @return shares The amount of shares that would be returned from depositing.\r\n    function wrapPreview(\r\n        uint256 assets\r\n    ) external view returns (uint256 shares) {\r\n        shares = _wrapPreview(assets);\r\n    }\r\n\r\n    /// Internal function to preview how many shares will be received when depositing a given amount of assets.\r\n    /// @param assets The amount of base tokens to preview the deposit.\r\n    /// @return shares The amount of shares that would be returned from depositing.\r\n    function _wrapPreview(\r\n        uint256 assets\r\n    ) internal view virtual returns (uint256 shares) {\r\n        if (assets == 0) {\r\n            shares = 0;\r\n        } else {\r\n            shares = IERC4626(address(sharesToken)).previewDeposit(assets);\r\n        }\r\n    }\r\n\r\n    /// Unwraps base shares found unaccounted for in this contract, converting them to the base assets.\r\n    /// @dev This is provided as a convenience and uses the 4626 redeem method.\r\n    /// @param receiver The address to which the assets will be sent.\r\n    /// @return assets The amount of asset tokens sent to the receiver.\r\n    function unwrap(address receiver) external returns (uint256 assets) {\r\n        assets = _unwrap(receiver);\r\n    }\r\n\r\n    /// Internal function for unwrapping unaccounted for base in this contract.\r\n    /// @dev This should be overridden by modules.\r\n    /// @param receiver The address the wrapped tokens should be sent.\r\n    /// @return assets The amount of base assets sent to the receiver.\r\n    function _unwrap(\r\n        address receiver\r\n    ) internal virtual returns (uint256 assets) {\r\n        uint256 surplus = _getSharesBalance() - sharesCached;\r\n        if (surplus == 0) {\r\n            assets = 0;\r\n        } else {\r\n            // The third param of the 4626 redeem fn, `owner`, is always this contract address.\r\n            assets = IERC4626(address(sharesToken)).redeem(\r\n                surplus,\r\n                receiver,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    /// Preview how many asset tokens will be received when unwrapping a given amount of shares.\r\n    /// @param shares The amount of shares to preview a redemption.\r\n    /// @return assets The amount of base tokens that would be returned from redeeming.\r\n    function unwrapPreview(\r\n        uint256 shares\r\n    ) external view returns (uint256 assets) {\r\n        assets = _unwrapPreview(shares);\r\n    }\r\n\r\n    /// Internal function to preview how base asset tokens will be received when unwrapping a given amount of shares.\r\n    /// @dev This should be overridden by modules.\r\n    /// @param shares The amount of shares to preview a redemption.\r\n    /// @return assets The amount of base tokens that would be returned from redeeming.\r\n    function _unwrapPreview(\r\n        uint256 shares\r\n    ) internal view virtual returns (uint256 assets) {\r\n        if (shares == 0) {\r\n            assets = 0;\r\n        } else {\r\n            assets = IERC4626(address(sharesToken)).previewRedeem(shares);\r\n        }\r\n    }\r\n\r\n    /* BALANCES MANAGEMENT AND ADMINISTRATIVE FUNCTIONS\r\n       Note: The sync() function has been discontinued and removed.\r\n     *****************************************************************************************************************/\r\n    /*\r\n                  _____________________________________\r\n                   |o o o o o o o o o o o o o o o o o|\r\n                   |o o o o o o o o o o o o o o o o o|\r\n                   ||_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_||\r\n                   || | | | | | | | | | | | | | | | ||\r\n                   |o o o o o o o o o o o o o o o o o|\r\n                   |o o o o o o o o o o o o o o o o o|\r\n                   |o o o o o o o o o o o o o o o o o|\r\n                   |o o o o o o o o o o o o o o o o o|\r\n                  _|o_o_o_o_o_o_o_o_o_o_o_o_o_o_o_o_o|_\r\n                          \"Poolie's Abacus\" - ejm */\r\n\r\n    /// Calculates cumulative ratio as of current timestamp.  Can be consumed for TWAR observations.\r\n    /// @dev See UniV2 implmentation: https://tinyurl.com/UniV2currentCumulativePrice\r\n    /// @return currentCumulativeRatio_ is the cumulative ratio up to the current timestamp as ray.\r\n    /// @return blockTimestampCurrent is the current block timestamp that the currentCumulativeRatio was computed with.\r\n    function currentCumulativeRatio()\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 currentCumulativeRatio_, uint256 blockTimestampCurrent)\r\n    {\r\n        blockTimestampCurrent = block.timestamp;\r\n        uint256 timeElapsed;\r\n        unchecked {\r\n            timeElapsed = blockTimestampCurrent - blockTimestampLast;\r\n        }\r\n\r\n        // Multiply by 1e27 here so that r = t * y/x is a fixed point factor with 27 decimals\r\n        currentCumulativeRatio_ =\r\n            cumulativeRatioLast +\r\n            (fyTokenCached * timeElapsed).rdiv(_mulMu(sharesCached));\r\n    }\r\n\r\n    /// Update cached values and, on the first call per block, update cumulativeRatioLast.\r\n    /// cumulativeRatioLast is a LAGGING, time weighted sum of the reserves ratio which is updated as follows:\r\n    ///\r\n    ///   cumulativeRatioLast += old fyTokenReserves / old baseReserves * seconds elapsed since blockTimestampLast\r\n    ///\r\n    /// NOTE: baseReserves is calculated as mu * sharesReserves\r\n    ///\r\n    /// Example:\r\n    ///   First mint creates a ratio of 1:1.\r\n    ///   300 seconds later a trade occurs:\r\n    ///     - cumulativeRatioLast is updated: 0 + 1/1 * 300 == 300\r\n    ///     - sharesCached and fyTokenCached are updated with the new reserves amounts.\r\n    ///     - This causes the ratio to skew to 1.1 / 1.\r\n    ///   200 seconds later another trade occurs:\r\n    ///     - NOTE: During this 200 seconds, cumulativeRatioLast == 300, which represents the \"last\" updated amount.\r\n    ///     - cumulativeRatioLast is updated: 300 + 1.1 / 1 * 200 == 520\r\n    ///     - sharesCached and fyTokenCached updated accordingly...etc.\r\n    ///\r\n    /// @dev See UniV2 implmentation: https://tinyurl.com/UniV2UpdateCumulativePrice\r\n    function _update(\r\n        uint128 sharesBalance,\r\n        uint128 fyBalance,\r\n        uint104 sharesCached_,\r\n        uint104 fyTokenCached_\r\n    ) internal {\r\n        // No need to update and spend gas on SSTORE if reserves haven't changed.\r\n        if (sharesBalance == sharesCached_ && fyBalance == fyTokenCached_)\r\n            return;\r\n\r\n        uint32 blockTimestamp = uint32(block.timestamp);\r\n        uint256 timeElapsed = blockTimestamp - blockTimestampLast; // reverts on underflow\r\n\r\n        uint256 oldCumulativeRatioLast = cumulativeRatioLast;\r\n        uint256 newCumulativeRatioLast = oldCumulativeRatioLast;\r\n        if (timeElapsed > 0 && fyTokenCached_ > 0 && sharesCached_ > 0) {\r\n            // Multiply by 1e27 here so that r = t * y/x is a fixed point factor with 27 decimals\r\n            newCumulativeRatioLast += (fyTokenCached_ * timeElapsed).rdiv(\r\n                _mulMu(sharesCached_)\r\n            );\r\n        }\r\n\r\n        blockTimestampLast = blockTimestamp;\r\n        cumulativeRatioLast = newCumulativeRatioLast;\r\n\r\n        // Update the reserves caches\r\n        uint104 newSharesCached = sharesBalance.u104();\r\n        uint104 newFYTokenCached = fyBalance.u104();\r\n\r\n        sharesCached = newSharesCached;\r\n        fyTokenCached = newFYTokenCached;\r\n\r\n        emit Sync(newSharesCached, newFYTokenCached, newCumulativeRatioLast);\r\n    }\r\n\r\n    /// Exposes the 64.64 factor used for determining fees.\r\n    /// A value of 1 (in 64.64) means no fees.  g1 < 1 because it is used when selling base shares to the pool.\r\n    /// @dev Converts state var cache.g1Fee(fp4) to a 64bit divided by 10,000\r\n    /// Useful for external contracts that need to perform calculations related to pool.\r\n    /// @return a 64bit factor used for applying fees when buying fyToken/selling base.\r\n    function g1() external view returns (int128) {\r\n        Cache memory cache = _getCache();\r\n        return _computeG1(cache.g1Fee);\r\n    }\r\n\r\n    /// Returns the ratio of net proceeds after fees, for buying fyToken\r\n    function _computeG1(uint16 g1Fee_) internal pure returns (int128) {\r\n        return uint256(g1Fee_).divu(10000);\r\n    }\r\n\r\n    /// Exposes the 64.64 factor used for determining fees.\r\n    /// A value of 1 means no fees.  g2 > 1 because it is used when selling fyToken to the pool.\r\n    /// @dev Calculated by dividing 10,000 by state var cache.g1Fee(fp4) and converting to 64bit.\r\n    /// Useful for external contracts that need to perform calculations related to pool.\r\n    /// @return a 64bit factor used for applying fees when selling fyToken/buying base.\r\n    function g2() external view returns (int128) {\r\n        Cache memory cache = _getCache();\r\n        return _computeG2(cache.g1Fee);\r\n    }\r\n\r\n    /// Returns the ratio of net proceeds after fees, for selling fyToken\r\n    function _computeG2(uint16 g1Fee_) internal pure returns (int128) {\r\n        // Divide 1 (64.64) by g1\r\n        return uint256(10000).divu(g1Fee_);\r\n    }\r\n\r\n    /// Returns the shares balance with the same decimals as the underlying base asset.\r\n    /// @dev NOTE: If the decimals of the share token does not match the base token, then the amount of shares returned\r\n    /// will be adjusted to match the decimals of the base token.\r\n    /// @return The current balance of the pool's shares tokens as uint128 for consistency with other functions.\r\n    function getSharesBalance() external view returns (uint128) {\r\n        return _getSharesBalance();\r\n    }\r\n\r\n    /// Returns the shares balance\r\n    /// @dev NOTE: The decimals returned here must match the decimals of the base token.  If not, then this fn should\r\n    // be overriden by modules.\r\n    function _getSharesBalance() internal view virtual returns (uint104) {\r\n        return sharesToken.balanceOf(address(this)).u104();\r\n    }\r\n\r\n    /// Returns the base balance.\r\n    /// @dev Returns uint128 for backwards compatibility\r\n    /// @return The current balance of the pool's base tokens.\r\n    function getBaseBalance() external view returns (uint128) {\r\n        return _getBaseBalance().u128();\r\n    }\r\n\r\n    /// Returns the base balance\r\n    function _getBaseBalance() internal view virtual returns (uint256) {\r\n        return\r\n            (_getSharesBalance() * _getCurrentSharePrice()) /\r\n            10 ** baseDecimals;\r\n    }\r\n\r\n    /// Returns the base token current price.\r\n    /// @return The price of 1 share of a tokenized vault token in terms of its base cast as uint256.\r\n    function getCurrentSharePrice() external view returns (uint256) {\r\n        return _getCurrentSharePrice();\r\n    }\r\n\r\n    /// Returns the base token current price.\r\n    /// @dev This assumes the shares, base, and lp tokens all use the same decimals.\r\n    /// This function should be overriden by modules.\r\n    /// @return The price of 1 share of a tokenized vault token in terms of its base asset cast as uint256.\r\n    function _getCurrentSharePrice() internal view virtual returns (uint256) {\r\n        uint256 scalar = 10 ** baseDecimals;\r\n        return IERC4626(address(sharesToken)).convertToAssets(scalar);\r\n    }\r\n\r\n    /// Returns current price of 1 share in 64bit.\r\n    /// Useful for external contracts that need to perform calculations related to pool.\r\n    /// @return The current price (as determined by the token) scalled to 18 digits and converted to 64.64.\r\n    function getC() external view returns (int128) {\r\n        return _getC();\r\n    }\r\n\r\n    /// Returns the c based on the current price\r\n    function _getC() internal view returns (int128) {\r\n        return (_getCurrentSharePrice() * scaleFactor).divu(1e18);\r\n    }\r\n\r\n    /// Returns the all storage vars except for cumulativeRatioLast\r\n    /// @return Cached shares token balance.\r\n    /// @return Cached virtual FY token balance which is the actual balance plus the pool token supply.\r\n    /// @return Timestamp that balances were last cached.\r\n    /// @return g1Fee  This is a fp4 number where 10_000 is 1.\r\n    function getCache()\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint104, uint104, uint32, uint16)\r\n    {\r\n        return (sharesCached, fyTokenCached, blockTimestampLast, g1Fee);\r\n    }\r\n\r\n    /// Returns the all storage vars except for cumulativeRatioLast\r\n    /// @dev This returns the same info as external getCache but uses a struct to help with stack too deep.\r\n    /// @return cache A struct containing:\r\n    /// g1Fee a fp4 number where 10_000 is 1.\r\n    /// Cached base token balance.\r\n    /// Cached virtual FY token balance which is the actual balance plus the pool token supply.\r\n    /// Timestamp that balances were last cached.\r\n\r\n    function _getCache() internal view virtual returns (Cache memory cache) {\r\n        cache = Cache(g1Fee, sharesCached, fyTokenCached, blockTimestampLast);\r\n    }\r\n\r\n    /// The \"virtual\" fyToken balance, which is the actual balance plus the pool token supply.\r\n    /// @dev For more explanation about using the LP tokens as part of the virtual reserves see:\r\n    /// https://hackmd.io/lRZ4mgdrRgOpxZQXqKYlFw\r\n    /// Returns uint128 for backwards compatibility\r\n    /// @return The current balance of the pool's fyTokens plus the current balance of the pool's\r\n    /// total supply of LP tokens as a uint104\r\n    function getFYTokenBalance()\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint128)\r\n    {\r\n        return _getFYTokenBalance();\r\n    }\r\n\r\n    /// Returns the \"virtual\" fyToken balance, which is the real balance plus the pool token supply.\r\n    function _getFYTokenBalance() internal view returns (uint104) {\r\n        return (fyToken.balanceOf(address(this)) + _totalSupply).u104();\r\n    }\r\n\r\n    /// Returns mu multipled by given amount.\r\n    /// @param amount Amount as standard fp number.\r\n    /// @return product Return standard fp number retaining decimals of provided amount.\r\n    function _mulMu(uint256 amount) internal view returns (uint256 product) {\r\n        product = mu.mulu(amount);\r\n    }\r\n\r\n    /// Retrieve any shares tokens not accounted for in the cache.\r\n    /// @param to Address of the recipient of the shares tokens.\r\n    /// @return retrieved The amount of shares tokens sent.\r\n    function retrieveShares(\r\n        address to\r\n    ) external virtual override returns (uint128 retrieved) {\r\n        retrieved = _getSharesBalance() - sharesCached; // Cache can never be above balances\r\n        sharesToken.safeTransfer(to, retrieved);\r\n    }\r\n\r\n    /// Retrieve all base tokens found in this contract.\r\n    /// @param to Address of the recipient of the base tokens.\r\n    /// @return retrieved The amount of base tokens sent.\r\n    function retrieveBase(\r\n        address to\r\n    ) external virtual override returns (uint128 retrieved) {\r\n        // This and most other pools do not keep any baseTokens, so retrieve everything.\r\n        // Note: For PoolNonTv, baseToken == sharesToken so must override this fn.\r\n        retrieved = baseToken.balanceOf(address(this)).u128();\r\n        baseToken.safeTransfer(to, retrieved);\r\n    }\r\n\r\n    /// Retrieve any fyTokens not accounted for in the cache.\r\n    /// @param to Address of the recipient of the fyTokens.\r\n    /// @return retrieved The amount of fyTokens sent.\r\n    function retrieveFYToken(\r\n        address to\r\n    ) external virtual override returns (uint128 retrieved) {\r\n        // related: https://twitter.com/transmissions11/status/1505994136389754880?s=20&t=1H6gvzl7DJLBxXqnhTuOVw\r\n        retrieved = _getFYTokenBalance() - fyTokenCached; // Cache can never be above balances\r\n        fyToken.safeTransfer(to, retrieved);\r\n        // Now the balances match the cache, so no need to update the TWAR\r\n    }\r\n\r\n    /// Sets g1 as an fp4, g1 <= 1.0\r\n    /// @dev These numbers are converted to 64.64 and used to calculate g1 by dividing them, or g2 from 1/g1\r\n    function setFees(uint16 g1Fee_) external authorized(admin) {\r\n        if (g1Fee_ > 10000) {\r\n            revert InvalidFee(g1Fee_);\r\n        }\r\n        g1Fee = g1Fee_;\r\n        emit FeesSet(g1Fee_);\r\n    }\r\n\r\n    /// Allows the admin to transfer ownership of the contract\r\n    function setAdmin(address a) external authorized(admin) {\r\n        admin = a;\r\n    }\r\n\r\n    /// Allows the admin to set the strategy of the pool\r\n    function setStrategy(address s) external authorized(admin) {\r\n        strategy = s;\r\n        emit SetStrategy(s);\r\n    }\r\n\r\n    /// Allows the admin to pause or unpause the pool\r\n    /// @param b True if paused, False if unpaused\r\n    function pause(bool b) external authorized(admin) {\r\n        paused = b;\r\n        emit PausePool(b);\r\n    }\r\n\r\n    /// Returns baseToken.\r\n    /// @dev This has been deprecated and may be removed in future pools.\r\n    /// @return baseToken The base token for this pool.  The base of the shares and the fyToken.\r\n    function base() external view returns (IERC20) {\r\n        // Returns IERC20 instead of IERC20Like (IERC20Metadata) for backwards compatability.\r\n        return IERC20(address(baseToken));\r\n    }\r\n}\r\n\r\n// File: yield-space-pool/src/PoolYearnVault.sol\r\n\r\n\r\npragma solidity >=0.8.16;\r\n\r\n\r\n\r\n/*\r\n\r\n  __     ___      _     _\r\n  \\ \\   / (_)    | |   | |\r\n   \\ \\_/ / _  ___| | __| |\r\n    \\   / | |/ _ \\ |/ _` |\r\n     | |  | |  __/ | (_| |\r\n     |_|  |_|\\___|_|\\__,_|\r\n       yieldprotocol.com\r\n\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\r\n  \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551    \u255a\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\r\n  \u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\r\n  \u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u255d  \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d.SOL\r\n\r\n*/\r\n\r\n/// Module for using non-4626 compliant Yearn Vault tokens as base for the Yield Protocol Pool.sol AMM contract.\r\n/// For example, Yearn Vault Dai: https://etherscan.io/address/0xC2cB1040220768554cf699b0d863A3cd4324ce32#readContract\r\n/// @dev Since Yearn Vault tokens are not currently ERC4626 compliant, this contract inherits the Yield Pool\r\n/// contract and overwrites the functions that are unique to Yearn Vaults.  For example getBaseCurrentPrice() function\r\n/// calls the pricePerShare() function.  There is also logic to wrap/unwrap (deposit/redeem) Yearn Vault Tokens.\r\n/// @title  PoolYearnVault.sol\r\n/// @dev Deploy pool with Yearn Vault token and associated fyToken.\r\n/// @author @devtooligan\r\ncontract PoolYearnVault is Pool {\r\n    using TransferHelper for IERC20Like;\r\n\r\n    constructor(\r\n        address sharesToken_,\r\n        address fyToken_,\r\n        int128 ts_,\r\n        uint16 g1Fee_\r\n    ) Pool(sharesToken_, fyToken_, ts_, g1Fee_) {}\r\n\r\n    /// This is used by the constructor to set the base token as immutable.\r\n    function _getBaseAsset(\r\n        address sharesToken_\r\n    ) internal virtual override returns (IERC20Like) {\r\n        return IERC20Like(address(IYVToken(sharesToken_).token()));\r\n    }\r\n\r\n    /// Returns the current price of one share.\r\n    /// This function should be overriden by modules.\r\n    /// @return The price of 1 share of a Yearn vault token in terms of its underlying base.\r\n    function _getCurrentSharePrice()\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return IYVToken(address(sharesToken)).pricePerShare();\r\n    }\r\n\r\n    /// Internal function for wrapping base tokens.\r\n    /// @param receiver The address the wrapped tokens should be sent.\r\n    /// @return shares The amount of wrapped tokens that are sent to the receiver.\r\n    function _wrap(\r\n        address receiver\r\n    ) internal virtual override returns (uint256 shares) {\r\n        uint256 baseOut = baseToken.balanceOf(address(this));\r\n        if (baseOut == 0) return 0;\r\n        shares = IYVToken(address(sharesToken)).deposit(baseOut, receiver);\r\n    }\r\n\r\n    /// Internal function to preview how many shares will be received when depositing a given amount of base.\r\n    /// @param base_ The amount of base tokens to preview the deposit.\r\n    /// @return shares The amount of shares that would be returned from depositing.\r\n    function _wrapPreview(\r\n        uint256 base_\r\n    ) internal view virtual override returns (uint256 shares) {\r\n        IYVToken yvToken = IYVToken(address(sharesToken));\r\n        uint256 DEGRADATION_COEFFICIENT = 10 ** 18;\r\n        uint256 freeFunds = yvToken.totalAssets();\r\n        uint256 lockedProfit = yvToken.lockedProfit();\r\n\r\n        if (lockedProfit > 0) {\r\n            uint256 lockedFundsRatio = (block.timestamp -\r\n                yvToken.lastReport()) * yvToken.lockedProfitDegradation();\r\n\r\n            if (lockedFundsRatio < DEGRADATION_COEFFICIENT) {\r\n                freeFunds -=\r\n                    lockedProfit -\r\n                    ((lockedFundsRatio * lockedProfit) /\r\n                        DEGRADATION_COEFFICIENT);\r\n            }\r\n        }\r\n\r\n        shares = (base_ * yvToken.totalSupply()) / freeFunds;\r\n    }\r\n\r\n    /// Internal function for unwrapping unaccounted for base in this contract.\r\n    /// @param receiver The address the wrapped tokens should be sent.\r\n    /// @return base_ The amount of base base sent to the receiver.\r\n    function _unwrap(\r\n        address receiver\r\n    ) internal virtual override returns (uint256 base_) {\r\n        uint256 surplus = _getSharesBalance() - sharesCached;\r\n        if (surplus == 0) return 0;\r\n        base_ = IYVToken(address(sharesToken)).withdraw(surplus, receiver);\r\n    }\r\n\r\n    /// Internal function to preview how many base tokens will be received when unwrapping a given amount of shares.\r\n    /// @param shares The amount of shares to preview a redemption.\r\n    /// @return base_ The amount of base tokens that would be returned from redeeming.\r\n    function _unwrapPreview(\r\n        uint256 shares\r\n    ) internal view virtual override returns (uint256 base_) {\r\n        base_ = (shares * _getCurrentSharePrice()) / 10 ** baseDecimals;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sharesOut\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"fyTokenInForSharesOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sharesIn\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"fyTokenOutForSharesIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"invariant\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"result\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"maxFYTokenIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fyTokenIn\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"maxFYTokenOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fyTokenOut\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"maxSharesIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesIn\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenOut\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"sharesInForFYTokenOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"sharesReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenIn\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"mu\",\"type\":\"int128\"}],\"name\":\"sharesOutForFYTokenIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "YieldMath", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1024e9a10b20006618ecc9f0d53bb33dfed36dfcb1f272b830c5ca085a819ace"}