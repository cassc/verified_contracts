{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n// Four different types of calldata packing\\n// 1. encodeFeeCollector: append 20 byte feeCollector address\\n// 2. encodeRelayContext: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee\\n// 3. encodeFeeCollectorERC2771: append 20 byte feeCollector address, 20 byte _msgSender address\\n// 4. encodeRelayContextERC2771: append 20 byte feeCollector address, 20 byte feeToken address, 32 byte uint256 fee, 20 byte _msgSender address\\n\\nfunction _encodeFeeCollector(bytes calldata _data, address _feeCollector)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _feeCollector);\\n}\\n\\nfunction _encodeRelayContext(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee);\\n}\\n\\n// ERC2771 Encodings\\n\\n// vanilla ERC2771 context encoding\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _encodeERC2771Context(bytes calldata _data, address _msgSender)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodePacked(_data, _msgSender);\\n}\\n\\nfunction _encodeFeeCollectorERC2771(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _msgSender\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _msgSender);\\n}\\n\\nfunction _encodeRelayContextERC2771(\\n    bytes calldata _data,\\n    address _feeCollector,\\n    address _feeToken,\\n    uint256 _fee,\\n    address _msgSender\\n) pure returns (bytes memory) {\\n    return abi.encodePacked(_data, _feeCollector, _feeToken, _fee, _msgSender);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/constants/Tokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/facets/ExecWithSigsFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {BFacetOwner} from \\\"../facets/base/BFacetOwner.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/diamond/standard/LibDiamond.sol\\\";\\nimport {GelatoBytes} from \\\"../libraries/GelatoBytes.sol\\\";\\nimport {ExecWithSigsBase} from \\\"./base/ExecWithSigsBase.sol\\\";\\nimport {GelatoCallUtils} from \\\"../libraries/GelatoCallUtils.sol\\\";\\nimport {\\n    _getBalance,\\n    _simulateAndRevert,\\n    _revert,\\n    _revertWithFee,\\n    _revertWithFeeAndIsFeeCollector\\n} from \\\"../functions/Utils.sol\\\";\\nimport {\\n    ExecWithSigs,\\n    ExecWithSigsTrackFee,\\n    ExecWithSigsFeeCollector,\\n    ExecWithSigsRelayContext,\\n    Message,\\n    MessageTrackFee,\\n    MessageFeeCollector,\\n    MessageRelayContext\\n} from \\\"../types/CallTypes.sol\\\";\\nimport {_isCheckerSigner} from \\\"./storage/SignerStorage.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {\\n    _encodeRelayContext,\\n    _encodeFeeCollector\\n} from \\\"@gelatonetwork/relay-context/contracts/functions/GelatoRelayUtils.sol\\\";\\n\\ncontract ExecWithSigsFacet is ExecWithSigsBase, BFacetOwner {\\n    using GelatoCallUtils for address;\\n    using LibDiamond for address;\\n\\n    //solhint-disable-next-line const-name-snakecase\\n    string public constant name = \\\"ExecWithSigsFacet\\\";\\n    //solhint-disable-next-line const-name-snakecase\\n    string public constant version = \\\"1\\\";\\n\\n    address public immutable feeCollector;\\n\\n    event LogExecWithSigsTrackFee(\\n        bytes32 correlationId,\\n        MessageTrackFee msg,\\n        address indexed executorSigner,\\n        address indexed checkerSigner,\\n        uint256 observedFee,\\n        uint256 estimatedGasUsed,\\n        address sender\\n    );\\n\\n    event LogExecWithSigs(\\n        bytes32 correlationId,\\n        Message msg,\\n        address indexed executorSigner,\\n        address indexed checkerSigner,\\n        uint256 estimatedGasUsed,\\n        address sender\\n    );\\n\\n    event LogExecWithSigsFeeCollector(\\n        bytes32 correlationId,\\n        MessageFeeCollector msg,\\n        address indexed executorSigner,\\n        address indexed checkerSigner,\\n        uint256 observedFee,\\n        uint256 estimatedGasUsed,\\n        address sender\\n    );\\n\\n    event LogExecWithSigsRelayContext(\\n        bytes32 correlationId,\\n        MessageRelayContext msg,\\n        address indexed executorSigner,\\n        address indexed checkerSigner,\\n        uint256 observedFee,\\n        uint256 estimatedGasUsed,\\n        address sender\\n    );\\n\\n    constructor(address _feeCollector) {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    // solhint-disable function-max-lines\\n    /// @param _call Execution payload packed into ExecWithSigsTrackFee struct\\n    /// @return estimatedGasUsed Estimated gas used using gas metering\\n    /// @return observedFee The fee transferred to the fee collector or diamond\\n    function execWithSigsTrackFee(\\n        ExecWithSigsTrackFee calldata _call\\n    ) external returns (uint256 estimatedGasUsed, uint256 observedFee) {\\n        uint256 startGas = gasleft();\\n\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"ExecWithSigsFacet.execWithSigsTrackFee: only EOAs\\\"\\n        );\\n\\n        _requireSignerDeadline(\\n            _call.msg.deadline,\\n            \\\"ExecWithSigsFacet.execWithSigsTrackFee._requireSignerDeadline:\\\"\\n        );\\n\\n        bytes32 digest = _getDigestTrackFee(_getDomainSeparator(), _call.msg);\\n\\n        address executorSigner = _requireExecutorSignerSignature(\\n            digest,\\n            _call.executorSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigsTrackFee._requireExecutorSignerSignature:\\\"\\n        );\\n\\n        address checkerSigner = _requireCheckerSignerSignature(\\n            digest,\\n            _call.checkerSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigsTrackFee._requireCheckerSignerSignature:\\\"\\n        );\\n\\n        address feeRecipient = _call.msg.isFeeCollector\\n            ? feeCollector\\n            : address(this);\\n\\n        {\\n            uint256 preFeeTokenBalance = _getBalance(\\n                _call.msg.feeToken,\\n                feeRecipient\\n            );\\n\\n            // call forward\\n            _call.msg.service.revertingContractCall(\\n                _call.msg.data,\\n                \\\"ExecWithSigsFacet.execWithSigsTrackFee:\\\"\\n            );\\n\\n            uint256 postFeeTokenBalance = _getBalance(\\n                _call.msg.feeToken,\\n                feeRecipient\\n            );\\n\\n            observedFee = postFeeTokenBalance - preFeeTokenBalance;\\n        }\\n\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        emit LogExecWithSigsTrackFee(\\n            _call.correlationId,\\n            _call.msg,\\n            executorSigner,\\n            checkerSigner,\\n            observedFee,\\n            estimatedGasUsed,\\n            msg.sender\\n        );\\n    }\\n\\n    // solhint-disable function-max-lines\\n    /// @param _call Execution payload packed into ExecWithSigs struct\\n    /// @return estimatedGasUsed Estimated gas used using gas metering\\n    function execWithSigs(\\n        ExecWithSigs calldata _call\\n    ) external returns (uint256 estimatedGasUsed) {\\n        uint256 startGas = gasleft();\\n\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"ExecWithSigsFacet.execWithSigs: only EOAs\\\"\\n        );\\n\\n        _requireSignerDeadline(\\n            _call.msg.deadline,\\n            \\\"ExecWithSigsFacet.execWithSigs._requireSignerDeadline:\\\"\\n        );\\n\\n        bytes32 digest = _getDigest(_getDomainSeparator(), _call.msg);\\n\\n        address executorSigner = _requireExecutorSignerSignature(\\n            digest,\\n            _call.executorSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigs._requireExecutorSignerSignature:\\\"\\n        );\\n\\n        address checkerSigner = _requireCheckerSignerSignature(\\n            digest,\\n            _call.checkerSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigs._requireCheckerSignerSignature:\\\"\\n        );\\n\\n        // call forward\\n        _call.msg.service.revertingContractCall(\\n            _call.msg.data,\\n            \\\"ExecWithSigsFacet.execWithSigs:\\\"\\n        );\\n\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        emit LogExecWithSigs(\\n            _call.correlationId,\\n            _call.msg,\\n            executorSigner,\\n            checkerSigner,\\n            estimatedGasUsed,\\n            msg.sender\\n        );\\n    }\\n\\n    // solhint-disable function-max-lines\\n    /// @param _call Execution payload packed into ExecWithSigsFeeCollector struct\\n    /// @return estimatedGasUsed Estimated gas used using gas metering\\n    /// @return observedFee The fee transferred to the fee collector\\n    function execWithSigsFeeCollector(\\n        ExecWithSigsFeeCollector calldata _call\\n    ) external returns (uint256 estimatedGasUsed, uint256 observedFee) {\\n        uint256 startGas = gasleft();\\n\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"ExecWithSigsFacet.execWithSigsFeeCollector: only EOAs\\\"\\n        );\\n\\n        _requireSignerDeadline(\\n            _call.msg.deadline,\\n            \\\"ExecWithSigsFacet.execWithSigsFeeCollector._requireSignerDeadline:\\\"\\n        );\\n\\n        bytes32 digest = _getDigestFeeCollector(\\n            _getDomainSeparator(),\\n            _call.msg\\n        );\\n\\n        address executorSigner = _requireExecutorSignerSignature(\\n            digest,\\n            _call.executorSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigsFeeCollector._requireExecutorSignerSignature:\\\"\\n        );\\n\\n        address checkerSigner = _requireCheckerSignerSignature(\\n            digest,\\n            _call.checkerSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigsFeeCollector._requireCheckerSignerSignature:\\\"\\n        );\\n\\n        {\\n            uint256 preFeeTokenBalance = _getBalance(\\n                _call.msg.feeToken,\\n                feeCollector\\n            );\\n\\n            // call forward + append fee collector\\n            _call.msg.service.revertingContractCall(\\n                _encodeFeeCollector(_call.msg.data, feeCollector),\\n                \\\"ExecWithSigsFacet.execWithSigsFeeCollector:\\\"\\n            );\\n\\n            uint256 postFeeTokenBalance = _getBalance(\\n                _call.msg.feeToken,\\n                feeCollector\\n            );\\n\\n            observedFee = postFeeTokenBalance - preFeeTokenBalance;\\n        }\\n\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        emit LogExecWithSigsFeeCollector(\\n            _call.correlationId,\\n            _call.msg,\\n            executorSigner,\\n            checkerSigner,\\n            observedFee,\\n            estimatedGasUsed,\\n            msg.sender\\n        );\\n    }\\n\\n    // solhint-disable function-max-lines\\n    /// @param _call Execution payload packed into ExecWithSigsRelayContext struct\\n    /// @return estimatedGasUsed Estimated gas used using gas metering\\n    /// @return observedFee The fee transferred to the fee collector\\n    function execWithSigsRelayContext(\\n        ExecWithSigsRelayContext calldata _call\\n    ) external returns (uint256 estimatedGasUsed, uint256 observedFee) {\\n        uint256 startGas = gasleft();\\n\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"ExecWithSigsFacet.execWithSigsRelayContext: only EOAs\\\"\\n        );\\n\\n        _requireSignerDeadline(\\n            _call.msg.deadline,\\n            \\\"ExecWithSigsFacet.execWithSigsRelayContext._requireSignerDeadline:\\\"\\n        );\\n\\n        bytes32 digest = _getDigestRelayContext(\\n            _getDomainSeparator(),\\n            _call.msg\\n        );\\n\\n        address executorSigner = _requireExecutorSignerSignature(\\n            digest,\\n            _call.executorSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigsRelayContext._requireExecutorSignerSignature:\\\"\\n        );\\n\\n        address checkerSigner = _requireCheckerSignerSignature(\\n            digest,\\n            _call.checkerSignerSig,\\n            \\\"ExecWithSigsFacet.execWithSigsRelayContext._requireCheckerSignerSignature:\\\"\\n        );\\n\\n        {\\n            uint256 preFeeTokenBalance = _getBalance(\\n                _call.msg.feeToken,\\n                feeCollector\\n            );\\n\\n            // call forward + append fee collector, feeToken, fee\\n            _call.msg.service.revertingContractCall(\\n                _encodeRelayContext(\\n                    _call.msg.data,\\n                    feeCollector,\\n                    _call.msg.feeToken,\\n                    _call.msg.fee\\n                ),\\n                \\\"ExecWithSigsFacet.execWithSigsRelayContext:\\\"\\n            );\\n\\n            uint256 postFeeTokenBalance = _getBalance(\\n                _call.msg.feeToken,\\n                feeCollector\\n            );\\n\\n            observedFee = postFeeTokenBalance - preFeeTokenBalance;\\n        }\\n\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        emit LogExecWithSigsRelayContext(\\n            _call.correlationId,\\n            _call.msg,\\n            executorSigner,\\n            checkerSigner,\\n            observedFee,\\n            estimatedGasUsed,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @dev Used for off-chain simulation only!\\n    function simulateExecWithSigsTrackFee(\\n        address _service,\\n        bytes calldata _data,\\n        address _feeToken\\n    )\\n        external\\n        returns (\\n            uint256 estimatedGasUsed,\\n            uint256 observedFee,\\n            bool isFeeCollector\\n        )\\n    {\\n        uint256 startGas = gasleft();\\n\\n        uint256 preFeeCollectorBalance = _getBalance(_feeToken, feeCollector);\\n        uint256 preDiamondBalance = _getBalance(_feeToken, address(this));\\n\\n        (bool success, bytes memory returndata) = _service.call(_data);\\n\\n        uint256 observedFeeCollectorFee = _getBalance(_feeToken, feeCollector) -\\n            preFeeCollectorBalance;\\n        uint256 observedDiamondFee = _getBalance(_feeToken, address(this)) -\\n            preDiamondBalance;\\n\\n        if (observedDiamondFee > observedFeeCollectorFee) {\\n            observedFee = observedDiamondFee;\\n        } else {\\n            observedFee = observedFeeCollectorFee;\\n            isFeeCollector = true;\\n        }\\n\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        if (tx.origin != address(0) || !success) {\\n            _revertWithFeeAndIsFeeCollector(\\n                success,\\n                isFeeCollector,\\n                returndata,\\n                estimatedGasUsed,\\n                observedFee\\n            );\\n        }\\n    }\\n\\n    /// @dev Used for off-chain simulation only!\\n    function simulateExecWithSigs(\\n        address _service,\\n        bytes memory _data\\n    ) external returns (uint256 estimatedGasUsed) {\\n        uint256 startGas = gasleft();\\n\\n        (bool success, bytes memory returndata) = _service.call(_data);\\n\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        if (tx.origin != address(0) || !success) {\\n            _revert(success, returndata, estimatedGasUsed);\\n        }\\n    }\\n\\n    /// @dev Used for off-chain simulation only!\\n    function simulateExecWithSigsFeeCollector(\\n        address _service,\\n        bytes calldata _data,\\n        address _feeToken\\n    ) external returns (uint256 estimatedGasUsed, uint256 observedFee) {\\n        uint256 startGas = gasleft();\\n\\n        uint256 preFeeTokenBalance = _getBalance(_feeToken, feeCollector);\\n\\n        (bool success, bytes memory returndata) = _service.call(\\n            _encodeFeeCollector(_data, feeCollector)\\n        );\\n\\n        uint256 postFeeTokenBalance = _getBalance(_feeToken, feeCollector);\\n        observedFee = postFeeTokenBalance - preFeeTokenBalance;\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        if (tx.origin != address(0) || !success) {\\n            _revertWithFee(success, returndata, estimatedGasUsed, observedFee);\\n        }\\n    }\\n\\n    /// @dev Used for off-chain simulation only!\\n    function simulateExecWithSigsRelayContext(\\n        address _service,\\n        bytes calldata _data,\\n        address _feeToken,\\n        uint256 _fee\\n    ) external returns (uint256 estimatedGasUsed, uint256 observedFee) {\\n        uint256 startGas = gasleft();\\n\\n        uint256 preFeeTokenBalance = _getBalance(_feeToken, feeCollector);\\n\\n        (bool success, bytes memory returndata) = _service.call(\\n            _encodeRelayContext(_data, feeCollector, _feeToken, _fee)\\n        );\\n\\n        uint256 postFeeTokenBalance = _getBalance(_feeToken, feeCollector);\\n        observedFee = postFeeTokenBalance - preFeeTokenBalance;\\n        estimatedGasUsed = startGas - gasleft();\\n\\n        if (tx.origin != address(0) || !success) {\\n            _revertWithFee(success, returndata, estimatedGasUsed, observedFee);\\n        }\\n    }\\n\\n    //solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _getDomainSeparator();\\n    }\\n\\n    function _getDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        bytes(\\n                            //solhint-disable-next-line max-line-length\\n                            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                        )\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/base/BFacetOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {LibDiamond} from \\\"../../libraries/diamond/standard/LibDiamond.sol\\\";\\n\\nabstract contract BFacetOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/base/ExecWithSigsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {GelatoString} from \\\"../../libraries/GelatoString.sol\\\";\\nimport {\\n    _wasSignatureUsedAlready,\\n    _setWasSignatureUsedAlready\\n} from \\\"../storage/ExecWithSigsStorage.sol\\\";\\nimport {\\n    _isExecutorSigner,\\n    _isCheckerSigner\\n} from \\\"../storage/SignerStorage.sol\\\";\\nimport {\\n    ExecWithSigs,\\n    Message,\\n    ExecWithSigsFeeCollector,\\n    MessageFeeCollector,\\n    MessageTrackFee,\\n    ExecWithSigsRelayContext,\\n    MessageRelayContext\\n} from \\\"../../types/CallTypes.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract ExecWithSigsBase {\\n    using GelatoString for string;\\n\\n    bytes32 public constant MESSAGE_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"Message(address service,bytes data,uint256 salt,uint256 deadline)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant MESSAGE_FEE_COLLECTOR_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"MessageFeeCollector(address service,bytes data,uint256 salt,uint256 deadline,address feeToken)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant MESSAGE_TRACK_FEE =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"MessageTrackFee(address service,bytes data,uint256 salt,uint256 deadline,address feeToken,bool isFeeCollector)\\\"\\n            )\\n        );\\n\\n    bytes32 public constant MESSAGE_RELAY_CONTEXT_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"MessageRelayContext(address service,bytes data,uint256 salt,uint256 deadline,address feeToken,uint256 fee)\\\"\\n            )\\n        );\\n\\n    function _requireSignerDeadline(\\n        uint256 _signerDeadline,\\n        string memory _errorTrace\\n    ) internal view {\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            _signerDeadline == 0 || _signerDeadline >= block.timestamp,\\n            _errorTrace.suffix(\\\"deadline\\\")\\n        );\\n    }\\n\\n    function _requireExecutorSignerSignature(\\n        bytes32 _digest,\\n        bytes calldata _executorSignerSig,\\n        string memory _errorTrace\\n    ) internal returns (address executorSigner) {\\n        require(\\n            !_wasSignatureUsedAlready(_executorSignerSig),\\n            _errorTrace.suffix(\\\"replay\\\")\\n        );\\n\\n        ECDSA.RecoverError error;\\n        (executorSigner, error) = ECDSA.tryRecover(_digest, _executorSignerSig);\\n\\n        require(\\n            error == ECDSA.RecoverError.NoError &&\\n                _isExecutorSigner(executorSigner),\\n            _errorTrace.suffix(\\\"ECDSA.RecoverError.NoError && isExecutorSigner\\\")\\n        );\\n\\n        _setWasSignatureUsedAlready(_executorSignerSig);\\n    }\\n\\n    function _requireCheckerSignerSignature(\\n        bytes32 _digest,\\n        bytes calldata _checkerSignerSig,\\n        string memory _errorTrace\\n    ) internal returns (address checkerSigner) {\\n        require(\\n            !_wasSignatureUsedAlready(_checkerSignerSig),\\n            _errorTrace.suffix(\\\"replay\\\")\\n        );\\n\\n        ECDSA.RecoverError error;\\n        (checkerSigner, error) = ECDSA.tryRecover(_digest, _checkerSignerSig);\\n\\n        require(\\n            error == ECDSA.RecoverError.NoError &&\\n                _isCheckerSigner(checkerSigner),\\n            _errorTrace.suffix(\\\"ECDSA.RecoverError.NoError && isCheckerSigner\\\")\\n        );\\n\\n        _setWasSignatureUsedAlready(_checkerSignerSig);\\n    }\\n\\n    function _getDigest(\\n        bytes32 _domainSeparator,\\n        Message calldata _msg\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeExecWithSigs(_msg))\\n            )\\n        );\\n    }\\n\\n    function _getDigestFeeCollector(\\n        bytes32 _domainSeparator,\\n        MessageFeeCollector calldata _msg\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeExecWithSigsFeeCollector(_msg))\\n            )\\n        );\\n    }\\n\\n    function _getDigestTrackFee(\\n        bytes32 _domainSeparator,\\n        MessageTrackFee calldata _msg\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeExecWithSigsTrackFee(_msg))\\n            )\\n        );\\n    }\\n\\n    function _getDigestRelayContext(\\n        bytes32 _domainSeparator,\\n        MessageRelayContext calldata _msg\\n    ) internal pure returns (bytes32 digest) {\\n        digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparator,\\n                keccak256(_abiEncodeExecWithSigsRelayContext(_msg))\\n            )\\n        );\\n    }\\n\\n    function _abiEncodeExecWithSigs(\\n        Message calldata _msg\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                MESSAGE_TYPEHASH,\\n                _msg.service,\\n                keccak256(_msg.data),\\n                _msg.salt,\\n                _msg.deadline\\n            );\\n    }\\n\\n    function _abiEncodeExecWithSigsFeeCollector(\\n        MessageFeeCollector calldata _msg\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                MESSAGE_FEE_COLLECTOR_TYPEHASH,\\n                _msg.service,\\n                keccak256(_msg.data),\\n                _msg.salt,\\n                _msg.deadline,\\n                _msg.feeToken\\n            );\\n    }\\n\\n    function _abiEncodeExecWithSigsTrackFee(\\n        MessageTrackFee calldata _msg\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                MESSAGE_TRACK_FEE,\\n                _msg.service,\\n                keccak256(_msg.data),\\n                _msg.salt,\\n                _msg.deadline,\\n                _msg.feeToken,\\n                _msg.isFeeCollector\\n            );\\n    }\\n\\n    function _abiEncodeExecWithSigsRelayContext(\\n        MessageRelayContext calldata _msg\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                MESSAGE_RELAY_CONTEXT_TYPEHASH,\\n                _msg.service,\\n                keccak256(_msg.data),\\n                _msg.salt,\\n                _msg.deadline,\\n                _msg.feeToken,\\n                _msg.fee\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/storage/ExecWithSigsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nstruct ExecWithSigsStorage {\\n    mapping(bytes32 => bool) wasSignatureUsedAlready;\\n}\\n\\nbytes32 constant _EXEC_WITH_SIGS_STORAGE = keccak256(\\n    \\\"gelato.diamond.execWithSigs.storage\\\"\\n);\\n\\nfunction _wasSignatureUsedAlready(bytes calldata _signature)\\n    view\\n    returns (bool)\\n{\\n    return\\n        _execWithSigsStorage().wasSignatureUsedAlready[keccak256(_signature)];\\n}\\n\\nfunction _setWasSignatureUsedAlready(bytes calldata _signature) {\\n    _execWithSigsStorage().wasSignatureUsedAlready[\\n        keccak256(_signature)\\n    ] = true;\\n}\\n\\n//solhint-disable-next-line private-vars-leading-underscore\\nfunction _execWithSigsStorage()\\n    pure\\n    returns (ExecWithSigsStorage storage ewss)\\n{\\n    bytes32 position = _EXEC_WITH_SIGS_STORAGE;\\n    assembly {\\n        ewss.slot := position\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/storage/SignerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nusing EnumerableSet for EnumerableSet.AddressSet;\\n\\nstruct SignerStorage {\\n    EnumerableSet.AddressSet executorSigners;\\n    EnumerableSet.AddressSet checkerSigners;\\n}\\n\\nbytes32 constant _SIGNER_STORAGE_POSITION = keccak256(\\n    \\\"gelato.diamond.signer.storage\\\"\\n);\\n\\nfunction _addExecutorSigner(address _executor) returns (bool) {\\n    return _signerStorage().executorSigners.add(_executor);\\n}\\n\\nfunction _removeExecutorSigner(address _executor) returns (bool) {\\n    return _signerStorage().executorSigners.remove(_executor);\\n}\\n\\nfunction _isExecutorSigner(address _executorSigner) view returns (bool) {\\n    return _signerStorage().executorSigners.contains(_executorSigner);\\n}\\n\\nfunction _executorSignerAt(uint256 _index) view returns (address) {\\n    return _signerStorage().executorSigners.at(_index);\\n}\\n\\nfunction _executorSigners() view returns (address[] memory) {\\n    return _signerStorage().executorSigners.values();\\n}\\n\\nfunction _numberOfExecutorSigners() view returns (uint256) {\\n    return _signerStorage().executorSigners.length();\\n}\\n\\nfunction _addCheckerSigner(address _checker) returns (bool) {\\n    return _signerStorage().checkerSigners.add(_checker);\\n}\\n\\nfunction _removeCheckerSigner(address _checker) returns (bool) {\\n    return _signerStorage().checkerSigners.remove(_checker);\\n}\\n\\nfunction _isCheckerSigner(address _checker) view returns (bool) {\\n    return _signerStorage().checkerSigners.contains(_checker);\\n}\\n\\nfunction _checkerSignerAt(uint256 _index) view returns (address) {\\n    return _signerStorage().checkerSigners.at(_index);\\n}\\n\\nfunction _checkerSigners() view returns (address[] memory checkers) {\\n    return _signerStorage().checkerSigners.values();\\n}\\n\\nfunction _numberOfCheckerSigners() view returns (uint256) {\\n    return _signerStorage().checkerSigners.length();\\n}\\n\\nfunction _signerStorage() pure returns (SignerStorage storage ess) {\\n    bytes32 position = _SIGNER_STORAGE_POSITION;\\n    assembly {\\n        ess.slot := position\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/functions/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nfunction _getBalance(address token, address user) view returns (uint256) {\\n    if (token == address(0)) return 0;\\n    return token == NATIVE_TOKEN ? user.balance : IERC20(token).balanceOf(user);\\n}\\n\\nfunction _simulateAndRevert(\\n    address _service,\\n    uint256 _gasleft,\\n    bytes memory _data\\n) {\\n    assembly {\\n        let success := call(\\n            gas(),\\n            _service,\\n            0,\\n            add(_data, 0x20),\\n            mload(_data),\\n            0,\\n            0\\n        )\\n\\n        mstore(0x00, success) // store success bool in first word\\n        mstore(0x20, sub(_gasleft, gas())) // store gas after success\\n        mstore(0x40, returndatasize()) // store length of return data size in third word\\n        returndatacopy(0x60, 0, returndatasize()) // store actual return data in fourth word and onwards\\n        revert(0, add(returndatasize(), 0x60))\\n    }\\n}\\n\\nfunction _revert(\\n    bool _success,\\n    bytes memory _returndata,\\n    uint256 _estimatedGasUsed\\n) pure {\\n    bytes memory revertData = bytes.concat(\\n        abi.encode(_success, _estimatedGasUsed, _returndata.length),\\n        _returndata\\n    );\\n    assembly {\\n        revert(add(32, revertData), mload(revertData))\\n    }\\n}\\n\\nfunction _revertWithFee(\\n    bool _success,\\n    bytes memory _returndata,\\n    uint256 _estimatedGasUsed,\\n    uint256 _observedFee\\n) pure {\\n    bytes memory revertData = bytes.concat(\\n        abi.encode(\\n            _success,\\n            _estimatedGasUsed,\\n            _observedFee,\\n            _returndata.length\\n        ),\\n        _returndata\\n    );\\n    assembly {\\n        revert(add(32, revertData), mload(revertData))\\n    }\\n}\\n\\nfunction _revertWithFeeAndIsFeeCollector(\\n    bool _success,\\n    bool _isFeeCollector,\\n    bytes memory _returndata,\\n    uint256 _estimatedGasUsed,\\n    uint256 _observedFee\\n) pure {\\n    bytes memory revertData = bytes.concat(\\n        abi.encode(\\n            _success,\\n            _estimatedGasUsed,\\n            _observedFee,\\n            _isFeeCollector,\\n            _returndata.length\\n        ),\\n        _returndata\\n    );\\n    assembly {\\n        revert(add(32, revertData), mload(revertData))\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/diamond/standard/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GelatoBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(\\n        bytes calldata _bytes\\n    ) internal pure returns (bytes4 selector) {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(\\n        bytes memory _bytes\\n    ) internal pure returns (bytes4 selector) {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(\\n        bytes memory _bytes,\\n        string memory _tracingInfo\\n    ) internal pure {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(\\n        bytes memory _bytes,\\n        string memory _tracingInfo\\n    ) internal pure returns (string memory) {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GelatoCallUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\n\\nlibrary GelatoCallUtils {\\n    using GelatoBytes for bytes;\\n\\n    function revertingContractCall(\\n        address _contract,\\n        bytes memory _data,\\n        string memory _errorMsg\\n    ) internal returns (bytes memory returndata) {\\n        bool success;\\n        (success, returndata) = _contract.call(_data);\\n\\n        // solhint-disable-next-line max-line-length\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L177\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(\\n                    isContract(_contract),\\n                    string(abi.encodePacked(_errorMsg, \\\"Call to non contract\\\"))\\n                );\\n            }\\n        } else {\\n            returndata.revertWithError(_errorMsg);\\n        }\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/f9b6fc3fdab7aca33a9cfa8837c5cd7f67e176be/contracts/utils/AddressUpgradeable.sol#L36\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GelatoString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary GelatoString {\\n    function startsWithOK(string memory _str) internal pure returns (bool) {\\n        if (\\n            bytes(_str).length >= 2 &&\\n            bytes(_str)[0] == \\\"O\\\" &&\\n            bytes(_str)[1] == \\\"K\\\"\\n        ) return true;\\n        return false;\\n    }\\n\\n    function revertWithInfo(\\n        string memory _error,\\n        string memory _tracingInfo\\n    ) internal pure {\\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\\n    }\\n\\n    function prefix(\\n        string memory _second,\\n        string memory _first\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n\\n    function suffix(\\n        string memory _first,\\n        string memory _second\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/diamond/standard/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n// solhint-disable max-line-length\\n// https://github.com/mudgen/diamond-3/blob/b009cd08b7822bad727bbcc47aa1b50d8b50f7f0/contracts/libraries/LibDiamond.sol#L1\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../../../interfaces/diamond/standard/IDiamondCut.sol\\\";\\n\\n// Custom due to incorrect string casting (non UTF-8 formatted)\\nimport {GelatoBytes} from \\\"../../../libraries/GelatoBytes.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function isContractOwner(address _guy) internal view returns (bool) {\\n        return _guy == contractOwner();\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    GelatoBytes.revertWithError(error, \\\"LibDiamondCut:_init:\\\");\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/types/CallTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nstruct Message {\\n    address service;\\n    bytes data;\\n    uint256 salt;\\n    uint256 deadline;\\n}\\n\\nstruct MessageFeeCollector {\\n    address service;\\n    bytes data;\\n    uint256 salt;\\n    uint256 deadline;\\n    address feeToken;\\n}\\n\\nstruct MessageTrackFee {\\n    address service;\\n    bytes data;\\n    uint256 salt;\\n    uint256 deadline;\\n    address feeToken;\\n    bool isFeeCollector;\\n}\\n\\nstruct MessageRelayContext {\\n    address service;\\n    bytes data;\\n    uint256 salt;\\n    uint256 deadline;\\n    address feeToken;\\n    uint256 fee;\\n}\\n\\nstruct ExecWithSigs {\\n    bytes32 correlationId;\\n    Message msg;\\n    bytes executorSignerSig;\\n    bytes checkerSignerSig;\\n}\\n\\nstruct ExecWithSigsFeeCollector {\\n    bytes32 correlationId;\\n    MessageFeeCollector msg;\\n    bytes executorSignerSig;\\n    bytes checkerSignerSig;\\n}\\n\\nstruct ExecWithSigsTrackFee {\\n    bytes32 correlationId;\\n    MessageTrackFee msg;\\n    bytes executorSignerSig;\\n    bytes checkerSignerSig;\\n}\\n\\nstruct ExecWithSigsRelayContext {\\n    bytes32 correlationId;\\n    MessageRelayContext msg;\\n    bytes executorSignerSig;\\n    bytes checkerSignerSig;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Message\",\"name\":\"msg\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"checkerSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogExecWithSigs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MessageFeeCollector\",\"name\":\"msg\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"checkerSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogExecWithSigsFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MessageRelayContext\",\"name\":\"msg\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"checkerSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogExecWithSigsRelayContext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFeeCollector\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct MessageTrackFee\",\"name\":\"msg\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"checkerSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogExecWithSigsTrackFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_FEE_COLLECTOR_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_RELAY_CONTEXT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_TRACK_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Message\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"executorSignerSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"checkerSignerSig\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecWithSigs\",\"name\":\"_call\",\"type\":\"tuple\"}],\"name\":\"execWithSigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"internalType\":\"struct MessageFeeCollector\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"executorSignerSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"checkerSignerSig\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecWithSigsFeeCollector\",\"name\":\"_call\",\"type\":\"tuple\"}],\"name\":\"execWithSigsFeeCollector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessageRelayContext\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"executorSignerSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"checkerSignerSig\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecWithSigsRelayContext\",\"name\":\"_call\",\"type\":\"tuple\"}],\"name\":\"execWithSigsRelayContext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"correlationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFeeCollector\",\"type\":\"bool\"}],\"internalType\":\"struct MessageTrackFee\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"executorSignerSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"checkerSignerSig\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecWithSigsTrackFee\",\"name\":\"_call\",\"type\":\"tuple\"}],\"name\":\"execWithSigsTrackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"simulateExecWithSigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"simulateExecWithSigsFeeCollector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"simulateExecWithSigsRelayContext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"simulateExecWithSigsTrackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observedFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeCollector\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExecWithSigsFacet", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ac05161b76a35c1c28dc99aa01bed7b24cea3bf", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}