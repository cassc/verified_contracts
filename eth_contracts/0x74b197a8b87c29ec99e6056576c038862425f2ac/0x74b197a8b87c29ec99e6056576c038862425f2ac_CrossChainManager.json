{"SourceCode": "/*\n    ___            _       ___  _                          \n    | .\\ ___  _ _ <_> ___ | __><_>._ _  ___ ._ _  ___  ___ \n    |  _// ._>| '_>| ||___|| _> | || ' |<_> || ' |/ | '/ ._>\n    |_|  \\___.|_|  |_|     |_|  |_||_|_|<___||_|_|\\_|_.\\___.\n    \n* PeriFinance: CrossChainManager.sol\n*\n* Latest source (may be newer): https://github.com/perifinance/peri-finance/blob/master/contracts/CrossChainManager.sol\n* Docs: Will be added in the future. \n* https://docs.peri.finance/contracts/source/contracts/CrossChainManager\n*\n* Contract Dependencies: \n*\t- IAddressResolver\n*\t- ICrossChainManager\n*\t- LimitedSetup\n*\t- MixinResolver\n*\t- Owned\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2024 PeriFinance\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity 0.5.16;\n\n// https://docs.peri.finance/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getPynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ipynth\ninterface IPynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferablePynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to PeriFinance\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iissuer\ninterface IIssuer {\n    // Views\n    function anyPynthOrPERIRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availablePynthCount() external view returns (uint);\n\n    function availablePynths(uint index) external view returns (IPynth);\n\n    function canBurnPynths(address account) external view returns (bool);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    function maxIssuablePynths(address issuer)\n        external\n        view\n        returns (\n            uint,\n            uint,\n            uint\n        );\n\n    // function externalTokenQuota(\n    //     address _account,\n    //     uint _addtionalpUSD,\n    //     uint _addtionalExToken,\n    //     bool _isIssue\n    // ) external view returns (uint);\n\n    // function debtsCollateral(address _account, bool _rateCheck) external\n    //     view\n    //     returns (\n    //         uint,\n    //         uint,\n    //         uint\n    //     );\n    function getRatios(address _account, bool _checkRate)\n        external\n        view\n        returns (\n            uint,\n            uint,\n            uint,\n            uint,\n            uint,\n            uint\n        );\n\n    function getTargetRatio(address account) external view returns (uint);\n\n    // function getTRatioCRatio(address _account)\n    //     external\n    //     view\n    //     returns (\n    //         uint,\n    //         uint,\n    //         uint,\n    //         uint\n    //     );\n\n    function remainingIssuablePynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function pynths(bytes32 currencyKey) external view returns (IPynth);\n\n    function getPynths(bytes32[] calldata currencyKeys) external view returns (IPynth[] memory);\n\n    function pynthsByAddress(address pynthAddress) external view returns (bytes32);\n\n    function totalIssuedPynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint, bool);\n\n    function transferablePeriFinanceAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid);\n\n    function amountsToFitClaimable(address _account) external view returns (uint burnAmount, uint exTokenAmountToUnstake);\n\n    // Restricted: used internally to PeriFinance\n    function issuePynths(\n        address _issuer,\n        bytes32 _currencyKey,\n        uint _issueAmount\n    ) external;\n\n    function issueMaxPynths(address _issuer) external;\n\n    function issuePynthsToMaxQuota(address _issuer, bytes32 _currencyKey) external;\n\n    function burnPynths(\n        address _from,\n        bytes32 _currencyKey,\n        uint _burnAmount\n    ) external;\n\n    function fitToClaimable(address _from) external;\n\n    function exit(address _from) external;\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint pusdAmount,\n        address liquidator\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/addressresolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            bytes32 name = names[i];\n            address destination = destinations[i];\n            repository[name] = destination;\n            emit AddressImported(name, destination);\n        }\n    }\n\n    /* ========= PUBLIC FUNCTIONS ========== */\n\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\n        for (uint i = 0; i < destinations.length; i++) {\n            destinations[i].rebuildCache();\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\n        for (uint i = 0; i < names.length; i++) {\n            if (repository[names[i]] != destinations[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getPynth(bytes32 key) external view returns (address) {\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\n        return address(issuer.pynths(key));\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AddressImported(bytes32 name, address destination);\n}\n\n\n// solhint-disable payable-fallback\n\n// https://docs.peri.finance/contracts/source/contracts/readproxy\ncontract ReadProxy is Owned {\n    address public target;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(address _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(target);\n    }\n\n    function() external {\n        // The basics of a proxy read call\n        // Note that msg.sender in the underlying will always be the address of this contract.\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n\n            // Use of staticcall - this will revert if the underlying function mutates state\n            let result := staticcall(gas, sload(target_slot), 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n\n            if iszero(result) {\n                revert(0, returndatasize)\n            }\n            return(0, returndatasize)\n        }\n    }\n\n    event TargetUpdated(address newTarget);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/mixinresolver\ncontract MixinResolver {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    constructor(address _resolver) internal {\n        resolver = AddressResolver(_resolver);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\n\n    function rebuildCache() public {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        // The resolver must call this function whenver it updates its state\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            address destination =\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\"Resolver missing target: \", name)));\n            addressCache[name] = destination;\n            emit CacheUpdated(name, destination);\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\n        return _foundAddress;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event CacheUpdated(bytes32 name, address destination);\n}\n\n\n// https://docs.peri.finance/contracts/source/contracts/limitedsetup\ncontract LimitedSetup {\n    uint public setupExpiryTime;\n\n    /**\n     * @dev LimitedSetup Constructor.\n     * @param setupDuration The time the setup period will last for.\n     */\n    constructor(uint setupDuration) internal {\n        setupExpiryTime = now + setupDuration;\n    }\n\n    modifier onlyDuringSetup {\n        require(now < setupExpiryTime, \"Can only perform this action during setup\");\n        _;\n    }\n}\n\n\ninterface ICrossChainManager {\n    // View Functions\n    function crossChainState() external view returns (address);\n\n    function debtManager() external view returns (address);\n\n    // supply schedule wrapper functions\n    // function mintableSupply() external view returns (uint);\n    // // supply schedule wrapper functions\n    // function isMintable() external view returns (bool);\n    // // supply schedule wrapper functions\n    // function minterReward() external view returns (uint);\n\n    // function getCrossChainIds() external view returns (bytes32[] memory);\n\n    // function getNetworkId(bytes32 _chainID) external view returns (uint);\n\n    function currentNetworkIssuedDebtOf(bytes32 currencyKey) external view returns (uint, bool);\n\n    function currentNetworkActiveDebtOf(bytes32 currencyKey) external view returns (uint, bool);\n\n    function currentNetworkIssuedDebt() external view returns (uint);\n\n    function currentNetworkActiveDebt() external view returns (uint);\n\n    // function getCrossNetworkIssuedDebt(bytes32 _chainID) external view returns (uint);\n\n    // function getCrossNetworkActiveDebt(bytes32 _chainID) external view returns (uint);\n\n    function crossNetworkIssuedDebtAll() external view returns (uint);\n\n    function crossNetworkActiveDebtAll() external view returns (uint);\n\n    function currentNetworkDebtPercentage() external view returns (uint);\n\n    function movedAmount(uint _inboundOutbound, uint targetNetworkId) external view returns (uint);\n\n    function outboundSumToCurrentNetwork() external view returns (uint);\n\n    function syncTimestamp() external view returns (uint);\n\n    function syncStale() external view returns (bool);\n\n    // Mutative functions\n    function setCrossChainState(address) external;\n\n    function setDebtManager(address) external;\n\n    // supply schedule wrapper functions\n    // function recordMintEvent(uint supplyMinted) external returns (bool);\n\n    // function setCrosschain(bytes32 _chainID) external;\n\n    // function addCrosschain(bytes32 _chainID) external;\n\n    // function addNetworkId(bytes32 _chainID, uint _networkId) external;\n\n    // function addNetworkIds(uint[] calldata _networkIds) external;\n\n    function addCurrentNetworkIssuedDebt(uint _amount) external;\n\n    function subtractCurrentNetworkIssuedDebt(uint _amount) external;\n\n    function setCrossNetworkIssuedDebtAll(uint[] calldata _chainIDs, uint[] calldata _amounts) external;\n\n    function setCrossNetworkActiveDebtAll(uint[] calldata _chainIDs, uint[] calldata _amounts) external;\n\n    function setOutboundSumToCurrentNetwork(uint _amount) external;\n\n    // deprecated functions --> to be removed. they do nothing inside the contract\n    // for backwards compatibility with Exchanger\n    function addTotalNetworkDebt(uint amount) external;\n\n    // for backwards compatibility with Exchanger\n    function subtractTotalNetworkDebt(uint amount) external;\n\n    // for backwards compatibility with Issuer\n    function setCrossNetworkUserDebt(address account, uint userStateDebtLedgerIndex) external;\n\n    // for backwards compatibility with Issuer\n    function clearCrossNetworkUserDebt(address account) external;\n}\n\n\ninterface ICrossChainState {\n    struct CrossNetworkUserData {\n        // total network debtLedgerIndex\n        uint totalNetworkDebtLedgerIndex;\n        // user state debtledgerIndex\n        uint userStateDebtLedgerIndex;\n    }\n\n    // Views\n    function getChainID() external view returns (uint);\n\n    // function getCrossChainCount() external view returns (uint);\n\n    function getCurrentNetworkIssuedDebt() external view returns (uint);\n\n    function getTotalNetworkIssuedDebt() external view returns (uint);\n\n    function getCrossNetworkIssuedDebtAll() external view returns (uint);\n\n    function getCrossNetworkActiveDebtAll() external view returns (uint);\n\n    function getOutboundSumToCurrentNetwork() external view returns (uint);\n\n    // Mutative functions\n    // function addNetworkId(uint _networkId) external;\n\n    function setCrossNetworkIssuedDebtAll(uint[] calldata _chainIDs, uint[] calldata _amounts) external;\n\n    function setCrossNetworkActiveDebtAll(uint[] calldata _chainIDs, uint[] calldata _amounts) external;\n\n    function setCrossNetworkDebtsAll(\n        uint[] calldata _chainIDs,\n        uint[] calldata _debts,\n        uint[] calldata _activeDebts,\n        uint _inbound\n    ) external;\n\n    // function addCrossNetworkNDebts(\n    //     uint _chainID,\n    //     uint _issuedDebt,\n    //     uint _activeDebt\n    // ) external;\n\n    function addIssuedDebt(uint _chainID, uint _amount) external;\n\n    function subtractIssuedDebt(uint _chainID, uint _amount) external;\n\n    function setOutboundSumToCurrentNetwork(uint _amount) external;\n\n    function setInitialCurrentIssuedDebt(uint _amount) external;\n\n    // deprecated functions --> to be removed. they do nothing inside the contract\n    // function totalNetworkDebtLedgerLength() external view returns (uint);\n\n    // function lastTotalNetworkDebtLedgerEntry() external view returns (uint);\n\n    // function getTotalNetworkDebtEntryAtIndex(uint) external view returns (uint);\n\n    // function getCrossNetworkUserData(address) external view returns (uint, uint);\n\n    // function getCrossChainIds() external view returns (bytes32[] memory);\n\n    // function getNetworkId(bytes32 _chainID) external view returns (uint);\n\n    // function getCrossNetworkIssuedDebt(bytes32 _chainID) external view returns (uint);\n\n    // function getCrossNetworkActiveDebt(bytes32 _chainID) external view returns (uint);\n\n    // function setCrossNetworkUserData(address, uint) external;\n\n    // function clearCrossNetworkUserData(address) external;\n\n    // function appendTotalNetworkDebtLedger(uint) external;\n\n    // function addTotalNetworkDebtLedger(uint amount) external;\n\n    // function subtractTotalNetworkDebtLedger(uint amount) external;\n\n    // function setCrosschain(bytes32 _chainID) external;\n\n    // function addCrosschain(bytes32 chainID) external;\n}\n\n\ninterface IDebtCache {\n    // Views\n\n    function cachedDebt() external view returns (uint);\n\n    function cachedPynthDebt(bytes32 currencyKey) external view returns (uint);\n\n    function cacheTimestamp() external view returns (uint);\n\n    function cacheInvalid() external view returns (bool);\n\n    function cacheStale() external view returns (bool);\n\n    function currentPynthDebts(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory debtValues, bool anyRateIsInvalid);\n\n    function cachedPynthDebts(bytes32[] calldata currencyKeys) external view returns (uint[] memory debtValues);\n\n    function currentDebt() external view returns (uint debt, bool anyRateIsInvalid);\n\n    function cacheInfo()\n        external\n        view\n        returns (\n            uint debt,\n            uint timestamp,\n            bool isInvalid,\n            bool isStale\n        );\n\n    // Mutative functions\n\n    function updateCachedPynthDebts(bytes32[] calldata currencyKeys) external;\n\n    function updateCachedPynthDebtWithRate(bytes32 currencyKey, uint currencyRate) external;\n\n    function updateCachedPynthDebtsWithRates(bytes32[] calldata currencyKeys, uint[] calldata currencyRates) external;\n\n    function updateDebtCacheValidity(bool currentlyInvalid) external;\n\n    function purgeCachedPynthDebt(bytes32 currencyKey) external;\n\n    function takeDebtSnapshot() external;\n}\n\n\npragma experimental ABIEncoderV2;\n\ninterface IBridgeState {\n    // ----VIEWS\n\n    struct Signature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n    }\n\n    function networkOpened(uint chainId) external view returns (bool);\n\n    function accountOutboundings(\n        address account,\n        uint periodId,\n        uint index\n    ) external view returns (uint);\n\n    function accountInboundings(address account, uint index) external view returns (uint);\n\n    function inboundings(uint index)\n        external\n        view\n        returns (\n            address,\n            uint,\n            uint,\n            uint,\n            bool,\n            Signature memory\n        );\n\n    function outboundings(uint index)\n        external\n        view\n        returns (\n            address,\n            uint,\n            uint,\n            uint,\n            Signature memory\n        );\n\n    function outboundPeriods(uint index)\n        external\n        view\n        returns (\n            uint,\n            uint,\n            uint[] memory,\n            bool\n        );\n\n    function srcOutboundingIdRegistered(uint chainId, uint srcOutboundingId) external view returns (bool isRegistered);\n\n    function numberOfOutboundPerPeriod() external view returns (uint);\n\n    function periodDuration() external view returns (uint);\n\n    function outboundingsLength() external view returns (uint);\n\n    function getTotalOutboundAmount() external view returns (uint);\n\n    function inboundingsLength() external view returns (uint);\n\n    function getTotalInboundAmount() external view returns (uint);\n\n    function outboundIdsInPeriod(uint outboundPeriodId) external view returns (uint[] memory);\n\n    function isOnRole(bytes32 roleKey, address account) external view returns (bool);\n\n    function accountOutboundingsInPeriod(address _account, uint _period) external view returns (uint[] memory);\n\n    function applicableInboundIds(address account) external view returns (uint[] memory);\n\n    function outboundRequestIdsInPeriod(address account, uint periodId) external view returns (uint[] memory);\n\n    function periodIdsToProcess() external view returns (uint[] memory);\n\n    function getMovedAmount(uint _inboundOutbound, uint targetNetworkId) external view returns (uint);\n\n    // ----MUTATIVES\n\n    function appendOutboundingRequest(\n        address account,\n        uint amount,\n        uint destChainIds,\n        Signature calldata sign\n    ) external;\n\n    function appendMultipleInboundingRequests(\n        address[] calldata accounts,\n        uint[] calldata amounts,\n        uint[] calldata srcChainIds,\n        uint[] calldata srcOutboundingIds,\n        Signature[] calldata sign\n    ) external;\n\n    function appendInboundingRequest(\n        address account,\n        uint amount,\n        uint srcChainId,\n        uint srcOutboundingId,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external;\n\n    function claimInbound(uint index, uint _amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/isupplyschedule\ninterface ISupplySchedule {\n    // Views\n    function mintableSupply() external view returns (uint);\n\n    function isMintable() external view returns (bool);\n\n    function minterReward() external view returns (uint);\n\n    // Mutative functions\n    function recordMintEvent(uint supplyMinted) external returns (bool);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/isystemsettings\ninterface ISystemSettings {\n    // Views\n    function priceDeviationThresholdFactor() external view returns (uint);\n\n    function waitingPeriodSecs() external view returns (uint);\n\n    function issuanceRatio() external view returns (uint);\n\n    function feePeriodDuration() external view returns (uint);\n\n    function targetThreshold() external view returns (uint);\n\n    function liquidationDelay() external view returns (uint);\n\n    function liquidationRatio() external view returns (uint);\n\n    function liquidationPenalty() external view returns (uint);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function exchangeFeeRate(bytes32 currencyKey) external view returns (uint);\n\n    function minimumStakeTime() external view returns (uint);\n\n    function externalTokenQuota() external view returns (uint);\n\n    function bridgeTransferGasCost() external view returns (uint);\n\n    function bridgeClaimGasCost() external view returns (uint);\n\n    function syncStaleThreshold() external view returns (uint);\n\n    function debtSnapshotStaleTime() external view returns (uint);\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.peri.finance/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @dev Round down the value with given number\n     */\n    function roundDownDecimal(uint x, uint d) internal pure returns (uint) {\n        return x.div(10**d).mul(10**d);\n    }\n\n    /**\n     * @dev Round up the value with given number\n     */\n    function roundUpDecimal(uint x, uint d) internal pure returns (uint) {\n        uint _decimal = 10**d;\n\n        if (x % _decimal > 0) {\n            x = x.add(10**d);\n        }\n\n        return x.div(_decimal).mul(_decimal);\n    }\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\ncontract CrossChainManager is Owned, MixinResolver, LimitedSetup, ICrossChainManager {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    bytes32 internal constant pUSD = \"pUSD\";\n\n    address internal _crossChainState;\n    address internal _debtManager;\n\n    uint internal _syncTimestamp;\n    bool internal _isStale;\n\n    bytes32 private constant CONTRACT_DEBTCACHE = \"DebtCache\";\n    bytes32 private constant CONTRACT_BRIDGESTATEPUSD = \"BridgeStatepUSD\";\n    bytes32 private constant CONTRACT_EXCHANGERATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_SUPPLYSCHEDULE = \"SupplySchedule\";\n    bytes32 private constant CONTRACT_SYSTEMSETTINGS = \"SystemSettings\";\n\n    constructor(\n        address _owner,\n        address _resolver,\n        address _crossChainStateAddress,\n        address _debtManagerAddress\n    ) public Owned(_owner) MixinResolver(_resolver) LimitedSetup(2 weeks) {\n        _crossChainState = _crossChainStateAddress;\n        _debtManager = _debtManagerAddress;\n        _syncTimestamp = block.timestamp;\n        _isStale = false;\n    }\n\n    //*********************** View functions ***************************\n    /**\n     * @notice return addresses of required resolver instance\n     * @return address of required resolver addresses\n     */\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        addresses = new bytes32[](5);\n        addresses[0] = CONTRACT_DEBTCACHE;\n        addresses[1] = CONTRACT_BRIDGESTATEPUSD;\n        addresses[2] = CONTRACT_EXCHANGERATES;\n        addresses[3] = CONTRACT_SUPPLYSCHEDULE;\n        addresses[4] = CONTRACT_SYSTEMSETTINGS;\n    }\n\n    /**\n     * @notice return debtCache instance\n     * @return debtCache instance\n     */\n    function debtCache() internal view returns (IDebtCache) {\n        return IDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));\n    }\n\n    /**\n     * @notice return cross chain state instance\n     * @return cross chain state instance\n     */\n    function state() internal view returns (ICrossChainState) {\n        return ICrossChainState(_crossChainState);\n    }\n\n    /**\n     * @notice return bridge state instance\n     * @return bridge state instance\n     */\n    function bridgeStatepUSD() internal view returns (IBridgeState) {\n        return IBridgeState(requireAndGetAddress(CONTRACT_BRIDGESTATEPUSD));\n    }\n\n    /**\n     * @notice return exchange rates instance\n     * @return exchange rates instance\n     */\n    function exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXCHANGERATES));\n    }\n\n    /**\n     * @notice return system settings instance\n     * @return system settings instance\n     */\n    function systemSettings() internal view returns (ISystemSettings) {\n        return ISystemSettings(requireAndGetAddress(CONTRACT_SYSTEMSETTINGS));\n    }\n\n    /**\n     * @notice return supply schedule instance\n     * @dev called by inFlationalMint\n     * @return supply schedule instance\n     */\n    function supplySchedule() internal view returns (ISupplySchedule) {\n        return ISupplySchedule(requireAndGetAddress(CONTRACT_SUPPLYSCHEDULE));\n    }\n\n    /**\n     * @notice return current network's mintable supply\n     * @dev called by inFlationalMint\n     * @return mintable supply\n     */\n    function mintableSupply() external view returns (uint supplyToMint) {\n        uint _currRate = _currentNetworkDebtPercentage();\n        require(SafeDecimalMath.preciseUnit() >= _currRate, \"Network rate invalid\");\n        require(!_syncStale(_syncTimestamp) || SafeDecimalMath.preciseUnit() == _currRate, \"Cross chain debt is stale\");\n\n        supplyToMint = supplySchedule().mintableSupply();\n        require(supplyToMint > 0, \"No mintable supply\");\n\n        supplyToMint = supplyToMint\n            .decimalToPreciseDecimal()\n            .multiplyDecimalRoundPrecise(_currRate)\n            .preciseDecimalToDecimal();\n\n        return supplyToMint;\n    }\n\n    function isMintable() external view returns (bool) {\n        return supplySchedule().isMintable();\n    }\n\n    function minterReward() external view returns (uint) {\n        return supplySchedule().minterReward();\n    }\n\n    /**\n     * @notice return current chain id\n     * @return current chain id\n     */\n    function getChainID() external view returns (uint) {\n        return state().getChainID();\n    }\n\n    /**\n     * @notice return cross chain state instance address\n     * @return cross chain state instance address\n     */\n    function crossChainState() external view returns (address) {\n        return _crossChainState;\n    }\n\n    /**\n     * @notice return debt manager instance address\n     * @return debt manager instance address\n     */\n    function debtManager() external view returns (address) {\n        return _debtManager;\n    }\n\n    /**\n     * @notice return cross chain synchronization timestamp\n     * @return cross chain synchronization timestamp\n     */\n    function syncTimestamp() external view returns (uint) {\n        return _syncTimestamp;\n    }\n\n    /**\n     * @notice return cross chain synchronization stale flag\n     * @return cross chain synchronization stale flag\n     */\n    function isStale() external view returns (bool) {\n        return _isStale;\n    }\n\n    /**\n     * @notice return current cross chain count\n     * @return current cross chain count\n     */\n    // function crossChainCount() external view returns (uint) {\n    //     return state().getCrossChainCount();\n    // }\n\n    /**\n     * @notice return current sum of total network system debt\n     * @dev current network's active debt by currency key\n     * @param currencyKey currency key\n     * @return totalSystemValue debt,\n     * @return anyRateIsInvalid any rate is invalid\n     */\n    function currentNetworkIssuedDebtOf(bytes32 currencyKey)\n        external\n        view\n        returns (uint totalSystemValue, bool anyRateIsInvalid)\n    {\n        totalSystemValue = _currentNetworkIssuedDebt();\n\n        if (currencyKey == pUSD) {\n            return (totalSystemValue, false);\n        }\n\n        (uint currencyRate, bool currencyRateInvalid) = exchangeRates().rateAndInvalid(currencyKey);\n\n        return (totalSystemValue.divideDecimalRound(currencyRate), currencyRateInvalid);\n    }\n\n    /**\n     * @notice Get current network's active debt by currency key\n     * @dev needs to consider issued debt change by staking and burning between the cross chain synchronization\n     * @return totalSystemValue debt,\n     * @return anyRateIsInvalid any rate is invalid\n     */\n    function currentNetworkActiveDebtOf(bytes32 currencyKey)\n        external\n        view\n        returns (uint totalSystemValue, bool anyRateIsInvalid)\n    {\n        (totalSystemValue, anyRateIsInvalid) = _currentNetworkActiveDebt();\n\n        if (currencyKey == pUSD) {\n            return (totalSystemValue, anyRateIsInvalid);\n        }\n\n        (uint currencyRate, bool currencyRateInvalid) = exchangeRates().rateAndInvalid(currencyKey);\n\n        totalSystemValue = totalSystemValue\n            .decimalToPreciseDecimal()\n            .divideDecimalRoundPrecise(currencyRate.decimalToPreciseDecimal())\n            .preciseDecimalToDecimal();\n\n        anyRateIsInvalid = anyRateIsInvalid || currencyRateInvalid;\n\n        // return (totalSystemValue.divideDecimalRound(currencyRate), anyRateIsInvalid || currencyRateInvalid);\n    }\n\n    /**\n     * @notice Get current network's issued debt\n     * @dev deprecated\n     * @return outbound amount\n     */\n    function currentNetworkIssuedDebt() external view returns (uint) {\n        uint issuedDebt = _currentNetworkIssuedDebt();\n        return issuedDebt;\n    }\n\n    /**\n     * @notice Get current network's active debt\n     * @dev needs to consider issued debt change by staking and burning between the cross chain synchronization\n     * @return outbound amount\n     */\n    function currentNetworkActiveDebt() external view returns (uint) {\n        (uint activeDebt, ) = _currentNetworkActiveDebt();\n        return activeDebt;\n    }\n\n    /**\n     * @notice Get connected chain's total issued debt\n     * @return issued debt\n     */\n    function crossNetworkIssuedDebtAll() external view returns (uint) {\n        return state().getCrossNetworkIssuedDebtAll();\n    }\n\n    /**\n     * @notice Get connected chain's total active debt\n     * @dev may need more robust way of secure the crosschain debts\n     * @return active debt\n     */\n    function crossNetworkActiveDebtAll() external view returns (uint) {\n        return state().getCrossNetworkActiveDebtAll();\n    }\n\n    /**\n     * @notice Get CURRENT debt percentage of network by total networks\n     * @dev external function\n     * @return current debt ratio of network by total network debt\n     */\n    function currentNetworkDebtPercentage() external view returns (uint) {\n        return _currentNetworkDebtPercentage();\n    }\n\n    /**\n     * @notice Get current network's in&outbound net amount\n     * @dev used for cross chain debt synchronization\n     * @return outbound amount\n     */\n    function movedAmount(uint _inboundOutbound, uint targetNetworkId) external view returns (uint) {\n        return bridgeStatepUSD().getMovedAmount(_inboundOutbound, targetNetworkId);\n    }\n\n    /**\n     * @notice Get current network's inbound amount compiled by other networks\n     * @dev used for cross chain debt synchronization\n     * @return inbound amount\n     */\n    function outboundSumToCurrentNetwork() external view returns (uint) {\n        return state().getOutboundSumToCurrentNetwork();\n    }\n\n    /**\n     * @notice Get current cross chain synchronization stale flag\n     * @dev used for cross chain debt synchronization\n     * @return inbound amount\n     */\n    function syncStale() external view returns (bool) {\n        return _syncStale(_syncTimestamp) && SafeDecimalMath.preciseUnit() != _currentNetworkDebtPercentage();\n    }\n\n    // ********************* Internal View functions ***************************\n\n    /**\n     * @notice Get CURRENT debt percentage of network by total networks\n     * @dev internal function\n     * @return current debt ratio of network by total network debt\n     */\n    function _currentNetworkDebtPercentage() internal view returns (uint networkPercentage) {\n        uint totalIssuedDebt = state().getTotalNetworkIssuedDebt();\n\n        networkPercentage = totalIssuedDebt == 0\n            ? SafeDecimalMath.preciseUnit()\n            : _currentNetworkIssuedDebt().decimalToPreciseDecimal().divideDecimalRoundPrecise(\n                totalIssuedDebt.decimalToPreciseDecimal()\n            );\n    }\n\n    /**\n     * @notice Get CURRENT network's issued debt\n     * @dev internal function\n     * @return currentNetworkIssuedDebt current network's issued debt\n     */\n    function _currentNetworkIssuedDebt() internal view returns (uint networkIssuedDebt) {\n        networkIssuedDebt = state().getCurrentNetworkIssuedDebt();\n    }\n\n    /**\n     * @notice Get CURRENT network's in&out included debt percentage of network by total networks\n     * @dev possibly deprecated\n     * @return currentNetworActivekDebt current network's active debt\n     */\n    function _currentNetworkActiveDebt() internal view returns (uint currentNetworActivekDebt, bool anyRateIsInvalid) {\n        bool cachStale;\n        (currentNetworActivekDebt, , anyRateIsInvalid, cachStale) = debtCache().cacheInfo();\n        anyRateIsInvalid = anyRateIsInvalid || cachStale;\n\n        // get current network's active debt by applying In&Out amount\n        (uint inboundAmount, uint outboundAmount) = _getInOutAmount();\n        currentNetworActivekDebt = currentNetworActivekDebt.add(outboundAmount).sub(inboundAmount);\n\n        // get current network's active debt after multiplying the debt percentage to the total active debt\n        currentNetworActivekDebt = currentNetworActivekDebt\n            .add(state().getCrossNetworkActiveDebtAll())\n            .decimalToPreciseDecimal()\n            .multiplyDecimalRoundPrecise(_currentNetworkDebtPercentage())\n            .preciseDecimalToDecimal();\n    }\n\n    /**\n     * @notice Get CURRENT network's in&out\n     * @dev internal function\n     * @return inboundAmount inbound amount\n     * @return outboundAmount  outbound amount\n     */\n    function _getInOutAmount() internal view returns (uint inboundAmount, uint outboundAmount) {\n        outboundAmount = bridgeStatepUSD().getTotalOutboundAmount();\n        inboundAmount = bridgeStatepUSD().getTotalInboundAmount();\n\n        // if the amount is less than the amount comiled by the other networks, which means bridge is not synchronized yet\n        uint outboundFromOtherNetwork = state().getOutboundSumToCurrentNetwork();\n        // so, we need to use the-others's sum of outbound targeted to current network\n        inboundAmount = inboundAmount < outboundFromOtherNetwork ? outboundFromOtherNetwork : inboundAmount;\n    }\n\n    /**\n     * @notice Get synced timestamp\n     * @dev Note a 0 timestamp means that the sync is uninitialised.\n     * @param timestamp cross chain synchronization timestamp\n     */\n    function _syncStale(uint timestamp) internal view returns (bool) {\n        return systemSettings().debtSnapshotStaleTime() < block.timestamp - timestamp || timestamp == 0 || _isStale;\n    }\n\n    //************************* Mutative functions ***************************\n    /**\n     * @notice set state instance address for cross chain state management\n     * @param crossChainStateAddress address of cross chain state instance\n     */\n    function setCrossChainState(address crossChainStateAddress) external onlyOwner {\n        _crossChainState = crossChainStateAddress;\n    }\n\n    /**\n     * @notice set debt manager address for cross chain debt operation\n     * @param debtManagerAddress address of cross chain instance\n     */\n    function setDebtManager(address debtManagerAddress) external onlyOwner {\n        _debtManager = debtManagerAddress;\n    }\n\n    /**\n     * @notice add multiple connected chain name ids and network ids for cross chain state management\n     * @param _networkIds network ids\n     */\n    // function addNetworkIds(uint[] calldata _networkIds) external onlyOwner {\n    //     for (uint i; i < _networkIds.length; i++) {\n    //         state().addNetworkId(_networkIds[i]);\n    //     }\n    // }\n\n    /**\n     * @notice add current network's issued debt\n     * @dev keep track of current network's issued debt\n     * @param _amount debt amount\n     */\n    function addCurrentNetworkIssuedDebt(uint _amount) external {\n        state().addIssuedDebt(state().getChainID(), _amount);\n\n        _setStaleByDebtChangeRate(_amount);\n\n        emit IssuedDebtAdded(_amount, state().getCurrentNetworkIssuedDebt(), block.timestamp, _isStale);\n    }\n\n    /**\n     * @notice subtract current network's issued debt\n     * @dev keep track of current network's issued debt\n     * @param _amount debt amount\n     */\n    function subtractCurrentNetworkIssuedDebt(uint _amount) external {\n        state().subtractIssuedDebt(state().getChainID(), _amount);\n\n        _setStaleByDebtChangeRate(_amount);\n\n        emit IssuedDebtSubtracted(_amount, state().getCurrentNetworkIssuedDebt(), block.timestamp, _isStale);\n    }\n\n    /**\n     * @notice set all connected cross-chain's issued debt\n     * @dev issued debt is the debt that is issued by the connected chain\n     * @param _chainIDs chain ids\n     * @param _amounts debt array\n     */\n    function setCrossNetworkIssuedDebtAll(uint[] calldata _chainIDs, uint[] calldata _amounts) external onlyDebtManager {\n        state().setCrossNetworkIssuedDebtAll(_chainIDs, _amounts);\n        _syncTimestamp = block.timestamp;\n        _isStale = false;\n\n        for (uint i; i < _chainIDs.length; i++) {\n            emit CrossChainIssuedDebtSynced(_chainIDs[i], _amounts[i], block.timestamp);\n        }\n    }\n\n    /**\n     * @notice set all connected cross-chain's active debt\n     * @dev active debt is the debt that is all issued pynths assets' floating amount calculated by the exchange rate\n     * @param _chainIDs chain ids\n     * @param _amounts debt array\n     */\n    function setCrossNetworkActiveDebtAll(uint[] calldata _chainIDs, uint[] calldata _amounts) external onlyDebtManager {\n        state().setCrossNetworkActiveDebtAll(_chainIDs, _amounts);\n        _syncTimestamp = block.timestamp;\n        _isStale = false;\n\n        for (uint i; i < _chainIDs.length; i++) {\n            emit CrossChainActiveDebtSynced(_chainIDs[i], _amounts[i], block.timestamp);\n        }\n    }\n\n    /**\n     * @notice set all connected cross-chain's issued debt and inbound amount\n     * @dev called by scheduler\n     * @param _chainIDs chain ids\n     * @param _activeDebts debt array\n     * @param _issuedDebts debt array\n     * @param _inbound current network's inbound amount compiled by other networks\n     */\n    function setCrossNetworkDebtsAll(\n        uint[] calldata _chainIDs,\n        uint[] calldata _issuedDebts,\n        uint[] calldata _activeDebts,\n        uint _inbound\n    ) external onlyDebtManager {\n        state().setCrossNetworkDebtsAll(_chainIDs, _issuedDebts, _activeDebts, _inbound);\n        _syncTimestamp = block.timestamp;\n        _isStale = false;\n\n        for (uint i; i < _chainIDs.length; i++) {\n            emit CrossChainSynced(_chainIDs[i], _issuedDebts[i], _activeDebts[i], block.timestamp);\n        }\n    }\n\n    /**\n     * @notice set current network's issued debt\n     * @dev calling the function is strictly limited to the setup period\n    //**** When upgrading the contract, the function SHOULD BE NOT BE CALLED AGAIN.\n     *      Instead, you need move to previose network's issued debt to the new contract \n     */\n    function setInitialCurrentIssuedDebt(address _prevState) external onlyOwner onlyDuringSetup {\n        state().setInitialCurrentIssuedDebt(ICrossChainState(_prevState).getCurrentNetworkIssuedDebt());\n    }\n\n    /**\n     * @notice set inbound to current network from other networks\n     * @param _amount debt amount\n     */\n    function setOutboundSumToCurrentNetwork(uint _amount) external onlyDebtManager {\n        state().setOutboundSumToCurrentNetwork(_amount);\n    }\n\n    // ************************* Internal Mutative functions ***************************\n\n    /**\n     * @notice set cross chain synchronization stale flag\n     * @dev internal function\n     * @param _amount changed debt amount\n     */\n    function _setStaleByDebtChangeRate(uint _amount) internal {\n        if (\n            state().getCurrentNetworkIssuedDebt() > 0 &&\n            _amount.divideDecimalRound(state().getCurrentNetworkIssuedDebt()) >= systemSettings().syncStaleThreshold()\n        ) {\n            _isStale = true;\n        }\n    }\n\n    //*********************** */ Modifiers *******************************\n    /**\n     * @notice check if the caller is debt manager\n     * @dev modifier\n     */\n    modifier onlyDebtManager() {\n        require(msg.sender == _debtManager, \"Only the debt manager may perform this action\");\n        _;\n    }\n\n    // /**\n    //  * @notice check if the caller is debtCache or exchanger\n    //  */\n    // modifier onlyDebtCache() {\n    //     _onlyDebtCache(); // Use an internal function to save code size.\n    //     _;\n    // }\n\n    // /**\n    //  * @notice check if the caller is debtCache or exchanger\n    //  */\n    // function _onlyDebtCache() internal view {\n    //     bool isDebtCache = msg.sender == address(debtCache());\n    //     require(isDebtCache, \"CrossChainManager: Only the debtCache contract can perform this action\");\n    // }\n\n    //****************** deprecated *******************/\n    //****************** deprecated *******************/\n    // View functions\n\n    // /**\n    //  * @notice Get cross-chain ids\n    //  * @return current debt ratio of network by total network debt\n    //  */\n    // function getCrossChainIds() external view returns (bytes32[] memory) {\n    //     return state().getCrossChainIds();\n    // }\n\n    // /**\n    //  * @notice Get connected chain's issued debt\n    //  * @dev possibly deprecated\n    //  * @param _chainID chain id\n    //  * @return issued debt\n    //  */\n    // function getCrossNetworkIssuedDebt(bytes32 _chainID) external view returns (uint) {\n    //     return state().getCrossNetworkIssuedDebt(_chainID);\n    // }\n\n    // /**\n    //  * @notice Get connected chain's active debt\n    //  * @param _chainID chain id\n    //  * @return active debt\n    //  */\n    // function getCrossNetworkActiveDebt(bytes32 _chainID) external view returns (uint) {\n    //     return state().getCrossNetworkActiveDebt(_chainID);\n    // }\n\n    // /**\n    //  * @notice return current sum of total network system debt\n    //  * @dev deprecated\n    //  * @return totalNetworkDebt uint\n    //  */\n    // function currentTotalNetworkDebt() external view returns (uint) {\n    //     return state().lastTotalNetworkDebtLedgerEntry();\n    // }\n\n    // /**\n    //  * @notice return user's cross chain debt entry index\n    //  * @dev possibly deprecated\n    //  */\n    // function userIssuanceDataForTotalNetwork(address account)\n    //     external\n    //     view\n    //     returns (uint crossChainDebtEntryIndex, uint userStateDebtLedgerIndex)\n    // {\n    //     (crossChainDebtEntryIndex, userStateDebtLedgerIndex) = state().getCrossNetworkUserData(account);\n    // }\n\n    // Mutative functions\n\n    // /**\n    //  * @notice add connected chain's issued debt\n    //  * @dev deprecated\n    //  * @param _chainID chain id\n    //  * @param _amount debt amount\n    //  */\n    // function addIssuedDebt(bytes32 _chainID, uint _amount) external {\n    //     state().addIssuedDebt(_chainID, _amount);\n    //     return;\n    // }\n\n    // /**\n    //  * @notice subtract connected chain's issued debt\n    //  * @dev deprecated\n    //  * @param _chainID chain id\n    //  * @param _amount debt amount\n    //  */\n    // function subtractIssuedDebt(bytes32 _chainID, uint _amount) external {\n    //     state().subtractIssuedDebt(_chainID, _amount);\n    //     return;\n    // }\n\n    // /**\n    //  * @notice save current sum of total network system debt to the state\n    //  * @dev deprecated\n    //  * @param totalNetworkDebt uint\n    //  */\n    // function appendTotalNetworkDebt(uint totalNetworkDebt) external onlyDebtManager {\n    //     state().appendTotalNetworkDebtLedger(totalNetworkDebt);\n    // }\n\n    /**\n     * @notice add amount to current sum of total network system debt\n     * @dev deprecated\n     * @param amount  debt amount\n     */\n    function addTotalNetworkDebt(uint amount) external {}\n\n    /**\n     * @notice subtract amount from current sum of total network system debt\n     * @dev deprecated\n     * @param amount debt amount\n     */\n    function subtractTotalNetworkDebt(uint amount) external {}\n\n    /**\n     * @notice set user's cross chain debt entry index\n     * @dev deprecated\n     * @param account user's address\n     */\n    function setCrossNetworkUserDebt(address account, uint userStateDebtLedgerIndex) external {}\n\n    /**\n     * @notice clear user's cross chain debt entry index\n     * @dev deprecated\n     * @param account user's address\n     */\n    function clearCrossNetworkUserDebt(address account) external {}\n\n    //*********************** Events ***************************\n    /**\n     * @notice Emitted when current network issued debt has added\n     * @param amount uint\n     * @param latestNetworkDebt uint\n     * @param timestamp uint\n     * @param syncInvalid bool\n     */\n    event IssuedDebtAdded(uint amount, uint latestNetworkDebt, uint timestamp, bool syncInvalid);\n\n    /**\n     * @notice Emitted when current network issued debt has subtracted\n     * @param amount uint\n     * @param latestNetworkDebt uint\n     * @param timestamp uint\n     * @param syncInvalid bool\n     */\n    event IssuedDebtSubtracted(uint amount, uint latestNetworkDebt, uint timestamp, bool syncInvalid);\n\n    /**\n     * @notice Emitted when current network debt has synchronized\n     * @param chainID uint\n     * @param issuedDebt uint\n     * @param activeDebt uint\n     * @param timestamp uint\n     */\n    event CrossChainSynced(uint chainID, uint issuedDebt, uint activeDebt, uint timestamp);\n\n    /**\n     * @notice Emitted when current network issued debt has subtracted\n     * @param chainID uint\n     * @param issuedDebt uint\n     * @param timestamp uint\n     */\n    event CrossChainIssuedDebtSynced(uint chainID, uint issuedDebt, uint timestamp);\n\n    /**\n     * @notice Emitted when current network active debt has subtracted\n     * @param chainID uint\n     * @param activeDebt uint\n     * @param timestamp uint\n     */\n    event CrossChainActiveDebtSynced(uint chainID, uint activeDebt, uint timestamp);\n}\n\n    ", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crossChainStateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtManagerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CrossChainActiveDebtSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CrossChainIssuedDebtSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CrossChainSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestNetworkDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"syncInvalid\",\"type\":\"bool\"}],\"name\":\"IssuedDebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestNetworkDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"syncInvalid\",\"type\":\"bool\"}],\"name\":\"IssuedDebtSubtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCurrentNetworkIssuedDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTotalNetworkDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"clearCrossNetworkUserDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossChainState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossNetworkActiveDebtAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crossNetworkIssuedDebtAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNetworkActiveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"currentNetworkActiveDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSystemValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNetworkDebtPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNetworkIssuedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"currentNetworkIssuedDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSystemValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyToMint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inboundOutbound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetNetworkId\",\"type\":\"uint256\"}],\"name\":\"movedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outboundSumToCurrentNetwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainStateAddress\",\"type\":\"address\"}],\"name\":\"setCrossChainState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setCrossNetworkActiveDebtAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_issuedDebts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_activeDebts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_inbound\",\"type\":\"uint256\"}],\"name\":\"setCrossNetworkDebtsAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setCrossNetworkIssuedDebtAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userStateDebtLedgerIndex\",\"type\":\"uint256\"}],\"name\":\"setCrossNetworkUserDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtManagerAddress\",\"type\":\"address\"}],\"name\":\"setDebtManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevState\",\"type\":\"address\"}],\"name\":\"setInitialCurrentIssuedDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOutboundSumToCurrentNetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subtractCurrentNetworkIssuedDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subtractTotalNetworkDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syncStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syncTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrossChainManager", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000cfe81e615c4409ffedd36faa99e88059caab92670000000000000000000000007015cd1e78ba1428d103b0c2513077b2826b64fc0000000000000000000000007fdd2dba122800f0a37d02a06636ad9d4d145ec700000000000000000000000008a76fb0b5511b0a10dc4141c4dad6e2471803ba", "EVMVersion": "Default", "Library": "SafeDecimalMath:6e0bff12512a94f3b1ecebe08203fe7f8f8fae64", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}