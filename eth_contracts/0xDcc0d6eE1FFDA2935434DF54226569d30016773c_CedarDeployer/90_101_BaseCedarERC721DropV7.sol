// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseCedarERC721DropV7.sol'

pragma solidity ^0.8.4;

import "../../api/impl/ICedarERC721Drop.sol";
import "../../api/ICedarFeatures.sol";
import "../../api/ICedarVersioned.sol";
import "../../api/IMulticallable.sol";
import "../../api/issuance/ICedarNFTIssuance.sol";
import "../../api/issuance/INFTSupply.sol";
import "../../api/standard/IERC721.sol";
import "../../api/standard/IERC2981.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/baseURI/ICedarUpdateBaseURI.sol";
import "../../api/metadata/IContractMetadata.sol";
import "../../api/metadata/ICedarNFTMetadata.sol";
import "../../api/agreement/ICedarAgreement.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/agreement/ICedarAgreement.sol";
import "../../api/issuance/ICedarNFTIssuance.sol";
import "../../api/lazymint/ICedarLazyMint.sol";
import "../../api/pausable/ICedarPausable.sol";
import "../../api/metadata/IContractMetadata.sol";
import "../../api/baseURI/ICedarUpdateBaseURI.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/issuance/INFTLimitSupply.sol";

/// Delegate features
interface IDelegateBaseCedarERC721DropV7 is IRestrictedAgreementV0, IRestrictedNFTIssuanceV0, IRestrictedLazyMintV0, IRestrictedPausableV0, IRestrictedMetadataV0, IRestrictedUpdateBaseURIV0, IRestrictedRoyaltyV0, IRestrictedPrimarySaleV1, IRestrictedNFTLimitSupplyV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseCedarERC721DropV7 is ICedarFeaturesV0, ICedarVersionedV2, IMulticallableV0, IPublicNFTIssuanceV0, INFTSupplyV0, IERC721V1, IERC2981V0, IPublicRoyaltyV0, IPublicUpdateBaseURIV0, IPublicMetadataV0, ICedarNFTMetadataV1, IPublicAgreementV0, IPublicPrimarySaleV1 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](20);
        features[0] = "ICedarFeatures.sol:ICedarFeaturesV0";
        features[1] = "ICedarVersioned.sol:ICedarVersionedV2";
        features[2] = "IMulticallable.sol:IMulticallableV0";
        features[3] = "issuance/ICedarNFTIssuance.sol:IPublicNFTIssuanceV0";
        features[4] = "issuance/INFTSupply.sol:INFTSupplyV0";
        features[5] = "royalties/IRoyalty.sol:IPublicRoyaltyV0";
        features[6] = "baseURI/ICedarUpdateBaseURI.sol:IPublicUpdateBaseURIV0";
        features[7] = "metadata/IContractMetadata.sol:IPublicMetadataV0";
        features[8] = "metadata/ICedarNFTMetadata.sol:ICedarNFTMetadataV1";
        features[9] = "agreement/ICedarAgreement.sol:IPublicAgreementV0";
        features[10] = "primarysale/IPrimarySale.sol:IPublicPrimarySaleV1";
        features[11] = "agreement/ICedarAgreement.sol:IRestrictedAgreementV0";
        features[12] = "issuance/ICedarNFTIssuance.sol:IRestrictedNFTIssuanceV0";
        features[13] = "lazymint/ICedarLazyMint.sol:IRestrictedLazyMintV0";
        features[14] = "pausable/ICedarPausable.sol:IRestrictedPausableV0";
        features[15] = "metadata/IContractMetadata.sol:IRestrictedMetadataV0";
        features[16] = "baseURI/ICedarUpdateBaseURI.sol:IRestrictedUpdateBaseURIV0";
        features[17] = "royalties/IRoyalty.sol:IRestrictedRoyaltyV0";
        features[18] = "primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV1";
        features[19] = "issuance/INFTLimitSupply.sol:IRestrictedNFTLimitSupplyV0";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 7;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/ICedarERC721Drop.sol:ICedarERC721DropV7";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID == type(IERC165Upgradeable).interfaceId) || ((interfaceID == type(ICedarFeaturesV0).interfaceId) || ((interfaceID == type(ICedarVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IPublicNFTIssuanceV0).interfaceId) || ((interfaceID == type(INFTSupplyV0).interfaceId) || ((interfaceID == type(IERC721V1).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IPublicRoyaltyV0).interfaceId) || ((interfaceID == type(IPublicUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IPublicMetadataV0).interfaceId) || ((interfaceID == type(ICedarNFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicAgreementV0).interfaceId) || ((interfaceID == type(IPublicPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedAgreementV0).interfaceId) || ((interfaceID == type(IRestrictedNFTIssuanceV0).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV0).interfaceId) || ((interfaceID == type(IRestrictedPausableV0).interfaceId) || ((interfaceID == type(IRestrictedMetadataV0).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV0).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedNFTLimitSupplyV0).interfaceId) || (interfaceID == type(ICedarERC721DropV7).interfaceId)))))))))))))))))))))));
    }

    function isICedarFeaturesV0() override public pure returns (bool) {
        return true;
    }
}