{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-v4/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/codec/WordCodec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n\\n/// @dev A subset copied from the following contracts:\\n///\\n/// + `balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol`\\n/// + `balancer-labs/v2-solidity-utils/contracts/helpers/WordCodecHelpers.sol`\\nlibrary WordCodec {\\n  /// @dev Inserts an unsigned integer of bitLength, shifted by an offset, into a 256 bit word,\\n  /// replacing the old value. Returns the new word.\\n  function insertUint(\\n    bytes32 word,\\n    uint256 value,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (bytes32 result) {\\n    // Equivalent to:\\n    // uint256 mask = (1 << bitLength) - 1;\\n    // bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n    // result = clearedWord | bytes32(value << offset);\\n    assembly {\\n      let mask := sub(shl(bitLength, 1), 1)\\n      let clearedWord := and(word, not(shl(offset, mask)))\\n      result := or(clearedWord, shl(offset, value))\\n    }\\n  }\\n\\n  /// @dev Decodes and returns an unsigned integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n  function decodeUint(\\n    bytes32 word,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (uint256 result) {\\n    // Equivalent to:\\n    // result = uint256(word >> offset) & ((1 << bitLength) - 1);\\n    assembly {\\n      result := and(shr(offset, word), sub(shl(bitLength, 1), 1))\\n    }\\n  }\\n\\n  /// @dev Inserts a signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n  /// the new word.\\n  ///\\n  /// Assumes `value` can be represented using `bitLength` bits.\\n  function insertInt(\\n    bytes32 word,\\n    int256 value,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 mask = (1 << bitLength) - 1;\\n      bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n      // Integer values need masking to remove the upper bits of negative values.\\n      return clearedWord | bytes32((uint256(value) & mask) << offset);\\n    }\\n  }\\n\\n  /// @dev Decodes and returns a signed integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n  function decodeInt(\\n    bytes32 word,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (int256 result) {\\n    unchecked {\\n      int256 maxInt = int256((1 << (bitLength - 1)) - 1);\\n      uint256 mask = (1 << bitLength) - 1;\\n\\n      int256 value = int256(uint256(word >> offset) & mask);\\n      // In case the decoded value is greater than the max positive integer that can be represented with bitLength\\n      // bits, we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n      // representation.\\n      //\\n      // Equivalent to:\\n      // result = value > maxInt ? (value | int256(~mask)) : value;\\n      assembly {\\n        result := or(mul(gt(value, maxInt), not(mask)), value)\\n      }\\n    }\\n  }\\n\\n  /// @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n  function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool result) {\\n    // Equivalent to:\\n    // result = (uint256(word >> offset) & 1) == 1;\\n    assembly {\\n      result := and(shr(offset, word), 1)\\n    }\\n  }\\n\\n  /// @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n  /// word.\\n  function insertBool(\\n    bytes32 word,\\n    bool value,\\n    uint256 offset\\n  ) internal pure returns (bytes32 result) {\\n    // Equivalent to:\\n    // bytes32 clearedWord = bytes32(uint256(word) & ~(1 << offset));\\n    // bytes32 referenceInsertBool = clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n    assembly {\\n      let clearedWord := and(word, not(shl(offset, 1)))\\n      result := or(clearedWord, shl(offset, value))\\n    }\\n  }\\n\\n  function clearWordAtPosition(\\n    bytes32 word,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (bytes32 clearedWord) {\\n    unchecked {\\n      uint256 mask = (1 << bitLength) - 1;\\n      clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/common/rewards/distributor/IMultipleRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMultipleRewardDistributor {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when new reward token is registered.\\n  ///\\n  /// @param token The address of reward token.\\n  /// @param distributor The address of reward distributor.\\n  event RegisterRewardToken(address indexed token, address indexed distributor);\\n\\n  /// @notice Emitted when the reward distributor is updated.\\n  ///\\n  /// @param token The address of reward token.\\n  /// @param oldDistributor The address of previous reward distributor.\\n  /// @param newDistributor The address of current reward distributor.\\n  event UpdateRewardDistributor(address indexed token, address indexed oldDistributor, address indexed newDistributor);\\n\\n  /// @notice Emitted when a reward token is unregistered.\\n  ///\\n  /// @param token The address of reward token.\\n  event UnregisterRewardToken(address indexed token);\\n\\n  /// @notice Emitted when a reward token is deposited.\\n  ///\\n  /// @param token The address of reward token.\\n  /// @param amount The amount of reward token deposited.\\n  event DepositReward(address indexed token, uint256 amount);\\n\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when caller access an unactive reward token.\\n  error NotActiveRewardToken();\\n\\n  /// @dev Thrown when the address of reward distributor is `address(0)`.\\n  error RewardDistributorIsZero();\\n\\n  /// @dev Thrown when caller is not reward distributor.\\n  error NotRewardDistributor();\\n\\n  /// @dev Thrown when caller try to register an existing reward token.\\n  error DuplicatedRewardToken();\\n\\n  /// @dev Thrown when caller try to unregister a reward with pending rewards.\\n  error RewardDistributionNotFinished();\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address of reward distributor.\\n  ///\\n  /// @param token The address of reward token.\\n  function distributors(address token) external view returns (address);\\n\\n  /// @notice Return the list of active reward tokens.\\n  function getActiveRewardTokens() external view returns (address[] memory);\\n\\n  /// @notice Return the list of historical reward tokens.\\n  function getHistoricalRewardTokens() external view returns (address[] memory);\\n\\n  /// @notice Return the amount of pending distributed rewards in current period.\\n  ///\\n  /// @param token The address of reward token.\\n  /// @return distributable The amount of reward token can be distributed in current period.\\n  /// @return undistributed The amount of reward token still locked in current period.\\n  function pendingRewards(address token) external view returns (uint256 distributable, uint256 undistributed);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Deposit new rewards to this contract.\\n  ///\\n  /// @param token The address of reward token.\\n  /// @param amount The amount of new rewards.\\n  function depositReward(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvexVirtualBalanceRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConvexVirtualBalanceRewardPool {\\n  function rewardToken() external view returns (address);\\n\\n  function earned(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IStashTokenWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IStashTokenWrapper {\\n  function token() external view returns (address);\\n\\n  function rewardPool() external view returns (address);\\n\\n  function isInvalid() external view returns (bool);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address _account) external view returns (uint256);\\n\\n  function transfer(address _recipient, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexBasicRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConvexBasicRewards {\\n  function pid() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function stakeFor(address, uint256) external returns (bool);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function withdrawAll(bool) external returns (bool);\\n\\n  function withdraw(uint256, bool) external returns (bool);\\n\\n  function withdrawAndUnwrap(uint256, bool) external returns (bool);\\n\\n  function getReward() external returns (bool);\\n\\n  function stake(uint256) external returns (bool);\\n\\n  function rewardToken() external view returns (address);\\n\\n  function extraRewards(uint256) external view returns (address);\\n\\n  function extraRewardsLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\npragma abicoder v2;\\n\\ninterface IConvexBooster {\\n  struct PoolInfo {\\n    address lptoken;\\n    address token;\\n    address gauge;\\n    address crvRewards;\\n    address stash;\\n    bool shutdown;\\n  }\\n\\n  function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n  function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n  function deposit(\\n    uint256 _pid,\\n    uint256 _amount,\\n    bool _stake\\n  ) external returns (bool);\\n\\n  function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n  function earmarkFees() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/voting-escrow/ILiquidityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidityManager {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the ratio for manager is updated.\\n  /// @param oldRatio The value of the previous ratio, multipled by 1e9.\\n  /// @param newRatio The value of the current ratio, multipled by 1e9.\\n  event UpdateManagerRatio(uint256 oldRatio, uint256 newRatio);\\n\\n  /// @notice Emitted when the ratio for harvester is updated.\\n  /// @param oldRatio The value of the previous ratio, multipled by 1e9.\\n  /// @param newRatio The value of the current ratio, multipled by 1e9.\\n  event UpdateHarvesterRatio(uint256 oldRatio, uint256 newRatio);\\n\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when try to kill the manager more than once.\\n  error AlreadyKilled();\\n\\n  /// @dev Thrown when the call is not operator.\\n  error CallerIsNotOperator();\\n\\n  /// @dev Thrown when the manager ratio exceeds `MAX_MANAGER_RATIO`.\\n  error ManagerRatioTooLarge();\\n\\n  /// @dev Thrown when the harvester ratio exceeds `MAX_HARVESTER_RATIO`.\\n  error HarvesterRatioTooLarge();\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return whether the manager is active.\\n  function isActive() external view returns (bool);\\n\\n  /// @notice Return the list of reward tokens.\\n  function getRewardTokens() external view returns (address[] memory);\\n\\n  /// @notice Return the fee ratio distributed to treasury, multipled by 1e9.\\n  function getManagerRatio() external view returns (uint256);\\n\\n  /// @notice Return the fee ratio distributed to harvester, multipled by 1e9.\\n  function getHarvesterRatio() external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Deposit token to corresponding manager.\\n  /// @dev Requirements:\\n  ///   + Caller should make sure the token is already transfered into the manager contract.\\n  ///   + Caller should make sure the deposit amount is greater than zero.\\n  ///\\n  /// @param receiver The address of recipient who will receive the share.\\n  /// @param amount The amount of token to deposit.\\n  /// @param manage Whether to deposit the token to underlying strategy.\\n  function deposit(\\n    address receiver,\\n    uint256 amount,\\n    bool manage\\n  ) external;\\n\\n  /// @notice Withdraw underlying token from corresponding manager.\\n  /// @dev Requirements:\\n  ///   + Caller should make sure the withdraw amount is greater than zero.\\n  ///\\n  /// @param receiver The address of recipient who will receive the token.\\n  /// @param amount The amount of token to withdraw.\\n  function withdraw(address receiver, uint256 amount) external;\\n\\n  /// @notice Emergency function to execute arbitrary call.\\n  /// @dev This function should be only used in case of emergency. It should never be called explicitly\\n  ///  in any contract in normal case.\\n  ///\\n  /// @param to The address of target contract to call.\\n  /// @param value The value passed to the target contract.\\n  /// @param data The calldata pseed to the target contract.\\n  function execute(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external payable returns (bool, bytes memory);\\n\\n  /// @notice Manage the deposited token. Usually the token will be\\n  /// deposited to another protocol which could generate more yields.\\n  function manage() external;\\n\\n  /// @notice Harvest pending rewards from underlying protocol.\\n  /// @param receiver The address of the recipient for harvest incentive.\\n  function harvest(address receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/voting-escrow/manager/ConvexCurveManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IMultipleRewardDistributor } from \\\"../../common/rewards/distributor/IMultipleRewardDistributor.sol\\\";\\nimport { IConvexVirtualBalanceRewardPool } from \\\"../../interfaces/convex/IConvexVirtualBalanceRewardPool.sol\\\";\\nimport { IStashTokenWrapper } from \\\"../../interfaces/convex/IStashTokenWrapper.sol\\\";\\nimport { ILiquidityManager } from \\\"../../interfaces/voting-escrow/ILiquidityManager.sol\\\";\\nimport { IConvexBasicRewards } from \\\"../../interfaces/IConvexBasicRewards.sol\\\";\\nimport { IConvexBooster } from \\\"../../interfaces/IConvexBooster.sol\\\";\\n\\nimport { WordCodec } from \\\"../../common/codec/WordCodec.sol\\\";\\n\\nimport { LiquidityManagerBase } from \\\"./LiquidityManagerBase.sol\\\";\\n\\ncontract ConvexCurveManager is LiquidityManagerBase {\\n  using SafeERC20 for IERC20;\\n  using WordCodec for bytes32;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The address of Convex CVX token.\\n  address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n\\n  /// @dev The address of Convex Booster.\\n  address private constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n\\n  /// @dev The offset of pid in `_miscData`.\\n  uint256 private constant PID_OFFSET = 61;\\n\\n  /// @dev The rewarder of pid in `_miscData`.\\n  uint256 private constant REWARDER_OFFSET = 77;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @dev the list of reward tokens.\\n  address[] private rewards;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  function initialize(\\n    address _operator,\\n    address _token,\\n    address _rewarder\\n  ) external initializer {\\n    __LiquidityManagerBase_init(_operator, _token);\\n\\n    uint256 _pid = IConvexBasicRewards(_rewarder).pid();\\n\\n    bytes32 _data = _miscData;\\n    _data = _data.insertUint(_pid, PID_OFFSET, 16);\\n    _data = _data.insertUint(uint256(uint160(_rewarder)), REWARDER_OFFSET, 160);\\n    _miscData = _data;\\n\\n    IERC20(_token).safeApprove(BOOSTER, type(uint256).max);\\n    syncRewardToken();\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ILiquidityManager\\n  function getRewardTokens() external view returns (address[] memory) {\\n    return rewards;\\n  }\\n\\n  /// @notice Return the pid in Convex Booster.\\n  function pid() public view returns (uint256) {\\n    return _miscData.decodeUint(PID_OFFSET, 16);\\n  }\\n\\n  /// @notice Return the address of rewarder.\\n  function rewarder() public view returns (address) {\\n    return address(uint160(_miscData.decodeUint(REWARDER_OFFSET, 160)));\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Sync reward tokens from ConvexBasicRewards contract.\\n  function syncRewardToken() public {\\n    delete rewards;\\n\\n    address staker = rewarder();\\n    rewards.push(IConvexBasicRewards(staker).rewardToken());\\n\\n    uint256 _length = IConvexBasicRewards(staker).extraRewardsLength();\\n    bool _hasCVX = false;\\n    for (uint256 i = 0; i < _length; i++) {\\n      address _rewarder = IConvexBasicRewards(staker).extraRewards(i);\\n      address _wrapper = IConvexVirtualBalanceRewardPool(_rewarder).rewardToken();\\n      // old rewarders didn't use token wrapper\\n      try IStashTokenWrapper(_wrapper).token() returns (address _token) {\\n        if (_token == CVX) _hasCVX = true;\\n        rewards.push(_token);\\n      } catch {\\n        if (_wrapper == CVX) _hasCVX = true;\\n        rewards.push(_wrapper);\\n      }\\n    }\\n    if (!_hasCVX) rewards.push(CVX);\\n\\n    _length = rewards.length;\\n    for (uint256 i = 0; i < _length; ++i) {\\n      address _token = rewards[i];\\n      IERC20(_token).safeApprove(operator, 0);\\n      IERC20(_token).safeApprove(operator, type(uint256).max);\\n    }\\n  }\\n\\n  /// @inheritdoc ILiquidityManager\\n  function manage() public override {\\n    uint256 _balance = IERC20(token).balanceOf(address(this));\\n    if (_balance == 0) return;\\n\\n    _manageUnderlying(address(0), _balance, false);\\n  }\\n\\n  /// @inheritdoc ILiquidityManager\\n  function harvest(address _receiver) external {\\n    // try to deposit first\\n    uint256 _balance = IERC20(token).balanceOf(address(this));\\n    if (_balance > 0) {\\n      IConvexBooster(BOOSTER).deposit(pid(), _balance, true);\\n    }\\n\\n    // harvest\\n    IConvexBasicRewards(rewarder()).getReward();\\n\\n    // distribute rewards\\n    uint256 _harvesterRatio = getHarvesterRatio();\\n    uint256 _managerRatio = getManagerRatio();\\n    uint256 _length = rewards.length;\\n    address _operator = operator;\\n    for (uint256 i = 0; i < _length; ++i) {\\n      address _rewardToken = rewards[i];\\n      uint256 _rewardAmount = IERC20(_rewardToken).balanceOf(address(this)) - incentive[_rewardToken];\\n      if (_rewardAmount == 0) continue;\\n\\n      unchecked {\\n        uint256 _incentive = (_rewardAmount * _managerRatio) / FEE_PRECISION;\\n        if (_incentive > 0) incentive[_rewardToken] += _incentive;\\n\\n        uint256 _bounty = (_rewardAmount * _harvesterRatio) / FEE_PRECISION;\\n        if (_bounty > 0) {\\n          IERC20(_rewardToken).safeTransfer(_receiver, _bounty);\\n        }\\n\\n        IMultipleRewardDistributor(_operator).depositReward(_rewardToken, _rewardAmount - _incentive - _bounty);\\n      }\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @inheritdoc LiquidityManagerBase\\n  function _managedBalance() internal view virtual override returns (uint256) {\\n    unchecked {\\n      return IERC20(token).balanceOf(address(this)) + IConvexBasicRewards(rewarder()).balanceOf(address(this));\\n    }\\n  }\\n\\n  /// @inheritdoc LiquidityManagerBase\\n  function _deposit(\\n    address _receiver,\\n    uint256,\\n    bool _manage\\n  ) internal virtual override {\\n    if (_manage) {\\n      // deposit to underlying strategy\\n      uint256 _balance = IERC20(token).balanceOf(address(this));\\n      if (_balance > 0) {\\n        _manageUnderlying(_receiver, _balance, true);\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc LiquidityManagerBase\\n  function _withdraw(address _receiver, uint256 _amount) internal virtual override {\\n    if (_amount > 0) {\\n      uint256 _balance = IERC20(token).balanceOf(address(this));\\n      if (_amount > _balance) {\\n        unchecked {\\n          IConvexBasicRewards(rewarder()).withdrawAndUnwrap(_amount - _balance, false);\\n        }\\n      }\\n      IERC20(token).safeTransfer(_receiver, _amount);\\n    }\\n  }\\n\\n  /// @dev Internal function to manage underlying assets\\n  function _manageUnderlying(\\n    address _receiver,\\n    uint256 _balance,\\n    bool _incentived\\n  ) internal {\\n    // deposit to booster\\n    IConvexBooster(BOOSTER).deposit(pid(), _balance, true);\\n\\n    // send incentive\\n    if (_incentived) {\\n      uint256 _length = rewards.length;\\n      for (uint256 i = 0; i < _length; ++i) {\\n        address _rewardToken = rewards[i];\\n        uint256 _incentive = incentive[_rewardToken];\\n        if (_incentive > 0) {\\n          IERC20(_rewardToken).safeTransfer(_receiver, _incentive);\\n          incentive[_rewardToken] = 0;\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/voting-escrow/manager/LiquidityManagerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts-v4/access/Ownable2Step.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-v4/proxy/utils/Initializable.sol\\\";\\n\\nimport { WordCodec } from \\\"../../common/codec/WordCodec.sol\\\";\\n\\nimport { ILiquidityManager } from \\\"../../interfaces/voting-escrow/ILiquidityManager.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\nabstract contract LiquidityManagerBase is Initializable, Ownable2Step, ILiquidityManager {\\n  using WordCodec for bytes32;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The offset of active flag in `_miscData`.\\n  uint256 private constant ACTIVE_FLAG_OFFSET = 0;\\n\\n  /// @dev The offset of manager ratio in `_miscData`.\\n  uint256 private constant MANAGER_RATIO_OFFSET = 1;\\n\\n  /// @dev The offset of harvester ratio in `_miscData`.\\n  uint256 private constant HARVESTER_RATIO_OFFSET = 31;\\n\\n  /// @dev The maximum manager ratio.\\n  uint256 private constant MAX_MANAGER_RATIO = 5e8; // 20%\\n\\n  /// @dev The maximum harvester ratio.\\n  uint256 private constant MAX_HARVESTER_RATIO = 1e8; // 20%\\n\\n  /// @dev The fee denominator used for rate calculation.\\n  uint256 internal constant FEE_PRECISION = 1e9;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address of operator, usually the `LiquidityGauge` contract.\\n  address public operator;\\n\\n  /// @notice The address of managed token.\\n  address public token;\\n\\n  /// @notice Mapping from reward token address to the amount of incentive for manager.\\n  mapping(address => uint256) public incentive;\\n\\n  /// @dev `_miscData` is a storage slot that can be used to store unrelated pieces of information.\\n  /// All LiquidityManagerBase store the *active flag*, *manager ratio* and *harvester ratio*, but\\n  /// the `miscData`can be extended to store more pieces of information.\\n  ///\\n  /// The *active flag* is stored in the first bit, and the *manager ratio* is stored in the next most\\n  /// significant 30 bits, and the *harvester ratio* is stored in the next most significant 30 bits,\\n  /// leaving the remaining 195 bits free to store any other information derived pools might need.\\n  ///\\n  /// - The *manager ratio* and *harvester ratio* are charged each time when harvester harvest the pool revenue.\\n  ///\\n  /// [ active flag | manager ratio | harvester ratio | available ]\\n  /// [    1 bit    |    30 bits    |     30 bits     |  195 bits ]\\n  /// [ MSB                                                   LSB ]\\n  bytes32 internal _miscData;\\n\\n  /// @dev reserved slots.\\n  uint256[46] private __gap;\\n\\n  /*************\\n   * Modifiers *\\n   *************/\\n\\n  modifier onlyOperator() {\\n    if (_msgSender() != operator) {\\n      revert CallerIsNotOperator();\\n    }\\n    _;\\n  }\\n\\n  modifier whenNotKilled() {\\n    if (!isActive()) revert AlreadyKilled();\\n    _;\\n  }\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  function __LiquidityManagerBase_init(address _operator, address _token) internal onlyInitializing {\\n    _transferOwnership(_msgSender());\\n\\n    operator = _operator;\\n    token = _token;\\n\\n    // Set active\\n    _miscData = _miscData.insertBool(true, ACTIVE_FLAG_OFFSET);\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ILiquidityManager\\n  function isActive() public view override returns (bool) {\\n    return _miscData.decodeBool(ACTIVE_FLAG_OFFSET);\\n  }\\n\\n  /// @inheritdoc ILiquidityManager\\n  function getManagerRatio() public view override returns (uint256) {\\n    return _miscData.decodeUint(MANAGER_RATIO_OFFSET, 30);\\n  }\\n\\n  /// @inheritdoc ILiquidityManager\\n  function getHarvesterRatio() public view override returns (uint256) {\\n    return _miscData.decodeUint(HARVESTER_RATIO_OFFSET, 30);\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ILiquidityManager\\n  function deposit(\\n    address _receiver,\\n    uint256 _amount,\\n    bool _manage\\n  ) external onlyOperator whenNotKilled {\\n    _deposit(_receiver, _amount, _manage);\\n  }\\n\\n  /// @inheritdoc ILiquidityManager\\n  function withdraw(address _receiver, uint256 _amount) external onlyOperator whenNotKilled {\\n    _withdraw(_receiver, _amount);\\n  }\\n\\n  /************************\\n   * Restricted Functions *\\n   ************************/\\n\\n  /// @inheritdoc ILiquidityManager\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable onlyOwner returns (bool, bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n    return (success, result);\\n  }\\n\\n  /// @notice Kill the liquidity manager and withdraw all token back to operator.\\n  function kill() external onlyOwner whenNotKilled {\\n    _miscData = _miscData.insertBool(false, ACTIVE_FLAG_OFFSET);\\n\\n    // Send all funds back to operator\\n    uint256 _balance = _managedBalance();\\n    _withdraw(operator, _balance);\\n  }\\n\\n  /// @notice Update the fee ratio distributed to manager.\\n  /// @param _newRatio The new ratio to update, multipled by 1e9.\\n  function updateManagerRatio(uint32 _newRatio) external onlyOwner {\\n    if (uint256(_newRatio) > MAX_MANAGER_RATIO) {\\n      revert ManagerRatioTooLarge();\\n    }\\n\\n    bytes32 _data = _miscData;\\n    uint256 _oldRatio = _miscData.decodeUint(MANAGER_RATIO_OFFSET, 30);\\n    _miscData = _data.insertUint(_newRatio, MANAGER_RATIO_OFFSET, 30);\\n\\n    emit UpdateManagerRatio(_oldRatio, _newRatio);\\n  }\\n\\n  /// @notice Update the fee ratio distributed to harvester.\\n  /// @param _newRatio The new ratio to update, multipled by 1e9.\\n  function updateHarvesterRatio(uint32 _newRatio) external onlyOwner {\\n    if (uint256(_newRatio) > MAX_HARVESTER_RATIO) {\\n      revert HarvesterRatioTooLarge();\\n    }\\n\\n    bytes32 _data = _miscData;\\n    uint256 _oldRatio = _miscData.decodeUint(HARVESTER_RATIO_OFFSET, 30);\\n    _miscData = _data.insertUint(_newRatio, HARVESTER_RATIO_OFFSET, 30);\\n\\n    emit UpdateHarvesterRatio(_oldRatio, _newRatio);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to return all managed tokens.\\n  function _managedBalance() internal view virtual returns (uint256);\\n\\n  /// @dev Internal function to deposit token.\\n  ///\\n  /// @param _receiver The address of recipient who will receive the share.\\n  /// @param _amount The amount of token to deposit.\\n  /// @param _manage Whether to deposit the token to underlying strategy.\\n  function _deposit(\\n    address _receiver,\\n    uint256 _amount,\\n    bool _manage\\n  ) internal virtual;\\n\\n  /// @dev Internal function to withdraw token.\\n  ///\\n  /// @param _receiver The address of recipient who will receive the token.\\n  /// @param _amount The amount of token to withdraw.\\n  function _withdraw(address _receiver, uint256 _amount) internal virtual;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyKilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HarvesterRatioTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerRatioTooLarge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateHarvesterRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateManagerRatio\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_manage\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvesterRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newRatio\",\"type\":\"uint32\"}],\"name\":\"updateHarvesterRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newRatio\",\"type\":\"uint32\"}],\"name\":\"updateManagerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexCurveManager", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}