{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-09-25\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.19;\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tif (c < a) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b > a) return (false, 0);\r\n\t\t\treturn (true, a - b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t\t// benefit is lost if 'b' is also tested.\r\n\t\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\t\tif (a == 0) return (true, 0);\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tif (c / a != b) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a / b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a % b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a * b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b <= a, errorMessage);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a / b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a % b;\r\n\t\t}\r\n\t}\r\n}\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\t_checkOwner();\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if the sender is not the owner.\r\n\t */\r\n\tfunction _checkOwner() internal view virtual {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `to`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address to, uint256 amount) external returns(bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `from` to `to` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external returns(bool);\r\n}\r\n\r\nlibrary Address {\r\n\t/**\r\n\t * @dev The ETH balance of the account is not enough to perform the operation.\r\n\t */\r\n\terror AddressInsufficientBalance(address account);\r\n\r\n\t/**\r\n\t * @dev There's no code at `target` (it is not a contract).\r\n\t */\r\n\terror AddressEmptyCode(address target);\r\n\r\n\t/**\r\n\t * @dev A call to an address target failed. The target may have reverted.\r\n\t */\r\n\terror FailedInnerCall();\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\tif (address(this).balance < amount) {\r\n\t\t\trevert AddressInsufficientBalance(address(this));\r\n\t\t}\r\n\r\n\t\t(bool success, ) = recipient.call {\r\n\t\t\tvalue: amount\r\n\t\t}(\"\");\r\n\t\tif (!success) {\r\n\t\t\trevert FailedInnerCall();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason or custom error, it is bubbled\r\n\t * up by this function (like regular Solidity function calls). However, if\r\n\t * the call reverted with no returned reason, this function reverts with a\r\n\t * {FailedInnerCall} error.\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns(bytes memory) {\r\n\t\tif (address(this).balance < value) {\r\n\t\t\trevert AddressInsufficientBalance(address(this));\r\n\t\t}\r\n\t\t(bool success, bytes memory returndata) = target.call {\r\n\t\t\tvalue: value\r\n\t\t}(data);\r\n\t\treturn verifyCallResultFromTarget(target, success, returndata);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns(bytes memory) {\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResultFromTarget(target, success, returndata);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns(bytes memory) {\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResultFromTarget(target, success, returndata);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n\t * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n\t * unsuccessful call.\r\n\t */\r\n\tfunction verifyCallResultFromTarget(\r\n\t\taddress target,\r\n\t\tbool success,\r\n\t\tbytes memory returndata\r\n\t) internal view returns(bytes memory) {\r\n\t\tif (!success) {\r\n\t\t\t_revert(returndata);\r\n\t\t} else {\r\n\t\t\t// only check if target is a contract if the call was successful and the return data is empty\r\n\t\t\t// otherwise we already know that it was a contract\r\n\t\t\tif (returndata.length == 0 && target.code.length == 0) {\r\n\t\t\t\trevert AddressEmptyCode(target);\r\n\t\t\t}\r\n\t\t\treturn returndata;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n\t * revert reason or with a default {FailedInnerCall} error.\r\n\t */\r\n\tfunction verifyCallResult(bool success, bytes memory returndata) internal pure returns(bytes memory) {\r\n\t\tif (!success) {\r\n\t\t\t_revert(returndata);\r\n\t\t} else {\r\n\t\t\treturn returndata;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n\t */\r\n\tfunction _revert(bytes memory returndata) private pure {\r\n\t\t// Look for revert reason and bubble it up if present\r\n\t\tif (returndata.length > 0) {\r\n\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\t\t\t/// @solidity memory-safe-assembly\r\n\t\t\tassembly {\r\n\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trevert FailedInnerCall();\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface IERC20Permit {\r\n\t/**\r\n\t * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n\t * given ``owner``'s signed approval.\r\n\t *\r\n\t * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n\t * ordering also apply here.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `deadline` must be a timestamp in the future.\r\n\t * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n\t * over the EIP712-formatted function arguments.\r\n\t * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n\t *\r\n\t * For more information on the signature format, see the\r\n\t * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n\t * section].\r\n\t *\r\n\t * CAUTION: See Security Considerations above.\r\n\t */\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Returns the current nonce for `owner`. This value must be\r\n\t * included whenever a signature is generated for {permit}.\r\n\t *\r\n\t * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n\t * prevents a signature from being used multiple times.\r\n\t */\r\n\tfunction nonces(address owner) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n\t */\r\n\t// solhint-disable-next-line func-name-mixedcase\r\n\tfunction DOMAIN_SEPARATOR() external view returns(bytes32);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\tusing Address\r\n\tfor address;\r\n\r\n\t/**\r\n\t * @dev An operation with an ERC20 token failed.\r\n\t */\r\n\terror SafeERC20FailedOperation(address token);\r\n\r\n\t/**\r\n\t * @dev Indicates a failed `decreaseAllowance` request.\r\n\t */\r\n\terror SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n\t/**\r\n\t * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n\t * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 oldAllowance = token.allowance(address(this), spender);\r\n\t\tforceApprove(token, spender, oldAllowance + value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n\t\tunchecked {\r\n\t\t\tuint256 currentAllowance = token.allowance(address(this), spender);\r\n\t\t\tif (currentAllowance < requestedDecrease) {\r\n\t\t\t\trevert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n\t\t\t}\r\n\t\t\tforceApprove(token, spender, currentAllowance - requestedDecrease);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n\t * to be set to zero before setting it to a non-zero value, such as USDT.\r\n\t */\r\n\tfunction forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\tbytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n\t\tif (!_callOptionalReturnBool(token, approvalCall)) {\r\n\t\t\t_callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n\t\t\t_callOptionalReturn(token, approvalCall);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data);\r\n\t\tif (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n\t\t\trevert SafeERC20FailedOperation(address(token));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t *\r\n\t * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n\t */\r\n\tfunction _callOptionalReturnBool(IERC20 token, bytes memory data) private returns(bool) {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n\t\t// and not revert is the subcall reverts.\r\n\r\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\r\n\t\treturn success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(\r\n\t\taddress indexed token0,\r\n\t\taddress indexed token1,\r\n\t\taddress pair,\r\n\t\tuint256\r\n\t);\r\n\r\n\tfunction feeTo() external view returns(address);\r\n\r\n\tfunction feeToSetter() external view returns(address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns(address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns(address pair);\r\n\r\n\tfunction allPairsLength() external view returns(uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns(address pair);\r\n\r\n\t// function setFeeTo(address) external;\r\n\t// function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction name() external pure returns(string memory);\r\n\r\n\tfunction symbol() external pure returns(string memory);\r\n\r\n\tfunction decimals() external pure returns(uint8);\r\n\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns(uint256);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns(uint256);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns(bool);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns(bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns(bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns(bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns(bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns(uint256);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\tevent Burn(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0,\r\n\t\tuint256 amount1,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0In,\r\n\t\tuint256 amount1In,\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns(uint256);\r\n\r\n\tfunction factory() external view returns(address);\r\n\r\n\tfunction token0() external view returns(address);\r\n\r\n\tfunction token1() external view returns(address);\r\n\r\n\tfunction getReserves()\r\n\texternal\r\n\tview\r\n\treturns(\r\n\t\tuint112 reserve0,\r\n\t\tuint112 reserve1,\r\n\t\tuint32 blockTimestampLast\r\n\t);\r\n\r\n\tfunction price0CumulativeLast() external view returns(uint256);\r\n\r\n\tfunction price1CumulativeLast() external view returns(uint256);\r\n\r\n\tfunction kLast() external view returns(uint256);\r\n\r\n\tfunction mint(address to) external returns(uint256 liquidity);\r\n\r\n\tfunction burn(address to)\r\n\texternal\r\n\treturns(uint256 amount0, uint256 amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns(address);\r\n\r\n\tfunction WETH() external pure returns(address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\treturns(\r\n\t\tuint256 amountA,\r\n\t\tuint256 amountB,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns(\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns(uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns(uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns(uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns(uint256[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns(uint256 amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns(uint256 amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns(uint256 amountIn);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\r\n\texternal\r\n\tview\r\n\treturns(uint256[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\r\n\texternal\r\n\tview\r\n\treturns(uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns(uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\t/**\r\n\t * @dev Unauthorized reentrant call.\r\n\t */\r\n\terror ReentrancyGuardReentrantCall();\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and making it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t_nonReentrantBefore();\r\n\t\t_;\r\n\t\t_nonReentrantAfter();\r\n\t}\r\n\r\n\tfunction _nonReentrantBefore() private {\r\n\t\t// On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n\t\tif (_status == _ENTERED) {\r\n\t\t\trevert ReentrancyGuardReentrantCall();\r\n\t\t}\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\t}\r\n\r\n\tfunction _nonReentrantAfter() private {\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n\t * `nonReentrant` function in the call stack.\r\n\t */\r\n\tfunction _reentrancyGuardEntered() internal view returns(bool) {\r\n\t\treturn _status == _ENTERED;\r\n\t}\r\n}\r\n\r\n\r\ncontract FomoBot is Ownable, ReentrancyGuard {\r\n\r\n\tusing SafeERC20\r\n\tfor IERC20;\r\n\r\n\taddress public feeAddress = 0xAAdcdEC98CE6C560C6e4b1C2B1b31258D5C1AF9A;\r\n\tuint256 public platformFee = 100;\r\n\tIUniswapV2Router02 public immutable uniswapV2Router; // uniswap dex router\r\n\r\n\tevent FeeReceived(uint256 feeAmount);\r\n\tevent FeeUpdated(uint256 fee);\r\n\tevent FeeAddressUpdated(address feeAddress);\r\n\tevent TokenBought(address token, uint256 amount);\r\n\tevent TokenSold(address token, uint256 ethAmount);\r\n\t\r\n\tconstructor(){\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n\t\t\t0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t}\r\n\r\n\r\n\tfunction buyTokenWithTax(address token, uint256 minTokenAmount) public payable\r\n\tnonReentrant {\r\n\r\n        uint256 swapAmount = distributeFee(msg.value);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = uniswapV2Router.WETH();\r\n\t\tpath[1] = token; \r\n\t\tuint[] memory amounts = new uint[](2);\r\n\t\tamounts = uniswapV2Router.swapExactETHForTokens {\r\n\t\t\tvalue: swapAmount\r\n\t\t}(\r\n\t\t\tminTokenAmount,\r\n\t\t\tpath,\r\n\t\t\tmsg.sender,\r\n\t\t\tblock.timestamp + 1000\r\n\t\t);\r\n\t\temit TokenBought(token, amounts[1]);\r\n\t}\r\n\r\n\tfunction buyToken(address token, uint256 minTokenAmount) public payable\r\n\tnonReentrant{\r\n\r\n        uint256 swapAmount = distributeFee(msg.value);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = uniswapV2Router.WETH();\r\n\t\tpath[1] = token; \r\n\t\tuniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n\t\t\tvalue: swapAmount\r\n\t\t}(\r\n\t\t\tminTokenAmount,\r\n\t\t\tpath,\r\n\t\t\tmsg.sender,\r\n\t\t\tblock.timestamp + 1000\r\n\t\t);\r\n\t\r\n\t}\r\n\r\n\tfunction sellToken(address token, uint256 tokenAmount, uint256 minEthAmount) public\r\n\tnonReentrant returns(uint256 ethAmount) {\r\n\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = token;\r\n\t\tpath[1] = uniswapV2Router.WETH(); \r\n\t\tuint[] memory amounts = new uint[](2);\r\n\t\t IERC20(token).approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokenAmount);\r\n\t\tamounts = uniswapV2Router.swapExactTokensForETH(\r\n\t\t\ttokenAmount,\r\n\t\t\tminEthAmount,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp + 1000\r\n\t\t);\r\n\t\tethAmount = distributeFee(amounts[1]);\r\n\t\t(bool _success, ) = msg.sender.call{value: ethAmount}(\"\");\r\n        require(_success, \"Transfer to User failed\");\r\n\t\temit TokenSold(token, ethAmount);\r\n\t}\r\n\r\n\tfunction sellTokenWithTax(address token, uint256 tokenAmount, uint256 minEthAmount) public\r\n\tnonReentrant returns(uint256 ethAmount) {\r\n\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = token;\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\tuint256 previousBalance = address(this).balance; \r\n\t\tIERC20(token).approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\tminEthAmount,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp + 1000\r\n\t\t);\r\n\t\tuint256 currentBalance = address(this).balance;\r\n\t\tethAmount = distributeFee(currentBalance - previousBalance);\r\n\t\t(bool _success, ) = msg.sender.call{value: ethAmount}(\"\");\r\n        require(_success, \"Transfer to User failed\");\r\n\t}\r\n\r\n\tfunction distributeFee(uint256 ethAmount) private returns(uint256 remaining) {\r\n\r\n\t\tuint256 feeAmount = (ethAmount * platformFee)/10000;\r\n\t\t(bool _feeSuccess, ) = feeAddress.call{value: feeAmount}(\"\");\r\n        require(_feeSuccess, \"Transfer to Treasury failed\");\r\n\t\temit FeeReceived(feeAmount);\r\n\t\tremaining = ethAmount-feeAmount;\r\n\t       \r\n\t}\r\n\r\n\tfunction setFee(uint256 fee) external onlyOwner{\r\n\t\tplatformFee = fee;\r\n\t\temit FeeUpdated(fee);\r\n\t}\r\n\r\n\tfunction setFeeAddress(address _feeAddress) external onlyOwner{\r\n\t\tfeeAddress = _feeAddress;\r\n        emit FeeAddressUpdated(_feeAddress);\r\n\t}\r\n\r\n\tfunction withdrawTokens(IERC20 token, address wallet) external onlyOwner {\r\n\t\tuint256 balanceOfContract = token.balanceOf(address(this));\r\n\t\ttoken.transfer(wallet, balanceOfContract);\r\n\t}\r\n\r\n\tfunction withdrawFunds(address wallet) external onlyOwner {\r\n\t\tuint256 balanceOfContract = address(this).balance;\r\n\t\tpayable(wallet).transfer(balanceOfContract);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n    fallback() external payable {}\r\n         \r\n\t\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithTax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokenWithTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FomoBot", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://178194b710ac70d42f3d738f5bec1a00db6e163bbf982f261ad02ba126170e06"}