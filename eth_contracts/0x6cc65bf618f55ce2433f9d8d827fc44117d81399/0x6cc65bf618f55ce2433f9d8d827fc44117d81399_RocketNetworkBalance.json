{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/contract/RocketBase.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Rocket Pool\\n/// @author David Rugendyke\\n\\nabstract contract RocketBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    RocketStorageInterface rocketStorage = RocketStorageInterface(address(0));\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered minipool\\n    */\\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"minipool.exists\\\", _minipoolAddress))), \\\"Invalid minipool\\\");\\n        _;\\n    }\\n    \\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == rocketStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Rocket Storage address\\n    constructor(RocketStorageInterface _rocketStorageAddress) {\\n        // Update the contract address\\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Rocket Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\\n\\n    /// @dev Storage arithmetic methods\\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/dao/node/RocketDAONodeTrustedInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedInterface {\\n    function getBootstrapModeDisabled() external view returns (bool);\\n    function getMemberQuorumVotesRequired() external view returns (uint256);\\n    function getMemberAt(uint256 _index) external view returns (address);\\n    function getMemberCount() external view returns (uint256);\\n    function getMemberMinRequired() external view returns (uint256);\\n    function getMemberIsValid(address _nodeAddress) external view returns (bool);\\n    function getMemberLastProposalTime(address _nodeAddress) external view returns (uint256);\\n    function getMemberID(address _nodeAddress) external view returns (string memory);\\n    function getMemberUrl(address _nodeAddress) external view returns (string memory);\\n    function getMemberJoinedTime(address _nodeAddress) external view returns (uint256);\\n    function getMemberProposalExecutedTime(string memory _proposalType, address _nodeAddress) external view returns (uint256);\\n    function getMemberRPLBondAmount(address _nodeAddress) external view returns (uint256);\\n    function getMemberIsChallenged(address _nodeAddress) external view returns (bool);\\n    function getMemberUnbondedValidatorCount(address _nodeAddress) external view returns (uint256);\\n    function incrementMemberUnbondedValidatorCount(address _nodeAddress) external;\\n    function decrementMemberUnbondedValidatorCount(address _nodeAddress) external;\\n    function bootstrapMember(string memory _id, string memory _url, address _nodeAddress) external;\\n    function bootstrapSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) external;\\n    function bootstrapSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) external;\\n    function bootstrapUpgrade(string memory _type, string memory _name, string memory _contractAbi, address _contractAddress) external;\\n    function bootstrapDisable(bool _confirmDisableBootstrapMode) external;\\n    function memberJoinRequired(string memory _id, string memory _url) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/network/RocketNetworkBalancesInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\npragma abicoder v2;\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketNetworkBalancesInterface {\\n    function getBalancesBlock() external view returns (uint256);\\n    function getTotalETHBalance() external view returns (uint256);\\n    function getStakingETHBalance() external view returns (uint256);\\n    function getTotalRETHSupply() external view returns (uint256);\\n    function getETHUtilizationRate() external view returns (uint256);\\n    function submitBalances(uint256 _block, uint256 _slotTimestamp, uint256 _total, uint256 _staking, uint256 _rethSupply) external;\\n    function executeUpdateBalances(uint256 _block, uint256 _slotTimestamp, uint256 _totalEth, uint256 _stakingEth, uint256 _rethSupply) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsNetworkInterface.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\npragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProtocolSettingsNetworkInterface {\\n    function getNodeConsensusThreshold() external view returns (uint256);\\n    function getNodePenaltyThreshold() external view returns (uint256);\\n    function getPerPenaltyRate() external view returns (uint256);\\n    function getSubmitBalancesEnabled() external view returns (bool);\\n    function getSubmitBalancesFrequency() external view returns (uint256);\\n    function getSubmitPricesEnabled() external view returns (bool);\\n    function getSubmitPricesFrequency() external view returns (uint256);\\n    function getMinimumNodeFee() external view returns (uint256);\\n    function getTargetNodeFee() external view returns (uint256);\\n    function getMaximumNodeFee() external view returns (uint256);\\n    function getNodeFeeDemandRange() external view returns (uint256);\\n    function getTargetRethCollateralRate() external view returns (uint256);\\n    function getRethDepositDelay() external view returns (uint256);\\n    function getSubmitRewardsEnabled() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/contract/network/RocketNetworkBalances.sol\": {\r\n      \"content\": \"/**\\r\\n   *       .\\r\\n   *      / \\\\\\r\\n   *     |.'.|\\r\\n   *     |'.'|\\r\\n   *   ,'|   |'.\\r\\n   *  |,-'-|-'-.|\\r\\n   *   __|_| |         _        _      _____           _\\r\\n   *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n   *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n   *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n   *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n   *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n   * +---------------------------------------------------+\\r\\n   * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\r\\n   * +---------------------------------------------------+\\r\\n   *\\r\\n   *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\r\\n   *  be community-owned, decentralised, permissionless, & trustless.\\r\\n   *\\r\\n   *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n   *\\r\\n   *  Authored by the Rocket Pool Core Team\\r\\n   *  Contributors: https://github.com/rocket-pool/rocketpool/graphs/contributors\\r\\n   *  A special thanks to the Rocket Pool community for all their contributions.\\r\\n   *\\r\\n   */\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.18;\\npragma abicoder v2;\\n\\nimport \\\"../RocketBase.sol\\\";\\nimport \\\"../../interface/dao/node/RocketDAONodeTrustedInterface.sol\\\";\\nimport \\\"../../interface/network/RocketNetworkBalancesInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsNetworkInterface.sol\\\";\\n\\n/// @notice Oracle contract for network balance data\\ncontract RocketNetworkBalances is RocketBase, RocketNetworkBalancesInterface {\\n\\n    // Events\\n    event BalancesSubmitted(address indexed from, uint256 block, uint256 slotTimestamp, uint256 totalEth, uint256 stakingEth, uint256 rethSupply, uint256 blockTimestamp);\\n    event BalancesUpdated(uint256 indexed block, uint256 slotTimestamp, uint256 totalEth, uint256 stakingEth, uint256 rethSupply, uint256 blockTimestamp);\\n\\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\\n        version = 3;\\n    }\\n\\n    /// @notice The block number which balances are current for\\n    function getBalancesBlock() override public view returns (uint256) {\\n        return getUint(keccak256(\\\"network.balances.updated.block\\\"));\\n    }\\n\\n    /// @notice Sets the block number which balances are current for\\n    function setBalancesBlock(uint256 _value) private {\\n        setUint(keccak256(\\\"network.balances.updated.block\\\"), _value);\\n    }\\n\\n    /// @notice The current RP network total ETH balance\\n    function getTotalETHBalance() override public view returns (uint256) {\\n        return getUint(keccak256(\\\"network.balance.total\\\"));\\n    }\\n\\n    /// @notice Sets the current RP network total ETH balance\\n    function setTotalETHBalance(uint256 _value) private {\\n        setUint(keccak256(\\\"network.balance.total\\\"), _value);\\n    }\\n\\n    /// @notice The current RP network staking ETH balance\\n    function getStakingETHBalance() override public view returns (uint256) {\\n        return getUint(keccak256(\\\"network.balance.staking\\\"));\\n    }\\n\\n    /// @notice Sets the current RP network staking ETH balance\\n    function setStakingETHBalance(uint256 _value) private {\\n        setUint(keccak256(\\\"network.balance.staking\\\"), _value);\\n    }\\n\\n    /// @notice The current RP network total rETH supply\\n    function getTotalRETHSupply() override external view returns (uint256) {\\n        return getUint(keccak256(\\\"network.balance.reth.supply\\\"));\\n    }\\n\\n    /// @notice Sets the current RP network total rETH supply\\n    function setTotalRETHSupply(uint256 _value) private {\\n        setUint(keccak256(\\\"network.balance.reth.supply\\\"), _value);\\n    }\\n\\n    /// @notice Get the current RP network ETH utilization rate as a fraction of 1 ETH\\n    ///         Represents what % of the network's balance is actively earning rewards\\n    function getETHUtilizationRate() override external view returns (uint256) {\\n        uint256 totalEthBalance = getTotalETHBalance();\\n        uint256 stakingEthBalance = getStakingETHBalance();\\n        if (totalEthBalance == 0) { return calcBase; }\\n        return calcBase * stakingEthBalance / totalEthBalance;\\n    }\\n\\n    /// @notice Submit network balances for a block.\\n    ///         Only accepts calls from trusted (oracle) nodes.\\n    function submitBalances(uint256 _block, uint256 _slotTimestamp, uint256 _totalEth, uint256 _stakingEth, uint256 _rethSupply) override external onlyLatestContract(\\\"rocketNetworkBalances\\\", address(this)) onlyTrustedNode(msg.sender) {\\n        // Check settings\\n        RocketDAOProtocolSettingsNetworkInterface rocketDAOProtocolSettingsNetwork = RocketDAOProtocolSettingsNetworkInterface(getContractAddress(\\\"rocketDAOProtocolSettingsNetwork\\\"));\\n        require(rocketDAOProtocolSettingsNetwork.getSubmitBalancesEnabled(), \\\"Submitting balances is currently disabled\\\");\\n        // Check block\\n        require(_block < block.number, \\\"Balances can not be submitted for a future block\\\");\\n        uint256 lastBalancesBlock = getBalancesBlock();\\n        require(_block >= lastBalancesBlock, \\\"Network balances for a higher block are set\\\");\\n        // Get submission keys\\n        bytes32 nodeSubmissionKey = keccak256(abi.encodePacked(\\\"network.balances.submitted.node\\\", msg.sender, _block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply));\\n        bytes32 submissionCountKey = keccak256(abi.encodePacked(\\\"network.balances.submitted.count\\\", _block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply));\\n        // Check & update node submission status\\n        require(!getBool(nodeSubmissionKey), \\\"Duplicate submission from node\\\");\\n        setBool(nodeSubmissionKey, true);\\n        setBool(keccak256(abi.encodePacked(\\\"network.balances.submitted.node\\\", msg.sender, _block)), true);\\n        // Increment submission count\\n        uint256 submissionCount = getUint(submissionCountKey) + 1;\\n        setUint(submissionCountKey, submissionCount);\\n        // Emit balances submitted event\\n        emit BalancesSubmitted(msg.sender, _block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply, block.timestamp);\\n        // If voting past consensus, return\\n        if (_block == lastBalancesBlock) {\\n            return;\\n        }\\n        // Check submission count & update network balances\\n        RocketDAONodeTrustedInterface rocketDAONodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        if (calcBase * submissionCount / rocketDAONodeTrusted.getMemberCount() >= rocketDAOProtocolSettingsNetwork.getNodeConsensusThreshold()) {\\n            updateBalances(_block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply);\\n        }\\n    }\\n\\n    /// @notice Executes updateBalances if consensus threshold is reached\\n    function executeUpdateBalances(uint256 _block, uint256 _slotTimestamp, uint256 _totalEth, uint256 _stakingEth, uint256 _rethSupply) override external onlyLatestContract(\\\"rocketNetworkBalances\\\", address(this)) {\\n        // Check settings\\n        RocketDAOProtocolSettingsNetworkInterface rocketDAOProtocolSettingsNetwork = RocketDAOProtocolSettingsNetworkInterface(getContractAddress(\\\"rocketDAOProtocolSettingsNetwork\\\"));\\n        require(rocketDAOProtocolSettingsNetwork.getSubmitBalancesEnabled(), \\\"Submitting balances is currently disabled\\\");\\n        // Check block\\n        require(_block < block.number, \\\"Balances can not be submitted for a future block\\\");\\n        require(_block > getBalancesBlock(), \\\"Network balances for an equal or higher block are set\\\");\\n        // Check balances\\n        require(_stakingEth <= _totalEth, \\\"Invalid network balances\\\");\\n        // Get submission keys\\n        bytes32 submissionCountKey = keccak256(abi.encodePacked(\\\"network.balances.submitted.count\\\", _block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply));\\n        // Get submission count\\n        uint256 submissionCount = getUint(submissionCountKey);\\n        // Check submission count & update network balances\\n        RocketDAONodeTrustedInterface rocketDAONodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        require(calcBase * submissionCount / rocketDAONodeTrusted.getMemberCount() >= rocketDAOProtocolSettingsNetwork.getNodeConsensusThreshold(), \\\"Consensus has not been reached\\\");\\n        updateBalances(_block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply);\\n    }\\n\\n    /// @dev Internal method to update network balances\\n    function updateBalances(uint256 _block, uint256 _slotTimestamp, uint256 _totalEth, uint256 _stakingEth, uint256 _rethSupply) private {\\n        // Update balances\\n        setBalancesBlock(_block);\\n        setTotalETHBalance(_totalEth);\\n        setStakingETHBalance(_stakingEth);\\n        setTotalRETHSupply(_rethSupply);\\n        // Emit balances updated event\\n        emit BalancesUpdated(_block, _slotTimestamp, _totalEth, _stakingEth, _rethSupply, block.timestamp);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rethSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"BalancesSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rethSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"BalancesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slotTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rethSupply\",\"type\":\"uint256\"}],\"name\":\"executeUpdateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancesBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRETHSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slotTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rethSupply\",\"type\":\"uint256\"}],\"name\":\"submitBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RocketNetworkBalances", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "15000", "ConstructorArguments": "0000000000000000000000001d8f8f00cfa6758d7bE78336684788Fb0ee0Fa46", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}