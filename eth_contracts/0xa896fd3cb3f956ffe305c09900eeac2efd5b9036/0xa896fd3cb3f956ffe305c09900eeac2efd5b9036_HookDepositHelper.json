{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/HookDepositHelper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.16;\\n\\ninterface ISocketEthContract {\\n    function depositToAppChain(address receiver_, uint256 amount_, uint256 msgGasLimit_, address connector_)\\n        external\\n        payable;\\n}\\n\\ninterface IWETH {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n    function approve(address guy, uint256 wad) external returns (bool);\\n    function balanceOf(address guy) external view returns (uint256);\\n}\\n\\n/// @title A thin helper to auto-wrap eth for depositing into the Hook Deposit Helper\\n/// @author Jake Nyquist - j@hook.xyz\\n/// @notice This contract wraps eth and deposits it into the Hook appchain via Socket.\\n/// @dev Contract has after-deposit validation to ensure that no eth is lost.\\ncontract HookDepositHelper {\\n    address public immutable weth;\\n    address public immutable socketEthContract;\\n\\n    constructor(address _weth, address _socketEthContract) {\\n        weth = _weth;\\n        socketEthContract = _socketEthContract;\\n    }\\n\\n    /// @notice Deposit eth to the Hook appchain via the SocketEthContract\\n    /// @param receiver The address to receive the deposit on the appchain\\n    /// @param amount The amount of eth to deposit\\n    /// @param msgGasLimit_ The gas limit for the message call on the receiving chain\\n    /// @param connector_ The address of the socket connector to process the deposit\\n    function depositEthToAppChain(address receiver, uint256 amount, uint256 msgGasLimit_, address connector_)\\n        external\\n        payable\\n    {\\n        require(msg.value > amount, \\\"HookDepositHelper: INSUFFICIENT_MSGVALUE\\\");\\n        uint256 depositFee = msg.value - amount;\\n\\n        // Wrap eth and approve the exact amount to be deposited\\n        IWETH(weth).deposit{value: amount}();\\n        IWETH(weth).approve(socketEthContract, amount);\\n\\n        ISocketEthContract(socketEthContract).depositToAppChain{value: depositFee}(\\n            receiver, amount, msgGasLimit_, connector_\\n        );\\n\\n        require(IWETH(weth).balanceOf(address(this)) == 0, \\\"HookDepositHelper: WETH_BALANCE_NOT_ZERO\\\");\\n        require(address(this).balance == 0, \\\"HookDepositHelper: ETH_BALANCE_NOT_ZERO\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"socket-plugs/=lib/socket-plugs/contracts/\",\r\n      \"solidity-stringutils/=lib/solidity-stringutils/\",\r\n      \"solmate/=lib/socket-plugs/lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_socketEthContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgGasLimit_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"connector_\",\"type\":\"address\"}],\"name\":\"depositEthToAppChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socketEthContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HookDepositHelper", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b39df6bbb1cf2b609dee43f109cafeff1a7ccbea", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}