{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MarketPlaceCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title MarketPlaceCommon\\n * @dev A base contract for handling common marketplace functionalities\\n */\\ncontract MarketPlaceCommon {\\n  address payable public dxs;\\n  address payable public supplier;\\n  address public owner;\\n\\n  uint public minProductPrice;\\n  uint public maxVAT = 27;\\n\\n  mapping(address => uint) public purchasedBalance;\\n\\n  event ProductPurchased(address indexed buyer, uint amount);\\n\\n  event BalanceWithdrawn(address indexed withdrawer, uint amount);\\n\\n  event SupplierChanged(\\n    address indexed oldSupplier,\\n    address indexed newSupplier\\n  );\\n\\n  event DXSChanged(address indexed oldDXS, address indexed newDXS);\\n\\n  event MinProductPriceChanged(uint oldPrice, uint newPrice);\\n\\n  event OwnershipTransferred(\\n    address indexed oldOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev Initialize the contract\\n   * @param _dxs Decentrashop's address\\n   * @param _supplier Supplier's address\\n   */\\n  constructor(address _dxs, address _supplier) {\\n    require(\\n      _dxs != address(0),\\n      'Decentrashop address cannot be the zero address.'\\n    );\\n\\n    require(\\n      _supplier != address(0),\\n      'Supplier address cannot be the zero address.'\\n    );\\n\\n    owner = msg.sender;\\n    dxs = payable(_dxs);\\n    supplier = payable(_supplier);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, 'You are not the contract Owner.');\\n    _;\\n  }\\n\\n  function setSupplier(address newSupplier) external onlyOwner {\\n    require(\\n      newSupplier != address(0),\\n      'Supplier address cannot be the zero address.'\\n    );\\n    address oldSupplier = supplier;\\n    supplier = payable(newSupplier);\\n\\n    emit SupplierChanged(oldSupplier, newSupplier);\\n  }\\n\\n  function setDXS(address newDXS) external onlyOwner {\\n    require(newDXS != address(0), 'DXS address cannot be the zero address.');\\n    address oldDXS = dxs;\\n    dxs = payable(newDXS);\\n\\n    emit DXSChanged(oldDXS, newDXS);\\n  }\\n\\n  function setMinProductPrice(uint newMinProductPrice) external onlyOwner {\\n    uint oldPrice = minProductPrice;\\n    minProductPrice = newMinProductPrice;\\n\\n    emit MinProductPriceChanged(oldPrice, newMinProductPrice);\\n  }\\n\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(newOwner != address(0), 'New owner cannot be the zero address.');\\n    address oldOwner = owner;\\n    owner = newOwner;\\n\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Set the maximum VAT Possible\\n   * @param newMaxVAT The new minimum product price\\n   */\\n  function setMaxVAT(uint newMaxVAT) external onlyOwner {\\n    require(newMaxVAT <= 50, 'VAT cannot be greater than 50%.');\\n    maxVAT = newMaxVAT;\\n  }\\n\\n  /**\\n   * @dev Rectify the balance of a wallet address\\n   * @param walletAddress The address of the wallet\\n   * @param amount The new balance of the wallet\\n   */\\n  function rectifyBalance(\\n    address walletAddress,\\n    uint amount\\n  ) external onlyOwner {\\n    purchasedBalance[walletAddress] = amount;\\n  }\\n\\n  fallback() external {\\n    revert('Do not send Ether directly.');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/MarketPlaceFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport './MarketPlaceCommon.sol';\\n\\n/**\\n * @title MarketPlaceFees\\n * @dev A contract for handling marketplace transactions and fees\\n */\\ncontract MarketPlaceFees is MarketPlaceCommon {\\n  /**\\n   * @dev Initialize the contract\\n   * @param _dxs Decentrashop's address\\n   * @param _supplier Supplier's address\\n\\n   */\\n  constructor(\\n    address _dxs,\\n    address _supplier\\n  ) MarketPlaceCommon(_dxs, _supplier) {\\n    minProductPrice = 0.0001 ether;\\n  }\\n\\n  /**\\n   * @dev Buy a product\\n   * Buyer sends funds and his balance is registred.\\n   */\\n  function buyProduct() external payable {\\n    require(msg.value > minProductPrice, 'Value sent is too low.');\\n\\n    purchasedBalance[msg.sender] += msg.value;\\n\\n    emit ProductPurchased(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @dev Withdraw all balances\\n   * Contract funds are distributed between decentrashop and the supplier.\\n   */\\n  function withdrawAllBalances() external {\\n    require(msg.sender == owner, 'You are not the contract Owner.');\\n\\n    uint valueWithVAT = address(this).balance;\\n    // Calculate the percentages\\n    uint valueWithoutVAT = (valueWithVAT * 100) / (100 + maxVAT); //To get the value without VAT in France for instance -> 120(TTC) / 1.2 = 100(HT)\\n    uint dxsShare = (valueWithoutVAT * 55) / 1000; // 5.5%\\n\\n    emit BalanceWithdrawn(msg.sender, address(this).balance);\\n\\n    dxs.transfer(dxsShare);\\n    supplier.transfer(address(this).balance);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dxs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDXS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDXS\",\"type\":\"address\"}],\"name\":\"DXSChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"MinProductPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProductPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSupplier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSupplier\",\"type\":\"address\"}],\"name\":\"SupplierChanged\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buyProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dxs\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProductPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rectifyBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDXS\",\"type\":\"address\"}],\"name\":\"setDXS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxVAT\",\"type\":\"uint256\"}],\"name\":\"setMaxVAT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinProductPrice\",\"type\":\"uint256\"}],\"name\":\"setMinProductPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupplier\",\"type\":\"address\"}],\"name\":\"setSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplier\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketPlaceFees", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008536a075c47ef088b5f4291fa13948b0c0a920ae00000000000000000000000021b75defd02d049c2c3b4e35f89824c8b1e5dde4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}