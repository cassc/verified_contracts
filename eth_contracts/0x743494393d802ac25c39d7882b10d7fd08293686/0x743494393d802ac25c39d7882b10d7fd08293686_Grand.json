{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Grand.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.15;\\r\\n\\r\\n// import \\\"./openzeppelin-contracts/token/ERC20/ERC20.sol\\\";\\r\\n// import \\\"./openzeppelin-contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IRouter.sol\\\";\\r\\n\\r\\ncontract Grand is ERC20, Ownable {\\r\\n\\r\\n    IUniswapRouter public router;\\r\\n    address public pair;\\r\\n\\r\\n    uint256 constant _totalFullSupply = 50_000_000 * 1e18;\\r\\n    \\r\\n    uint256 constant _liquiditySupply         = _totalFullSupply * 10 / 100; // 10% =  5_000_000 * 1e18;\\r\\n    uint256 public _stakingRewardSupply       = _totalFullSupply * 45 / 100; // 45% = 22_500_000 * 1e18;\\r\\n    uint256 public _tradingIncentiveSupply    = _totalFullSupply * 20 / 100; // 20% = 10_000_000 * 1e18;\\r\\n    uint256 public _marketingBudgetSupply     = _totalFullSupply * 10 / 100; // 10% =  5_000_000 * 1e18;\\r\\n    uint256 public _privateSaleSupply         = _totalFullSupply * 8  / 100; // 8%  =  4_000_000 * 1e18;\\r\\n    uint256 public _teamTokensSupply          = _totalFullSupply * 7  / 100; // 7%  =  3_500_000 * 1e18;\\r\\n\\r\\n    uint256 public stakingRewardsMintedAt = 0;\\r\\n    uint256 public tradingIncentiveMintedAt = 0;\\r\\n    uint256 public marketingBudgetMintedAt = 0;\\r\\n    uint256 public privateSaleMintedAt = 0;\\r\\n    uint256 public teamTokensMintedAt = 0;\\r\\n\\r\\n    // whitelist max buy amount in whitelist step\\r\\n    uint256 constant _wlMaxBuyAmount = _liquiditySupply / 100; // 1% of liquidity = 50_000 * 1e18;\\r\\n\\r\\n    uint256 public maxHoldingAmount =  _liquiditySupply / 50; // 2% of initial liquidity, 0.2% of total supply = 100_000 * 1e18\\r\\n    \\r\\n    bool private swapping;\\r\\n    bool public swapEnabled;\\r\\n    bool public tradingEnabled;\\r\\n    \\r\\n    bool public stakingLaunched;\\r\\n    bool public tradingIncentiveLaunched;\\r\\n\\r\\n    uint256 private launchTimestamp;\\r\\n\\r\\n    address public treasuryWallet;\\r\\n\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    uint256 public buyTax;\\r\\n    uint256 public sellTax;\\r\\n    uint256[] private taxTimestampSteps;\\r\\n    uint256[] private buyTaxSteps;\\r\\n    uint256[] private sellTaxSteps; \\r\\n\\r\\n    mapping(address => bool) public whitelisted;\\r\\n    mapping(address => bool) public blacklisted;\\r\\n    mapping(address => bool) public isExcludedFromFees;\\r\\n    mapping(address => bool) private _isExcludedFromMaxWallet;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    address[] public whitelist_users = [\\r\\n        0x1A69284e302046AeB25017766A79f89A08e01261,\\r\\n        0x5119757E2c791A6De4F3a5Bf38b9fDbfACbd1068,\\r\\n        0xAFD644Cd6FaB74C9Ab9444c3E420029D4E6B717A,\\r\\n        0x85d659fD40f0354A419947cb3baCCC1DDa938e61,\\r\\n        0xDB1bA7c360a7c42A9C163A133906AC4B86891853,\\r\\n        0x2c5d7333d81eB0eeC7f1ab437d0Bf18f371e06b9,\\r\\n        0x4CB64dFa9985634BF5442DA1c421F8D493380dA3,\\r\\n        0x366391f9C9a66AC4A2cf2a7E7788E6BeF80CDeCC,\\r\\n        0x3F4373aFdde3D7dE3AC433AcC7De685338c3980e,\\r\\n        0x220b522979B9F2Ca0F83663fcfF2ee2426aa449C,\\r\\n        0x6fcDaa9e3ee14540EeA3cFC40Bea16bC61F1c2b8,\\r\\n        0xEE08323d41cbA6C0b72f8d952da8d364bc1Ea71d,\\r\\n        0x6e74205481C0A61650951a463b18EdD7BCb51e5a,\\r\\n        0x10E3D80E50fd146175BCEA8D25C5be0085e2BE59,\\r\\n        0xFdC4C32ac821eB7137f23aC55e3E10C7280eBf7d,\\r\\n        0xc210204c50e78251689DabE7091Be4d2320F00AB,\\r\\n        0x5A7a61FACE3C7Bf578098Ad80Fe7E7c471B4277C,\\r\\n        0x9d156bc7c8768294510A4A41883d5A4EB15b15E3,\\r\\n        0x5671B8dadc4B50e253B52330C558C9DA112C4886,\\r\\n        0x42FeeC5c7e7D3c725864A2716CA357Fa9993CCC0,\\r\\n        0x3185EF019BA1C04B8d65eDB64c1c34C3eaE52271,\\r\\n        0x9c15078EbFcC032D00faCbB4fB9829b60C6e26b4,\\r\\n        0xdbF66aCD1F816E44CeBA22b93cA245155D879392,\\r\\n        0x5Baa197fFEd76a44E7F22fc6E050e7D99025D201,\\r\\n        0xBC35D102F498B6ACDa7ceC5168Fb4B19D9255953,\\r\\n        0x79D06301491f92AA60B58eEc3cfbB9ef2E0Ea4f6,\\r\\n        0x9053137E530b881Fb47E9abdC881dE266F313a1F,\\r\\n        0x0d3C00C1Da6d3f7791E7320A7130556eBDd46767,\\r\\n        0x0A753312Aa7F500fbd8De099B15A2e2761757615,\\r\\n        0x289213e63B7E827a19Bc48e6cb132f6D2dD89342,\\r\\n        0x5fa85E6FEa19F73f92E665c1d4A0d20F0467d33E,\\r\\n        0xDa4e25fC45e82dcDe872c8eaD40a6F012428E1EE,\\r\\n        0x8Cfa8Dd7BD8a1316f145c52D842C09EaC212F642,\\r\\n        0xb1F0801cf68aAC49789e4332690fb4B8b44Cde68,\\r\\n        0x2719F75F3734475a0157e1257C12596B8Ac2D1E5,\\r\\n        0xc7f91e6650Fe21791B1f8af864eD019B6853294E,\\r\\n        0xa9C3eB1b8250Daddf039A010b67a089D8384f648,\\r\\n        0xAB2ccE9850e7Dc9b86e9EBf465F86B06a4329766,\\r\\n        0x44CDDD49C6098B77108336FC5f10A4CC9037d764,\\r\\n        0xCA1bbb512759dE1bE41ab739151553AACFB5073C,\\r\\n        0x5B8aCeDd3D078AA30703AdE6a1ca8caC944aD181,\\r\\n        0x99F5D9E4B88403Fe3590481198396c910610203A,\\r\\n        0xC15e8aE9BC6Bdea3bfdD16b3498c5C4Af9baC670,\\r\\n        0xc746696E0f4488c81FC222d3547CCC0777eb860D,\\r\\n        0x7978D693892F2A20F5DF40561F1E0C48b90e1D73,\\r\\n        0x1fC593215253271e3077798D784311F6B95902E1,\\r\\n        0x03150902655e881D873622020BABF8678183C7A6,\\r\\n        0xE12A574dc83664784B0a3d4672bF9D6E55B5014e,\\r\\n        0xbDFbe0F5858477CABec37784fdd0aB86e0E600d1,\\r\\n        0xA59c43ceEF4c1981432c35921E9b3778Fce79faA\\r\\n    ];\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    constructor(address _treasury) ERC20(\\\"Grand\\\", \\\"$GB\\\") {\\r\\n\\r\\n        swapEnabled = true;\\r\\n\\r\\n        router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        address _pair = IFactory(router.factory()).createPair(\\r\\n            address(this),\\r\\n            router.WETH()\\r\\n        );\\r\\n        pair = _pair;\\r\\n        _setAutomatedMarketMakerPair(pair, true);\\r\\n        setSwapTokensAtAmount(40000);\\r\\n\\r\\n        treasuryWallet = _treasury;\\r\\n\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(address(this), true);\\r\\n\\r\\n        excludeFromMaxWallet(address(pair), true);\\r\\n        excludeFromMaxWallet(address(this), true);\\r\\n        excludeFromMaxWallet(address(router), true);\\r\\n        excludeFromMaxWallet(owner(), true);\\r\\n\\r\\n        taxTimestampSteps.push(30 minutes);\\r\\n        taxTimestampSteps.push(15 minutes);\\r\\n        taxTimestampSteps.push(15 minutes);\\r\\n\\r\\n        buyTaxSteps.push(4000);\\r\\n        buyTaxSteps.push(3000);\\r\\n        buyTaxSteps.push(1500);\\r\\n\\r\\n        sellTaxSteps.push(4000);\\r\\n        sellTaxSteps.push(3000);\\r\\n        sellTaxSteps.push(1500);\\r\\n\\r\\n        buyTax = 500;\\r\\n        sellTax = 500;\\r\\n\\r\\n        for (uint i = 0; i < whitelist_users.length; i ++) {\\r\\n            whitelisted[whitelist_users[i]] = true;\\r\\n        }\\r\\n\\r\\n        // initial = liquidity + 30% of marketing budget\\r\\n        uint256 initialMintAmt = _liquiditySupply + _marketingBudgetSupply * 3 / 10;\\r\\n\\r\\n        // reduce remained _marketingBudgetSupply\\r\\n        _marketingBudgetSupply = _marketingBudgetSupply * 7 / 10;\\r\\n        _mint(msg.sender, initialMintAmt); \\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function setSwapEnabled(bool _enabled) external onlyOwner {\\r\\n        swapEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function enableTrading(bool _enable) external onlyOwner {\\r\\n        require(tradingEnabled != _enable && launchTimestamp > 0, \\\"Already Set\\\");\\r\\n        tradingEnabled = _enable;\\r\\n    }\\r\\n    \\r\\n    // only owner\\r\\n    function launch() external onlyOwner {\\r\\n        launchTimestamp = block.timestamp;\\r\\n        tradingEnabled = true;\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    /// @dev Set new pairs created due to listing in new DEX\\r\\n    function setAutomatedMarketMakerPair(address newPair, bool value)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setAutomatedMarketMakerPair(newPair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address newPair, bool value) private {\\r\\n        require(\\r\\n            automatedMarketMakerPairs[newPair] != value,\\r\\n            \\\"Automated market maker pair is already set to that value\\\"\\r\\n        );\\r\\n        automatedMarketMakerPairs[newPair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(newPair, value);\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function setTreasuryWallet(address newWallet) public onlyOwner {\\r\\n        treasuryWallet = newWallet;\\r\\n    }\\r\\n    // only owner\\r\\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\\r\\n        swapTokensAtAmount = amount * 10**18;\\r\\n    }\\r\\n\\r\\n    function updateMaxHoldingAmount(uint256 newNum) public onlyOwner {\\r\\n        require(newNum >= 100000, \\\"Cannot set maxHoldingAmount lower than 100k tokens\\\");\\r\\n        maxHoldingAmount = newNum * 10**18;\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function setBuyTax(uint256 _tax) external onlyOwner {\\r\\n        require(_tax <= 2000, \\\"Fee must be <= 20%\\\");\\r\\n        buyTax = _tax;\\r\\n    }\\r\\n    // only owner\\r\\n    function setSellTax(uint256 _tax) external onlyOwner {\\r\\n        require(_tax <= 2000, \\\"Fee must be <= 20%\\\");\\r\\n        sellTax = _tax;\\r\\n    }\\r\\n    // only owner\\r\\n    function setTaxSteps(uint256[] calldata _timestamps, uint256[] calldata _buyTaxes, uint256[] calldata _sellTaxes) external onlyOwner {\\r\\n        taxTimestampSteps = _timestamps;\\r\\n        buyTaxSteps = _buyTaxes;\\r\\n        sellTaxSteps = _sellTaxes;\\r\\n    }\\r\\n    // only owner\\r\\n    function blacklist(address user, bool value) external onlyOwner {\\r\\n        require(blacklisted[user] != value, \\\"Already Set\\\");\\r\\n        blacklisted[user] = value;\\r\\n    }\\r\\n    // only owner\\r\\n    function whitelist(address user, bool value) external onlyOwner {\\r\\n        require(whitelisted[user] != value, \\\"Already Set\\\");\\r\\n        whitelisted[user] = value;\\r\\n    }\\r\\n    // only owner\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        require(\\r\\n            isExcludedFromFees[account] != excluded,\\r\\n            \\\"Account is already the value of 'excluded'\\\"\\r\\n        );\\r\\n        isExcludedFromFees[account] = excluded;\\r\\n\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxWallet(address account, bool excluded)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        _isExcludedFromMaxWallet[account] = excluded;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        require(!blacklisted[from] && !blacklisted[to], \\\"Blacklisted\\\");\\r\\n\\r\\n        if (\\r\\n            !isExcludedFromFees[from] && !isExcludedFromFees[to] && !swapping\\r\\n        ) {\\r\\n            require(tradingEnabled, \\\"Trading not active\\\");\\r\\n            if (!_isExcludedFromMaxWallet[to]) {\\r\\n                require(\\r\\n                    amount + balanceOf(to) <= maxHoldingAmount,\\r\\n                    \\\"Unable to exceed maxHoldingAmount\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount && contractTokenBalance > 0;\\r\\n\\r\\n        if (\\r\\n            canSwap &&\\r\\n            !swapping &&\\r\\n            swapEnabled &&\\r\\n            automatedMarketMakerPairs[to] &&\\r\\n            !isExcludedFromFees[from] &&\\r\\n            !isExcludedFromFees[to]\\r\\n        ) {\\r\\n            swapping = true;\\r\\n\\r\\n            if (sellTax > 0) {\\r\\n                swapToTreasury(swapTokensAtAmount);\\r\\n            }\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = !swapping;\\r\\n\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        // if no swap\\r\\n        if (!automatedMarketMakerPairs[to] && !automatedMarketMakerPairs[from])\\r\\n            takeFee = false;\\r\\n        else if (isFirstStepTrade()) {\\r\\n            // if swap and first step, and if whitelisted user, then no fee\\r\\n            // buy or sell\\r\\n            if (whitelisted[to] || whitelisted[from]) {\\r\\n                takeFee = false;\\r\\n                // if wl is buying, then check balance\\r\\n                if (whitelisted[to]) {\\r\\n                    require(balanceOf(to) + amount <= _wlMaxBuyAmount, \\\"Exceed max buy amount!\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (takeFee) {\\r\\n            uint256 feeAmt;\\r\\n            if (automatedMarketMakerPairs[to])\\r\\n                feeAmt = (amount * getSellTax()) / 10000;\\r\\n            else if (automatedMarketMakerPairs[from])\\r\\n                feeAmt = (amount * getBuyTax()) / 10000;\\r\\n\\r\\n            amount = amount - feeAmt;\\r\\n            super._transfer(from, address(this), feeAmt);\\r\\n        }\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function swapToTreasury(uint256 tokens) private {\\r\\n        swapTokensForETH(tokens);\\r\\n\\r\\n        uint256 EthTaxBalance = address(this).balance;\\r\\n\\r\\n        // Send ETH to treasury\\r\\n        uint256 trAmt = EthTaxBalance;\\r\\n\\r\\n        if (trAmt > 0) {\\r\\n            (bool success, ) = payable(treasuryWallet).call{value: trAmt}(\\\"\\\");\\r\\n            require(success, \\\"Failed to send ETH to treasury wallet\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForETH(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n        _approve(address(this), address(router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        // router.swapExactTokensForETH(\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isFirstStepTrade() internal view returns (bool) {\\r\\n        uint256 curTick = block.timestamp;\\r\\n        return curTick <= (launchTimestamp + taxTimestampSteps[0]);\\r\\n    }\\r\\n\\r\\n    function getSellTax() internal view returns (uint256) {\\r\\n        uint256 curTick = block.timestamp;\\r\\n        uint256 i;\\r\\n        uint256 tick = launchTimestamp;\\r\\n        for (i = 0; i < taxTimestampSteps.length; i ++) {\\r\\n            if (curTick <= tick + taxTimestampSteps[i]) return sellTaxSteps[i];\\r\\n            tick += taxTimestampSteps[i];\\r\\n        }\\r\\n        return sellTax;\\r\\n    }\\r\\n\\r\\n    function getBuyTax() internal view returns (uint256) {\\r\\n        uint256 curTick = block.timestamp;\\r\\n        uint256 i;\\r\\n        uint256 tick = launchTimestamp;\\r\\n        for (i = 0; i < taxTimestampSteps.length; i ++) {\\r\\n            if (curTick <= tick + taxTimestampSteps[i]) return buyTaxSteps[i];\\r\\n            tick += taxTimestampSteps[i];\\r\\n        }\\r\\n        return buyTax;\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function mintMarketingBudget() external onlyOwner {\\r\\n        require(launchTimestamp > 0, \\\"token is not launched yet\\\");\\r\\n        require(_marketingBudgetSupply > 0, \\\"no token to mint\\\");\\r\\n\\r\\n        uint256 curTick = block.timestamp;\\r\\n        if (marketingBudgetMintedAt == 0) {\\r\\n            marketingBudgetMintedAt = launchTimestamp;\\r\\n        }\\r\\n        if (marketingBudgetMintedAt + 7 days <= curTick) {\\r\\n            uint256 mintAmount = _totalFullSupply * 1 / 100; // 10% of _marketingBudgetSupply\\r\\n            // if mintAmount is bigger than _marketingBudgetSupply, then set it to _marketingBudgetSupply\\r\\n            if (mintAmount > _marketingBudgetSupply) mintAmount = _marketingBudgetSupply;\\r\\n            // reduce _marketingBudgetSupply by subtrating mintAmount\\r\\n            _marketingBudgetSupply = _marketingBudgetSupply - mintAmount;\\r\\n\\r\\n            _mint(msg.sender, mintAmount); \\r\\n            marketingBudgetMintedAt = marketingBudgetMintedAt + 7 days;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function mintPrivateSale() external onlyOwner {\\r\\n        require(launchTimestamp > 0, \\\"token is not launched yet\\\");\\r\\n        require(_privateSaleSupply > 0, \\\"no token to mint\\\");\\r\\n\\r\\n        uint256 curTick = block.timestamp;\\r\\n        if (privateSaleMintedAt == 0) {\\r\\n            // at first, 2 days after tge, mint 30%\\r\\n            if (launchTimestamp + 2 days <= curTick) {\\r\\n                uint256 mintAmount = (_totalFullSupply * 8 / 100) * 3 / 10; // 30% first\\r\\n                _mint(msg.sender, mintAmount); \\r\\n                privateSaleMintedAt = launchTimestamp + 2 days;\\r\\n                _privateSaleSupply = _privateSaleSupply - mintAmount;\\r\\n            }\\r\\n        } else {\\r\\n            if (privateSaleMintedAt + 7 days <= curTick) {\\r\\n                uint256 mintAmount = (_totalFullSupply * 8 / 100) / 10; // 10% of _privateSaleSupply\\r\\n                // if mintAmount is bigger than _privateSaleSupply, then set it to _privateSaleSupply\\r\\n                if (mintAmount > _privateSaleSupply) mintAmount = _privateSaleSupply;\\r\\n                // reduce _privateSaleSupply by subtrating mintAmount\\r\\n                _privateSaleSupply = _privateSaleSupply - mintAmount;\\r\\n\\r\\n                _mint(msg.sender, mintAmount); \\r\\n                privateSaleMintedAt = privateSaleMintedAt + 7 days;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function mintTeamTokens() external onlyOwner {\\r\\n        require(launchTimestamp > 0, \\\"token is not launched yet\\\");\\r\\n        require(_teamTokensSupply > 0, \\\"no token to mint\\\");\\r\\n        require(launchTimestamp + 30 days <= block.timestamp, \\\"1 month should past\\\");\\r\\n        uint256 curTick = block.timestamp;\\r\\n\\r\\n        if (teamTokensMintedAt == 0) {\\r\\n            teamTokensMintedAt = launchTimestamp + 30 days;\\r\\n        }\\r\\n        if (teamTokensMintedAt + 7 days <= curTick) {\\r\\n            uint256 mintAmount = (_totalFullSupply * 7 / 100) / 20; // 5% of _teamTokensSupply\\r\\n            // if mintAmount is bigger than _teamTokensSupply, then set it to _teamTokensSupply\\r\\n            if (mintAmount > _teamTokensSupply) mintAmount = _teamTokensSupply;\\r\\n            // reduce _teamTokensSupply by subtrating mintAmount\\r\\n            _teamTokensSupply = _teamTokensSupply - mintAmount;\\r\\n\\r\\n            _mint(msg.sender, mintAmount); \\r\\n            teamTokensMintedAt = teamTokensMintedAt + 7 days;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function launchStaking() external onlyOwner {\\r\\n        stakingLaunched = true;\\r\\n    }\\r\\n    function launchTradingIncentive() external onlyOwner {\\r\\n        tradingIncentiveLaunched = true;\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function mintStakingRewards() external onlyOwner {\\r\\n        require(launchTimestamp > 0, \\\"token is not launched yet\\\");\\r\\n        require(_stakingRewardSupply > 0, \\\"no token to mint\\\");\\r\\n        require(stakingLaunched, \\\"staking is not launched yet\\\");\\r\\n\\r\\n        uint256 curTick = block.timestamp;\\r\\n        if (stakingRewardsMintedAt == 0) {\\r\\n            // at first, mint 30%\\r\\n            uint256 mintAmount = (_totalFullSupply * 45 / 100) * 3 / 10; // 30% first\\r\\n            _mint(msg.sender, mintAmount); \\r\\n            stakingRewardsMintedAt = curTick;\\r\\n            _stakingRewardSupply = _stakingRewardSupply - mintAmount;\\r\\n        } else {\\r\\n            if (stakingRewardsMintedAt + 7 days <= curTick) {\\r\\n                uint256 mintAmount = (_totalFullSupply * 45 / 100) / 10; // 10% of _stakingRewardSupply\\r\\n                // if mintAmount is bigger than _stakingRewardSupply, then set it to _stakingRewardSupply\\r\\n                if (mintAmount > _stakingRewardSupply) mintAmount = _stakingRewardSupply;\\r\\n                // reduce _stakingRewardSupply by subtrating mintAmount\\r\\n                _stakingRewardSupply = _stakingRewardSupply - mintAmount;\\r\\n\\r\\n                _mint(msg.sender, mintAmount); \\r\\n                stakingRewardsMintedAt = stakingRewardsMintedAt + 7 days;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // only owner\\r\\n    function mintTradingIncentive() external onlyOwner {\\r\\n        require(launchTimestamp > 0, \\\"token is not launched yet\\\");\\r\\n        require(_tradingIncentiveSupply > 0, \\\"no token to mint\\\");\\r\\n        require(tradingIncentiveLaunched, \\\"trading incentive is not launched yet\\\");\\r\\n\\r\\n        uint256 curTick = block.timestamp;\\r\\n        if (tradingIncentiveMintedAt == 0) {\\r\\n            // at first, mint 30%\\r\\n            uint256 mintAmount = (_totalFullSupply * 20 / 100) * 3 / 10; // 30% first\\r\\n            _mint(msg.sender, mintAmount); \\r\\n            tradingIncentiveMintedAt = curTick;\\r\\n            _tradingIncentiveSupply = _tradingIncentiveSupply - mintAmount;\\r\\n        } else {\\r\\n            if (tradingIncentiveMintedAt + 7 days <= curTick) {\\r\\n                uint256 mintAmount = (_totalFullSupply * 20 / 100) / 10; // 10% of _tradingIncentiveSupply\\r\\n                // if mintAmount is bigger than _tradingIncentiveSupply, then set it to _tradingIncentiveSupply\\r\\n                if (mintAmount > _tradingIncentiveSupply) mintAmount = _tradingIncentiveSupply;\\r\\n                // reduce _tradingIncentiveSupply by subtrating mintAmount\\r\\n                _tradingIncentiveSupply = _tradingIncentiveSupply - mintAmount;\\r\\n\\r\\n                _mint(msg.sender, mintAmount); \\r\\n                tradingIncentiveMintedAt = tradingIncentiveMintedAt + 7 days;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function token0() external view returns (address);\\n}\\n\\ninterface IFactory{\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    \\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    \\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    \\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_marketingBudgetSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_privateSaleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakingRewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamTokensSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingIncentiveSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTradingIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBudgetMintedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMarketingBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTeamTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTradingIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleMintedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buyTaxes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sellTaxes\",\"type\":\"uint256[]\"}],\"name\":\"setTaxSteps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsMintedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTokensMintedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIncentiveLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIncentiveMintedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxHoldingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist_users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Grand", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000048a2450ae9ed6b035b75f715f226ced05cda5a0a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}