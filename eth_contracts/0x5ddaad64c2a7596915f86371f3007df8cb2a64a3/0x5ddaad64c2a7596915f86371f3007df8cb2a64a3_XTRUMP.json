{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n    \treturn msg.sender;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(\r\n    \taddress recipient,\r\n    \tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tfunction allowance(\r\n    \taddress owner,\r\n    \taddress spender\r\n\t) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n    \taddress sender,\r\n    \taddress recipient,\r\n    \tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(\r\n    \taddress indexed owner,\r\n    \taddress indexed spender,\r\n    \tuint256 value\r\n\t);\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a + b;\r\n    \trequire(c >= a, \"SafeMath: addition overflow\");\r\n    \treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(\r\n    \tuint256 a,\r\n    \tuint256 b,\r\n    \tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n    \trequire(b <= a, errorMessage);\r\n    \tuint256 c = a - b;\r\n    \treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tif (a == 0) {\r\n        \treturn 0;\r\n    \t}\r\n    \tuint256 c = a * b;\r\n    \trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n    \treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(\r\n    \tuint256 a,\r\n    \tuint256 b,\r\n    \tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n    \trequire(b > 0, errorMessage);\r\n    \tuint256 c = a / b;\r\n    \treturn c;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\tevent OwnershipTransferred(\r\n    \taddress indexed previousOwner,\r\n    \taddress indexed newOwner\r\n\t);\r\n\r\n\tconstructor() {\r\n    \taddress msgSender = _msgSender();\r\n    \t_owner = msgSender;\r\n    \temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n    \treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n    \trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    \t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n    \temit OwnershipTransferred(_owner, address(0));\r\n    \t_owner = address(0);\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(\r\n    \taddress tokenA,\r\n    \taddress tokenB\r\n\t) external returns (address pair);\r\n\r\n\tfunction getPair(\r\n    \taddress tokenA,\r\n    \taddress tokenB\r\n\t) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction getAmountsOut(\r\n    \tuint amountIn,\r\n    \taddress[] calldata path\r\n\t) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    \tuint amountIn,\r\n    \tuint amountOutMin,\r\n    \taddress[] calldata path,\r\n    \taddress to,\r\n    \tuint deadline\r\n\t) external;\r\n\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction getAmountOut(uint amountIn) external pure returns (uint amountOut);\r\n}\r\n\r\ncontract XTRUMP is Context, IERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\tmapping(address => bool) private _isExcludedFromFee;\r\n\tmapping(address => bool) private bots;\r\n\tmapping(address => uint256) private _holderLastTransferTimestamp;\r\n\tbool public transferDelayEnabled = false;\r\n\taddress public _taxWallet;\r\n\taddress public _devWallet;\r\n\taddress public _marketingWallet;\r\n\taddress public _liquidityWallet;\r\n\r\n\tuint256 public _BuyTax = 0;\r\n\tuint256 public _SellTax = 0;\r\n\r\n\tuint256 public _previousBuyTax = _BuyTax;\r\n\tuint256 public _previousSellTax = _SellTax;\r\n\r\n\tuint256 public _tTeam;\r\n\r\n\tuint256 private _preventSwapBefore = 20;\r\n\tuint256 private _buyCount = 0;\r\n\r\n\tuint8 private constant _decimals = 9;\r\n\tuint256 private _tTotal = 1000000000 * 10 ** _decimals;\r\n\tstring private constant _name = unicode\"XTMP\";\r\n\tstring private constant _symbol = unicode\"$XTMP\";\r\n\tuint256 public _maxTxAmount = _tTotal.mul(2).div(100);\r\n\tuint256 public _maxWalletSize = _tTotal.mul(2).div(100);\r\n\tuint256 public _taxSwapThreshold = _tTotal.mul(2).div(100);\r\n\tuint256 public _maxTaxSwap = _tTotal.mul(2).div(100);\r\n\tuint256 public slippage = 1; // Default value of 1% slippage (100 = 1%)\r\n\r\n\tIUniswapV2Router02 public uniswapV2Router =\r\n    \tIUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\taddress public uniswapV2Pair;\r\n\tbool private tradingOpen;\r\n\tbool private inSwap = false;\r\n\tbool private swapEnabled = false;\r\n\tuint256 public _totalBurned;\r\n\r\n\tevent MaxTxAmountUpdated(uint _maxTxAmount);\r\n\tmodifier lockTheSwap() {\r\n    \tinSwap = true;\r\n    \t_;\r\n    \tinSwap = false;\r\n\t}\r\n\r\n\tconstructor(\r\n    \taddress taxWallet,\r\n    \taddress devWallet,\r\n    \taddress marketingWallet,\r\n    \taddress liquidityWallet\r\n\t) {\r\n    \t_taxWallet = payable(taxWallet);\r\n    \t_devWallet = payable(devWallet);\r\n    \t_marketingWallet = payable(marketingWallet);\r\n    \t_liquidityWallet = payable(liquidityWallet);\r\n    \t_balances[_devWallet] = _tTotal.mul(3).div(100);\r\n    \t_balances[_marketingWallet] = _tTotal.mul(7).div(100);\r\n    \t_tTeam = balanceOf(_devWallet).add(balanceOf(_marketingWallet));\r\n    \t_balances[_liquidityWallet] = _tTotal.sub(_tTeam);\r\n    \t_isExcludedFromFee[owner()] = true;\r\n    \t_isExcludedFromFee[address(this)] = true;\r\n    \t_isExcludedFromFee[_taxWallet] = true;\r\n    \t_isExcludedFromFee[_liquidityWallet] = true;\r\n    \t_isExcludedFromFee[_devWallet] = true;\r\n    \t_isExcludedFromFee[_marketingWallet] = true;\r\n\r\n    \temit Transfer(address(0), _msgSender(), _tTotal);\r\n\t}\r\n\r\n\tfunction name() public pure returns (string memory) {\r\n    \treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public pure returns (string memory) {\r\n    \treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n    \treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n    \treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n    \treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(\r\n    \taddress recipient,\r\n    \tuint256 amount\r\n\t) public override returns (bool) {\r\n    \t_transfer(_msgSender(), recipient, amount);\r\n    \treturn true;\r\n\t}\r\n\r\n\tfunction allowance(\r\n    \taddress owner,\r\n    \taddress spender\r\n\t) public view override returns (uint256) {\r\n    \treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(\r\n    \taddress spender,\r\n    \tuint256 amount\r\n\t) public override returns (bool) {\r\n    \t_approve(_msgSender(), spender, amount);\r\n    \treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n    \taddress sender,\r\n    \taddress recipient,\r\n    \tuint256 amount\r\n\t) public override returns (bool) {\r\n    \t_transfer(sender, recipient, amount);\r\n    \t_approve(\r\n        \tsender,\r\n        \t_msgSender(),\r\n        \t_allowances[sender][_msgSender()].sub(\r\n            \tamount,\r\n            \t\"ERC20: transfer amount exceeds allowance\"\r\n        \t)\r\n    \t);\r\n    \treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n    \trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n    \trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n    \t_allowances[owner][spender] = amount;\r\n    \temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n    \trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n    \trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n    \trequire(to != address(this), \"You cannot send tokens to the contract\");\r\n    \tbool takeFee = false;\r\n\r\n    \tif (from != owner() && to != owner()) {\r\n        \trequire(!bots[from] && !bots[to]);\r\n        \ttakeFee = true;\r\n\r\n        \tif (transferDelayEnabled) {\r\n            \tif (\r\n                \tto != address(uniswapV2Router) &&\r\n                \tto != address(uniswapV2Pair)\r\n            \t) {\r\n                \trequire(\r\n                    \t_holderLastTransferTimestamp[tx.origin] < block.number,\r\n                    \t\"Transfer Delay enabled. Only one purchase per block allowed.\"\r\n                \t);\r\n                \t_holderLastTransferTimestamp[tx.origin] = block.number;\r\n            \t}\r\n        \t}\r\n\r\n        \tif (\r\n            \tfrom == uniswapV2Pair &&\r\n            \tto != address(uniswapV2Router) &&\r\n            \t!_isExcludedFromFee[to]\r\n        \t) {\r\n            \trequire(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n            \trequire(\r\n                \tbalanceOf(to) + amount <= _maxWalletSize,\r\n                \t\"Exceeds the maxWalletSize.\"\r\n            \t);\r\n            \t_buyCount++;\r\n        \t}\r\n\r\n        \tif (\r\n            \tto == uniswapV2Pair &&\r\n            \tfrom != address(uniswapV2Router) &&\r\n            \t!_isExcludedFromFee[from]\r\n        \t) {\r\n            \trequire(\r\n                \tamount <= _maxTxAmount,\r\n                \t\"Transfer amount exceeds the maxSellAmount.\"\r\n            \t);\r\n        \t}\r\n    \t}\r\n\r\n    \tif (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n        \ttakeFee = false;\r\n    \t}\r\n\r\n    \tuint256 contractTokenBalance = balanceOf(address(this));\r\n    \tif (\r\n        \t!inSwap &&\r\n        \tto == uniswapV2Pair &&\r\n        \tswapEnabled &&\r\n        \tcontractTokenBalance > _taxSwapThreshold &&\r\n        \t_buyCount > _preventSwapBefore\r\n    \t) {\r\n        \tif (!takeFee) {\r\n            \tremoveAllFee();\r\n        \t} else {\r\n            \tamount = _takeFees(from, amount);\r\n        \t}\r\n        \tswapTokensForEth(\r\n            \tmin(amount, min(contractTokenBalance, _maxTaxSwap))\r\n        \t);\r\n        \tuint256 contractETHBalance = address(this).balance;\r\n        \tif (contractETHBalance > 0) {\r\n            \tsendETHToFee(address(this).balance);\r\n        \t}\r\n    \t}\r\n\r\n    \t_tokenTransfer(from, to, amount, takeFee);\r\n\t}\r\n\r\n\tfunction removeAllFee() private {\r\n    \tif (_BuyTax == 0 && _SellTax == 0) return;\r\n    \t_BuyTax = 0;\r\n    \t_SellTax = 0;\r\n\t}\r\n\r\n\tfunction restoreAllFee() private {\r\n    \t_SellTax = _previousSellTax;\r\n    \t_BuyTax = _previousBuyTax;\r\n\t}\r\n\r\n\tfunction _tokenTransfer(\r\n    \taddress from,\r\n    \taddress to,\r\n    \tuint256 amount,\r\n    \tbool takeFee\r\n\t) private {\r\n    \tif (!takeFee) {\r\n        \tremoveAllFee();\r\n    \t} else {\r\n        \tamount = _takeFees(from, amount);\r\n    \t}\r\n\r\n    \t_transferStandard(from, to, amount);\r\n\r\n    \tif (!takeFee) {\r\n        \trestoreAllFee();\r\n    \t}\r\n\t}\r\n\r\n\tfunction _transferStandard(\r\n    \taddress from,\r\n    \taddress to,\r\n    \tuint256 tAmount\r\n\t) private {\r\n    \t_balances[from] = _balances[from].sub(tAmount);\r\n    \tif (to == address(0)) {\r\n        \t_tTotal = _tTotal.sub(tAmount);\r\n        \t_totalBurned = _totalBurned.add(tAmount);\r\n    \t} else {\r\n        \t_balances[to] = _balances[to].add(tAmount);\r\n    \t}\r\n    \temit Transfer(from, to, tAmount);\r\n\t}\r\n\r\n\tfunction _takeFees(address from, uint256 amount) private returns (uint256) {\r\n    \tuint256 tAmount = amount.mul(_BuyTax).div(100);\r\n\r\n    \tif (tAmount > 0) {\r\n        \tuint256 burnAmount = tAmount.mul(10).div(100);\r\n\r\n        \t_transferStandard(from, _taxWallet, tAmount);\r\n\r\n        \tburnFromTSupply(_taxWallet, burnAmount);\r\n    \t}\r\n    \treturn amount - tAmount;\r\n\t}\r\n\r\n\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n    \treturn (a > b) ? b : a;\r\n\t}\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n    \trequire(tokenAmount > 0, \"Not enough tokens\");\r\n    \taddress[] memory path = new address[](2);\r\n    \tpath[0] = address(this);\r\n    \tpath[1] = uniswapV2Router.WETH();\r\n\r\n    \tuint256 actualAmountOut = _fetchAmountOut(tokenAmount, path);\r\n\r\n    \tuint256 slippagedAmountOut = slippage == 100\r\n        \t? actualAmountOut\r\n        \t: actualAmountOut.mul(100 - slippage).div(100);\r\n\r\n    \t// require(amountAccepted < executionPrice, \"INSUFFICIENT_AMOUNT\");\r\n\r\n    \t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n    \tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        \ttokenAmount,\r\n        \tslippagedAmountOut,\r\n        \tpath,\r\n        \taddress(this),\r\n        \tblock.timestamp\r\n    \t);\r\n\t}\r\n\r\n\tfunction burn(address from, uint256 burnAmount) public {\r\n    \trequire(from == msg.sender, \"You cannot burn tokens you do not have\");\r\n    \trequire(from != address(0), \"cannot burn from the zero address\");\r\n    \trequire(\r\n        \tburnAmount > 0 && burnAmount <= balanceOf(from),\r\n        \t\"amount must be greater than zero\"\r\n    \t);\r\n    \t//trasfer to a zero address\r\n    \t_transferStandard(from, address(0), burnAmount);\r\n\t}\r\n\r\n\tfunction burnFromTSupply(address from, uint256 burnAmount) internal {\r\n    \trequire(from != address(0), \"cannot burn from the zero address\");\r\n    \trequire(\r\n        \tburnAmount > 0 && burnAmount <= balanceOf(from),\r\n        \t\"amount must be greater than zero\"\r\n    \t);\r\n    \t//trasfer to a zero address\r\n    \t_transferStandard(from, address(0), burnAmount);\r\n\t}\r\n\r\n\tfunction setUniswapV2Router(address routerAddress) public onlyOwner {\r\n    \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n\r\n    \tuniswapV2Router = _uniswapV2Router;\r\n\t}\r\n\r\n\tfunction setUniswapV2Pair(\r\n    \taddress tokenA,\r\n    \taddress tokenB\r\n\t) external onlyOwner {\r\n    \tuniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(\r\n        \ttokenA,\r\n        \ttokenB\r\n    \t);\r\n\t}\r\n\r\n\tfunction _fetchAmountOut(\r\n    \tuint256 amountIn,\r\n    \taddress[] memory path\r\n\t) internal view returns (uint256 getAmountsAmountOut) {\r\n    \tuint256[] memory amountOut = uniswapV2Router.getAmountsOut(\r\n        \tamountIn,\r\n        \tpath\r\n    \t);\r\n\r\n    \tgetAmountsAmountOut = amountOut[amountOut.length - 1];\r\n\t}\r\n\r\n\tfunction removeLimits() public onlyOwner {\r\n    \t_maxTxAmount = _tTotal;\r\n    \t_maxWalletSize = _tTotal;\r\n    \ttransferDelayEnabled = false;\r\n    \temit MaxTxAmountUpdated(_tTotal);\r\n\t}\r\n\r\n\tfunction sendETHToFee(uint256 amount) internal {\r\n    \t(bool success, ) = _devWallet.call{value: amount}(\"\");\r\n    \trequire(success, \"ETH transfer failed\");\r\n\t}\r\n\r\n\tfunction addBots(address[] memory bots_) public onlyOwner {\r\n    \tfor (uint i = 0; i < bots_.length; i++) {\r\n        \tbots[bots_[i]] = true;\r\n    \t}\r\n\t}\r\n\r\n\tfunction delBots(address[] memory notbot) public onlyOwner {\r\n    \tfor (uint i = 0; i < notbot.length; i++) {\r\n        \tbots[notbot[i]] = false;\r\n    \t}\r\n\t}\r\n\r\n\tfunction isBot(address a) public view returns (bool) {\r\n    \treturn bots[a];\r\n\t}\r\n\r\n\tfunction reduceFees(uint256 _newFee) external {\r\n    \trequire(_msgSender() == _taxWallet);\r\n    \t_BuyTax = _newFee;\r\n    \t_SellTax = _newFee;\r\n\t}\r\n\r\n\tfunction setSlippage(uint256 _slippage) external onlyOwner {\r\n    \trequire(\r\n        \t_slippage <= 100,\r\n        \t\"Slippage value should be in percentage\"\r\n    \t);\r\n    \tslippage = _slippage;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction manualSwap() external {\r\n    \trequire(_msgSender() == _taxWallet);\r\n    \tuint256 tokenBalance = balanceOf(address(this));\r\n\r\n    \tif (tokenBalance > 0) {\r\n        \tswapTokensForEth(tokenBalance);\r\n    \t}\r\n    \tuint256 ethBalance = address(this).balance;\r\n    \tif (ethBalance > 0) {\r\n        \tsendETHToFee(ethBalance);\r\n    \t}\r\n\t}\r\n\r\n\tfunction excludeFromFee(\r\n    \taddress[] calldata accounts,\r\n    \tbool isExcluded\r\n\t) external onlyOwner {\r\n    \tfor (uint256 i = 0; i < accounts.length; i++) {\r\n        \t_isExcludedFromFee[accounts[i]] = isExcluded;\r\n    \t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XTRUMP", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004ff8caea466eb6eff2b18e0d2a297f5ac761696900000000000000000000000099be5cae8640fa8347ebff049b75696e7e1f3a2a0000000000000000000000008efd0865b5da77463e0bef4fa06310db0779f0110000000000000000000000000d7f3d09ab0abd17180e9b31401190f221fd5423", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35d92377a587cdc63c790eb68f19c804e1a5b11e4b43cc4f93c08bb558982e89"}