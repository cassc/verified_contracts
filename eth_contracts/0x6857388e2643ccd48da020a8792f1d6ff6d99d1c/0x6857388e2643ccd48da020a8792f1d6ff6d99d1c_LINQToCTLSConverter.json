{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n/*                              \r\n                    CHAINTOOLS 2023. DEFI REIMAGINED\r\n\r\n                                                               2023\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800            2021           \u28f0\u28fe\u28ff\u28f6\u2844\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28002019\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800     \u2839\u28ffV4\u2844\u2877\u2800\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u28e4\u28fe\u28ff\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800   \u28ff\u28ff\u284f\u2801\u2800\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u28f4\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800 \u2880\u28ff\u28ff\u28ff\u28ff\u28ff\u2804\u2800\u2800\u2800  \u28f0\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800 \u2880\u28f4\u28ff\u28ff\u28ff\u281f\u281b\u280b\u2800\u2800\u2800 \u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u2809\u2809\u2809\u2801\u2880\u28f4\u28ff\u28ffV3\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800  \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u2800\u2800\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u2800\u2800\u2800\u2800\u2800 \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800 \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2840\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800        2017\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ffV2\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800 \u28b9\u28ff \u28ff\u28ff\u28ff\u28ff\u2819\u28bf\u28c6\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u28f4\u28e6\u28e4\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2840\u2800\u2800\u2800\u2800\u2808\u28bb\u28ff\u28ff\u28ff\u28ff\u281b\u283f\u283f\u2836\u2836\u28f6\u2800  \u28ff \u28b8\u28ff\u28ff\u28ff\u28ff\u28c6\u2839\u2807\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28ff\u28ff\u28ff\u28ff\u28f7\u2846\u2800\u2800\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2809\u281b\u28bf\u28f7\u2844\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28e6\u2840\u2800\u2800\u2800\u2800\u2800  \u2839\u2807\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2800\u2800\u28e0\u28f4\u28ff\u28ffV1\u28ff\u28ff\u28ff\u284f\u281b\u2803\u2800\u2800\u2800\u2800\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u2800\u2800\u2818\u280b\u2801\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800  \u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2838\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800  \u2800\u28ff\u28ff\u285f\u28bf\u28ff\u28ff\u2800\u2800\u2800\u2800   \r\n\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u2809\u2819\u28ff\u28ff\u28ff\u28e6\u2840\u2800\u2800\u2800\u2800\u2800 \u2888\u28ff\u28ff\u285f\u28b9\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u287f\u2808\u28ff\u28ff\u285f\u2800\u2800\u2800\u2800\u2800  \u28b8\u28ff\u28ff\u2800\u28b8\u28ff\u28ff\u2800\u2800\u2800\u2800   \r\n\u2800\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u283b\u28ff\u28ff\u28ff\u28ff\u28f6\u28c4\u2800\u2800\u2800\u28b0\u28ff\u28ff\u285f\u2801\u28fe\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f6\u28ff\u281f\u280b\u2800\u28bc\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800  \u28ff\u28ff\u2801\u2800\u28b9\u28ff\u28ff\u2800\u2800\u2800\u2800   \r\n\u2800\u2880\u28f4\u28ff\u287f\u280b\u28b9\u28ff\u2847\u2800\u2800\u2808\u2819\u28ff\u28c7\u2819\u28ff\u28f7\u2800\u2800\u28b8\u28ff\u285f\u2800\u2800\u28bb\u28ff\u284f\u2800\u2800\u2800\u2800\u2800\u2880\u28fc\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800   \u28a8\u28ff\u2847\u2800\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800   \r\n\u28f4\u28ff\u285f\u2809\u2800\u2800\u28fe\u28ff\u2847\u2800\u2800\u2800\u2800\u2888\u28ff\u2844\u2800\u2809\u2800\u2800\u28fc\u28ff\u2846\u2800\u2800\u28b8\u28ff\u28f7\u2800\u2800\u2800\u2800\u28b4\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ef\u2840\u2800\u2800\u2800\u2800    \u28b8\u28ff\u28c7\u2800\u2800\u2800\u28ba\u28ff\u2844\u2800\u2800\u2800   \r\n\u2808\u283b\u2837\u2804\u2800\u2800\u28ff\u28ff\u28f7\u28e4\u28e0\u2800\u2800\u2808\u283d\u2837\u2800\u2800\u2800\u2838\u281f\u281b\u281b\u2812\u2836\u2838\u28ff\u28ff\u28f7\u28e6\u28e4\u28c4\u2808\u283b\u2837\u2804\u2800\u2800\u2800\u283e\u283f\u283f\u28ff\u28f6\u28e4\u2800    \u2818\u281b\u281b\u281b\u2812\u2800\u2838\u283f\u283f\u2826 \r\n\r\n\r\nTelegram: https://t.me/ChaintoolsOfficial\r\nWebsite: https://www.chaintools.ai/\r\nWhitepaper: https://chaintools-whitepaper.gitbook.io/\r\nTwitter: https://twitter.com/ChaintoolsTech\r\ndApp: https://www.chaintools.wtf/\r\n*/\r\n\r\npragma solidity ^0.8.19;\r\n// import \"forge-std/console.sol\";\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IV2Pair {\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function sync() external;\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function kLast() external view returns (uint256 lastK);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 stamp,\r\n            uint256 res0,\r\n            uint256 res1\r\n        );\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\ninterface IV3Pool {\r\n    function liquidity() external view returns (uint128 Liq);\r\n\r\n    struct Info {\r\n        // the amount of liquidity owned by this position\r\n        uint128 liquidity;\r\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\r\n        uint256 feeGrowthInside0LastX128;\r\n        uint256 feeGrowthInside1LastX128;\r\n        // the fees owed to the position owner in token0/token1\r\n        uint128 tokensOwed0;\r\n        uint128 tokensOwed1;\r\n    }\r\n\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (IV3Pool.Info memory liqInfo);\r\n\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes memory data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160,\r\n            int24,\r\n            uint16,\r\n            uint16,\r\n            uint16,\r\n            uint8,\r\n            bool\r\n        );\r\n\r\n    function flash(\r\n        address recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function uniswapV3FlashCallback(\r\n        uint256 fee0,\r\n        uint256 fee1,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function approve(address who, uint256 wad) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n}\r\n\r\ninterface IQuoterV2 {\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n}\r\n\r\ninterface IV3Factory {\r\n    function getPool(\r\n        address token0,\r\n        address token1,\r\n        uint24 poolFee\r\n    ) external view returns (address);\r\n\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address);\r\n}\r\n\r\ninterface INonfungiblePositionManager {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function increaseLiquidity(\r\n        INonfungiblePositionManager.IncreaseLiquidityParams calldata params\r\n    )\r\n        external\r\n        returns (\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function mint(MintParams calldata mp)\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tokenId,\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    function collect(CollectParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata dl)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n}\r\n\r\ninterface IRouterV3 {\r\n    function factory() external view returns (address);\r\n\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function WETH9() external view returns (address);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\r\n        external\r\n        returns (uint256 amountIn);\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n}\r\n\r\ncontract LINQToCTLSConverter {\r\n    INonfungiblePositionManager internal immutable positionManager;\r\n\r\n    address internal immutable CTLS;\r\n    address internal immutable WETH;\r\n    address internal immutable LINQ;\r\n\r\n    address internal immutable multiSig;\r\n    address internal immutable v3Router;\r\n    address internal immutable uniswapV3CTLSPair;\r\n    address internal immutable uniswapV2LINQPair;\r\n\r\n    error Auth();\r\n    error Max0();\r\n    error Max1();\r\n    error InvalidRange();\r\n\r\n    event zapIn(\r\n        address indexed from,\r\n        uint256 amountLPTokens,\r\n        uint256 tokenId,\r\n        uint256 range,\r\n        uint256 amtETHIn,\r\n        uint256 amtTokensIn\r\n    );\r\n\r\n    constructor() {\r\n        positionManager = INonfungiblePositionManager(\r\n            0xC36442b4a4522E871399CD717aBDD847Ab11FE88\r\n        );\r\n        v3Router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n        multiSig = 0xb0Df68E0bf4F54D06A4a448735D2a3d7D97A2222;\r\n\r\n        uniswapV3CTLSPair = 0xcEB492C5E67385E2A08265352d646a0c32A5d085;\r\n        uniswapV2LINQPair = 0xA8A837E2bf0c37fEf5C495951a0DFc33aaEAD57A;\r\n        \r\n        CTLS = 0xdbecDd726f6ad8e24aFc78fe3cC8eb7B73C2D94d;\r\n        LINQ = 0x3e34eabF5858a126cb583107E643080cEE20cA64;\r\n        WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n        IERC20(WETH).approve(address(positionManager), type(uint256).max);\r\n        IERC20(CTLS).approve(address(positionManager), type(uint256).max);\r\n        IERC20(WETH).approve(address(v3Router), type(uint256).max);\r\n    }\r\n\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n    /*\r\n        @notice Converts LINQ-WETH Uniswap V2 LP Tokens to CTLS-WETH Uniswap V3 LP Token\r\n        @param amountIn - Amount in wei of LINQ LP Tokens\r\n        @param minOutWETH - Slippage Check WETH\r\n        @param minOutCTLS - Slippage Check CTLS\r\n        @param range - Desired Liquidity Concentration [0 - 4]\r\n        @return tokenId - CTLS/WETH LP Token ID\r\n        @return usedWETH - Amount of WETH used\r\n        @return usedCTLS - Amount of CTLS used\r\n    */\r\n    function convertLINQToCTLSLp(\r\n        uint256 amountIn,\r\n        uint256 minOutWETH,\r\n        uint256 minOutCTLS,\r\n        uint256 range\r\n    )\r\n        external\r\n        returns (\r\n            uint256 tokenId,\r\n            uint256 usedWETH,\r\n            uint256 usedCTLS\r\n        )\r\n    {\r\n        uint256 balanceWETHBefore = IERC20(WETH).balanceOf(address(this));\r\n        uint256 balanceLINQBefore = IERC20(LINQ).balanceOf(address(this));\r\n        IERC20(uniswapV2LINQPair).transferFrom(\r\n            msg.sender,\r\n            uniswapV2LINQPair,\r\n            amountIn\r\n        );\r\n        IV2Pair(uniswapV2LINQPair).burn(address(this));\r\n        _swapV2TokenIn(\r\n            LINQ,\r\n            uniswapV2LINQPair,\r\n            (IERC20(LINQ).balanceOf(address(this)) - balanceLINQBefore) - 1\r\n        );\r\n        uint256 gotWETH = IERC20(WETH).balanceOf(address(this)) -\r\n            balanceWETHBefore;\r\n        IERC20(WETH).transfer(multiSig, (gotWETH / 100) - 1);\r\n        gotWETH -= gotWETH / 100; //CTLS Tax 5% => 1%\r\n        unchecked {\r\n            int24 cTick = this.getCurrentTick();\r\n            uint256 startTickDeviation = this.getStartTickDeviation(cTick);\r\n            usedWETH = this.getDeviation(gotWETH, startTickDeviation);\r\n\r\n            IRouterV3(v3Router).exactInputSingle(\r\n                IRouterV3.ExactInputSingleParams({\r\n                    tokenIn: WETH,\r\n                    tokenOut: CTLS,\r\n                    fee: 10000,\r\n                    recipient: address(this),\r\n                    deadline: block.timestamp,\r\n                    amountIn: usedWETH,\r\n                    amountOutMinimum: 0,\r\n                    sqrtPriceLimitX96: 0\r\n                })\r\n            );\r\n            uint256 gotCTLS = IERC20(CTLS).balanceOf(address(this)) - 1;\r\n            gotWETH -= usedWETH;\r\n\r\n            (tokenId, usedWETH, usedCTLS) = _mintPosition(\r\n                gotWETH,\r\n                gotCTLS,\r\n                range,\r\n                msg.sender,\r\n                cTick\r\n            );\r\n\r\n            //Max In Check\r\n            if (usedCTLS > gotCTLS) revert Max0();\r\n            if (usedWETH > gotWETH) revert Max1();\r\n\r\n            //Slip Check\r\n            if (minOutWETH > gotWETH) revert Max0();\r\n            if (minOutCTLS > gotCTLS) revert Max1();\r\n\r\n            assembly {\r\n                let refundAmtWETH := sub(gotWETH, usedWETH)\r\n                if gt(refundAmtWETH, 100000000000000) {\r\n                    let inputMem := mload(0x40)\r\n                    mstore(\r\n                        inputMem,\r\n                        0xa9059cbb00000000000000000000000000000000000000000000000000000000\r\n                    )\r\n                    mstore(add(inputMem, 0x04), caller())\r\n                    mstore(add(inputMem, 0x24), refundAmtWETH)\r\n                    pop(\r\n                        call(\r\n                            gas(),\r\n                            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\r\n                            0,\r\n                            inputMem,\r\n                            0x44,\r\n                            0,\r\n                            0\r\n                        )\r\n                    )\r\n                }\r\n\r\n                refundAmtWETH := sub(gotCTLS, usedCTLS)\r\n                if gt(refundAmtWETH, 100000000000000) {\r\n                    let inputMem := mload(0x40)\r\n                    mstore(\r\n                        inputMem,\r\n                        0xa9059cbb00000000000000000000000000000000000000000000000000000000\r\n                    )\r\n                    mstore(add(inputMem, 0x04), caller())\r\n                    mstore(add(inputMem, 0x24), refundAmtWETH)\r\n                    pop(\r\n                        call(\r\n                            gas(),\r\n                            0x3e34eabF5858a126cb583107E643080cEE20cA64,\r\n                            0,\r\n                            inputMem,\r\n                            0x44,\r\n                            0,\r\n                            0\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (gotCTLS - usedCTLS >= 1 ether)\r\n                IERC20(CTLS).transfer(msg.sender, gotCTLS - usedCTLS);\r\n\r\n            emit zapIn(\r\n                msg.sender,\r\n                amountIn,\r\n                tokenId,\r\n                range,\r\n                usedWETH,\r\n                usedCTLS\r\n            );\r\n        }\r\n    }\r\n   \r\n    function _swapV2TokenIn(\r\n        address token,\r\n        address _pair,\r\n        uint256 amount\r\n    ) internal returns (uint256 amountOut) {\r\n        assembly {\r\n            let inputMem := mload(0x40)\r\n            mstore(\r\n                inputMem,\r\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\r\n            )\r\n            mstore(add(inputMem, 0x04), _pair)\r\n            mstore(add(inputMem, 0x24), amount)\r\n            pop(\r\n                call(\r\n                    gas(),\r\n                    0x3e34eabF5858a126cb583107E643080cEE20cA64,\r\n                    0,\r\n                    inputMem,\r\n                    0x44,\r\n                    0,\r\n                    0\r\n                )\r\n            )\r\n        }\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = IV2Pair(_pair).getReserves();\r\n        uint256 balAft = IERC20(token).balanceOf(_pair);\r\n        amountOut = getAmountOut(balAft - reserve0, reserve0, reserve1);\r\n\r\n        assembly {\r\n            let inputMem := mload(0x40)\r\n            mstore(\r\n                inputMem,\r\n                0x022c0d9f00000000000000000000000000000000000000000000000000000000\r\n            )\r\n            mstore(add(inputMem, 0x04), 0)\r\n            mstore(add(inputMem, 0x24), amountOut)\r\n            mstore(add(inputMem, 0x44), address())\r\n            mstore(add(inputMem, 0x64), 0x80)\r\n            mstore(add(inputMem, 0x84), 0)\r\n            pop(call(gas(), _pair, 0, inputMem, 0xA4, 0, 0))\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function _mintPosition(\r\n        uint256 amt0Desired,\r\n        uint256 amt1Desired,\r\n        uint256 range,\r\n        address to,\r\n        int24 tick\r\n    )\r\n        internal\r\n        returns (\r\n            uint256 tokenId,\r\n            uint256 amt0Consumed,\r\n            uint256 amt1Consumed\r\n        )\r\n    {\r\n        int24 tickDist = this.getTickDistance(range);\r\n        (tokenId, , amt0Consumed, amt1Consumed) = positionManager.mint(\r\n            INonfungiblePositionManager.MintParams({\r\n                token0: WETH,\r\n                token1: CTLS,\r\n                fee: 10000,\r\n                tickLower: tick - tickDist < int24(-887000)\r\n                    ? int24(-887000)\r\n                    : tick - tickDist,\r\n                tickUpper: tick + tickDist > int24(887000)\r\n                    ? int24(887000)\r\n                    : tick + tickDist,\r\n                amount0Desired: amt0Desired,\r\n                amount1Desired: amt1Desired,\r\n                amount0Min: 0,\r\n                amount1Min: 0,\r\n                recipient: to,\r\n                deadline: block.timestamp\r\n            })\r\n        );\r\n    }\r\n\r\n    function getDeviation(uint256 amountIn, uint256 startTickDeviation)\r\n        external\r\n        pure\r\n        returns (uint256 adjusted)\r\n    {\r\n        adjusted = (amountIn * (10000 + startTickDeviation)) / 20000;\r\n    }\r\n\r\n    function getStartTickDeviation(int24 currentTick)\r\n        external\r\n        pure\r\n        returns (uint256 perc)\r\n    {\r\n        int24 startTickDeviation;\r\n\r\n        if (currentTick > -98140) {\r\n            startTickDeviation = currentTick + -98140;\r\n        } else {\r\n            startTickDeviation = -98140 + currentTick;\r\n        }\r\n        if (startTickDeviation < 0) {\r\n            startTickDeviation = -startTickDeviation;\r\n        }\r\n        perc = (uint256(int256(startTickDeviation)) * 75) / 99140;\r\n    }\r\n\r\n    function getCurrentTick() external view returns (int24 cTick) {\r\n        (, cTick, , , , , ) = IV3Pool(uniswapV3CTLSPair).slot0();\r\n        cTick = (cTick / 200) * 200;\r\n    }\r\n\r\n    function getTickDistance(uint256 range)\r\n        external\r\n        pure\r\n        returns (int24 tickDistance)\r\n    {\r\n        if (range == 0) {\r\n            tickDistance = 30000;\r\n        } else if (range == 1) {\r\n            tickDistance = 20000;\r\n        } else if (range == 2) {\r\n            tickDistance = 10000;\r\n        } else if (range == 3) {\r\n            tickDistance = 5000;\r\n        } else if (range == 4) {\r\n            tickDistance = 2000;\r\n        } else {\r\n            revert InvalidRange();\r\n        }\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        uint256 amountInWithFee = amountIn * 997;\r\n        amountOut =\r\n            (amountInWithFee * reserveOut) /\r\n            ((reserveIn * 1000) + amountInWithFee);\r\n    }\r\n\r\n\r\n    function withdrawStuck(\r\n        address token,\r\n        address toAddress,\r\n        uint256 amount\r\n    ) external {\r\n        require(msg.sender == multiSig, \"multiSig\");\r\n        if (amount != 0) IERC20(token).transfer(toAddress, amount);\r\n        if (address(this).balance > 0) {\r\n            multiSig.call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Auth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Max0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Max1\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLPTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtETHIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtTokensIn\",\"type\":\"uint256\"}],\"name\":\"zapIn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutCTLS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"convertLINQToCTLSLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedCTLS\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"cTick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTickDeviation\",\"type\":\"uint256\"}],\"name\":\"getDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjusted\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"}],\"name\":\"getStartTickDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"getTickDistance\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"tickDistance\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LINQToCTLSConverter", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a4a1e3c0f1a67c1beade4fe1432129f062d20617a987171af48f247cd03ae4aa"}