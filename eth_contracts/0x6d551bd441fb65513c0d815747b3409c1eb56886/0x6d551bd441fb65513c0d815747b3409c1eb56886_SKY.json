{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SKY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n# Sky Raiders\\n\\nEnter a world transformed by a cosmic event, where the past of humankind is a distant story.\\nThe 2040 meteor impact birthed a world of clouds and floating islands.\\nThis marks the dawn of the Skyward Isles, a place where the sky is the ultimate adventure.\\nYou, a Sky Raider, crash back to Earth in 3169, surviving against all odds to find yourself on a deserted outpost, accompanied by a jet-pack.\\nYour journey in the celestial realms begins here.\\nBut remember, the vast sky is just the beginning of what lies beyond.\\n\\n# Craft, Combat, Conquer\\n\\nBegin your adventure in a massive open-world, third-person universe, where creativity meets adventure.\\nFrom a simple outpost, build your stronghold by crafting, looting, and building.\\nNavigate through mysterious skies\u2014either solo or with friends\u2014engaging foes in both PvP and PvE zones.\\nParticipate in events and tournaments for rewards or become a seasoned merchant by trading on the marketplace,\\nwhere you can buy or sell items with $SKY tokens between other players.\\n\\n# Links\\n\\nPlay Online: https://skyraiders.app\\nDocs: https://docs.skyraiders.app\\nTelegram: https://t.me/skyraiders_game\\nYouTube:  https://www.youtube.com/@skyraiders_game\\nX: https://x.com/skyraiders_game\\n\\n*/\\n\\npragma solidity 0.8.24;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\\n\\ninterface IArbitrumBridge {\\n    function bridgeTokens(uint256 amount) external;\\n\\n    function unbridgeTokens(address recipient, uint256 amount) external;\\n\\n    function setL2ContractAddress(address _l2ContractAddress) external;\\n}\\n\\ncontract SKY is Context, IERC20, Ownable, IArbitrumBridge {\\n    string private constant _name = \\\"Sky Raiders\\\";\\n    string private constant _symbol = \\\"SKY\\\";\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant _totalSupply = 100_000_000 * 10 ** _decimals;\\n\\n    uint256 public _maxTransactionAmount = 800_000 * 10 ** _decimals;\\n    uint256 public _maxWalletSize = 800_000 * 10 ** _decimals;\\n\\n    uint256 public _taxTrigger = 100_000 * 10 ** _decimals;\\n    uint256 public _taxThreshold = 100_000 * 10 ** _decimals;\\n    uint256 public _taxMaxSwap = 1_000_000 * 10 ** _decimals;\\n\\n    uint256 private constant _initialBuyTax = 40;\\n    uint256 private constant _initialSellTax = 40;\\n    uint256 private constant _reduceTaxAtBuys = 40;\\n    uint256 private _totalBuyTransactions = 0;\\n\\n    uint256 public _buyTax = 5;\\n    uint256 public _sellTax = 5;\\n\\n    uint256 private _accumulatedTax;\\n    uint256 private constant _preventTaxSwapBefore = 40;\\n\\n    bool private didLaunch = false;\\n    bool private tradingEnabled = false;\\n    bool private swapEnabled = false;\\n    bool private inSwap = false;\\n    bool public liquifyEnabled = false;\\n\\n    address payable private _marketingWallet;\\n    address payable private _gameWallet;\\n    address payable private _deployerWallet;\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    address private uniswapV2Pair;\\n    IUniswapV2Router02 private uniswapV2Router;\\n\\n    event LaunchExecuted(uint256 tokenAmount, uint256 ethAmount, uint256 timestamp);\\n    event TradingEnabled(bool _tradingEnabled, bool _swapEnabled);\\n    event LimitsLifted(uint256 _value);\\n    event LiquidityAdded(uint256 tokenAmount, uint256 ethAmount);\\n    event SetTax(uint256 _valueBuy, uint256 _valueSell);\\n    event SetTaxParameters(uint256 taxTrigger, uint256 taxThreshold);\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    /**\\n     * @dev Bridges tokens from L1 to L2 for Sky Raiders, boosting transaction speed and reducing costs.\\n     * This supports our move towards a partly decentralized Sky Raiders universe where players can own,\\n     * trade, or sell their game assets like characters, crafted items and skins on the blockchain. Designed for quick\\n     * and cheap in-game actions, it\u2019s ideal for managing assets in Sky Raiders' marketplace.\\n     */\\n\\n    address private l2ContractAddress;\\n    mapping(address => uint256) private _bridgedTokens;\\n\\n    event L2AddressSet(address indexed l2ContractAddress);\\n    event TokensBridged(address indexed user, uint256 amount);\\n    event TokensUnbridged(address indexed recipient, uint256 amount);\\n\\n    function setL2ContractAddress(\\n        address _l2ContractAddress\\n    ) external onlyOwner {\\n        require(_l2ContractAddress != address(0), \\\"Invalid contract address\\\");\\n        l2ContractAddress = _l2ContractAddress;\\n        emit L2AddressSet(_l2ContractAddress);\\n    }\\n\\n    function bridgeTokens(uint256 amount) external {\\n        require(\\n            amount <= _balances[msg.sender],\\n            \\\"Insufficient balance to bridge\\\"\\n        );\\n        _bridgedTokens[msg.sender] += amount;\\n        _balances[msg.sender] -= amount;\\n\\n        emit TokensBridged(msg.sender, amount);\\n    }\\n\\n    function unbridgeTokens(\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner lockTheSwap {\\n        require(\\n            _bridgedTokens[recipient] >= amount,\\n            \\\"Unlock amount exceeds bridged balance\\\"\\n        );\\n        _transfer(address(this), recipient, amount);\\n        _bridgedTokens[recipient] -= amount;\\n        emit TokensUnbridged(recipient, amount);\\n    }\\n\\n    constructor() {\\n        _marketingWallet = payable(0x4ac258D5e923bCA959eAa9D75725260d9C368F85);\\n        _gameWallet = payable(0x4af267D55a676024A7d4A967dF153cfE62Da600a);\\n        _deployerWallet = payable(0x3B311AA18C7ECBcA957f36cA018b8a4B407E5B55);\\n\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[_marketingWallet] = true;\\n        _isExcludedFromFee[_gameWallet] = true;\\n        _isExcludedFromFee[_deployerWallet] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        setInitialSupply(address(this), (_totalSupply * 80) / 100);\\n        setInitialSupply(_msgSender(), (_totalSupply * 20) / 100);\\n\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(\\n            _allowances[sender][_msgSender()] >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(\\n            owner != address(0) && spender != address(0),\\n            \\\"ERC20: approve the zero address\\\"\\n        );\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(\\n            from != address(0) && to != address(0),\\n            \\\"ERC20: transfer the zero address\\\"\\n        );\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount = 0;\\n        uint256 finalAmount = amount;\\n        if (from != owner() && to != owner()) {\\n            if (!tradingEnabled) {\\n                require(\\n                    _isExcludedFromFee[to] || _isExcludedFromFee[from],\\n                    \\\"Trading has not been enabled yet.\\\"\\n                );\\n            }\\n\\n            bool isBuy = from == uniswapV2Pair && to != address(this);\\n            bool isSell = to == uniswapV2Pair && from != address(this);\\n\\n            if (isSell) {\\n                uint256 taxRate = (_totalBuyTransactions > _reduceTaxAtBuys)\\n                    ? _sellTax\\n                    : _initialSellTax;\\n                taxAmount = (amount * taxRate) / 100;\\n                finalAmount = amount - taxAmount;\\n            } else if (isBuy) {\\n                uint256 taxRate = (_totalBuyTransactions > _reduceTaxAtBuys)\\n                    ? _buyTax\\n                    : _initialBuyTax;\\n                taxAmount = (amount * taxRate) / 100;\\n                finalAmount = amount - taxAmount;\\n            }\\n\\n            if (\\n                from == uniswapV2Pair &&\\n                to != address(uniswapV2Router) &&\\n                !_isExcludedFromFee[to]\\n            ) {\\n                require(\\n                    finalAmount <= _maxTransactionAmount,\\n                    \\\"Transaction amount exceeds the maximum allowed limit\\\"\\n                );\\n                require(\\n                    balanceOf(to) + finalAmount <= _maxWalletSize,\\n                    \\\"Recipient's wallet balance will exceed the maximum allowed limit\\\"\\n                );\\n                _totalBuyTransactions++;\\n            }\\n\\n            _accumulatedTax += taxAmount;\\n            uint256 tokenBalance = balanceOf(address(this));\\n\\n            if (\\n                !inSwap &&\\n                to == uniswapV2Pair &&\\n                swapEnabled &&\\n                tokenBalance > _taxThreshold &&\\n                _totalBuyTransactions > _preventTaxSwapBefore &&\\n                _accumulatedTax > _taxTrigger\\n            ) {\\n                uint256 getMinValue = (tokenBalance > _taxMaxSwap)\\n                    ? _taxMaxSwap\\n                    : tokenBalance;\\n                swapTokensForEth((amount > getMinValue) ? getMinValue : amount);\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 0) {\\n                    distributeFees(contractETHBalance);\\n                }\\n                _accumulatedTax = 0;\\n            }\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[address(this)] += taxAmount;\\n\\n            emit Transfer(from, address(this), taxAmount);\\n        }\\n        _balances[from] -= finalAmount;\\n        _balances[to] += (finalAmount);\\n        emit Transfer(from, to, finalAmount);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n        emit LiquidityAdded(tokenAmount, ethAmount);\\n    }\\n\\n    function toggleAddLiquidity() external onlyOwner {\\n        liquifyEnabled = !liquifyEnabled;\\n    }\\n\\n    function distributeFees(uint256 amount) private lockTheSwap {\\n        uint256 half = amount / 2;\\n        _gameWallet.transfer(half);\\n\\n        if (liquifyEnabled) {\\n            uint256 totalTokens = balanceOf(address(this));\\n            addLiquidity(totalTokens, half);\\n        } else {\\n            _marketingWallet.transfer(half);\\n        }\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function setInitialSupply(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _balances[account] = amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function launch() external onlyOwner {\\n        require(!didLaunch, \\\"Launch already called\\\");\\n        require(\\n            address(this).balance > 0 && _balances[address(this)] > 0,\\n            \\\"Contract must have both ETH and Tokens to proceed with the launch\\\"\\n        );\\n        if (block.chainid == 1) {\\n            uniswapV2Router = IUniswapV2Router02(\\n                0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n            );\\n        } else if (block.chainid == 11155111) {\\n            uniswapV2Router = IUniswapV2Router02(\\n                0x86dcd3293C53Cf8EFd7303B57beb2a3F671dDE98\\n            );\\n        } else {\\n            revert(\\\"Unsupported chain ID\\\");\\n        }\\n\\n        _approve(\\n            address(this),\\n            address(uniswapV2Router),\\n            _balances[address(this)]\\n        );\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n                address(this),\\n                uniswapV2Router.WETH()\\n            );\\n        uint256 tokenAmountToAdd = _balances[address(this)];\\n        uint256 ethAmountToAdd = address(this).balance;\\n        addLiquidity(tokenAmountToAdd, ethAmountToAdd);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        didLaunch = true;\\n    }\\n\\n    function start() external onlyOwner {\\n        require(!tradingEnabled, \\\"Trading already opened\\\");\\n        swapEnabled = true;\\n        tradingEnabled = true;\\n        emit TradingEnabled(tradingEnabled, swapEnabled);\\n    }\\n\\n    function liftLimits() external onlyOwner {\\n        _maxTransactionAmount = _totalSupply;\\n        _maxWalletSize = _totalSupply;\\n        emit LimitsLifted(_totalSupply);\\n    }\\n\\n    function setTax(uint256 _valueBuy, uint256 _valueSell) external onlyOwner {\\n        require(\\n            _valueBuy <= 12 && _valueSell <= 12 && tradingEnabled,\\n            \\\"Exceeds value\\\"\\n        );\\n        _buyTax = _valueBuy;\\n        _sellTax = _valueSell;\\n        emit SetTax(_valueBuy, _valueSell);\\n    }\\n\\n    function setTaxParameters(\\n        uint256 taxTrigger,\\n        uint256 taxThreshold\\n    ) external onlyOwner {\\n        require(tradingEnabled, \\\"Trading is not enabled\\\");\\n        // You can add more validation as needed\\n        _taxTrigger = taxTrigger * 10 ** _decimals;\\n        _taxThreshold = taxThreshold * 10 ** _decimals;\\n        emit SetTaxParameters(taxTrigger, taxThreshold);\\n    }\\n\\n    function withdrawStuckTax() external onlyOwner {\\n        uint256 taxAmount = _accumulatedTax;\\n        require(taxAmount > 0, \\\"No tax to withdraw\\\");\\n        uint256 tokenBalance = balanceOf(address(this));\\n        require(tokenBalance >= taxAmount, \\\"Insufficient tokens in contract\\\");\\n        _transfer(address(this), _gameWallet, taxAmount);\\n        _accumulatedTax = 0;\\n    }\\n\\n    function withdrawStuckEther(uint256 amount) external onlyOwner {\\n        require(tradingEnabled, \\\"Trading must be enabled\\\");\\n        require(didLaunch, \\\"Liquidity must be added\\\");\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    function withdrawStuckTokens(\\n        address tokenAddress,\\n        uint256 amount\\n    ) external onlyOwner {\\n        require(tradingEnabled, \\\"Trading must be enabled\\\");\\n        require(didLaunch, \\\"Liquidity must be added\\\");\\n        require(\\n            tokenAddress != address(this),\\n            \\\"The contract's native tokens remain locked for security purposes\\\"\\n        );\\n        IERC20 tokenContract = IERC20(tokenAddress);\\n        uint256 contractBalance = tokenContract.balanceOf(address(this));\\n        require(amount <= contractBalance, \\\"Insufficient balance\\\");\\n        tokenContract.transfer(owner(), amount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2ContractAddress\",\"type\":\"address\"}],\"name\":\"L2AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LaunchExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LimitsLifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueSell\",\"type\":\"uint256\"}],\"name\":\"SetTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxTrigger\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxThreshold\",\"type\":\"uint256\"}],\"name\":\"SetTaxParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnbridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_tradingEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxMaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liftLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2ContractAddress\",\"type\":\"address\"}],\"name\":\"setL2ContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valueSell\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxTrigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxThreshold\",\"type\":\"uint256\"}],\"name\":\"setTaxParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unbridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SKY", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}