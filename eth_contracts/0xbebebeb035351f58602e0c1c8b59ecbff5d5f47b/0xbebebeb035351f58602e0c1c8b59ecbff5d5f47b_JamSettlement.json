{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/base/JamSigning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/JamInteraction.sol\\\";\\nimport \\\"../libraries/JamOrder.sol\\\";\\nimport \\\"../libraries/JamHooks.sol\\\";\\nimport \\\"../libraries/Signature.sol\\\";\\nimport \\\"../libraries/common/BMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\\\";\\n\\n/// @title JamSigning\\n/// @notice Functions which handles the signing and validation of Jam orders\\nabstract contract JamSigning {\\n    mapping(address => mapping(uint256 => uint256)) private standardNonces;\\n    mapping(address => mapping(uint256 => uint256)) private limitOrdersNonces;\\n    uint256 private constant INF_EXPIRY = 9999999999; // expiry for limit orders\\n\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"JamSettlement\\\");\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"1\\\");\\n\\n    bytes4 private constant EIP1271_MAGICVALUE = bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"));\\n    uint256 private constant ETH_SIGN_HASH_PREFIX = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    ));\\n\\n    bytes32 public constant JAM_ORDER_TYPE_HASH = keccak256(abi.encodePacked(\\n        \\\"JamOrder(address taker,address receiver,uint256 expiry,uint256 nonce,address executor,uint16 minFillPercent,bytes32 hooksHash,address[] sellTokens,address[] buyTokens,uint256[] sellAmounts,uint256[] buyAmounts,uint256[] sellNFTIds,uint256[] buyNFTIds,bytes sellTokenTransfers,bytes buyTokenTransfers)\\\"\\n    ));\\n\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    constructor(){\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(EIP712_DOMAIN_TYPEHASH, DOMAIN_NAME, DOMAIN_VERSION, block.chainid, address(this))\\n        );\\n    }\\n\\n    /// @notice The domain separator used in the order validation signature\\n    /// @return The domain separator used in encoding of order signature\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return block.chainid == _CACHED_CHAIN_ID\\n            ? _CACHED_DOMAIN_SEPARATOR\\n            : keccak256(\\n                abi.encode(EIP712_DOMAIN_TYPEHASH, DOMAIN_NAME, DOMAIN_VERSION, block.chainid, address(this))\\n            );\\n    }\\n\\n    /// @notice Hash beforeSettle and afterSettle interactions\\n    /// @param hooks pre and post interactions to hash\\n    /// @return The hash of the interactions\\n    function hashHooks(JamHooks.Def memory hooks) public pure returns (bytes32) {\\n        if (hooks.afterSettle.length == 0 && hooks.beforeSettle.length == 0){\\n            return bytes32(0);\\n        }\\n        return keccak256(abi.encode(hooks));\\n    }\\n\\n    /// @notice Hash the order info and hooks\\n    /// @param order The order to hash\\n    /// @param hooksHash The hash of the hooks\\n    /// @return The hash of the order\\n    function hashOrder(JamOrder.Data calldata order, bytes32 hooksHash) public view returns (bytes32) {\\n        bytes32 dataHash = keccak256(\\n        // divide order into two parts and encode them separately to avoid stack too deep exception\\n            bytes.concat(\\n                abi.encode(\\n                    JAM_ORDER_TYPE_HASH,\\n                    order.taker,\\n                    order.receiver,\\n                    order.expiry,\\n                    order.nonce,\\n                    order.executor,\\n                    order.minFillPercent,\\n                    hooksHash\\n                ),\\n                abi.encode(\\n                    keccak256(abi.encodePacked(order.sellTokens)),\\n                    keccak256(abi.encodePacked(order.buyTokens)),\\n                    keccak256(abi.encodePacked(order.sellAmounts)),\\n                    keccak256(abi.encodePacked(order.buyAmounts)),\\n                    keccak256(abi.encodePacked(order.sellNFTIds)),\\n                    keccak256(abi.encodePacked(order.buyNFTIds)),\\n                    keccak256(order.sellTokenTransfers),\\n                    keccak256(order.buyTokenTransfers)\\n                )\\n            )\\n        );\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                dataHash\\n            )\\n        );\\n    }\\n\\n    /// @notice Validate the order signature\\n    /// @param validationAddress The address to validate the signature against\\n    /// @param hash The hash of the order\\n    /// @param signature The signature to validate\\n    function validateSignature(address validationAddress, bytes32 hash, Signature.TypedSignature calldata signature) public view {\\n        if (signature.signatureType == Signature.Type.EIP712) {\\n            (bytes32 r, bytes32 s, uint8 v) = Signature.getRsv(signature.signatureBytes);\\n            address signer = ecrecover(hash, v, r, s);\\n            require(signer != address(0), \\\"Invalid signer\\\");\\n            if (signer != validationAddress) {\\n                revert(\\\"Invalid EIP712 order signature\\\");\\n            }\\n        } else if (signature.signatureType == Signature.Type.EIP1271) {\\n            require(\\n                IERC1271(validationAddress).isValidSignature(hash, signature.signatureBytes) == EIP1271_MAGICVALUE,\\n                \\\"Invalid EIP1271 order signature\\\"\\n            );\\n        } else if (signature.signatureType == Signature.Type.ETHSIGN) {\\n            bytes32 ethSignHash;\\n            assembly {\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            (bytes32 r, bytes32 s, uint8 v) = Signature.getRsv(signature.signatureBytes);\\n            address signer = ecrecover(ethSignHash, v, r, s);\\n            require(signer != address(0), \\\"Invalid signer\\\");\\n            if (signer != validationAddress) {\\n                revert(\\\"Invalid ETHSIGH order signature\\\");\\n            }\\n        } else {\\n            revert(\\\"Invalid Signature Type\\\");\\n        }\\n    }\\n\\n    /// @notice validate all information about the order\\n    /// @param order The order to validate\\n    /// @param hooks User's hooks to validate\\n    /// @param signature The signature to check against\\n    /// @param curFillPercent Solver/Maker fill percent\\n    function validateOrder(\\n        JamOrder.Data calldata order, JamHooks.Def memory hooks, Signature.TypedSignature calldata signature, uint16 curFillPercent\\n    ) internal {\\n        // Allow settle from user without sig\\n        if (order.taker != msg.sender) {\\n            bytes32 hooksHash = hashHooks(hooks);\\n            bytes32 orderHash = hashOrder(order, hooksHash);\\n            validateSignature(order.taker, orderHash, signature);\\n        }\\n        require(order.executor == msg.sender || order.executor == address(0), \\\"INVALID_EXECUTOR\\\");\\n        require(order.buyTokens.length == order.buyAmounts.length, \\\"INVALID_BUY_TOKENS_LENGTH\\\");\\n        require(order.buyTokens.length == order.buyTokenTransfers.length, \\\"INVALID_BUY_TRANSFERS_LENGTH\\\");\\n        require(order.sellTokens.length == order.sellAmounts.length, \\\"INVALID_SELL_TOKENS_LENGTH\\\");\\n        require(order.sellTokens.length == order.sellTokenTransfers.length, \\\"INVALID_SELL_TRANSFERS_LENGTH\\\");\\n        require(curFillPercent >= order.minFillPercent, \\\"INVALID_FILL_PERCENT\\\");\\n        invalidateOrderNonce(order.taker, order.nonce, order.expiry == INF_EXPIRY);\\n        require(block.timestamp < order.expiry, \\\"ORDER_EXPIRED\\\");\\n    }\\n\\n    /// @notice Cancel limit order by invalidating nonce for the sender address\\n    /// @param nonce The nonce to invalidate\\n    function cancelLimitOrder(uint256 nonce) external {\\n        invalidateOrderNonce(msg.sender, nonce, true);\\n    }\\n\\n    /// @notice Check if taker's limit order nonce is valid\\n    /// @param taker address\\n    /// @param nonce to check\\n    /// @return True if nonce is valid\\n    function isLimitOrderNonceValid(address taker, uint256 nonce) external view returns (bool) {\\n        uint256 invalidatorSlot = nonce >> 8;\\n        uint256 invalidatorBit = 1 << (nonce & 0xff);\\n        return (limitOrdersNonces[taker][invalidatorSlot] & invalidatorBit) == 0;\\n    }\\n\\n    /// @notice Check if nonce is valid and invalidate it\\n    /// @param taker address\\n    /// @param nonce The nonce to invalidate\\n    /// @param isLimitOrder True if it is a limit order\\n    function invalidateOrderNonce(address taker, uint256 nonce, bool isLimitOrder) private {\\n        require(nonce != 0, \\\"ZERO_NONCE\\\");\\n        uint256 invalidatorSlot = nonce >> 8;\\n        uint256 invalidatorBit = 1 << (nonce & 0xff);\\n        mapping(uint256 => uint256) storage invalidNonces = isLimitOrder ? limitOrdersNonces[taker] : standardNonces[taker];\\n        uint256 invalidator = invalidNonces[invalidatorSlot];\\n        require(invalidator & invalidatorBit != invalidatorBit, \\\"INVALID_NONCE\\\");\\n        invalidNonces[invalidatorSlot] = invalidator | invalidatorBit;\\n    }\\n\\n    /// @notice validate if increased amounts are more than initial amounts that user signed\\n    /// @param increasedAmounts The increased amounts to validate (if empty, return initial amounts)\\n    /// @param initialAmounts The initial amounts to validate against\\n    /// @return The increased amounts if exist, otherwise the initial amounts\\n    function validateIncreasedAmounts(\\n        uint256[] calldata increasedAmounts, uint256[] calldata initialAmounts\\n    ) internal returns (uint256[] calldata){\\n        if (increasedAmounts.length == 0) {\\n            return initialAmounts;\\n        }\\n        require(increasedAmounts.length == initialAmounts.length, \\\"INVALID_INCREASED_AMOUNTS_LENGTH\\\");\\n        for (uint256 i; i < increasedAmounts.length; ++i) {\\n            require(increasedAmounts[i] >= initialAmounts[i], \\\"INVALID_INCREASED_AMOUNTS\\\");\\n        }\\n        return increasedAmounts;\\n    }\\n\\n    /// @notice validate all information about the batch of orders\\n    /// @param orders to validate\\n    /// @param hooks All takers hooks to validate\\n    /// @param signatures All takers signatures to check against\\n    /// @param curFillPercents Partial fill percent for each order\\n    function validateBatchOrders(\\n        JamOrder.Data[] calldata orders, JamHooks.Def[] calldata hooks, Signature.TypedSignature[] calldata signatures,\\n        Signature.TakerPermitsInfo[] calldata takersPermitsInfo, bool[] calldata takersPermitsUsage, uint16[] calldata curFillPercents\\n    ) internal {\\n        bool isMaxFill = curFillPercents.length == 0;\\n        bool noHooks = hooks.length == 0;\\n        bool allTakersWithoutPermits = takersPermitsUsage.length == 0;\\n        require(orders.length == signatures.length, \\\"INVALID_SIGNATURES_LENGTH\\\");\\n        require(orders.length == takersPermitsUsage.length || allTakersWithoutPermits, \\\"INVALID_TAKERS_PERMITS_USAGE_LENGTH\\\");\\n        require(orders.length == hooks.length || noHooks, \\\"INVALID_HOOKS_LENGTH\\\");\\n        require(orders.length == curFillPercents.length || isMaxFill, \\\"INVALID_FILL_PERCENTS_LENGTH\\\");\\n        uint takersWithPermits;\\n        for (uint i; i < orders.length; ++i) {\\n            require(orders[i].receiver != address(this), \\\"INVALID_RECEIVER_FOR_BATCH_SETTLE\\\");\\n            validateOrder(\\n                orders[i], noHooks ? JamHooks.Def(new JamInteraction.Data[](0), new JamInteraction.Data[](0)) : hooks[i],\\n                signatures[i], isMaxFill ? BMath.HUNDRED_PERCENT : curFillPercents[i]\\n            );\\n            if (!allTakersWithoutPermits && takersPermitsUsage[i]){\\n                ++takersWithPermits;\\n            }\\n        }\\n        require(takersPermitsInfo.length == takersWithPermits, \\\"INVALID_TAKERS_PERMITS_LENGTH\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/JamTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/JamOrder.sol\\\";\\nimport \\\"../libraries/common/BMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title JamTransfer\\n/// @notice Functions for transferring tokens from SettlementContract\\nabstract contract JamTransfer {\\n\\n    event NativeTransfer(address indexed receiver, uint256 amount);\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Transfer tokens from this contract to receiver\\n    /// @param tokens tokens' addresses\\n    /// @param amounts tokens' amounts\\n    /// @param nftIds NFTs' ids\\n    /// @param tokenTransferTypes command sequence of transfer types\\n    /// @param receiver address\\n    function transferTokensFromContract(\\n        address[] calldata tokens,\\n        uint256[] memory amounts,\\n        uint256[] calldata nftIds,\\n        bytes calldata tokenTransferTypes,\\n        address receiver,\\n        uint16 fillPercent,\\n        bool transferExactAmounts\\n    ) internal {\\n        uint nftInd;\\n        for (uint i; i < tokens.length; ++i) {\\n            if (tokenTransferTypes[i] == Commands.SIMPLE_TRANSFER) {\\n                uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n                uint partialFillAmount = BMath.getPercentage(amounts[i], fillPercent);\\n                require(tokenBalance >= partialFillAmount, \\\"INVALID_OUTPUT_TOKEN_BALANCE\\\");\\n                IERC20(tokens[i]).safeTransfer(receiver, transferExactAmounts ? partialFillAmount : tokenBalance);\\n            } else if (tokenTransferTypes[i] == Commands.NATIVE_TRANSFER){\\n                require(tokens[i] == JamOrder.NATIVE_TOKEN, \\\"INVALID_NATIVE_TOKEN\\\");\\n                uint tokenBalance = address(this).balance;\\n                uint partialFillAmount = BMath.getPercentage(amounts[i], fillPercent);\\n                require(tokenBalance >= partialFillAmount, \\\"INVALID_OUTPUT_NATIVE_BALANCE\\\");\\n                (bool sent, ) = payable(receiver).call{value: transferExactAmounts ?  partialFillAmount : tokenBalance}(\\\"\\\");\\n                require(sent, \\\"FAILED_TO_SEND_ETH\\\");\\n                emit NativeTransfer(receiver, transferExactAmounts ? partialFillAmount : tokenBalance);\\n            } else if (tokenTransferTypes[i] == Commands.NFT_ERC721_TRANSFER) {\\n                uint tokenBalance = IERC721(tokens[i]).balanceOf(address(this));\\n                require(amounts[i] == 1 && tokenBalance >= 1, \\\"INVALID_OUTPUT_ERC721_AMOUNT\\\");\\n                IERC721(tokens[i]).safeTransferFrom(address(this), receiver, nftIds[nftInd++]);\\n            } else if (tokenTransferTypes[i] == Commands.NFT_ERC1155_TRANSFER) {\\n                uint tokenBalance = IERC1155(tokens[i]).balanceOf(address(this), nftIds[nftInd]);\\n                require(tokenBalance >= amounts[i], \\\"INVALID_OUTPUT_ERC1155_BALANCE\\\");\\n                IERC1155(tokens[i]).safeTransferFrom(\\n                    address(this), receiver, nftIds[nftInd++], transferExactAmounts ?  amounts[i] : tokenBalance, \\\"\\\"\\n                );\\n            } else {\\n                revert(\\\"INVALID_TRANSFER_TYPE\\\");\\n            }\\n        }\\n        require(nftInd == nftIds.length, \\\"INVALID_BUY_NFT_IDS_LENGTH\\\");\\n    }\\n\\n    /// @dev Transfer native tokens to receiver from this contract\\n    /// @param receiver address\\n    /// @param amount amount of native tokens\\n    function transferNativeFromContract(address receiver, uint256 amount) public {\\n        (bool sent, ) = payable(receiver).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"FAILED_TO_SEND_ETH\\\");\\n    }\\n\\n    /// @dev Calculate new amounts of tokens if solver transferred excess to contract during settleBatch\\n    /// @param curInd index of current order\\n    /// @param orders array of orders\\n    /// @param fillPercents[] fill percentage\\n    /// @return array of new amounts\\n    function calculateNewAmounts(\\n        uint256 curInd,\\n        JamOrder.Data[] calldata orders,\\n        uint16[] memory fillPercents\\n    ) internal returns (uint256[] memory) {\\n        JamOrder.Data calldata curOrder = orders[curInd];\\n        uint256[] memory newAmounts = new uint256[](curOrder.buyTokens.length);\\n        uint16 curFillPercent = fillPercents.length == 0 ? BMath.HUNDRED_PERCENT : fillPercents[curInd];\\n        for (uint i; i < curOrder.buyTokens.length; ++i) {\\n            if (curOrder.buyTokenTransfers[i] == Commands.SIMPLE_TRANSFER || curOrder.buyTokenTransfers[i] == Commands.NATIVE_TRANSFER) {\\n                uint256 fullAmount;\\n                for (uint j = curInd; j < orders.length; ++j) {\\n                    for (uint k; k < orders[j].buyTokens.length; ++k) {\\n                        if (orders[j].buyTokens[k] == curOrder.buyTokens[i]) {\\n                            fullAmount += orders[j].buyAmounts[k];\\n                            require(fillPercents.length == 0 || curFillPercent == fillPercents[j], \\\"DIFF_FILL_PERCENT_FOR_SAME_TOKEN\\\");\\n                        }\\n                    }\\n                }\\n                uint256 tokenBalance = curOrder.buyTokenTransfers[i] == Commands.NATIVE_TRANSFER ?\\n                    address(this).balance : IERC20(curOrder.buyTokens[i]).balanceOf(address(this));\\n                // if at least two takers buy same token, we need to divide the whole tokenBalance among them.\\n                // for edge case with newAmounts[i] overflow, solver should submit tx with transferExactAmounts=true\\n                newAmounts[i] = BMath.getInvertedPercentage(tokenBalance * curOrder.buyAmounts[i] / fullAmount, curFillPercent);\\n                if (newAmounts[i] < curOrder.buyAmounts[i]) {\\n                    newAmounts[i] = curOrder.buyAmounts[i];\\n                }\\n            } else {\\n                newAmounts[i] = curOrder.buyAmounts[i];\\n            }\\n        }\\n        return newAmounts;\\n    }\\n\\n\\n    /// @dev Check if there are duplicate tokens\\n    /// @param tokens tokens' addresses\\n    /// @param nftIds NFTs' ids\\n    /// @param tokenTransferTypes command sequence of transfer types\\n    /// @return true if there are duplicate tokens\\n    function hasDuplicate(\\n        address[] calldata tokens, uint256[] calldata nftIds, bytes calldata tokenTransferTypes\\n    ) internal pure returns (bool) {\\n        if (tokens.length == 0) {\\n            return false;\\n        }\\n        uint curNftInd;\\n        for (uint i; i < tokens.length - 1; ++i) {\\n            uint tmpNftInd = curNftInd;\\n            for (uint j = i + 1; j < tokens.length; ++j) {\\n                if (tokenTransferTypes[j] == Commands.NFT_ERC721_TRANSFER || tokenTransferTypes[j] == Commands.NFT_ERC1155_TRANSFER){\\n                    ++tmpNftInd;\\n                }\\n                if (tokens[i] == tokens[j]) {\\n                    if (tokenTransferTypes[i] == Commands.NFT_ERC721_TRANSFER ||\\n                        tokenTransferTypes[i] == Commands.NFT_ERC1155_TRANSFER){\\n                        if (nftIds[curNftInd] == nftIds[tmpNftInd]){\\n                            return true;\\n                        }\\n                    } else {\\n                        return true;\\n                    }\\n                }\\n            }\\n            if (tokenTransferTypes[i] == Commands.NFT_ERC721_TRANSFER || tokenTransferTypes[i] == Commands.NFT_ERC1155_TRANSFER){\\n                ++curNftInd;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    /// @param holder The address of the token owner.\\n    /// @param spender The address of the token spender.\\n    /// @param nonce The owner's nonce, increases at each call to permit.\\n    /// @param expiry The timestamp at which the permit is no longer valid.\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\\n    /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n    /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n    /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // DAI's Polygon getNonce, instead of `nonces(address)` function\\n    function getNonce(address user) external view returns (uint256 nonce);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IJamBalanceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/Signature.sol\\\";\\n\\n/// @title IJamBalanceManager\\n/// @notice User approvals are made here. This handles the complexity of multiple allowance types. \\ninterface IJamBalanceManager {\\n\\n    /// @dev All information needed to transfer tokens\\n    struct TransferData {\\n        address from;\\n        address receiver;\\n        address[] tokens;\\n        uint256[] amounts;\\n        uint256[] nftIds;\\n        bytes tokenTransferTypes;\\n        uint16 fillPercent;\\n    }\\n\\n    /// @dev indices for transferTokensWithPermits function\\n    struct Indices {\\n        uint64 batchToApproveInd; // current `batchToApprove` index\\n        uint64 permitSignaturesInd; // current `takerPermitsInfo.permitSignatures` index\\n        uint64 nftsInd; // current `data.nftIds` index\\n        uint64 batchLen; // current length of `batchTransferDetails`\\n    }\\n\\n    /// @notice Transfer tokens from taker to solverContract/settlementContract/makerAddress.\\n    /// Or transfer tokens directly from maker to taker for settleInternal case\\n    /// @param transferData data for transfer\\n    function transferTokens(\\n        TransferData calldata transferData\\n    ) external;\\n\\n    /// @notice Transfer tokens from taker to solverContract/settlementContract\\n    /// @param transferData data for transfer\\n    /// @param takerPermitsInfo taker permits info\\n    function transferTokensWithPermits(\\n        TransferData calldata transferData,\\n        Signature.TakerPermitsInfo calldata takerPermitsInfo\\n    ) external;\\n}\"\r\n    },\r\n    \"src/interfaces/IJamSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/JamInteraction.sol\\\";\\nimport \\\"../libraries/JamOrder.sol\\\";\\nimport \\\"../libraries/JamHooks.sol\\\";\\nimport \\\"../libraries/Signature.sol\\\";\\nimport \\\"../libraries/ExecInfo.sol\\\";\\n\\ninterface IJamSettlement {\\n\\n    /// @dev Event emitted when a settlement is executed successfully\\n    event Settlement(uint256 indexed nonce);\\n\\n    /// @dev Settle a jam order.\\n    /// Pulls sell tokens into the contract and ensures that after running interactions receiver has the minimum of buy\\n    /// @param order user signed order\\n    /// @param signature user signature\\n    /// @param interactions list of interactions to settle the order\\n    /// @param hooks pre and post interactions\\n    /// @param solverData solver specifies this data by itself\\n    function settle(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.SolverData calldata solverData\\n    ) external payable;\\n\\n    /// @dev Settle a jam order using taker's Permit/Permit2 signatures\\n    /// Pulls sell tokens into the contract and ensures that after running interactions receiver has the minimum of buy\\n    /// @param order user signed order\\n    /// @param signature user signature\\n    /// @param takerPermitsInfo taker information about permit and permit2\\n    /// @param interactions list of interactions to settle the order\\n    /// @param hooks pre and post interactions\\n    /// @param solverData solver specifies this data by itself\\n    function settleWithPermitsSignatures(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        Signature.TakerPermitsInfo calldata takerPermitsInfo,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.SolverData calldata solverData\\n    ) external payable;\\n\\n    /// @dev Settle a jam order.\\n    /// Pulls sell tokens into the contract and ensures that after running interactions receiver has the minimum of buy\\n    /// @param order user signed order\\n    /// @param signature user signature\\n    /// @param hooks pre and post interactions\\n    /// @param makerData maker specifies this data by itself\\n    function settleInternal(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.MakerData calldata makerData\\n    ) external payable;\\n\\n    /// @dev Settle a jam order using taker's Permit/Permit2 signatures\\n    /// Pulls sell tokens into the contract and ensures that after running interactions receiver has the minimum of buy\\n    /// @param order user signed order\\n    /// @param signature user signature\\n    /// @param takerPermitsInfo taker information about permit and permit2\\n    /// @param hooks pre and post interactions\\n    /// @param makerData maker specifies this data by itself\\n    function settleInternalWithPermitsSignatures(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        Signature.TakerPermitsInfo calldata takerPermitsInfo,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.MakerData calldata makerData\\n    ) external payable;\\n\\n    /// @dev Settle a batch of orders.\\n    /// Pulls sell tokens into the contract and ensures that after running interactions receivers have the minimum of buy\\n    /// @param orders takers signed orders\\n    /// @param signatures takers signatures\\n    /// @param takersPermitsInfo takers information about permit and permit2\\n    /// @param interactions list of interactions to settle the order\\n    /// @param hooks pre and post takers interactions\\n    /// @param solverData solver specifies this data by itself\\n    function settleBatch(\\n        JamOrder.Data[] calldata orders,\\n        Signature.TypedSignature[] calldata signatures,\\n        Signature.TakerPermitsInfo[] calldata takersPermitsInfo,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def[] calldata hooks,\\n        ExecInfo.BatchSolverData calldata solverData\\n    ) external payable;\\n}\"\r\n    },\r\n    \"src/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\n// Part of IAllowanceTransfer(https://github.com/Uniswap/permit2/blob/main/src/interfaces/IAllowanceTransfer.sol)\\ninterface IPermit2 {\\n\\n    // ------------------\\n    // IAllowanceTransfer\\n    // ------------------\\n\\n    /// @notice Details for a token transfer.\\n    struct AllowanceTransferDetails {\\n        // the owner of the token\\n        address from;\\n        // the recipient of the token\\n        address to;\\n        // the amount of the token\\n        uint160 amount;\\n        // the token to be transferred\\n        address token;\\n    }\\n\\n    /// @notice The permit data for a token\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    /// @notice The permit message signed for multiple token allowances\\n    struct PermitBatch {\\n        // the permit data for multiple token allowances\\n        PermitDetails[] details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n\\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n    function allowance(address user, address token, address spender)\\n    external\\n    view\\n    returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n    /// @param owner The owner of the tokens being approved\\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n    /// @param signature The owner's signature over the permit data\\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n    /// @notice Transfer approved tokens in a batch\\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n    /// @dev Requires the from addresses to have approved at least the desired amount\\n    /// of tokens to msg.sender.\\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n}\"\r\n    },\r\n    \"src/JamBalanceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./interfaces/IJamBalanceManager.sol\\\";\\nimport \\\"./interfaces/IPermit2.sol\\\";\\nimport \\\"./interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"./libraries/JamOrder.sol\\\";\\nimport \\\"./libraries/Signature.sol\\\";\\nimport \\\"./libraries/common/SafeCast160.sol\\\";\\nimport \\\"./libraries/common/BMath.sol\\\";\\nimport \\\"./base/JamTransfer.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title JamBalanceManager\\n/// @notice The reason a balance manager exists is to prevent interaction to the settlement contract draining user funds\\n/// By having another contract that allowances are made to, we can enforce that it is only used to draw in user balances to settlement and not sent out\\ncontract JamBalanceManager is IJamBalanceManager {\\n    address private immutable operator;\\n\\n    using SafeERC20 for IERC20;\\n\\n    IPermit2 private immutable PERMIT2;\\n    address private immutable DAI_TOKEN;\\n    uint256 private immutable _chainId;\\n\\n    constructor(address _operator, address _permit2, address _daiAddress) {\\n        // Operator can be defined at creation time with `msg.sender`\\n        // Pass in the settlement - and that can be the only caller.\\n        operator = _operator;\\n        _chainId = block.chainid;\\n        PERMIT2 = IPermit2(_permit2);\\n        DAI_TOKEN = _daiAddress;\\n    }\\n\\n    modifier onlyOperator(address account) {\\n        require(account == operator, \\\"INVALID_CALLER\\\");\\n        _;\\n    }\\n\\n    /// @inheritdoc IJamBalanceManager\\n    function transferTokens(\\n        TransferData calldata data\\n    ) onlyOperator(msg.sender) external {\\n        IPermit2.AllowanceTransferDetails[] memory batchTransferDetails;\\n        uint nftsInd;\\n        uint batchLen;\\n        for (uint i; i < data.tokens.length; ++i) {\\n            if (data.tokenTransferTypes[i] == Commands.SIMPLE_TRANSFER) {\\n                IERC20(data.tokens[i]).safeTransferFrom(\\n                    data.from, data.receiver, BMath.getPercentage(data.amounts[i], data.fillPercent)\\n                );\\n            } else if (data.tokenTransferTypes[i] == Commands.PERMIT2_TRANSFER) {\\n                if (batchLen == 0){\\n                    batchTransferDetails = new IPermit2.AllowanceTransferDetails[](data.tokens.length - i);\\n                }\\n                batchTransferDetails[batchLen++] = IPermit2.AllowanceTransferDetails({\\n                    from: data.from,\\n                    to: data.receiver,\\n                    amount: SafeCast160.toUint160(BMath.getPercentage(data.amounts[i], data.fillPercent)),\\n                    token: data.tokens[i]\\n                });\\n                continue;\\n            } else if (data.tokenTransferTypes[i] == Commands.NATIVE_TRANSFER) {\\n                require(data.tokens[i] == JamOrder.NATIVE_TOKEN, \\\"INVALID_NATIVE_TOKEN_ADDRESS\\\");\\n                require(data.fillPercent == BMath.HUNDRED_PERCENT, \\\"INVALID_FILL_PERCENT\\\");\\n                if (data.receiver != operator){\\n                    JamTransfer(operator).transferNativeFromContract(\\n                        data.receiver, BMath.getPercentage(data.amounts[i], data.fillPercent)\\n                    );\\n                }\\n            } else if (data.tokenTransferTypes[i] == Commands.NFT_ERC721_TRANSFER) {\\n                require(data.fillPercent == BMath.HUNDRED_PERCENT, \\\"INVALID_FILL_PERCENT\\\");\\n                require(data.amounts[i] == 1, \\\"INVALID_ERC721_AMOUNT\\\");\\n                IERC721(data.tokens[i]).safeTransferFrom(data.from, data.receiver, data.nftIds[nftsInd++]);\\n            } else if (data.tokenTransferTypes[i] == Commands.NFT_ERC1155_TRANSFER) {\\n                require(data.fillPercent == BMath.HUNDRED_PERCENT, \\\"INVALID_FILL_PERCENT\\\");\\n                IERC1155(data.tokens[i]).safeTransferFrom(data.from, data.receiver, data.nftIds[nftsInd++], data.amounts[i], \\\"\\\");\\n            } else {\\n                revert(\\\"INVALID_TRANSFER_TYPE\\\");\\n            }\\n            if (batchLen != 0){\\n                assembly {mstore(batchTransferDetails, sub(mload(batchTransferDetails), 1))}\\n            }\\n        }\\n        require(nftsInd == data.nftIds.length, \\\"INVALID_NFT_IDS_LENGTH\\\");\\n        require(batchLen == batchTransferDetails.length, \\\"INVALID_BATCH_PERMIT2_LENGTH\\\");\\n\\n        if (batchLen != 0){\\n            PERMIT2.transferFrom(batchTransferDetails);\\n        }\\n    }\\n\\n    /// @inheritdoc IJamBalanceManager\\n    function transferTokensWithPermits(\\n        TransferData calldata data,\\n        Signature.TakerPermitsInfo calldata takerPermitsInfo\\n    ) onlyOperator(msg.sender) external {\\n        IPermit2.AllowanceTransferDetails[] memory batchTransferDetails;\\n        IPermit2.PermitDetails[] memory batchToApprove = new IPermit2.PermitDetails[](takerPermitsInfo.noncesPermit2.length);\\n        Indices memory indices = Indices(0, 0, 0, 0);\\n        for (uint i; i < data.tokens.length; ++i) {\\n            if (data.tokenTransferTypes[i] == Commands.SIMPLE_TRANSFER || data.tokenTransferTypes[i] == Commands.CALL_PERMIT_THEN_TRANSFER) {\\n                if (data.tokenTransferTypes[i] == Commands.CALL_PERMIT_THEN_TRANSFER){\\n                    permitToken(\\n                        data.from, data.tokens[i], takerPermitsInfo.deadline, takerPermitsInfo.permitSignatures[indices.permitSignaturesInd++]\\n                    );\\n                }\\n                IERC20(data.tokens[i]).safeTransferFrom(\\n                    data.from, data.receiver, BMath.getPercentage(data.amounts[i], data.fillPercent)\\n                );\\n            } else if (data.tokenTransferTypes[i] == Commands.PERMIT2_TRANSFER || data.tokenTransferTypes[i] == Commands.CALL_PERMIT2_THEN_TRANSFER) {\\n                if (data.tokenTransferTypes[i] == Commands.CALL_PERMIT2_THEN_TRANSFER){\\n                    batchToApprove[indices.batchToApproveInd] = IPermit2.PermitDetails({\\n                        token: data.tokens[i],\\n                        amount: type(uint160).max,\\n                        expiration: takerPermitsInfo.deadline,\\n                        nonce: takerPermitsInfo.noncesPermit2[indices.batchToApproveInd]\\n                    });\\n                    ++indices.batchToApproveInd;\\n                }\\n\\n                if (indices.batchLen == 0){\\n                    batchTransferDetails = new IPermit2.AllowanceTransferDetails[](data.tokens.length - i);\\n                }\\n                batchTransferDetails[indices.batchLen++] = IPermit2.AllowanceTransferDetails({\\n                    from: data.from,\\n                    to: data.receiver,\\n                    amount: SafeCast160.toUint160(BMath.getPercentage(data.amounts[i], data.fillPercent)),\\n                    token: data.tokens[i]\\n                });\\n                continue;\\n            } else if (data.tokenTransferTypes[i] == Commands.NATIVE_TRANSFER) {\\n                require(data.tokens[i] == JamOrder.NATIVE_TOKEN, \\\"INVALID_NATIVE_TOKEN_ADDRESS\\\");\\n                require(data.fillPercent == BMath.HUNDRED_PERCENT, \\\"INVALID_FILL_PERCENT\\\");\\n                if (data.receiver != operator){\\n                    JamTransfer(operator).transferNativeFromContract(\\n                        data.receiver, BMath.getPercentage(data.amounts[i], data.fillPercent)\\n                    );\\n                }\\n            } else if (data.tokenTransferTypes[i] == Commands.NFT_ERC721_TRANSFER) {\\n                require(data.fillPercent == BMath.HUNDRED_PERCENT, \\\"INVALID_FILL_PERCENT\\\");\\n                require(data.amounts[i] == 1, \\\"INVALID_ERC721_AMOUNT\\\");\\n                IERC721(data.tokens[i]).safeTransferFrom(data.from, data.receiver, data.nftIds[indices.nftsInd++]);\\n            } else if (data.tokenTransferTypes[i] == Commands.NFT_ERC1155_TRANSFER) {\\n                require(data.fillPercent == BMath.HUNDRED_PERCENT, \\\"INVALID_FILL_PERCENT\\\");\\n                IERC1155(data.tokens[i]).safeTransferFrom(data.from, data.receiver, data.nftIds[indices.nftsInd++], data.amounts[i], \\\"\\\");\\n            } else {\\n                revert(\\\"INVALID_TRANSFER_TYPE\\\");\\n            }\\n\\n            // Shortening array\\n            if (indices.batchLen != 0){\\n                assembly {mstore(batchTransferDetails, sub(mload(batchTransferDetails), 1))}\\n            }\\n        }\\n        require(indices.batchToApproveInd == batchToApprove.length, \\\"INVALID_NUMBER_OF_TOKENS_TO_APPROVE\\\");\\n        require(indices.batchLen == batchTransferDetails.length, \\\"INVALID_BATCH_PERMIT2_LENGTH\\\");\\n        require(indices.permitSignaturesInd == takerPermitsInfo.permitSignatures.length, \\\"INVALID_NUMBER_OF_PERMIT_SIGNATURES\\\");\\n        require(indices.nftsInd == data.nftIds.length, \\\"INVALID_NFT_IDS_LENGTH\\\");\\n\\n        if (batchToApprove.length != 0) {\\n            // Update approvals for new taker's data.tokens\\n            PERMIT2.permit({\\n                owner: data.from,\\n                permitBatch: IPermit2.PermitBatch({\\n                    details: batchToApprove,\\n                    spender: address(this),\\n                    sigDeadline: takerPermitsInfo.deadline\\n                }),\\n                signature: takerPermitsInfo.signatureBytesPermit2\\n            });\\n        }\\n\\n        // Batch transfer\\n        if (indices.batchLen != 0){\\n            PERMIT2.transferFrom(batchTransferDetails);\\n        }\\n    }\\n\\n    /// @dev Call permit function on token contract, supports both ERC20Permit and DaiPermit formats\\n    /// @param takerAddress address\\n    /// @param tokenAddress address\\n    /// @param deadline timestamp when the signature expires\\n    /// @param permitSignature signature\\n    function permitToken(\\n        address takerAddress, address tokenAddress, uint deadline, bytes calldata permitSignature\\n    ) private {\\n        (bytes32 r, bytes32 s, uint8 v) = Signature.getRsv(permitSignature);\\n\\n        if (tokenAddress == DAI_TOKEN){\\n            if (_chainId == 137){\\n                IDaiLikePermit(tokenAddress).permit(\\n                    takerAddress, address(this), IDaiLikePermit(tokenAddress).getNonce(takerAddress), deadline, true, v, r, s\\n                );\\n            } else {\\n                IDaiLikePermit(tokenAddress).permit(\\n                    takerAddress, address(this), IERC20Permit(tokenAddress).nonces(takerAddress), deadline, true, v, r, s\\n                );\\n            }\\n        } else {\\n            IERC20Permit(tokenAddress).permit(takerAddress, address(this), type(uint).max, deadline, v, r, s);\\n        }\\n\\n    }\\n}\"\r\n    },\r\n    \"src/JamSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./JamBalanceManager.sol\\\";\\nimport \\\"./base/JamSigning.sol\\\";\\nimport \\\"./base/JamTransfer.sol\\\";\\nimport \\\"./interfaces/IJamBalanceManager.sol\\\";\\nimport \\\"./interfaces/IJamSettlement.sol\\\";\\nimport \\\"./libraries/JamInteraction.sol\\\";\\nimport \\\"./libraries/JamOrder.sol\\\";\\nimport \\\"./libraries/JamHooks.sol\\\";\\nimport \\\"./libraries/ExecInfo.sol\\\";\\nimport \\\"./libraries/common/BMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/// @title JamSettlement\\n/// @notice The settlement contract executes the full lifecycle of a trade on chain.\\n/// Solvers figure out what \\\"interactions\\\" to pass to this contract such that the user order is fulfilled.\\n/// The contract ensures that only the user agreed price can be executed and otherwise will fail to execute.\\n/// As long as the trade is fulfilled, the solver is allowed to keep any potential excess.\\ncontract JamSettlement is IJamSettlement, ReentrancyGuard, JamSigning, JamTransfer, ERC721Holder, ERC1155Holder {\\n\\n    IJamBalanceManager public immutable balanceManager;\\n\\n    constructor(address _permit2, address _daiAddress) {\\n        balanceManager = new JamBalanceManager(address(this), _permit2, _daiAddress);\\n    }\\n\\n    receive() external payable {}\\n\\n    function runInteractions(JamInteraction.Data[] calldata interactions) internal returns (bool result) {\\n        for (uint i; i < interactions.length; ++i) {\\n            // Prevent calls to balance manager\\n            require(interactions[i].to != address(balanceManager));\\n            bool execResult = JamInteraction.execute(interactions[i]);\\n\\n            // Return false only if interaction was meant to succeed but failed.\\n            if (!execResult && interactions[i].result) return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @inheritdoc IJamSettlement\\n    function settle(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.SolverData calldata solverData\\n    ) external payable nonReentrant {\\n        validateOrder(order, hooks, signature, solverData.curFillPercent);\\n        require(runInteractions(hooks.beforeSettle), \\\"BEFORE_SETTLE_HOOKS_FAILED\\\");\\n        balanceManager.transferTokens(\\n            IJamBalanceManager.TransferData(\\n                order.taker, solverData.balanceRecipient, order.sellTokens, order.sellAmounts,\\n                order.sellNFTIds, order.sellTokenTransfers, solverData.curFillPercent\\n            )\\n        );\\n        _settle(order, interactions, hooks, solverData.curFillPercent);\\n    }\\n\\n    /// @inheritdoc IJamSettlement\\n    function settleWithPermitsSignatures(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        Signature.TakerPermitsInfo calldata takerPermitsInfo,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.SolverData calldata solverData\\n    ) external payable nonReentrant {\\n        validateOrder(order, hooks, signature, solverData.curFillPercent);\\n        require(runInteractions(hooks.beforeSettle), \\\"BEFORE_SETTLE_HOOKS_FAILED\\\");\\n        balanceManager.transferTokensWithPermits(\\n            IJamBalanceManager.TransferData(\\n                order.taker, solverData.balanceRecipient, order.sellTokens, order.sellAmounts,\\n                order.sellNFTIds, order.sellTokenTransfers, solverData.curFillPercent\\n            ), takerPermitsInfo\\n        );\\n        _settle(order, interactions, hooks, solverData.curFillPercent);\\n    }\\n\\n    /// @inheritdoc IJamSettlement\\n    function settleInternal(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.MakerData calldata makerData\\n    ) external payable nonReentrant {\\n        validateOrder(order, hooks, signature, makerData.curFillPercent);\\n        require(runInteractions(hooks.beforeSettle), \\\"BEFORE_SETTLE_HOOKS_FAILED\\\");\\n        balanceManager.transferTokens(\\n            IJamBalanceManager.TransferData(\\n                order.taker, msg.sender, order.sellTokens, order.sellAmounts,\\n                order.sellNFTIds, order.sellTokenTransfers, makerData.curFillPercent\\n            )\\n        );\\n        _settleInternal(order, hooks, makerData);\\n    }\\n\\n    /// @inheritdoc IJamSettlement\\n    function settleInternalWithPermitsSignatures(\\n        JamOrder.Data calldata order,\\n        Signature.TypedSignature calldata signature,\\n        Signature.TakerPermitsInfo calldata takerPermitsInfo,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.MakerData calldata makerData\\n    ) external payable nonReentrant {\\n        validateOrder(order, hooks, signature, makerData.curFillPercent);\\n        require(runInteractions(hooks.beforeSettle), \\\"BEFORE_SETTLE_HOOKS_FAILED\\\");\\n        balanceManager.transferTokensWithPermits(\\n            IJamBalanceManager.TransferData(\\n                order.taker, msg.sender, order.sellTokens, order.sellAmounts,\\n                order.sellNFTIds, order.sellTokenTransfers, makerData.curFillPercent\\n            ), takerPermitsInfo\\n        );\\n        _settleInternal(order, hooks, makerData);\\n    }\\n\\n    /// @inheritdoc IJamSettlement\\n    function settleBatch(\\n        JamOrder.Data[] calldata orders,\\n        Signature.TypedSignature[] calldata signatures,\\n        Signature.TakerPermitsInfo[] calldata takersPermitsInfo,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def[] calldata hooks,\\n        ExecInfo.BatchSolverData calldata solverData\\n    ) external payable nonReentrant {\\n        validateBatchOrders(orders, hooks, signatures, takersPermitsInfo, solverData.takersPermitsUsage, solverData.curFillPercents);\\n        bool isMaxFill = solverData.curFillPercents.length == 0;\\n        bool executeHooks = hooks.length != 0;\\n        uint takersPermitsInd;\\n        for (uint i; i < orders.length; ++i) {\\n            if (executeHooks){\\n                require(runInteractions(hooks[i].beforeSettle), \\\"BEFORE_SETTLE_HOOKS_FAILED\\\");\\n            }\\n            if (solverData.takersPermitsUsage.length != 0 && solverData.takersPermitsUsage[i]){\\n                balanceManager.transferTokensWithPermits(\\n                    IJamBalanceManager.TransferData(\\n                        orders[i].taker, solverData.balanceRecipient, orders[i].sellTokens, orders[i].sellAmounts,\\n                        orders[i].sellNFTIds, orders[i].sellTokenTransfers, isMaxFill ? BMath.HUNDRED_PERCENT : solverData.curFillPercents[i]\\n                    ), takersPermitsInfo[takersPermitsInd++]\\n                );\\n            } else {\\n                balanceManager.transferTokens(\\n                    IJamBalanceManager.TransferData(\\n                        orders[i].taker, solverData.balanceRecipient, orders[i].sellTokens, orders[i].sellAmounts,\\n                        orders[i].sellNFTIds, orders[i].sellTokenTransfers, isMaxFill ? BMath.HUNDRED_PERCENT : solverData.curFillPercents[i]\\n                    )\\n                );\\n            }\\n        }\\n        require(runInteractions(interactions), \\\"INTERACTIONS_FAILED\\\");\\n        for (uint i; i < orders.length; ++i) {\\n            uint256[] memory curBuyAmounts = solverData.transferExactAmounts ?\\n                orders[i].buyAmounts : calculateNewAmounts(i, orders, solverData.curFillPercents);\\n            transferTokensFromContract(\\n                orders[i].buyTokens, curBuyAmounts, orders[i].buyNFTIds, orders[i].buyTokenTransfers,\\n                orders[i].receiver, isMaxFill ? BMath.HUNDRED_PERCENT : solverData.curFillPercents[i], true\\n            );\\n            if (executeHooks){\\n                require(runInteractions(hooks[i].afterSettle), \\\"AFTER_SETTLE_HOOKS_FAILED\\\");\\n            }\\n            emit Settlement(orders[i].nonce);\\n        }\\n    }\\n\\n    function _settle(\\n        JamOrder.Data calldata order,\\n        JamInteraction.Data[] calldata interactions,\\n        JamHooks.Def calldata hooks,\\n        uint16 curFillPercent\\n    ) private {\\n        require(runInteractions(interactions), \\\"INTERACTIONS_FAILED\\\");\\n        transferTokensFromContract(\\n            order.buyTokens, order.buyAmounts, order.buyNFTIds, order.buyTokenTransfers, order.receiver, curFillPercent, false\\n        );\\n        if (order.receiver == address(this)){\\n            require(!hasDuplicate(order.buyTokens, order.buyNFTIds, order.buyTokenTransfers), \\\"DUPLICATE_TOKENS\\\");\\n            require(hooks.afterSettle.length > 0, \\\"AFTER_SETTLE_HOOKS_REQUIRED\\\");\\n            for (uint i; i < hooks.afterSettle.length; ++i){\\n                require(hooks.afterSettle[i].result, \\\"POTENTIAL_TOKENS_LOSS\\\");\\n            }\\n        }\\n        require(runInteractions(hooks.afterSettle), \\\"AFTER_SETTLE_HOOKS_FAILED\\\");\\n        emit Settlement(order.nonce);\\n    }\\n\\n    function _settleInternal(\\n        JamOrder.Data calldata order,\\n        JamHooks.Def calldata hooks,\\n        ExecInfo.MakerData calldata makerData\\n    ) private {\\n        uint256[] calldata buyAmounts = validateIncreasedAmounts(makerData.increasedBuyAmounts, order.buyAmounts);\\n        balanceManager.transferTokens(\\n            IJamBalanceManager.TransferData(\\n                msg.sender, order.receiver, order.buyTokens, buyAmounts,\\n                order.buyNFTIds, order.buyTokenTransfers, makerData.curFillPercent\\n            )\\n        );\\n        require(runInteractions(hooks.afterSettle), \\\"AFTER_SETTLE_HOOKS_FAILED\\\");\\n        emit Settlement(order.nonce);\\n    }\\n}\"\r\n    },\r\n    \"src/JamSolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"./libraries/JamInteraction.sol\\\";\\nimport \\\"./libraries/JamOrder.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/// @title JamSolver\\n/// @notice This is an example of solver used for tests only\\ncontract JamSolver is ERC721Holder, ERC1155Holder{\\n    using SafeERC20 for IERC20;\\n    address public owner;\\n    address public settlement;\\n    address private constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    constructor(address _settlement) {\\n        owner = msg.sender;\\n        settlement = _settlement;\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlySettlement() {\\n        require(msg.sender == settlement);\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrigin() {\\n        require(tx.origin == owner);\\n        _;\\n    }\\n\\n    function withdraw (address receiver) public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(receiver).call{value: address(this).balance}(\\\"\\\");\\n        }\\n    }\\n\\n    function withdrawTokens (address[] calldata tokens, address receiver) public onlyOwner {\\n        for (uint i; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            if (token.balanceOf(address(this)) > 0) {\\n                token.safeTransfer(receiver, token.balanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    function execute (\\n        JamInteraction.Data[] calldata calls, address[] calldata outputTokens, uint256[] calldata outputAmounts,\\n        uint256[] calldata outputIds, bytes calldata outputTransferTypes, address receiver\\n    ) public payable onlyOwnerOrigin onlySettlement {\\n        for(uint i; i < calls.length; i++) {\\n            JamInteraction.execute(calls[i]);\\n        }\\n\\n        for(uint i; i < outputTokens.length; i++) {\\n            if (outputTransferTypes[i] == Commands.SIMPLE_TRANSFER){\\n                IERC20 token = IERC20(outputTokens[i]);\\n                token.safeTransfer(receiver, outputAmounts[i]);\\n            } else if (outputTransferTypes[i] == Commands.NATIVE_TRANSFER){\\n                payable(receiver).call{value: outputAmounts[i]}(\\\"\\\");\\n            } else if (outputTransferTypes[i] == Commands.NFT_ERC721_TRANSFER){\\n                IERC721 token = IERC721(outputTokens[i]);\\n                token.safeTransferFrom(address(this), receiver, outputIds[i]);\\n            } else if (outputTransferTypes[i] == Commands.NFT_ERC1155_TRANSFER){\\n                IERC1155 token = IERC1155(outputTokens[i]);\\n                token.safeTransferFrom(address(this), receiver, outputIds[i], outputAmounts[i], \\\"\\\");\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/libraries/common/BMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary BMath {\\n\\n    uint16 internal constant HUNDRED_PERCENT = 10000;\\n\\n    function getPercentage(uint256 value, uint16 percent) internal pure returns (uint256){\\n        if (percent >= HUNDRED_PERCENT){\\n            return value;\\n        }\\n        return value * percent / HUNDRED_PERCENT;\\n    }\\n\\n    function getInvertedPercentage(uint256 value, uint16 percent) internal pure returns (uint256){\\n        if (percent >= HUNDRED_PERCENT){\\n            return value;\\n        }\\n        return value * HUNDRED_PERCENT / percent;\\n    }\\n\\n}\"\r\n    },\r\n    \"src/libraries/common/SafeCast160.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary SafeCast160 {\\n    /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160\\n    error UnsafeCast();\\n\\n    /// @notice Safely casts uint256 to uint160\\n    /// @param value The uint256 to be cast\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) revert UnsafeCast();\\n        return uint160(value);\\n    }\\n}\"\r\n    },\r\n    \"src/libraries/ExecInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary ExecInfo {\\n\\n    /// @dev Data structure that solvers specify by themselves in settle() function\\n    struct SolverData {\\n        address balanceRecipient; // receiver of the initial tokens transfer from taker (usually it is solver contract)\\n        uint16 curFillPercent; // percentage by which the solver fills the order (curFillPercent >= order.minFillPercent)\\n    }\\n\\n    /// @dev Data structure that solvers specify by themselves in settleBatch() function\\n    struct BatchSolverData {\\n        address balanceRecipient; // receiver of the initial tokens transfer from taker (usually it is solver contract)\\n        uint16[] curFillPercents; // if empty array, then all orders will be 100% filled\\n        bool[] takersPermitsUsage; // indicates whether taker has permit/permit2 signature for each order\\n                                  // (if empty array, then all orders without permits signatures)\\n        bool transferExactAmounts; // True - if solver is planning to transfer exact amounts which are specified in order.buyAmounts\\n                                   // False - if solver is planning to transfer more tokens than in order.buyAmounts,\\n    }\\n\\n    /// @dev Data structure that makers specify by themselves in settleInternal() function\\n    struct MakerData {\\n        uint256[] increasedBuyAmounts; // if maker wants to increase user's order.buyAmounts,\\n                                       // then maker can specify new buyAmounts here, otherwise it should be empty array\\n        uint16 curFillPercent; // percentage by which the maker fills the order (curFillPercent >= order.minFillPercent)\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/libraries/JamHooks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/JamInteraction.sol\\\";\\n\\n/// @title JamHooks\\n/// @notice JamHooks is a library for managing pre and post interactions\\nlibrary JamHooks {\\n\\n    /// @dev Data structure for pre and post interactions\\n    struct Def {\\n        JamInteraction.Data[] beforeSettle;\\n        JamInteraction.Data[] afterSettle;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/JamInteraction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary JamInteraction {\\n    /// @dev Data representing an interaction on the chain\\n    struct Data {\\n        /// \\n        bool result;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @dev Execute the interaciton and return the result\\n    /// \\n    /// @param interaction The interaction to execute\\n    /// @return result Whether the interaction succeeded\\n    function execute(Data calldata interaction) internal returns (bool result) {\\n        (bool _result,) = payable(interaction.to).call{ value: interaction.value }(interaction.data);\\n        return _result;\\n    }\\n}\"\r\n    },\r\n    \"src/libraries/JamOrder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/// @title Commands\\n/// @notice Commands are used to specify how tokens are transferred in Data.buyTokenTransfers and Data.sellTokenTransfers\\nlibrary Commands {\\n    bytes1 internal constant SIMPLE_TRANSFER = 0x00; // simple transfer with standard transferFrom\\n    bytes1 internal constant PERMIT2_TRANSFER = 0x01; // transfer using permit2.transfer\\n    bytes1 internal constant CALL_PERMIT_THEN_TRANSFER = 0x02; // call permit then simple transfer\\n    bytes1 internal constant CALL_PERMIT2_THEN_TRANSFER = 0x03; // call permit2.permit then permit2.transfer\\n    bytes1 internal constant NATIVE_TRANSFER = 0x04;\\n    bytes1 internal constant NFT_ERC721_TRANSFER = 0x05;\\n    bytes1 internal constant NFT_ERC1155_TRANSFER = 0x06;\\n}\\n\\n/// @title JamOrder\\nlibrary JamOrder {\\n\\n    address internal constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Data representing a Jam Order.\\n    struct Data {\\n        address taker;\\n        address receiver;\\n        uint256 expiry;\\n        uint256 nonce;\\n        address executor; // only msg.sender=executor is allowed to execute (if executor=address(0), then order can be executed by anyone)\\n        uint16 minFillPercent; // 100% = 10000, if taker allows partial fills, then it could be less than 100%\\n        bytes32 hooksHash; // keccak256(pre interactions + post interactions)\\n        address[] sellTokens;\\n        address[] buyTokens;\\n        uint256[] sellAmounts;\\n        uint256[] buyAmounts;\\n        uint256[] sellNFTIds;\\n        uint256[] buyNFTIds;\\n        bytes sellTokenTransfers; // Commands sequence of sellToken transfer types\\n        bytes buyTokenTransfers; // Commands sequence of buyToken transfer types\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Signature {\\n\\n    enum Type {\\n        NONE,    // 0\\n        EIP712,  //1\\n        EIP1271, //2\\n        ETHSIGN  //3\\n    }\\n\\n    struct TypedSignature {\\n        Type signatureType;\\n        bytes signatureBytes;\\n    }\\n\\n    struct TakerPermitsInfo {\\n        bytes[] permitSignatures;\\n        bytes signatureBytesPermit2;\\n        uint48[] noncesPermit2;\\n        uint48 deadline;\\n    }\\n\\n    function getRsv(bytes memory sig) internal pure returns (bytes32, bytes32, uint8){\\n        require(sig.length == 65, \\\"Invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := and(mload(add(sig, 65)), 255)\\n        }\\n        if (v < 27) v += 27;\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"Invalid sig value S\\\");\\n        require(v == 27 || v == 28, \\\"Invalid sig value V\\\");\\n        return (r, s, v);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permit2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Settlement\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JAM_ORDER_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceManager\",\"outputs\":[{\"internalType\":\"contract IJamBalanceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"beforeSettle\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"afterSettle\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JamHooks.Def\",\"name\":\"hooks\",\"type\":\"tuple\"}],\"name\":\"hashHooks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"minFillPercent\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"sellTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sellTokenTransfers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyTokenTransfers\",\"type\":\"bytes\"}],\"internalType\":\"struct JamOrder.Data\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isLimitOrderNonceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"minFillPercent\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"sellTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sellTokenTransfers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyTokenTransfers\",\"type\":\"bytes\"}],\"internalType\":\"struct JamOrder.Data\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"interactions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"beforeSettle\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"afterSettle\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JamHooks.Def\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"balanceRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"curFillPercent\",\"type\":\"uint16\"}],\"internalType\":\"struct ExecInfo.SolverData\",\"name\":\"solverData\",\"type\":\"tuple\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"minFillPercent\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"sellTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sellTokenTransfers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyTokenTransfers\",\"type\":\"bytes\"}],\"internalType\":\"struct JamOrder.Data[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"permitSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytesPermit2\",\"type\":\"bytes\"},{\"internalType\":\"uint48[]\",\"name\":\"noncesPermit2\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"internalType\":\"struct Signature.TakerPermitsInfo[]\",\"name\":\"takersPermitsInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"interactions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"beforeSettle\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"afterSettle\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JamHooks.Def[]\",\"name\":\"hooks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"balanceRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"curFillPercents\",\"type\":\"uint16[]\"},{\"internalType\":\"bool[]\",\"name\":\"takersPermitsUsage\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"transferExactAmounts\",\"type\":\"bool\"}],\"internalType\":\"struct ExecInfo.BatchSolverData\",\"name\":\"solverData\",\"type\":\"tuple\"}],\"name\":\"settleBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"minFillPercent\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"sellTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sellTokenTransfers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyTokenTransfers\",\"type\":\"bytes\"}],\"internalType\":\"struct JamOrder.Data\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"beforeSettle\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"afterSettle\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JamHooks.Def\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"increasedBuyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"curFillPercent\",\"type\":\"uint16\"}],\"internalType\":\"struct ExecInfo.MakerData\",\"name\":\"makerData\",\"type\":\"tuple\"}],\"name\":\"settleInternal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"minFillPercent\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"sellTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sellTokenTransfers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyTokenTransfers\",\"type\":\"bytes\"}],\"internalType\":\"struct JamOrder.Data\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"permitSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytesPermit2\",\"type\":\"bytes\"},{\"internalType\":\"uint48[]\",\"name\":\"noncesPermit2\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"internalType\":\"struct Signature.TakerPermitsInfo\",\"name\":\"takerPermitsInfo\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"beforeSettle\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"afterSettle\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JamHooks.Def\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"increasedBuyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"curFillPercent\",\"type\":\"uint16\"}],\"internalType\":\"struct ExecInfo.MakerData\",\"name\":\"makerData\",\"type\":\"tuple\"}],\"name\":\"settleInternalWithPermitsSignatures\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"minFillPercent\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"hooksHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"sellTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyNFTIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sellTokenTransfers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyTokenTransfers\",\"type\":\"bytes\"}],\"internalType\":\"struct JamOrder.Data\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"permitSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytesPermit2\",\"type\":\"bytes\"},{\"internalType\":\"uint48[]\",\"name\":\"noncesPermit2\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"internalType\":\"struct Signature.TakerPermitsInfo\",\"name\":\"takerPermitsInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"interactions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"beforeSettle\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct JamInteraction.Data[]\",\"name\":\"afterSettle\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JamHooks.Def\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"balanceRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"curFillPercent\",\"type\":\"uint16\"}],\"internalType\":\"struct ExecInfo.SolverData\",\"name\":\"solverData\",\"type\":\"tuple\"}],\"name\":\"settleWithPermitsSignatures\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferNativeFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"validateSignature\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JamSettlement", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba30000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}