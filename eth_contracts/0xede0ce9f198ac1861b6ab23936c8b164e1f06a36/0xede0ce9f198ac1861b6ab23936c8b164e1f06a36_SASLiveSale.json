{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n// SAS LIVE SALE\r\n// Powered By ShibArmyStrong\r\n\r\n// Important Notice: The total supply of SAS is planned to be managed considering the Shibarium bridge, Ethereum airdrops, and Live sale.\r\n//\r\n//When you send Ethereum to this contract address, the following operations will be automatically executed:\r\n// - SAS will be sent to your wallet at a 1:1 ratio based on the average cost of ShibaSwap and Uniswap.\r\n//- With 1% of the sent ETH amount, the lowest swap will be purchased, and the acquired amount will again be sent to this contract address.\r\n//\r\n// When you send Ethereum to this contract address, the following operations will be manually executed by the developer:\r\n//- Half of the ETH revenue generated on this contract will be added as liquidity on Ethereum. The remaining ETH revenue will be used to add liquidity on Shibarium.\r\n//\r\n// The plan will proceed as follows:\r\n// Half of the total supply will be held until the bridging is done in the Marketing wallet.\r\n// 25% of the total supply will be put up for sale on this contract.\r\n//The remaining portion will be added as liquidity on the Ethereum mainnet using half of the revenue generated here.\r\n\r\n// Just build with SHIBARIUM.\r\n// Telegram (Headquarters): https://t.me/ShibArmy_SAS\r\n// Twitter: https://twitter.com/ShibArmy_SAS\r\n// Web: https://www.shibarmystrong.com/\r\n\r\n// Created for ShibArmyStrong by ShibArmy\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\ninterface IUniswapRouter {function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ncontract SASLiveSale {\r\n    address public owner;\r\n    address public SAS;\r\n    address public WETH;\r\n    address public SHIBASWAPpair;\r\n    address public UNISWAPpair;\r\n    address public SHIBASWAProuter;\r\n    address public UNISWAProuter;\r\n    bool public SaleStatus;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        SAS = 0x28BE7E8cD8125CB7A74D2002A5862E1bfd774cd9;\r\n        WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        SHIBASWAPpair = 0x1a98AAe831759EFa5a36f78336defA156957BC07;\r\n        UNISWAPpair = 0x6a604ae0F7949f1d58c46cB5dd6259509180af47;\r\n        SHIBASWAProuter = 0x03f7724180AA6b939894B5Ca4314783B0b36b329;\r\n        UNISWAProuter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        SaleStatus = true;\r\n    }\r\n\r\n    function SetSaleStatus(bool _newSaleStatus) external onlyOwner {\r\n        SaleStatus = _newSaleStatus;\r\n    }\r\n\r\n    function withdawlETH() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawlToken(address _tokenAddress) external onlyOwner {\r\n        IERC20(_tokenAddress).transfer(msg.sender, IERC20(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function getSwapReserves(address pair) internal view returns (uint256, uint256)\r\n    {\r\n        uint256 reserve0 = IERC20(SAS).balanceOf(pair);\r\n        uint256 reserve1 = IERC20(WETH).balanceOf(pair);\r\n        (uint256 reserveSAS, uint256 reserveETH) = reserve0 > reserve1 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n        return (reserveSAS, reserveETH);\r\n    }\r\n\r\n    function addLiquidityWithETHForSas(address Router, uint256 ETHforLiqudity, uint256 SASforLiqudity) internal\r\n\t{\r\n        IUniswapRouter(Router).addLiquidityETH{value: ETHforLiqudity}(\r\n            SAS,\r\n            SASforLiqudity,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function SWAPforSAS(address Router, uint256 amount) internal {\r\n        address[] memory path1 = new address[](2);\r\n        path1[0] = WETH;\r\n        path1[1] = SAS;\r\n        IUniswapRouter(Router)\r\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path1,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function _RunForSas(address SENDER, uint256 VALUE) internal {\r\n        require(SaleStatus == true, \"The sale is closed\");\r\n        (uint256 SHIBASWAPreserveSAS, uint256 SHIBASWAPreserveETH) = getSwapReserves(SHIBASWAPpair);\r\n        (uint256 UNISWAPreserveSAS, uint256 UNISWAPreserveETH) = getSwapReserves(UNISWAPpair);\r\n        uint256 reserveSAS = SHIBASWAPreserveSAS + UNISWAPreserveSAS;\r\n        uint256 reserveETH = SHIBASWAPreserveETH + UNISWAPreserveETH;\r\n\r\n        uint256 returnSAS = (reserveSAS / reserveETH) * VALUE;\r\n        require(returnSAS < IERC20(SAS).balanceOf(address(this)), \"There is not enough SAS balance\");\r\n        IERC20(SAS).transfer(SENDER, returnSAS);\r\n        uint256 ETHforSWAP = (VALUE / 100);\r\n\t\taddress ROUTERminprice = ((SHIBASWAPreserveSAS / SHIBASWAPreserveETH) > (UNISWAPreserveSAS / UNISWAPreserveETH)) ? SHIBASWAProuter : UNISWAProuter;\r\n        SWAPforSAS(ROUTERminprice, ETHforSWAP);\r\n    }\r\n\r\n    receive() external payable {\r\n        _RunForSas(msg.sender, msg.value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SAS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIBASWAPpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIBASWAProuter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newSaleStatus\",\"type\":\"bool\"}],\"name\":\"SetSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAPpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAProuter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdawlETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawlToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SASLiveSale", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4105f9f265e0dc5ef88bd035a225c317f8eebede90a5688676eba3f81c45a355"}