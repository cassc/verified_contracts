// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenERC721DropV3.sol'

pragma solidity ^0.8.4;

import "../../api/impl/IAspenERC721Drop.sol";
import "../../api/IAspenFeatures.sol";
import "../../api/IAspenVersioned.sol";
import "../../api/IMulticallable.sol";
import "../../api/standard/IERC721.sol";
import "../../api/standard/IERC2981.sol";
import "../../api/standard/IERC4906.sol";
import "../../api/issuance/INFTSupply.sol";
import "../../api/issuance/INFTSupply.sol";
import "../../api/issuance/INFTLimitSupply.sol";
import "../../api/issuance/ICedarNFTIssuance.sol";
import "../../api/issuance/ICedarNFTIssuance.sol";
import "../../api/issuance/ICedarNFTIssuance.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/baseURI/IUpdateBaseURI.sol";
import "../../api/baseURI/IUpdateBaseURI.sol";
import "../../api/metadata/IContractMetadata.sol";
import "../../api/metadata/IContractMetadata.sol";
import "../../api/metadata/INFTMetadata.sol";
import "../../api/ownable/IOwnable.sol";
import "../../api/pausable/IPausable.sol";
import "../../api/pausable/IPausable.sol";
import "../../api/agreement/IAgreement.sol";
import "../../api/agreement/IAgreement.sol";
import "../../api/agreement/IAgreement.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IPlatformFee.sol";
import "../../api/lazymint/ILazyMint.sol";
import "../../api/issuance/INFTClaimCount.sol";

/// Delegate features
interface IDelegateBaseAspenERC721DropV3 is IDelegatedNFTSupplyV1, IDelegatedNFTIssuanceV1, IDelegatedRoyaltyV0, IDelegatedUpdateBaseURIV1, IDelegatedPausableV0, IDelegatedAgreementV1, IDelegatedPlatformFeeV0 {}

/// Restricted features
interface IRestrictedBaseAspenERC721DropV3 is IRestrictedERC4906V0, IRestrictedNFTLimitSupplyV1, IRestrictedNFTIssuanceV5, IRestrictedRoyaltyV1, IRestrictedUpdateBaseURIV1, IRestrictedMetadataV2, IRestrictedPausableV1, IRestrictedAgreementV3, IRestrictedPrimarySaleV2, IRestrictedOperatorFiltererV0, IRestrictedOperatorFilterToggleV0, IRestrictedLazyMintV1, IRestrictedNFTClaimCountV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseAspenERC721DropV3 is IAspenFeaturesV1, IAspenVersionedV2, IMulticallableV0, IERC721V4, IERC2981V0, IPublicNFTSupplyV0, IPublicNFTIssuanceV5, IPublicRoyaltyV1, IPublicMetadataV0, IAspenNFTMetadataV1, IPublicOwnableV1, IPublicAgreementV2, IPublicPrimarySaleV1, IPublicOperatorFilterToggleV1 {
    function supportedFeatureCodes() override public pure returns (uint256[] memory features) {
        features = new uint256[](34);
        /// IAspenFeatures.sol:IAspenFeaturesV1
        features[0] = 0x6efbb19b;
        /// IAspenVersioned.sol:IAspenVersionedV2
        features[1] = 0xe4144b09;
        /// IMulticallable.sol:IMulticallableV0
        features[2] = 0xad792170;
        /// standard/IERC721.sol:IERC721V4
        features[3] = 0xbf01b245;
        /// standard/IERC2981.sol:IERC2981V0
        features[4] = 0x4313e0e3;
        /// standard/IERC4906.sol:IRestrictedERC4906V0
        features[5] = 0xd8519fe1;
        /// issuance/INFTSupply.sol:IPublicNFTSupplyV0
        features[6] = 0x92ad6684;
        /// issuance/INFTSupply.sol:IDelegatedNFTSupplyV1
        features[7] = 0xad089694;
        /// issuance/INFTLimitSupply.sol:IRestrictedNFTLimitSupplyV1
        features[8] = 0xe31b6d69;
        /// issuance/ICedarNFTIssuance.sol:IPublicNFTIssuanceV5
        features[9] = 0x12ec382;
        /// issuance/ICedarNFTIssuance.sol:IDelegatedNFTIssuanceV1
        features[10] = 0x7f7f3224;
        /// issuance/ICedarNFTIssuance.sol:IRestrictedNFTIssuanceV5
        features[11] = 0x4134f7c0;
        /// royalties/IRoyalty.sol:IPublicRoyaltyV1
        features[12] = 0x3dcd5bc8;
        /// royalties/IRoyalty.sol:IDelegatedRoyaltyV0
        features[13] = 0xb43da18a;
        /// royalties/IRoyalty.sol:IRestrictedRoyaltyV1
        features[14] = 0x29e81c60;
        /// baseURI/IUpdateBaseURI.sol:IDelegatedUpdateBaseURIV1
        features[15] = 0xed70707;
        /// baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV1
        features[16] = 0xe7f77644;
        /// metadata/IContractMetadata.sol:IPublicMetadataV0
        features[17] = 0xe0412fa9;
        /// metadata/IContractMetadata.sol:IRestrictedMetadataV2
        features[18] = 0x7c749d62;
        /// metadata/INFTMetadata.sol:IAspenNFTMetadataV1
        features[19] = 0x16154d09;
        /// ownable/IOwnable.sol:IPublicOwnableV1
        features[20] = 0x48fcaf28;
        /// pausable/IPausable.sol:IDelegatedPausableV0
        features[21] = 0x8b81344f;
        /// pausable/IPausable.sol:IRestrictedPausableV1
        features[22] = 0x9a19ec63;
        /// agreement/IAgreement.sol:IPublicAgreementV2
        features[23] = 0x6051f2a9;
        /// agreement/IAgreement.sol:IDelegatedAgreementV1
        features[24] = 0x3ae96461;
        /// agreement/IAgreement.sol:IRestrictedAgreementV3
        features[25] = 0x2f96dff3;
        /// primarysale/IPrimarySale.sol:IPublicPrimarySaleV1
        features[26] = 0x47a9ced4;
        /// primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV2
        features[27] = 0x63ff2dbf;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFiltererV0
        features[28] = 0x8622d2ee;
        /// royalties/IRoyalty.sol:IPublicOperatorFilterToggleV1
        features[29] = 0x90fc4399;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFilterToggleV0
        features[30] = 0x22a8937c;
        /// royalties/IPlatformFee.sol:IDelegatedPlatformFeeV0
        features[31] = 0x6195f7de;
        /// lazymint/ILazyMint.sol:IRestrictedLazyMintV1
        features[32] = 0x7f0a633a;
        /// issuance/INFTClaimCount.sol:IRestrictedNFTClaimCountV0
        features[33] = 0x9a6157ef;
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 3;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IAspenERC721Drop.sol:IAspenERC721DropV3";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID != 0x0) && ((interfaceID != 0xffffffff) && ((interfaceID == 0x01ffc9a7) || ((interfaceID == type(IAspenFeaturesV1).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IERC721V4).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IRestrictedERC4906V0).interfaceId) || ((interfaceID == type(IPublicNFTSupplyV0).interfaceId) || ((interfaceID == type(IDelegatedNFTSupplyV1).interfaceId) || ((interfaceID == type(IRestrictedNFTLimitSupplyV1).interfaceId) || ((interfaceID == type(IPublicNFTIssuanceV5).interfaceId) || ((interfaceID == type(IDelegatedNFTIssuanceV1).interfaceId) || ((interfaceID == type(IRestrictedNFTIssuanceV5).interfaceId) || ((interfaceID == type(IPublicRoyaltyV1).interfaceId) || ((interfaceID == type(IDelegatedRoyaltyV0).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV1).interfaceId) || ((interfaceID == type(IDelegatedUpdateBaseURIV1).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV1).interfaceId) || ((interfaceID == type(IPublicMetadataV0).interfaceId) || ((interfaceID == type(IRestrictedMetadataV2).interfaceId) || ((interfaceID == type(IAspenNFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicOwnableV1).interfaceId) || ((interfaceID == type(IDelegatedPausableV0).interfaceId) || ((interfaceID == type(IRestrictedPausableV1).interfaceId) || ((interfaceID == type(IPublicAgreementV2).interfaceId) || ((interfaceID == type(IDelegatedAgreementV1).interfaceId) || ((interfaceID == type(IRestrictedAgreementV3).interfaceId) || ((interfaceID == type(IPublicPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV2).interfaceId) || ((interfaceID == type(IRestrictedOperatorFiltererV0).interfaceId) || ((interfaceID == type(IPublicOperatorFilterToggleV1).interfaceId) || ((interfaceID == type(IRestrictedOperatorFilterToggleV0).interfaceId) || ((interfaceID == type(IDelegatedPlatformFeeV0).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV1).interfaceId) || ((interfaceID == type(IRestrictedNFTClaimCountV0).interfaceId) || (interfaceID == type(IAspenERC721DropV3).interfaceId)))))))))))))))))))))))))))))))))))));
    }

    function isIAspenFeaturesV1() override public pure returns (bool) {
        return true;
    }
}