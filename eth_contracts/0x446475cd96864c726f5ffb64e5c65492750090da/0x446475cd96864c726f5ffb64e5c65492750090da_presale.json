{"SourceCode": "//SPDX-License-Identifier: MIT Licensed\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract presale {\r\n    IERC20 public Token;\r\n    IERC20 public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    AggregatorV3Interface public priceFeeD;\r\n\r\n    address payable public owner;\r\n\r\n    uint256 public tokenPerUsd = 100 ether;\r\n    uint256 public totalUsers;\r\n    uint256 public soldToken;\r\n    uint256 public totalSupply = 400_000_000 ether;\r\n    uint256 public minimumBuyInUsdt = 1 * 1e6;\r\n    uint256 public minimumBuyInEth = 0.00054 ether;\r\n    uint256 public maximumBuy = 750000 ether;\r\n    uint256 public amountRaised;\r\n    uint256 public amountRaisedUSDT;\r\n    address payable public fundReceiver;\r\n    uint256 public presalePhase;\r\n\r\n    uint256 public constant divider = 100;\r\n\r\n    bool public presaleStatus;\r\n    bool public enableClaim;\r\n\r\n    struct user {\r\n        uint256 native_balance;\r\n        uint256 usdt_balance;\r\n        uint256 token_balance;\r\n        uint256 token_bonus;\r\n        uint256 claimed_token;\r\n    }\r\n    struct bonus {\r\n        uint256 token_bonus;\r\n        uint256 claimed_bonus;\r\n        uint256 level;\r\n    }\r\n    mapping(address => bonus) public Bonus;\r\n    mapping(address => user) public users;\r\n    mapping(address => uint256) public wallets;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"PRESALE: Not an owner\");\r\n        _;\r\n    }\r\n\r\n    event BuyToken(address indexed _user, uint256 indexed _amount);\r\n    event ClaimToken(address indexed _user, uint256 indexed _amount);\r\n    event ClaimBonus(address indexed _user, uint256 indexed _amount);\r\n    event UpdatePrice(uint256 _oldPrice, uint256 _newPrice);\r\n    event UpdateBonusValue(uint256 _oldValue, uint256 _newValue);\r\n    event UpdateRefPercent(uint256 _oldPercent, uint256 _newPercent);\r\n    event UpdateMinPurchase(\r\n        uint256 _oldMinNative,\r\n        uint256 _newMinNative,\r\n        uint256 _oldMinUsdt,\r\n        uint256 _newMinUsdt\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor(address _feeReceiver) {\r\n        fundReceiver = payable(_feeReceiver);\r\n        Token = IERC20(0xfD9DEE445030Af02669365b39Acb2136abF29B56);\r\n        owner = payable(msg.sender);\r\n        priceFeeD = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n        presaleStatus = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // to get real time price of Eth\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeeD.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    // to buy token during preSale time with Eth => for web3 use\r\n\r\n    function buyToken() public payable {\r\n        require(presaleStatus == true, \"Presale : Presale is finished\");\r\n        require(\r\n            msg.value >= minimumBuyInEth,\r\n            \"amount should be greater than minimum buy\"\r\n        );\r\n\r\n        require(soldToken <= totalSupply, \"All Sold\");\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = NativeToToken(msg.value);\r\n        soldToken = soldToken + (numberOfTokens);\r\n        amountRaised = amountRaised + (msg.value);\r\n\r\n        users[msg.sender].native_balance =\r\n            users[msg.sender].native_balance +\r\n            (msg.value);\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n        require(\r\n            users[msg.sender].token_balance <= maximumBuy,\r\n            \"max buy limit reached\"\r\n        );\r\n        if (\r\n            users[msg.sender].token_balance >= 100000 ether &&\r\n            users[msg.sender].token_balance < 300000 ether\r\n        ) {\r\n            Bonus[msg.sender].token_bonus =\r\n                Bonus[msg.sender].token_bonus +\r\n                ((numberOfTokens * 3) / 100);\r\n            Bonus[msg.sender].level = 1;\r\n        } else if (\r\n            users[msg.sender].token_balance >= 300000 ether &&\r\n            users[msg.sender].token_balance < 750000 ether\r\n        ) {\r\n            Bonus[msg.sender].token_bonus =\r\n                Bonus[msg.sender].token_bonus +\r\n                ((numberOfTokens * 5) / 100);\r\n            Bonus[msg.sender].level = 2;\r\n        } else if (users[msg.sender].token_balance >= 750000 ether) {\r\n            Bonus[msg.sender].token_bonus =\r\n                Bonus[msg.sender].token_bonus +\r\n                ((numberOfTokens * 8) / 100);\r\n            Bonus[msg.sender].level = 3;\r\n        }\r\n    }\r\n\r\n    // to buy token during preSale time with USDT => for web3 use\r\n    function buyTokenUSDT(uint256 amount) public {\r\n        require(presaleStatus == true, \"Presale : Presale is finished\");\r\n        require(\r\n            amount >= minimumBuyInUsdt,\r\n            \"amount should be greater than minimum buy\"\r\n        );\r\n        require(soldToken <= totalSupply, \"All Sold\");\r\n\r\n        USDT.transferFrom(msg.sender, fundReceiver, amount);\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = usdtToToken(amount);\r\n\r\n        soldToken = soldToken + (numberOfTokens);\r\n        amountRaisedUSDT = amountRaisedUSDT + (amount);\r\n\r\n        users[msg.sender].usdt_balance += amount;\r\n\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n        require(\r\n            users[msg.sender].token_balance <= maximumBuy,\r\n            \"max buy limit reached\"\r\n        );\r\n\r\n        if (\r\n            users[msg.sender].token_balance >= 100000 ether &&\r\n            users[msg.sender].token_balance < 300000 ether\r\n        ) {\r\n            Bonus[msg.sender].token_bonus =\r\n                Bonus[msg.sender].token_bonus +\r\n                ((numberOfTokens * 3) / 100);\r\n            Bonus[msg.sender].level = 1;\r\n        } else if (\r\n            users[msg.sender].token_balance >= 300000 ether &&\r\n            users[msg.sender].token_balance < 750000 ether\r\n        ) {\r\n            Bonus[msg.sender].token_bonus =\r\n                Bonus[msg.sender].token_bonus +\r\n                ((numberOfTokens * 5) / 100);\r\n            Bonus[msg.sender].level = 2;\r\n        } else if (users[msg.sender].token_balance >= 750000 ether) {\r\n            Bonus[msg.sender].token_bonus =\r\n                Bonus[msg.sender].token_bonus +\r\n                ((numberOfTokens * 8) / 100);\r\n            Bonus[msg.sender].level = 3;\r\n        }\r\n    }\r\n\r\n    // Claim bought tokens\r\n    function claimTokens() external {\r\n        require(enableClaim == true, \"Presale : Claim not active yet\");\r\n        require(users[msg.sender].token_balance != 0, \"Presale: 0 to claim\");\r\n\r\n        user storage _usr = users[msg.sender];\r\n\r\n        Token.transfer(msg.sender, _usr.token_balance);\r\n        _usr.claimed_token += _usr.token_balance;\r\n        _usr.token_balance -= _usr.token_balance;\r\n\r\n        emit ClaimToken(msg.sender, _usr.token_balance);\r\n    }\r\n\r\n    // Claim bonus tokens\r\n    function claimBonus() external {\r\n        require(enableClaim == true, \"Presale : Claim not active yet\");\r\n        require(Bonus[msg.sender].token_bonus != 0, \"Presale: 0 to claim\");\r\n\r\n        bonus storage _usr = Bonus[msg.sender];\r\n\r\n        Token.transfer(msg.sender, _usr.token_bonus);\r\n        _usr.claimed_bonus += _usr.token_bonus;\r\n        _usr.token_bonus -= _usr.token_bonus;\r\n\r\n        emit ClaimBonus(msg.sender, _usr.token_bonus);\r\n    }\r\n\r\n    function EnableClaim(bool _state) external onlyOwner {\r\n        enableClaim = _state;\r\n    }\r\n\r\n    function stopPresale(bool _off) external onlyOwner {\r\n        presaleStatus = _off;\r\n    }\r\n\r\n    // to check number of token for given Eth\r\n    function NativeToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 EthToUsd = (_amount * (getLatestPrice())) / (1 ether);\r\n        uint256 numberOfTokens = (EthToUsd * (tokenPerUsd)) / (1e8);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to check number of token for given usdt\r\n    function usdtToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 numberOfTokens = (_amount * (tokenPerUsd)) / (1e6);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to change Price of the token\r\n    function changePrice(uint256 _price, uint256 _presalePhase) external onlyOwner {\r\n        uint256 oldPrice = tokenPerUsd;\r\n        tokenPerUsd = _price;\r\n        presalePhase = _presalePhase;\r\n\r\n        emit UpdatePrice(oldPrice, _price);\r\n    }\r\n\r\n    // transfer ownership\r\n    function changeOwner(address payable _newOwner) external onlyOwner {\r\n        require(\r\n            _newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        address _oldOwner = owner;\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(_oldOwner, _newOwner);\r\n    }\r\n\r\n    // change tokens\r\n    function changeToken(address _token) external onlyOwner {\r\n        Token = IERC20(_token);\r\n    }\r\n\r\n    //change USDT\r\n    function changeUSDT(address _USDT) external onlyOwner {\r\n        USDT = IERC20(_USDT);\r\n    }\r\n\r\n    // to draw funds for liquidity\r\n    function transferFunds(uint256 _value) external onlyOwner {\r\n        fundReceiver.transfer(_value);\r\n    }\r\n\r\n    // to draw out tokens\r\n    function transferTokens(IERC20 token, uint256 _value) external onlyOwner {\r\n        token.transfer(msg.sender, _value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateBonusValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinNative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinNative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinUsdt\",\"type\":\"uint256\"}],\"name\":\"UpdateMinPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"UpdateRefPercent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"EnableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NativeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presalePhase\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"changeUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBuyInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBuyInUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeeD\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_off\",\"type\":\"bool\"}],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "presale", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000021b23885366551bc2fbf3e8c403a94be68207556", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e0e65aeb0f7497eb18f0fc9bfb17921356d5aebc910d75cf25c907b18a8caa7"}