{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract TokenWithdraw {\r\n    address public tokenAddress;\r\n    address public owner;\r\n    uint public fee;\r\n    uint public totalWithdraw;\r\n    uint256 _decimals;\r\n    uint256 _amount;\r\n\r\n    event Withdraw(address withdrawUser, uint amount);\r\n    event Deposit(address depositUser, uint amount);\r\n\r\n    constructor(address _tokenAddress, uint _fee) {\r\n        tokenAddress = _tokenAddress;\r\n        owner = msg.sender;\r\n        fee = _fee;\r\n    }\r\n\r\n    function withdraw(uint amount) external payable {\r\n\r\n        _decimals = 10 ** 18;\r\n        _amount = amount * _decimals;\r\n        \r\n        require(msg.value == amount * fee, \"Incorrect ETH amount\");\r\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \"Not enough tokens available\");\r\n\r\n        bool checkapproval = IERC20(tokenAddress).approve(address(this), _amount);\r\n        require(checkapproval, \"Not approved this contract\");\r\n\r\n        bool success = IERC20(tokenAddress).transferFrom(address(this), msg.sender, _amount);\r\n        require(success, \"Token transfer failed\");\r\n\r\n        totalWithdraw += amount;\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function setFee(uint256 _fee) external {\r\n        require(msg.sender == owner, \"Only owner can change Fee\");\r\n        fee = _fee;\r\n    }\r\n\r\n    function totalDeposit() public view returns(uint256) {\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function feeCollect() external {\r\n        require(msg.sender == owner, \"Only owner can collect ETH\");\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function tokenCollect() external {\r\n        require(msg.sender == owner, \"Only owner can collect Token\");\r\n\r\n        bool checkapproval = IERC20(tokenAddress).approve(address(this), IERC20(tokenAddress).balanceOf(address(this)));\r\n        require(checkapproval, \"Not approved this contract\");\r\n\r\n        IERC20(tokenAddress).transferFrom(address(this), owner, IERC20(tokenAddress).balanceOf(address(this)));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "TokenWithdraw", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001250c8f5099902ddfb574474612436b0b5db0a150000000000000000000000000000000000000000000000000000000ba43b7400", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6a583c05d2243d45d268d71f8bfb040d75931d90a570fc2ca9f82977c7d341cd"}