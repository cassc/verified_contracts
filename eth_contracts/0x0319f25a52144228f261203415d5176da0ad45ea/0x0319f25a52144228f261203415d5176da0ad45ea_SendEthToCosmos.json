{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SendEthToCosmos.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\ninterface GravityBridge {\\n    function sendToCosmos(address _tokenContract, string memory _destination, uint _amount) external;\\n}\\n\\ninterface WETH {\\n    function deposit() external payable;\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n}\\n\\n/**\\n * @notice This contract is a router to send ETH to Cosmos using gravity bridge\\n */\\ncontract SendEthToCosmos {\\n    GravityBridge gravityBridge = GravityBridge(0xa4108aA1Ec4967F8b52220a4f7e94A8201F2D906);\\n    WETH weth = WETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    constructor() {\\n        // approve gravity bridge to spend WETH to save gas later\\n        weth.approve(address(gravityBridge), type(uint256).max);\\n    }\\n\\n    function sendToCosmos(string memory _destination) external payable {\\n        weth.deposit{value: msg.value}();\\n        gravityBridge.sendToCosmos(address(weth), _destination, msg.value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"}],\"name\":\"sendToCosmos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SendEthToCosmos", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}