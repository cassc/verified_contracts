{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @title Base ERC1155 interface\\n * @notice Interface for interacting with ERC1155 tokens with mint and burn functions\\n * @author MELD team\\n */\\ninterface IBaseERC1155 is IERC1155 {\\n    /**\\n     * @notice Mint new tokens\\n     * @param _to Address to mint tokens to\\n     * @param _id Token ID to mint\\n     * @param _amount Amount of tokens to mint\\n     * @param _data Additional data\\n     */\\n    function mint(address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @notice Burn tokens\\n     * @param _id Token ID to burn\\n     * @param _amount Amount of tokens to burn\\n     */\\n    function burn(uint256 _id, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Base ERC20 interface\\n * @notice Interface for interacting with ERC20 tokens with mint and burn functions\\n * @author MELD team\\n */\\ninterface IBaseERC20 is IERC20 {\\n    /**\\n     * @notice Mint new tokens\\n     * @param _account Address to mint tokens to\\n     * @param _amount Amount of tokens to mint\\n     */\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn tokens\\n     * @param _amount Amount of tokens to burn\\n     */\\n    function burn(uint256 _amount) external;\\n\\n    /**\\n     * @notice Get the number of decimals for the token\\n     * @return Number of decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title Base ERC721 interface\\n * @notice Interface for interacting with ERC721 tokens with mint and burn functions\\n * @author MELD team\\n */\\ninterface IBaseERC721 is IERC721 {\\n    /**\\n     * @notice Mint new tokens\\n     * @param _account Address to mint tokens to\\n     * @param _tokenId Token ID to mint\\n     */\\n    function mint(address _account, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Burn tokens\\n     * @param _tokenId Token ID to burn\\n     */\\n    function burn(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockedAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/**\\n * @title Locked Adapter interface\\n * @notice Interface for the locked adapters, to add the requestWithdraw function\\n * @author MELD team\\n */\\ninterface ILockedAdapter {\\n    /**\\n     * @notice Request a withdraw from the adapter, so the funds can be withdrawn in the future\\n     * @param _asset Address of the asset to withdraw\\n     * @param _amount Amount to withdraw\\n     * @param _extra Extra data for the withdraw\\n     */\\n    function requestWithdraw(address _asset, uint256 _amount, bytes calldata _extra) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMeldBridgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/**\\n * @title Meld Bridge Base interface\\n * @notice Interface for the Meld Bridge Base contract, to set supported tokens and check roles\\n * @author MELD team\\n */\\ninterface IMeldBridgeBase {\\n    /**\\n     * @notice Emitted when a token is supported or unsupported\\n     * @param executedBy Address that executed the event\\n     * @param token Address of the token\\n     * @param supported True if the token is supported, false if unsupported\\n     */\\n    event SupportedTokenSet(address indexed executedBy, address indexed token, bool supported);\\n\\n    /**\\n     * @notice Set the supported status of a token\\n     * @param _token Address of the token\\n     * @param _supported True if the token is supported, false if unsupported\\n     */\\n    function setSupportedToken(address _token, bool _supported) external;\\n\\n    /**\\n     * @notice Check if an account has a role. Reverts if the account does not have the role\\n     * @param _role Role to check\\n     * @param _account Account to check\\n     */\\n    function checkRole(bytes32 _role, address _account) external view;\\n\\n    /**\\n     * @notice Role for configuration\\n     * @return Role\\n     */\\n    function CONFIGURATION_ROLE() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Role for execution of requests\\n     * @return Role\\n     */\\n    function EXECUTION_ROLE() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Check if a token is supported\\n     * @param _token Address of the token\\n     * @return True if the token is supported\\n     */\\n    function supportedTokens(address _token) external view returns (bool);\\n\\n    /**\\n     * @notice Check if a request has been processed\\n     * @param _requestId ID of the request\\n     * @return True if the request has been processed\\n     */\\n    function processedRequests(bytes32 _requestId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMeldBridgeReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IMeldBridgeBase} from \\\"./IMeldBridgeBase.sol\\\";\\n\\n/**\\n * @title Meld Bridge Receiver interface\\n * @notice Interface for interacting with the Meld Bridge Receiver contract\\n * @author MELD team\\n */\\ninterface IMeldBridgeReceiver is IMeldBridgeBase {\\n    /**\\n     * @notice Event emitted when a user requests to bridge tokens\\n     * @param user Address of the user\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to bridge\\n     */\\n    event BridgeRequested(address indexed user, address indexed token, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when the wETH address is set\\n     * @param executedBy Address that executed the action\\n     * @param wETH Address of the wETH contract\\n     */\\n    event WETHAddressSet(address indexed executedBy, address indexed wETH);\\n\\n    /**\\n     * @notice Event emitted when the Meld Farming Manager is deployed\\n     * @param executedBy Address that executed the action\\n     * @param meldFarmingManagerAddress Address of the Meld Farming Manager\\n     */\\n    event MeldFarmingManagerDeployed(\\n        address indexed executedBy,\\n        address indexed meldFarmingManagerAddress\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user requests to bridge ERC721 tokens\\n     * @param user Address of the user\\n     * @param token Address of the token\\n     * @param tokenId Token ID to bridge\\n     */\\n    event BridgeERC721Requested(address indexed user, address indexed token, uint256 tokenId);\\n\\n    /**\\n     * @notice Event emitted when a user requests to bridge ERC1155 tokens\\n     * @param user Address of the user\\n     * @param token Address of the token\\n     * @param tokenId Token ID to bridge\\n     * @param amount Amount of tokens to bridge\\n     */\\n    event BridgeERC1155Requested(\\n        address indexed user,\\n        address indexed token,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Event emitted when ERC20 tokens are withdrawn to a user\\n     * @param token Address of the token\\n     * @param to Address of the user\\n     * @param amount Amount of tokens withdrawn\\n     * @param requestID ID of the request\\n     */\\n    event WithdrawnToUser(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount,\\n        bytes32 indexed requestID\\n    );\\n\\n    /**\\n     * @notice Event emitted when ERC721 tokens are withdrawn to a user\\n     * @param token Address of the token\\n     * @param to Address of the user\\n     * @param tokenId Token ID withdrawn\\n     * @param requestID ID of the request\\n     */\\n    event WithdrawnERC721ToUser(\\n        address indexed token,\\n        address indexed to,\\n        uint256 tokenId,\\n        bytes32 indexed requestID\\n    );\\n\\n    /**\\n     * @notice Event emitted when ERC1155 tokens are withdrawn to a user\\n     * @param token Address of the token\\n     * @param to Address of the user\\n     * @param tokenId Token ID withdrawn\\n     * @param amount Amount of tokens withdrawn\\n     * @param requestID ID of the request\\n     */\\n    event WithdrawnERC1155ToUser(\\n        address indexed token,\\n        address indexed to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes32 indexed requestID\\n    );\\n\\n    /**\\n     * @notice Function called to bridge ERC20 tokens\\n     * @param _token Address of the token\\n     * @param _amount Amount of tokens to bridge\\n     */\\n    function bridge(address _token, uint256 _amount) external;\\n\\n    /**\\n     * @notice Function called to bridge native tokens\\n     * @dev This function is payable so the amount of tokens to bridge is the value sent with the transaction\\n     */\\n    function bridgeNative() external payable;\\n\\n    /**\\n     * @notice Function called to bridge ERC721 tokens\\n     * @param _token Address of the token\\n     * @param _tokenId Token ID to bridge\\n     */\\n    function bridgeERC721(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Function called to bridge ERC1155 tokens\\n     * @param _token Address of the token\\n     * @param _tokenId Token ID to bridge\\n     * @param _amount Amount of tokens to bridge\\n     */\\n    function bridgeERC1155(address _token, uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Function called to withdraw tokens to a user\\n     * @param _token Address of the token\\n     * @param _to Address of the user\\n     * @param _amount Amount of tokens to withdraw\\n     * @param _requestID ID of the request\\n     * @param _extra Additional data\\n     */\\n    function withdrawToUser(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes32 _requestID,\\n        bytes calldata _extra\\n    ) external;\\n\\n    /**\\n     * @notice Function called to withdraw ERC721 tokens to a user\\n     * @param _token Address of the token\\n     * @param _to Address of the user\\n     * @param _tokenId Token ID to withdraw\\n     * @param _requestID ID of the request\\n     */\\n    function withdrawERC721ToUser(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes32 _requestID\\n    ) external;\\n\\n    /**\\n     * @notice Function called to withdraw ERC1155 tokens to a user\\n     * @param _token Address of the token\\n     * @param _to Address of the user\\n     * @param _tokenId Token ID to withdraw\\n     * @param _amount Amount of tokens to withdraw\\n     * @param _requestID ID of the request\\n     */\\n    function withdrawERC1155ToUser(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes32 _requestID\\n    ) external;\\n\\n    /**\\n     * @notice Function called to withdraw tokens to multiple users\\n     * @param _token Address of the token\\n     * @param _to Addresses of the users\\n     * @param _amount Amounts of tokens to withdraw\\n     * @param _requestID IDs of the requests\\n     * @param _extra Additional data\\n     */\\n    function withdrawToUsers(\\n        address _token,\\n        address[] calldata _to,\\n        uint256[] calldata _amount,\\n        bytes32[] calldata _requestID,\\n        bytes[] calldata _extra\\n    ) external;\\n\\n    /**\\n     * @notice Function called to withdraw ERC721 tokens to multiple users\\n     * @param _token Address of the token\\n     * @param _to Addresses of the users\\n     * @param _tokenId Token IDs to withdraw\\n     * @param _requestID IDs of the requests\\n     */\\n    function withdrawERC721ToUsers(\\n        address _token,\\n        address[] calldata _to,\\n        uint256[] calldata _tokenId,\\n        bytes32[] calldata _requestID\\n    ) external;\\n\\n    /**\\n     * @notice Function called to withdraw ERC1155 tokens to multiple users\\n     * @param _token Address of the token\\n     * @param _to Addresses of the users\\n     * @param _tokenId Token IDs to withdraw\\n     * @param _amount Amounts of tokens to withdraw\\n     * @param _requestID IDs of the requests\\n     */\\n    function withdrawERC1155ToUsers(\\n        address _token,\\n        address[] calldata _to,\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _amount,\\n        bytes32[] calldata _requestID\\n    ) external;\\n\\n    /**\\n     * @notice Returns the bytes32 identifier for the REBALANCER_ROLE\\n     */\\n    function REBALANCER_ROLE() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Returns the address of the wETH contract\\n     */\\n    function wETHAddress() external view returns (address payable);\\n\\n    /**\\n     * @notice Returns the address of the Meld Farming Manager\\n     */\\n    function getFarmingManagerAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMeldFarming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Meld Farming interface\\n * @notice Interface for the Meld Farming Manager contract as well as the adapters\\n * @author MELD team\\n */\\ninterface IMeldFarming is IERC165 {\\n    /**\\n     * @notice Emitted when an asset is deposited\\n     * @param asset Address of the asset\\n     * @param amount Amount deposited\\n     */\\n    event Deposited(address indexed asset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an asset is withdrawn\\n     * @param asset Address of the asset\\n     * @param amount Amount withdrawn\\n     */\\n    event Withdrawn(address indexed asset, uint256 amount);\\n\\n    /**\\n     * @notice Deposits funds into the Meld Farming Manager or the adapter\\n     * @param _asset Address of the asset to deposit\\n     * @param _amount Amount to deposit\\n     * @param _extra Extra data for the deposit\\n     */\\n    function deposit(address _asset, uint256 _amount, bytes calldata _extra) external;\\n\\n    /**\\n     * @notice Withdraws funds from the Meld Farming Manager or the adapter\\n     * @param _asset Address of the asset to withdraw\\n     * @param _amount Amount to withdraw\\n     * @param _extra Extra data for the withdraw\\n     * @return Amount withdrawn\\n     */\\n    function withdraw(\\n        address _asset,\\n        uint256 _amount,\\n        bytes calldata _extra\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Claims rewards from the adapter\\n     * @param _asset Address of the asset to claim\\n     * @param _extra Extra data for the claim\\n     * @param _withdrawOnlyAvailable If true, only claims the rewards up to the available liquidity. If false and there's not enough liquidity, it reverts\\n     * @return Amount claimed\\n     */\\n    function claimRewards(\\n        address _asset,\\n        bytes calldata _extra,\\n        bool _withdrawOnlyAvailable\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the total available liquidity for a given asset\\n     * @param _asset Address of the asset\\n     * @return Available liquidity\\n     */\\n    function getAvailableLiquidity(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of rewards available for the `_asset`\\n     * @param _asset Address of the asset\\n     * @return Amount of rewards available\\n     */\\n    function getRewardsAmount(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of the Meld Farming Manager\\n     * @return Address of the Meld Farming Manager\\n     */\\n    function meldFarmingManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMeldFarmingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IMeldFarming} from \\\"./IMeldFarming.sol\\\";\\nimport {IMeldBridgeReceiver} from \\\"./IMeldBridgeReceiver.sol\\\";\\n\\n/**\\n * @title Meld Farming Manager interface\\n * @notice Interface for the Meld Farming Manager contract\\n * @dev This interface also includes the IMeldFarming interface\\n * @author MELD team\\n */\\ninterface IMeldFarmingManager is IMeldFarming {\\n    struct AdapterConfig {\\n        string adapterIdStr;\\n        bool enabled;\\n        bool locked;\\n        bool exists;\\n    }\\n\\n    struct YieldAssetAdapter {\\n        uint256 yieldDeposit;\\n        uint256 index;\\n        uint256 lastTimestampRewardsClaimed;\\n        bool exists;\\n    }\\n\\n    struct YieldAssetConfig {\\n        uint256 liquidDeposit;\\n        mapping(uint256 index => address adapterAddress) adapterIndex;\\n        mapping(address adapterAddress => YieldAssetAdapter) adapters;\\n        uint256 numAdapters;\\n    }\\n\\n    struct RebalancingInfo {\\n        address asset;\\n        address adapterAddress;\\n        uint256 amount;\\n        RebalanceAction action;\\n        bytes extra;\\n    }\\n\\n    enum RebalanceAction {\\n        NONE,\\n        DEPOSIT,\\n        WITHDRAW,\\n        REQUEST_WITHDRAW\\n    }\\n\\n    /**\\n     * @notice Emitted when the Meld Bridge Receiver contract is set\\n     * @param bridge Address of the Meld Bridge Receiver contract\\n     */\\n    event BridgeSet(address indexed executedBy, address bridge);\\n\\n    /**\\n     * @notice Emitted when the treasury address is updated\\n     * @param executedBy Address that executed the function\\n     * @param oldTreasury Address of the old treasury\\n     * @param newTreasury Address of the new treasury\\n     */\\n    event TreasuryUpdated(\\n        address indexed executedBy,\\n        address indexed oldTreasury,\\n        address indexed newTreasury\\n    );\\n\\n    /**\\n     * @notice Emitted when a new adapter is added\\n     * @param executedBy Address that executed the function\\n     * @param adapterIdStr String ID of the adapter\\n     * @param adapterAddress Address of the adapter\\n     * @param locked Boolean indicating if the adapter is locked\\n     */\\n    event AdapterAdded(\\n        address executedBy,\\n        string indexed adapterIdStr,\\n        address indexed adapterAddress,\\n        bool locked\\n    );\\n\\n    /**\\n     * @notice Emitted when an adapter is enabled or disabled\\n     * @param executedBy Address that executed the function\\n     * @param adapterAddress Address of the adapter\\n     * @param enabled Boolean indicating if the adapter is enabled\\n     */\\n    event AdapterEnabled(address indexed executedBy, address indexed adapterAddress, bool enabled);\\n\\n    /**\\n     * @notice Emitted when an asset is configured with adapters\\n     * @param executedBy Address that executed the function\\n     * @param asset Address of the asset\\n     * @param adapterAddresses Array of adapter addresses\\n     */\\n    event AssetConfigSet(\\n        address indexed executedBy,\\n        address indexed asset,\\n        address[] adapterAddresses\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are claimed\\n     * @param executedBy Address that executed the function\\n     * @param asset Address of the asset\\n     * @param adapterAddress Address of the adapter\\n     * @param amount Amount claimed\\n     */\\n    event RewardsClaimed(\\n        address indexed executedBy,\\n        address indexed asset,\\n        address indexed adapterAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when a rebalance is executed\\n     * @param executedBy Address that executed the function\\n     * @param asset Address of the asset\\n     * @param adapterAddress Address of the adapter\\n     * @param amount Amount rebalanced\\n     * @param action Rebalance action. 0: None, 1: Deposit, 2: Withdraw, 3: Request Withdraw\\n     */\\n    event Rebalanced(\\n        address executedBy,\\n        address indexed asset,\\n        address indexed adapterAddress,\\n        uint256 amount,\\n        RebalanceAction indexed action\\n    );\\n\\n    /**\\n     * @notice Adds a new adapter to the Meld Farming Manager\\n     * @param _adapterId String ID of the adapter\\n     * @param _adapterAddress Address of the adapter\\n     * @param _locked Boolean indicating if the adapter is locked\\n     */\\n    function addAdapter(string memory _adapterId, address _adapterAddress, bool _locked) external;\\n\\n    /**\\n     * @notice Enables or disables an adapter\\n     * @param _adapterAddress Address of the adapter\\n     * @param _enabled Boolean indicating if the adapter is enabled\\n     */\\n    function setAdapterEnabled(address _adapterAddress, bool _enabled) external;\\n\\n    /**\\n     * @notice Configures an asset with adapters\\n     * @dev The list of adapters will be the new one, so any previous configuration will be overwritten\\n     * @dev To remove all adapters, pass an empty array\\n     * @dev It is needed to call this function even if no adapters will be used for the asset\\n     * @param _asset Address of the asset\\n     * @param _adaptersAddresses Array of adapter addresses\\n     */\\n    function configAsset(address _asset, address[] memory _adaptersAddresses) external;\\n\\n    /**\\n     * @notice Sets the treasury address that will receive the rewards\\n     * @param _treasury Address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n\\n    /**\\n     * @notice Moves funds between the adapters and the Meld Farming Manager\\n     * @param _rebalanceInfo Array of RebalancingInfo, indicating the asset, adapter, amount and action\\n     */\\n    function rebalance(RebalancingInfo[] calldata _rebalanceInfo) external;\\n\\n    /**\\n     * @notice Returns the adapter address for a given index\\n     * @param _index Index of the adapter\\n     * @return Adapter address\\n     */\\n    function adapterAddresses(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Returns the number of adapters\\n     * @return Number of adapters\\n     */\\n    function numAdapters() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the Meld Bridge Receiver contract address\\n     * @return Meld Bridge Receiver contract address\\n     */\\n    function bridge() external view returns (IMeldBridgeReceiver);\\n\\n    /**\\n     * @notice Returns the treasury address\\n     * @return Treasury address\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the adapter configuration for a given ID\\n     * @param _adapterAddress Address of the adapter\\n     * @return Adapter configuration\\n     */\\n    function getAdapter(address _adapterAddress) external view returns (AdapterConfig memory);\\n\\n    /**\\n     * @notice Returns the adapter configuration for all adapters\\n     * @return Array of every Adapter configuration\\n     */\\n    function getAllAdapters() external view returns (AdapterConfig[] memory);\\n\\n    /**\\n     * @notice Returns the asset configuration for a given asset\\n     * @param _asset Address of the asset\\n     * @return assetAdapterIds Array of the adapter IDs for each adapter\\n     * @return assetAdapterAddressess Array of the adapter addresses for each adapter\\n     * @return yieldDeposit Array of the yield deposit for each adapter\\n     * @return lastTimestampRewardsClaimed Array of the last timestamp rewards claimed for each adapter\\n     * @return liquidDeposit Liquid deposit for the asset\\n     * @return totalDeposit Total deposit for the asset\\n     * @return totalAvailableLiquidity Total available liquidity for the asset\\n     */\\n    function getYieldAssetConfig(\\n        address _asset\\n    )\\n        external\\n        view\\n        returns (\\n            string[] memory assetAdapterIds,\\n            address[] memory assetAdapterAddressess,\\n            uint256[] memory yieldDeposit,\\n            uint256[] memory lastTimestampRewardsClaimed,\\n            uint256 liquidDeposit,\\n            uint256 totalDeposit,\\n            uint256 totalAvailableLiquidity\\n        );\\n\\n    /**\\n     * @notice Returns the total deposit for a given asset\\n     * @param _asset Address of the asset\\n     * @return Total deposit\\n     */\\n    function getTotalDeposit(address _asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title Wrapped AVAX/ETH interface\\n * @notice Interface for interacting with the Wrapped AVAX/ETH token\\n * @dev This interface is used to interact with the Wrapped AVAX/ETH token\\n * @author MELD team\\n */\\ninterface IWETH is IERC20Metadata {\\n    /**\\n     * @notice Emmited when ETH is deposited to receive WETH\\n     * @param dst Address that receives the WETH\\n     * @param wad Amount of ETH deposited\\n     */\\n    event Deposit(address indexed dst, uint wad);\\n\\n    /**\\n     * @notice Emmited when ETH is withdrawn\\n     * @param src Address that withdraws the ETH\\n     * @param wad Amount of ETH withdrawn\\n     */\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    /**\\n     * @notice Deposit ETH to receive WETH\\n     * @dev This function is payable so the amount of ETH deposited is the value sent with the transaction\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw ETH burning WETH\\n     * @param _wad Amount of ETH to withdraw\\n     */\\n    function withdraw(uint256 _wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Meld Bridge\\n * @dev Error messages prefix glossary:\\n * - MBP: Meld Bridge Panoptic\\n * - MBR: Meld Bridge Receiver\\n * - MFM: Meld Farming Manager\\n * - BYA: Base Yield Adapter\\n * @author MELD team\\n */\\nlibrary Errors {\\n    string public constant INVALID_ARRAY_LENGTH = \\\"Invalid array length\\\";\\n    string public constant TOKEN_NOT_SUPPORTED = \\\"Token is not supported\\\";\\n    string public constant REQUEST_ALREADY_PROCESSED = \\\"Request already processed\\\";\\n    string public constant INVALID_ADDRESS = \\\"Invalid address\\\";\\n    string public constant INVALID_AMOUNT = \\\"Invalid amount\\\";\\n\\n    string public constant MBP_REQUEST_NOT_PROCESSED = \\\"MeldBridgePanoptic: Request not processed\\\";\\n    string public constant MBP_NETWORK_NOT_SUPPORTED =\\n        \\\"MeldBridgePanoptic: Network is not supported for this token\\\";\\n    string public constant MBP_INSUFFICIENT_FEE = \\\"MeldBridgePanoptic: Insufficient fee\\\";\\n    string public constant MBP_TRANSFERRING_FEE_FAILED =\\n        \\\"MeldBridgePanoptic: Transferring fee failed\\\";\\n    string public constant MBP_SIGNATURE_EXPIRED = \\\"MeldBridgePanoptic: Signature is expired\\\";\\n\\n    string public constant MBR_ONLY_WETH_ALLOWED =\\n        \\\"MeldBridgeReceiver: Only WETH can deposit ETH directly to the contract\\\";\\n    string public constant MBR_NATIVE_NOT_SUPPORTED =\\n        \\\"MeldBridgeReceiver: Native Token is not supported\\\";\\n    string public constant MBR_NATIVE_WRAPPING_FAILED =\\n        \\\"MeldBridgeReceiver: Native wrapping failed\\\";\\n    string public constant MBR_NATIVE_TOKEN_NOT_WETH =\\n        \\\"MeldBridgeReceiver: Native token withdraw is not WETH\\\";\\n\\n    string public constant MFM_ONLY_BRIDGE_ALLOWED =\\n        \\\"MeldFarmingManager: Only bridge can call this function\\\";\\n    string public constant MFM_ADAPTER_ALREADY_EXISTS =\\n        \\\"MeldFarmingManager: Adapter already exists\\\";\\n    string public constant MFM_ADAPTER_ADDRESS_ALREADY_EXISTS =\\n        \\\"MeldFarmingManager: Adapter address already exists\\\";\\n    string public constant MFM_ADAPTER_DOES_NOT_EXIST =\\n        \\\"MeldFarmingManager: Adapter does not exist\\\";\\n    string public constant MFM_ADAPTER_DISABLED = \\\"MeldFarmingManager: Adapter is disabled\\\";\\n    string public constant MFM_AMOUNT_MISMATCH = \\\"MeldFarmingManager: Amount mismatch\\\";\\n    string public constant MFM_NOT_ENOUGH_FUNDS = \\\"MeldFarmingManager: Not enough funds\\\";\\n    string public constant MFM_INVALID_ADAPTER_ID = \\\"MeldFarmingManager: Invalid adapter ID\\\";\\n    string public constant MFM_NO_ADAPTERS_CONFIGURED =\\n        \\\"MeldFarmingManager: No adapters configured\\\";\\n    string public constant MFM_INVALID_ADAPTER_MFM =\\n        \\\"MeldFarmingManager: Invalid adapter MeldFarmingManager address\\\";\\n    string public constant MFM_ADAPTER_IS_NOT_MELD_FARMING =\\n        \\\"MeldFarmingManager: Adapter does not implement IMeldFarming\\\";\\n\\n    string public constant RT_NO_TOKENS_TO_RESCUE = \\\"RescueTokens: No tokens to rescue\\\";\\n    string public constant RT_RESCUER_NOT_OWNER =\\n        \\\"RescueTokens: Contract is not the owner of the token\\\";\\n\\n    string public constant BYA_ONLY_FARMING_MANAGER_ALLOWED =\\n        \\\"BaseYieldAdapter: Only MeldFarmingManager can call this function\\\";\\n\\n    string public constant AAVE_ADAPTER_INCONSISTENT_ATOKEN_BALANCE =\\n        \\\"AaveAdapter: Inconsistent aToken balance\\\";\\n    string public constant AAVE_ADAPTER_INVALID_WITHDRAWN_AMOUNT =\\n        \\\"AaveAdapter: Invalid withdrawn amount\\\";\\n\\n    string public constant GOGOPOOL_ONLY_WAVAX_ALLOWED = \\\"GoGoPoolAdapter: Only WAVAX is allowed\\\";\\n    string public constant GOGOPOOL_AVAX_RECEIVED_OUTSIDE_WINDOW =\\n        \\\"GoGoPoolAdapter: AVAX received outside window\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/MeldBridgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {AccessControlEnumerable} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {\\n    IERC1155Receiver,\\n    IERC165\\n} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IMeldBridgeBase} from \\\"./interfaces/IMeldBridgeBase.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\n/**\\n * @title MeldBridgeBase\\n * @notice This contract is the base contract for the MeldBridgePanoptic and MeldBridgeReceiver contracts\\n * @dev Handles the supported tokens and roles\\n * @author MELD team\\n */\\ncontract MeldBridgeBase is\\n    AccessControlEnumerable,\\n    IMeldBridgeBase,\\n    IERC721Receiver,\\n    IERC1155Receiver\\n{\\n    bytes32 public constant override CONFIGURATION_ROLE = keccak256(\\\"CONFIGURATION_ROLE\\\");\\n    bytes32 public constant override EXECUTION_ROLE = keccak256(\\\"EXECUTION_ROLE\\\");\\n\\n    // mapping for supported tokens\\n    mapping(address => bool) public override supportedTokens;\\n\\n    // mapping for processed requests\\n    mapping(bytes32 requestID => bool processed) public override processedRequests;\\n\\n    /**\\n     * @notice  Modifier to check if the token is supported\\n     * @param _token Address of the token\\n     */\\n    modifier onlySupportedToken(address _token) {\\n        require(supportedTokens[_token], Errors.TOKEN_NOT_SUPPORTED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice  Modifier to check if the request has not been processed\\n     * @param _requestID ID of the request\\n     */\\n    modifier onlyUnprocessedRequest(bytes32 _requestID) {\\n        require(!processedRequests[_requestID], Errors.REQUEST_ALREADY_PROCESSED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice  Modifier to check if the amount is positive\\n     * @param _amount Amount to check\\n     */\\n    modifier onlyPositiveAmount(uint256 _amount) {\\n        require(_amount > 0, Errors.INVALID_AMOUNT);\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeBase\\n     */\\n    function setSupportedToken(\\n        address _token,\\n        bool _supported\\n    ) external override onlyRole(CONFIGURATION_ROLE) {\\n        supportedTokens[_token] = _supported;\\n\\n        emit SupportedTokenSet(msg.sender, _token, _supported);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeBase\\n     */\\n    function checkRole(bytes32 _role, address _account) external view override {\\n        return _checkRole(_role, _account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view override(AccessControlEnumerable, IERC165) returns (bool) {\\n        return\\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Receiver\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MeldBridgeReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {MeldBridgeBase} from \\\"./MeldBridgeBase.sol\\\";\\nimport {IMeldBridgeReceiver} from \\\"./interfaces/IMeldBridgeReceiver.sol\\\";\\nimport {IBaseERC20} from \\\"./interfaces/IBaseERC20.sol\\\";\\nimport {IBaseERC721} from \\\"./interfaces/IBaseERC721.sol\\\";\\nimport {IBaseERC1155} from \\\"./interfaces/IBaseERC1155.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {MeldFarmingManager} from \\\"./MeldFarmingManager.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\n/**\\n * @author  MELD team\\n * @title   MeldBridgeReceiver\\n * @notice  This contract is the receiver contract for the Meld Bridge. It is responsible for receiving tokens from the original network of the tokens and re-staking them\\n */\\n\\ncontract MeldBridgeReceiver is IMeldBridgeReceiver, MeldBridgeBase {\\n    using SafeERC20 for IBaseERC20;\\n\\n    address payable public override wETHAddress;\\n\\n    bytes32 public constant override REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n\\n    MeldFarmingManager private farmingManager;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _defaultAdmin Address of the default admin\\n     * @param _wETH Address of the WETH contract\\n     * @param _treasury Address of the treasury\\n     */\\n    constructor(address _defaultAdmin, address _wETH, address _treasury) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        wETHAddress = payable(_wETH);\\n        emit WETHAddressSet(msg.sender, _wETH);\\n        farmingManager = new MeldFarmingManager(address(this), _treasury);\\n        emit MeldFarmingManagerDeployed(msg.sender, address(farmingManager));\\n    }\\n\\n    /**\\n     * @notice Function to receive native tokens\\n     * @dev Only can receive from the WETH contract\\n     */\\n    receive() external payable {\\n        require(msg.sender == wETHAddress, Errors.MBR_ONLY_WETH_ALLOWED);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function bridge(\\n        address _token,\\n        uint256 _amount\\n    ) public override onlySupportedToken(_token) onlyPositiveAmount(_amount) {\\n        IBaseERC20(_token).safeTransferFrom(msg.sender, address(farmingManager), _amount);\\n\\n        farmingManager.deposit(_token, _amount, \\\"\\\");\\n\\n        emit BridgeRequested(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function bridgeNative() public payable override {\\n        require(supportedTokens[address(0)], Errors.MBR_NATIVE_NOT_SUPPORTED);\\n        require(msg.value > 0, Errors.INVALID_AMOUNT);\\n\\n        IWETH weth = IWETH(wETHAddress);\\n\\n        uint256 wethBalanceBefore = weth.balanceOf(address(this));\\n        weth.deposit{value: msg.value}();\\n        require(\\n            weth.balanceOf(address(this)) == msg.value + wethBalanceBefore,\\n            Errors.MBR_NATIVE_WRAPPING_FAILED\\n        );\\n        IBaseERC20(wETHAddress).safeTransfer(address(farmingManager), msg.value);\\n        farmingManager.deposit(wETHAddress, msg.value, \\\"\\\");\\n\\n        emit BridgeRequested(msg.sender, address(0), msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function bridgeERC721(\\n        address _token,\\n        uint256 _tokenId\\n    ) public override onlySupportedToken(_token) {\\n        IBaseERC721(_token).safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit BridgeERC721Requested(msg.sender, _token, _tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function bridgeERC1155(\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) public override onlySupportedToken(_token) onlyPositiveAmount(_amount) {\\n        IBaseERC1155(_token).safeTransferFrom(msg.sender, address(this), _tokenId, _amount, \\\"\\\");\\n\\n        emit BridgeERC1155Requested(msg.sender, _token, _tokenId, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function withdrawToUser(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes32 _requestID,\\n        bytes calldata _extra\\n    )\\n        public\\n        override\\n        onlyRole(EXECUTION_ROLE)\\n        onlySupportedToken(_token)\\n        onlyUnprocessedRequest(_requestID)\\n        onlyPositiveAmount(_amount)\\n    {\\n        if (_token == address(0)) {\\n            farmingManager.withdraw(wETHAddress, _amount, _extra);\\n            IBaseERC20(wETHAddress).safeTransferFrom(\\n                address(farmingManager),\\n                address(this),\\n                _amount\\n            );\\n            IWETH(wETHAddress).withdraw(_amount);\\n            payable(_to).transfer(_amount);\\n        } else {\\n            farmingManager.withdraw(_token, _amount, _extra);\\n            IBaseERC20(_token).safeTransferFrom(address(farmingManager), _to, _amount);\\n        }\\n\\n        processedRequests[_requestID] = true;\\n\\n        emit WithdrawnToUser(_token, _to, _amount, _requestID);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function withdrawERC721ToUser(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes32 _requestID\\n    )\\n        public\\n        override\\n        onlyRole(EXECUTION_ROLE)\\n        onlySupportedToken(_token)\\n        onlyUnprocessedRequest(_requestID)\\n    {\\n        IBaseERC721(_token).safeTransferFrom(address(this), _to, _tokenId);\\n\\n        processedRequests[_requestID] = true;\\n\\n        emit WithdrawnERC721ToUser(_token, _to, _tokenId, _requestID);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function withdrawERC1155ToUser(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes32 _requestID\\n    )\\n        public\\n        override\\n        onlyRole(EXECUTION_ROLE)\\n        onlySupportedToken(_token)\\n        onlyUnprocessedRequest(_requestID)\\n        onlyPositiveAmount(_amount)\\n    {\\n        IBaseERC1155(_token).safeTransferFrom(address(this), _to, _tokenId, _amount, \\\"\\\");\\n\\n        processedRequests[_requestID] = true;\\n\\n        emit WithdrawnERC1155ToUser(_token, _to, _tokenId, _amount, _requestID);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function withdrawToUsers(\\n        address _token,\\n        address[] memory _tos,\\n        uint256[] memory _amounts,\\n        bytes32[] memory _requestIDs,\\n        bytes[] calldata _extra\\n    ) public override {\\n        require(\\n            _tos.length == _amounts.length &&\\n                _amounts.length == _requestIDs.length &&\\n                _requestIDs.length == _extra.length,\\n            Errors.INVALID_ARRAY_LENGTH\\n        );\\n\\n        for (uint256 i = 0; i < _tos.length; i++) {\\n            withdrawToUser(_token, _tos[i], _amounts[i], _requestIDs[i], _extra[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function withdrawERC721ToUsers(\\n        address _token,\\n        address[] memory _tos,\\n        uint256[] memory _tokenIds,\\n        bytes32[] memory _requestIDs\\n    ) public override {\\n        require(\\n            _tos.length == _tokenIds.length && _tokenIds.length == _requestIDs.length,\\n            Errors.INVALID_ARRAY_LENGTH\\n        );\\n\\n        for (uint256 i = 0; i < _tos.length; i++) {\\n            withdrawERC721ToUser(_token, _tos[i], _tokenIds[i], _requestIDs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function withdrawERC1155ToUsers(\\n        address _token,\\n        address[] memory _tos,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amounts,\\n        bytes32[] memory _requestIDs\\n    ) public override {\\n        require(\\n            _tos.length == _tokenIds.length &&\\n                _tokenIds.length == _requestIDs.length &&\\n                _tokenIds.length == _amounts.length,\\n            Errors.INVALID_ARRAY_LENGTH\\n        );\\n\\n        for (uint256 i = 0; i < _tos.length; i++) {\\n            withdrawERC1155ToUser(_token, _tos[i], _tokenIds[i], _amounts[i], _requestIDs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldBridgeReceiver\\n     */\\n    function getFarmingManagerAddress() public view returns (address) {\\n        return address(farmingManager);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MeldFarmingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IMeldFarming, IMeldFarmingManager} from \\\"./interfaces/IMeldFarmingManager.sol\\\";\\nimport {ILockedAdapter} from \\\"./interfaces/ILockedAdapter.sol\\\";\\nimport {IMeldBridgeReceiver} from \\\"./interfaces/IMeldBridgeReceiver.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\n/**\\n * @title Meld Farming Manager contract\\n * @notice Contract that manages the yield farming adapters\\n * @author MELD team\\n */\\ncontract MeldFarmingManager is IMeldFarmingManager {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(uint256 index => address adapterAddress) public override adapterAddresses;\\n    mapping(address adapterAddress => AdapterConfig config) private adapters;\\n    uint256 public override numAdapters;\\n\\n    mapping(address => YieldAssetConfig) private yieldAssetConfigs;\\n\\n    IMeldBridgeReceiver public override bridge;\\n    address public override treasury;\\n\\n    /**\\n     * @notice Modifier to check that only the bridge can call the function\\n     */\\n    modifier onlyBridge() {\\n        require(msg.sender == address(bridge), Errors.MFM_ONLY_BRIDGE_ALLOWED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check that the caller has the required role\\n     * @dev It queries the bridge contract to check the role\\n     * @param _role Role required to call the function\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        bridge.checkRole(_role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor of the contract\\n     * @param _bridge Address of the Meld Bridge Receiver contract\\n     * @param _treasury Address of the treasury\\n     */\\n    constructor(address _bridge, address _treasury) {\\n        bridge = IMeldBridgeReceiver(_bridge);\\n        emit BridgeSet(msg.sender, _bridge);\\n        _setTreasury(_treasury);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function addAdapter(\\n        string memory _adapterId,\\n        address _adapterAddress,\\n        bool _locked\\n    ) external override onlyRole(bridge.CONFIGURATION_ROLE()) {\\n        require(bytes(_adapterId).length > 0, Errors.MFM_INVALID_ADAPTER_ID);\\n        require(!adapters[_adapterAddress].exists, Errors.MFM_ADAPTER_ALREADY_EXISTS);\\n        require(_adapterAddress != address(0), Errors.INVALID_ADDRESS);\\n        IMeldFarming adapter = IMeldFarming(_adapterAddress);\\n        require(\\n            adapter.supportsInterface(type(IMeldFarming).interfaceId),\\n            Errors.MFM_ADAPTER_IS_NOT_MELD_FARMING\\n        );\\n        require(adapter.meldFarmingManager() == address(this), Errors.MFM_INVALID_ADAPTER_MFM);\\n\\n        adapters[_adapterAddress] = AdapterConfig({\\n            adapterIdStr: _adapterId,\\n            enabled: true,\\n            locked: _locked,\\n            exists: true\\n        });\\n        adapterAddresses[numAdapters] = _adapterAddress;\\n        numAdapters++;\\n        emit AdapterAdded(msg.sender, _adapterId, _adapterAddress, _locked);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function setAdapterEnabled(\\n        address _adapterAddress,\\n        bool _enabled\\n    ) external override onlyRole(bridge.CONFIGURATION_ROLE()) {\\n        AdapterConfig storage adapter = adapters[_adapterAddress];\\n        require(adapter.exists, Errors.MFM_ADAPTER_DOES_NOT_EXIST);\\n        adapter.enabled = _enabled;\\n        emit AdapterEnabled(msg.sender, _adapterAddress, _enabled);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function configAsset(\\n        address _asset,\\n        address[] memory _adaptersAddresses\\n    ) external override onlyRole(bridge.CONFIGURATION_ROLE()) {\\n        YieldAssetConfig storage yaConfig = yieldAssetConfigs[_asset];\\n\\n        address[] memory tempAdapterAddresses = new address[](\\n            yaConfig.numAdapters + _adaptersAddresses.length\\n        );\\n        address tempAdapterAddress;\\n        YieldAssetAdapter memory tempAdapter;\\n        uint256 tempNumAdapters = yaConfig.numAdapters;\\n\\n        _safeApproveAll(IERC20(_asset), address(bridge));\\n\\n        // We create an array of size oldList + newList of adapter ids\\n        // If the adapter already exists, we set its id in the same position\\n        // If the adapter doesn't exist, we set its id after the last position of the old list and update that pointer\\n        // Once that it's done, we have to reorganize the info to remove the empty spaces\\n\\n        for (uint256 i = 0; i < _adaptersAddresses.length; i++) {\\n            require(adapters[_adaptersAddresses[i]].exists, Errors.MFM_ADAPTER_DOES_NOT_EXIST);\\n            // Iterate over the new list of adapters\\n            tempAdapterAddress = _adaptersAddresses[i];\\n            tempAdapter = yaConfig.adapters[tempAdapterAddress];\\n            if (tempAdapter.exists) {\\n                // If the adapter already exists, set its id in the tempAdapterAddresss\\n                tempAdapterAddresses[tempAdapter.index] = tempAdapterAddress;\\n            } else {\\n                // If the adapter doesn't exist, add it to the list\\n                tempAdapterAddresses[tempNumAdapters] = tempAdapterAddress;\\n                yaConfig.adapterIndex[tempNumAdapters] = tempAdapterAddress;\\n                yaConfig.adapters[tempAdapterAddress] = YieldAssetAdapter({\\n                    yieldDeposit: 0,\\n                    lastTimestampRewardsClaimed: 0,\\n                    index: tempNumAdapters,\\n                    exists: true\\n                });\\n\\n                _safeApproveAll(IERC20(_asset), tempAdapterAddress);\\n                tempNumAdapters++;\\n            }\\n        }\\n\\n        emit AssetConfigSet(msg.sender, _asset, _adaptersAddresses);\\n        if (tempNumAdapters == 0) {\\n            return;\\n        }\\n\\n        uint256 rewardsClaimed = 0;\\n        uint256 tempRewards;\\n\\n        for (uint256 i = 0; i < yaConfig.numAdapters; i++) {\\n            if (tempAdapterAddresses[i] != address(0)) {\\n                // Position not empty\\n                continue;\\n            }\\n            // Position empty\\n\\n            // Withdraw all from the adapter\\n\\n            address oldAdapterAddress = adapterAddresses[i];\\n\\n            AdapterConfig memory adapterConfig = adapters[oldAdapterAddress];\\n\\n            _checkAdapterEnabled(adapterConfig);\\n\\n            uint256 adapterAssetDepositAmount = yaConfig.adapters[oldAdapterAddress].yieldDeposit;\\n\\n            yaConfig.liquidDeposit += IMeldFarming(oldAdapterAddress).withdraw(\\n                _asset,\\n                adapterAssetDepositAmount,\\n                \\\"\\\"\\n            );\\n            tempRewards = IMeldFarming(oldAdapterAddress).claimRewards(_asset, \\\"\\\", false);\\n            rewardsClaimed += tempRewards;\\n            emit RewardsClaimed(msg.sender, _asset, oldAdapterAddress, tempRewards);\\n\\n            // Remove old position\\n            delete yaConfig.adapters[oldAdapterAddress];\\n            for (; tempNumAdapters > i; tempNumAdapters--) {\\n                if (tempAdapterAddresses[tempNumAdapters - 1] == address(0)) {\\n                    // Last position empty\\n                    continue;\\n                }\\n                tempAdapterAddresses[i] = tempAdapterAddresses[tempNumAdapters - 1];\\n                yaConfig.adapters[tempAdapterAddresses[i]].index = i;\\n                yaConfig.adapterIndex[i] = tempAdapterAddresses[i];\\n                tempAdapterAddresses[tempNumAdapters - 1] = address(0);\\n                tempNumAdapters--;\\n                break;\\n            }\\n        }\\n\\n        yaConfig.numAdapters = _adaptersAddresses.length;\\n\\n        if (rewardsClaimed > 0) {\\n            IERC20(_asset).safeTransfer(treasury, rewardsClaimed);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function setTreasury(\\n        address _treasury\\n    ) external override onlyRole(bridge.CONFIGURATION_ROLE()) {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function rebalance(\\n        RebalancingInfo[] calldata _rebalanceInfo\\n    ) external override onlyRole(bridge.REBALANCER_ROLE()) {\\n        require(_rebalanceInfo.length > 0, Errors.INVALID_ARRAY_LENGTH);\\n        for (uint256 i = 0; i < _rebalanceInfo.length; i++) {\\n            RebalancingInfo calldata rebalanceInfo = _rebalanceInfo[i];\\n            _checkAdapterEnabled(adapters[rebalanceInfo.adapterAddress]);\\n            IMeldFarming adapter = IMeldFarming(rebalanceInfo.adapterAddress);\\n\\n            YieldAssetConfig storage yaConfig = yieldAssetConfigs[rebalanceInfo.asset];\\n            if (rebalanceInfo.action == RebalanceAction.DEPOSIT) {\\n                require(\\n                    rebalanceInfo.amount <= yaConfig.liquidDeposit,\\n                    Errors.MFM_NOT_ENOUGH_FUNDS\\n                );\\n                adapter.deposit(rebalanceInfo.asset, rebalanceInfo.amount, rebalanceInfo.extra);\\n                yaConfig.liquidDeposit -= rebalanceInfo.amount;\\n                yaConfig.adapters[rebalanceInfo.adapterAddress].yieldDeposit += rebalanceInfo\\n                    .amount;\\n            } else if (rebalanceInfo.action == RebalanceAction.WITHDRAW) {\\n                require(\\n                    rebalanceInfo.amount <=\\n                        yaConfig.adapters[rebalanceInfo.adapterAddress].yieldDeposit,\\n                    Errors.MFM_NOT_ENOUGH_FUNDS\\n                );\\n                uint256 amount = adapter.withdraw(\\n                    rebalanceInfo.asset,\\n                    rebalanceInfo.amount,\\n                    rebalanceInfo.extra\\n                );\\n                require(amount == rebalanceInfo.amount, Errors.MFM_AMOUNT_MISMATCH);\\n                yaConfig.liquidDeposit += rebalanceInfo.amount;\\n                yaConfig.adapters[rebalanceInfo.adapterAddress].yieldDeposit -= rebalanceInfo\\n                    .amount;\\n            } else if (rebalanceInfo.action == RebalanceAction.REQUEST_WITHDRAW) {\\n                ILockedAdapter(address(adapter)).requestWithdraw(\\n                    rebalanceInfo.asset,\\n                    rebalanceInfo.amount,\\n                    rebalanceInfo.extra\\n                );\\n            }\\n            emit Rebalanced(\\n                msg.sender,\\n                rebalanceInfo.asset,\\n                rebalanceInfo.adapterAddress,\\n                rebalanceInfo.amount,\\n                rebalanceInfo.action\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarming\\n     */\\n    function deposit(address _asset, uint256 _amount, bytes calldata) external override onlyBridge {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n\\n        assetConfig.liquidDeposit += _amount;\\n\\n        emit Deposited(_asset, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarming\\n     */\\n    function withdraw(\\n        address _asset,\\n        uint256 _amount,\\n        bytes calldata _extra\\n    ) external override onlyBridge returns (uint256) {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n        uint256 remainingAmount = _amount;\\n\\n        if (remainingAmount > assetConfig.liquidDeposit) {\\n            remainingAmount -= assetConfig.liquidDeposit;\\n            assetConfig.liquidDeposit = 0;\\n            for (uint256 i = 0; i < assetConfig.numAdapters; i++) {\\n                address adapterAddress = assetConfig.adapterIndex[i];\\n                IMeldFarming adapter = IMeldFarming(adapterAddress);\\n                YieldAssetAdapter storage yaAdapter = assetConfig.adapters[adapterAddress];\\n                AdapterConfig memory adapterConfig = adapters[adapterAddress];\\n                if (!adapterConfig.enabled) {\\n                    continue;\\n                }\\n                uint256 adapterAvailableLiquidity = adapter.getAvailableLiquidity(_asset);\\n                if (adapterAvailableLiquidity == 0) {\\n                    continue;\\n                }\\n                if (adapterAvailableLiquidity >= remainingAmount) {\\n                    adapter.withdraw(_asset, remainingAmount, _extra);\\n                    yaAdapter.yieldDeposit -= remainingAmount;\\n                    remainingAmount = 0;\\n                    break;\\n                } else {\\n                    adapter.withdraw(_asset, adapterAvailableLiquidity, _extra);\\n                    yaAdapter.yieldDeposit = 0;\\n                    remainingAmount -= adapterAvailableLiquidity;\\n                }\\n            }\\n            require(remainingAmount == 0, Errors.MFM_NOT_ENOUGH_FUNDS);\\n        } else {\\n            assetConfig.liquidDeposit -= remainingAmount;\\n        }\\n        emit Withdrawn(_asset, _amount);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarming\\n     */\\n    function claimRewards(\\n        address _asset,\\n        bytes calldata _extra,\\n        bool _withdrawOnlyAvailable\\n    ) external override onlyRole(bridge.REBALANCER_ROLE()) returns (uint256) {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n        require(assetConfig.numAdapters > 0, Errors.MFM_NO_ADAPTERS_CONFIGURED);\\n        uint256 totalRewards;\\n        for (uint256 i = 0; i < assetConfig.numAdapters; i++) {\\n            address adapterAddress = assetConfig.adapterIndex[i];\\n            YieldAssetAdapter storage yaAdapter = assetConfig.adapters[adapterAddress];\\n            AdapterConfig memory adapterConfig = adapters[adapterAddress];\\n            if (!adapterConfig.enabled) {\\n                continue;\\n            }\\n            uint256 rewards = IMeldFarming(adapterAddress).claimRewards(\\n                _asset,\\n                _extra,\\n                _withdrawOnlyAvailable\\n            );\\n            if (rewards > 0) {\\n                totalRewards += rewards;\\n                yaAdapter.lastTimestampRewardsClaimed = block.timestamp;\\n            }\\n            emit RewardsClaimed(msg.sender, _asset, adapterAddress, rewards);\\n        }\\n        IERC20(_asset).safeTransfer(treasury, totalRewards);\\n        return totalRewards;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function getAllAdapters() external view override returns (AdapterConfig[] memory) {\\n        AdapterConfig[] memory adaptersConfig = new AdapterConfig[](numAdapters);\\n        for (uint256 i = 0; i < numAdapters; i++) {\\n            adaptersConfig[i] = adapters[adapterAddresses[i]];\\n        }\\n        return adaptersConfig;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function getAdapter(\\n        address _adapterAddress\\n    ) external view override returns (AdapterConfig memory) {\\n        return adapters[_adapterAddress];\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function getYieldAssetConfig(\\n        address _asset\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            string[] memory assetAdapterIds,\\n            address[] memory assetAdapterAddresses,\\n            uint256[] memory yieldDeposit,\\n            uint256[] memory lastTimestampRewardsClaimed,\\n            uint256 liquidDeposit,\\n            uint256 totalDeposit,\\n            uint256 totalAvailableLiquidity\\n        )\\n    {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n        uint256 assetNumAdapters = assetConfig.numAdapters;\\n        liquidDeposit = assetConfig.liquidDeposit;\\n        totalDeposit = liquidDeposit;\\n        totalAvailableLiquidity = liquidDeposit;\\n        assetAdapterIds = new string[](assetNumAdapters);\\n        yieldDeposit = new uint256[](assetNumAdapters);\\n        lastTimestampRewardsClaimed = new uint256[](assetNumAdapters);\\n        assetAdapterAddresses = new address[](assetNumAdapters);\\n        address tempAdapterAddress;\\n        YieldAssetAdapter memory tempAdapter;\\n        for (uint256 i = 0; i < assetNumAdapters; i++) {\\n            tempAdapterAddress = assetConfig.adapterIndex[i];\\n            assetAdapterIds[i] = adapters[tempAdapterAddress].adapterIdStr;\\n            tempAdapter = assetConfig.adapters[tempAdapterAddress];\\n            yieldDeposit[i] = tempAdapter.yieldDeposit;\\n            totalDeposit += tempAdapter.yieldDeposit;\\n            totalAvailableLiquidity += IMeldFarming(tempAdapterAddress).getAvailableLiquidity(\\n                _asset\\n            );\\n            assetAdapterAddresses[i] = tempAdapterAddress;\\n            lastTimestampRewardsClaimed[i] = tempAdapter.lastTimestampRewardsClaimed;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarmingManager\\n     */\\n    function getTotalDeposit(address _asset) external view override returns (uint256) {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n        uint256 total = assetConfig.liquidDeposit;\\n        address tempAdapterAddress;\\n        for (uint256 i = 0; i < assetConfig.numAdapters; i++) {\\n            tempAdapterAddress = assetConfig.adapterIndex[i];\\n            total += assetConfig.adapters[tempAdapterAddress].yieldDeposit;\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarming\\n     * @dev This includes the funds in the Meld Farming Manager plus the funds in the non-locked adapters\\n     */\\n    function getAvailableLiquidity(address _asset) external view override returns (uint256) {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n        uint256 total = assetConfig.liquidDeposit;\\n        address tempAdapterAddress;\\n        for (uint256 i = 0; i < assetConfig.numAdapters; i++) {\\n            tempAdapterAddress = assetConfig.adapterIndex[i];\\n            if (!adapters[tempAdapterAddress].locked) {\\n                total += IMeldFarming(tempAdapterAddress).getAvailableLiquidity(_asset);\\n            }\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarming\\n     * @dev This is the sum of the rewards of the adapters configured for the asset\\n     */\\n    function getRewardsAmount(address _asset) external view override returns (uint256) {\\n        YieldAssetConfig storage assetConfig = yieldAssetConfigs[_asset];\\n        uint256 total;\\n        address tempAdapterAddress;\\n        for (uint256 i = 0; i < assetConfig.numAdapters; i++) {\\n            tempAdapterAddress = assetConfig.adapterIndex[i];\\n            total += IMeldFarming(tempAdapterAddress).getRewardsAmount(_asset);\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @inheritdoc IMeldFarming\\n     * @dev This function is intended for the Yield Adapters, but this contract must implement the same interface\\n     */\\n    function meldFarmingManager() external view override returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public pure override returns (bool) {\\n        return _interfaceId == type(IMeldFarming).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Private function to set the treasury address\\n     * @param _treasury Address of the treasury\\n     */\\n    function _setTreasury(address _treasury) private {\\n        require(_treasury != address(0), Errors.INVALID_ADDRESS);\\n        emit TreasuryUpdated(msg.sender, treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Private function to safe approve all the tokens to the spender\\n     * @param _token Token to approve\\n     * @param _spender Spender to approve\\n     */\\n    function _safeApproveAll(IERC20 _token, address _spender) private {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        uint256 increaseAllowance = type(uint256).max - allowance;\\n        if (increaseAllowance > 0) {\\n            _token.safeIncreaseAllowance(_spender, increaseAllowance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to check if the adapter is enabled\\n     * @dev It reverts if the adapter is not enabled\\n     * @param _adapter Adapter configuration\\n     */\\n    function _checkAdapterEnabled(AdapterConfig memory _adapter) private pure {\\n        require(_adapter.enabled, Errors.MFM_ADAPTER_DISABLED);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeERC1155Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeERC721Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"meldFarmingManagerAddress\",\"type\":\"address\"}],\"name\":\"MeldFarmingManagerDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"SupportedTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wETH\",\"type\":\"address\"}],\"name\":\"WETHAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"name\":\"WithdrawnERC1155ToUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"name\":\"WithdrawnERC721ToUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"name\":\"WithdrawnToUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIGURATION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarmingManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"name\":\"processedRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_supported\",\"type\":\"bool\"}],\"name\":\"setSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETHAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestID\",\"type\":\"bytes32\"}],\"name\":\"withdrawERC1155ToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_requestIDs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawERC1155ToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestID\",\"type\":\"bytes32\"}],\"name\":\"withdrawERC721ToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_requestIDs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawERC721ToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_extra\",\"type\":\"bytes\"}],\"name\":\"withdrawToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_requestIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_extra\",\"type\":\"bytes[]\"}],\"name\":\"withdrawToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MeldBridgeReceiver", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dede0a940b388b236f65722734a56e03b79e1c16000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000303b3d643753b86f2045f08b1df0f910f42cb200", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}