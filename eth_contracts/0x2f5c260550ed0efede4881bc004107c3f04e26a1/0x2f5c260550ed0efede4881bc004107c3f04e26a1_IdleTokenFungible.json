{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.9.2\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20PermitUpgradeable {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20PermitUpgradeable token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[45] private __gap;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Detailed.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC20Detailed is IERC20Upgradeable {\r\n  function name() external view returns(string memory);\r\n  function symbol() external view returns(string memory);\r\n  function decimals() external view returns(uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ILendingProtocol.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ILendingProtocol {\r\n  function mint() external returns (uint256);\r\n  function redeem(address account) external returns (uint256);\r\n  function nextSupplyRate(uint256 amount) external view returns (uint256);\r\n  function getAPR() external view returns (uint256);\r\n  function getPriceInToken() external view returns (uint256);\r\n  function token() external view returns (address);\r\n  function underlying() external view returns (address);\r\n  function availableLiquidity() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/IdleTokenFungible.sol\r\n\r\n/**\r\n * @title: Idle Token fully fungible, without gov tokens mgmt and with fees managed at contract level\r\n * @dev: code is copied from IdleTokenGovernance + IdleTokenHelper + IdleTokenV3_1 from this repo \r\n * https://github.com/Idle-Labs/idle-contracts and all governance tokens ref have been stripped out\r\n * other changes: safemath removed, upgraded to recent oz contracts, upgrade to _redeemHelper to allow\r\n * to redeem from a single protocol.\r\n * @summary: ERC20 that holds pooled user funds together\r\n *           Each token rapresent a share of the underlying pools\r\n *           and with each token user have the right to redeem a portion of these pools\r\n * @author: Idle Labs Inc., idle.finance\r\n */\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IdleTokenFungible is Initializable, ERC20Upgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable, PausableUpgradeable {\r\n  using SafeERC20Upgradeable for IERC20Detailed;\r\n\r\n  uint256 internal constant ONE_18 = 10**18;\r\n  // State variables\r\n  // eg. DAI address\r\n  address public token;\r\n  // Idle rebalancer current implementation address\r\n  address public rebalancer;\r\n  // Address collecting underlying fees\r\n  address public feeAddress;\r\n  // eg. 18 for DAI\r\n  uint256 internal tokenDecimals;\r\n  // Max unlent assets percentage for gas friendly swaps\r\n  uint256 public maxUnlentPerc; // 100000 == 100% -> 1000 == 1%\r\n  // Current fee on interest gained\r\n  uint256 public fee;\r\n  // eg. [cTokenAddress, iTokenAddress, ...]\r\n  address[] public allAvailableTokens;\r\n  // last fully applied allocations (ie when all liquidity has been correctly placed)\r\n  // eg. [5000, 0, 5000, 0] for 50% in compound, 0% fulcrum, 50% aave, 0 dydx. same order of allAvailableTokens\r\n  uint256[] public lastAllocations;\r\n  // eg. cTokenAddress => IdleCompoundAddress\r\n  mapping(address => address) public protocolWrappers;\r\n  // variable used for avoid the call of mint and redeem in the same tx\r\n  bytes32 internal _minterBlock;\r\n\r\n  // Events\r\n  event Rebalance(address _rebalancer, uint256 _amount);\r\n  event Referral(uint256 _amount, address _ref);\r\n  uint256 internal constant FULL_ALLOC = 100000;\r\n\r\n  // last allocations submitted by rebalancer\r\n  uint256[] internal lastRebalancerAllocations;\r\n\r\n  // last saved net asset value (in `token`)\r\n  uint256 public lastNAV;\r\n  // unclaimed fees in `token`\r\n  uint256 public unclaimedFees; // DEPRECATED\r\n  address public constant TL_MULTISIG = 0xFb3bD022D5DAcF95eE28a6B07825D4Ff9C5b3814;\r\n  address public constant DL_MULTISIG = 0xe8eA8bAE250028a8709A3841E0Ae1a44820d677b;\r\n  address public constant PAUSE_MULTISIG = 0xBaeCba470C229984b75BC860EFe8e97AE082Bb9f;\r\n  bool public skipRedeemMinAmount;\r\n  uint256 public scaleForTolerance;\r\n\r\n  // ERROR MESSAGES:\r\n  // 0 = is 0\r\n  // 1 = already initialized\r\n  // 2 = length is different\r\n  // 3 = Not greater then\r\n  // 4 = lt\r\n  // 5 = too high\r\n  // 6 = not authorized\r\n  // 7 = not equal\r\n  // 8 = error on flash loan execution\r\n  // 9 = Reentrancy\r\n\r\n  // ###############\r\n  // Initialize methods copied from IdleTokenV3_1.sol, removed unused stuff\r\n  // ###############\r\n\r\n  // Used to prevent initialization of the implementation contract\r\n  /// @custom:oz-upgrades-unsafe-allow constructor\r\n  constructor() {\r\n    token = address(1);\r\n  }\r\n\r\n    /**\r\n   * It allows owner to manually initialize new contract implementation\r\n   *\r\n   * @param _protocolTokens : array of protocol tokens supported\r\n   * @param _wrappers : array of wrappers for protocol tokens\r\n   * @param _lastRebalancerAllocations : array of allocations\r\n   */\r\n  function _extraInitialize(\r\n    address[] memory _protocolTokens,\r\n    address[] memory _wrappers,\r\n    uint256[] memory _lastRebalancerAllocations\r\n  ) internal {\r\n    // set all available tokens and set the protocolWrappers mapping in the for loop\r\n    allAvailableTokens = _protocolTokens;\r\n    // set protocol token to gov token mapping\r\n    for (uint256 i = 0; i < _protocolTokens.length; i++) {\r\n      protocolWrappers[_protocolTokens[i]] = _wrappers[i];\r\n    }\r\n\r\n    lastRebalancerAllocations = _lastRebalancerAllocations;\r\n    lastAllocations = _lastRebalancerAllocations;\r\n  }\r\n\r\n  function _init(\r\n    string calldata _name, // eg. IdleDAI\r\n    string calldata _symbol, // eg. IDLEDAI\r\n    address _token,\r\n    address[] calldata _protocolTokens,\r\n    address[] calldata _wrappers,\r\n    uint256[] calldata _lastRebalancerAllocations\r\n  ) external initializer {\r\n    require(token == address(0), '1');\r\n    // Initialize inherited contracts\r\n    ERC20Upgradeable.__ERC20_init(_name, _symbol);\r\n    OwnableUpgradeable.__Ownable_init();\r\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n    PausableUpgradeable.__Pausable_init();\r\n    // Initialize storage variables\r\n    maxUnlentPerc = 1000;\r\n    token = _token;\r\n    tokenDecimals = IERC20Detailed(_token).decimals();\r\n    // end of old initialize method\r\n    feeAddress = TL_MULTISIG;\r\n    rebalancer = address(0xB3C8e5534F0063545CBbb7Ce86854Bf42dB8872B);\r\n    fee = 15000;\r\n\r\n    _extraInitialize(_protocolTokens, _wrappers, _lastRebalancerAllocations);\r\n  }\r\n\r\n  // ############### \r\n  // End initialize\r\n  // ############### \r\n\r\n  // onlyOwner\r\n  // pause deposits\r\n  function pause() external {\r\n    require(msg.sender == TL_MULTISIG || msg.sender == DL_MULTISIG || msg.sender == PAUSE_MULTISIG || msg.sender == owner(), '6');\r\n    _pause();\r\n  }\r\n\r\n  // unpause deposits\r\n  function unpause() external {\r\n    require(msg.sender == TL_MULTISIG || msg.sender == DL_MULTISIG || msg.sender == PAUSE_MULTISIG || msg.sender == owner(), '6');\r\n    _unpause();\r\n  }\r\n\r\n  /**\r\n   * It allows owner to modify allAvailableTokens array in case of emergency\r\n   * ie if a bug on a interest bearing token is discovered and reset protocolWrappers\r\n   * associated with those tokens.\r\n   *\r\n   * @param protocolTokens : array of protocolTokens addresses (eg [cDAI, iDAI, ...])\r\n   * @param wrappers : array of wrapper addresses (eg [IdleCompound, IdleFulcrum, ...])\r\n   */\r\n  function setAllAvailableTokensAndWrappers(\r\n    address[] calldata protocolTokens,\r\n    address[] calldata wrappers\r\n  ) external onlyOwner {\r\n    require(protocolTokens.length == wrappers.length, \"2\");\r\n\r\n    address protToken;\r\n    for (uint256 i = 0; i < protocolTokens.length; i++) {\r\n      protToken = protocolTokens[i];\r\n      require(protToken != address(0) && wrappers[i] != address(0), \"0\");\r\n      protocolWrappers[protToken] = wrappers[i];\r\n    }\r\n\r\n    allAvailableTokens = protocolTokens;\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the IdleRebalancerV3_1 address\r\n   *\r\n   * @param _rebalancer : new IdleRebalancerV3_1 address\r\n   */\r\n  function setRebalancer(address _rebalancer)\r\n    external onlyOwner {\r\n      require((rebalancer = _rebalancer) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the fee (1000 == 10% of gained interest)\r\n   *\r\n   * @param _fee : fee amount where 100000 is 100%, max settable is 20%\r\n   */\r\n  function setFee(uint256 _fee)\r\n    external onlyOwner {\r\n      // if we are changing fee we should calc the unclaimed fees of the \r\n      // current period. If new fees are 0 we don't get the old fees\r\n      if (_fee > 0) {\r\n        _updateFeeInfo();\r\n      }\r\n      // set new fees\r\n      // 100000 == 100% -> 10000 == 10%\r\n      require((fee = _fee) <= FULL_ALLOC / 5, \"5\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the fee address\r\n   *\r\n   * @param _feeAddress : fee address\r\n   */\r\n  function setFeeAddress(address _feeAddress)\r\n    external onlyOwner {\r\n      require((feeAddress = _feeAddress) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the max unlent asset percentage (1000 == 1% of unlent asset max)\r\n   *\r\n   * @param _perc : max unlent perc where 100000 is 100%\r\n   */\r\n  function setMaxUnlentPerc(uint256 _perc)\r\n    external onlyOwner {\r\n      require((maxUnlentPerc = _perc) <= 100000, \"5\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the max the tolerance scaled for redeems\r\n   *\r\n   * @param _isScaled : wheter to use scaled tolerance or not on the redeemed amount\r\n   */\r\n  function setScaleForTolerance(bool _isScaled)\r\n    external onlyOwner {\r\n      scaleForTolerance = _isScaled ? 10**12 : 1;\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the skip redeem min amount flag\r\n   *\r\n   * @param _flag : wheter to skip redeem min amount check or not\r\n   */\r\n  function setSkipRedeemMinAmount(bool _flag)\r\n    external onlyOwner {\r\n      skipRedeemMinAmount = _flag;\r\n  }\r\n\r\n  /**\r\n   * Used by Rebalancer to set the new allocations\r\n   *\r\n   * @param _allocations : array with allocations in percentages (100% => 100000)\r\n   */\r\n  function setAllocations(uint256[] calldata _allocations) external {\r\n    require(msg.sender == rebalancer || msg.sender == owner(), \"6\");\r\n    _setAllocations(_allocations);\r\n  }\r\n\r\n  /**\r\n   * Used by Rebalancer or in openRebalance to set the new allocations\r\n   *\r\n   * @param _allocations : array with allocations in percentages (100% => 100000)\r\n   */\r\n  function _setAllocations(uint256[] memory _allocations) internal {\r\n    require(_allocations.length == allAvailableTokens.length, \"2\");\r\n    uint256 total;\r\n    for (uint256 i = 0; i < _allocations.length; i++) {\r\n      total += _allocations[i];\r\n    }\r\n    lastRebalancerAllocations = _allocations;\r\n    require(total == FULL_ALLOC, \"7\");\r\n  }\r\n\r\n  // view\r\n  /**\r\n   * Get latest allocations submitted by rebalancer\r\n   *\r\n   * @return : array of allocations ordered as allAvailableTokens\r\n   */\r\n  function getAllocations() external view returns (uint256[] memory) {\r\n    return lastRebalancerAllocations;\r\n  }\r\n\r\n  /**\r\n  * Get currently used protocol tokens (cDAI, aDAI, ...)\r\n  *\r\n  * @return : array of protocol tokens supported\r\n  */\r\n  function getAllAvailableTokens() external view returns (address[] memory) {\r\n    return allAvailableTokens;\r\n  }\r\n\r\n  /**\r\n   * IdleToken price calculation, in underlying\r\n   *\r\n   * @return : price in underlying token\r\n   */\r\n  function tokenPrice()\r\n    external view\r\n    returns (uint256) {\r\n    return _tokenPrice();\r\n  }\r\n\r\n  /**\r\n   * Get APR of every ILendingProtocol\r\n   *\r\n   * @return addresses array of token addresses\r\n   * @return aprs array of aprs (ordered in respect to the `addresses` array)\r\n   */\r\n  function getAPRs()\r\n    external view\r\n    returns (address[] memory addresses, uint256[] memory aprs) {\r\n      address[] memory _allAvailableTokens = allAvailableTokens;\r\n\r\n      address currToken;\r\n      addresses = new address[](_allAvailableTokens.length);\r\n      aprs = new uint256[](_allAvailableTokens.length);\r\n      for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\r\n        currToken = _allAvailableTokens[i];\r\n        addresses[i] = currToken;\r\n        aprs[i] = ILendingProtocol(protocolWrappers[currToken]).getAPR();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Get current avg APR of this IdleToken\r\n   *\r\n   * @return avgApr current weighted avg apr\r\n   */\r\n  function getAvgAPR()\r\n    external view\r\n    returns (uint256 avgApr) {\r\n    (uint256[] memory amounts, uint256 total) = _getCurrentAllocations();\r\n    address[] memory _allAvailableTokens = allAvailableTokens;\r\n\r\n    // IDLE gov token won't be counted here because is not in allAvailableTokens\r\n    for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\r\n      if (amounts[i] == 0) {\r\n        continue;\r\n      }\r\n      address protocolToken = _allAvailableTokens[i];\r\n      // avgApr = avgApr.add(currApr.mul(weight).div(ONE_18))\r\n      avgApr += ILendingProtocol(protocolWrappers[protocolToken]).getAPR() * amounts[i];\r\n    }\r\n\r\n    if (total == 0) {\r\n      return 0;\r\n    }\r\n\r\n    avgApr = avgApr / total;\r\n  }\r\n\r\n  // external\r\n  /**\r\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\r\n   * This method triggers a rebalance of the pools if _skipRebalance is set to false\r\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\r\n   * NOTE 2: this method can be paused\r\n   *\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @param : not used anymore\r\n   * @param _referral : referral address\r\n   * @return mintedTokens : amount of IdleTokens minted\r\n   */\r\n  function mintIdleToken(uint256 _amount, bool, address _referral)\r\n    external nonReentrant whenNotPaused\r\n    returns (uint256 mintedTokens) {\r\n    _updateFeeInfo();\r\n\r\n    _minterBlock = keccak256(abi.encodePacked(tx.origin, block.number));\r\n    // Get current IdleToken price\r\n    uint256 idlePrice = _tokenPrice();\r\n    // transfer tokens to this contract\r\n    IERC20Detailed(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    mintedTokens = _amount * ONE_18 / idlePrice;\r\n    _mint(msg.sender, mintedTokens);\r\n\r\n    lastNAV += _amount;\r\n\r\n    if (_referral != address(0)) {\r\n      emit Referral(_amount, _referral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function redeemIdleToken(uint256 _amount)\r\n    external\r\n    returns (uint256) {\r\n      return _redeemIdleToken(_amount);\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function _redeemIdleToken(uint256 _amount)\r\n    internal nonReentrant\r\n    returns (uint256 redeemedTokens) {\r\n      _checkMintRedeemSameTx();\r\n      _updateFeeInfo();\r\n      if (_amount != 0) {\r\n        uint256 price = _tokenPrice();\r\n        uint256 valueToRedeem = _amount * price / ONE_18;\r\n        uint256 balanceUnderlying = _contractBalanceOf(token);\r\n        if (valueToRedeem > balanceUnderlying) {\r\n          redeemedTokens = _redeemHelper(valueToRedeem - balanceUnderlying) + balanceUnderlying;\r\n        } else {\r\n          redeemedTokens = valueToRedeem;\r\n        }\r\n        if (!skipRedeemMinAmount) {\r\n          // keep 100 wei as buffer, for DAI (where we convert DAI to USDC with PSM) the tolerance is \r\n          // scaled by 10**12\r\n          uint256 _scaleForTolerance = scaleForTolerance;\r\n          uint256 _tolerance = _scaleForTolerance > 0 ? 100 * _scaleForTolerance : 100;\r\n          require(redeemedTokens > valueToRedeem - _tolerance, '3');\r\n        }\r\n        // update lastNAV\r\n        lastNAV -= redeemedTokens;\r\n        // burn idleTokens\r\n        _burn(msg.sender, _amount);\r\n        // send underlying minus fee to msg.sender\r\n        _transferTokens(token, msg.sender, redeemedTokens);\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   *\r\n   * @param _amount : amount in underlyings\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function _redeemHelper(uint256 _amount) private returns (uint256 redeemedTokens) {\r\n    address currToken;\r\n    address[] memory _allAvailableTokens = allAvailableTokens;\r\n    uint256 availableLiquidity;\r\n    uint256 toRedeem = _amount;\r\n    uint256 protTokens;\r\n    uint256 protTokensToRedeem;\r\n    ILendingProtocol protocol;\r\n\r\n    // we try to redeem in order of 'allAvailableTokens' until we have _amount\r\n    // the final amount redeemed could be less than the requested `_amount`, \r\n    // but this is checked in _redeemIdleToken\r\n    for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\r\n      currToken = _allAvailableTokens[i];\r\n      // we check if we have liquidity deposited\r\n      protocol = ILendingProtocol(protocolWrappers[currToken]);\r\n      protTokens = _contractBalanceOf(currToken);\r\n      if (protTokens == 0) {\r\n        continue;\r\n      }\r\n      // and if the liquidity available in lending protocol is enough\r\n      availableLiquidity = protocol.availableLiquidity();\r\n      if (availableLiquidity < toRedeem) {\r\n        // remove 1% to be sure it's really available (eg for compound-like protocols)\r\n        toRedeem = availableLiquidity * (FULL_ALLOC-1000) / FULL_ALLOC;\r\n      }\r\n        // convert underlying (`toRedeem`) to protocol token\r\n      protTokensToRedeem = toRedeem * ONE_18 / protocol.getPriceInToken();\r\n      // check if we have enough balance\r\n      if (protTokensToRedeem > protTokens) {\r\n        protTokensToRedeem = protTokens;\r\n      }\r\n      redeemedTokens += _redeemProtocolTokens(currToken, protTokensToRedeem);\r\n      // if we have enough tokens or we are close to the requested amount\r\n      if (redeemedTokens >= _amount - 100 || redeemedTokens > toRedeem) {\r\n        break;\r\n      }\r\n      toRedeem = _amount - redeemedTokens;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dynamic allocate all the pool across different lending protocols if needed,\r\n   * rebalance without params\r\n   *\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function rebalance() external returns (bool) {\r\n    return _rebalance();\r\n  }\r\n\r\n  // internal\r\n  /**\r\n   * Get current idleToken price based on net asset value and totalSupply\r\n   *\r\n   * @return price value of 1 idleToken in underlying\r\n   */\r\n  function _tokenPrice() internal view returns (uint256 price) {\r\n    uint256 _totSupply = totalSupply();\r\n    uint256 _tokenDecimals = tokenDecimals;\r\n    if (_totSupply == 0) {\r\n      return 10**(_tokenDecimals);\r\n    }\r\n\r\n    uint256 totNav = _getCurrentPoolValue();\r\n    price = (totNav - _calculateFees(totNav)) * ONE_18 / _totSupply; // idleToken price in token wei\r\n  }\r\n\r\n  /**\r\n   * Dynamic allocate all the pool across different lending protocols if needed\r\n   *\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function _rebalance()\r\n    internal whenNotPaused\r\n    returns (bool) {\r\n      _updateFeeInfo();\r\n\r\n      // check if we need to rebalance by looking at the last allocations submitted by rebalancer\r\n      uint256[] memory rebalancerLastAllocations = lastRebalancerAllocations;\r\n      uint256[] memory _lastAllocations = lastAllocations;\r\n      uint256 lastLen = _lastAllocations.length;\r\n      bool areAllocationsEqual = rebalancerLastAllocations.length == lastLen;\r\n      if (areAllocationsEqual) {\r\n        for (uint256 i = 0; i < lastLen || !areAllocationsEqual; i++) {\r\n          if (_lastAllocations[i] != rebalancerLastAllocations[i]) {\r\n            areAllocationsEqual = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      uint256 balance = _contractBalanceOf(token);\r\n\r\n      if (areAllocationsEqual && balance == 0) {\r\n        return false;\r\n      }\r\n\r\n      uint256 maxUnlentBalance = _getCurrentPoolValue() * maxUnlentPerc / FULL_ALLOC;\r\n      if (areAllocationsEqual) {\r\n        if (balance > maxUnlentBalance) {\r\n          // mint the difference\r\n          _mintWithAmounts(rebalancerLastAllocations, balance - maxUnlentBalance);\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Instead of redeeming everything during rebalance we redeem and mint only what needs\r\n      // to be reallocated\r\n\r\n      // get current allocations in underlying (it does not count unlent underlying)\r\n      (uint256[] memory amounts, uint256 totalInUnderlying) = _getCurrentAllocations();\r\n      // calculate the total amount in underlying that needs to be reallocated\r\n      totalInUnderlying += balance;\r\n\r\n      (uint256[] memory toMintAllocations, uint256 totalToMint, bool lowLiquidity) = _redeemAllNeeded(\r\n        amounts,\r\n        // calculate new allocations given the total (not counting unlent balance)\r\n        _amountsFromAllocations(rebalancerLastAllocations, totalInUnderlying - maxUnlentBalance)\r\n      );\r\n      // if some protocol has liquidity that we should redeem, we do not update\r\n      // lastAllocations to force another rebalance next time\r\n      if (!lowLiquidity) {\r\n        // Update lastAllocations with rebalancerLastAllocations\r\n        delete lastAllocations;\r\n        lastAllocations = rebalancerLastAllocations;\r\n      }\r\n\r\n      uint256 totalRedeemd = _contractBalanceOf(token);\r\n\r\n      if (totalRedeemd <= maxUnlentBalance || totalToMint == 0) {\r\n        return false;\r\n      }\r\n\r\n      // Do not mint directly using toMintAllocations check with totalRedeemd\r\n      uint256[] memory tempAllocations = new uint256[](toMintAllocations.length);\r\n      for (uint256 i = 0; i < toMintAllocations.length; i++) {\r\n        // Calc what would have been the correct allocations percentage if all was available\r\n        tempAllocations[i] = toMintAllocations[i] * FULL_ALLOC / totalToMint;\r\n      }\r\n\r\n      // partial amounts\r\n      _mintWithAmounts(tempAllocations, totalRedeemd - maxUnlentBalance);\r\n\r\n      emit Rebalance(msg.sender, totalInUnderlying);\r\n\r\n      return true; // hasRebalanced\r\n  }\r\n\r\n  /**\r\n   * Calculate gain and mint eventual fees\r\n   */\r\n  function _updateFeeInfo() internal {\r\n    // currNAV includes fees\r\n    uint256 _currNAV = _getCurrentPoolValue();\r\n    uint256 _fees = _calculateFees(_currNAV);\r\n    if (_fees > 0) {\r\n      _mint(feeAddress, _fees * totalSupply() / (_currNAV - _fees));\r\n    }\r\n    lastNAV = _currNAV;\r\n  }\r\n\r\n  /**\r\n   * Calculate fees, _currNAV should have fee already accounted excluded\r\n   */\r\n  function _calculateFees(uint256 _currNAV) internal view returns (uint256 _fees) {\r\n    // lastNAV is without fees\r\n    uint256 _lastNAV = lastNAV;\r\n    if (_currNAV > _lastNAV) {\r\n      // calculate new fees (TVLs without old fees)\r\n      _fees = (_currNAV - _lastNAV) * fee / FULL_ALLOC;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mint specific amounts of protocols tokens\r\n   *\r\n   * @param allocations array of amounts to be minted\r\n   * @param total total amount\r\n   */\r\n  function _mintWithAmounts(uint256[] memory allocations, uint256 total) internal {\r\n    // mint for each protocol and update currentTokensUsed\r\n    uint256[] memory protocolAmounts = _amountsFromAllocations(allocations, total);\r\n\r\n    uint256 currAmount;\r\n    address protWrapper;\r\n    address[] memory _tokens = allAvailableTokens;\r\n    address _token = token;\r\n    for (uint256 i = 0; i < protocolAmounts.length; i++) {\r\n      currAmount = protocolAmounts[i];\r\n      if (currAmount != 0) {\r\n        protWrapper = protocolWrappers[_tokens[i]];\r\n        // Transfer _amount underlying token (eg. DAI) to protWrapper\r\n        _transferTokens(_token, protWrapper, currAmount);\r\n        ILendingProtocol(protWrapper).mint();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate amounts from percentage allocations (100000 => 100%)\r\n   *\r\n   * @param allocations array of protocol allocations in percentage\r\n   * @param total total amount\r\n   * @return newAmounts array with amounts\r\n   */\r\n  function _amountsFromAllocations(uint256[] memory allocations, uint256 total)\r\n    internal pure returns (uint256[] memory newAmounts) {\r\n    newAmounts = new uint256[](allocations.length);\r\n    uint256 currBalance;\r\n    uint256 allocatedBalance;\r\n\r\n    for (uint256 i = 0; i < allocations.length; i++) {\r\n      if (i == allocations.length - 1) {\r\n        newAmounts[i] = total - allocatedBalance;\r\n      } else {\r\n        currBalance = total * allocations[i] / FULL_ALLOC;\r\n        allocatedBalance += currBalance;\r\n        newAmounts[i] = currBalance;\r\n      }\r\n    }\r\n    return newAmounts;\r\n  }\r\n\r\n  /**\r\n   * Redeem all underlying needed from each protocol\r\n   *\r\n   * @param amounts : array with current allocations in underlying\r\n   * @param newAmounts : array with new allocations in underlying\r\n   * @return toMintAllocations : array with amounts to be minted\r\n   * @return totalToMint : total amount that needs to be minted\r\n   */\r\n  function _redeemAllNeeded(\r\n    uint256[] memory amounts,\r\n    uint256[] memory newAmounts\r\n    ) internal returns (\r\n      uint256[] memory toMintAllocations,\r\n      uint256 totalToMint,\r\n      bool lowLiquidity\r\n    ) {\r\n    toMintAllocations = new uint256[](amounts.length);\r\n    ILendingProtocol protocol;\r\n    uint256 currAmount;\r\n    uint256 newAmount;\r\n    address currToken;\r\n    address[] memory _tokens = allAvailableTokens;\r\n    // check the difference between amounts and newAmounts\r\n    for (uint256 i = 0; i < amounts.length; i++) {\r\n      currToken = _tokens[i];\r\n      newAmount = newAmounts[i];\r\n      currAmount = amounts[i];\r\n      protocol = ILendingProtocol(protocolWrappers[currToken]);\r\n      if (currAmount > newAmount) {\r\n        uint256 toRedeem = currAmount - newAmount;\r\n        uint256 availableLiquidity = protocol.availableLiquidity();\r\n        if (availableLiquidity < toRedeem) {\r\n          lowLiquidity = true;\r\n          // remove 1% to be sure it's really available (eg for compound-like protocols)\r\n          toRedeem = availableLiquidity * (FULL_ALLOC-1000) / FULL_ALLOC;\r\n        }\r\n        // redeem the difference\r\n        _redeemProtocolTokens(\r\n          currToken,\r\n          // convert amount from underlying to protocol token\r\n          toRedeem * ONE_18 / protocol.getPriceInToken()\r\n        );\r\n        // tokens are now in this contract\r\n      } else {\r\n        toMintAllocations[i] = newAmount - currAmount;\r\n        totalToMint += toMintAllocations[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the contract balance of every protocol currently used\r\n   *\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\r\n   * @return total : total AUM in underlying\r\n   */\r\n  function _getCurrentAllocations() internal view\r\n    returns (uint256[] memory amounts, uint256 total) {\r\n      // Get balance of every protocol implemented\r\n      address currentToken;\r\n      address[] memory _tokens = allAvailableTokens;\r\n      uint256 tokensLen = _tokens.length;\r\n      amounts = new uint256[](tokensLen);\r\n      for (uint256 i = 0; i < tokensLen; i++) {\r\n        currentToken = _tokens[i];\r\n        amounts[i] = _getPriceInToken(protocolWrappers[currentToken]) * _contractBalanceOf(currentToken) / ONE_18;\r\n        total += amounts[i];\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Get the current pool value in underlying\r\n   *\r\n   * @return total : total AUM in underlying\r\n   */\r\n  function _getCurrentPoolValue() internal view\r\n    returns (uint256 total) {\r\n      // Get balance of every protocol implemented\r\n      address currentToken;\r\n      address[] memory _tokens = allAvailableTokens;\r\n      for (uint256 i = 0; i < _tokens.length; ) {\r\n        currentToken = _tokens[i];\r\n        total += _getPriceInToken(protocolWrappers[currentToken]) * _contractBalanceOf(currentToken) / ONE_18;\r\n        unchecked {\r\n          i++;\r\n        }\r\n      }\r\n\r\n      // add unlent balance\r\n      total += _contractBalanceOf(token);\r\n  }\r\n\r\n  /**\r\n   * Get contract balance of _token\r\n   *\r\n   * @param _token : address of the token to read balance\r\n   * @return total : balance of _token in this contract\r\n   */\r\n  function _contractBalanceOf(address _token) private view returns (uint256) {\r\n    // Original implementation:\r\n    //\r\n    // return IERC20(_token).balanceOf(address(this));\r\n\r\n    // Optimized implementation inspired by uniswap https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/UniswapV3Pool.sol#L144\r\n    //\r\n    // 0x70a08231 -> selector for 'function balanceOf(address) returns (uint256)'\r\n    (bool success, bytes memory data) =\r\n        _token.staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\r\n    require(success);\r\n    return abi.decode(data, (uint256));\r\n  }\r\n\r\n\r\n  /**\r\n   * Get price of 1 protocol token in underlyings\r\n   *\r\n   * @param _token : address of the protocol token\r\n   * @return price : price of protocol token\r\n   */\r\n  function _getPriceInToken(address _token) private view returns (uint256) {\r\n    return ILendingProtocol(_token).getPriceInToken();\r\n  }\r\n\r\n  /**\r\n   * Check that no mint has been made in the same block from the same EOA\r\n   */\r\n  function _checkMintRedeemSameTx() private view {\r\n    require(keccak256(abi.encodePacked(tx.origin, block.number)) != _minterBlock, \"9\");\r\n  }\r\n\r\n  // ILendingProtocols calls\r\n  /**\r\n   * Redeem underlying tokens through protocol wrapper\r\n   *\r\n   * @param _amount : amount of `_token` to redeem\r\n   * @param _token : protocol token address\r\n   * @return tokens : new tokens minted\r\n   */\r\n  function _redeemProtocolTokens(address _token, uint256 _amount)\r\n    internal\r\n    returns (uint256 tokens) {\r\n      if (_amount != 0) {\r\n        // Transfer _amount of _protocolToken (eg. cDAI) to _wrapperAddr\r\n        address _wrapperAddr = protocolWrappers[_token];\r\n        _transferTokens(_token, _wrapperAddr, _amount);\r\n        tokens = ILendingProtocol(_wrapperAddr).redeem(address(this));\r\n      }\r\n  }\r\n\r\n  function _transferTokens(address _token, address _to, uint256 _amount) internal {\r\n    IERC20Detailed(_token).safeTransfer(_to, _amount);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DL_MULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_MULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TL_MULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_protocolTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_wrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lastRebalancerAllocations\",\"type\":\"uint256[]\"}],\"name\":\"_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAvailableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPRs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"aprs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAvailableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvgAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avgApr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnlentPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"mintIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolWrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleForTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"protocolTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappers\",\"type\":\"address[]\"}],\"name\":\"setAllAvailableTokensAndWrappers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perc\",\"type\":\"uint256\"}],\"name\":\"setMaxUnlentPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"}],\"name\":\"setRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isScaled\",\"type\":\"bool\"}],\"name\":\"setScaleForTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setSkipRedeemMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skipRedeemMinAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IdleTokenFungible", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0c7f4dcd4785a966ef84771d7ab1db3b51dfa36f00ba7a032a905985f3bb0c6"}