{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Liquid locker\r\n@author 1up\r\n@license GNU AGPLv3\r\n@notice\r\n    Tokenization of protocol's voting escrow position.\r\n    Mints a fixed amount of tokens per token locked in the voting escrow.\r\n    Intended to be a proxy operator.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\nimplements: ERC20\r\n\r\ninterface Proxy:\r\n    def modify_lock(_amount: uint256, _unlock_time: uint256): nonpayable\r\n\r\ninterface YearnVotingEscrow:\r\n    def locked(_account: address) -> uint256: view\r\n\r\ntoken: public(immutable(ERC20))\r\nvoting_escrow: public(immutable(YearnVotingEscrow))\r\nproxy: public(immutable(Proxy))\r\n\r\ntotalSupply: public(uint256)\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\ndecimals: public(constant(uint8)) = 18\r\nname: public(constant(String[14])) = \"1UP Locked YFI\"\r\nsymbol: public(constant(String[5])) = \"upYFI\"\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nSCALE: constant(uint256) = 69_420\r\nWEEK: constant(uint256) = 7 * 24 * 60 * 60\r\nLOCK_TIME: constant(uint256) = 500 * WEEK\r\n\r\n@external\r\ndef __init__(_token: address, _voting_escrow: address, _proxy: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _token Token to be locked in the voting escrow\r\n    @param _voting_escrow Voting escrow\r\n    @param _proxy Proxy\r\n    \"\"\"\r\n    token = ERC20(_token)\r\n    voting_escrow = YearnVotingEscrow(_voting_escrow)\r\n    proxy = Proxy(_proxy)\r\n    log Transfer(empty(address), msg.sender, 0)\r\n\r\n@external\r\ndef deposit(_amount: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit tokens into the protocol's ve position and mint liquid locker tokens\r\n    @param _amount Amount of tokens to add to the lock\r\n    @param _receiver Recipient of newly minted liquid locker tokens\r\n    @return Amount of tokens minted to the recipient\r\n    \"\"\"\r\n    minted: uint256 = _amount * SCALE\r\n    self._mint(minted, _receiver)\r\n    assert token.transferFrom(msg.sender, proxy.address, _amount, default_return_value=True)\r\n    proxy.modify_lock(_amount, block.timestamp + LOCK_TIME)\r\n    return minted\r\n\r\n@external\r\ndef mint(_receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Mint liquid locker tokens for any new tokens in the ve lock\r\n    @param _receiver Receiver of newly minted liquid locker tokens\r\n    @return Amount of tokens minted to the recipient\r\n    \"\"\"\r\n    excess: uint256 = voting_escrow.locked(proxy.address) * SCALE - self.totalSupply\r\n    self._mint(excess, _receiver)\r\n    return excess\r\n\r\n@internal\r\ndef _mint(_amount: uint256, _receiver: address):\r\n    \"\"\"\r\n    @notice Mint an amount of liquid locker tokens\r\n    \"\"\"\r\n    assert _amount > 0\r\n    assert _receiver != empty(address) and _receiver != self\r\n\r\n    self.totalSupply += _amount\r\n    self.balanceOf[_receiver] += _amount\r\n    log Transfer(empty(address), _receiver, _amount)\r\n\r\n@external\r\ndef extend_lock():\r\n    \"\"\"\r\n    @notice Extend the duration of the protocol's ve lock\r\n    \"\"\"\r\n    proxy.modify_lock(0, block.timestamp + LOCK_TIME)\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer tokens\r\n    @param _to Receiver of tokens\r\n    @param _value Amount of tokens to transfer\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n\r\n    if _value > 0:\r\n        self.balanceOf[msg.sender] -= _value\r\n        self.balanceOf[_to] += _value\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer tokens from another user\r\n    @param _from User to transfer tokens from \r\n    @param _to Receiver of tokens\r\n    @param _value Amount of tokens to transfer\r\n    @dev Requires prior set allowance\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n\r\n    if _value > 0:\r\n        allowance: uint256 = self.allowance[_from][msg.sender]\r\n        if allowance < max_value(uint256):\r\n            self.allowance[_from][msg.sender] = allowance - _value\r\n\r\n        self.balanceOf[_from] -= _value\r\n        self.balanceOf[_to] += _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve another user to spend your tokens\r\n    @param _spender Spender\r\n    @param _value Amount of tokens allowed to be spent\r\n    \"\"\"\r\n    assert _spender != empty(address)\r\n\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_voting_escrow\",\"type\":\"address\"},{\"name\":\"_proxy\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"extend_lock\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voting_escrow\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]}]", "ContractName": "Liquid locker", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e00000000000000000000000090c1f9220d90d3966fbee24045edd73e1d588ad5000000000000000000000000242521ca01f330f050a65ff5b8ebbe92198ae64f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}