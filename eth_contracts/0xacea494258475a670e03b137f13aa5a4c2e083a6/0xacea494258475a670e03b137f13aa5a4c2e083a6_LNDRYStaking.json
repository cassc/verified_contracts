{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: LNDRYstaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract LNDRYStaking is ReentrancyGuard, Ownable {\r\n    IERC20 public lndryToken;\r\n\r\n    struct Tier {\r\n    uint256 minValue; // Minimum value to qualify for this tier\r\n    uint256 maxValue; // Maximum value to qualify for this tier\r\n    uint256 allocation; // Percent of weekly rewards\r\n    uint256 totalStaked;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 tierIndex;\r\n        uint256 stakeTime; // Time when tokens were staked\r\n        uint256 lastUnstakeTime; // Last time an unstake was initiated for cooldown calculation\r\n        bool unstakeInitiated;\r\n        uint256 lastRewardActionTime;\r\n        uint256 amountToUnstake;\r\n        bool fastUnstake;\r\n            uint256 unclaimedRewards; \r\n    }\r\n\r\n\r\n    Tier[] public tiers;\r\n    uint256 public weeklyRewardPool;\r\n    uint256 public lastRewardUpdateTime;\r\n    uint256 private constant PRECISION_FACTOR = 1e18;\r\naddress public feeCollector;\r\n\r\n\r\n    uint256 public regularUnstakeCooldown = 7 days;\r\n    uint256 public fastUnstakeCooldown = 1 days;\r\n    uint256 public regularUnstakeFeePercentage = 100; // 1%\r\n    uint256 public fastUnstakeFeePercentage = 500; // 5%\r\n\r\n    mapping(address => Stake) public stakes; // Maps user address to their stake\r\n    address[] private stakers; // List of all staker addresses for iteration\r\n    event Staked(address indexed user, uint256 amount, uint256 tierIndex);\r\n    event UnstakeInitiated(address indexed user, uint256 amount, bool fastUnstake);\r\n    event Unstaked(address indexed user, uint256 amount, bool fastUnstake);\r\n    event RewardClaimed(address indexed user, uint256 reward);\r\n    event RewardsCompounded(address indexed user, uint256 amount);\r\n\r\n\r\nconstructor(address _lndryTokenAddress, address _initialOwner, address _feeCollector) Ownable(_initialOwner) {\r\n    require(_feeCollector != address(0), \"Invalid fee collector address\");\r\n    lndryToken = IERC20(_lndryTokenAddress);\r\n    feeCollector = _feeCollector;\r\n}\r\n\r\n  function setRegularUnstakeCooldown(uint256 _cooldown) external onlyOwner {\r\n        regularUnstakeCooldown = _cooldown;\r\n    }\r\n\r\n    function setFastUnstakeCooldown(uint256 _cooldown) external onlyOwner {\r\n        fastUnstakeCooldown = _cooldown;\r\n    }\r\n\r\n    function setRegularUnstakeFeePercentage(uint256 _feePercentage) external onlyOwner {\r\n        regularUnstakeFeePercentage = _feePercentage;\r\n    }\r\n\r\n    function setFastUnstakeFeePercentage(uint256 _feePercentage) external onlyOwner {\r\n        fastUnstakeFeePercentage = _feePercentage;\r\n    }\r\n\r\n    function depositRewards(uint256 _amount, uint256[] calldata _allocations) external onlyOwner {\r\n    require(_amount > 0, \"Amount must be greater than 0\");\r\n    require(_allocations.length == tiers.length, \"Allocations length must match tiers length\");\r\n\r\n    uint256 totalAllocation = 0;\r\n    for (uint256 i = 0; i < _allocations.length; i++) {\r\n        totalAllocation += _allocations[i];\r\n    }\r\n    require(totalAllocation == 100, \"Total allocation must be 100%\");\r\n    \r\n    // Before updating the weeklyRewardPool, calculate and update unclaimed rewards for each staker\r\n    for(uint256 i = 0; i < stakers.length; i++) {\r\n        address staker = stakers[i];\r\n        uint256 pendingReward = calculateReward(staker); // Calculate current pending reward\r\n        stakes[staker].unclaimedRewards += pendingReward - stakes[staker].unclaimedRewards; // Update unclaimed rewards\r\n        stakes[staker].lastRewardActionTime = block.timestamp; // Update last action time to now\r\n    }\r\n\r\n    weeklyRewardPool += _amount; // Update the pool with the new amount\r\n    require(lndryToken.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n\r\n    lastRewardUpdateTime = block.timestamp; // Update the reward update time to now\r\n}\r\n\r\n   function emergencyTransferStakedTokens(address to) external onlyOwner nonReentrant {\r\n        require(to != address(0), \"Cannot transfer to the zero address\");\r\n        uint256 contractBalance = lndryToken.balanceOf(address(this));\r\n        require(contractBalance > 0, \"No tokens to transfer\");\r\n        \r\n        require(lndryToken.transfer(to, contractBalance), \"Token transfer failed\");\r\n        \r\n    }\r\n    function stake(uint256 _amount) external nonReentrant {\r\n            require(_amount > 0, \"Cannot stake 0 tokens\");\r\n            Stake storage userStake = stakes[msg.sender];\r\n            userStake.amount += _amount;\r\n            userStake.tierIndex = determineTier(userStake.amount);\r\n            userStake.stakeTime = block.timestamp;\r\n            userStake.lastUnstakeTime = block.timestamp; // Reset on new stake\r\n\r\n            if (!isStaker(msg.sender)) {\r\n                stakers.push(msg.sender);\r\n            }\r\n            recalculateTotalStaked();\r\n\r\n            require(lndryToken.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n            emit Staked(msg.sender, _amount, userStake.tierIndex);\r\n        }\r\nfunction initiateUnstake(uint256 _amount, bool _fastUnstake) external {\r\n    Stake storage userStake = stakes[msg.sender];\r\n    require(_amount > 0 && _amount <= userStake.amount, \"Invalid unstake amount\");\r\n    require(!userStake.unstakeInitiated, \"Unstake already initiated\");\r\n\r\n    // Before initiating the unstake, reset unclaimed rewards to 0\r\n    userStake.unclaimedRewards = 0;\r\n\r\n    userStake.unstakeInitiated = true;\r\n    userStake.amountToUnstake = _amount;\r\n    userStake.fastUnstake = _fastUnstake;\r\n    userStake.lastUnstakeTime = block.timestamp;\r\n\r\n    emit UnstakeInitiated(msg.sender, _amount, _fastUnstake);\r\n}\r\nfunction setFeeCollector(address _feeCollector) external onlyOwner {\r\n    require(_feeCollector != address(0), \"Invalid address\");\r\n    feeCollector = _feeCollector;\r\n}\r\n   function completeUnstake() external nonReentrant {\r\n    Stake storage userStake = stakes[msg.sender];\r\n    require(userStake.unstakeInitiated, \"Unstake not initiated\");\r\n    uint256 cooldown = userStake.fastUnstake ? fastUnstakeCooldown : regularUnstakeCooldown;\r\n    require(block.timestamp >= userStake.lastUnstakeTime + cooldown, \"Cooldown not met\");\r\n\r\n    uint256 feePercentage = userStake.fastUnstake ? fastUnstakeFeePercentage : regularUnstakeFeePercentage;\r\n    uint256 fee = (userStake.amountToUnstake * feePercentage) / 10000;\r\n    uint256 amountAfterFee = userStake.amountToUnstake - fee;\r\n\r\n    userStake.amount -= userStake.amountToUnstake; // Deduct the unstaked amount\r\n    userStake.unstakeInitiated = false; // Reset unstake state\r\n\r\n    // Transfer the unstaked amount after fee to the user\r\n    require(lndryToken.transfer(msg.sender, amountAfterFee), \"Transfer failed\");\r\n\r\n    // Transfer the fee to the fee collector\r\n    require(lndryToken.transfer(feeCollector, fee), \"Fee transfer failed\");\r\n\r\n    emit Unstaked(msg.sender, userStake.amountToUnstake, userStake.fastUnstake);\r\n}\r\n\r\nfunction calculateReward(address _user) public view returns (uint256) {\r\n    Stake memory userStake = stakes[_user];\r\n\r\n\r\n    if (userStake.amount == 0 || tiers.length == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 lastActionTime = (userStake.lastRewardActionTime == 0 || userStake.lastRewardActionTime < lastRewardUpdateTime) ? lastRewardUpdateTime : userStake.lastRewardActionTime;\r\n    uint256 timeElapsed = block.timestamp > lastActionTime ? block.timestamp - lastActionTime : 0;\r\n\r\n    if (timeElapsed > 7 days) {\r\n        timeElapsed = 7 days;\r\n    }\r\n\r\n    // Adjusted calculation to ensure non-zero result for rewardPoolForElapsedPeriod\r\n    uint256 rewardPoolForElapsedPeriod = (weeklyRewardPool * PRECISION_FACTOR * timeElapsed) / (7 days) / PRECISION_FACTOR;\r\n\r\n    uint256 tierReward = rewardPoolForElapsedPeriod * tiers[userStake.tierIndex].allocation / 100;\r\n\r\n    if (tiers[userStake.tierIndex].totalStaked == 0) {\r\n        return 0; // Prevent division by zero\r\n    }\r\n\r\n    uint256 rewardPerShare = (tierReward * PRECISION_FACTOR) / tiers[userStake.tierIndex].totalStaked;\r\n\r\n    uint256 pendingReward = (userStake.amount * rewardPerShare) / PRECISION_FACTOR;\r\n\r\n    // Including unclaimed rewards in the total reward\r\n    uint256 totalReward = pendingReward + userStake.unclaimedRewards;\r\n\r\n    return totalReward;\r\n}\r\n\r\nfunction claimReward() external nonReentrant {\r\n    uint256 reward = calculateReward(msg.sender);\r\n    require(reward > 0, \"No rewards to claim\");\r\n\r\n    require(lndryToken.transfer(msg.sender, reward), \"Transfer failed\");\r\n    Stake storage userStake = stakes[msg.sender];\r\n    userStake.lastRewardActionTime = block.timestamp;\r\n    userStake.unclaimedRewards = 0; // Reset unclaimed rewards to 0\r\n\r\n    emit RewardClaimed(msg.sender, reward);\r\n}\r\n\r\nfunction getUnstakeCooldownLeft(address _user) public view returns (uint256 timeLeft, bool isFastUnstake) {\r\n    Stake memory userStake = stakes[_user];\r\n    if (!userStake.unstakeInitiated) {\r\n        return (0, false); // No unstake initiated, so no cooldown\r\n    }\r\n\r\n    uint256 cooldownEnd;\r\n    if (userStake.fastUnstake) {\r\n        cooldownEnd = userStake.lastUnstakeTime + fastUnstakeCooldown;\r\n    } else {\r\n        cooldownEnd = userStake.lastUnstakeTime + regularUnstakeCooldown;\r\n    }\r\n\r\n    if (block.timestamp >= cooldownEnd) {\r\n        return (0, userStake.fastUnstake); // Cooldown completed\r\n    }\r\n\r\n    return (cooldownEnd - block.timestamp, userStake.fastUnstake); // Time left and type of unstake\r\n}\r\n function addTier(uint256 _minValue, uint256 _maxValue, uint256 _allocation) external onlyOwner {\r\n    require(_minValue < _maxValue, \"minValue must be less than maxValue\");\r\n    Tier memory newTier = Tier({\r\n        minValue: _minValue,\r\n        maxValue: _maxValue,\r\n        allocation: _allocation,\r\n        totalStaked: 0\r\n    });\r\n\r\n    // Find the correct position to insert the new tier\r\n    uint256 position = tiers.length;\r\n    for (uint256 i = 0; i < tiers.length; i++) {\r\n        if (_minValue < tiers[i].minValue) {\r\n            position = i;\r\n            break;\r\n        }\r\n    }\r\n\r\n    // Shift tiers and insert the new tier\r\n    tiers.push(newTier); // Add at the end to increase the array size\r\n    for (uint256 i = tiers.length - 1; i > position; i--) {\r\n        tiers[i] = tiers[i - 1];\r\n    }\r\n    tiers[position] = newTier;\r\n}\r\n   function removeTier(uint256 index) external onlyOwner {\r\n    require(index < tiers.length, \"Invalid tier index\");\r\n\r\n    for (uint256 i = index; i < tiers.length - 1; i++) {\r\n        tiers[i] = tiers[i + 1];\r\n    }\r\n    tiers.pop(); // Remove the last element after shifting\r\n}\r\n\r\n \r\nfunction recalculateAllStakes() internal {\r\n    for (uint256 i = 0; i < stakers.length; i++) {\r\n        address staker = stakers[i];\r\n        Stake storage userStake = stakes[staker];\r\n        uint256 newTierIndex = determineTier(userStake.amount);\r\n        if (newTierIndex != userStake.tierIndex) {\r\n            userStake.tierIndex = newTierIndex;\r\n            // Adjust any additional logic based on the new tier assignment\r\n        }\r\n    }\r\nrecalculateTotalStaked();\r\n}\r\n    function determineTier(uint256 amount) internal view returns (uint256) {\r\n    for (uint256 i = 0; i < tiers.length; i++) {\r\n        if (amount >= tiers[i].minValue && amount <= tiers[i].maxValue) {\r\n            return i;\r\n        }\r\n    }\r\n    revert(\"Amount does not qualify for any tier\");\r\n}\r\n\r\n        function recalculateTotalStaked() internal {\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tiers[i].totalStaked = 0;\r\n        }\r\n\r\n        for (uint256 i = 0; i < stakers.length; i++) {\r\n            address stakerAddress = stakers[i];\r\n            Stake memory userStake = stakes[stakerAddress];\r\n            uint256 tierIndex = userStake.tierIndex;\r\n            tiers[tierIndex].totalStaked += userStake.amount;\r\n        }\r\n    }  \r\n    \r\n    \r\n    function isStaker(address _address) internal view returns (bool) {\r\n        for (uint256 i = 0; i < stakers.length; i++) {\r\n            if (stakers[i] == _address) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function removeStaker(address staker) internal {\r\n        for (uint256 i = 0; i < stakers.length; i++) {\r\n            if (stakers[i] == staker) {\r\n                stakers[i] = stakers[stakers.length - 1];\r\n                stakers.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function compoundRewards() external nonReentrant {\r\n    uint256 reward = calculateReward(msg.sender);\r\n    require(reward > 0, \"No rewards to compound\");\r\n\r\n    Stake storage userStake = stakes[msg.sender];\r\n    userStake.amount += reward; // Add rewards to the staked amount\r\n\r\n    // Recalculate the user's tier based on the new staked amount\r\n    uint256 newTierIndex = determineTier(userStake.amount);\r\n    if (newTierIndex != userStake.tierIndex) {\r\n        userStake.tierIndex = newTierIndex; // Update the user's tier if it has changed\r\n    }\r\n\r\n    recalculateTotalStaked(); // Recalculate the total staked amount in each tier, if necessary\r\n     userStake.unclaimedRewards = 0; // Reset unclaimed rewards to 0\r\n    userStake.lastRewardActionTime = block.timestamp;\r\n    emit RewardsCompounded(msg.sender, reward);\r\n}\r\n\r\n function getNumberOfStakers() public view returns (uint256) {\r\n        return stakers.length;\r\n    }\r\n\r\n    function getTotalAmountStaked() public view returns (uint256 totalStaked) {\r\n        for (uint256 i = 0; i < stakers.length; i++) {\r\n            address stakerAddress = stakers[i];\r\n            totalStaked += stakes[stakerAddress].amount;\r\n        }\r\n    }\r\n    function getTierAPY(uint256 tierIndex) public view returns (uint256) {\r\n    require(tierIndex < tiers.length, \"Invalid tier index\");\r\n\r\n    uint256 rewardsPerWeek = weeklyRewardPool * tiers[tierIndex].allocation / 100;\r\n    uint256 totalStakedInTier = tiers[tierIndex].totalStaked;\r\n\r\n    // Calculate APY for the tier based on rewards earned and total staked amount\r\n    if (totalStakedInTier == 0) {\r\n        return 0; // Avoid division by zero\r\n    }\r\n    return (rewardsPerWeek * 52 * 100) / totalStakedInTier; // Multiply by 52 for annualization\r\n}\r\n  function getUserAPY(address user) public view returns (uint256) {\r\n        Stake memory userStake = stakes[user];\r\n        // Ensure the user has an existing stake\r\n        if (userStake.amount == 0) {\r\n            return 0; // User has no stake, thus APY is 0\r\n        }\r\n        // Determine the user's tier based on their current stake\r\n        uint256 tierIndex = userStake.tierIndex;\r\n        // Fetch and return the APY for the determined tier\r\n        return getTierAPY(tierIndex);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lndryTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fastUnstake\",\"type\":\"bool\"}],\"name\":\"UnstakeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fastUnstake\",\"type\":\"bool\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyTransferStakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUnstakeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUnstakeFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"}],\"name\":\"getTierAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnstakeCooldownLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFastUnstake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fastUnstake\",\"type\":\"bool\"}],\"name\":\"initiateUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lndryToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularUnstakeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularUnstakeFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setFastUnstakeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFastUnstakeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setRegularUnstakeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setRegularUnstakeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstakeInitiated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToUnstake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fastUnstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LNDRYStaking", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000613577bfea8ba6571f6b7a86716d04c80a3fbeb4000000000000000000000000f572ad8d1049163d527cbbccc7045f0b39346c1b000000000000000000000000f572ad8d1049163d527cbbccc7045f0b39346c1b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46d26aa006f62c8cdc51223bece0b4991723ff247a2f35ebe3c7beb816934c69"}