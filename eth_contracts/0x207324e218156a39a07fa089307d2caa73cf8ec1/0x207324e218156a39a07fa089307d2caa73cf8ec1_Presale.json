{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract Presale is Ownable {\r\n\r\n    // Receiver Of Donation\r\n    address public presaleReceiver = 0x780eFB9f2F767b836AB2E6f41331e1F774261275;\r\n\r\n    // Address => User\r\n    mapping ( address => uint256 ) public donors;\r\n\r\n    // List Of All Donors\r\n    address[] private _allDonors;\r\n\r\n    // Total Amount Donated\r\n    uint256 private _totalDonated;\r\n\r\n    // sale has ended\r\n    bool public hasStarted;\r\n\r\n    constructor() {\r\n        hasStarted = true;\r\n    }\r\n\r\n    function startSale() external onlyOwner {\r\n        hasStarted = true;\r\n    }\r\n\r\n    function endSale() external onlyOwner {\r\n        hasStarted = false;\r\n    }\r\n\r\n    function withdraw(address token_, uint256 amount) external onlyOwner {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token_.call(abi.encodeWithSelector(0xa9059cbb, msg.sender, amount));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        (bool s1,) = payable(presaleReceiver).call{value: address(this).balance}(\"\");\r\n        require(s1, 'Failure On ETH Transfer');\r\n    }\r\n\r\n    function setPresaleReceiver(address newReceiver) external onlyOwner {\r\n        require(newReceiver != address(0), 'Zero Address');\r\n        presaleReceiver = newReceiver;\r\n    }\r\n\r\n    function donateETH() external payable {\r\n        _handleETH();\r\n        _processETH(msg.sender, msg.value);\r\n    }\r\n\r\n    receive() external payable {\r\n        _handleETH();\r\n        _processETH(msg.sender, msg.value);\r\n    }\r\n\r\n    function donated(address user) external view returns(uint256) {\r\n        return donors[user];\r\n    }\r\n\r\n    function allDonors() external view returns (address[] memory) {\r\n        return _allDonors;\r\n    }\r\n\r\n    function allDonorsAndDonationAmounts() external view returns (address[] memory, uint256[] memory) {\r\n        uint len = _allDonors.length;\r\n        uint256[] memory amounts = new uint256[](len);\r\n        for (uint i = 0; i < len;) {\r\n            amounts[i] = donors[_allDonors[i]];\r\n            unchecked { ++i; }\r\n        }\r\n        return (_allDonors, amounts);\r\n    }\r\n\r\n    function paginateDonorsAndDonationAmounts(uint256 start, uint256 end) external view returns (address[] memory, uint256[] memory) {\r\n        if (end > _allDonors.length) {\r\n            end = _allDonors.length;\r\n        }\r\n        uint256 len = end - start;\r\n        address[] memory addresses = new address[](len);\r\n        uint256[] memory amounts = new uint256[](len);\r\n        for (uint i = start; i < end;) {\r\n            addresses[i - start] = _allDonors[i];\r\n            amounts[i - start] = donors[_allDonors[i]];\r\n            unchecked { ++i; }\r\n        }\r\n        return (addresses, amounts);\r\n    }\r\n\r\n    function donorAtIndex(uint256 index) external view returns (address) {\r\n        return _allDonors[index];\r\n    }\r\n\r\n    function numberOfDonors() external view returns (uint256) {\r\n        return _allDonors.length;\r\n    }\r\n\r\n    function totalDonated() external view returns (uint256) {\r\n        return _totalDonated;\r\n    }\r\n\r\n    function _processETH(address user, uint amount) internal {\r\n        require(\r\n            hasStarted,\r\n            'Sale Has Not Started'\r\n        );\r\n\r\n        // add to donor list if first donation\r\n        if (donors[user] == 0) {\r\n            _allDonors.push(user);\r\n        }\r\n\r\n        // increment amounts donated\r\n        unchecked {\r\n            donors[user] += amount;\r\n            _totalDonated += amount;\r\n        }\r\n    }\r\n\r\n    function _handleETH() internal {\r\n        (bool s1,) = payable(presaleReceiver).call{value: address(this).balance}(\"\");\r\n        require(s1, 'Failure On ETH Transfer');\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allDonors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDonorsAndDonationAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"donorAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfDonors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"paginateDonorsAndDonationAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setPresaleReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://304e0f552f78b63c4591c7fec04ff70e549026b35fdaf9c807e75358bef0b469"}