{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/Control/IOwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * \\r\\n * parent for ownable contracts\\r\\n */\\r\\ninterface IOwnableV2 {\\r\\n  event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n  function owner() external view returns (address);\\r\\n  function transferOwnership(address newOwner_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IPausable is IOwnableV2 {\\r\\n  function paused() external view returns (bool);\\r\\n  function setPaused(bool value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/OwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Context } from \\\"../library/Context.sol\\\";\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * \\r\\n * parent for ownable contracts\\r\\n */\\r\\nabstract contract OwnableV2 is IOwnableV2, Context {\\r\\n  constructor(address owner_) {\\r\\n    _owner_ = owner_;\\r\\n    emit OwnershipTransferred(address(0), _owner());\\r\\n  }\\r\\n\\r\\n  address internal _owner_;\\r\\n\\r\\n  function _owner() internal virtual view returns (address) {\\r\\n    return _owner_;\\r\\n  }\\r\\n\\r\\n  function owner() external virtual override view returns (address) {\\r\\n    return _owner();\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner() == _msgSender(), \\\"Only the owner can execute this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _transferOwnership(address newOwner_) internal virtual onlyOwner {\\r\\n    // keep track of old owner for event\\r\\n    address oldOwner = _owner();\\r\\n\\r\\n    // set the new owner\\r\\n    _owner_ = newOwner_;\\r\\n\\r\\n    // emit event about ownership change\\r\\n    emit OwnershipTransferred(oldOwner, _owner());\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner_) external virtual override onlyOwner {\\r\\n    _transferOwnership(newOwner_);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IPausable } from \\\"./IPausable.sol\\\";\\r\\nimport { OwnableV2 } from \\\"./OwnableV2.sol\\\";\\r\\n\\r\\nabstract contract Pausable is IPausable, OwnableV2 {\\r\\n  bool internal _paused;\\r\\n\\r\\n  modifier onlyNotPaused() {\\r\\n    require(!_paused, \\\"Contract is paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function paused() external view override returns (bool) {\\r\\n    return _paused;\\r\\n  }\\r\\n\\r\\n  function _setPaused(bool value) internal virtual {\\r\\n    _paused = value;\\r\\n  }\\r\\n\\r\\n  function setPaused(bool value) external override onlyOwner {\\r\\n    _setPaused(value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Fees/FeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IFeeCollector } from \\\"./IFeeCollector.sol\\\";\\r\\nimport { Address } from \\\"../library/Address.sol\\\";\\r\\nimport { IFees } from \\\"./IFees.sol\\\";\\r\\nimport { OwnableV2 } from \\\"../Control/OwnableV2.sol\\\";\\r\\n\\r\\nabstract contract FeeCollector is IFeeCollector, OwnableV2 {\\r\\n  using Address for address payable;\\r\\n\\r\\n  IFees internal _fees;\\r\\n\\r\\n  uint256 internal _feePercentDenominator = 10 ** 18;\\r\\n\\r\\n  modifier takeFee(string memory feeType) {\\r\\n    bool exempt = _fees.isAddressExemptFromFees(_msgSender());\\r\\n    require(exempt || _fees.getFeeAmountForType(feeType) == msg.value, \\\"Incorrect fee\\\");\\r\\n    if (!exempt)\\r\\n      payable(address(_fees)).sendValue(msg.value);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function feesContract() external view override returns (address) {\\r\\n    return address(_fees);\\r\\n  }\\r\\n\\r\\n  function _setFeesContract(address contractAddress) internal virtual {\\r\\n    _fees = IFees(contractAddress);\\r\\n  }\\r\\n\\r\\n  function setFeesContract(address contractAddress) external override onlyOwner {\\r\\n    _setFeesContract(contractAddress);\\r\\n  }\\r\\n\\r\\n  function feePercentDenominator() external view override returns (uint256) {\\r\\n    return _feePercentDenominator;\\r\\n  }\\r\\n\\r\\n  function setFeePercentDenominator(uint256 value) external virtual override onlyOwner {\\r\\n    _feePercentDenominator = value;\\r\\n  }\\r\\n\\r\\n  function _getFeePercentInRange(\\r\\n    string memory minFeeType,\\r\\n    string memory maxFeeType,\\r\\n    uint256 input,\\r\\n    uint256 percent\\r\\n  ) internal virtual view returns (uint256) {\\r\\n    uint256 feeMin = _fees.getFeeAmountForType(minFeeType);\\r\\n    uint256 feeMax = _fees.getFeeAmountForType(maxFeeType);\\r\\n\\r\\n    uint256 feeAmount = feeMin;\\r\\n    feeAmount += (feeMax - feeMin) * percent / _feePercentDenominator;\\r\\n\\r\\n    return input * feeAmount / _feePercentDenominator;\\r\\n  }\\r\\n\\r\\n  function getFeePercentInRange(\\r\\n    string memory minFeeType,\\r\\n    string memory maxFeeType,\\r\\n    uint256 input,\\r\\n    uint256 percent\\r\\n  ) external view override returns (uint256) {\\r\\n    return _getFeePercentInRange(minFeeType, maxFeeType, input, percent);\\r\\n  }\\r\\n\\r\\n  function _takeFeePercentInRange(\\r\\n    string memory minFeeType,\\r\\n    string memory maxFeeType,\\r\\n    uint256 amount,\\r\\n    uint256 percent\\r\\n  ) internal virtual {\\r\\n    require(\\r\\n      _getFeePercentInRange(minFeeType, maxFeeType, amount, percent) == msg.value,\\r\\n      \\\"Incorrect fee\\\"\\r\\n    );\\r\\n\\r\\n    if (!_fees.isAddressExemptFromFees(_msgSender()))\\r\\n      payable(address(_fees)).sendValue(msg.value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Fees/IFeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"../Control/IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IFeeCollector is IOwnableV2 {\\r\\n  function feesContract() external view returns (address);\\r\\n  function setFeesContract(address contractAddress_) external;\\r\\n  function feePercentDenominator() external view returns (uint256);\\r\\n  function setFeePercentDenominator(uint256 value) external;\\r\\n  function getFeePercentInRange(\\r\\n    string memory minFeeType,\\r\\n    string memory maxFeeType,\\r\\n    uint256 input,\\r\\n    uint256 percent\\r\\n  ) external view returns (uint256 output);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Fees/IFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IGovernable } from \\\"../Governance/IGovernable.sol\\\";\\r\\nimport { IPausable } from \\\"../Control/IPausable.sol\\\";\\r\\n\\r\\ninterface IFees is IGovernable, IPausable {\\r\\n  function getFeeAmountForType(string memory feeType) external view returns (uint256);\\r\\n  function setFeeAmountForType(string memory feeType, uint256 amount) external;\\r\\n  function setAddressExemptFromFees(address account, bool value) external;\\r\\n  function isAddressExemptFromFees(address account) external view returns (bool);\\r\\n  function feesDistributed() external view returns (uint256 total, uint256 treasury, uint256 staking);\\r\\n  function treasuryFeeAddress() external view returns (address);\\r\\n  function setTreasuryFeeAddress(address payable value) external;\\r\\n  function stakingFeeAddress() external view returns (address);\\r\\n  function setStakingFeeAddress(address payable value) external;\\r\\n  function getFees() external view returns (uint16 treasuryFee, uint16 stakingFee);\\r\\n  function setFees(uint16 treasuryFee, uint16 stakingFee) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Governance/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IGovernable } from \\\"./IGovernable.sol\\\";\\r\\nimport { OwnableV2 } from \\\"../Control/OwnableV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Governable\\r\\n * \\r\\n * parent for governable contracts\\r\\n */\\r\\nabstract contract Governable is IGovernable, OwnableV2 {\\r\\n  constructor(address owner_, address governor_) OwnableV2(owner_) {\\r\\n    _governor_ = governor_;\\r\\n    emit GovernorshipTransferred(address(0), _governor());\\r\\n  }\\r\\n\\r\\n  address internal _governor_;\\r\\n\\r\\n  function _governor() internal view returns (address) {\\r\\n    return _governor_;\\r\\n  }\\r\\n\\r\\n  function governor() external view override returns (address) {\\r\\n    return _governor();\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernor() {\\r\\n    require(_governor() == _msgSender(), \\\"Only the governor can execute this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // not currently used - but here it is in case we want this\\r\\n  // modifier onlyOwnerOrGovernor() {\\r\\n  //   require(_owner() == _msgSender() || _governor() == _msgSender(), \\\"Only the owner or governor can execute this function\\\");\\r\\n  //   _;\\r\\n  // }\\r\\n\\r\\n  function _transferGovernorship(address newGovernor) internal virtual {\\r\\n    // keep track of old owner for event\\r\\n    address oldGovernor = _governor();\\r\\n\\r\\n    // set the new owner\\r\\n    _governor_ = newGovernor;\\r\\n\\r\\n    // emit event about ownership change\\r\\n    emit GovernorshipTransferred(oldGovernor, _governor());\\r\\n  }\\r\\n\\r\\n  function transferGovernorship(address newGovernor) external override onlyOwner {\\r\\n    _transferGovernorship(newGovernor);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Governance/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"../Control/IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IGovernable is IOwnableV2 {\\r\\n  event GovernorshipTransferred(address indexed oldGovernor, address indexed newGovernor);\\r\\n\\r\\n  function governor() external view returns (address);\\r\\n  function transferGovernorship(address newGovernor) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/IDCounter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IIDCounter } from \\\"./IIDCounter.sol\\\";\\r\\n\\r\\nabstract contract IDCounter is IIDCounter {\\r\\n  uint256 internal _count;\\r\\n\\r\\n  function count() external view override returns (uint256) {\\r\\n    return _count;\\r\\n  }\\r\\n\\r\\n  function _next() internal virtual returns (uint256) {\\r\\n    return _count++;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/IIDCounter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IIDCounter {\\r\\n  function count() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Tokens/ITradingTokenFactoryV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITradingTokenFactoryV1 {\\n  function createToken(\\n    string memory name_, \\n    string memory symbol_, \\n    uint8 decimals_,\\n    uint256 totalSupply_,\\n    address owner_,\\n    uint256[] memory tokenData) external returns(address);\\n}\\n\"\r\n    },\r\n    \"src/Tokens/ITradingTokenManagerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IGovernable } from \\\"../Governance/IGovernable.sol\\\";\\nimport { IPausable } from \\\"../Control/IPausable.sol\\\";\\nimport { IIDCounter } from \\\"../IIDCounter.sol\\\";\\nimport { IFeeCollector } from \\\"../Fees/IFeeCollector.sol\\\";\\n\\ninterface ITradingTokenManagerV1 is IGovernable, IPausable, IIDCounter, IFeeCollector {\\n  event CreatedToken(uint40 indexed id, address tokenAddress);\\n\\n  function factory() external view returns (address);\\n  function setFactory(address value) external;\\n  function createToken(\\n    string memory name_, \\n    string memory symbol_, \\n    uint8 decimals_,\\n    uint256 totalSupply_,\\n    uint256[] memory tokenData\\n  ) external payable;\\n  function getTokenDataByAddress(address address_) external view returns (\\n    address tokenAddress_,\\n    string memory name_, \\n    string memory symbol_, \\n    uint8 decimals_,\\n    uint256 totalSupply_,\\n    uint256 totalBalance_,\\n    uint256 launchedAt_,\\n    address owner_,\\n    address dexPair_\\n  );\\n  function getTokenDataById(uint40 id) external view returns (\\n    address tokenAddress_,\\n    string memory name_, \\n    string memory symbol_, \\n    uint8 decimals_,\\n    uint256 totalSupply_,\\n    uint256 totalBalance_,\\n    uint256 launchedAt_,\\n    address owner_,\\n    address dexPair_\\n  );\\n}\\n\"\r\n    },\r\n    \"src/Tokens/ITradingTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITradingTokenV1 {\\n  event SwapTokensForETH(\\n    uint256 amountIn,\\n    address[] path\\n  );\\n  function launch() external payable;\\n  function getTokenData() external view returns (\\n    string memory name_, \\n    string memory symbol_, \\n    uint8 decimals_,\\n    uint256 totalSupply_,\\n    uint256 totalBalance_,\\n    uint256 launchedAt,\\n    address owner_,\\n    address dexPair\\n  );\\n}\\n\"\r\n    },\r\n    \"src/Tokens/TradingTokenManagerV1..sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITradingTokenManagerV1 } from \\\"./ITradingTokenManagerV1.sol\\\";\\r\\nimport { Address } from \\\"../library/Address.sol\\\";\\r\\nimport { Governable } from \\\"../Governance/Governable.sol\\\";\\r\\nimport { Pausable } from \\\"../Control/Pausable.sol\\\";\\r\\nimport { IDCounter } from \\\"../IDCounter.sol\\\";\\r\\nimport { FeeCollector } from \\\"../Fees/FeeCollector.sol\\\";\\r\\nimport { ITradingTokenV1 } from \\\"./ITradingTokenV1.sol\\\";\\r\\nimport { ITradingTokenFactoryV1 } from \\\"./ITradingTokenFactoryV1.sol\\\";\\r\\n\\r\\ncontract TradingTokenManagerV1 is ITradingTokenManagerV1, Governable, Pausable, IDCounter, FeeCollector {\\r\\n  using Address for address payable;\\r\\n\\r\\n  /** @dev set the deployer as both owner and governor initially */\\r\\n  constructor(address factoryAddress, address feesAddress) Governable(_msgSender(), _msgSender()) {\\r\\n    _factory = ITradingTokenFactoryV1(factoryAddress);\\r\\n    _setFeesContract(feesAddress);\\r\\n  }\\r\\n\\r\\n  ITradingTokenFactoryV1 internal _factory;\\r\\n\\r\\n  mapping(uint40 => ITradingTokenV1) private _tokens;\\r\\n  mapping(address => uint40) private _tokenAddressMap;\\r\\n  \\r\\n  function factory() external view override returns (address) {\\r\\n    return address(_factory);\\r\\n  }\\r\\n\\r\\n  function setFactory(address value) external virtual override onlyOwner {\\r\\n    _factory = ITradingTokenFactoryV1(value);\\r\\n  }\\r\\n\\r\\n  function createToken(\\r\\n    string memory name_, \\r\\n    string memory symbol_, \\r\\n    uint8 decimals_,\\r\\n    uint256 totalSupply_,\\r\\n    uint256[] memory tokenData\\r\\n  ) external payable virtual override onlyNotPaused takeFee(\\\"DeployStandardToken\\\") {\\r\\n    uint40 id = uint40(_next());\\r\\n\\r\\n    _tokens[id] = ITradingTokenV1(\\r\\n      _factory.createToken(\\r\\n        name_, \\r\\n        symbol_, \\r\\n        decimals_,\\r\\n        totalSupply_,\\r\\n        _msgSender(),\\r\\n        tokenData\\r\\n      )\\r\\n    );\\r\\n\\r\\n    address tokenAddress = address(_tokens[id]);\\r\\n    _tokenAddressMap[tokenAddress] = id;\\r\\n    emit CreatedToken(id, tokenAddress);\\r\\n  }\\r\\n\\r\\n  function _getTokenDataById(uint40 id) internal virtual view returns (\\r\\n    address tokenAddress_,\\r\\n    string memory name_, \\r\\n    string memory symbol_, \\r\\n    uint8 decimals_,\\r\\n    uint256 totalSupply_,\\r\\n    uint256 totalBalance_,\\r\\n    uint256 launchedAt_,\\r\\n    address owner_,\\r\\n    address dexPair_\\r\\n  ){\\r\\n    (\\r\\n      name_, \\r\\n      symbol_, \\r\\n      decimals_,\\r\\n      totalSupply_,\\r\\n      totalBalance_,\\r\\n      launchedAt_,\\r\\n      owner_,\\r\\n      dexPair_\\r\\n    ) = _tokens[id].getTokenData();\\r\\n\\r\\n    tokenAddress_ = address(_tokens[id]);\\r\\n  }\\r\\n\\r\\n  function getTokenDataById(uint40 id) external override view returns (\\r\\n    address tokenAddress_,\\r\\n    string memory name_, \\r\\n    string memory symbol_, \\r\\n    uint8 decimals_,\\r\\n    uint256 totalSupply_,\\r\\n    uint256 totalBalance_,\\r\\n    uint256 launchedAt_,\\r\\n    address owner_,\\r\\n    address dexPair_\\r\\n  ){\\r\\n    return _getTokenDataById(id);\\r\\n  }\\r\\n\\r\\n  function getTokenDataByAddress(address address_) external override view returns (\\r\\n    address tokenAddress_,\\r\\n    string memory name_, \\r\\n    string memory symbol_, \\r\\n    uint8 decimals_,\\r\\n    uint256 totalSupply_,\\r\\n    uint256 totalBalance_,\\r\\n    uint256 launchedAt_,\\r\\n    address owner_,\\r\\n    address dexPair_\\r\\n  ){\\r\\n    return _getTokenDataById(_tokenAddressMap[address_]);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"id\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CreatedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenData\",\"type\":\"uint256[]\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"minFeeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"maxFeeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"getFeePercentInRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getTokenDataByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexPair_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"id\",\"type\":\"uint40\"}],\"name\":\"getTokenDataById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexPair_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFeePercentDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setFeesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TradingTokenManagerV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d638f8252d271f62a70dc2a4488cc8def4d7ca4e0000000000000000000000007426a59fd00fb99bf066d45e800008e27b9d1561", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}