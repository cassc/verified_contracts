{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ConsensusBridgeDChain {\r\n    address private validatorConsensusGovernanceAccountAddress;\r\n    address private validatorConsensusAlgorythmAccountAddress;\r\n\r\n    event Deposit(address indexed sender, address tokenAddress, uint256 amount);\r\n    event Redeem(address indexed user, address tokenAddress, uint256 amount, bytes32 hash);\r\n\r\n    constructor(address validatorConsensusAlgorythmAccountAddress_) {\r\n        validatorConsensusGovernanceAccountAddress = msg.sender;\r\n        validatorConsensusAlgorythmAccountAddress = validatorConsensusAlgorythmAccountAddress_;\r\n    }\r\n\r\n    mapping (bytes32 => bool) redeemed;\r\n\r\n    receive() external payable {\r\n        revert(\"cannot send eth directly\");\r\n    }\r\n\r\n    function deposit() external payable {\r\n        emit Deposit(msg.sender, address(0), msg.value);\r\n    }\r\n\r\n    function depositForUser(address user) external payable {\r\n        emit Deposit(user, address(0), msg.value);\r\n    }\r\n\r\n    function depositToken(address tokenAddress, uint256 amount) public {\r\n        // Ensure the token address is not zero\r\n        require(tokenAddress != address(0), \"Token address cannot be zero\");\r\n\r\n        // Transfer tokens from the sender to this contract\r\n        bool sent = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\r\n        require(sent, \"Token transfer failed\");\r\n\r\n        // Emit a deposit event\r\n        emit Deposit(msg.sender, tokenAddress, amount);\r\n    }\r\n\r\n    function depositTokenForUser(address tokenAddress, address user, uint256 amount) public {\r\n        // Ensure the token address is not zero\r\n        require(tokenAddress != address(0), \"Token address cannot be zero\");\r\n\r\n        // Transfer tokens from the sender to this contract\r\n        bool sent = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\r\n        require(sent, \"Token transfer failed\");\r\n\r\n        // Emit a deposit event\r\n        emit Deposit(user, tokenAddress, amount);\r\n    }\r\n\r\n\r\n    function redeem(address user, address tokenAddress, uint256 amount, bytes32 hash) public onlyValidatorConsensusAlgorythmAccountAddress {\r\n        require(!redeemed[hash], \"Redeem hash already used\");\r\n        redeemed[hash] = true;\r\n\r\n        if (tokenAddress == address(0)) {\r\n            payable(user).transfer(amount);\r\n        } else {\r\n            IERC20(tokenAddress).transfer(user, amount);\r\n        }        \r\n\r\n        emit Redeem(user, tokenAddress, amount, hash);\r\n    }\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setValidatorConsensusAlgorythmAccountAddress(address validatorConsensusAlgorythmAccountAddress_) public onlyValidatorConsensusGovernanceAccountAddress {\r\n        validatorConsensusAlgorythmAccountAddress = validatorConsensusAlgorythmAccountAddress_;\r\n    }\r\n\r\n    function transferOwnership(address newGovernanceAccountAddress) public onlyValidatorConsensusGovernanceAccountAddress {\r\n        require(newGovernanceAccountAddress != address(0), \"invalid address\");\r\n        validatorConsensusGovernanceAccountAddress = newGovernanceAccountAddress;\r\n    }\r\n\r\n    modifier onlyValidatorConsensusGovernanceAccountAddress() {\r\n        require(msg.sender == validatorConsensusGovernanceAccountAddress, \"access denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidatorConsensusAlgorythmAccountAddress() {\r\n        require(msg.sender == validatorConsensusAlgorythmAccountAddress, \"access denied\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorConsensusAlgorythmAccountAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositForUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokenForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorConsensusAlgorythmAccountAddress_\",\"type\":\"address\"}],\"name\":\"setValidatorConsensusAlgorythmAccountAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernanceAccountAddress\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConsensusBridgeDChain", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a606d12df4c107d96c20d6ec93dcf304847ef423", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e17302a59790218e226e7333d0b12876f4a9ea5e1d1a67d4b216fba89298afb"}