{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ConveyorRouterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"./ConveyorErrors.sol\\\";\\nimport \\\"../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/libraries/token/SafeERC20.sol\\\";\\nimport {UniswapV3Callback} from \\\"./UniswapV3Callback.sol\\\";\\nimport {UniswapV2Callback} from \\\"./UniswapV2Callback.sol\\\";\\nimport {GenericMulticall} from \\\"./GenericMulticall.sol\\\";\\n\\ninterface IConveyorMulticall {\\n    function executeMulticall(\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        uint256 amountIn,\\n        address receiver\\n    ) external;\\n\\n    function executeGenericMulticall(ConveyorRouterV1.SwapAggregatorGenericMulticall calldata genericMulticall)\\n        external;\\n}\\n\\n/// @title ConveyorRouterV1\\n/// @author 0xKitsune, 0xOsiris, Conveyor Labs\\n/// @notice Multicall contract for token Swaps.\\ncontract ConveyorRouterV1 {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable CONVEYOR_MULTICALL;\\n    address public immutable WETH;\\n\\n    address owner;\\n    address tempOwner;\\n\\n    /**\\n     * @notice Event that is emitted when a token to token swap has filled successfully.\\n     *\\n     */\\n    event Swap(\\n        address indexed tokenIn, uint256 amountIn, address indexed tokenOut, uint256 amountOut, address indexed receiver\\n    );\\n\\n    /**\\n     * @notice Event that is emitted when a token to ETH swap has filled successfully.\\n     *\\n     */\\n    event SwapExactTokenForEth(address indexed tokenIn, uint256 amountIn, uint256 amountOut, address indexed receiver);\\n\\n    /**\\n     * @notice Event that is emitted when a ETH to token swap has filled successfully.\\n     *\\n     */\\n    event SwapExactEthForToken(uint256 amountIn, address indexed tokenOut, uint256 amountOut, address indexed receiver);\\n\\n    /**\\n     * @notice Event that is emitted when a referral token swap has filled successfully\\n     *\\n     */\\n    event Referral(address indexed referrer, address indexed receiver, uint256 referralFee);\\n\\n    /**\\n     * @notice Event that is emitted when ETH is withdrawn from the contract\\n     *\\n     */\\n    event Withdraw(address indexed receiver, uint256 amount);\\n\\n    ///@notice Modifier function to only allow the owner of the contract to call specific functions\\n    ///@dev Functions with onlyOwner: withdraw\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert MsgSenderIsNotOwner();\\n        }\\n\\n        _;\\n    }\\n\\n    ///@dev Deploys the ConveyorSwapExecutor contract.\\n    ///@param _weth Address of Wrapped Native Asset.\\n    constructor(address _weth) {\\n        require(_weth != address(0), \\\"WETH address is zero\\\");\\n        CONVEYOR_MULTICALL = address(new ConveyorMulticall(address(this)));\\n        WETH = _weth;\\n        owner = tx.origin;\\n    }\\n\\n    /// @notice SwapAggregatorMulticall struct for token Swaps.\\n    /// @param zeroForOneBitmap for zeroForOne bool along the swap calls.\\n    /// @param callTypeBitmap determines the call type being executed.\\n    /// @param toAddressBitmap for toAddress address along the swap calls.\\n    /// @param feeBitmap for uniV2 custom fee's along the swap calls.\\n    /// @param tokenInDestination Address to send tokenIn to.\\n    /// @param calls Array of calls to be executed.\\n    struct SwapAggregatorMulticall {\\n        uint24 zeroForOneBitmap;\\n        uint40 callTypeBitmap;\\n        uint64 toAddressBitmap;\\n        uint128 feeBitmap;\\n        address tokenInDestination;\\n        Call[] calls;\\n    }\\n\\n    /// @notice Gas optimized Multicall struct\\n    struct SwapAggregatorGenericMulticall {\\n        address tokenInDestination;\\n        Call[] calls;\\n    }\\n\\n    /// @notice Call struct for token Swaps.\\n    /// @param target Address to call.\\n    /// @param callData Data to call.\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    /// @notice ReferralInfo struct for token Swaps.\\n    /// @param referrer Address of referrer.\\n    /// @param referralFee Referral fee.\\n    struct ReferralInfo {\\n        address referrer;\\n        uint256 referralFee;\\n    }\\n\\n    /// @notice Swap tokens for tokens.\\n    /// @param tokenIn Address of token to swap.\\n    /// @param amountIn Amount of tokenIn to swap.\\n    /// @param tokenOut Address of token to receive.\\n    /// @param amountOutMin Minimum amount of tokenOut to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactTokenForToken(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        ///@notice Transfer tokenIn from msg.sender to tokenInDestination address.\\n        IERC20(tokenIn).transferFrom(msg.sender, swapAggregatorMulticall.tokenInDestination, amountIn);\\n\\n        ///@notice Get tokenOut balance of msg.sender.\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n        ///@notice Calculate tokenOut amount required.\\n        uint256 tokenOutAmountRequired = balanceBefore + amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeMulticall(swapAggregatorMulticall, amountIn, msg.sender);\\n\\n        uint256 balanceAfter = IERC20(tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Check if tokenOut balance of msg.sender is sufficient.\\n        if (balanceAfter < tokenOutAmountRequired) {\\n            revert InsufficientOutputAmount(tokenOutAmountRequired - balanceAfter, amountOutMin);\\n        }\\n\\n        ///@notice Emit Swap event.\\n        emit Swap(tokenIn, amountIn, tokenOut, balanceAfter - balanceBefore, msg.sender);\\n    }\\n\\n    /// @notice Swap tokens for tokens.\\n    /// @param tokenIn Address of token to swap.\\n    /// @param amountIn Amount of tokenIn to swap.\\n    /// @param tokenOut Address of token to receive.\\n    /// @param amountOutMin Minimum amount of tokenOut to receive.\\n    /// @param genericMulticall Multicall to be executed.\\n    function swapExactTokenForTokenOptimized(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        SwapAggregatorGenericMulticall calldata genericMulticall\\n    ) public payable {\\n        ///@notice Transfer tokenIn from msg.sender to tokenInDestination address.\\n        IERC20(tokenIn).transferFrom(msg.sender, genericMulticall.tokenInDestination, amountIn);\\n\\n        ///@notice Get tokenOut balance of msg.sender.\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n        ///@notice Calculate tokenOut amount required.\\n        uint256 tokenOutAmountRequired = balanceBefore + amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeGenericMulticall(genericMulticall);\\n\\n        uint256 balanceAfter = IERC20(tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Check if tokenOut balance of msg.sender is sufficient.\\n        if (balanceAfter < tokenOutAmountRequired) {\\n            revert InsufficientOutputAmount(tokenOutAmountRequired - balanceAfter, amountOutMin);\\n        }\\n\\n        ///@notice Emit Swap event.\\n        emit Swap(tokenIn, amountIn, tokenOut, balanceAfter - balanceBefore, msg.sender);\\n    }\\n\\n    /// @notice Swap tokens for tokens with referral.\\n    /// @param tokenIn Address of token to swap.\\n    /// @param amountIn Amount of tokenIn to swap.\\n    /// @param tokenOut Address of token to receive.\\n    /// @param amountOutMin Minimum amount of tokenOut to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    /// @param referralInfo Referral information.\\n    function swapExactTokenForTokenWithReferral(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        ReferralInfo calldata referralInfo\\n    ) public payable {\\n        uint256 referralFee = referralInfo.referralFee;\\n        address referrer = referralInfo.referrer;\\n\\n        ///@notice Transfer referral fee to referrer.\\n        if (referrer != address(0) && referralFee <= msg.value) {\\n            /// @dev The remaining amount is stored in the contract for withdrawal.\\n            _safeTransferETH(referralInfo.referrer, referralFee);\\n        } else {\\n            revert InvalidReferral();\\n        }\\n\\n        ///@notice Swap tokens for tokens.\\n        swapExactTokenForToken(tokenIn, amountIn, tokenOut, amountOutMin, swapAggregatorMulticall);\\n\\n        ///@notice Emit Referral event.\\n        emit Referral(referrer, msg.sender, referralFee);\\n    }\\n\\n    /// @notice Swap ETH for tokens.\\n    /// @param tokenOut Address of token to receive.\\n    /// @param amountOutMin Minimum amount of tokenOut to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactEthForToken(\\n        address tokenOut,\\n        uint128 amountOutMin,\\n        uint128 protocolFee,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        if (protocolFee > msg.value) {\\n            revert InsufficientMsgValue();\\n        }\\n\\n        ///@notice Cache the amountIn to save gas.\\n        uint256 amountIn = msg.value - protocolFee;\\n\\n        ///@notice Deposit the msg.value-protocolFee into WETH.\\n        _depositEth(amountIn, WETH);\\n\\n        ///@notice Transfer WETH from WETH to tokenInDestination address.\\n        IERC20(WETH).transfer(swapAggregatorMulticall.tokenInDestination, amountIn);\\n\\n        ///@notice Get tokenOut balance of msg.sender.\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Calculate tokenOut amount required.\\n        uint256 tokenOutAmountRequired = balanceBefore + amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeMulticall(swapAggregatorMulticall, amountIn, msg.sender);\\n\\n        ///@notice Get tokenOut balance of msg.sender after multicall execution.\\n        uint256 balanceAfter = IERC20(tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Revert if tokenOut balance of msg.sender is insufficient.\\n        if (balanceAfter < tokenOutAmountRequired) {\\n            revert InsufficientOutputAmount(tokenOutAmountRequired - balanceAfter, amountOutMin);\\n        }\\n\\n        ///@notice Emit SwapExactEthForToken event.\\n        emit SwapExactEthForToken(msg.value, tokenOut, balanceAfter - balanceBefore, msg.sender);\\n    }\\n\\n    /// @notice Swap ETH for tokens.\\n    /// @param tokenOut Address of token to receive.\\n    /// @param amountOutMin Minimum amount of tokenOut to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactEthForTokenOptimized(\\n        address tokenOut,\\n        uint128 amountOutMin,\\n        uint128 protocolFee,\\n        SwapAggregatorGenericMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        if (protocolFee > msg.value) {\\n            revert InsufficientMsgValue();\\n        }\\n\\n        ///@notice Cache the amountIn to save gas.\\n        uint256 amountIn = msg.value - protocolFee;\\n\\n        ///@notice Deposit the msg.value-protocolFee into WETH.\\n        _depositEth(amountIn, WETH);\\n\\n        ///@notice Transfer WETH from WETH to tokenInDestination address.\\n        IERC20(WETH).transfer(swapAggregatorMulticall.tokenInDestination, amountIn);\\n\\n        ///@notice Get tokenOut balance of msg.sender.\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Calculate tokenOut amount required.\\n        uint256 tokenOutAmountRequired = balanceBefore + amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeGenericMulticall(swapAggregatorMulticall);\\n\\n        ///@notice Get tokenOut balance of msg.sender after multicall execution.\\n        uint256 balanceAfter = IERC20(tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Revert if tokenOut balance of msg.sender is insufficient.\\n        if (balanceAfter < tokenOutAmountRequired) {\\n            revert InsufficientOutputAmount(tokenOutAmountRequired - balanceAfter, amountOutMin);\\n        }\\n\\n        ///@notice Emit SwapExactEthForToken event.\\n        emit SwapExactEthForToken(msg.value, tokenOut, balanceAfter - balanceBefore, msg.sender);\\n    }\\n\\n    /// @notice Swap ETH for tokens with Referral.\\n    /// @param tokenOut Address of token to receive.\\n    /// @param amountOutMin Minimum amount of tokenOut to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    /// @param referralInfo Referral information.\\n    function swapExactEthForTokenWithReferral(\\n        address tokenOut,\\n        uint128 amountOutMin,\\n        uint128 protocolFee,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        ReferralInfo calldata referralInfo\\n    ) public payable {\\n        if (protocolFee > msg.value) {\\n            revert InsufficientMsgValue();\\n        }\\n\\n        uint256 referralFee = referralInfo.referralFee;\\n        address referrer = referralInfo.referrer;\\n\\n        ///@notice Transfer referral fee to referrer.\\n        if (referralInfo.referrer != address(0) && referralFee <= protocolFee) {\\n            _safeTransferETH(referrer, referralFee);\\n        } else {\\n            revert InvalidReferral();\\n        }\\n\\n        swapExactEthForToken(tokenOut, amountOutMin, protocolFee, swapAggregatorMulticall);\\n        ///@notice Emit Referral event.\\n        emit Referral(referrer, msg.sender, referralFee);\\n    }\\n\\n    /// @notice Swap tokens for ETH.\\n    /// @param tokenIn Address of token to swap.\\n    /// @param amountIn Amount of tokenIn to swap.\\n    /// @param amountOutMin Minimum amount of ETH to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactTokenForEth(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        ///@dev Ignore if the tokenInDestination is address(0).\\n        if (swapAggregatorMulticall.tokenInDestination != address(0)) {\\n            ///@notice Transfer tokenIn from msg.sender to tokenInDestination address.\\n            IERC20(tokenIn).transferFrom(msg.sender, swapAggregatorMulticall.tokenInDestination, amountIn);\\n        }\\n        ///@notice Get ETH balance of msg.sender.\\n        uint256 balanceBefore = msg.sender.balance;\\n\\n        ///@notice Calculate amountOutRequired.\\n        uint256 amountOutRequired = balanceBefore + amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeMulticall(swapAggregatorMulticall, amountIn, msg.sender);\\n\\n        ///@notice Get WETH balance of this contract.\\n        uint256 balanceWeth = IERC20(WETH).balanceOf(address(this));\\n\\n        ///@notice Withdraw WETH from this contract.\\n        _withdrawEth(balanceWeth, WETH);\\n\\n        ///@notice Transfer ETH to msg.sender.\\n        _safeTransferETH(msg.sender, balanceWeth);\\n\\n        ///@notice Revert if Eth balance of the caller is insufficient.\\n        if (msg.sender.balance < amountOutRequired) {\\n            revert InsufficientOutputAmount(amountOutRequired - msg.sender.balance, amountOutMin);\\n        }\\n\\n        ///@notice Emit SwapExactTokenForEth event.\\n        emit SwapExactTokenForEth(tokenIn, amountIn, msg.sender.balance - balanceBefore, msg.sender);\\n    }\\n\\n    /// @notice Swap tokens for ETH.\\n    /// @param tokenIn Address of token to swap.\\n    /// @param amountIn Amount of tokenIn to swap.\\n    /// @param amountOutMin Minimum amount of ETH to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactTokenForEthOptimized(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        SwapAggregatorGenericMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        ///@dev Ignore if the tokenInDestination is address(0).\\n        if (swapAggregatorMulticall.tokenInDestination != address(0)) {\\n            ///@notice Transfer tokenIn from msg.sender to tokenInDestination address.\\n            IERC20(tokenIn).transferFrom(msg.sender, swapAggregatorMulticall.tokenInDestination, amountIn);\\n        }\\n        ///@notice Get ETH balance of msg.sender.\\n        uint256 balanceBefore = msg.sender.balance;\\n\\n        ///@notice Calculate amountOutRequired.\\n        uint256 amountOutRequired = balanceBefore + amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeGenericMulticall(swapAggregatorMulticall);\\n\\n        ///@notice Get WETH balance of this contract.\\n        uint256 balanceWeth = IERC20(WETH).balanceOf(address(this));\\n\\n        ///@notice Withdraw WETH from this contract.\\n        _withdrawEth(balanceWeth, WETH);\\n\\n        ///@notice Transfer ETH to msg.sender.\\n        _safeTransferETH(msg.sender, balanceWeth);\\n\\n        ///@notice Revert if Eth balance of the caller is insufficient.\\n        if (msg.sender.balance < amountOutRequired) {\\n            revert InsufficientOutputAmount(amountOutRequired - msg.sender.balance, amountOutMin);\\n        }\\n\\n        ///@notice Emit SwapExactTokenForEth event.\\n        emit SwapExactTokenForEth(tokenIn, amountIn, msg.sender.balance - balanceBefore, msg.sender);\\n    }\\n\\n    /// @notice Swap tokens for ETH.\\n    /// @param tokenIn Address of token to swap.\\n    /// @param amountIn Amount of tokenIn to swap.\\n    /// @param amountOutMin Minimum amount of ETH to receive.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    /// @param referralInfo Referral information.\\n    function swapExactTokenForEthWithReferral(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        ReferralInfo calldata referralInfo\\n    ) public payable {\\n        uint256 referralFee = referralInfo.referralFee;\\n        address referrer = referralInfo.referrer;\\n        ///@notice Transfer referral fee to referrer.\\n        if (referralInfo.referrer != address(0) && referralFee <= msg.value) {\\n            _safeTransferETH(referrer, referralFee);\\n        } else {\\n            revert InvalidReferral();\\n        }\\n\\n        swapExactTokenForEth(tokenIn, amountIn, amountOutMin, swapAggregatorMulticall);\\n\\n        ///@notice Emit Referral event.\\n        emit Referral(referrer, msg.sender, referralFee);\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a token to token swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactTokenForToken(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        ReferralInfo calldata referralInfo,\\n        bool isReferral\\n    ) external payable returns (uint256 gasConsumed) {\\n        if (isReferral) {\\n            assembly {\\n                mstore(0x60, gas())\\n            }\\n            swapExactTokenForTokenWithReferral(\\n                tokenIn, amountIn, tokenOut, amountOutMin, swapAggregatorMulticall, referralInfo\\n            );\\n            assembly {\\n                gasConsumed := sub(mload(0x60), gas())\\n            }\\n        } else {\\n            assembly {\\n                mstore(0x60, gas())\\n            }\\n            swapExactTokenForToken(tokenIn, amountIn, tokenOut, amountOutMin, swapAggregatorMulticall);\\n            assembly {\\n                gasConsumed := sub(mload(0x60), gas())\\n            }\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a optimized token to token swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactTokenForTokenOptimized(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        SwapAggregatorGenericMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed) {\\n        assembly {\\n            mstore(0x60, gas())\\n        }\\n        swapExactTokenForTokenOptimized(tokenIn, amountIn, tokenOut, amountOutMin, swapAggregatorMulticall);\\n        assembly {\\n            gasConsumed := sub(mload(0x60), gas())\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a ETH to token swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactEthForToken(\\n        address tokenOut,\\n        uint128 amountOutMin,\\n        uint128 protocolFee,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        ReferralInfo calldata referralInfo,\\n        bool isReferral\\n    ) external payable returns (uint256 gasConsumed) {\\n        if (isReferral) {\\n            assembly {\\n                mstore(0x60, gas())\\n            }\\n            swapExactEthForTokenWithReferral(tokenOut, amountOutMin, protocolFee, swapAggregatorMulticall, referralInfo);\\n            assembly {\\n                gasConsumed := sub(mload(0x60), gas())\\n            }\\n        } else {\\n            assembly {\\n                mstore(0x60, gas())\\n            }\\n            swapExactEthForToken(tokenOut, amountOutMin, protocolFee, swapAggregatorMulticall);\\n            assembly {\\n                gasConsumed := sub(mload(0x60), gas())\\n            }\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a ETH to token swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactEthForTokenOptimized(\\n        address tokenOut,\\n        uint128 amountOutMin,\\n        uint128 protocolFee,\\n        SwapAggregatorGenericMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed) {\\n        assembly {\\n            mstore(0x60, gas())\\n        }\\n        swapExactEthForTokenOptimized(tokenOut, amountOutMin, protocolFee, swapAggregatorMulticall);\\n        assembly {\\n            gasConsumed := sub(mload(0x60), gas())\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a token to ETH swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactTokenForEth(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        ReferralInfo calldata referralInfo,\\n        bool isReferral\\n    ) external payable returns (uint256 gasConsumed) {\\n        if (isReferral) {\\n            assembly {\\n                mstore(0x60, gas())\\n            }\\n            swapExactTokenForEthWithReferral(tokenIn, amountIn, amountOutMin, swapAggregatorMulticall, referralInfo);\\n            assembly {\\n                gasConsumed := sub(mload(0x60), gas())\\n            }\\n        } else {\\n            assembly {\\n                mstore(0x60, gas())\\n            }\\n            swapExactTokenForEth(tokenIn, amountIn, amountOutMin, swapAggregatorMulticall);\\n            assembly {\\n                gasConsumed := sub(mload(0x60), gas())\\n            }\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a token to ETH swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactTokenForEthOptimized(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        SwapAggregatorGenericMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed) {\\n        assembly {\\n            mstore(0x60, gas())\\n        }\\n        swapExactTokenForEthOptimized(tokenIn, amountIn, amountOutMin, swapAggregatorMulticall);\\n        assembly {\\n            gasConsumed := sub(mload(0x60), gas())\\n        }\\n    }\\n\\n    ///@notice Helper function to transfer ETH.\\n    function _safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        if (!success) {\\n            revert ETHTransferFailed();\\n        }\\n    }\\n\\n    /// @notice Helper function to Withdraw ETH from WETH.\\n    function _withdrawEth(uint256 amount, address weth) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0, shl(224, 0x2e1a7d4d) /* keccak256(\\\"withdraw(uint256)\\\") */ )\\n            mstore(4, amount)\\n            if iszero(\\n                call(\\n                    gas(), /* gas */\\n                    weth, /* to */\\n                    0, /* value */\\n                    0, /* in */\\n                    68, /* in size */\\n                    0, /* out */\\n                    0 /* out size */\\n                )\\n            ) { revert(\\\"Native Token Withdraw failed\\\", amount) }\\n        }\\n    }\\n\\n    /// @notice Helper function to Deposit ETH into WETH.\\n    function _depositEth(uint256 amount, address weth) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0, shl(224, 0xd0e30db0)) /* keccak256(\\\"deposit()\\\") */\\n            if iszero(\\n                call(\\n                    gas(), /* gas */\\n                    weth, /* to */\\n                    amount, /* value */\\n                    0, /* in */\\n                    0, /* in size */\\n                    0, /* out */\\n                    0 /* out size */\\n                )\\n            ) { revert(\\\"Native token deposit failed\\\", amount) }\\n        }\\n    }\\n\\n    /// @notice Withdraw ETH from this contract.\\n    function withdraw() external onlyOwner {\\n        _safeTransferETH(msg.sender, address(this).balance);\\n        emit Withdraw(msg.sender, address(this).balance);\\n    }\\n\\n    ///@notice Function to confirm ownership transfer of the contract.\\n    function confirmTransferOwnership() external {\\n        if (msg.sender != tempOwner) {\\n            revert UnauthorizedCaller();\\n        }\\n\\n        ///@notice Cleanup tempOwner storage.\\n        tempOwner = address(0);\\n        owner = msg.sender;\\n    }\\n\\n    ///@notice Function to transfer ownership of the contract.\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        tempOwner = newOwner;\\n    }\\n\\n    /// @notice Fallback receiver function.\\n    receive() external payable {}\\n}\\n\\n/// @title ConveyorMulticall\\n/// @author 0xOsiris, 0xKitsune, Conveyor Labs\\n/// @notice Optimized multicall execution contract.\\ncontract ConveyorMulticall is GenericMulticall, UniswapV3Callback, UniswapV2Callback {\\n    using SafeERC20 for IERC20;\\n\\n    address immutable CONVEYOR_SWAP_AGGREGATOR;\\n\\n    ///@param conveyorRouterV1 Address of the ConveyorRouterV1 contract.\\n    constructor(address conveyorRouterV1) {\\n        CONVEYOR_SWAP_AGGREGATOR = conveyorRouterV1;\\n    }\\n\\n    ///@notice Executes a multicall.\\n    ///@param swapAggregatorMulticall Multicall to be executed.\\n    ///@param amountIn Amount of tokenIn to swap.\\n    ///@param recipient Recipient of the output tokens.\\n    function executeMulticall(\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall,\\n        uint256 amountIn,\\n        address payable recipient\\n    ) public {\\n        ///@notice Get the length of the calls array.\\n        uint256 callsLength = swapAggregatorMulticall.calls.length;\\n\\n        ///@notice Create a bytes array to store the calldata for v2 swaps.\\n        bytes memory callData;\\n\\n        ///@notice Cache the feeBitmap in memory.\\n        uint128 feeBitmap = swapAggregatorMulticall.feeBitmap;\\n        ///@notice Iterate through the calls array.\\n        for (uint256 i = 0; i < callsLength;) {\\n            ///@notice Get the call from the calls array.\\n            ConveyorRouterV1.Call memory call = swapAggregatorMulticall.calls[i];\\n\\n            ///@notice Get the zeroForOne value from the zeroForOneBitmap.\\n            bool zeroForOne = deriveBoolFromBitmap(swapAggregatorMulticall.zeroForOneBitmap, i);\\n            uint256 callType = deriveCallFromBitmap(swapAggregatorMulticall.callTypeBitmap, i);\\n            ///@notice Check if the call is a v2 swap.\\n            if (callType == 0x0) {\\n                ///@notice Instantiate the receiver address for the v2 swap.\\n                address receiver;\\n                {\\n                    ///@notice Get the toAddressBitPattern from the toAddressBitmap.\\n                    uint256 toAddressBitPattern = deriveToAddressFromBitmap(swapAggregatorMulticall.toAddressBitmap, i);\\n                    ///@notice Set the receiver address based on the toAddressBitPattern.\\n                    if (toAddressBitPattern == 0x3) {\\n                        if (i == callsLength - 1) {\\n                            revert InvalidToAddressBits();\\n                        }\\n                        receiver = swapAggregatorMulticall.calls[i + 1].target;\\n                    } else if (toAddressBitPattern == 0x2) {\\n                        receiver = address(this);\\n                    } else if (toAddressBitPattern == 0x1) {\\n                        receiver = recipient;\\n                    } else {\\n                        receiver = CONVEYOR_SWAP_AGGREGATOR;\\n                    }\\n                }\\n\\n                ///@notice Construct the calldata for the v2 swap.\\n                (callData, amountIn, feeBitmap) =\\n                    constructV2SwapCalldata(amountIn, zeroForOne, receiver, call.target, feeBitmap);\\n\\n                ///@notice Execute the v2 swap.\\n                (bool success,) = call.target.call(callData);\\n\\n                if (!success) {\\n                    revert V2SwapFailed();\\n                }\\n            } else if (callType == 0x1) {\\n                ///@notice Execute the v3 swap.\\n                (bool success, bytes memory data) = call.target.call(call.callData);\\n                if (!success) {\\n                    revert V3SwapFailed();\\n                }\\n                ///@notice Decode the amountIn from the v3 swap.\\n                (int256 amount0, int256 amount1) = abi.decode(data, (int256, int256));\\n\\n                amountIn = zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n            } else {\\n                ///@notice Execute generic call.\\n                (bool success,) = call.target.call(call.callData);\\n                if (!success) {\\n                    revert CallFailed();\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    ///@notice Constructs the calldata for a v2 swap.\\n    ///@param amountIn - The amount of tokenIn to swap.\\n    ///@param zeroForOne - The direction of the swap.\\n    ///@param to - The address to send the swapped tokens to.\\n    ///@param pool - The address of the v2 liquidity pool.\\n    ///@param feeBitmap - The bitmap of fees to use for the swap.\\n    ///@return callData - The calldata for the v2 swap.\\n    ///@return amountOut - The amount of tokenOut received from the swap.\\n    ///@return updatedFeeBitmap - The updated feeBitmap.\\n    function constructV2SwapCalldata(uint256 amountIn, bool zeroForOne, address to, address pool, uint128 feeBitmap)\\n        internal\\n        view\\n        returns (bytes memory callData, uint256 amountOut, uint128 updatedFeeBitmap)\\n    {\\n        ///@notice Get the reserves for the pool.\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pool).getReserves();\\n        uint24 fee;\\n\\n        (fee, updatedFeeBitmap) = deriveFeeFromBitmap(feeBitmap);\\n\\n        ///@notice Get the amountOut from the reserves.\\n        amountOut = getAmountOut(amountIn, zeroForOne ? reserve0 : reserve1, zeroForOne ? reserve1 : reserve0, fee);\\n        ///@notice Encode the swap calldata.\\n        callData = abi.encodeWithSignature(\\n            \\\"swap(uint256,uint256,address,bytes)\\\",\\n            zeroForOne ? 0 : amountOut,\\n            zeroForOne ? amountOut : 0,\\n            to,\\n            new bytes(0)\\n        );\\n    }\\n\\n    //Note: In human readable format, this is read from right to left, with the right most binary digit being the first representation\\n    //of tokenIsToken0 for the first pool in the route\\n    ///@notice Derives a boolean at a specific bit position from a bitmap.\\n    ///@param bitmap - The bitmap to derive the boolean from.\\n    ///@param position - The bit position.\\n    function deriveBoolFromBitmap(uint64 bitmap, uint256 position) internal pure returns (bool) {\\n        if ((2 ** position) & bitmap == 0) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Derives the call type from a bitmap.\\n    /**\\n     * @dev\\n     *     0x0 - Uniswap v2 swap\\n     *     0x1 - Uniswap v3 swap\\n     *     0x2 - Generic call\\n     */\\n    function deriveCallFromBitmap(uint40 bitmap, uint256 position) internal pure returns (uint256 callType) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let significantBits := shl(mul(position, 0x2), 0x3)\\n\\n            switch shr(mul(position, 0x2), and(bitmap, significantBits))\\n            case 0x0 { callType := 0x0 }\\n            case 0x1 { callType := 0x1 }\\n            case 0x2 { callType := 0x2 }\\n        }\\n    }\\n\\n    //Note: In human readable format, this is read from right to left, with the right most binary digit being the first bit of the next fee to derive.\\n    ///@dev Each non standard fee is represented within exactly 10 bits (0-1024), if the fee is 300 then a single 0 bit is used.\\n    ///@notice Derives the fee from the feeBitmap.\\n    ///@param feeBitmap - The bitmap of fees to use for the swap.\\n    ///@return fee - The fee to use for the swap.\\n    ///@return updatedFeeBitmap - The updated feeBitmap.\\n    function deriveFeeFromBitmap(uint128 feeBitmap) internal pure returns (uint24 fee, uint128 updatedFeeBitmap) {\\n        /**\\n         * @dev Retrieve the first 10 bits from the feeBitmap to get the fee, shift right to set the next\\n         *         fee in the first bit position.*\\n         */\\n        fee = uint24(feeBitmap & 0x3FF);\\n        updatedFeeBitmap = feeBitmap >> 10;\\n    }\\n\\n    ///@dev Bit Patterns: 01 => msg.sender, 10 => ConveyorSwapExecutor, 11 = next pool, 00 = ConveyorRouterV1\\n    ///@notice Derives the toAddress from the toAddressBitmap.\\n    ///@param toAddressBitmap - The bitmap of toAddresses to use for the swap.\\n    ///@param i - The index of the toAddress to derive.\\n    ///@return unsigned - 2 bit pattern representing the receiver of the current swap.\\n    function deriveToAddressFromBitmap(uint128 toAddressBitmap, uint256 i) internal pure returns (uint256) {\\n        if ((3 << (2 * i)) & toAddressBitmap == 3 << (2 * i)) {\\n            return 0x3;\\n        } else if ((2 << (2 * i)) & toAddressBitmap == 2 << (2 * i)) {\\n            return 0x2;\\n        } else if ((1 << (2 * i)) & toAddressBitmap == 1 << (2 * i)) {\\n            return 0x1;\\n        } else {\\n            return 0x0;\\n        }\\n    }\\n\\n    ///@notice Function to get the amountOut from a UniV2 lp.\\n    ///@param amountIn - AmountIn for the swap.\\n    ///@param reserveIn - tokenIn reserve for the swap.\\n    ///@param reserveOut - tokenOut reserve for the swap.\\n    ///@return amountOut - AmountOut from the given parameters.\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut, uint24 fee)\\n        internal\\n        pure\\n        returns (uint256 amountOut)\\n    {\\n        if (amountIn == 0) {\\n            revert InsufficientInputAmount(0, 1);\\n        }\\n\\n        if (reserveIn == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        if (reserveOut == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        /**\\n         * Note: fee is specified in the callData as per the UniswapV2 variants specification.\\n         *         If this fee is not specified correctly the swap will likely fail, or yield unoptimal\\n         *         trade values.*\\n         */\\n        uint256 amountInWithFee = amountIn * (100000 - fee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 100000 + (amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/interfaces/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n     \\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/ConveyorErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nerror InsufficientWalletBalance(address account, uint256 balance, uint256 balanceNeeded);\\nerror OrderDoesNotExist(bytes32 orderId);\\nerror OrderQuantityIsZero();\\nerror InsufficientOrderInputValue();\\nerror IncongruentInputTokenInOrderGroup(address token, address expectedToken);\\nerror TokenInIsTokenOut();\\nerror IncongruentOutputTokenInOrderGroup(address token, address expectedToken);\\nerror InsufficientOutputAmount(uint256 amountOut, uint256 expectedAmountOut);\\nerror InsufficientInputAmount(uint256 amountIn, uint256 expectedAmountIn);\\nerror InsufficientLiquidity();\\nerror InsufficientAllowanceForOrderPlacement(address token, uint256 approvedQuantity, uint256 approvedQuantityNeeded);\\nerror InsufficientAllowanceForOrderUpdate(address token, uint256 approvedQuantity, uint256 approvedQuantityNeeded);\\nerror InvalidOrderGroupSequence();\\nerror IncongruentFeeInInOrderGroup();\\nerror IncongruentFeeOutInOrderGroup();\\nerror IncongruentTaxedTokenInOrderGroup();\\nerror IncongruentStoplossStatusInOrderGroup();\\nerror IncongruentBuySellStatusInOrderGroup();\\nerror NonEOAStoplossExecution();\\nerror MsgSenderIsNotTxOrigin();\\nerror MsgSenderIsNotLimitOrderRouter();\\nerror MsgSenderIsNotLimitOrderExecutor();\\nerror MsgSenderIsNotSandboxRouter();\\nerror MsgSenderIsNotOwner();\\nerror MsgSenderIsNotOrderOwner();\\nerror MsgSenderIsNotOrderBook();\\nerror MsgSenderIsNotLimitOrderBook();\\nerror MsgSenderIsNotTempOwner();\\nerror Reentrancy();\\nerror ETHTransferFailed();\\nerror InvalidAddress();\\nerror UnauthorizedUniswapV3CallbackCaller();\\nerror DuplicateOrderIdsInOrderGroup();\\nerror InvalidCalldata();\\nerror InsufficientMsgValue();\\nerror UnauthorizedCaller();\\nerror AmountInIsZero();\\n///@notice Returns the index of the call that failed within the SandboxRouter.Call[] array\\nerror SandboxCallFailed(uint256 callIndex);\\nerror InvalidTransferAddressArray();\\nerror AddressIsZero();\\nerror IdenticalTokenAddresses();\\nerror InvalidInputTokenForOrderPlacement();\\nerror SandboxFillAmountNotSatisfied(bytes32 orderId, uint256 amountFilled, uint256 fillAmountRequired);\\nerror OrderNotEligibleForRefresh(bytes32 orderId);\\n\\nerror SandboxAmountOutRequiredNotSatisfied(bytes32 orderId, uint256 amountOut, uint256 amountOutRequired);\\n\\nerror AmountOutRequiredIsZero(bytes32 orderId);\\n\\nerror FillAmountSpecifiedGreaterThanAmountRemaining(\\n    uint256 fillAmountSpecified, uint256 amountInRemaining, bytes32 orderId\\n);\\nerror ConveyorFeesNotPaid(uint256 expectedFees, uint256 feesPaid, uint256 unpaidFeesRemaining);\\nerror InsufficientFillAmountSpecified(uint128 fillAmountSpecified, uint128 amountInRemaining);\\nerror InsufficientExecutionCredit(uint256 msgValue, uint256 minExecutionCredit);\\nerror WithdrawAmountExceedsExecutionCredit(uint256 amount, uint256 executionCredit);\\nerror MsgValueIsNotCumulativeExecutionCredit(uint256 msgValue, uint256 cumulativeExecutionCredit);\\n\\nerror ExecutorNotCheckedIn();\\nerror InvalidToAddressBits();\\nerror V2SwapFailed();\\nerror V3SwapFailed();\\nerror CallFailed();\\nerror InvalidReferral();\\n\"\r\n    },\r\n    \"lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: PLACEHOLDER\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"lib/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/token/IERC20.sol\\\";\\nimport \\\"../../interfaces/token/draft-IERC20Permit.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/UniswapV3Callback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../lib/interfaces/token/IERC20.sol\\\";\\n\\ncontract UniswapV3Callback {\\n    ///@notice Uniswap V3 callback function called during a swap on a v3 liqudity pool.\\n    ///@param amount0Delta - The change in token0 reserves from the swap.\\n    ///@param amount1Delta - The change in token1 reserves from the swap.\\n    ///@param data - The data packed into the swap.\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, address _sender) = abi.decode(data, (bool, address, address));\\n\\n        ///@notice Set amountIn to the amountInDelta depending on boolean zeroForOne.\\n        uint256 amountIn = _zeroForOne ? uint256(amount0Delta) : uint256(amount1Delta);\\n\\n        if (!(_sender == address(this))) {\\n            ///@notice Transfer the amountIn of tokenIn to the liquidity pool from the sender.\\n            IERC20(_tokenIn).transferFrom(_sender, msg.sender, amountIn);\\n        } else {\\n            IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/UniswapV2Callback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../test/utils/Console.sol\\\";\\n\\ncontract UniswapV2Callback {\\n    /// @notice Uniswap v2 swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function uniswapV2Call(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, address _sender) = abi.decode(data, (bool, address, address));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = getAmountIn(amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0);\\n\\n        if (!(_sender == address(this))) {\\n            ///@notice Transfer the amountIn of tokenIn to the liquidity pool from the sender.\\n            IERC20(_tokenIn).transferFrom(_sender, msg.sender, amountIn);\\n        } else {\\n            IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n        }\\n    }\\n\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        internal\\n        pure\\n        returns (uint256 amountIn)\\n    {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/GenericMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ConveyorRouterV1.sol\\\";\\nimport \\\"./ConveyorErrors.sol\\\";\\n\\ncontract GenericMulticall {\\n    function executeGenericMulticall(ConveyorRouterV1.SwapAggregatorGenericMulticall calldata multicall) external {\\n        for (uint256 i = 0; i < multicall.calls.length; i++) {\\n            (bool success,) = multicall.calls[i].target.call(multicall.calls[i].callData);\\n            if (!success) {\\n                revert CallFailed();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/interfaces/token/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"\r\n    },\r\n    \"lib/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"test/utils/Console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"create3-factory/=lib/create3-factory/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"interfaces/=lib/interfaces/\",\r\n      \"libraries/=lib/libraries/\",\r\n      \"solmate/=lib/create3-factory/lib/solmate/src/\",\r\n      \"utils/=lib/utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmountOut\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SwapExactEthForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SwapExactTokenForEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONVEYOR_MULTICALL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountOutMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConveyorRouterV1.ReferralInfo\",\"name\":\"referralInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"quoteSwapExactEthForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountOutMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorGenericMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"quoteSwapExactEthForTokenOptimized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConveyorRouterV1.ReferralInfo\",\"name\":\"referralInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"quoteSwapExactTokenForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorGenericMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"quoteSwapExactTokenForEthOptimized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConveyorRouterV1.ReferralInfo\",\"name\":\"referralInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"quoteSwapExactTokenForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorGenericMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"quoteSwapExactTokenForTokenOptimized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountOutMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactEthForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountOutMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorGenericMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactEthForTokenOptimized\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountOutMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConveyorRouterV1.ReferralInfo\",\"name\":\"referralInfo\",\"type\":\"tuple\"}],\"name\":\"swapExactEthForTokenWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorGenericMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForEthOptimized\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConveyorRouterV1.ReferralInfo\",\"name\":\"referralInfo\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForEthWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorGenericMulticall\",\"name\":\"genericMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForTokenOptimized\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"zeroForOneBitmap\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"callTypeBitmap\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"toAddressBitmap\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feeBitmap\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConveyorRouterV1.ReferralInfo\",\"name\":\"referralInfo\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForTokenWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConveyorRouterV1", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}