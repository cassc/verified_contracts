{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Launchpad.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/** \\n * @author @brougkr\\n * @title Launchpad\\n * - Launchpad is an interface to easily create NFT Projects, Dutch Auctions, English Auctions, Waitlists, Merkle Claims, & Mint Passes etc. on EVM\\n * - Optionally Includes Integration And Deployment With Multiple Contracts\\n * - Live-Rebate Respsend & Discount Dutch Auctions, English Auctions, LiveMint, MintPass Factory, ArtBlocks Flex, Core, & Poly Minters\\n * - It Interacts With The Following Contracts Optionally, Depending On Your Project Needs:\\n * - { 1 } - { Dutch Auction Marketplace }\\n * - { 2 } - { English Auction Marketplace }\\n * - { 3 } - { Fixed Sale & Presale Marketplace }\\n * - { 4 } - { LiveMint }\\n * - { 5 } - { Custom Minters or ArtBlocks Minters }\\n * - { 6 } - { Minted Works Factory }\\n * - { 7 } - { MintPass Factory }\\n * - { 8 } - { Merkle Claimer }\\n * - { 9 } - { Launchpad Registry }\\n * - { 10 } - { Waitlist }\\n*/\\npragma solidity 0.8.19;\\nimport { MissionControl } from \\\"./MissionControl.sol\\\";\\ncontract Launchpad is MissionControl\\n{   \\n    struct StateParameters \\n    {\\n        bool _Active;                // [0] -> _Active\\n        address _DutchMarketplace;   // [1] -> _DutchMarketplace\\n        address _DynamicMarketplace; // [2] -> _DynamicMarketplace\\n        address _EnglishMarketplace; // [3] -> _EnglishMarketplace\\n        address _LiveMint;           // [4] -> _LiveMint\\n        address _FactoryMintedWorks; // [5] -> _FactoryMintedWorks\\n        address _FactoryMintPass;    // [6] -> _FactoryMintPass\\n        address _LaunchpadRegistry;  // [7] -> _LaunchpadRegistry\\n        address _MerkleClaimer;      // [8] -> _MerkleClaimer\\n        address _Waitlist;           // [9] -> _Waitlist\\n    }\\n    \\n    /*-----------------------------------------------*/\\n    /*------------------ * STATE * ------------------*/\\n    /*-----------------------------------------------*/\\n\\n    StateParameters public Params; // Contract Params\\n\\n    /*------------------------------------------------*/\\n    /*------------------ * EVENTS * ------------------*/\\n    /*------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted When A Launchpad Project Is Created\\n     * @param LaunchpadProjectID The Launchpad ProjectID\\n     */\\n    event ProjectInvoked(uint LaunchpadProjectID);  \\n\\n    /**\\n     * @dev Emitted When A Project Is Modified\\n     * @param LaunchpadProjectID The Launchpad ProjectID\\n     */\\n    event ProjectModified(uint LaunchpadProjectID); \\n\\n    /**\\n     * @dev Emitted When LiveMint Is Enabled\\n     * @param LaunchpadProjectID The Launchpad ProjectID\\n     */\\n    event LiveMintEnabled(uint LaunchpadProjectID); \\n\\n    /*-----------------------------------------------------*/\\n    /*------------------ * CONSTRUCTOR * ------------------*/\\n    /*-----------------------------------------------------*/\\n\\n    constructor() \\n    { \\n        _OWNER = msg.sender;\\n        Params._Active = true; \\n    }\\n\\n    /*---------------------------------------------------------*/\\n    /*------------------ * ADMIN FUNCTIONS * ------------------*/\\n    /*---------------------------------------------------------*/\\n\\n    /**\\n     * @dev Deploys A New Mint Pass\\n     * @param ParamsMintPass Mint Pass Parameters\\n     * @return MintPassAddress The Address Of The New Mint Pass Smart Contract\\n     */\\n    function InitMintPass ( IMintPass.Params memory ParamsMintPass ) external onlyOperator returns ( address MintPassAddress )\\n    { \\n        return IMintPass(Params._FactoryMintPass)._InitMintPass(ParamsMintPass); \\n    }\\n\\n    /**\\n     * @dev Starts A Dutch Auction And Optionally Deploys New MintPass Contract\\n     * @param ParamsMintPass Mint Pass Parameters\\n     * @param ParamsSale Marketplace Parameters\\n     * @param ParamsSaleInternal Marketplace Parameters Cont.\\n     * @param RootsPriority Merkle Roots Eligibility\\n     * @param RootsAmounts Merkle Root Amounts\\n     * @param DiscountAmounts Discount Amounts\\n     */\\n    function InitSaleDutch (       \\n        IMintPass.Params memory ParamsMintPass,                   // Mint Pass Parameters\\n        IMarketplace.DutchSale memory ParamsSale,                 // Marketplace Parameters\\n        IMarketplace.DutchSaleInternal memory ParamsSaleInternal, // Marketplace Parameters Cont.\\n        bytes32[] calldata RootsPriority,                         // Merkle Roots Eligibility\\n        bytes32[] calldata RootsAmounts,                          // Merkle Root Amounts\\n        uint[] calldata DiscountAmounts                           // Discount Amounts\\n    ) external onlyOperator {\\n        address MintPassAddress = ParamsSaleInternal._NFT;\\n        if(ParamsSaleInternal._NFT == Params._FactoryMintPass)\\n        {\\n            ParamsMintPass._Marketplace = Params._DutchMarketplace;\\n            MintPassAddress = IMintPass(Params._FactoryMintPass)._InitMintPass(ParamsMintPass); \\n            ParamsSaleInternal._NFT = MintPassAddress;\\n        }\\n        uint SaleID = IMarketplace(Params._DutchMarketplace)._StartSale(ParamsSale, ParamsSaleInternal, RootsPriority, RootsAmounts, DiscountAmounts);\\n        uint LaunchpadProjectID = ILaunchpadRegistry(Params._LaunchpadRegistry)._NewProject(ILaunchpadRegistry.Project(\\n            ParamsSale._Name,             // _Name\\n            true,                         // _Active\\n            type(uint).max,               // _LiveMintArtistID\\n            ParamsMintPass._MaxSupply,    // _MaxSupply\\n            ParamsMintPass._MintsPerPack, // _MintsPerPack\\n            SaleID,                       // _SaleID\\n            MintPassAddress,              // _MintPassAddress\\n            Params._DutchMarketplace,     // _MarketplaceAddress\\n            address(0)                    // _MintedWorkAddress\\n        ));\\n        emit ProjectInvoked ( LaunchpadProjectID );\\n    }\\n\\n    /**\\n     * @dev Starts A Fixed Price Sale And Optionally Deploys A New MintPass Contract\\n     * @param ParamsMintPass Mint Pass Parameters\\n     * @param ParamsSale Marketplace Parameters\\n     * @param DiscountAmounts Discount Amounts\\n     */\\n    function InitSaleFixedPrice (\\n        IMintPass.Params memory ParamsMintPass,        // Mint Pass Parameters\\n        IMarketplace.SaleFixedPrice memory ParamsSale, // Params For Sale\\n        uint[] calldata DiscountAmounts                // Discount Amounts\\n    ) external onlyOperator {\\n        address MintPassAddress = ParamsSale._NFT;\\n        if(ParamsSale._NFT == Params._FactoryMintPass) \\n        { \\n            ParamsMintPass._Marketplace = Params._DynamicMarketplace;\\n            MintPassAddress = IMintPass(Params._FactoryMintPass)._InitMintPass(ParamsMintPass); \\n            ParamsSale._NFT = MintPassAddress;\\n        } \\n        uint SaleID = IMarketplace(Params._DynamicMarketplace)._StartFixedPriceSale(ParamsSale, DiscountAmounts);\\n        uint LaunchpadProjectID = ILaunchpadRegistry(Params._LaunchpadRegistry)._NewProject(ILaunchpadRegistry.Project(\\n            ParamsSale._Name,             // _Name\\n            true,                         // _Active\\n            type(uint).max,               // _LiveMintArtistID\\n            ParamsMintPass._MaxSupply,    // _MaxSupply\\n            ParamsMintPass._MintsPerPack, // _MintsPerPack\\n            SaleID,                       // _SaleID\\n            MintPassAddress,              // _MintPassAddress\\n            Params._DynamicMarketplace,   // _MarketplaceAddress\\n            address(0)                    // _MintedWorkAddress\\n        ));\\n        emit ProjectInvoked ( LaunchpadProjectID );\\n    }\\n\\n    /**\\n     * @dev Starts A Presale Sale And Optionally Deploys A New MintPass Contract\\n     * @param ParamsSale SalePresale\\n     * @param Roots SalePresaleRoots\\n     * @param ParamsMintPass Mint Pass Parameters\\n     */\\n    function InitSalePresale (\\n        IMintPass.Params memory ParamsMintPass,     // Mint Pass Parameters\\n        IMarketplace.SalePresale memory ParamsSale, // SalePresale\\n        IMarketplace.SalePresaleRoots memory Roots  // SalePresaleRoots\\n    ) external onlyOperator {\\n        address MintPassAddress;\\n        if(ParamsSale._NFT == Params._FactoryMintPass) \\n        { \\n            ParamsMintPass._Marketplace = Params._DynamicMarketplace;\\n            MintPassAddress = IMintPass(Params._FactoryMintPass)._InitMintPass(ParamsMintPass); \\n            ParamsSale._NFT = MintPassAddress;\\n        }\\n        uint SaleID = IMarketplace(Params._DynamicMarketplace)._StartPresaleSale(ParamsSale, Roots);\\n        uint LaunchpadProjectID = ILaunchpadRegistry(Params._LaunchpadRegistry)._NewProject(ILaunchpadRegistry.Project(\\n            ParamsSale._Name,             // _Name\\n            true,                         // _Active\\n            type(uint).max,               // _LiveMintArtistID\\n            ParamsMintPass._MaxSupply,    // _MaxSupply\\n            ParamsMintPass._MintsPerPack, // _MintsPerPack\\n            SaleID,                       // _SaleID\\n            MintPassAddress,              // _MintPassAddress\\n            Params._DynamicMarketplace,   // _MarketplaceAddress\\n            address(0)                    // _MintedWorkAddress\\n        ));\\n        emit ProjectInvoked ( LaunchpadProjectID );\\n    }\\n\\n    /**\\n     * @dev Starts An English Auction And Optionally Deploys A New MintPass Contract\\n     * @param ParamsMintPass Mint Pass Parameters\\n     * @param ParamsAuction Auction Parameters\\n     * @param MerkleRootsEligibilities Merkle Roots Eligibility\\n     * @param MerkleRootsAmounts Merkle Roots Amounts\\n     * @param DiscountAmounts Discount Amounts\\n     */\\n    function InitSaleEnglishAuction (\\n        IMintPass.Params memory ParamsMintPass,      // Mint Pass Parameters\\n        IAuction.Params memory ParamsAuction,        // Auction\\n        bytes32[] calldata MerkleRootsEligibilities, // Merkle Roots Eligibility\\n        bytes32[] calldata MerkleRootsAmounts,       // Merkle Roots Amounts\\n        uint[] calldata DiscountAmounts              // Discount Amounts\\n    ) external onlyOperator {\\n        address MintPassAddress;\\n        if(ParamsAuction._NFT == Params._FactoryMintPass)\\n        {\\n            ParamsMintPass._Marketplace = Params._EnglishMarketplace;\\n            MintPassAddress = IMintPass(Params._FactoryMintPass)._InitMintPass(ParamsMintPass);\\n            ParamsAuction._NFT = MintPassAddress;\\n        }\\n        uint SaleID = IAuction(Params._EnglishMarketplace)._StartAuction(ParamsAuction, MerkleRootsEligibilities, MerkleRootsAmounts, DiscountAmounts);\\n        uint LaunchpadProjectID = ILaunchpadRegistry(Params._LaunchpadRegistry)._NewProject(ILaunchpadRegistry.Project(\\n            ParamsAuction._Name,          // _Name\\n            true,                         // _Active\\n            type(uint).max,               // _LiveMintArtistID\\n            ParamsMintPass._MaxSupply,    // _MaxSupply\\n            ParamsMintPass._MintsPerPack, // _MintsPerPack\\n            SaleID,                       // _SaleID\\n            MintPassAddress,              // _MintPassAddress\\n            Params._EnglishMarketplace,   // _MarketplaceAddress\\n            address(0)                    // _MintedWorkAddress\\n        ));\\n        emit ProjectInvoked ( LaunchpadProjectID );\\n    }\\n\\n    /**\\n     * @dev Initializes A New Live Mint Project\\n     * @param ParamsMinter The Live Mint Parameters\\n     */\\n    function InitLiveMintArtist ( ILiveMint.Params memory ParamsMinter ) external onlyOperator \\n    {\\n        uint LiveMintArtistID = ILiveMint(Params._LiveMint)._InitLiveMintArtist(ParamsMinter);\\n        uint LaunchpadProjectID = ILaunchpadRegistry(Params._LaunchpadRegistry)._NewProject(ILaunchpadRegistry.Project(\\n            ParamsMinter._Name,              // _Name\\n            true,                            // _Active\\n            LiveMintArtistID,                // _LiveMintArtistID\\n            ParamsMinter._MaxSupply,         // _MaxSupply\\n            type(uint).max,                  // _MintsPerPack\\n            type(uint).max,                  // _SaleID\\n            ParamsMinter._MintPass,          // _MintPassAddress\\n            address(0),                      // _MarketplaceAddress       \\n            ParamsMinter._Minter             // _MintedWorkAddress\\n        ));\\n        emit ProjectInvoked ( LaunchpadProjectID );\\n    }\\n\\n    /**\\n     * @dev Initializes A New Merkle Claimer At A New Claim Index\\n     * @param _NewClaim The Merkle Claimer Claim Parameters\\n     */\\n    function MerkleClaimerStart(IMerkle.Claim memory _NewClaim) external onlyOperator { IMerkle(Params._MerkleClaimer)._NewClaim(_NewClaim); }\\n\\n    /**\\n     * @dev Changes The Current Merkle Root At The Provided Claim Index\\n     * @param ClaimIndex The Claim Index To Change The Root For\\n     * @param Root The New Merkle Root\\n     */\\n    function MerkleClaimerNewRoot ( uint ClaimIndex, bytes32 Root ) external onlyOperator { IMerkle(Params._MerkleClaimer)._ChangeRoot(ClaimIndex, Root); }\\n\\n    /**\\n     * @dev Clears A Dutch Auction & Initiates Refunds & Proceeds\\n     * @param LaunchpadProjectID The Index Of The Sale To Initiate Refunds & Proceeds For\\n     */\\n    function FinalizeDutchAuction ( uint LaunchpadProjectID ) external onlyOperator \\n    { \\n        uint SaleIndex = ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleIndex(LaunchpadProjectID);\\n        IMarketplace(Params._DutchMarketplace)._InitiateRefundsAndProceeds(SaleIndex); \\n    }\\n\\n    /**\\n     * @dev Initiates Withdrawl Proceeds For The Entire Auction & Disperses NFTs To The Top Bidders On The Leaderboard (First-Come-First-Serve) (When TokenID Is Ambiguous)\\n     * @param LaunchpadProjectID The Launchpad ProjectID To Finalize\\n     */\\n    function FinalizeEnglishAuctionTokenIDsAmbiguous ( uint LaunchpadProjectID ) external onlyOperator \\n    { \\n        uint SaleIndex = ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleIndex(LaunchpadProjectID);\\n        IAuction(Params._EnglishMarketplace)._ProcessETHAndNFTsTokenIDsAmbiguous(SaleIndex); \\n    }\\n\\n    /**\\n     * @dev Initiates Withdrawl Proceeds For The Entire Auction & Disperses NFTs To The Top Bidders On The Leaderboard (Ascending Ranking) (When TokenID Matters)\\n     * @param LaunchpadProjectID The Launchpad Project ID To Finalize\\n     */\\n    function FinalizeEnglishAuctionTokenIDsDistinct ( uint LaunchpadProjectID ) external onlyOperator \\n    { \\n        uint SaleIndex = ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleIndex(LaunchpadProjectID);\\n        IAuction(Params._EnglishMarketplace)._ProcessETHAndNFTsTokenIDsDistinct(SaleIndex); \\n    }\\n\\n    /**\\n     * @dev Initiates Withdrawl Proceeds For The Entire Auction & Disperses NFTs To The Ranked Top Bidders On The Leaderboard (When TokenIDs Are Unique) \\n     * @param LaunchpadProjectID The Launchpad ProjectID To Finalize\\n     * @param TokenIDs The TokenIDs To Disperse To The Top Bidders On The Leaderboard (In Order Of Ranked Leaderboard Position)\\n     */\\n    function FinalizeEnglishAuctionTokenIDsDistinctRanked ( uint LaunchpadProjectID, uint[] calldata TokenIDs ) external onlyOperator\\n    {\\n        uint SaleIndex = ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleIndex(LaunchpadProjectID);\\n        IAuction(Params._EnglishMarketplace)._ProcessETHAndNFTsTokenIDsSpecificRanked(SaleIndex, TokenIDs);\\n    }\\n\\n    /**\\n     * @dev Initiates Withdrawl Proceeds For The Entire Auction & Disperses NFTs To The Top Bidders On The Leaderboard With Configured Mint Pack Amount In The Auction Marketplace SaleID\\n     * @param LaunchpadProjectID The Launchpad ProjectID To Finalize\\n     */\\n    function FinalizeEnglishAuctionMintPacks ( uint LaunchpadProjectID ) external onlyOperator\\n    {\\n        uint SaleIndex = ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleIndex(LaunchpadProjectID);\\n        IAuction(Params._EnglishMarketplace)._ProcessETHAndNFTsMintPacksRanked(SaleIndex);\\n    }\\n\\n    /**\\n     * @dev Withdraws All ETH From The Marketplace To The Multisig\\n     * @param LaunchpadProjectID The Launchpad ProjectID To Finalize\\n     */\\n    function FinalizeDynamicMarketplaceSale ( uint LaunchpadProjectID ) external onlyOperator \\n    { \\n        uint SaleIndex = ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleIndex(LaunchpadProjectID);\\n        IMarketplace(Params._DynamicMarketplace)._WithdrawETHFromSaleIndex(SaleIndex); \\n    }\\n\\n    /**\\n     * @dev Starts A New Waitlist\\n     * @param Root The Merkle Root For The Waitlist\\n     */\\n    function WaitlistStart ( string calldata Name, bytes32 Root ) external onlyOperator { IWaitlist(Params._Waitlist)._NewWaitlist(Name, Root); }\\n\\n    /**\\n     * @dev Changes A Waitlist Root\\n     * @param WaitlistIndex The Index Of The Waitlist To Change The Root For\\n     * @param Root The New Merkle Root\\n     */\\n    function WaitlistChange ( uint WaitlistIndex, bytes32 Root ) external onlyOperator { IWaitlist(Params._Waitlist)._NewWaitlistRoot(WaitlistIndex, Root); }\\n\\n    /*---------------------------------------------------------*/\\n    /*------------------ * OWNER FUNCTIONS * ------------------*/\\n    /*---------------------------------------------------------*/\\n\\n    /**\\n     * @dev Toggles The Launchpad Overall Contract State\\n     */\\n    function __ActiveToggle() external onlyOwner { Params._Active = !Params._Active; }\\n\\n    /**\\n     * @dev Changes Marketplace Address\\n     * @param NewAddress The New Marketplace Address\\n     */\\n    function __ChangeMarketplace(address NewAddress) external onlyOwner { Params._DutchMarketplace = NewAddress; }\\n\\n    /**\\n     * @dev Changes LiveMint Address\\n     * @param NewAddress The New LiveMint Address\\n     */\\n    function __ChangeLiveMint(address NewAddress) external onlyOwner { Params._LiveMint = NewAddress; }\\n\\n    /**\\n     * @dev Changes Mint Pass Factory Address\\n     * @param NewAddress The New Mint Pass Factory Address\\n     */\\n    function __ChangeFactoryMintPass(address NewAddress) external onlyOwner { Params._FactoryMintPass = NewAddress; }\\n    \\n    /**\\n     * @dev Changes Minted Works Factory Address\\n     * @param NewAddress The New Minted Works Factory Address\\n     */\\n    function __ChangeFactoryMintedWorks(address NewAddress) external onlyOwner { Params._FactoryMintedWorks = NewAddress; }\\n\\n    /**\\n     * @dev Changes Basic Marketplace Address\\n     * @param NewAddress The New Basic Marketplace Address\\n     */\\n    function __ChangeBasicMarketplace(address NewAddress) external onlyOwner { Params._DynamicMarketplace = NewAddress; }\\n\\n    /**\\n     * @dev Changes English Auction Address\\n     * @param NewAddress The New English Auction Address\\n     */\\n    function __ChangeAuctionMarketplace(address NewAddress) external onlyOwner { Params._EnglishMarketplace = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Merkle Claimer Address\\n     * @param NewAddress The New Merkle Claimer Address\\n     */\\n    function __ChangeMerkleClaimer(address NewAddress) external onlyOwner { Params._MerkleClaimer = NewAddress; }\\n\\n    /**\\n     * @dev Upgrades The Dynamic Marketplace's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeDynamicMarketplace(address NewAddress) external onlyOwner { ICustom(Params._DynamicMarketplace).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The Dutch Marketplace's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeDutchMarketplace(address NewAddress) external onlyOwner { ICustom(Params._DutchMarketplace).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The LiveMint's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeLiveMint(address NewAddress) external onlyOwner { ICustom(Params._LiveMint).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The English Auction's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeEnglishAuction(address NewAddress) external onlyOwner { ICustom(Params._EnglishMarketplace).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The Minted Works Factory's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeFactoryMintedWorks(address NewAddress) external onlyOwner { ICustom(Params._FactoryMintedWorks).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The Mint Pass Factory's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeFactoryMintPass(address NewAddress) external onlyOwner { ICustom(Params._FactoryMintPass).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The Launchpad Registry's Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeLaunchpadRegistry(address NewAddress) external onlyOwner { ICustom(Params._LaunchpadRegistry).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The Auction Marketplace Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeAuctionMarketplace(address NewAddress) external onlyOwner { ICustom(Params._LaunchpadRegistry).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Upgrades The Merkle Claimer Active Launchpad Address\\n     * @param NewAddress The New Launchpad Address\\n     */\\n    function __UpgradeMerkleClaimer(address NewAddress) external onlyOwner { ICustom(Params._MerkleClaimer).____LaunchpadOverrideAddress(NewAddress); }\\n\\n    /**\\n     * @dev Initiates Upgrade Of The Launchpad With All Current Active Contracts\\n     * @param NewLaunchpadAddress The New Launchpad Address\\n     */\\n    function ___UpgradeAll(address NewLaunchpadAddress) external onlyOwner\\n    {\\n        ICustom(Params._DutchMarketplace).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._DynamicMarketplace).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._EnglishMarketplace).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._LiveMint).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._FactoryMintedWorks).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._FactoryMintPass).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._LaunchpadRegistry).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._MerkleClaimer).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n        ICustom(Params._Waitlist).____LaunchpadOverrideAddress(NewLaunchpadAddress);\\n    }\\n\\n    /**\\n     * @dev Instantiates A New State\\n     * @param _State The New State Parameters\\n     */\\n    function ___NewState(StateParameters memory _State) external onlyOwner { Params = _State; }\\n\\n    /**\\n     * @dev Executes Arbitrary Transaction(s)\\n     * @param Targets The Addresses To Execute Transactions On\\n     * @param Values The Values To Send In Wei\\n     * @param Datas The Data To Execute\\n     */\\n    function ___InitTransactions(address[] memory Targets, uint[] memory Values, bytes[] memory Datas) external onlyOwner\\n    {\\n        for(uint x; x < Targets.length; x++) \\n        {\\n            (bool success,) = Targets[x].call{value:(Values[x])}(Datas[x]);\\n            require(success, \\\"i have failed u anakin\\\");\\n        }\\n    }\\n\\n    /*--------------------------------------------------------*/\\n    /*------------------ * VIEW FUNCTIONS * ------------------*/\\n    /*--------------------------------------------------------*/\\n\\n    /**\\n     * @dev Returns The Full Claim Struct At The Provided Claim Index\\n     * @param ClaimIndex The Claim Index To View\\n     */\\n    function ViewMerkleClaimerClaim(uint ClaimIndex) external view returns(IMerkle.Claim memory) \\n    { \\n        return IMerkle(Params._MerkleClaimer).ViewClaim(ClaimIndex); \\n    }\\n\\n    /**\\n     * @dev Returns An Array Of Claim Structs At The Provided Claim Indexes\\n     * @param ClaimIndexes The Claim Indexes To View\\n     */\\n    function ViewMerkleClaimerClaims(uint[] calldata ClaimIndexes) external view returns (IMerkle.Claim[] memory) \\n    { \\n        return IMerkle(Params._MerkleClaimer).ViewClaims(ClaimIndexes); \\n    }\\n\\n    /**\\n     * @dev Returns The Full Project Struct At The Provided Launchpad Project ID\\n     * @param LaunchpadProjectID The Launchpad Project ID To View\\n     */\\n    function ViewLaunchpadProject(uint LaunchpadProjectID) external view returns(ILaunchpadRegistry.Project memory) \\n    { \\n        return ILaunchpadRegistry(Params._LaunchpadRegistry).ViewProject(LaunchpadProjectID); \\n    }\\n\\n    /**\\n     * @dev Returns An Array Of Project Structs At The Provided Launchpad Project IDs\\n     * @param LaunchpadProjectIDs The Launchpad Project IDs To View\\n     * @return Projects An Array Of Project Structs\\n     * note: `Projects` Is An Array Of Project Structs\\n     */\\n    function ViewLaunchpadProjects(uint[] calldata LaunchpadProjectIDs) external view returns(ILaunchpadRegistry.Project[] memory) \\n    { \\n        return ILaunchpadRegistry(Params._LaunchpadRegistry).ViewProjects(LaunchpadProjectIDs); \\n    }\\n\\n    /**\\n     * @dev Returns The SaleID & SaleType At The Provided Launchpad ID\\n     * @param LaunchpadProjectID The Launchpad Project ID To View\\n     * @return SaleID The SaleID\\n     * @return SaleContractAddress The Sale Contract Address\\n     */\\n    function ViewSaleAtLaunchpadID(uint LaunchpadProjectID) external view returns (uint SaleID, address SaleContractAddress)\\n    {\\n        return ILaunchpadRegistry(Params._LaunchpadRegistry).ViewSaleInfo(LaunchpadProjectID);\\n    }\\n}\\n\\n/*-----------------------------------------------------*/\\n/*------------------ * INTERFACES * -------------------*/\\n/*-----------------------------------------------------*/\\n\\n/**\\n * @dev Interface For The Merkle Claimer\\n */\\ninterface IMerkle\\n{\\n    struct Claim\\n    {\\n        string _Name;            // [0] -> _Name\\n        bytes32 _Root;           // [1] -> _Root\\n        address _NFT;            // [2] -> _NFT\\n        address _Operator;       // [3] -> _Operator\\n        address _BurnNFT;        // [4] -> _BurnNFT\\n        uint _ClaimCost;         // [5] -> _ClaimCost\\n        uint _ProjectID;         // [6] -> _ProjectID\\n        uint _ClaimableAmount;   // [7] -> _ClaimableAmount\\n        uint _AmountClaimed;     // [8] -> _AmountClaimed\\n        uint _StartingTimestamp; // [9] -> _StartingTimestamp\\n        uint _SecondsInterval;   // [10] -> _SecondsInterval\\n    }\\n\\n    /**\\n     * @dev Starts A New Merkle Claim\\n     */\\n    function _NewClaim(Claim memory _NewClaim) external returns (uint ClaimIndex);\\n\\n    /**\\n     * @dev Overrides A Merkle Claim\\n     */\\n    function _OverrideMerkleClaim(uint ClaimIndex, Claim memory _NewClaim) external;\\n\\n    /**\\n     * @dev Changes The Current Merkle Root At The Provided Claim Index \\n     */\\n    function _ChangeRoot(uint ClaimIndex, bytes32 Root) external;\\n\\n    /**\\n     * @dev Returns The Claim Information For The Provided Claim Index\\n     */\\n    function ViewClaim(uint ClaimIndex) external view returns (Claim memory);\\n\\n    /**\\n     * @dev Returns Claim Information For The Provided Claim Indexes\\n     */\\n    function ViewClaims(uint[] calldata ClaimIndexes) external view returns (Claim[] memory);\\n}\\n\\n/**\\n * @dev Interface For The Live Mint Smart Contract\\n */\\ninterface ILiveMint\\n{\\n    struct Params\\n    {\\n        string _Name;             // [0] -> _Name   \\n        address _MintPass;        // [1] -> _MintPass\\n        address _Minter;          // [2] -> _Minter\\n        address _PolyptychSource; // [3] -> _PolyptychSource\\n        uint _MaxSupply;          // [4] -> _MaxSupply\\n        uint _ArtBlocksProjectID; // [5] -> _ArtBlocksProjectID \\n        uint _PolyStart;          // [6] -> _PolyStart\\n        uint _PolyEnd;            // [7] -> _PolyEnd\\n    }\\n\\n    /**\\n     * @dev Initializes Live Mint & Returns LiveMintProjectID\\n     */\\n    function _InitLiveMintArtist ( Params memory ) external returns ( uint );\\n}\\n\\n/**\\n * @dev Interface For The Marketplace Contracts\\n */\\ninterface IMarketplace \\n{ \\n    struct DutchSale\\n    {\\n        string _Name;                     // [0] -> _Name\\n        uint _ProjectIDArtBlocks;         // [1] -> _ProjectIDArtBlocks\\n        uint _PriceStart;                 // [2] -> _PriceStart\\n        uint _PriceEnd;                   // [3] -> _PriceEnd\\n        uint _MaxAmtPerPurchase;          // [4] -> _MaxAmtPerPurchase\\n        uint _MaximumAvailableForSale;    // [5] -> _MaximumAvailableForSale\\n        uint _StartingBlockUnixTimestamp; // [6] -> _StartingBlockUnixTimestamp\\n        uint _SecondsBetweenPriceDecay;   // [7] -> _SecondsBetweenPriceDecay\\n        uint _SaleStrip;                  // [8] -> _SaleStrip note: For Traditional MintPack transferFrom() Sales \\n    }\\n\\n    struct DutchSaleInternal\\n    {\\n        address _NFT;           // [0] -> _NFT\\n        address _Operator;      // [1] _Operator (Wallet That NFT Is Pulling From)\\n        uint _CurrentIndex;     // [2] _CurrentIndex (If Simple Sale Type, This Is The Next Token Index To Iterate Upon)\\n        uint _Type;             // [3] _SaleType (0 = Simple, 1 = TransferFrom, 2 = PurchaseTo, 3 = MintPack)\\n        bool _ActivePublic;     // [4] -> _ActivePublic\\n        bool _ActiveBrightList; // [5] -> _ActiveBrightList \\n        bool _Discount;         // [6] -> _Discount\\n        bool _ActiveRespend;    // [7] -> _ActiveRespend\\n    }\\n\\n    struct SalePresale\\n    {\\n        string _Name;              // [0] -> _Name\\n        address _Operator;         // [1] -> _Operator\\n        address _NFT;              // [2] -> _NFT\\n        uint _MaxForSale;          // [3] -> _MaxForSale\\n        uint _MaxPerPurchase;      // [4] -> _MaxPerPurchase\\n        uint _PricePresale;        // [5] -> _PricePresale\\n        uint _PricePublic;         // [6] -> _PricePublic\\n        uint _TimestampEndFullSet; // [7] -> _TimestampEndFullSet\\n        uint _TimestampEndCitizen; // [8] -> _TimestampEndCitizen\\n        uint _TimestampSaleStart;  // [9] -> _TimestampSaleStart\\n        uint _Type;                // [10] -> _Type\\n        uint _ProjectID;           // [11] -> _ProjectID\\n    }\\n\\n    struct SalePresaleRoots\\n    {\\n        bytes32 _RootEligibilityFullSet; // [0] -> _RootEligibilityFullSet\\n        bytes32 _RootEligibilityCitizen; // [1] -> _RootEligibilityCitizen\\n        bytes32 _RootAmountFullSet;      // [2] -> _RootAmountFullSet\\n        bytes32 _RootAmountCitizen;      // [3] -> _RootAmountCitizen\\n    }\\n\\n    struct SaleFixedPrice\\n    {\\n        string _Name;                 // [0] -> _Name\\n        uint _Price;                  // [1] -> _Price\\n        uint _MintPassProjectID;      // [2] -> _MintPassProjectID\\n        uint _Type;                   // [3] -> _Type\\n        uint _MinterProjectID;        // [4] -> _MinterProjectID\\n        uint _AmountForSale;          // [5] -> _AmountForSale\\n        uint _TimestampStart;         // [6] -> _TimestampStart\\n        uint _CurrentIndex;           // [7] -> _CurrentIndex\\n        uint _BatchPurchaseAmount;    // [8] -> _BatchPurchaseAmount\\n        address _NFT;                 // [9] -> _NFT\\n        address _Operator;            // [10] -> _Operator\\n        bytes32[] _RootEligibilities; // [11] -> _RootEligibilities\\n        bytes32[] _RootAmounts;       // [12] -> _RootAmounts\\n    }\\n\\n    /**\\n     * @dev Starts A Sale On The BasicMarketplace Contract\\n     * @param _Sale The Sale Parameters\\n     * @param _Roots The Sale Roots\\n     * @return MarketplaceSaleID\\n     */\\n    function _StartPresaleSale(SalePresale memory _Sale, SalePresaleRoots memory _Roots) external returns (uint);\\n\\n    /**\\n     * @dev Starts A Fixed Price Sale On The BasicMarketplace Contract\\n     * @param _Sale The Sale Parameters\\n     * @param _Discounts The Sale Discounts\\n     * @return MarketplaceSaleID\\n     */\\n    function _StartFixedPriceSale(SaleFixedPrice memory _Sale, uint[] calldata _Discounts) external returns (uint);\\n\\n    /**\\n     * @dev Initiates A New Sale On The DutchMarketplace Contract\\n     * @param _Sale The Sale Parameters\\n     * @param _State The Sale Internal State\\n     * @param RootsPrioriy The Merkle Roots For Priority\\n     * @param RootsAmounts The Merkle Roots For Amounts\\n     * @param DiscountAmounts The Discount Amounts\\n     * @return MarketplaceSaleID\\n     */\\n    function _StartSale (\\n        DutchSale memory _Sale, \\n        DutchSaleInternal memory _State, \\n        bytes32[] calldata RootsPrioriy, \\n        bytes32[] calldata RootsAmounts, \\n        uint[] calldata DiscountAmounts\\n    ) external returns ( uint );\\n\\n    /**\\n     * @dev Clears A Dutch Auction & Initiates Refunds & Proceeds\\n     * @param SaleIndex The Index Of The Sale To Initiate Refunds & Proceeds For\\n     */\\n    function _InitiateRefundsAndProceeds (uint SaleIndex) external;\\n\\n    /**\\n     * @dev Withdraws All ETH From The Marketplace To The Multisig\\n     */\\n    function _WithdrawETHFromSaleIndex(uint SaleIndex) external;\\n}\\n\\n/**\\n * @dev Interface For English Auction Contract\\n */\\ninterface IAuction\\n{\\n    struct Params\\n    {\\n        string _Name;                // [0] -> Name Of Auction\\n        bool _ClearingEnabled;       // [1] -> If Rebate Last Price Is Enabled (Everyone Pays Lowest Leaderboard Price)\\n        bool _UserSettlementEnabled; // [2] -> If Self-Service User Settlement Is Enabled (Bidders Can Settle Their Own Bids ETH & NFTs)\\n        uint _LeaderboardSize;       // [3] -> The Bid Threshold For NewMinimumBid (eg. 50 Valid Bids)\\n        uint _UnixStartTime;         // [4] -> Unix Start Time Of Auction\\n        uint _UnixEndTime;           // [5] -> Unix End Time Of Auction\\n        uint _MinBIPSIncrease;       // [6] -> Minimum BIPS (%) Increase On Each Subsequent Bid After Configured LeaderboardSize \\n        uint _SecondsExtension;      // [7] -> # Of Second(s) Of Extension For Auction (Input In Seconds)\\n        uint _SecondsThreshold;      // [8] -> # Of Seconds Within Auction End Time To Be Eligible For Auction Extension\\n        uint _InitialMinimumBid;     // [9] -> Initial Minimum Bid\\n        uint _ProjectIDMintPass;     // [10] -> The Factory MintPass ProjectID\\n        uint _MintPackAmount;        // [11] -> The Amount Of Mint Passes To Be Dispersed Per Leaderboard Spot\\n        address _NFT;                // [12] -> Address Of NFT Contract\\n        address _Operator;           // [13] -> Wallet Holding NFTs To Disperse\\n    }\\n\\n    /**\\n     * @dev Starts Auction\\n     * @param AuctionParams The Auction Parameters\\n     * @param MerkleRootsEligibilities The Merkle Roots For Eligibility\\n     * @param MerkleRootsAmounts The Merkle Roots For Amounts\\n     * @param DiscountAmounts The Discount Amounts\\n     * @return AuctionID\\n     */\\n    function _StartAuction (\\n        Params memory AuctionParams, \\n        bytes32[] calldata MerkleRootsEligibilities, \\n        bytes32[] calldata MerkleRootsAmounts, \\n        uint[] calldata DiscountAmounts\\n    ) external returns (uint);\\n\\n    /**\\n     * @dev Processes Auction Proceeds & NFTs (When TokenID Is Ambiguous)\\n     * @param AuctionID The AuctionID To Process\\n     */\\n    function _ProcessETHAndNFTsTokenIDsAmbiguous(uint AuctionID) external;\\n\\n    /**\\n     * @dev Processes Auction Proceeds & NFTs (When TokenID Matters)\\n     * @param AuctionID The AuctionID To Process\\n     */\\n    function _ProcessETHAndNFTsTokenIDsDistinct(uint AuctionID) external;\\n\\n    /**\\n     * @dev Processes Auction Proceeds & NFTs (When TokenID Is Unique) (Uses Leaderboard Ranking)\\n     * @param AuctionID The AuctionID To Process\\n     */\\n    function _ProcessETHAndNFTsTokenIDsSpecificRanked(uint AuctionID, uint[] calldata TokenIDs) external;\\n\\n    /**\\n     * @dev Processes Auction Proceeds & NFTs Mint Pack Style (Uses Leaderboard Ranking)\\n     * @param AuctionID The AuctionID To Process\\n     */\\n    function _ProcessETHAndNFTsMintPacksRanked(uint AuctionID) external;\\n}\\n\\n/**\\n * @dev Interface For Mint Pass Factory\\n */\\ninterface IMintPass\\n{\\n    struct Params\\n    {\\n        string _Name;              // [0] -> _Name\\n        string _Symbol;            // [1] -> _Symbol\\n        string _MetadataURI;       // [2] -> _MetadataURI\\n        uint _MaxSupply;           // [3] -> _MaxSupply\\n        uint _MintsPerPack;        // [4] -> _MintsPerPack\\n        uint _ArtBlocksProjectID;  // [5] -> _ArtBlocksProjectID note: For Cases Where Mint Pass ProjectID 1:1 With ProjectIDs\\n        uint _ReserveAmount;       // [6] -> _Reserve\\n        address _Marketplace;      // [7] -> _Marketplace\\n        address _LiveMint;         // [8] -> _LiveMint\\n    }\\n\\n    /**\\n     * @dev Creates A New Mint Pass Project & Returns The Address Of Deployment\\n     * @param MintPassParams The Mint Pass Parameters\\n     * @return MintPassAddress The Contract Address Of The New Mint Pass Project\\n     */\\n    function _InitMintPass ( Params memory MintPassParams ) external returns ( address );\\n\\n    /**\\n     * @dev Updates The Base URI For A Mint Pass Project\\n     * @param BaseURI The New BaseURI\\n     */\\n    function _NewBaseURI ( string calldata BaseURI ) external;\\n}\\n\\n/**\\n * @dev Interface For The Launchpad Registry Contract\\n */\\ninterface ILaunchpadRegistry\\n{\\n    struct Project\\n    {\\n        string _Name;                // [0] -> _Name\\n        bool _Active;                // [1] -> _Active\\n        uint _LiveMintArtistID;      // [2] -> _LiveMintArtistID\\n        uint _MaxSupply;             // [3] -> _MaxSupply\\n        uint _MintsPerPack;          // [4] -> _MintsPerPack\\n        uint _SaleID;                // [5] -> _SaleID\\n        address _MintPassAddress;    // [8] -> _MintPassAddress\\n        address _MarketplaceAddress; // [9] -> _MarketplaceAddress\\n        address _MintedWorkAddress;  // [10] -> _MintedWorkAddress\\n    }\\n\\n    /**\\n     * @dev Adds A New Project To The Launchpad Registry\\n     * @param LaunchpadRegistryProject The Launchpad Registry Project Struct\\n     * @return LaunchpadProjectID\\n     */\\n    function _NewProject ( Project memory LaunchpadRegistryProject ) external returns ( uint );\\n\\n    /**\\n     * @dev Returns Dutch Auction SaleID Corresponding To LaunchpadProjectID\\n     * @param LaunchpadProjectID The Launchpad ProjectID\\n     * @return SaleID\\n     */\\n    function ViewSaleIndex ( uint LaunchpadProjectID ) external view returns ( uint SaleID );\\n\\n    /**\\n     * @dev Returns Launchpad Project\\n     * @param LaunchpadProjectID The Launchpad ProjectID\\n     * @return Launchpad Project\\n     */\\n    function ViewProject ( uint LaunchpadProjectID ) external view returns ( Project memory );\\n\\n    /**\\n     * @dev Returns Launchpad Projects\\n     * @param Indexes The Indexes To Return\\n     * @return Launchpad Projects\\n     */\\n    function ViewProjects ( uint[] calldata Indexes ) external view returns ( Project[] memory );\\n\\n    /**\\n     * @dev Returns Launchpad Projects In A Specified Range\\n     * @param StartingIndex The Starting Index\\n     * @param EndingIndex The Ending Index\\n     * @return Launchpad Projects\\n     */\\n    function ViewProjectsInRange ( uint StartingIndex, uint EndingIndex ) external view returns ( Project[] memory );\\n\\n    /**\\n     * @dev Returns Mint Pass Address That Corresponds To Launchpad ProjectID\\n     * @param LaunchpadProjectID The Launchpad ProjectID\\n     * @return MintPassAddress\\n     */\\n    function ViewMintPassAddress ( uint LaunchpadProjectID ) external view returns ( address );\\n\\n    /**\\n     * @dev Returns The SaleID & Sale Contract Address At The Provided Launchpad ID\\n     * @param LaunchpadProjectID The Launchpad Project ID To View\\n     * @return SaleID The SaleID\\n     * @return SaleContractAddress The Sale Contract Address\\n     */\\n    function ViewSaleInfo(uint LaunchpadProjectID) external view returns (uint SaleID, address SaleContractAddress);\\n\\n}\\n\\n/**\\n * @dev Interface For The Waitlist Contract\\n */\\ninterface IWaitlist\\n{\\n    /**\\n     * @dev Instantiates A New Waitlist\\n     * @param Root The Merkle Root To Start With\\n     * @return WaitlistIndex The Index Of The New Waitlist\\n     */\\n    function _NewWaitlist(string calldata Name, bytes32 Root) external returns (uint WaitlistIndex);\\n\\n    /**\\n     * @dev Changes The Waitlist Root\\n     * @param WaitlistIndex The Waitlist Index To Change\\n     * @param Root The Merkle Root To Change\\n     */\\n    function _NewWaitlistRoot(uint WaitlistIndex, bytes32 Root) external;\\n\\n    /**\\n     * @dev Returns A Waitlist At `WaitlistIndex`\\n     * @param WaitlistIndex The Index Of The Waitlist To Return\\n     * @return Waitlist The Waitlist At The Provided Index\\n     */\\n    function ReadWaitlist(uint WaitlistIndex) external view returns (address[] memory);\\n}\\n\\n/**\\n * @dev Interface To Upgrade The Launchpad Contract\\n */\\ninterface ICustom \\n{ \\n    /**\\n     * @dev Upgrades The Launchpad Contract\\n     * @param NewAddress The New Launchpad Contract Address\\n     */\\n    function ____LaunchpadOverrideAddress ( address NewAddress ) external; \\n}\"\r\n    },\r\n    \"contracts/MissionControl.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n * @title MissionControl\\n * @notice Smart Contract To Facilitate Owner, Admin, & Operator Management & Access Control\\n */\\npragma solidity 0.8.19;\\ncontract MissionControl\\n{\\n    address public _OWNER;                              // Owner Of The Contract        \\n    address public _LAUNCHPAD;                          // Address Of The Launchpad Contract\\n    mapping(address => bool) public AuthorizedAdmin;    // [Address] -> [IsAdmin?]\\n    mapping(address => bool) public AuthorizedOperator; // [Address] -> [IsOperator?]\\n\\n    /*-----------------------------------------------------*/\\n    /*------------------ * CONSTRUCTOR * ------------------*/\\n    /*-----------------------------------------------------*/\\n\\n    constructor()\\n    {\\n        _OWNER = 0xe06F5FAE754e81Bc050215fF89B03d9e9FF20700;                // `operator.brightmoments.eth`\\n        AuthorizedAdmin[msg.sender] = true;                                 // `deployer.brightmoments.eth`\\n        AuthorizedAdmin[0x90D98d5A1fD21B7cEa4D5c18341607ed1a8345c0] = true; // `gitpancake.brightmoments.eth`\\n        AuthorizedAdmin[0x18B7511938FBe2EE08ADf3d4A24edB00A5C9B783] = true; // `phil.brightmoments.eth`\\n        AuthorizedAdmin[0x91594b5E5d74FCCB3f71674eE74C5F4D44f333D5] = true; // `future.brightmoments.eth`\\n    }\\n\\n    /*---------------------------------------------------------*/\\n    /*------------------ * ADMIN FUNCTIONS * ------------------*/\\n    /*---------------------------------------------------------*/\\n\\n    /**\\n     * @dev Changes The Launchpad Address\\n     */\\n    function __AdminChangeOperatorState(address _Address) external onlyAdmin { AuthorizedOperator[_Address] = !AuthorizedOperator[_Address]; }\\n    \\n    /*---------------------------------------------------------*/\\n    /*------------------ * OWNER FUNCTIONS * ------------------*/\\n    /*---------------------------------------------------------*/\\n\\n    /**\\n     * @dev Authorizes Or Deauthorizes An Address's Admin Status\\n     * @param _Address: Address To Authorize Or Deauthorize\\n     */\\n    function ___OwnerChangeAdminState(address _Address) external onlyOwner { AuthorizedAdmin[_Address] = !AuthorizedAdmin[_Address]; }\\n\\n    /**\\n     * @dev Transfers Ownership Of The Contract\\n     * @param _NewOwner: Address To Transfer Ownership To\\n     */\\n    function ___OwnerTransferOwnership(address _NewOwner) external onlyOwner { _OWNER = _NewOwner; }\\n\\n    /*-------------------------------------------------------------*/\\n    /*------------------ * LAUNCHPAD FUNCTIONS * ------------------*/\\n    /*-------------------------------------------------------------*/\\n\\n    /**\\n     * @dev Overrides The Launchpad Address\\n     * @param _Address: Address To Override The Launchpad Address With\\n     * @notice This Function Is Only Accessible By The Launchpad Contract Or An Authorized Admin\\n     */\\n    function ____LaunchpadOverrideAddress(address _Address) external onlyLaunchpad { _LAUNCHPAD = _Address; }\\n\\n    /*----------------------------------------------------------*/\\n    /*------------------ * ACCESS MODIFIERS * ------------------*/\\n    /*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev onlyOperator Access Modifier\\n     */\\n    modifier onlyOperator\\n    {\\n        require(AuthorizedOperator[msg.sender] || AuthorizedAdmin[msg.sender] || msg.sender == _LAUNCHPAD, \\\"MissionControl | onlyOperator | Caller Is Not Operator Or Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyAdmin Access Modifier\\n     */\\n    modifier onlyAdmin\\n    {   \\n        require(AuthorizedAdmin[msg.sender], \\\"MissionControl | onlyAdmin | Caller Is Not Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyOwner Access Modifier\\n     */\\n    modifier onlyOwner\\n    {\\n        require(_OWNER == msg.sender, \\\"MissionControl | onlyOwner | Caller Is Not Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyLaunchpad Access Modifier\\n     */\\n    modifier onlyLaunchpad\\n    {\\n        require(_LAUNCHPAD == msg.sender || AuthorizedAdmin[msg.sender], \\\"MissionControl | onlyLaunchpad | Caller Is Not Launchpad\\\");\\n        _;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"LiveMintEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"ProjectInvoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"ProjectModified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuthorizedAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"FinalizeDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"FinalizeDynamicMarketplaceSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"FinalizeEnglishAuctionMintPacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"FinalizeEnglishAuctionTokenIDsAmbiguous\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"FinalizeEnglishAuctionTokenIDsDistinct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"TokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"FinalizeEnglishAuctionTokenIDsDistinctRanked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PolyptychSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiveMint.Params\",\"name\":\"ParamsMinter\",\"type\":\"tuple\"}],\"name\":\"InitLiveMintArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_MetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ReserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"}],\"internalType\":\"struct IMintPass.Params\",\"name\":\"ParamsMintPass\",\"type\":\"tuple\"}],\"name\":\"InitMintPass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"MintPassAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_MetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ReserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"}],\"internalType\":\"struct IMintPass.Params\",\"name\":\"ParamsMintPass\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectIDArtBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PriceStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PriceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxAmtPerPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaximumAvailableForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingBlockUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsBetweenPriceDecay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SaleStrip\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarketplace.DutchSale\",\"name\":\"ParamsSale\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_CurrentIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Type\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_Discount\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_ActiveRespend\",\"type\":\"bool\"}],\"internalType\":\"struct IMarketplace.DutchSaleInternal\",\"name\":\"ParamsSaleInternal\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"RootsPriority\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"RootsAmounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"DiscountAmounts\",\"type\":\"uint256[]\"}],\"name\":\"InitSaleDutch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_MetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ReserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"}],\"internalType\":\"struct IMintPass.Params\",\"name\":\"ParamsMintPass\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_ClearingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_UserSettlementEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_LeaderboardSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UnixStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UnixEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MinBIPSIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsExtension\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_InitialMinimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectIDMintPass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintPackAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"}],\"internalType\":\"struct IAuction.Params\",\"name\":\"ParamsAuction\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"MerkleRootsEligibilities\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"MerkleRootsAmounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"DiscountAmounts\",\"type\":\"uint256[]\"}],\"name\":\"InitSaleEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_MetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ReserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"}],\"internalType\":\"struct IMintPass.Params\",\"name\":\"ParamsMintPass\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintPassProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MinterProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TimestampStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CurrentIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BatchPurchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_RootEligibilities\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_RootAmounts\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IMarketplace.SaleFixedPrice\",\"name\":\"ParamsSale\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"DiscountAmounts\",\"type\":\"uint256[]\"}],\"name\":\"InitSaleFixedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_MetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ReserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"}],\"internalType\":\"struct IMintPass.Params\",\"name\":\"ParamsMintPass\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PricePresale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TimestampEndFullSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TimestampEndCitizen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TimestampSaleStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarketplace.SalePresale\",\"name\":\"ParamsSale\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_RootEligibilityFullSet\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_RootEligibilityCitizen\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_RootAmountFullSet\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_RootAmountCitizen\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMarketplace.SalePresaleRoots\",\"name\":\"Roots\",\"type\":\"tuple\"}],\"name\":\"InitSalePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"}],\"name\":\"MerkleClaimerNewRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerkle.Claim\",\"name\":\"_NewClaim\",\"type\":\"tuple\"}],\"name\":\"MerkleClaimerStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Params\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_Active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_DutchMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DynamicMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EnglishMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FactoryMintedWorks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FactoryMintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LaunchpadRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MerkleClaimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Waitlist\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"ViewLaunchpadProject\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_Active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_LiveMintArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SaleID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_MintPassAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MarketplaceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWorkAddress\",\"type\":\"address\"}],\"internalType\":\"struct ILaunchpadRegistry.Project\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"LaunchpadProjectIDs\",\"type\":\"uint256[]\"}],\"name\":\"ViewLaunchpadProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_Active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_LiveMintArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MintsPerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SaleID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_MintPassAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MarketplaceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWorkAddress\",\"type\":\"address\"}],\"internalType\":\"struct ILaunchpadRegistry.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"}],\"name\":\"ViewMerkleClaimerClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerkle.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ClaimIndexes\",\"type\":\"uint256[]\"}],\"name\":\"ViewMerkleClaimerClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerkle.Claim[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchpadProjectID\",\"type\":\"uint256\"}],\"name\":\"ViewSaleAtLaunchpadID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"SaleID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"SaleContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"WaitlistIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"}],\"name\":\"WaitlistChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"}],\"name\":\"WaitlistStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LAUNCHPAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__ActiveToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"__AdminChangeOperatorState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeAuctionMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeBasicMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeFactoryMintPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeFactoryMintedWorks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeLiveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeMerkleClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeAuctionMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeDutchMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeDynamicMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeFactoryMintPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeFactoryMintedWorks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeLaunchpadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeLiveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__UpgradeMerkleClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"Datas\",\"type\":\"bytes[]\"}],\"name\":\"___InitTransactions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"_Active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_DutchMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DynamicMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EnglishMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiveMint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FactoryMintedWorks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FactoryMintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LaunchpadRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MerkleClaimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Waitlist\",\"type\":\"address\"}],\"internalType\":\"struct Launchpad.StateParameters\",\"name\":\"_State\",\"type\":\"tuple\"}],\"name\":\"___NewState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"___OwnerChangeAdminState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NewOwner\",\"type\":\"address\"}],\"name\":\"___OwnerTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewLaunchpadAddress\",\"type\":\"address\"}],\"name\":\"___UpgradeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"____LaunchpadOverrideAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Launchpad", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}