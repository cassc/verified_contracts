{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\n// File contracts/xtoken/v3/interfaces/IXTokenIssuing.sol\r\n// License-Identifier: MIT\r\n\r\ninterface IXTokenIssuing {\r\n    function burnAndXUnlock(\r\n        address xToken,\r\n        address recipient,\r\n        address rollbackAccount,\r\n        uint256 amount,\r\n        uint256 nonce,\r\n        bytes calldata extData,\r\n        bytes memory extParams\r\n    ) external payable returns(bytes32);\r\n\r\n    function rollbackBurnAndXUnlock(\r\n        uint256 originalChainId,\r\n        address originalToken,\r\n        address originalSender,\r\n        address recipient,\r\n        address rollbackAccount,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    ) external;\r\n\r\n    function issue(\r\n        uint256 remoteChainId,\r\n        address originalToken,\r\n        address originalSender,\r\n        address recipient,\r\n        address rollbackAccount,\r\n        uint256 amount,\r\n        uint256 nonce,\r\n        bytes calldata extData\r\n    ) external;\r\n\r\n    function guard() external returns(address);\r\n}\r\n\r\n// File contracts/xtoken/v3/interfaces/IXTokenCallback.sol\r\n// License-Identifier: MIT\r\n\r\ninterface IXTokenCallback {\r\n    function xTokenCallback(\r\n        uint256 transferId,\r\n        address xToken,\r\n        uint256 amount,\r\n        bytes calldata extData\r\n    ) external;\r\n}\r\n\r\ninterface IXTokenRollbackCallback {\r\n    function xTokenRollbackCallback(\r\n        uint256 transferId,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/token/ERC20/IERC20.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File contracts/xtoken/v3/templates/interfaces/IXRINGLockBox.sol\r\n// License-Identifier: MIT\r\n\r\ninterface IXRINGLockBox {\r\n    function depositFor(address to, uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/introspection/IERC165.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/introspection/ERC165.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File contracts/xtoken/v3/templates/XRingConvertor.sol\r\n// License-Identifier: Apache-2.0\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract XRingConvertor is IXTokenCallback, IXTokenRollbackCallback, ERC165 {\r\n    IXRINGLockBox public lockBox;\r\n    IXTokenIssuing public xTokenIssuing;\r\n    address public immutable RING;\r\n    address public immutable XRING;\r\n\r\n    mapping(uint256=>address) public senders;\r\n\r\n    event IssueRing(uint256 transferId, address recipient, uint256 amount);\r\n    event RollbackBurn(uint256 transferId, address originalSender, uint256 amount);\r\n    event BurnAndXUnlock(uint256 transferId, address sender, address recipient, uint256 amount);\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IXTokenCallback).interfaceId ||\r\n            interfaceId == type(IXTokenRollbackCallback).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyXTokenIssuing() {\r\n        require(address(xTokenIssuing) == msg.sender, \"invalid sender\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyXTokenIssuingAuthorized() {\r\n        require(address(xTokenIssuing) == msg.sender || xTokenIssuing.guard() == msg.sender, \"invalid sender\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _xRing, address _ring, address _xTokenIssuing, address _lockBox) {\r\n        RING = _ring;\r\n        XRING = _xRing;\r\n        lockBox = IXRINGLockBox(_lockBox);\r\n        xTokenIssuing = IXTokenIssuing(_xTokenIssuing);\r\n        IERC20(_ring).approve(_lockBox, type(uint256).max);\r\n        IERC20(_xRing).approve(_lockBox, type(uint256).max);\r\n        IERC20(_xRing).approve(_xTokenIssuing, type(uint256).max);\r\n    }\r\n\r\n    function xTokenCallback(\r\n        uint256 _transferId,\r\n        address _xToken,\r\n        uint256 _amount,\r\n        bytes calldata extData\r\n    ) onlyXTokenIssuingAuthorized external {\r\n        address recipient = address(bytes20(extData));\r\n        require(_xToken == XRING, \"invalid xtoken\");\r\n        lockBox.depositFor(recipient, _amount);\r\n        emit IssueRing(_transferId, recipient, _amount);\r\n    }\r\n\r\n    function xTokenRollbackCallback(\r\n        uint256 _transferId,\r\n        address _xToken,\r\n        uint256 _amount\r\n    ) onlyXTokenIssuing external {\r\n        require(_xToken == XRING, \"invalid xtoken\");\r\n        address originalSender = senders[_transferId];\r\n        lockBox.depositFor(originalSender, _amount);\r\n        emit RollbackBurn(_transferId, originalSender, _amount);\r\n    }\r\n\r\n    function burnAndXUnlock(\r\n        address _recipient,\r\n        address _rollbackAccount,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        bytes calldata _extData,\r\n        bytes memory _extParams\r\n    ) payable external {\r\n        IERC20(RING).transferFrom(msg.sender, address(this), _amount);\r\n        lockBox.withdraw(_amount);\r\n        bytes32 transferId = xTokenIssuing.burnAndXUnlock{value: msg.value}(XRING, _recipient, _rollbackAccount, _amount, _nonce, _extData, _extParams);\r\n        uint256 id = uint256(transferId);\r\n        senders[id] = msg.sender;\r\n        emit BurnAndXUnlock(id, msg.sender, _recipient, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xRing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ring\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xTokenIssuing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnAndXUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssueRing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RollbackBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XRING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollbackAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extParams\",\"type\":\"bytes\"}],\"name\":\"burnAndXUnlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBox\",\"outputs\":[{\"internalType\":\"contract IXRINGLockBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"senders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extData\",\"type\":\"bytes\"}],\"name\":\"xTokenCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenIssuing\",\"outputs\":[{\"internalType\":\"contract IXTokenIssuing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"xTokenRollbackCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XRingConvertor", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000081e32d4652be82ae225dedd1bd0bf3bcba8fee070000000000000000000000009469d013805bffb7d3debe5e7839237e535ec483000000000000000000000000dc0c760c0fb4672d06088515f6446a71df0c64c100000000000000000000000000000000062d35a6f9f82305c47a786527896578", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d9b0ff39f3b8f28dd5702c87871fd8f787813216ab544ff17c77bdb735302c64"}