{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/sweepers/Sudoswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {LSSVMPair} from 'lssvm2/LSSVMPair.sol';\\nimport {LSSVMPairETH} from 'lssvm2/LSSVMPairETH.sol';\\nimport {LSSVMPairERC20} from 'lssvm2/LSSVMPairERC20.sol';\\nimport {GDACurve} from 'lssvm2/bonding-curves/GDACurve.sol';\\nimport {LSSVMPairFactory, IERC721, IERC1155, ILSSVMPairFactoryLike} from 'lssvm2/LSSVMPairFactory.sol';\\nimport {IPropertyChecker} from 'lssvm2/property-checking/IPropertyChecker.sol';\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport {CannotSetNullAddress, TransferFailed} from '@floor/utils/Errors.sol';\\n\\nimport {ISweeper} from '@floor-interfaces/actions/Sweeper.sol';\\n\\n/**\\n * Takes ETH and deposits it into individual pools against NFT collections. This allows\\n * the sale price to be put onto a curve, allowing external parties to sell into it with\\n * instant liquidity. When a purchase is made, the price will dip slightly and continue\\n * to rise.\\n *\\n * When additional ETH is deposited against a pool that already exists it will reset the\\n * ETH price to the previously held ETH balance and then restart. This prevents the curve\\n * rising without sufficient ETH and then allowing for an over generous trade when more\\n * ETH is deposited.\\n *\\n * @dev Only the recipient can withdraw ETH. This would mean that it would have to\\n * be the {Treasury} that makes the call. If this is the case, then we should be able\\n * to run this via an {Action}. We will need to test this theory.\\n *\\n * @dev Alpha/lambda graphing calculator can be found here:\\n * https://www.desmos.com/calculator/03pdgzfpo4\\n */\\ncontract SudoswapSweeper is ISweeper, Ownable, ReentrancyGuard {\\n\\n    /// External Sudoswap contracts\\n    LSSVMPairFactory public immutable pairFactory;\\n    GDACurve public immutable gdaCurve;\\n\\n    /// The address of our {Treasury} that will receive assets\\n    address payable immutable treasury;\\n\\n    /// A mapping of our collections to their sweeper pool, allowing us to update\\n    /// and deposit additional ETH over time.\\n    mapping (address => LSSVMPairETH) public sweeperPools;\\n\\n    /// Controls how fast the price decays\\n    uint80 internal alphaAndLambda;\\n\\n    /// Our initial spot price is set as a low value that builds over time. This\\n    /// amount should be below floor of our lowest asset.\\n    uint128 public constant initialSpotPrice = 0.01 ether;\\n\\n    /**\\n     * Defines our immutable contracts.\\n     */\\n    constructor(address payable _treasury, address payable _pairFactory, address _gdaCurve) {\\n        // Ensure that we don't reference null addresses\\n        if (_treasury == address(0) || _pairFactory == address(0) || _gdaCurve == address(0)) {\\n            revert CannotSetNullAddress();\\n        }\\n\\n        // Register our contracts\\n        treasury = _treasury;\\n        pairFactory = LSSVMPairFactory(_pairFactory);\\n        gdaCurve = GDACurve(_gdaCurve);\\n\\n        // Set our default alpha/lambda value\\n        setAlphaLambda(1.05e9, 0.000005e9);\\n    }\\n\\n    /**\\n     * Deposits ETH into a Sudoswap pool position to purchase ERC721 tokens over time. This\\n     * uses a GDA curve to gradually increase the offered price over time.\\n     *\\n     * @dev This execution does not support ERC1155\\n     */\\n    function execute(address[] calldata collections, uint[] calldata amounts, bytes calldata /* data */)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        returns (string memory)\\n    {\\n        // Loop through collections\\n        for (uint i; i < collections.length; ++i) {\\n\\n            // TODO: Check if collection is ERC20\\n\\n            // Check if a sweeper pool already exists. If it doesn't then we need\\n            // to create it with sufficient ETH.\\n            if (address(sweeperPools[collections[i]]) == address(0)) {\\n                // Map our collection to a newly created pair\\n                sweeperPools[collections[i]] = pairFactory.createPairERC721ETH{value: amounts[i]}(\\n                    IERC721(collections[i]),  // _nft\\n                    gdaCurve,                 // _bondingCurve\\n                    treasury,                 // _assetRecipient\\n                    LSSVMPair.PoolType.TOKEN, // _poolType\\n                    (uint128(alphaAndLambda) << 48) + uint128(uint48(block.timestamp)), // _delta\\n                    0,                        // _fee\\n                    initialSpotPrice,         // _spotPrice\\n                    address(0),               // _propertyChecker\\n                    new uint[](0)             // _initialNFTIDs\\n                );\\n            }\\n            // If the sweeper _does_ already exist, then we can just fund it with\\n            // additional ETH.\\n            else {\\n                // When we provide additional ETH, we need to reset the spot price and delta\\n                // to ensure that we aren't sweeping above market price.\\n                LSSVMPairETH pair = sweeperPools[collections[i]];\\n\\n                uint pairBalance = payable(pair).balance;\\n                if (pair.spotPrice() > pairBalance) {\\n                    // If the pair balance is below the initial starting threshold, then we will\\n                    // reset the spot price to that as a minimum.\\n                    if (pairBalance < initialSpotPrice) {\\n                        pairBalance = initialSpotPrice;\\n                    }\\n\\n                    // Update the spot price to either the current pair balance (before deposit)\\n                    // or to the initial spot price defined by the contract.\\n                    pair.changeSpotPrice(uint128(pairBalance));\\n\\n                    // Update the delta back to the initial price\\n                    pair.changeDelta((uint128(alphaAndLambda) << 48) + uint128(uint48(block.timestamp)));\\n                }\\n\\n                // Deposit ETH to pair\\n                (bool sent,) = payable(pair).call{value: amounts[i]}('');\\n                if (!sent) revert TransferFailed();\\n            }\\n        }\\n\\n        // Return an empty string as no message to store\\n        return '';\\n    }\\n\\n    /**\\n     * Withdraws any remaining ETH from the pool and transfers it to a recipient. This\\n     * will almost always be the {Treasury}.\\n     *\\n     * @dev This will be run as a {Treasury} {Action}.\\n     */\\n    function endSweep(address collection) public onlyOwner {\\n        // Withdraw all ETH from the pool\\n        sweeperPools[collection].withdrawAllETH();\\n\\n        // Transfer it to our Treasury\\n        (bool sent,) = treasury.call{value: payable(address(this)).balance}('');\\n        if (!sent) revert TransferFailed();\\n    }\\n\\n    /**\\n     * Specify that anyone can run this sweeper.\\n     */\\n    function permissions() public pure override returns (bytes32) {\\n        return '';\\n    }\\n\\n    /**\\n     * Allows us to set a new alpha lambda value that will affect how quickly the ETH\\n     * value will rise and fall.\\n     */\\n    function setAlphaLambda(uint alpha, uint lambda) public onlyOwner {\\n        require(alpha > 1e9 && alpha <= 2e9);\\n        require(lambda >= 0 && lambda <= type(uint40).max);\\n\\n        alphaAndLambda = uint80((alpha << 40) + lambda);\\n    }\\n\\n    /**\\n     * A helper function that will assist in calculating an alpha lambda. This can be used\\n     * in conjunection with the `setAlphaLambda` function to get a desired value.\\n     *\\n     * @dev Magic lambda for 2x increase or 50% decrease per day is when _lambda = 11574\\n     * @dev Magic lambda for 1.5x increase or 33% decrease per day is when _lambda = 6770\\n     * @dev Magic lambda for 1.33x increase or 25% decrease per day is when _lambda = 4802\\n     */\\n    function getPackedDelta(uint40 _alpha, uint40 _lambda, uint48 _time) public pure returns (uint128) {\\n        return ((uint128(_alpha) << 88)) | ((uint128(_lambda) << 48)) | uint128(_time);\\n    }\\n\\n    /**\\n     * Allow the contract to receive ETH back during the `endSweep` call.\\n     */\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/LSSVMPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IRoyaltyEngineV1} from \\\"manifoldxyz/IRoyaltyEngineV1.sol\\\";\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport {LSSVMRouter} from \\\"./LSSVMRouter.sol\\\";\\nimport {ICurve} from \\\"./bonding-curves/ICurve.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"./ILSSVMPairFactoryLike.sol\\\";\\nimport {CurveErrorCodes} from \\\"./bonding-curves/CurveErrorCodes.sol\\\";\\nimport {IOwnershipTransferReceiver} from \\\"./lib/IOwnershipTransferReceiver.sol\\\";\\nimport {OwnableWithTransferCallback} from \\\"./lib/OwnableWithTransferCallback.sol\\\";\\n\\n/**\\n * @title The base contract for an NFT/TOKEN AMM pair\\n * @author boredGenius, 0xmons, 0xCygaar\\n * @notice This implements the core swap logic from NFT to TOKEN\\n */\\nabstract contract LSSVMPair is OwnableWithTransferCallback, ERC721Holder, ERC1155Holder {\\n    /**\\n     * Library usage **\\n     */\\n\\n    using Address for address;\\n\\n    /**\\n     *  Enums **\\n     */\\n\\n    enum PoolType {\\n        TOKEN,\\n        NFT,\\n        TRADE\\n    }\\n\\n    /**\\n     * Constants **\\n     */\\n\\n    /**\\n     * @dev 50%, must <= 1 - MAX_PROTOCOL_FEE (set in LSSVMPairFactory)\\n     */\\n    uint256 internal constant MAX_TRADE_FEE = 0.5e18;\\n\\n    /**\\n     *  Immutable params **\\n     */\\n\\n    /**\\n     * @notice Sudoswap Royalty Engine\\n     */\\n    IRoyaltyEngineV1 public immutable ROYALTY_ENGINE;\\n\\n    /**\\n     *  Storage variables **\\n     */\\n\\n    /**\\n     * @dev This is generally used to mean the immediate sell price for the next marginal NFT.\\n     * However, this should NOT be assumed, as bonding curves may use spotPrice in different ways.\\n     * Use getBuyNFTQuote and getSellNFTQuote for accurate pricing info.\\n     */\\n    uint128 public spotPrice;\\n\\n    /**\\n     * @notice The parameter for the pair's bonding curve.\\n     * Units and meaning are bonding curve dependent.\\n     */\\n    uint128 public delta;\\n\\n    /**\\n     * @notice The spread between buy and sell prices, set to be a multiplier we apply to the buy price\\n     * Fee is only relevant for TRADE pools. Units are in base 1e18.\\n     */\\n    uint96 public fee;\\n\\n    /**\\n     * @notice The address that swapped assets are sent to.\\n     * For TRADE pools, assets are always sent to the pool, so this is used to track trade fee.\\n     * If set to address(0), will default to owner() for NFT and TOKEN pools.\\n     */\\n    address payable internal assetRecipient;\\n\\n    /**\\n     *  Events\\n     */\\n\\n    event SwapNFTInPair(uint256 amountOut, uint256[] ids);\\n    event SwapNFTInPair(uint256 amountOut, uint256 numNFTs);\\n    event SwapNFTOutPair(uint256 amountIn, uint256[] ids);\\n    event SwapNFTOutPair(uint256 amountIn, uint256 numNFTs);\\n    event SpotPriceUpdate(uint128 newSpotPrice);\\n    event TokenDeposit(uint256 amount);\\n    event TokenWithdrawal(uint256 amount);\\n    event NFTWithdrawal(uint256[] ids);\\n    event NFTWithdrawal(uint256 numNFTs);\\n    event DeltaUpdate(uint128 newDelta);\\n    event FeeUpdate(uint96 newFee);\\n    event AssetRecipientChange(address indexed a);\\n\\n    /**\\n     *  Errors\\n     */\\n\\n    error LSSVMPair__NotRouter();\\n    error LSSVMPair__CallFailed();\\n    error LSSVMPair__InvalidDelta();\\n    error LSSVMPair__WrongPoolType();\\n    error LSSVMPair__OutputTooSmall();\\n    error LSSVMPair__ZeroSwapAmount();\\n    error LSSVMPair__RoyaltyTooLarge();\\n    error LSSVMPair__TradeFeeTooLarge();\\n    error LSSVMPair__InvalidSpotPrice();\\n    error LSSVMPair__TargetNotAllowed();\\n    error LSSVMPair__NftNotTransferred();\\n    error LSSVMPair__AlreadyInitialized();\\n    error LSSVMPair__FunctionNotAllowed();\\n    error LSSVMPair__DemandedInputTooLarge();\\n    error LSSVMPair__NonTradePoolWithTradeFee();\\n    error LSSVMPair__BondingCurveError(CurveErrorCodes.Error error);\\n\\n    constructor(IRoyaltyEngineV1 royaltyEngine) {\\n        ROYALTY_ENGINE = royaltyEngine;\\n    }\\n\\n    /**\\n     * @notice Called during pair creation to set initial parameters\\n     * @dev Only called once by factory to initialize.\\n     * We verify this by making sure that the current owner is address(0).\\n     * The Ownable library we use disallows setting the owner to be address(0), so this condition\\n     * should only be valid before the first initialize call.\\n     * @param _owner The owner of the pair\\n     * @param _assetRecipient The address that will receive the TOKEN or NFT sent to this pair during swaps. NOTE: If set to address(0), they will go to the pair itself.\\n     * @param _delta The initial delta of the bonding curve\\n     * @param _fee The initial % fee taken, if this is a trade pair\\n     * @param _spotPrice The initial price to sell an asset into the pair\\n     */\\n    function initialize(\\n        address _owner,\\n        address payable _assetRecipient,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice\\n    ) external {\\n        if (owner() != address(0)) revert LSSVMPair__AlreadyInitialized();\\n        __Ownable_init(_owner);\\n\\n        ICurve _bondingCurve = bondingCurve();\\n        PoolType _poolType = poolType();\\n        if (_poolType != PoolType.TRADE) {\\n            if (_fee != 0) revert LSSVMPair__NonTradePoolWithTradeFee();\\n        } else {\\n            if (_fee > MAX_TRADE_FEE) revert LSSVMPair__TradeFeeTooLarge();\\n            fee = _fee;\\n        }\\n\\n        assetRecipient = _assetRecipient;\\n\\n        if (!_bondingCurve.validateDelta(_delta)) revert LSSVMPair__InvalidDelta();\\n        if (!_bondingCurve.validateSpotPrice(_spotPrice)) revert LSSVMPair__InvalidSpotPrice();\\n        delta = _delta;\\n        spotPrice = _spotPrice;\\n    }\\n\\n    /**\\n     * External state-changing functions\\n     */\\n\\n    /**\\n     * @notice Sends token to the pair in exchange for a specific set of NFTs\\n     * @dev To compute the amount of token to send, call bondingCurve.getBuyInfo\\n     * This swap is meant for users who want specific IDs. Also higher chance of\\n     * reverting if some of the specified IDs leave the pool before the swap goes through.\\n     * @param nftIds The list of IDs of the NFTs to purchase\\n     * @param maxExpectedTokenInput The maximum acceptable cost from the sender. If the actual\\n     * amount is greater than this value, the transaction will be reverted.\\n     * @param nftRecipient The recipient of the NFTs\\n     * @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\\n     * @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\\n     * @return - The amount of token used for purchase\\n     */\\n    function swapTokenForSpecificNFTs(\\n        uint256[] calldata nftIds,\\n        uint256 maxExpectedTokenInput,\\n        address nftRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) external payable virtual returns (uint256);\\n\\n    /**\\n     * @notice Sends a set of NFTs to the pair in exchange for token\\n     * @dev To compute the amount of token to that will be received, call bondingCurve.getSellInfo.\\n     * @param nftIds The list of IDs of the NFTs to sell to the pair\\n     * @param minExpectedTokenOutput The minimum acceptable token received by the sender. If the actual\\n     * amount is less than this value, the transaction will be reverted.\\n     * @param tokenRecipient The recipient of the token output\\n     * @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for\\n     * ETH pairs.\\n     * @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for\\n     * ETH pairs.\\n     * @return outputAmount The amount of token received\\n     */\\n    function swapNFTsForToken(\\n        uint256[] calldata nftIds,\\n        uint256 minExpectedTokenOutput,\\n        address payable tokenRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) external virtual returns (uint256 outputAmount);\\n\\n    /**\\n     * View functions\\n     */\\n\\n    /**\\n     * @dev Used as read function to query the bonding curve for buy pricing info\\n     * @param numNFTs The number of NFTs to buy from the pair\\n     */\\n    function getBuyNFTQuote(uint256 assetId, uint256 numNFTs)\\n        external\\n        view\\n        returns (\\n            CurveErrorCodes.Error error,\\n            uint256 newSpotPrice,\\n            uint256 newDelta,\\n            uint256 inputAmount,\\n            uint256 protocolFee,\\n            uint256 royaltyAmount\\n        )\\n    {\\n        uint256 tradeFee;\\n        (error, newSpotPrice, newDelta, inputAmount, tradeFee, protocolFee) =\\n            bondingCurve().getBuyInfo(spotPrice, delta, numNFTs, fee, factory().protocolFeeMultiplier());\\n\\n        if (numNFTs != 0) {\\n            // Calculate the inputAmount minus tradeFee and protocolFee\\n            uint256 inputAmountMinusFees = inputAmount - tradeFee - protocolFee;\\n\\n            // Compute royalties\\n            (,, royaltyAmount) = calculateRoyaltiesView(assetId, inputAmountMinusFees);\\n\\n            inputAmount += royaltyAmount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Used as read function to query the bonding curve for sell pricing info including royalties\\n     * @param numNFTs The number of NFTs to sell to the pair\\n     */\\n    function getSellNFTQuote(uint256 assetId, uint256 numNFTs)\\n        external\\n        view\\n        returns (\\n            CurveErrorCodes.Error error,\\n            uint256 newSpotPrice,\\n            uint256 newDelta,\\n            uint256 outputAmount,\\n            uint256 protocolFee,\\n            uint256 royaltyAmount\\n        )\\n    {\\n        (error, newSpotPrice, newDelta, outputAmount, /* tradeFee */, protocolFee) =\\n            bondingCurve().getSellInfo(spotPrice, delta, numNFTs, fee, factory().protocolFeeMultiplier());\\n\\n        if (numNFTs != 0) {\\n            // Compute royalties\\n            (,, royaltyAmount) = calculateRoyaltiesView(assetId, outputAmount);\\n\\n            // Deduct royalties from outputAmount\\n            unchecked {\\n                // Safe because we already require outputAmount >= royaltyAmount in _calculateRoyalties()\\n                outputAmount -= royaltyAmount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the pair's variant (Pair uses ETH or ERC20)\\n     */\\n    function pairVariant() public pure virtual returns (ILSSVMPairFactoryLike.PairVariant);\\n\\n    function factory() public pure returns (ILSSVMPairFactoryLike _factory) {\\n        uint256 paramsLength = _immutableParamsLength();\\n        assembly {\\n            _factory := shr(0x60, calldataload(sub(calldatasize(), paramsLength)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the type of bonding curve that parameterizes the pair\\n     */\\n    function bondingCurve() public pure returns (ICurve _bondingCurve) {\\n        uint256 paramsLength = _immutableParamsLength();\\n        assembly {\\n            _bondingCurve := shr(0x60, calldataload(add(sub(calldatasize(), paramsLength), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the address of NFT collection that parameterizes the pair\\n     */\\n    function nft() public pure returns (address _nft) {\\n        uint256 paramsLength = _immutableParamsLength();\\n        assembly {\\n            _nft := shr(0x60, calldataload(add(sub(calldatasize(), paramsLength), 40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the pair's type (TOKEN/NFT/TRADE)\\n     */\\n    function poolType() public pure returns (PoolType _poolType) {\\n        uint256 paramsLength = _immutableParamsLength();\\n        assembly {\\n            _poolType := shr(0xf8, calldataload(add(sub(calldatasize(), paramsLength), 60)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the address that receives assets when a swap is done with this pair\\n     * Can be set to another address by the owner, but has no effect on TRADE pools\\n     * If set to address(0), defaults to owner() for NFT/TOKEN pools\\n     */\\n    function getAssetRecipient() public view returns (address payable) {\\n        // TRADE pools will always receive the asset themselves\\n        if (poolType() == PoolType.TRADE) {\\n            return payable(address(this));\\n        }\\n\\n        address payable _assetRecipient = assetRecipient;\\n\\n        // Otherwise, we return the recipient if it's been set\\n        // Or, we replace it with owner() if it's address(0)\\n        if (_assetRecipient == address(0)) {\\n            return payable(owner());\\n        }\\n        return _assetRecipient;\\n    }\\n\\n    /**\\n     * @notice Returns the address that receives trade fees when a swap is done with this pair\\n     * Only relevant for TRADE pools\\n     * If set to address(0), defaults to the pair itself\\n     */\\n    function getFeeRecipient() public view returns (address payable _feeRecipient) {\\n        _feeRecipient = assetRecipient;\\n        if (_feeRecipient == address(0)) {\\n            _feeRecipient = payable(address(this));\\n        }\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Calculates the amount needed to be sent into the pair for a buy and adjusts spot price or delta if necessary\\n     * @param numNFTs The amount of NFTs to purchase from the pair\\n     * @param _bondingCurve The bonding curve to use for price calculation\\n     * @param _factory The factory to use for protocol fee lookup\\n     * @return tradeFee The amount of tokens to send as trade fee\\n     * @return protocolFee The amount of tokens to send as protocol fee\\n     * @return inputAmount The amount of tokens total tokens receive\\n     */\\n    function _calculateBuyInfoAndUpdatePoolParams(uint256 numNFTs, ICurve _bondingCurve, ILSSVMPairFactoryLike _factory)\\n        internal\\n        returns (uint256 tradeFee, uint256 protocolFee, uint256 inputAmount)\\n    {\\n        CurveErrorCodes.Error error;\\n        // Save on 2 SLOADs by caching\\n        uint128 currentSpotPrice = spotPrice;\\n        uint128 currentDelta = delta;\\n        uint128 newDelta;\\n        uint128 newSpotPrice;\\n        (error, newSpotPrice, newDelta, inputAmount, tradeFee, protocolFee) =\\n            _bondingCurve.getBuyInfo(currentSpotPrice, currentDelta, numNFTs, fee, _factory.protocolFeeMultiplier());\\n\\n        // Revert if bonding curve had an error\\n        if (error != CurveErrorCodes.Error.OK) {\\n            revert LSSVMPair__BondingCurveError(error);\\n        }\\n\\n        // Consolidate writes to save gas\\n        if (currentSpotPrice != newSpotPrice || currentDelta != newDelta) {\\n            spotPrice = newSpotPrice;\\n            delta = newDelta;\\n        }\\n\\n        // Emit spot price update if it has been updated\\n        if (currentSpotPrice != newSpotPrice) {\\n            emit SpotPriceUpdate(newSpotPrice);\\n        }\\n\\n        // Emit delta update if it has been updated\\n        if (currentDelta != newDelta) {\\n            emit DeltaUpdate(newDelta);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount needed to be sent by the pair for a sell and adjusts spot price or delta if necessary\\n     * @param numNFTs The amount of NFTs to send to the the pair\\n     * @param _bondingCurve The bonding curve to use for price calculation\\n     * @param _factory The factory to use for protocol fee lookup\\n     * @return protocolFee The amount of tokens to send as protocol fee\\n     * @return outputAmount The amount of tokens total tokens receive\\n     */\\n    function _calculateSellInfoAndUpdatePoolParams(\\n        uint256 numNFTs,\\n        ICurve _bondingCurve,\\n        ILSSVMPairFactoryLike _factory\\n    ) internal returns (uint256 protocolFee, uint256 outputAmount) {\\n        CurveErrorCodes.Error error;\\n        // Save on 2 SLOADs by caching\\n        uint128 currentSpotPrice = spotPrice;\\n        uint128 currentDelta = delta;\\n        uint128 newSpotPrice;\\n        uint128 newDelta;\\n        (error, newSpotPrice, newDelta, outputAmount, /*tradeFee*/, protocolFee) =\\n            _bondingCurve.getSellInfo(currentSpotPrice, currentDelta, numNFTs, fee, _factory.protocolFeeMultiplier());\\n\\n        // Revert if bonding curve had an error\\n        if (error != CurveErrorCodes.Error.OK) {\\n            revert LSSVMPair__BondingCurveError(error);\\n        }\\n\\n        // Consolidate writes to save gas\\n        if (currentSpotPrice != newSpotPrice || currentDelta != newDelta) {\\n            spotPrice = newSpotPrice;\\n            delta = newDelta;\\n        }\\n\\n        // Emit spot price update if it has been updated\\n        if (currentSpotPrice != newSpotPrice) {\\n            emit SpotPriceUpdate(newSpotPrice);\\n        }\\n\\n        // Emit delta update if it has been updated\\n        if (currentDelta != newDelta) {\\n            emit DeltaUpdate(newDelta);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pulls the token input of a trade from the trader (including all royalties and fees)\\n     * @param inputAmountExcludingRoyalty The amount of tokens to be sent, excluding the royalty (includes protocol fee)\\n     * @param royaltyAmounts The amounts of tokens to be sent as royalties\\n     * @param royaltyRecipients The recipients of the royalties\\n     * @param royaltyTotal The sum of all royaltyAmounts\\n     * @param tradeFeeAmount The amount of tokens to be sent as trade fee (if applicable)\\n     * @param isRouter Whether or not the caller is LSSVMRouter\\n     * @param routerCaller If called from LSSVMRouter, store the original caller\\n     * @param protocolFee The protocol fee to be paid\\n     */\\n    function _pullTokenInputs(\\n        uint256 inputAmountExcludingRoyalty,\\n        uint256[] memory royaltyAmounts,\\n        address payable[] memory royaltyRecipients,\\n        uint256 royaltyTotal,\\n        uint256 tradeFeeAmount,\\n        bool isRouter,\\n        address routerCaller,\\n        uint256 protocolFee\\n    ) internal virtual;\\n\\n    /**\\n     * @notice Sends excess tokens back to the caller (if applicable)\\n     * @dev Swap callers interacting with an ETH pair must be able to receive ETH (e.g. if the caller sends too much ETH)\\n     */\\n    function _refundTokenToSender(uint256 inputAmount) internal virtual;\\n\\n    /**\\n     * @notice Sends tokens to a recipient\\n     * @param tokenRecipient The address receiving the tokens\\n     * @param outputAmount The amount of tokens to send\\n     */\\n    function _sendTokenOutput(address payable tokenRecipient, uint256 outputAmount) internal virtual;\\n\\n    /**\\n     * @dev Used internally to grab pair parameters from calldata, see LSSVMPairCloner for technical details\\n     */\\n    function _immutableParamsLength() internal pure virtual returns (uint256);\\n\\n    /**\\n     * Royalty support functions\\n     */\\n\\n    function _calculateRoyalties(uint256 assetId, uint256 saleAmount)\\n        internal\\n        returns (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal)\\n    {\\n        (address payable[] memory recipients, uint256[] memory amounts) =\\n            ROYALTY_ENGINE.getRoyalty(nft(), assetId, saleAmount);\\n        return _calculateRoyaltiesLogic(recipients, amounts, saleAmount);\\n    }\\n\\n    /**\\n     * @dev Same as _calculateRoyalties, but uses getRoyaltyView to avoid state mutations and is public for external callers\\n     */\\n    function calculateRoyaltiesView(uint256 assetId, uint256 saleAmount)\\n        public\\n        view\\n        returns (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal)\\n    {\\n        (address payable[] memory recipients, uint256[] memory amounts) =\\n            ROYALTY_ENGINE.getRoyaltyView(nft(), assetId, saleAmount);\\n        return _calculateRoyaltiesLogic(recipients, amounts, saleAmount);\\n    }\\n\\n    /**\\n     * @dev Common logic used by _calculateRoyalties() and calculateRoyaltiesView()\\n     */\\n    function _calculateRoyaltiesLogic(address payable[] memory recipients, uint256[] memory amounts, uint256 saleAmount)\\n        internal\\n        view\\n        returns (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal)\\n    {\\n        // Cache to save gas\\n        uint256 numRecipients = recipients.length;\\n\\n        if (numRecipients != 0) {\\n            // If a pair has custom Settings, use the overridden royalty amount and only use the first receiver\\n            try factory().getSettingsForPair(address(this)) returns (bool settingsEnabled, uint96 bps) {\\n                if (settingsEnabled) {\\n                    royaltyRecipients = new address payable[](1);\\n                    royaltyRecipients[0] = recipients[0];\\n                    royaltyAmounts = new uint256[](1);\\n                    royaltyAmounts[0] = (saleAmount * bps) / 10000;\\n\\n                    // Update numRecipients to match new recipients list\\n                    numRecipients = 1;\\n                } else {\\n                    royaltyRecipients = recipients;\\n                    royaltyAmounts = amounts;\\n                }\\n            } catch {\\n                // Use the input values to calculate royalties if factory call fails\\n                royaltyRecipients = recipients;\\n                royaltyAmounts = amounts;\\n            }\\n        }\\n\\n        for (uint256 i; i < numRecipients;) {\\n            royaltyTotal += royaltyAmounts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Ensure royalty total is at most 25% of the sale amount\\n        // This defends against a rogue Manifold registry that charges extremely high royalties\\n        if (royaltyTotal > saleAmount >> 2) {\\n            revert LSSVMPair__RoyaltyTooLarge();\\n        }\\n    }\\n\\n    /**\\n     * Owner functions\\n     */\\n\\n    /**\\n     * @notice Rescues a specified set of NFTs owned by the pair to the owner address. (onlyOwnable modifier is in the implemented function)\\n     * @param a The NFT to transfer\\n     * @param nftIds The list of IDs of the NFTs to send to the owner\\n     */\\n    function withdrawERC721(IERC721 a, uint256[] calldata nftIds) external virtual;\\n\\n    /**\\n     * @notice Rescues ERC20 tokens from the pair to the owner. Only callable by the owner (onlyOwnable modifier is in the implemented function).\\n     * @param a The token to transfer\\n     * @param amount The amount of tokens to send to the owner\\n     */\\n    function withdrawERC20(ERC20 a, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Rescues ERC1155 tokens from the pair to the owner. Only callable by the owner.\\n     * @param a The NFT to transfer\\n     * @param ids The NFT ids to transfer\\n     * @param amounts The amounts of each id to transfer\\n     */\\n    function withdrawERC1155(IERC1155 a, uint256[] calldata ids, uint256[] calldata amounts) external virtual;\\n\\n    /**\\n     * @notice Updates the selling spot price. Only callable by the owner.\\n     * @param newSpotPrice The new selling spot price value, in Token\\n     */\\n    function changeSpotPrice(uint128 newSpotPrice) external onlyOwner {\\n        ICurve _bondingCurve = bondingCurve();\\n        if (!_bondingCurve.validateSpotPrice(newSpotPrice)) revert LSSVMPair__InvalidSpotPrice();\\n        if (spotPrice != newSpotPrice) {\\n            spotPrice = newSpotPrice;\\n            emit SpotPriceUpdate(newSpotPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the delta parameter. Only callable by the owner.\\n     * @param newDelta The new delta parameter\\n     */\\n    function changeDelta(uint128 newDelta) external onlyOwner {\\n        ICurve _bondingCurve = bondingCurve();\\n        if (!_bondingCurve.validateDelta(newDelta)) revert LSSVMPair__InvalidDelta();\\n        if (delta != newDelta) {\\n            delta = newDelta;\\n            emit DeltaUpdate(newDelta);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the fee taken by the LP. Only callable by the owner.\\n     * Only callable if the pool is a Trade pool. Reverts if the fee is >= MAX_FEE.\\n     * @param newFee The new LP fee percentage, 18 decimals\\n     */\\n    function changeFee(uint96 newFee) external onlyOwner {\\n        PoolType _poolType = poolType();\\n        if (_poolType != PoolType.TRADE) revert LSSVMPair__NonTradePoolWithTradeFee();\\n        if (newFee > MAX_TRADE_FEE) revert LSSVMPair__TradeFeeTooLarge();\\n        if (fee != newFee) {\\n            fee = newFee;\\n            emit FeeUpdate(newFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Changes the address that will receive assets received from\\n     * trades. Only callable by the owner.\\n     * @param newRecipient The new asset recipient\\n     */\\n    function changeAssetRecipient(address payable newRecipient) external onlyOwner {\\n        if (assetRecipient != newRecipient) {\\n            assetRecipient = newRecipient;\\n            emit AssetRecipientChange(newRecipient);\\n        }\\n    }\\n\\n    function _preCallCheck(address target) internal virtual;\\n\\n    /**\\n     * @notice Allows the pair to make arbitrary external calls to contracts\\n     * whitelisted by the protocol. Only callable by the owner.\\n     * @param target The contract to call\\n     * @param data The calldata to pass to the contract\\n     */\\n    function call(address payable target, bytes calldata data) external onlyOwner {\\n        ILSSVMPairFactoryLike _factory = factory();\\n        if (!_factory.callAllowed(target)) revert LSSVMPair__TargetNotAllowed();\\n\\n        // Ensure the call isn't calling a banned function\\n        bytes4 sig = bytes4(data[:4]);\\n        if (\\n            sig == IOwnershipTransferReceiver.onOwnershipTransferred.selector\\n                || sig == LSSVMRouter.pairTransferERC20From.selector || sig == LSSVMRouter.pairTransferNFTFrom.selector\\n                || sig == LSSVMRouter.pairTransferERC1155From.selector || sig == ILSSVMPairFactoryLike.openLock.selector\\n                || sig == ILSSVMPairFactoryLike.closeLock.selector\\n        ) {\\n            revert LSSVMPair__FunctionNotAllowed();\\n        }\\n\\n        // Prevent calling the pair's underlying nft\\n        // (We ban calling the underlying NFT/ERC20 to avoid maliciously transferring assets approved for the pair to spend)\\n        if (target == nft()) revert LSSVMPair__TargetNotAllowed();\\n\\n        _preCallCheck(target);\\n\\n        (bool success,) = target.call{value: 0}(data);\\n        if (!success) revert LSSVMPair__CallFailed();\\n    }\\n\\n    /**\\n     * @notice Allows owner to batch multiple calls, forked from: https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol\\n     * @notice The revert handling is forked from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c239e1af8d1a1296577108dd6989a17b57434f8e/contracts/utils/Address.sol#L201\\n     * @dev Intended for withdrawing/altering pool pricing in one tx, only callable by owner, cannot change owner\\n     * @param calls The calldata for each call to make\\n     * @param revertOnFail Whether or not to revert the entire tx if any of the calls fail. Calls to transferOwnership will revert regardless.\\n     */\\n    function multicall(bytes[] calldata calls, bool revertOnFail) external onlyOwner {\\n        for (uint256 i; i < calls.length;) {\\n            bytes4 sig = bytes4(calls[i][:4]);\\n            // We ban calling transferOwnership when ownership\\n            if (sig == transferOwnership.selector) revert LSSVMPair__FunctionNotAllowed();\\n\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            if (!success && revertOnFail) {\\n                assembly {\\n                    revert(add(0x20, result), mload(result))\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/LSSVMPairETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/utils/SafeTransferLib.sol\\\";\\n\\nimport {LSSVMPair} from \\\"./LSSVMPair.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"./ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title An NFT/Token pair where the token is ETH\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\nabstract contract LSSVMPairETH is LSSVMPair {\\n    using SafeTransferLib for address payable;\\n    using SafeTransferLib for ERC20;\\n\\n    error LSSVMPairETH__InsufficientInput();\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function _pullTokenInputs(\\n        uint256 inputAmountExcludingRoyalty,\\n        uint256[] memory royaltyAmounts,\\n        address payable[] memory royaltyRecipients,\\n        uint256 royaltyTotal,\\n        uint256 tradeFeeAmount,\\n        bool, /*isRouter*/\\n        address, /*routerCaller*/\\n        uint256 protocolFee\\n    ) internal override {\\n        // Require that the input amount is sufficient to pay for the sale amount, royalties, and fees\\n        if (msg.value < (royaltyTotal + inputAmountExcludingRoyalty)) revert LSSVMPairETH__InsufficientInput();\\n\\n        // Transfer inputAmountExcludingRoyalty ETH to assetRecipient if it has been set\\n        address payable _assetRecipient = getAssetRecipient();\\n\\n        // Attempt to transfer trade fees only if TRADE pool and they exist\\n        if (poolType() == PoolType.TRADE && tradeFeeAmount != 0) {\\n            address payable _feeRecipient = getFeeRecipient();\\n\\n            // Only send and deduct tradeFeeAmount if the fee recipient is not the asset recipient (i.e. the pool)\\n            if (_feeRecipient != _assetRecipient) {\\n                inputAmountExcludingRoyalty -= tradeFeeAmount;\\n                _feeRecipient.safeTransferETH(tradeFeeAmount);\\n            }\\n            // In the else case, we would want to ensure that inputAmountExcludingRoyalty >= tradeFeeAmount / 2\\n            // to avoid underpaying the trade fee, but it is always true because the max royalty\\n            // is 25%, the max protocol fee is 10%, and the max trade fee is 50%, meaning they can\\n            // never add up to more than 100%.\\n        }\\n\\n        if (_assetRecipient != address(this)) {\\n            _assetRecipient.safeTransferETH(inputAmountExcludingRoyalty - protocolFee);\\n        }\\n\\n        // Transfer royalties\\n        for (uint256 i; i < royaltyRecipients.length;) {\\n            royaltyRecipients[i].safeTransferETH(royaltyAmounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Take protocol fee\\n        if (protocolFee != 0) {\\n            payable(address(factory())).safeTransferETH(protocolFee);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function _refundTokenToSender(uint256 inputAmount) internal override {\\n        // Give excess ETH back to caller\\n        if (msg.value > inputAmount) {\\n            payable(msg.sender).safeTransferETH(msg.value - inputAmount);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function _sendTokenOutput(address payable tokenRecipient, uint256 outputAmount) internal override {\\n        // Send ETH to caller\\n        if (outputAmount != 0) {\\n            tokenRecipient.safeTransferETH(outputAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws all token owned by the pair to the owner address.\\n     * @dev Only callable by the owner.\\n     */\\n    function withdrawAllETH() external onlyOwner {\\n        withdrawETH(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Withdraws a specified amount of token owned by the pair to the owner address.\\n     * @dev Only callable by the owner.\\n     * @param amount The amount of token to send to the owner. If the pair's balance is less than\\n     * this value, the transaction will be reverted.\\n     */\\n    function withdrawETH(uint256 amount) public onlyOwner {\\n        payable(msg.sender).safeTransferETH(amount);\\n\\n        // emit event since ETH is the pair token\\n        emit TokenWithdrawal(amount);\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function withdrawERC20(ERC20 a, uint256 amount) external override onlyOwner {\\n        a.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev All ETH transfers into the pair are accepted. This is the main method\\n     * for the owner to top up the pair's token reserves.\\n     */\\n    receive() external payable {\\n        emit TokenDeposit(msg.value);\\n    }\\n\\n    /**\\n     * @dev All ETH transfers into the pair are accepted. This is the main method\\n     * for the owner to top up the pair's token reserves.\\n     */\\n    fallback() external payable {\\n        // Only allow calls without function selector\\n        require(msg.data.length == _immutableParamsLength());\\n        emit TokenDeposit(msg.value);\\n    }\\n\\n    function _preCallCheck(address) internal pure override {}\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/LSSVMPairERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/utils/SafeTransferLib.sol\\\";\\n\\nimport {LSSVMPair} from \\\"./LSSVMPair.sol\\\";\\nimport {LSSVMRouter} from \\\"./LSSVMRouter.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"./ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title An NFT/Token pair where the token is an ERC20\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\nabstract contract LSSVMPairERC20 is LSSVMPair {\\n    using SafeTransferLib for ERC20;\\n\\n    error LSSVMPairERC20__RoyaltyNotPaid();\\n    error LSSVMPairERC20__MsgValueNotZero();\\n    error LSSVMPairERC20__AssetRecipientNotPaid();\\n\\n    /**\\n     * @notice Returns the ERC20 token associated with the pair\\n     * @dev See LSSVMPairCloner for an explanation on how this works\\n     * @dev The last 20 bytes of the immutable data contain the ERC20 token address\\n     */\\n    function token() public pure returns (ERC20 _token) {\\n        assembly {\\n            _token := shr(0x60, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function _pullTokenInputs(\\n        uint256 inputAmountExcludingRoyalty,\\n        uint256[] memory royaltyAmounts,\\n        address payable[] memory royaltyRecipients,\\n        uint256, /* royaltyTotal */\\n        uint256 tradeFeeAmount,\\n        bool isRouter,\\n        address routerCaller,\\n        uint256 protocolFee\\n    ) internal override {\\n        address _assetRecipient = getAssetRecipient();\\n\\n        // Transfer tokens\\n        if (isRouter) {\\n            // Verify if router is allowed\\n            // Locally scoped to avoid stack too deep\\n            {\\n                (bool routerAllowed,) = factory().routerStatus(LSSVMRouter(payable(msg.sender)));\\n                if (!routerAllowed) revert LSSVMPair__NotRouter();\\n            }\\n\\n            // Cache state and then call router to transfer tokens from user\\n            uint256 beforeBalance = token().balanceOf(_assetRecipient);\\n            LSSVMRouter(payable(msg.sender)).pairTransferERC20From(\\n                token(), routerCaller, _assetRecipient, inputAmountExcludingRoyalty - protocolFee\\n            );\\n\\n            // Verify token transfer (protect pair against malicious router)\\n            ERC20 token_ = token();\\n            if (token_.balanceOf(_assetRecipient) - beforeBalance != (inputAmountExcludingRoyalty - protocolFee)) {\\n                revert LSSVMPairERC20__AssetRecipientNotPaid();\\n            }\\n\\n            // Transfer royalties (if they exist)\\n            for (uint256 i; i < royaltyRecipients.length;) {\\n                beforeBalance = token_.balanceOf(royaltyRecipients[i]);\\n                LSSVMRouter(payable(msg.sender)).pairTransferERC20From(\\n                    token_, routerCaller, royaltyRecipients[i], royaltyAmounts[i]\\n                );\\n                if (token_.balanceOf(royaltyRecipients[i]) - beforeBalance != royaltyAmounts[i]) {\\n                    revert LSSVMPairERC20__RoyaltyNotPaid();\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // Take protocol fee (if it exists)\\n            if (protocolFee != 0) {\\n                LSSVMRouter(payable(msg.sender)).pairTransferERC20From(\\n                    token_, routerCaller, address(factory()), protocolFee\\n                );\\n            }\\n        } else {\\n            // Transfer tokens directly (sans the protocol fee)\\n            ERC20 token_ = token();\\n            token_.safeTransferFrom(msg.sender, _assetRecipient, inputAmountExcludingRoyalty - protocolFee);\\n\\n            // Transfer royalties (if they exists)\\n            for (uint256 i; i < royaltyRecipients.length;) {\\n                token_.safeTransferFrom(msg.sender, royaltyRecipients[i], royaltyAmounts[i]);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // Take protocol fee (if it exists)\\n            if (protocolFee != 0) {\\n                token_.safeTransferFrom(msg.sender, address(factory()), protocolFee);\\n            }\\n        }\\n        // Send trade fee if it exists, is TRADE pool, and fee recipient != pool address\\n        // @dev: (note that tokens are sent from the pool and not the caller)\\n        if (poolType() == PoolType.TRADE && tradeFeeAmount != 0) {\\n            address payable _feeRecipient = getFeeRecipient();\\n            if (_feeRecipient != _assetRecipient) {\\n                token().safeTransfer(_feeRecipient, tradeFeeAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function _refundTokenToSender(uint256 inputAmount) internal override {\\n        // Do nothing since we transferred the exact input amount\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function _sendTokenOutput(address payable tokenRecipient, uint256 outputAmount) internal override {\\n        // Send tokens to caller\\n        if (outputAmount != 0) {\\n            token().safeTransfer(tokenRecipient, outputAmount);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function withdrawERC20(ERC20 a, uint256 amount) external override onlyOwner {\\n        a.safeTransfer(msg.sender, amount);\\n\\n        if (a == token()) {\\n            // emit event since it is the pair token\\n            emit TokenWithdrawal(amount);\\n        }\\n    }\\n\\n    function _preCallCheck(address target) internal pure override {\\n        if (target == address(token())) revert LSSVMPair__TargetNotAllowed();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/bonding-curves/GDACurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.13;\\n\\nimport {ICurve} from \\\"./ICurve.sol\\\";\\nimport {CurveErrorCodes} from \\\"./CurveErrorCodes.sol\\\";\\nimport {UD60x18, ud, unwrap, uUNIT, UNIT, convert} from \\\"@prb/math/UD60x18.sol\\\";\\n\\n/**\\n * @author 0xmons, boredGenius, 0xCygaar\\n * @notice Bonding curve logic for a gradual dutch auction based on https://www.paradigm.xyz/2022/04/gda.\\n * @dev Trade pools will result in unexpected behavior due to the time factor always increasing. Buying an NFT\\n * and selling it back into the pool will result in a non-zero difference. Therefore it is recommended to only\\n * use this curve for single-sided pools.\\n */\\ncontract GDACurve is ICurve, CurveErrorCodes {\\n    uint256 internal constant _SCALE_FACTOR = 1e9;\\n    uint256 internal constant _TIME_SCALAR = 2 * uUNIT; // Used in place of Euler's number\\n    uint256 internal constant _MAX_TIME_EXPONENT = 10;\\n\\n    /**\\n     * @notice Minimum price to prevent numerical issues\\n     */\\n    uint256 public constant MIN_PRICE = 1 gwei;\\n\\n    /**\\n     * @dev See {ICurve-validateDelta}\\n     */\\n    function validateDelta(uint128 delta) external pure override returns (bool) {\\n        (UD60x18 alpha,,) = _parseDelta(delta);\\n        return alpha.gt(UNIT);\\n    }\\n\\n    /**\\n     * @dev See {ICurve-validateSpotPrice}\\n     */\\n    function validateSpotPrice(uint128 newSpotPrice) external pure override returns (bool) {\\n        return newSpotPrice >= MIN_PRICE;\\n    }\\n\\n    /**\\n     * @dev See {ICurve-getBuyInfo}\\n     */\\n    function getBuyInfo(\\n        uint128 spotPrice,\\n        uint128 delta,\\n        uint256 numItems,\\n        uint256 feeMultiplier,\\n        uint256 protocolFeeMultiplier\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            Error error,\\n            uint128 newSpotPrice,\\n            uint128 newDelta,\\n            uint256 inputValue,\\n            uint256 tradeFee,\\n            uint256 protocolFee\\n        )\\n    {\\n        // NOTE: we assume alpha is > 1, as checked by validateDelta()\\n        // We only calculate changes for buying 1 or more NFTs\\n        if (numItems == 0) {\\n            return (Error.INVALID_NUMITEMS, 0, 0, 0, 0, 0);\\n        }\\n\\n        UD60x18 spotPrice_ = ud(spotPrice);\\n        UD60x18 decayFactor;\\n        {\\n            (, uint256 lambda, uint256 prevTime) = _parseDelta(delta);\\n            UD60x18 exponent = ud((block.timestamp - prevTime) * lambda);\\n            if (convert(exponent) > _MAX_TIME_EXPONENT) {\\n                // Cap the max decay factor to 2^10\\n                exponent = convert(_MAX_TIME_EXPONENT);\\n            }\\n            decayFactor = ud(_TIME_SCALAR).pow(exponent);\\n        }\\n\\n        (UD60x18 alpha,,) = _parseDelta(delta);\\n        UD60x18 alphaPowN = alpha.powu(numItems);\\n\\n        // The new spot price is multiplied by alpha^n and divided by the time decay so future\\n        // calculations do not need to track number of items sold or the initial time/price. This new spot price\\n        // implicitly stores the the initial price, total items sold so far, and time elapsed since the start.\\n        {\\n            UD60x18 newSpotPrice_ = spotPrice_.mul(alphaPowN);\\n            newSpotPrice_ = newSpotPrice_.div(decayFactor);\\n            if (newSpotPrice_.gt(ud(type(uint128).max))) {\\n                return (Error.SPOT_PRICE_OVERFLOW, 0, 0, 0, 0, 0);\\n            }\\n            if (newSpotPrice_.lt(ud(MIN_PRICE))) {\\n                return (Error.SPOT_PRICE_UNDERFLOW, 0, 0, 0, 0, 0);\\n            }\\n            newSpotPrice = uint128(unwrap(newSpotPrice_));\\n        }\\n\\n        // If the user buys n items, then the total cost is equal to:\\n        // buySpotPrice + (alpha * buySpotPrice) + (alpha^2 * buySpotPrice) + ... (alpha^(numItems - 1) * buySpotPrice).\\n        // This is equal to buySpotPrice * (alpha^n - 1) / (alpha - 1).\\n        // We then divide the value by scalar^(lambda * timeElapsed) to factor in the exponential decay.\\n        {\\n            UD60x18 inputValue_ = spotPrice_.mul(alphaPowN.sub(UNIT)).div(alpha.sub(UNIT)).div(decayFactor);\\n\\n            // Account for the protocol fee, a flat percentage of the buy amount\\n            protocolFee = unwrap(inputValue_.mul(ud(protocolFeeMultiplier)));\\n\\n            // Account for the trade fee, only for Trade pools\\n            tradeFee = unwrap(inputValue_.mul(ud(feeMultiplier)));\\n\\n            // Add the protocol and trade fees to the required input amount and unwrap to uint256\\n            inputValue = unwrap(inputValue_.add(ud(protocolFee)).add(ud(tradeFee)));\\n        }\\n\\n        // Update delta with the current timestamp\\n        newDelta = _getNewDelta(delta);\\n\\n        // If we got all the way here, no math error happened\\n        error = Error.OK;\\n    }\\n\\n    /**\\n     * @dev See {ICurve-getSellInfo}\\n     */\\n    function getSellInfo(\\n        uint128 spotPrice,\\n        uint128 delta,\\n        uint256 numItems,\\n        uint256 feeMultiplier,\\n        uint256 protocolFeeMultiplier\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            Error error,\\n            uint128 newSpotPrice,\\n            uint128 newDelta,\\n            uint256 outputValue,\\n            uint256 tradeFee,\\n            uint256 protocolFee\\n        )\\n    {\\n        // We only calculate changes for buying 1 or more NFTs\\n        if (numItems == 0) {\\n            return (Error.INVALID_NUMITEMS, 0, 0, 0, 0, 0);\\n        }\\n\\n        UD60x18 spotPrice_ = ud(spotPrice);\\n        UD60x18 boostFactor;\\n        {\\n            (, uint256 lambda, uint256 prevTime) = _parseDelta(delta);\\n            UD60x18 exponent = ud((block.timestamp - prevTime) * lambda);\\n            if (convert(exponent) > _MAX_TIME_EXPONENT) {\\n                // Cap the max boost factor to 2^10\\n                exponent = convert(_MAX_TIME_EXPONENT);\\n            }\\n            boostFactor = ud(_TIME_SCALAR).pow(exponent);\\n        }\\n\\n        (UD60x18 alpha,,) = _parseDelta(delta);\\n        UD60x18 alphaPowN = alpha.powu(numItems);\\n\\n        // The new spot price is multiplied by the time boost and divided by alpha^n so future\\n        // calculations do not need to track number of items sold or the initial time/price. This new spot price\\n        // implicitly stores the the initial price, total items sold so far, and time elapsed since the start.\\n        {\\n            UD60x18 newSpotPrice_ = spotPrice_.mul(boostFactor);\\n            newSpotPrice_ = newSpotPrice_.div(alphaPowN);\\n            if (newSpotPrice_.gt(ud(type(uint128).max))) {\\n                return (Error.SPOT_PRICE_OVERFLOW, 0, 0, 0, 0, 0);\\n            }\\n            if (newSpotPrice_.lt(ud(MIN_PRICE))) {\\n                return (Error.SPOT_PRICE_UNDERFLOW, 0, 0, 0, 0, 0);\\n            }\\n            newSpotPrice = uint128(unwrap(newSpotPrice_));\\n        }\\n\\n        // The expected output for an auction at index n is defined by the formula: p(t) = k * scalar^(lambda * t) / alpha^n\\n        // where k is the initial price, lambda is the boost constant, t is time elapsed, alpha is the scale factor, and\\n        // n is the number of items sold. The amount to receive for selling into a pool can thus be written as:\\n        // k * scalar^(lambda * t) / alpha^(m + q - 1) * (alpha^q - 1) / (alpha - 1) where m is the number of items purchased thus far\\n        // and q is the number of items to sell.\\n        // Our spot price implicity embeds the number of items already purchased and the previous time boost, so we just need to\\n        // do some simple adjustments to get the current scalar^(lambda * t) and alpha^(m + q - 1) values.\\n        UD60x18 outputValue_ =\\n            spotPrice_.mul(boostFactor).div(alphaPowN.div(alpha)).mul(alphaPowN.sub(UNIT)).div(alpha.sub(UNIT));\\n\\n        // Account for the protocol fee, a flat percentage of the sell amount\\n        protocolFee = unwrap(outputValue_.mul(ud(protocolFeeMultiplier)));\\n\\n        // Account for the trade fee, only for Trade pools\\n        tradeFee = unwrap(outputValue_.mul(ud(feeMultiplier)));\\n\\n        // Remove the protocol and trade fees from the output amount and unwrap to uint256\\n        outputValue = unwrap(outputValue_.sub(ud(protocolFee)).sub(ud(tradeFee)));\\n\\n        // Update delta with the current timestamp\\n        newDelta = _getNewDelta(delta);\\n\\n        // If we got all the way here, no math error happened\\n        error = Error.OK;\\n    }\\n\\n    function _parseDelta(uint128 delta) internal pure returns (UD60x18 alpha, uint256 lambda, uint256 prevTime) {\\n        // The highest 40 bits are alpha with 9 decimals of precision.\\n        // However, because our alpha value needs to be 18 decimals of precision, we multiply by a scaling factor\\n        alpha = ud(uint40(delta >> 88) * _SCALE_FACTOR);\\n\\n        // The middle 40 bits are lambda with 9 decimals of precision\\n        // lambda determines the exponential decay (when buying) or exponential boost (when selling) over time\\n        // See https://www.paradigm.xyz/2022/04/gda\\n        // lambda also needs to be 18 decimals of precision so we multiply by a scaling factor\\n        lambda = uint40(delta >> 48) * _SCALE_FACTOR;\\n\\n        // The lowest 48 bits are the start timestamp\\n        // This works because solidity cuts off higher bits when converting from a larger type to a smaller type\\n        // See https://docs.soliditylang.org/en/latest/types.html#explicit-conversions\\n        prevTime = uint256(uint48(delta));\\n    }\\n\\n    function _getNewDelta(uint128 delta) internal view returns (uint128) {\\n        // Clear lower 48 bits\\n        delta = (delta >> 48) << 48;\\n        // Set lower 48 bits to be the current timestamp\\n        return delta | uint48(block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/LSSVMPairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/utils/SafeTransferLib.sol\\\";\\n\\nimport {LSSVMPair} from \\\"./LSSVMPair.sol\\\";\\nimport {LSSVMRouter} from \\\"./LSSVMRouter.sol\\\";\\nimport {ICurve} from \\\"./bonding-curves/ICurve.sol\\\";\\nimport {LSSVMPairCloner} from \\\"./lib/LSSVMPairCloner.sol\\\";\\nimport {LSSVMPairERC1155} from \\\"./erc1155/LSSVMPairERC1155.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"./ILSSVMPairFactoryLike.sol\\\";\\nimport {LSSVMPairERC20} from \\\"./LSSVMPairERC20.sol\\\";\\nimport {LSSVMPairERC721ETH} from \\\"./erc721/LSSVMPairERC721ETH.sol\\\";\\nimport {LSSVMPairERC1155ETH} from \\\"./erc1155/LSSVMPairERC1155ETH.sol\\\";\\nimport {LSSVMPairERC721ERC20} from \\\"./erc721/LSSVMPairERC721ERC20.sol\\\";\\nimport {LSSVMPairERC1155ERC20} from \\\"./erc1155/LSSVMPairERC1155ERC20.sol\\\";\\n\\nimport {ISettings} from \\\"./settings/ISettings.sol\\\";\\n\\n/**\\n * @notice Imports for authAllowedForToken (forked from manifold.xyz Royalty Registry)\\n */\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\\\";\\nimport \\\"./royalty-auth/INiftyGateway.sol\\\";\\nimport \\\"./royalty-auth/IFoundation.sol\\\";\\nimport \\\"./royalty-auth/IDigitalax.sol\\\";\\nimport \\\"./royalty-auth/IArtBlocks.sol\\\";\\n\\n/**\\n * @title The factory contract used to deploy new pairs\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\ncontract LSSVMPairFactory is Owned, ILSSVMPairFactoryLike {\\n    using LSSVMPairCloner for address;\\n    using AddressUpgradeable for address;\\n    using SafeTransferLib for address payable;\\n    using SafeTransferLib for ERC20;\\n\\n    uint256 internal constant MAX_PROTOCOL_FEE = 0.1e18; // 10%, must <= 1 - MAX_FEE\\n\\n    LSSVMPairERC721ETH public immutable erc721ETHTemplate;\\n    LSSVMPairERC721ERC20 public immutable erc721ERC20Template;\\n    LSSVMPairERC1155ETH public immutable erc1155ETHTemplate;\\n    LSSVMPairERC1155ERC20 public immutable erc1155ERC20Template;\\n    address payable public override protocolFeeRecipient;\\n\\n    // Units are in base 1e18\\n    uint256 public override protocolFeeMultiplier;\\n\\n    mapping(ICurve => bool) public bondingCurveAllowed;\\n    mapping(address => bool) public override callAllowed;\\n\\n    // Data structures for settings logic\\n    mapping(address => mapping(address => bool)) public settingsForCollection;\\n    mapping(address => address) public settingsForPair;\\n\\n    struct RouterStatus {\\n        bool allowed;\\n        bool wasEverTouched;\\n    }\\n\\n    mapping(LSSVMRouter => RouterStatus) public override routerStatus;\\n\\n    address private constant _NOT_ENTERED = address(1);\\n    address private _caller;\\n\\n    event NewERC721Pair(address indexed poolAddress, uint256[] initialIds);\\n    event NewERC1155Pair(address indexed poolAddress, uint256 initialBalance);\\n    event ERC20Deposit(address indexed poolAddress, uint256 amount);\\n    event NFTDeposit(address indexed poolAddress, uint256[] ids);\\n    event ERC1155Deposit(address indexed poolAddress, uint256 indexed id, uint256 amount);\\n    event ProtocolFeeRecipientUpdate(address indexed recipientAddress);\\n    event ProtocolFeeMultiplierUpdate(uint256 newMultiplier);\\n    event BondingCurveStatusUpdate(ICurve indexed bondingCurve, bool isAllowed);\\n    event CallTargetStatusUpdate(address indexed target, bool isAllowed);\\n    event RouterStatusUpdate(LSSVMRouter indexed router, bool isAllowed);\\n\\n    error LSSVMPairFactory__FeeTooLarge();\\n    error LSSVMPairFactory__BondingCurveNotWhitelisted();\\n    error LSSVMPairFactory__ReentrantCall();\\n    error LSSVMPairFactory__ZeroAddress();\\n    error LSSVMPairFactory__CannotCallRouter();\\n    error LSSVMPairFactory__UnauthorizedCaller();\\n    error LSSVMPairFactory__InvalidPair();\\n    error LSSVMPairFactory__SettingsNotEnabledForCollection();\\n    error LSSVMPairFactory__SettingsNotEnabledForPair();\\n\\n    constructor(\\n        LSSVMPairERC721ETH _erc721ETHTemplate,\\n        LSSVMPairERC721ERC20 _erc721ERC20Template,\\n        LSSVMPairERC1155ETH _erc1155ETHTemplate,\\n        LSSVMPairERC1155ERC20 _erc1155ERC20Template,\\n        address payable _protocolFeeRecipient,\\n        uint256 _protocolFeeMultiplier,\\n        address _owner\\n    ) Owned(_owner) {\\n        erc721ETHTemplate = _erc721ETHTemplate;\\n        erc721ERC20Template = _erc721ERC20Template;\\n        erc1155ETHTemplate = _erc1155ETHTemplate;\\n        erc1155ERC20Template = _erc1155ERC20Template;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        if (_protocolFeeMultiplier > MAX_PROTOCOL_FEE) revert LSSVMPairFactory__FeeTooLarge();\\n        protocolFeeMultiplier = _protocolFeeMultiplier;\\n        _caller = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * External functions\\n     */\\n\\n    /**\\n     * @notice Creates a pair contract using EIP-1167.\\n     * @param _nft The NFT contract of the collection the pair trades\\n     * @param _bondingCurve The bonding curve for the pair to price NFTs, must be whitelisted\\n     * @param _assetRecipient The address that will receive the assets traders give during trades.\\n     * If set to address(0), assets will be sent to the pool address. Not available to TRADE pools.\\n     * @param _poolType TOKEN, NFT, or TRADE\\n     * @param _delta The delta value used by the bonding curve. The meaning of delta depends on the specific curve.\\n     * @param _fee The fee taken by the LP in each trade. Can only be non-zero if _poolType is Trade.\\n     * @param _spotPrice The initial selling spot price\\n     * @param _propertyChecker The contract to use for verifying properties of IDs sent in\\n     * @param _initialNFTIDs The list of IDs of NFTs to transfer from the sender to the pair\\n     * @return pair The new pair\\n     */\\n    function createPairERC721ETH(\\n        IERC721 _nft,\\n        ICurve _bondingCurve,\\n        address payable _assetRecipient,\\n        LSSVMPair.PoolType _poolType,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice,\\n        address _propertyChecker,\\n        uint256[] calldata _initialNFTIDs\\n    ) external payable returns (LSSVMPairERC721ETH pair) {\\n        if (!bondingCurveAllowed[_bondingCurve]) revert LSSVMPairFactory__BondingCurveNotWhitelisted();\\n\\n        pair = LSSVMPairERC721ETH(\\n            payable(\\n                address(erc721ETHTemplate).cloneERC721ETHPair(\\n                    this, _bondingCurve, _nft, uint8(_poolType), _propertyChecker\\n                )\\n            )\\n        );\\n\\n        _initializePairERC721ETH(pair, _nft, _assetRecipient, _delta, _fee, _spotPrice, _initialNFTIDs);\\n        emit NewERC721Pair(address(pair), _initialNFTIDs);\\n    }\\n\\n    struct CreateERC721ERC20PairParams {\\n        ERC20 token;\\n        IERC721 nft;\\n        ICurve bondingCurve;\\n        address payable assetRecipient;\\n        LSSVMPair.PoolType poolType;\\n        uint128 delta;\\n        uint96 fee;\\n        uint128 spotPrice;\\n        address propertyChecker;\\n        uint256[] initialNFTIDs;\\n        uint256 initialTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Creates a pair contract using EIP-1167.\\n     * @param params The info used to create a new pair. This includes:\\n     * - token: The ERC20 token the pair trades\\n     * - nft: The NFT contract of the collection the pair trades\\n     * - bondingCurve: The bonding curve for the pair to price NFTs, must be whitelisted\\n     * - assetRecipient: The address that will receive the assets traders give during trades.\\n     *   If set to address(0), assets will be sent to the pool address. Not available to TRADE pools.\\n     * - poolType: TOKEN, NFT, or TRADE\\n     * - delta: The delta value used by the bonding curve. The meaning of delta depends on the specific curve.\\n     * - fee: The fee taken by the LP in each trade. Can only be non-zero if poolType is Trade.\\n     * - spotPrice: Param 1 for the bonding curve, usually used for start price\\n     * - delta: Param 2 for the bonding curve, usually used for dynamic adjustment\\n     * - propertyChecker: The contract to use for verifying properties of IDs sent in\\n     * - initialNFTIDs: The list of IDs of NFTs to transfer from the sender to the pair\\n     * - initialTokenBalance: The initial token balance sent from the sender to the new pair\\n     * @return pair The new pair\\n     */\\n    function createPairERC721ERC20(CreateERC721ERC20PairParams calldata params)\\n        external\\n        returns (LSSVMPairERC721ERC20 pair)\\n    {\\n        if (!bondingCurveAllowed[params.bondingCurve]) revert LSSVMPairFactory__BondingCurveNotWhitelisted();\\n\\n        pair = LSSVMPairERC721ERC20(\\n            payable(\\n                address(erc721ERC20Template).cloneERC721ERC20Pair(\\n                    this, params.bondingCurve, params.nft, uint8(params.poolType), params.propertyChecker, params.token\\n                )\\n            )\\n        );\\n\\n        _initializePairERC721ERC20(\\n            pair,\\n            params.token,\\n            params.nft,\\n            params.assetRecipient,\\n            params.delta,\\n            params.fee,\\n            params.spotPrice,\\n            params.initialNFTIDs,\\n            params.initialTokenBalance\\n        );\\n        emit NewERC721Pair(address(pair), params.initialNFTIDs);\\n    }\\n    /**\\n     * @notice Creates a pair contract using EIP-1167.\\n     * @param _nft The NFT contract of the collection the pair trades\\n     * @param _bondingCurve The bonding curve for the pair to price NFTs, must be whitelisted\\n     * @param _assetRecipient The address that will receive the assets traders give during trades.\\n     * If set to address(0), assets will be sent to the pool address. Not available to TRADE pools.\\n     * @param _poolType TOKEN, NFT, or TRADE\\n     * @param _delta The delta value used by the bonding curve. The meaning of delta depends on the specific curve.\\n     * @param _fee The fee taken by the LP in each trade. Can only be non-zero if _poolType is Trade.\\n     * @param _spotPrice The initial selling spot price\\n     * @param _nftId The ID of the NFT to trade\\n     * @param _initialNFTBalance The amount of NFTs to transfer from the sender to the pair\\n     * @return pair The new pair\\n     */\\n\\n    function createPairERC1155ETH(\\n        IERC1155 _nft,\\n        ICurve _bondingCurve,\\n        address payable _assetRecipient,\\n        LSSVMPairERC1155ETH.PoolType _poolType,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice,\\n        uint256 _nftId,\\n        uint256 _initialNFTBalance\\n    ) external payable returns (LSSVMPairERC1155ETH pair) {\\n        if (!bondingCurveAllowed[_bondingCurve]) revert LSSVMPairFactory__BondingCurveNotWhitelisted();\\n\\n        pair = LSSVMPairERC1155ETH(\\n            payable(\\n                address(erc1155ETHTemplate).cloneERC1155ETHPair(this, _bondingCurve, _nft, uint8(_poolType), _nftId)\\n            )\\n        );\\n\\n        _initializePairERC1155ETH(pair, _nft, _assetRecipient, _delta, _fee, _spotPrice, _nftId, _initialNFTBalance);\\n        emit NewERC1155Pair(address(pair), _initialNFTBalance);\\n    }\\n\\n    struct CreateERC1155ERC20PairParams {\\n        ERC20 token;\\n        IERC1155 nft;\\n        ICurve bondingCurve;\\n        address payable assetRecipient;\\n        LSSVMPairERC1155ERC20.PoolType poolType;\\n        uint128 delta;\\n        uint96 fee;\\n        uint128 spotPrice;\\n        uint256 nftId;\\n        uint256 initialNFTBalance;\\n        uint256 initialTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Creates a pair contract using EIP-1167.\\n     * @param params The info used to create a new pair. This includes:\\n     * - token: The ERC20 token the pair trades\\n     * - nft: The NFT contract of the collection the pair trades\\n     * - bondingCurve: The bonding curve for the pair to price NFTs, must be whitelisted\\n     * - assetRecipient: The address that will receive the assets traders give during trades.\\n     *   If set to address(0), assets will be sent to the pool address. Not available to TRADE pools.\\n     * - poolType: TOKEN, NFT, or TRADE\\n     * - delta: The delta value used by the bonding curve. The meaning of delta depends on the specific curve.\\n     * - fee: The fee taken by the LP in each trade. Can only be non-zero if poolType is Trade.\\n     * - spotPrice: Param 1 for the bonding curve, usually used for start price\\n     * - nftId: The ERC1155 nft id that this pair trades\\n     * - initialNFTBalance: The initial NFT balance sent from the sender to the new pair\\n     * - initialTokenBalance: The initial token balance sent from the sender to the new pair\\n     * @return pair The new pair\\n     */\\n    function createPairERC1155ERC20(CreateERC1155ERC20PairParams calldata params)\\n        external\\n        returns (LSSVMPairERC1155ERC20 pair)\\n    {\\n        if (!bondingCurveAllowed[params.bondingCurve]) revert LSSVMPairFactory__BondingCurveNotWhitelisted();\\n\\n        pair = LSSVMPairERC1155ERC20(\\n            payable(\\n                address(erc1155ERC20Template).cloneERC1155ERC20Pair(\\n                    this, params.bondingCurve, params.nft, uint8(params.poolType), params.nftId, params.token\\n                )\\n            )\\n        );\\n\\n        _initializePairERC1155ERC20(\\n            pair,\\n            params.token,\\n            params.nft,\\n            params.assetRecipient,\\n            params.delta,\\n            params.fee,\\n            params.spotPrice,\\n            params.nftId,\\n            params.initialNFTBalance,\\n            params.initialTokenBalance\\n        );\\n        emit NewERC1155Pair(address(pair), params.initialNFTBalance);\\n    }\\n\\n    function isValidPair(address pairAddress) public view returns (bool) {\\n        PairVariant variant = LSSVMPair(pairAddress).pairVariant();\\n        if (variant == PairVariant.ERC721_ETH) {\\n            return LSSVMPairCloner.isERC721ETHPairClone(address(this), address(erc721ETHTemplate), pairAddress);\\n        } else if (variant == PairVariant.ERC721_ERC20) {\\n            return LSSVMPairCloner.isERC721ERC20PairClone(address(this), address(erc721ERC20Template), pairAddress);\\n        } else if (variant == PairVariant.ERC1155_ETH) {\\n            return LSSVMPairCloner.isERC1155ETHPairClone(address(this), address(erc1155ETHTemplate), pairAddress);\\n        } else if (variant == PairVariant.ERC1155_ERC20) {\\n            return LSSVMPairCloner.isERC1155ERC20PairClone(address(this), address(erc1155ERC20Template), pairAddress);\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function getPairNFTType(address pairAddress) public pure returns (PairNFTType) {\\n        PairVariant variant = LSSVMPair(pairAddress).pairVariant();\\n        return PairNFTType(uint8(variant) / 2);\\n    }\\n\\n    function getPairTokenType(address pairAddress) public pure returns (PairTokenType) {\\n        PairVariant variant = LSSVMPair(pairAddress).pairVariant();\\n        return PairTokenType(uint8(variant) % 2);\\n    }\\n\\n    function openLock() public {\\n        if (_caller == msg.sender) revert LSSVMPairFactory__ReentrantCall();\\n        _caller = msg.sender;\\n    }\\n\\n    function closeLock() public {\\n        if (_caller != msg.sender) revert LSSVMPairFactory__ReentrantCall();\\n        _caller = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @notice Checks if an address is an allowed auth for a token\\n     * @param tokenAddress The token address to check\\n     * @param proposedAuthAddress The auth address to check\\n     * @return True if the proposedAuthAddress is a valid auth for the tokenAddress, false otherwise.\\n     */\\n    function authAllowedForToken(address tokenAddress, address proposedAuthAddress) public view returns (bool) {\\n        // Check for admin interface\\n        if (\\n            ERC165Checker.supportsInterface(tokenAddress, type(IAdminControl).interfaceId)\\n                && IAdminControl(tokenAddress).isAdmin(proposedAuthAddress)\\n        ) {\\n            return true;\\n        }\\n        // Check for owner\\n        try OwnableUpgradeable(tokenAddress).owner() returns (address owner) {\\n            if (owner == proposedAuthAddress) return true;\\n\\n            if (owner.isContract()) {\\n                try OwnableUpgradeable(owner).owner() returns (address passThroughOwner) {\\n                    if (passThroughOwner == proposedAuthAddress) return true;\\n                } catch {}\\n            }\\n        } catch {}\\n        // Check for default OZ auth role\\n        try IAccessControlUpgradeable(tokenAddress).hasRole(0x00, proposedAuthAddress) returns (bool hasRole) {\\n            if (hasRole) return true;\\n        } catch {}\\n        // Nifty Gateway overrides\\n        try INiftyBuilderInstance(tokenAddress).niftyRegistryContract() returns (address niftyRegistry) {\\n            try INiftyRegistry(niftyRegistry).isValidNiftySender(proposedAuthAddress) returns (bool valid) {\\n                if (valid) return true;\\n            } catch {}\\n        } catch {}\\n        // Foundation overrides\\n        try IFoundationTreasuryNode(tokenAddress).getFoundationTreasury() returns (address payable foundationTreasury) {\\n            try IFoundationTreasury(foundationTreasury).isAdmin(proposedAuthAddress) returns (bool isAdmin) {\\n                if (isAdmin) return true;\\n            } catch {}\\n        } catch {}\\n        // DIGITALAX overrides\\n        try IDigitalax(tokenAddress).accessControls() returns (address externalAccessControls) {\\n            try IDigitalaxAccessControls(externalAccessControls).hasAdminRole(proposedAuthAddress) returns (\\n                bool hasRole\\n            ) {\\n                if (hasRole) return true;\\n            } catch {}\\n        } catch {}\\n        // Art Blocks overrides\\n        try IArtBlocks(tokenAddress).admin() returns (address admin) {\\n            if (admin == proposedAuthAddress) return true;\\n        } catch {}\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Allows receiving ETH in order to receive protocol fees\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * Admin functions\\n     */\\n\\n    /**\\n     * @notice Withdraws the ETH balance to the protocol fee recipient.\\n     * Only callable by the owner.\\n     */\\n    function withdrawETHProtocolFees() external onlyOwner {\\n        protocolFeeRecipient.safeTransferETH(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Withdraws ERC20 tokens to the protocol fee recipient. Only callable by the owner.\\n     * @param token The token to transfer\\n     * @param amount The amount of tokens to transfer\\n     */\\n    function withdrawERC20ProtocolFees(ERC20 token, uint256 amount) external onlyOwner {\\n        token.safeTransfer(protocolFeeRecipient, amount);\\n    }\\n\\n    /**\\n     * @notice Changes the protocol fee recipient address. Only callable by the owner.\\n     * @param _protocolFeeRecipient The new fee recipient\\n     */\\n    function changeProtocolFeeRecipient(address payable _protocolFeeRecipient) external onlyOwner {\\n        if (_protocolFeeRecipient == address(0)) revert LSSVMPairFactory__ZeroAddress();\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit ProtocolFeeRecipientUpdate(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Changes the protocol fee multiplier. Only callable by the owner.\\n     * @param _protocolFeeMultiplier The new fee multiplier, 18 decimals\\n     */\\n    function changeProtocolFeeMultiplier(uint256 _protocolFeeMultiplier) external onlyOwner {\\n        if (_protocolFeeMultiplier > MAX_PROTOCOL_FEE) revert LSSVMPairFactory__FeeTooLarge();\\n        protocolFeeMultiplier = _protocolFeeMultiplier;\\n        emit ProtocolFeeMultiplierUpdate(_protocolFeeMultiplier);\\n    }\\n\\n    /**\\n     * @notice Sets the whitelist status of a bonding curve contract. Only callable by the owner.\\n     * @param bondingCurve The bonding curve contract\\n     * @param isAllowed True to whitelist, false to remove from whitelist\\n     */\\n    function setBondingCurveAllowed(ICurve bondingCurve, bool isAllowed) external onlyOwner {\\n        bondingCurveAllowed[bondingCurve] = isAllowed;\\n        emit BondingCurveStatusUpdate(bondingCurve, isAllowed);\\n    }\\n\\n    /**\\n     * @notice Sets the whitelist status of a contract to be called arbitrarily by a pair.\\n     * Only callable by the owner.\\n     * @param target The target contract\\n     * @param isAllowed True to whitelist, false to remove from whitelist\\n     */\\n    function setCallAllowed(address payable target, bool isAllowed) external onlyOwner {\\n        // Ensure target is not / was not ever a router\\n        if (isAllowed) {\\n            if (routerStatus[LSSVMRouter(target)].wasEverTouched) revert LSSVMPairFactory__CannotCallRouter();\\n        }\\n\\n        callAllowed[target] = isAllowed;\\n        emit CallTargetStatusUpdate(target, isAllowed);\\n    }\\n\\n    /**\\n     * @notice Updates the router whitelist. Only callable by the owner.\\n     * @param _router The router\\n     * @param isAllowed True to whitelist, false to remove from whitelist\\n     */\\n    function setRouterAllowed(LSSVMRouter _router, bool isAllowed) external onlyOwner {\\n        // Ensure target is not arbitrarily callable by pairs\\n        if (isAllowed) {\\n            if (callAllowed[address(_router)]) revert LSSVMPairFactory__CannotCallRouter();\\n        }\\n        routerStatus[_router] = RouterStatus({allowed: isAllowed, wasEverTouched: true});\\n\\n        emit RouterStatusUpdate(_router, isAllowed);\\n    }\\n\\n    /**\\n     * @notice Returns the Settings for a pair if it currently has Settings\\n     * @param pairAddress The address of the pair to look up\\n     * @return settingsEnabled Whether or not the pair has custom settings\\n     * @return bps The royalty basis points from the custom settings, 0 if there is no custom settings\\n     */\\n    function getSettingsForPair(address pairAddress) public view returns (bool settingsEnabled, uint96 bps) {\\n        address settingsAddress = settingsForPair[pairAddress];\\n        if (settingsAddress == address(0)) {\\n            return (false, 0);\\n        }\\n        return ISettings(settingsAddress).getRoyaltyInfo(pairAddress);\\n    }\\n\\n    /**\\n     * @notice Enables or disables an settings for a given NFT collection\\n     *  @param settings The address of the Settings contract\\n     *  @param collectionAddress The NFT project that the settings is toggled for\\n     *  @param enable Bool to determine whether to disable or enable the settings\\n     */\\n    function toggleSettingsForCollection(address settings, address collectionAddress, bool enable) public {\\n        if (!authAllowedForToken(collectionAddress, msg.sender)) revert LSSVMPairFactory__UnauthorizedCaller();\\n        if (enable) {\\n            settingsForCollection[collectionAddress][settings] = true;\\n        } else {\\n            delete settingsForCollection[collectionAddress][settings];\\n        }\\n    }\\n\\n    /**\\n     * @notice Enables an Settings for a given Pair\\n     * @notice Only the owner of the Pair can call this function\\n     * @notice The Settings must be enabled for the Pair's collection\\n     * @param settings The address of the Settings contract\\n     * @param pairAddress The address of the Pair contract\\n     */\\n    function enableSettingsForPair(address settings, address pairAddress) public {\\n        if (!isValidPair(pairAddress)) revert LSSVMPairFactory__InvalidPair();\\n        LSSVMPair pair = LSSVMPair(pairAddress);\\n        if (pair.owner() != msg.sender) revert LSSVMPairFactory__UnauthorizedCaller();\\n        if (!settingsForCollection[address(pair.nft())][settings]) {\\n            revert LSSVMPairFactory__SettingsNotEnabledForCollection();\\n        }\\n        settingsForPair[pairAddress] = settings;\\n    }\\n\\n    /**\\n     * @notice Disables an Settings for a given Pair\\n     * @notice Only the owner of the Pair can call this function\\n     * @notice The Settings must already be enabled for the Pair\\n     * @param settings The address of the Settings contract\\n     * @param pairAddress The address of the Pair contract\\n     */\\n    function disableSettingsForPair(address settings, address pairAddress) public {\\n        if (!isValidPair(pairAddress)) revert LSSVMPairFactory__InvalidPair();\\n        if (settingsForPair[pairAddress] != settings) revert LSSVMPairFactory__SettingsNotEnabledForPair();\\n        LSSVMPair pair = LSSVMPair(pairAddress);\\n        if (pair.owner() != msg.sender) revert LSSVMPairFactory__UnauthorizedCaller();\\n        delete settingsForPair[pairAddress];\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    function _initializePairERC721ETH(\\n        LSSVMPairERC721ETH _pair,\\n        IERC721 _nft,\\n        address payable _assetRecipient,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice,\\n        uint256[] calldata _initialNFTIDs\\n    ) internal {\\n        // Initialize pair\\n        _pair.initialize(msg.sender, _assetRecipient, _delta, _fee, _spotPrice);\\n\\n        // Transfer initial ETH to pair\\n        if (msg.value != 0) payable(address(_pair)).safeTransferETH(msg.value);\\n\\n        // Transfer initial NFTs from sender to pair\\n        uint256 numNFTs = _initialNFTIDs.length;\\n        for (uint256 i; i < numNFTs;) {\\n            _nft.transferFrom(msg.sender, address(_pair), _initialNFTIDs[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _initializePairERC721ERC20(\\n        LSSVMPairERC721ERC20 _pair,\\n        ERC20 _token,\\n        IERC721 _nft,\\n        address payable _assetRecipient,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice,\\n        uint256[] calldata _initialNFTIDs,\\n        uint256 _initialTokenBalance\\n    ) internal {\\n        // Initialize pair\\n        _pair.initialize(msg.sender, _assetRecipient, _delta, _fee, _spotPrice);\\n\\n        // Transfer initial tokens to pair (if != 0)\\n        if (_initialTokenBalance != 0) {\\n            _token.safeTransferFrom(msg.sender, address(_pair), _initialTokenBalance);\\n        }\\n\\n        // Transfer initial NFTs from sender to pair\\n        uint256 numNFTs = _initialNFTIDs.length;\\n        for (uint256 i; i < numNFTs;) {\\n            _nft.transferFrom(msg.sender, address(_pair), _initialNFTIDs[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _initializePairERC1155ETH(\\n        LSSVMPairERC1155ETH _pair,\\n        IERC1155 _nft,\\n        address payable _assetRecipient,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice,\\n        uint256 _nftId,\\n        uint256 _initialNFTBalance\\n    ) internal {\\n        // Initialize pair\\n        _pair.initialize(msg.sender, _assetRecipient, _delta, _fee, _spotPrice);\\n\\n        // Transfer initial ETH to pair\\n        if (msg.value != 0) payable(address(_pair)).safeTransferETH(msg.value);\\n\\n        // Transfer initial NFTs from sender to pair\\n        if (_initialNFTBalance != 0) {\\n            _nft.safeTransferFrom(msg.sender, address(_pair), _nftId, _initialNFTBalance, bytes(\\\"\\\"));\\n        }\\n    }\\n\\n    function _initializePairERC1155ERC20(\\n        LSSVMPairERC1155ERC20 _pair,\\n        ERC20 _token,\\n        IERC1155 _nft,\\n        address payable _assetRecipient,\\n        uint128 _delta,\\n        uint96 _fee,\\n        uint128 _spotPrice,\\n        uint256 _nftId,\\n        uint256 _initialNFTBalance,\\n        uint256 _initialTokenBalance\\n    ) internal {\\n        // Initialize pair\\n        _pair.initialize(msg.sender, _assetRecipient, _delta, _fee, _spotPrice);\\n\\n        // Transfer initial tokens to pair\\n        if (_initialTokenBalance != 0) {\\n            _token.safeTransferFrom(msg.sender, address(_pair), _initialTokenBalance);\\n        }\\n\\n        // Transfer initial NFTs from sender to pair\\n        if (_initialNFTBalance != 0) {\\n            _nft.safeTransferFrom(msg.sender, address(_pair), _nftId, _initialNFTBalance, bytes(\\\"\\\"));\\n        }\\n    }\\n\\n    /**\\n     * @dev Used to deposit NFTs into a pair after creation and emit an event for indexing (if recipient is indeed a pair)\\n     */\\n    function depositNFTs(IERC721 _nft, uint256[] calldata ids, address recipient) external {\\n        uint256 numNFTs = ids.length;\\n\\n        // Early return for trivial transfers\\n        if (numNFTs == 0) return;\\n\\n        // Transfer NFTs from caller to recipient\\n        for (uint256 i; i < numNFTs;) {\\n            _nft.transferFrom(msg.sender, recipient, ids[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (isValidPair(recipient) && (address(_nft) == LSSVMPair(recipient).nft())) {\\n            emit NFTDeposit(recipient, ids);\\n        }\\n    }\\n\\n    /**\\n     * @dev Used to deposit ERC20s into a pair after creation and emit an event for indexing (if recipient is indeed an ERC20 pair and the token matches)\\n     */\\n    function depositERC20(ERC20 token, address recipient, uint256 amount) external {\\n        // Early return for trivial transfers\\n        if (amount == 0) return;\\n\\n        token.safeTransferFrom(msg.sender, recipient, amount);\\n        if (\\n            isValidPair(recipient) && getPairTokenType(recipient) == PairTokenType.ERC20\\n                && token == LSSVMPairERC20(recipient).token()\\n        ) {\\n            emit ERC20Deposit(recipient, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Used to deposit ERC1155 NFTs into a pair after creation and emit an event for indexing (if recipient is indeed a pair)\\n     */\\n    function depositERC1155(IERC1155 nft, uint256 id, address recipient, uint256 amount) external {\\n        if (amount == 0) return;\\n\\n        nft.safeTransferFrom(msg.sender, recipient, id, amount, bytes(\\\"\\\"));\\n\\n        if (\\n            isValidPair(recipient) && getPairNFTType(recipient) == PairNFTType.ERC1155\\n                && address(nft) == LSSVMPair(recipient).nft() && id == LSSVMPairERC1155(recipient).nftId()\\n        ) {\\n            emit ERC1155Deposit(recipient, id, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/property-checking/IPropertyChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IPropertyChecker {\\n    function hasProperties(uint256[] calldata ids, bytes calldata params) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * A collection of generic errors that can be referenced across multiple\\n * contracts. Contract-specific errors should still be stored in their\\n * individual Solidity files.\\n */\\n\\n/// If a NULL address tries to be stored which should not be accepted\\nerror CannotSetNullAddress();\\n\\n/// If the caller has entered an insufficient amount to process the action. This\\n/// will likely be a zero amount.\\nerror InsufficientAmount();\\n\\n/// If the caller enters a percentage value that is too high for the requirements\\nerror PercentageTooHigh(uint amount);\\n\\n/// If a required ETH or token `transfer` call fails\\nerror TransferFailed();\\n\\n/// If a user calls a deposit related function with a zero amount\\nerror CannotDepositZeroAmount();\\n\\n/// If a user calls a withdrawal related function with a zero amount\\nerror CannotWithdrawZeroAmount();\\n\\n/// If there are no rewards available to be claimed\\nerror NoRewardsAvailableToClaim();\\n\\n/// If the requested collection is not approved\\n/// @param collection Address of the collection requested\\nerror CollectionNotApproved(address collection);\\n\\n/// If the requested strategy implementation is not approved\\n/// @param strategyImplementation Address of the strategy implementation requested\\nerror StrategyNotApproved(address strategyImplementation);\\n\"\r\n    },\r\n    \"src/interfaces/actions/Sweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Used by sweepers.\\n */\\nabstract contract ISweeper {\\n    function execute(address[] calldata collections, uint[] calldata amounts, bytes calldata data)\\n        external\\n        payable\\n        virtual\\n        returns (string memory);\\n\\n    /**\\n     * Specify the {AuthorityControl} permissions, if any, that are required to\\n     * run the sweeper. If no permissions are set, then anyone can run the sweeper\\n     * in their allocated sweep window.\\n     */\\n    function permissions() public view virtual returns (bytes32);\\n}\\n\\n/**\\n * Used by mercenary sweepers.\\n */\\nabstract contract IMercenarySweeper {\\n    function execute(uint warIndex, uint amount) external payable virtual returns (uint);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value)\\n        external\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/LSSVMRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/utils/SafeTransferLib.sol\\\";\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {LSSVMPair} from \\\"./LSSVMPair.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"./ILSSVMPairFactoryLike.sol\\\";\\nimport {CurveErrorCodes} from \\\"./bonding-curves/CurveErrorCodes.sol\\\";\\n\\ncontract LSSVMRouter {\\n    using SafeTransferLib for address payable;\\n    using SafeTransferLib for ERC20;\\n\\n    struct PairSwapSpecific {\\n        LSSVMPair pair;\\n        uint256[] nftIds;\\n    }\\n\\n    struct RobustPairSwapSpecific {\\n        PairSwapSpecific swapInfo;\\n        uint256 maxCost;\\n    }\\n\\n    struct RobustPairSwapSpecificForToken {\\n        PairSwapSpecific swapInfo;\\n        uint256 minOutput;\\n    }\\n\\n    struct NFTsForSpecificNFTsTrade {\\n        PairSwapSpecific[] nftToTokenTrades;\\n        PairSwapSpecific[] tokenToNFTTrades;\\n    }\\n\\n    struct RobustPairNFTsFoTokenAndTokenforNFTsTrade {\\n        RobustPairSwapSpecific[] tokenToNFTTrades;\\n        RobustPairSwapSpecificForToken[] nftToTokenTrades;\\n        uint256 inputAmount;\\n        address payable tokenRecipient;\\n        address nftRecipient;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        _checkDeadline(deadline);\\n        _;\\n    }\\n\\n    ILSSVMPairFactoryLike public immutable factory;\\n\\n    constructor(ILSSVMPairFactoryLike _factory) {\\n        factory = _factory;\\n    }\\n\\n    /**\\n     * ETH swaps\\n     */\\n\\n    /**\\n     * @notice Swaps ETH into specific NFTs using multiple pairs.\\n     * @param swapList The list of pairs to trade with and the IDs of the NFTs to buy from each.\\n     * @param ethRecipient The address that will receive the unspent ETH input\\n     * @param nftRecipient The address that will receive the NFT output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return remainingValue The unspent ETH amount\\n     */\\n    function swapETHForSpecificNFTs(\\n        PairSwapSpecific[] calldata swapList,\\n        address payable ethRecipient,\\n        address nftRecipient,\\n        uint256 deadline\\n    ) external payable checkDeadline(deadline) returns (uint256 remainingValue) {\\n        return _swapETHForSpecificNFTs(swapList, msg.value, ethRecipient, nftRecipient);\\n    }\\n\\n    /**\\n     * @notice Swaps one set of NFTs into another set of specific NFTs using multiple pairs, using\\n     * ETH as the intermediary.\\n     * @param trade The struct containing all NFT-to-ETH swaps and ETH-to-NFT swaps.\\n     * @param minOutput The minimum acceptable total excess ETH received\\n     * @param ethRecipient The address that will receive the ETH output\\n     * @param nftRecipient The address that will receive the NFT output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return outputAmount The total ETH received\\n     */\\n    function swapNFTsForSpecificNFTsThroughETH(\\n        NFTsForSpecificNFTsTrade calldata trade,\\n        uint256 minOutput,\\n        address payable ethRecipient,\\n        address nftRecipient,\\n        uint256 deadline\\n    ) external payable checkDeadline(deadline) returns (uint256 outputAmount) {\\n        // Swap NFTs for ETH\\n        // minOutput of swap set to 0 since we're doing an aggregate slippage check\\n        outputAmount = _swapNFTsForToken(trade.nftToTokenTrades, 0, payable(address(this)));\\n\\n        // Add extra value to buy NFTs\\n        outputAmount += msg.value;\\n\\n        // Swap ETH for specific NFTs\\n        // cost <= inputValue = outputAmount - minOutput, so outputAmount' = (outputAmount - minOutput - cost) + minOutput >= minOutput\\n        outputAmount = _swapETHForSpecificNFTs(\\n            trade.tokenToNFTTrades, outputAmount - minOutput, ethRecipient, nftRecipient\\n        ) + minOutput;\\n    }\\n\\n    /**\\n     * ERC20 swaps\\n     *\\n     * Note: All ERC20 swaps assume that a single ERC20 token is used for all the pairs involved.\\n     * Swapping using multiple tokens in the same transaction is possible, but the slippage checks\\n     * & the return values will be meaningless, and may lead to undefined behavior.\\n     *\\n     * Note: The sender should ideally grant infinite token approval to the router in order for NFT-to-NFT\\n     * swaps to work smoothly.\\n     */\\n\\n    /**\\n     * @notice Swaps ERC20 tokens into specific NFTs using multiple pairs.\\n     * @param swapList The list of pairs to trade with and the IDs of the NFTs to buy from each.\\n     * @param inputAmount The amount of ERC20 tokens to add to the ERC20-to-NFT swaps\\n     * @param nftRecipient The address that will receive the NFT output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return remainingValue The unspent token amount\\n     */\\n    function swapERC20ForSpecificNFTs(\\n        PairSwapSpecific[] calldata swapList,\\n        uint256 inputAmount,\\n        address nftRecipient,\\n        uint256 deadline\\n    ) external checkDeadline(deadline) returns (uint256 remainingValue) {\\n        return _swapERC20ForSpecificNFTs(swapList, inputAmount, nftRecipient);\\n    }\\n\\n    /**\\n     * @notice Swaps NFTs into ETH/ERC20 using multiple pairs.\\n     * @param swapList The list of pairs to trade with and the IDs of the NFTs to sell to each.\\n     * @param minOutput The minimum acceptable total tokens received\\n     * @param tokenRecipient The address that will receive the token output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return outputAmount The total tokens received\\n     */\\n    function swapNFTsForToken(\\n        PairSwapSpecific[] calldata swapList,\\n        uint256 minOutput,\\n        address tokenRecipient,\\n        uint256 deadline\\n    ) external checkDeadline(deadline) returns (uint256 outputAmount) {\\n        return _swapNFTsForToken(swapList, minOutput, payable(tokenRecipient));\\n    }\\n\\n    /**\\n     * @notice Swaps one set of NFTs into another set of specific NFTs using multiple pairs, using\\n     * an ERC20 token as the intermediary.\\n     * @param trade The struct containing all NFT-to-ERC20 swaps and ERC20-to-NFT swaps.\\n     * @param inputAmount The amount of ERC20 tokens to add to the ERC20-to-NFT swaps\\n     * @param minOutput The minimum acceptable total excess tokens received\\n     * @param nftRecipient The address that will receive the NFT output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return outputAmount The total ERC20 tokens received\\n     */\\n    function swapNFTsForSpecificNFTsThroughERC20(\\n        NFTsForSpecificNFTsTrade calldata trade,\\n        uint256 inputAmount,\\n        uint256 minOutput,\\n        address nftRecipient,\\n        uint256 deadline\\n    ) external checkDeadline(deadline) returns (uint256 outputAmount) {\\n        // Swap NFTs for ERC20\\n        // minOutput of swap set to 0 since we're doing an aggregate slippage check\\n        // output tokens are sent to msg.sender\\n        outputAmount = _swapNFTsForToken(trade.nftToTokenTrades, 0, payable(msg.sender));\\n\\n        // Add extra value to buy NFTs\\n        outputAmount += inputAmount;\\n\\n        // Swap ERC20 for specific NFTs\\n        // cost <= maxCost = outputAmount - minOutput, so outputAmount' = outputAmount - cost >= minOutput\\n        // input tokens are taken directly from msg.sender\\n        outputAmount =\\n            _swapERC20ForSpecificNFTs(trade.tokenToNFTTrades, outputAmount - minOutput, nftRecipient) + minOutput;\\n    }\\n\\n    /**\\n     * Robust Swaps\\n     * These are \\\"robust\\\" versions of the NFT<>Token swap functions which will never revert due to slippage\\n     * Instead, users specify a per-swap max cost. If the price changes more than the user specifies, no swap is attempted. This allows users to specify a batch of swaps, and execute as many of them as possible.\\n     */\\n\\n    /**\\n     * @dev Ensure msg.value >= sum of values in maxCostPerPair to make sure the transaction doesn't revert\\n     * @param swapList The list of pairs to trade with and the IDs of the NFTs to buy from each.\\n     * @param ethRecipient The address that will receive the unspent ETH input\\n     * @param nftRecipient The address that will receive the NFT output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return remainingValue The unspent token amount\\n     */\\n    function robustSwapETHForSpecificNFTs(\\n        RobustPairSwapSpecific[] calldata swapList,\\n        address payable ethRecipient,\\n        address nftRecipient,\\n        uint256 deadline\\n    ) public payable virtual checkDeadline(deadline) returns (uint256 remainingValue) {\\n        remainingValue = msg.value;\\n        uint256 pairCost;\\n        CurveErrorCodes.Error error;\\n\\n        // Try doing each swap\\n        uint256 numSwaps = swapList.length;\\n        for (uint256 i; i < numSwaps;) {\\n            // Calculate actual cost per swap\\n            (error,,, pairCost,,) = swapList[i].swapInfo.pair.getBuyNFTQuote(\\n                swapList[i].swapInfo.nftIds[0], swapList[i].swapInfo.nftIds.length\\n            );\\n\\n            // If within our maxCost and no error, proceed\\n            if (pairCost <= swapList[i].maxCost && error == CurveErrorCodes.Error.OK) {\\n                // We know how much ETH to send because we already did the math above\\n                // So we just send that much\\n                remainingValue -= swapList[i].swapInfo.pair.swapTokenForSpecificNFTs{value: pairCost}(\\n                    swapList[i].swapInfo.nftIds, pairCost, nftRecipient, true, msg.sender\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Return remaining value to sender\\n        if (remainingValue > 0) {\\n            ethRecipient.safeTransferETH(remainingValue);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps as many ERC20 tokens for specific NFTs as possible, respecting the per-swap max cost.\\n     * @param swapList The list of pairs to trade with and the IDs of the NFTs to buy from each.\\n     * @param inputAmount The amount of ERC20 tokens to add to the ERC20-to-NFT swaps\\n     * @param nftRecipient The address that will receive the NFT output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return remainingValue The unspent token amount\\n     */\\n    function robustSwapERC20ForSpecificNFTs(\\n        RobustPairSwapSpecific[] calldata swapList,\\n        uint256 inputAmount,\\n        address nftRecipient,\\n        uint256 deadline\\n    ) public virtual checkDeadline(deadline) returns (uint256 remainingValue) {\\n        remainingValue = inputAmount;\\n        uint256 pairCost;\\n        CurveErrorCodes.Error error;\\n\\n        // Try doing each swap\\n        uint256 numSwaps = swapList.length;\\n        for (uint256 i; i < numSwaps;) {\\n            // Calculate actual cost per swap\\n            (error,,, pairCost,,) = swapList[i].swapInfo.pair.getBuyNFTQuote(\\n                swapList[i].swapInfo.nftIds[0], swapList[i].swapInfo.nftIds.length\\n            );\\n\\n            // If within our maxCost and no error, proceed\\n            if (pairCost <= swapList[i].maxCost && error == CurveErrorCodes.Error.OK) {\\n                remainingValue -= swapList[i].swapInfo.pair.swapTokenForSpecificNFTs(\\n                    swapList[i].swapInfo.nftIds, pairCost, nftRecipient, true, msg.sender\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps as many NFTs for tokens as possible, respecting the per-swap min output\\n     * @param swapList The list of pairs to trade with and the IDs of the NFTs to sell to each.\\n     * @param tokenRecipient The address that will receive the token output\\n     * @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\\n     * @return outputAmount The total ETH/ERC20 received\\n     */\\n    function robustSwapNFTsForToken(\\n        RobustPairSwapSpecificForToken[] calldata swapList,\\n        address payable tokenRecipient,\\n        uint256 deadline\\n    ) public virtual checkDeadline(deadline) returns (uint256 outputAmount) {\\n        // Try doing each swap\\n        uint256 numSwaps = swapList.length;\\n        for (uint256 i; i < numSwaps;) {\\n            uint256 pairOutput;\\n\\n            // Locally scoped to avoid stack too deep error\\n            {\\n                CurveErrorCodes.Error error;\\n                uint256[] memory nftIds = swapList[i].swapInfo.nftIds;\\n                if (nftIds.length == 0) {\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n                (error,,, pairOutput,,) = swapList[i].swapInfo.pair.getSellNFTQuote(nftIds[0], nftIds.length);\\n                if (error != CurveErrorCodes.Error.OK) {\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n            }\\n\\n            // If at least equal to our minOutput, proceed\\n            if (pairOutput >= swapList[i].minOutput) {\\n                // Do the swap and update outputAmount with how many tokens we got\\n                outputAmount += swapList[i].swapInfo.pair.swapNFTsForToken(\\n                    swapList[i].swapInfo.nftIds, 0, tokenRecipient, true, msg.sender\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Buys NFTs with ETH and sells them for tokens in one transaction\\n     * @param params All the parameters for the swap (packed in struct to avoid stack too deep), containing:\\n     * - ethToNFTSwapList The list of NFTs to buy\\n     * - nftToTokenSwapList The list of NFTs to sell\\n     * - inputAmount The max amount of tokens to send (if ERC20)\\n     * - tokenRecipient The address that receives tokens from the NFTs sold\\n     * - nftRecipient The address that receives NFTs\\n     * - deadline UNIX timestamp deadline for the swap\\n     */\\n    function robustSwapETHForSpecificNFTsAndNFTsToToken(RobustPairNFTsFoTokenAndTokenforNFTsTrade calldata params)\\n        external\\n        payable\\n        virtual\\n        returns (uint256 remainingValue, uint256 outputAmount)\\n    {\\n        {\\n            remainingValue = msg.value;\\n            uint256 pairCost;\\n            CurveErrorCodes.Error error;\\n\\n            // Try doing each swap\\n            uint256 numSwaps = params.tokenToNFTTrades.length;\\n            for (uint256 i; i < numSwaps;) {\\n                // Calculate actual cost per swap\\n                (error,,, pairCost,,) = params.tokenToNFTTrades[i].swapInfo.pair.getBuyNFTQuote(\\n                    params.tokenToNFTTrades[i].swapInfo.nftIds[0], params.tokenToNFTTrades[i].swapInfo.nftIds.length\\n                );\\n\\n                // If within our maxCost and no error, proceed\\n                if (pairCost <= params.tokenToNFTTrades[i].maxCost && error == CurveErrorCodes.Error.OK) {\\n                    // We know how much ETH to send because we already did the math above\\n                    // So we just send that much\\n                    remainingValue -= params.tokenToNFTTrades[i].swapInfo.pair.swapTokenForSpecificNFTs{value: pairCost}(\\n                        params.tokenToNFTTrades[i].swapInfo.nftIds, pairCost, params.nftRecipient, true, msg.sender\\n                    );\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // Return remaining value to sender\\n            if (remainingValue > 0) {\\n                params.tokenRecipient.safeTransferETH(remainingValue);\\n            }\\n        }\\n        {\\n            // Try doing each swap\\n            uint256 numSwaps = params.nftToTokenTrades.length;\\n            for (uint256 i; i < numSwaps;) {\\n                uint256 pairOutput;\\n\\n                // Locally scoped to avoid stack too deep error\\n                {\\n                    CurveErrorCodes.Error error;\\n                    uint256 assetId = params.nftToTokenTrades[i].swapInfo.nftIds[0];\\n                    (error,,, pairOutput,,) = params.nftToTokenTrades[i].swapInfo.pair.getSellNFTQuote(\\n                        assetId, params.nftToTokenTrades[i].swapInfo.nftIds.length\\n                    );\\n                    if (error != CurveErrorCodes.Error.OK) {\\n                        unchecked {\\n                            ++i;\\n                        }\\n                        continue;\\n                    }\\n                }\\n\\n                // If at least equal to our minOutput, proceed\\n                if (pairOutput >= params.nftToTokenTrades[i].minOutput) {\\n                    // Do the swap and update outputAmount with how many tokens we got\\n                    outputAmount += params.nftToTokenTrades[i].swapInfo.pair.swapNFTsForToken(\\n                        params.nftToTokenTrades[i].swapInfo.nftIds, 0, params.tokenRecipient, true, msg.sender\\n                    );\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Buys NFTs with ERC20, and sells them for tokens in one transaction\\n     * @param params All the parameters for the swap (packed in struct to avoid stack too deep), containing:\\n     * - ethToNFTSwapList The list of NFTs to buy\\n     * - nftToTokenSwapList The list of NFTs to sell\\n     * - inputAmount The max amount of tokens to send (if ERC20)\\n     * - tokenRecipient The address that receives tokens from the NFTs sold\\n     * - nftRecipient The address that receives NFTs\\n     * - deadline UNIX timestamp deadline for the swap\\n     */\\n    function robustSwapERC20ForSpecificNFTsAndNFTsToToken(RobustPairNFTsFoTokenAndTokenforNFTsTrade calldata params)\\n        external\\n        virtual\\n        returns (uint256 remainingValue, uint256 outputAmount)\\n    {\\n        {\\n            remainingValue = params.inputAmount;\\n            uint256 pairCost;\\n            CurveErrorCodes.Error error;\\n\\n            // Try doing each swap\\n            uint256 numSwaps = params.tokenToNFTTrades.length;\\n            for (uint256 i; i < numSwaps;) {\\n                // Calculate actual cost per swap\\n                (error,,, pairCost,,) = params.tokenToNFTTrades[i].swapInfo.pair.getBuyNFTQuote(\\n                    params.tokenToNFTTrades[i].swapInfo.nftIds[0], params.tokenToNFTTrades[i].swapInfo.nftIds.length\\n                );\\n\\n                // If within our maxCost and no error, proceed\\n                if (pairCost <= params.tokenToNFTTrades[i].maxCost && error == CurveErrorCodes.Error.OK) {\\n                    remainingValue -= params.tokenToNFTTrades[i].swapInfo.pair.swapTokenForSpecificNFTs(\\n                        params.tokenToNFTTrades[i].swapInfo.nftIds, pairCost, params.nftRecipient, true, msg.sender\\n                    );\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n        {\\n            // Try doing each swap\\n            uint256 numSwaps = params.nftToTokenTrades.length;\\n            for (uint256 i; i < numSwaps;) {\\n                uint256 pairOutput;\\n\\n                // Locally scoped to avoid stack too deep error\\n                {\\n                    CurveErrorCodes.Error error;\\n                    uint256 assetId = params.nftToTokenTrades[i].swapInfo.nftIds[0];\\n                    (error,,, pairOutput,,) = params.nftToTokenTrades[i].swapInfo.pair.getSellNFTQuote(\\n                        assetId, params.nftToTokenTrades[i].swapInfo.nftIds.length\\n                    );\\n                    if (error != CurveErrorCodes.Error.OK) {\\n                        unchecked {\\n                            ++i;\\n                        }\\n                        continue;\\n                    }\\n                }\\n\\n                // If at least equal to our minOutput, proceed\\n                if (pairOutput >= params.nftToTokenTrades[i].minOutput) {\\n                    // Do the swap and update outputAmount with how many tokens we got\\n                    outputAmount += params.nftToTokenTrades[i].swapInfo.pair.swapNFTsForToken(\\n                        params.nftToTokenTrades[i].swapInfo.nftIds, 0, params.tokenRecipient, true, msg.sender\\n                    );\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * Restricted functions\\n     */\\n\\n    /**\\n     * @dev Allows an ERC20 pair contract to transfer ERC20 tokens directly from\\n     * the sender, in order to minimize the number of token transfers. Only callable by an ERC20 pair.\\n     * @param token The ERC20 token to transfer\\n     * @param from The address to transfer tokens from\\n     * @param to The address to transfer tokens to\\n     * @param amount The amount of tokens to transfer\\n     */\\n    function pairTransferERC20From(ERC20 token, address from, address to, uint256 amount) external {\\n        // verify caller is a trusted pair contract\\n        require(factory.isValidPair(msg.sender), \\\"Not pair\\\");\\n        // verify caller is an ERC20 pair\\n        require(factory.getPairTokenType(msg.sender) == ILSSVMPairFactoryLike.PairTokenType.ERC20, \\\"Not ERC20 pair\\\");\\n\\n        // transfer tokens to pair\\n        token.safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Allows a pair contract to transfer ERC721 NFTs directly from\\n     * the sender, in order to minimize the number of token transfers. Only callable by a pair.\\n     * @param nft The ERC721 NFT to transfer\\n     * @param from The address to transfer tokens from\\n     * @param to The address to transfer tokens to\\n     * @param id The ID of the NFT to transfer\\n     */\\n    function pairTransferNFTFrom(IERC721 nft, address from, address to, uint256 id) external {\\n        // verify caller is a trusted pair contract\\n        require(factory.isValidPair(msg.sender), \\\"Not pair\\\");\\n\\n        // transfer NFTs to pair\\n        nft.transferFrom(from, to, id);\\n    }\\n\\n    function pairTransferERC1155From(\\n        IERC1155 nft,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        // verify caller is a trusted pair contract\\n        require(factory.isValidPair(msg.sender), \\\"Not pair\\\");\\n\\n        nft.safeBatchTransferFrom(from, to, ids, amounts, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @param deadline The last valid time for a swap\\n     */\\n    function _checkDeadline(uint256 deadline) internal view {\\n        require(block.timestamp <= deadline, \\\"Deadline passed\\\");\\n    }\\n\\n    /**\\n     * @notice Internal function used to swap ETH for a specific set of NFTs\\n     * @param swapList The list of pairs and swap calldata\\n     * @param inputAmount The total amount of ETH to send\\n     * @param ethRecipient The address receiving excess ETH\\n     * @param nftRecipient The address receiving the NFTs from the pairs\\n     * @return remainingValue The unspent token amount\\n     */\\n    function _swapETHForSpecificNFTs(\\n        PairSwapSpecific[] calldata swapList,\\n        uint256 inputAmount,\\n        address payable ethRecipient,\\n        address nftRecipient\\n    ) internal virtual returns (uint256 remainingValue) {\\n        remainingValue = inputAmount;\\n\\n        uint256 pairCost;\\n        CurveErrorCodes.Error error;\\n\\n        // Do swaps\\n        uint256 numSwaps = swapList.length;\\n        for (uint256 i; i < numSwaps;) {\\n            // Calculate the cost per swap first to send exact amount of ETH over, saves gas by avoiding the need to send back excess ETH\\n            (error,,, pairCost,,) = swapList[i].pair.getBuyNFTQuote(swapList[i].nftIds[0], swapList[i].nftIds.length);\\n\\n            // Require no errors\\n            require(error == CurveErrorCodes.Error.OK, \\\"Bonding curve error\\\");\\n\\n            // Total ETH taken from sender cannot exceed inputAmount\\n            // because otherwise the deduction from remainingValue will fail\\n            remainingValue -= swapList[i].pair.swapTokenForSpecificNFTs{value: pairCost}(\\n                swapList[i].nftIds, remainingValue, nftRecipient, true, msg.sender\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Return remaining value to sender\\n        if (remainingValue > 0) {\\n            ethRecipient.safeTransferETH(remainingValue);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function used to swap an ERC20 token for specific NFTs\\n     * @dev Note that we don't need to query the pair's bonding curve first for pricing data because\\n     * we just calculate and take the required amount from the caller during swap time.\\n     * However, we can't \\\"pull\\\" ETH, which is why for the ETH->NFT swaps, we need to calculate the pricing info\\n     * to figure out how much the router should send to the pool.\\n     * @param swapList The list of pairs and swap calldata\\n     * @param inputAmount The total amount of ERC20 tokens to send\\n     * @param nftRecipient The address receiving the NFTs from the pairs\\n     * @return remainingValue The unspent token amount\\n     */\\n    function _swapERC20ForSpecificNFTs(PairSwapSpecific[] calldata swapList, uint256 inputAmount, address nftRecipient)\\n        internal\\n        virtual\\n        returns (uint256 remainingValue)\\n    {\\n        remainingValue = inputAmount;\\n\\n        // Do swaps\\n        uint256 numSwaps = swapList.length;\\n        for (uint256 i; i < numSwaps;) {\\n            // Tokens are transferred in by the pair calling router.pairTransferERC20From\\n            // Total tokens taken from sender cannot exceed inputAmount\\n            // because otherwise the deduction from remainingValue will fail\\n            remainingValue -= swapList[i].pair.swapTokenForSpecificNFTs(\\n                swapList[i].nftIds, remainingValue, nftRecipient, true, msg.sender\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps NFTs for tokens, designed to be used for 1 token at a time\\n     * @dev Calling with multiple tokens is permitted, BUT minOutput will be\\n     * far from enough of a safety check because different tokens almost certainly have different unit prices.\\n     * @param swapList The list of pairs and swap calldata\\n     * @param minOutput The minimum number of tokens to be receieved from the swaps\\n     * @param tokenRecipient The address that receives the tokens\\n     * @return outputAmount The number of tokens to be received\\n     */\\n    function _swapNFTsForToken(PairSwapSpecific[] calldata swapList, uint256 minOutput, address payable tokenRecipient)\\n        internal\\n        virtual\\n        returns (uint256 outputAmount)\\n    {\\n        // Do swaps\\n        uint256 numSwaps = swapList.length;\\n        for (uint256 i; i < numSwaps;) {\\n            // Do the swap for token and then update outputAmount\\n            // Note: minExpectedTokenOutput is set to 0 since we're doing an aggregate slippage check below\\n            outputAmount += swapList[i].pair.swapNFTsForToken(swapList[i].nftIds, 0, tokenRecipient, true, msg.sender);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Aggregate slippage check\\n        require(outputAmount >= minOutput, \\\"outputAmount too low\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/bonding-curves/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {CurveErrorCodes} from \\\"./CurveErrorCodes.sol\\\";\\n\\ninterface ICurve {\\n    /**\\n     * @notice Validates if a delta value is valid for the curve. The criteria for\\n     * validity can be different for each type of curve, for instance ExponentialCurve\\n     * requires delta to be greater than 1.\\n     * @param delta The delta value to be validated\\n     * @return valid True if delta is valid, false otherwise\\n     */\\n    function validateDelta(uint128 delta) external pure returns (bool valid);\\n\\n    /**\\n     * @notice Validates if a new spot price is valid for the curve. Spot price is generally assumed to be the immediate sell price of 1 NFT to the pool, in units of the pool's paired token.\\n     * @param newSpotPrice The new spot price to be set\\n     * @return valid True if the new spot price is valid, false otherwise\\n     */\\n    function validateSpotPrice(uint128 newSpotPrice) external view returns (bool valid);\\n\\n    /**\\n     * @notice Given the current state of the pair and the trade, computes how much the user\\n     * should pay to purchase an NFT from the pair, the new spot price, and other values.\\n     * @param spotPrice The current selling spot price of the pair, in tokens\\n     * @param delta The delta parameter of the pair, what it means depends on the curve\\n     * @param numItems The number of NFTs the user is buying from the pair\\n     * @param feeMultiplier Determines how much fee the LP takes from this trade, 18 decimals\\n     * @param protocolFeeMultiplier Determines how much fee the protocol takes from this trade, 18 decimals\\n     * @return error Any math calculation errors, only Error.OK means the returned values are valid\\n     * @return newSpotPrice The updated selling spot price, in tokens\\n     * @return newDelta The updated delta, used to parameterize the bonding curve\\n     * @return inputValue The amount that the user should pay, in tokens\\n     * @return tradeFee The amount that is sent to the trade fee recipient\\n     * @return protocolFee The amount of fee to send to the protocol, in tokens\\n     */\\n    function getBuyInfo(\\n        uint128 spotPrice,\\n        uint128 delta,\\n        uint256 numItems,\\n        uint256 feeMultiplier,\\n        uint256 protocolFeeMultiplier\\n    )\\n        external\\n        view\\n        returns (\\n            CurveErrorCodes.Error error,\\n            uint128 newSpotPrice,\\n            uint128 newDelta,\\n            uint256 inputValue,\\n            uint256 tradeFee,\\n            uint256 protocolFee\\n        );\\n\\n    /**\\n     * @notice Given the current state of the pair and the trade, computes how much the user\\n     * should receive when selling NFTs to the pair, the new spot price, and other values.\\n     * @param spotPrice The current selling spot price of the pair, in tokens\\n     * @param delta The delta parameter of the pair, what it means depends on the curve\\n     * @param numItems The number of NFTs the user is selling to the pair\\n     * @param feeMultiplier Determines how much fee the LP takes from this trade, 18 decimals\\n     * @param protocolFeeMultiplier Determines how much fee the protocol takes from this trade, 18 decimals\\n     * @return error Any math calculation errors, only Error.OK means the returned values are valid\\n     * @return newSpotPrice The updated selling spot price, in tokens\\n     * @return newDelta The updated delta, used to parameterize the bonding curve\\n     * @return outputValue The amount that the user should receive, in tokens\\n     * @return tradeFee The amount that is sent to the trade fee recipient\\n     * @return protocolFee The amount of fee to send to the protocol, in tokens\\n     */\\n    function getSellInfo(\\n        uint128 spotPrice,\\n        uint128 delta,\\n        uint256 numItems,\\n        uint256 feeMultiplier,\\n        uint256 protocolFeeMultiplier\\n    )\\n        external\\n        view\\n        returns (\\n            CurveErrorCodes.Error error,\\n            uint128 newSpotPrice,\\n            uint128 newDelta,\\n            uint256 outputValue,\\n            uint256 tradeFee,\\n            uint256 protocolFee\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/ILSSVMPairFactoryLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {LSSVMRouter} from \\\"./LSSVMRouter.sol\\\";\\n\\ninterface ILSSVMPairFactoryLike {\\n    struct Settings {\\n        uint96 bps;\\n        address pairAddress;\\n    }\\n\\n    enum PairNFTType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    enum PairTokenType {\\n        ETH,\\n        ERC20\\n    }\\n\\n    enum PairVariant {\\n        ERC721_ETH,\\n        ERC721_ERC20,\\n        ERC1155_ETH,\\n        ERC1155_ERC20\\n    }\\n\\n    function protocolFeeMultiplier() external view returns (uint256);\\n\\n    function protocolFeeRecipient() external view returns (address payable);\\n\\n    function callAllowed(address target) external view returns (bool);\\n\\n    function authAllowedForToken(address tokenAddress, address proposedAuthAddress) external view returns (bool);\\n\\n    function getSettingsForPair(address pairAddress) external view returns (bool settingsEnabled, uint96 bps);\\n\\n    function enableSettingsForPair(address settings, address pairAddress) external;\\n\\n    function disableSettingsForPair(address settings, address pairAddress) external;\\n\\n    function routerStatus(LSSVMRouter router) external view returns (bool allowed, bool wasEverTouched);\\n\\n    function isValidPair(address pairAddress) external view returns (bool);\\n\\n    function getPairNFTType(address pairAddress) external pure returns (PairNFTType);\\n\\n    function getPairTokenType(address pairAddress) external pure returns (PairTokenType);\\n\\n    function openLock() external;\\n\\n    function closeLock() external;\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/bonding-curves/CurveErrorCodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ncontract CurveErrorCodes {\\n    enum Error {\\n        OK, // No error\\n        INVALID_NUMITEMS, // The numItem value is 0\\n        SPOT_PRICE_OVERFLOW, // The updated spot price doesn't fit into 128 bits\\n        DELTA_OVERFLOW, // The updated delta doesn't fit into 128 bits\\n        SPOT_PRICE_UNDERFLOW, // The updated spot price goes too low\\n        AUCTION_ENDED // The auction has ended\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/lib/IOwnershipTransferReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IOwnershipTransferReceiver {\\n    function onOwnershipTransferred(address oldOwner, bytes memory data) external payable;\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/lib/OwnableWithTransferCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport {IOwnershipTransferReceiver} from \\\"./IOwnershipTransferReceiver.sol\\\";\\n\\nabstract contract OwnableWithTransferCallback {\\n    using ERC165Checker for address;\\n    using Address for address;\\n\\n    bytes4 constant TRANSFER_CALLBACK = type(IOwnershipTransferReceiver).interfaceId;\\n\\n    error Ownable_NotOwner();\\n    error Ownable_NewOwnerZeroAddress();\\n\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal {\\n        _owner = initialOwner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (owner() != msg.sender) revert Ownable_NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * @param newOwner The new address to become owner\\n     * @param data Any additional data to send to the ownership received callback.\\n     * Disallows setting to the zero address as a way to more gas-efficiently avoid reinitialization.\\n     * When ownership is transferred, if the new owner implements IOwnershipTransferCallback, we make a callback.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner, bytes calldata data) public payable virtual onlyOwner {\\n        if (newOwner == address(0)) revert Ownable_NewOwnerZeroAddress();\\n        _transferOwnership(newOwner);\\n\\n        if (newOwner.isContract()) {\\n            try IOwnershipTransferReceiver(newOwner).onOwnershipTransferred{value: msg.value}(msg.sender, data) {}\\n            // If revert...\\n            catch (bytes memory reason) {\\n                // If we just transferred to a contract w/ no callback, this is fine\\n                if (reason.length == 0) {\\n                    // i.e., no need to revert\\n                }\\n                // Otherwise, the callback had an error, and we should revert\\n                else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        _owner = newOwner;\\n        emit OwnershipTransferred(newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/UD60x18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport \\\"./ud60x18/Casting.sol\\\";\\nimport \\\"./ud60x18/Constants.sol\\\";\\nimport \\\"./ud60x18/Conversions.sol\\\";\\nimport \\\"./ud60x18/Errors.sol\\\";\\nimport \\\"./ud60x18/Helpers.sol\\\";\\nimport \\\"./ud60x18/Math.sol\\\";\\nimport \\\"./ud60x18/ValueType.sol\\\";\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/lib/LSSVMPairCloner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\nimport {ICurve} from \\\"../bonding-curves/ICurve.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\n\\nlibrary LSSVMPairCloner {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * During the delegate call, extra data is copied into the calldata which can then be\\n     * accessed by the implementation contract.\\n     *\\n     * @return instance The address of the new pair instance\\n     */\\n    function cloneERC721ETHPair(\\n        address implementation,\\n        ILSSVMPairFactoryLike factory,\\n        ICurve bondingCurve,\\n        IERC721 nft,\\n        uint8 poolType,\\n        address propertyChecker\\n    ) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // CREATION (9 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // creation size = 09\\n            // runtime size = 86\\n            // 60 runtime  | PUSH1 runtime (r)     | r                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 r                     | \u2013\\n            // 81          | DUP2                  | r 0 r                   | \u2013\\n            // 60 creation | PUSH1 creation (c)    | c r 0 r                 | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 c r 0 r               | \u2013\\n            // 39          | CODECOPY              | 0 r                     | [0-runSize): runtime code\\n            // f3          | RETURN                |                         | [0-runSize): runtime code\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // RUNTIME (53 bytes of code + 81 bytes of extra data = 134 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // extra data size = 51\\n            // 3d          | RETURNDATASIZE        | 0                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0                     | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0                   | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0 0                 | \u2013\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 cds 0 0 0 0         | \u2013\\n            // 37          | CALLDATACOPY          | 0 0 0 0                 | [0, cds) = calldata\\n            // 60 extra    | PUSH1 extra           | extra 0 0 0 0           | [0, cds) = calldata\\n            // 60 0x35     | PUSH1 0x35            | 0x35 extra 0 0 0 0      | [0, cds) = calldata // 0x35 (53) is runtime size - data\\n            // 36          | CALLDATASIZE          | cds 0x35 extra 0 0 0 0  | [0, cds) = calldata\\n            // 39          | CODECOPY              | 0 0 0 0                 | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 60 extra    | PUSH1 extra           | extra cds 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 01          | ADD                   | cds+extra 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 73 addr     | PUSH20 0x123\u2026         | addr 0 cds 0 0 0 0      | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            mstore(ptr, hex\\\"60863d8160093d39f33d3d3d3d363d3d37605160353639366051013d73000000\\\")\\n            mstore(add(ptr, 0x1d), shl(0x60, implementation))\\n\\n            // 5a          | GAS                   | gas addr 0 cds 0 0 0 0  | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // f4          | DELEGATECALL          | success 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds success 0 0         | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds rds success 0 0     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 93          | SWAP4                 | 0 rds success 0 rds     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 80          | DUP1                  | 0 0 rds success 0 rds   | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3e          | RETURNDATACOPY        | success 0 rds           | [0, rds) = return data (there might be some irrelevant leftovers in memory [rds, cds+0x35) when rds < cds+0x35)\\n            // 60 0x33     | PUSH1 0x33            | 0x33 success 0 rds      | [0, rds) = return data\\n            // 57          | JUMPI                 | 0 rds                   | [0, rds) = return data\\n            // fd          | REVERT                | \u2013                       | [0, rds) = return data\\n            // 5b          | JUMPDEST              | 0 rds                   | [0, rds) = return data\\n            // f3          | RETURN                | \u2013                       | [0, rds) = return data\\n            mstore(add(ptr, 0x31), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // EXTRA DATA (81 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            mstore(add(ptr, 0x3e), shl(0x60, factory))\\n            mstore(add(ptr, 0x52), shl(0x60, bondingCurve))\\n            mstore(add(ptr, 0x66), shl(0x60, nft))\\n            mstore8(add(ptr, 0x7a), poolType)\\n            mstore(add(ptr, 0x7b), shl(0x60, propertyChecker))\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // Total length is 143 (8f) bytes\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            instance := create(0, ptr, 0x8f)\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * During the delegate call, extra data is copied into the calldata which can then be\\n     * accessed by the implementation contract.\\n     *\\n     * @return instance The address of the new pair instance\\n     */\\n    function cloneERC721ERC20Pair(\\n        address implementation,\\n        ILSSVMPairFactoryLike factory,\\n        ICurve bondingCurve,\\n        IERC721 nft,\\n        uint8 poolType,\\n        address propertyChecker,\\n        ERC20 token\\n    ) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // CREATION (9 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // creation size = 09\\n            // runtime size = 9a\\n            // 60 runtime  | PUSH1 runtime (r)     | r                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 r                     | \u2013\\n            // 81          | DUP2                  | r 0 r                   | \u2013\\n            // 60 creation | PUSH1 creation (c)    | c r 0 r                 | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 c r 0 r               | \u2013\\n            // 39          | CODECOPY              | 0 r                     | [0-runSize): runtime code\\n            // f3          | RETURN                |                         | [0-runSize): runtime code\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // RUNTIME (53 bytes of code + 101 bytes of extra data = 154 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // extra data size = 65\\n            // 3d          | RETURNDATASIZE        | 0                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0                     | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0                   | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0 0                 | \u2013\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 cds 0 0 0 0         | \u2013\\n            // 37          | CALLDATACOPY          | 0 0 0 0                 | [0, cds) = calldata\\n            // 60 extra    | PUSH1 extra           | extra 0 0 0 0           | [0, cds) = calldata\\n            // 60 0x35     | PUSH1 0x35            | 0x35 extra 0 0 0 0      | [0, cds) = calldata // 0x35 (53) is runtime size - data\\n            // 36          | CALLDATASIZE          | cds 0x35 extra 0 0 0 0  | [0, cds) = calldata\\n            // 39          | CODECOPY              | 0 0 0 0                 | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 60 extra    | PUSH1 extra           | extra cds 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 01          | ADD                   | cds+extra 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 73 addr     | PUSH20 0x123\u2026         | addr 0 cds 0 0 0 0      | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            mstore(ptr, hex\\\"609a3d8160093d39f33d3d3d3d363d3d37606560353639366065013d73000000\\\")\\n            mstore(add(ptr, 0x1d), shl(0x60, implementation))\\n\\n            // 5a          | GAS                   | gas addr 0 cds 0 0 0 0  | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // f4          | DELEGATECALL          | success 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds success 0 0         | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds rds success 0 0     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 93          | SWAP4                 | 0 rds success 0 rds     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 80          | DUP1                  | 0 0 rds success 0 rds   | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3e          | RETURNDATACOPY        | success 0 rds           | [0, rds) = return data (there might be some irrelevant leftovers in memory [rds, cds+0x37) when rds < cds+0x37)\\n            // 60 0x33     | PUSH1 0x33            | 0x33 success 0 rds      | [0, rds) = return data\\n            // 57          | JUMPI                 | 0 rds                   | [0, rds) = return data\\n            // fd          | REVERT                | \u2013                       | [0, rds) = return data\\n            // 5b          | JUMPDEST              | 0 rds                   | [0, rds) = return data\\n            // f3          | RETURN                | \u2013                       | [0, rds) = return data\\n            mstore(add(ptr, 0x31), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // EXTRA DATA (101 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            mstore(add(ptr, 0x3e), shl(0x60, factory))\\n            mstore(add(ptr, 0x52), shl(0x60, bondingCurve))\\n            mstore(add(ptr, 0x66), shl(0x60, nft))\\n            mstore8(add(ptr, 0x7a), poolType)\\n            mstore(add(ptr, 0x7b), shl(0x60, propertyChecker))\\n            mstore(add(ptr, 0x8f), shl(0x60, token))\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // Total length is 163 (a3) bytes\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            instance := create(0, ptr, 0xa3)\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a contract is a clone of a LSSVMPairETH.\\n     * @dev Only checks the runtime bytecode, does not check the extra data.\\n     * @param factory the factory that deployed the clone\\n     * @param implementation the LSSVMPairETH implementation contract\\n     * @param query the contract to check\\n     * @return result True if the contract is a clone, false otherwise\\n     */\\n    function isERC721ETHPairClone(address factory, address implementation, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"3d3d3d3d363d3d37605160353639366051013d73000000000000000000000000\\\")\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n            mstore(add(ptr, 0x35), shl(0x60, factory))\\n\\n            // compare expected bytecode with that of the queried contract\\n            let other := add(ptr, 0x49)\\n            extcodecopy(query, other, 0, 0x49)\\n            result :=\\n                and(\\n                    eq(mload(ptr), mload(other)),\\n                    and(\\n                        eq(mload(add(ptr, 0x20)), mload(add(other, 0x20))),\\n                        eq(mload(add(ptr, 0x29)), mload(add(other, 0x29)))\\n                    )\\n                )\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a contract is a clone of a LSSVMPairERC20.\\n     * @dev Only checks the runtime bytecode, does not check the extra data.\\n     * @param implementation the LSSVMPairERC20 implementation contract\\n     * @param query the contract to check\\n     * @return result True if the contract is a clone, false otherwise\\n     */\\n    function isERC721ERC20PairClone(address factory, address implementation, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"3d3d3d3d363d3d37606560353639366065013d73000000000000000000000000\\\")\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n            mstore(add(ptr, 0x35), shl(0x60, factory))\\n\\n            // compare expected bytecode with that of the queried contract\\n            let other := add(ptr, 0x49)\\n            extcodecopy(query, other, 0, 0x49)\\n            result :=\\n                and(\\n                    eq(mload(ptr), mload(other)),\\n                    and(\\n                        eq(mload(add(ptr, 0x20)), mload(add(other, 0x20))),\\n                        eq(mload(add(ptr, 0x29)), mload(add(other, 0x29)))\\n                    )\\n                )\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * During the delegate call, extra data is copied into the calldata which can then be\\n     * accessed by the implementation contract.\\n     *\\n     * @return instance The address of the new pair instance\\n     */\\n    function cloneERC1155ETHPair(\\n        address implementation,\\n        ILSSVMPairFactoryLike factory,\\n        ICurve bondingCurve,\\n        IERC1155 nft,\\n        uint8 poolType,\\n        uint256 nftId\\n    ) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // CREATION (9 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // creation size = 09\\n            // runtime size = 92\\n            // 60 runtime  | PUSH1 runtime (r)     | r                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 r                     | \u2013\\n            // 81          | DUP2                  | r 0 r                   | \u2013\\n            // 60 creation | PUSH1 creation (c)    | c r 0 r                 | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 c r 0 r               | \u2013\\n            // 39          | CODECOPY              | 0 r                     | [0-runSize): runtime code\\n            // f3          | RETURN                |                         | [0-runSize): runtime code\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // RUNTIME (53 bytes of code + 93 bytes of extra data = 146 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // extra data size = 5d\\n            // 3d          | RETURNDATASIZE        | 0                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0                     | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0                   | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0 0                 | \u2013\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 cds 0 0 0 0         | \u2013\\n            // 37          | CALLDATACOPY          | 0 0 0 0                 | [0, cds) = calldata\\n            // 60 extra    | PUSH1 extra           | extra 0 0 0 0           | [0, cds) = calldata\\n            // 60 0x35     | PUSH1 0x35            | 0x35 extra 0 0 0 0      | [0, cds) = calldata // 0x35 (53) is runtime size - data\\n            // 36          | CALLDATASIZE          | cds 0x35 extra 0 0 0 0  | [0, cds) = calldata\\n            // 39          | CODECOPY              | 0 0 0 0                 | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 60 extra    | PUSH1 extra           | extra cds 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 01          | ADD                   | cds+extra 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 73 addr     | PUSH20 0x123\u2026         | addr 0 cds 0 0 0 0      | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            mstore(ptr, hex\\\"60923d8160093d39f33d3d3d3d363d3d37605d6035363936605d013d73000000\\\")\\n            mstore(add(ptr, 0x1d), shl(0x60, implementation))\\n\\n            // 5a          | GAS                   | gas addr 0 cds 0 0 0 0  | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // f4          | DELEGATECALL          | success 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds success 0 0         | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds rds success 0 0     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 93          | SWAP4                 | 0 rds success 0 rds     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 80          | DUP1                  | 0 0 rds success 0 rds   | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3e          | RETURNDATACOPY        | success 0 rds           | [0, rds) = return data (there might be some irrelevant leftovers in memory [rds, cds+0x37) when rds < cds+0x37)\\n            // 60 0x33     | PUSH1 0x33            | 0x33 success 0 rds      | [0, rds) = return data\\n            // 57          | JUMPI                 | 0 rds                   | [0, rds) = return data\\n            // fd          | REVERT                | \u2013                       | [0, rds) = return data\\n            // 5b          | JUMPDEST              | 0 rds                   | [0, rds) = return data\\n            // f3          | RETURN                | \u2013                       | [0, rds) = return data\\n            mstore(add(ptr, 0x31), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // EXTRA DATA (93 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            mstore(add(ptr, 0x3e), shl(0x60, factory))\\n            mstore(add(ptr, 0x52), shl(0x60, bondingCurve))\\n            mstore(add(ptr, 0x66), shl(0x60, nft))\\n            mstore8(add(ptr, 0x7a), poolType)\\n            mstore(add(ptr, 0x7b), nftId)\\n\\n            instance := create(0, ptr, 0x9b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * During the delegate call, extra data is copied into the calldata which can then be\\n     * accessed by the implementation contract.\\n     *\\n     * @return instance The address of the new pair instance\\n     */\\n    function cloneERC1155ERC20Pair(\\n        address implementation,\\n        ILSSVMPairFactoryLike factory,\\n        ICurve bondingCurve,\\n        IERC1155 nft,\\n        uint8 poolType,\\n        uint256 nftId,\\n        ERC20 token\\n    ) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // CREATION (9 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // creation size = 09\\n            // runtime size = a6\\n            // 60 runtime  | PUSH1 runtime (r)     | r                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 r                     | \u2013\\n            // 81          | DUP2                  | r 0 r                   | \u2013\\n            // 60 creation | PUSH1 creation (c)    | c r 0 r                 | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 c r 0 r               | \u2013\\n            // 39          | CODECOPY              | 0 r                     | [0-runSize): runtime code\\n            // f3          | RETURN                |                         | [0-runSize): runtime code\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // RUNTIME (53 bytes of code + 113 bytes of extra data = 166 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            // extra data size = 71\\n            // 3d          | RETURNDATASIZE        | 0                       | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0                     | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0                   | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 0 0                 | \u2013\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | \u2013\\n            // 3d          | RETURNDATASIZE        | 0 0 cds 0 0 0 0         | \u2013\\n            // 37          | CALLDATACOPY          | 0 0 0 0                 | [0, cds) = calldata\\n            // 60 extra    | PUSH1 extra           | extra 0 0 0 0           | [0, cds) = calldata\\n            // 60 0x35     | PUSH1 0x35            | 0x35 extra 0 0 0 0      | [0, cds) = calldata // 0x35 (53) is runtime size - data\\n            // 36          | CALLDATASIZE          | cds 0x35 extra 0 0 0 0  | [0, cds) = calldata\\n            // 39          | CODECOPY              | 0 0 0 0                 | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 36          | CALLDATASIZE          | cds 0 0 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 60 extra    | PUSH1 extra           | extra cds 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 01          | ADD                   | cds+extra 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 73 addr     | PUSH20 0x123\u2026         | addr 0 cds 0 0 0 0      | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            mstore(ptr, hex\\\"60a63d8160093d39f33d3d3d3d363d3d37607160353639366071013d73000000\\\")\\n            mstore(add(ptr, 0x1d), shl(0x60, implementation))\\n\\n            // 5a          | GAS                   | gas addr 0 cds 0 0 0 0  | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // f4          | DELEGATECALL          | success 0 0             | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds success 0 0         | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3d          | RETURNDATASIZE        | rds rds success 0 0     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 93          | SWAP4                 | 0 rds success 0 rds     | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 80          | DUP1                  | 0 0 rds success 0 rds   | [0, cds) = calldata, [cds, cds+0x35) = extraData\\n            // 3e          | RETURNDATACOPY        | success 0 rds           | [0, rds) = return data (there might be some irrelevant leftovers in memory [rds, cds+0x37) when rds < cds+0x37)\\n            // 60 0x33     | PUSH1 0x33            | 0x33 success 0 rds      | [0, rds) = return data\\n            // 57          | JUMPI                 | 0 rds                   | [0, rds) = return data\\n            // fd          | REVERT                | \u2013                       | [0, rds) = return data\\n            // 5b          | JUMPDEST              | 0 rds                   | [0, rds) = return data\\n            // f3          | RETURN                | \u2013                       | [0, rds) = return data\\n            mstore(add(ptr, 0x31), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // EXTRA DATA (113 bytes)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            mstore(add(ptr, 0x3e), shl(0x60, factory))\\n            mstore(add(ptr, 0x52), shl(0x60, bondingCurve))\\n            mstore(add(ptr, 0x66), shl(0x60, nft))\\n            mstore8(add(ptr, 0x7a), poolType)\\n            mstore(add(ptr, 0x7b), nftId)\\n            mstore(add(ptr, 0x9b), shl(0x60, token))\\n\\n            instance := create(0, ptr, 0xaf)\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a contract is a clone of a LSSVMPairERC1155ETH.\\n     * @dev Only checks the runtime bytecode, does not check the extra data.\\n     * @param factory the factory that deployed the clone\\n     * @param implementation the LSSVMPairERC1155ETH implementation contract\\n     * @param query the contract to check\\n     * @return result True if the contract is a clone, false otherwise\\n     */\\n    function isERC1155ETHPairClone(address factory, address implementation, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"3d3d3d3d363d3d37605d6035363936605d013d73000000000000000000000000\\\")\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n            mstore(add(ptr, 0x35), shl(0x60, factory))\\n\\n            // compare expected bytecode with that of the queried contract\\n            let other := add(ptr, 0x49)\\n            extcodecopy(query, other, 0, 0x49)\\n            result :=\\n                and(\\n                    eq(mload(ptr), mload(other)),\\n                    and(\\n                        eq(mload(add(ptr, 0x20)), mload(add(other, 0x20))),\\n                        eq(mload(add(ptr, 0x29)), mload(add(other, 0x29)))\\n                    )\\n                )\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a contract is a clone of a LSSVMPairERC1155ERC20.\\n     * @dev Only checks the runtime bytecode, does not check the extra data.\\n     * @param implementation the LSSVMPairERC1155ERC20 implementation contract\\n     * @param query the contract to check\\n     * @return result True if the contract is a clone, false otherwise\\n     */\\n    function isERC1155ERC20PairClone(address factory, address implementation, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"3d3d3d3d363d3d37607160353639366071013d73000000000000000000000000\\\")\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), hex\\\"5af43d3d93803e603357fd5bf300000000000000000000000000000000000000\\\")\\n            mstore(add(ptr, 0x35), shl(0x60, factory))\\n\\n            // compare expected bytecode with that of the queried contract\\n            let other := add(ptr, 0x49)\\n            extcodecopy(query, other, 0, 0x49)\\n            result :=\\n                and(\\n                    eq(mload(ptr), mload(other)),\\n                    and(\\n                        eq(mload(add(ptr, 0x20)), mload(add(other, 0x20))),\\n                        eq(mload(add(ptr, 0x29)), mload(add(other, 0x29)))\\n                    )\\n                )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/erc1155/LSSVMPairERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\nimport {LSSVMPair} from \\\"../LSSVMPair.sol\\\";\\nimport {LSSVMRouter} from \\\"../LSSVMRouter.sol\\\";\\nimport {ICurve} from \\\"../bonding-curves/ICurve.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title LSSVMPairERC1155\\n * @author boredGenius, 0xmons, 0xCygaar\\n * @notice An NFT/Token pair for an ERC1155 NFT where NFTs with the same ID are considered fungible.\\n */\\nabstract contract LSSVMPairERC1155 is LSSVMPair {\\n    /**\\n     * External state-changing functions\\n     */\\n\\n    /**\\n     * @notice Sends token to the pair in exchange for any `numNFTs` NFTs\\n     * @dev To compute the amount of token to send, call bondingCurve.getBuyInfo.\\n     * This swap function is meant for users who are ID agnostic\\n     * @param numNFTs The number of NFTs to purchase\\n     * @param maxExpectedTokenInput The maximum acceptable cost from the sender. If the actual\\n     * amount is greater than this value, the transaction will be reverted.\\n     * @param nftRecipient The recipient of the NFTs\\n     * @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\\n     * @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\\n     * @return inputAmount The amount of token used for purchase\\n     */\\n    function swapTokenForSpecificNFTs(\\n        uint256[] calldata numNFTs,\\n        uint256 maxExpectedTokenInput,\\n        address nftRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) external payable virtual override returns (uint256) {\\n        // Store locally to remove extra calls\\n        factory().openLock();\\n\\n        // Input validation\\n        {\\n            if (poolType() == PoolType.TOKEN) revert LSSVMPair__WrongPoolType();\\n            if (numNFTs.length != 1 || numNFTs[0] == 0) revert LSSVMPair__ZeroSwapAmount();\\n        }\\n\\n        // Call bonding curve for pricing information\\n        uint256 tradeFee;\\n        uint256 protocolFee;\\n        uint256 inputAmountExcludingRoyalty;\\n        (tradeFee, protocolFee, inputAmountExcludingRoyalty) =\\n            _calculateBuyInfoAndUpdatePoolParams(numNFTs[0], bondingCurve(), factory());\\n\\n        (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal) =\\n            _calculateRoyalties(nftId(), inputAmountExcludingRoyalty - protocolFee - tradeFee);\\n\\n        // Revert if the input amount is too large\\n        if (royaltyTotal + inputAmountExcludingRoyalty > maxExpectedTokenInput) {\\n            revert LSSVMPair__DemandedInputTooLarge();\\n        }\\n\\n        _pullTokenInputs({\\n            inputAmountExcludingRoyalty: inputAmountExcludingRoyalty,\\n            royaltyRecipients: royaltyRecipients,\\n            royaltyAmounts: royaltyAmounts,\\n            royaltyTotal: royaltyTotal,\\n            tradeFeeAmount: 2 * tradeFee,\\n            isRouter: isRouter,\\n            routerCaller: routerCaller,\\n            protocolFee: protocolFee\\n        });\\n\\n        _sendAnyNFTsToRecipient(IERC1155(nft()), nftRecipient, numNFTs[0]);\\n\\n        _refundTokenToSender(royaltyTotal + inputAmountExcludingRoyalty);\\n\\n        factory().closeLock();\\n\\n        emit SwapNFTOutPair(royaltyTotal + inputAmountExcludingRoyalty, numNFTs[0]);\\n\\n        return (royaltyTotal + inputAmountExcludingRoyalty);\\n    }\\n\\n    /**\\n     * @notice Sends a set of NFTs to the pair in exchange for token\\n     * @dev To compute the amount of token to that will be received, call bondingCurve.getSellInfo.\\n     * @param numNFTs The number of NFTs to swap\\n     * @param minExpectedTokenOutput The minimum acceptable token received by the sender. If the actual\\n     * amount is less than this value, the transaction will be reverted.\\n     * @param tokenRecipient The recipient of the token output\\n     * @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\\n     * @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\\n     * @return outputAmount The amount of token received\\n     */\\n    function swapNFTsForToken(\\n        uint256[] calldata numNFTs, // @dev this is a bit hacky, to allow for better interop w/ other pair interfaces\\n        uint256 minExpectedTokenOutput,\\n        address payable tokenRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) external virtual override returns (uint256 outputAmount) {\\n        // Store locally to remove extra calls\\n        ILSSVMPairFactoryLike _factory = factory();\\n\\n        _factory.openLock();\\n\\n        ICurve _bondingCurve = bondingCurve();\\n\\n        // Input validation\\n        {\\n            if (poolType() == PoolType.NFT) revert LSSVMPair__WrongPoolType();\\n            if (numNFTs.length != 1 || numNFTs[0] == 0) revert LSSVMPair__ZeroSwapAmount();\\n        }\\n\\n        // Call bonding curve for pricing information\\n        uint256 protocolFee;\\n        (protocolFee, outputAmount) = _calculateSellInfoAndUpdatePoolParams(numNFTs[0], _bondingCurve, _factory);\\n\\n        // Compute royalties\\n        (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal) =\\n            _calculateRoyalties(nftId(), outputAmount);\\n\\n        // Deduct royalties from outputAmount\\n        unchecked {\\n            // Safe because we already require outputAmount >= royaltyTotal in calculateRoyalties()\\n            outputAmount -= royaltyTotal;\\n        }\\n\\n        if (outputAmount < minExpectedTokenOutput) revert LSSVMPair__OutputTooSmall();\\n\\n        _takeNFTsFromSender(IERC1155(nft()), numNFTs[0], _factory, isRouter, routerCaller);\\n\\n        _sendTokenOutput(tokenRecipient, outputAmount);\\n\\n        for (uint256 i; i < royaltyRecipients.length;) {\\n            _sendTokenOutput(royaltyRecipients[i], royaltyAmounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _sendTokenOutput(payable(address(_factory)), protocolFee);\\n\\n        _factory.closeLock();\\n\\n        emit SwapNFTInPair(outputAmount, numNFTs[0]);\\n    }\\n\\n    /**\\n     * View functions\\n     */\\n\\n    /**\\n     * @notice Returns the ERC-1155 NFT ID this pool uses\\n     */\\n    function nftId() public pure returns (uint256 id) {\\n        uint256 paramsLength = _immutableParamsLength();\\n        assembly {\\n            id := calldataload(add(sub(calldatasize(), paramsLength), 61))\\n        }\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Sends some number of NFTs to a recipient address\\n     * @dev Even though we specify the NFT address here, this internal function is only\\n     * used to send NFTs associated with this specific pool.\\n     * @param _nft The address of the NFT to send\\n     * @param nftRecipient The receiving address for the NFTs\\n     * @param numNFTs The number of NFTs to send\\n     */\\n    function _sendAnyNFTsToRecipient(IERC1155 _nft, address nftRecipient, uint256 numNFTs) internal virtual {\\n        _nft.safeTransferFrom(address(this), nftRecipient, nftId(), numNFTs, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @notice Takes NFTs from the caller and sends them into the pair's asset recipient\\n     * @dev This is used by the LSSVMPair's swapNFTForToken function.\\n     * @param _nft The NFT collection to take from\\n     * @param numNFTs The number of NFTs to take\\n     * @param isRouter Whether or not to use the router pull flow\\n     * @param routerCaller If the caller is a router, passes in which address to pull from (i.e. the router's caller)\\n     */\\n    function _takeNFTsFromSender(\\n        IERC1155 _nft,\\n        uint256 numNFTs,\\n        ILSSVMPairFactoryLike factory,\\n        bool isRouter,\\n        address routerCaller\\n    ) internal virtual {\\n        address _assetRecipient = getAssetRecipient();\\n\\n        if (isRouter) {\\n            // Verify if router is allowed\\n            LSSVMRouter router = LSSVMRouter(payable(msg.sender));\\n            (bool routerAllowed,) = factory.routerStatus(router);\\n            if (!routerAllowed) revert LSSVMPair__NotRouter();\\n\\n            uint256 _nftId = nftId();\\n            uint256 beforeBalance = _nft.balanceOf(_assetRecipient, _nftId);\\n            uint256[] memory ids = new uint256[](1);\\n            ids[0] = _nftId;\\n            uint256[] memory amounts = new uint256[](1);\\n            amounts[0] = numNFTs;\\n            router.pairTransferERC1155From(_nft, routerCaller, _assetRecipient, ids, amounts);\\n            if (_nft.balanceOf(_assetRecipient, _nftId) - beforeBalance != numNFTs) {\\n                revert LSSVMPair__NftNotTransferred();\\n            }\\n        } else {\\n            // Pull NFTs directly from sender\\n            _nft.safeTransferFrom(msg.sender, _assetRecipient, nftId(), numNFTs, bytes(\\\"\\\"));\\n        }\\n    }\\n\\n    /**\\n     * Owner functions\\n     */\\n\\n    /**\\n     * @notice Rescues a specified set of NFTs owned by the pair to the owner address. Only callable by the owner.\\n     * @param a The NFT to transfer\\n     * @param nftIds The list of IDs of the NFTs to send to the owner\\n     */\\n    function withdrawERC721(IERC721 a, uint256[] calldata nftIds) external virtual override onlyOwner {\\n        uint256 numNFTs = nftIds.length;\\n        for (uint256 i; i < numNFTs;) {\\n            a.safeTransferFrom(address(this), msg.sender, nftIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers ERC1155 tokens from the pair to the owner. Only callable by the owner.\\n     * @param a The NFT to transfer\\n     * @param ids The NFT ids to transfer\\n     * @param amounts The amounts of each id to transfer\\n     */\\n    function withdrawERC1155(IERC1155 a, uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (a == IERC1155(nft())) {\\n            // Check if we need to emit an event for withdrawing the NFT this pool is trading\\n            uint256 _nftId = nftId();\\n            uint256 numNFTs = ids.length;\\n            uint256 numPairNFTsWithdrawn;\\n            for (uint256 i; i < numNFTs;) {\\n                if (ids[i] == _nftId) {\\n                    numPairNFTsWithdrawn += amounts[i];\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            if (numPairNFTsWithdrawn != 0) {\\n                // Only emit for the pair's NFT\\n                emit NFTWithdrawal(numPairNFTsWithdrawn);\\n            }\\n        }\\n\\n        a.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, bytes(\\\"\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/erc721/LSSVMPairERC721ETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IRoyaltyEngineV1} from \\\"manifoldxyz/IRoyaltyEngineV1.sol\\\";\\n\\nimport {LSSVMPair} from \\\"../LSSVMPair.sol\\\";\\nimport {LSSVMPairETH} from \\\"../LSSVMPairETH.sol\\\";\\nimport {LSSVMPairERC721} from \\\"./LSSVMPairERC721.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title An NFT/Token pair where the token is ETH\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\ncontract LSSVMPairERC721ETH is LSSVMPairERC721, LSSVMPairETH {\\n    uint256 internal constant IMMUTABLE_PARAMS_LENGTH = 81;\\n\\n    constructor(IRoyaltyEngineV1 royaltyEngine) LSSVMPair(royaltyEngine) {}\\n\\n    /**\\n     * Public functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function pairVariant() public pure override returns (ILSSVMPairFactoryLike.PairVariant) {\\n        return ILSSVMPairFactoryLike.PairVariant.ERC721_ETH;\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     * @dev see LSSVMPairCloner for params length calculation\\n     */\\n    function _immutableParamsLength() internal pure override returns (uint256) {\\n        return IMMUTABLE_PARAMS_LENGTH;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/erc1155/LSSVMPairERC1155ETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IRoyaltyEngineV1} from \\\"manifoldxyz/IRoyaltyEngineV1.sol\\\";\\n\\nimport {LSSVMPair} from \\\"../LSSVMPair.sol\\\";\\nimport {LSSVMPairETH} from \\\"../LSSVMPairETH.sol\\\";\\nimport {LSSVMPairERC1155} from \\\"./LSSVMPairERC1155.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title An ERC1155 pair where the token is an ETH\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\ncontract LSSVMPairERC1155ETH is LSSVMPairERC1155, LSSVMPairETH {\\n    uint256 internal constant IMMUTABLE_PARAMS_LENGTH = 93;\\n\\n    constructor(IRoyaltyEngineV1 royaltyEngine) LSSVMPair(royaltyEngine) {}\\n\\n    /**\\n     * Public functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function pairVariant() public pure virtual override returns (ILSSVMPairFactoryLike.PairVariant) {\\n        return ILSSVMPairFactoryLike.PairVariant.ERC1155_ETH;\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     * @dev see LSSVMPairCloner for params length calculation\\n     */\\n    function _immutableParamsLength() internal pure override returns (uint256) {\\n        return IMMUTABLE_PARAMS_LENGTH;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/erc721/LSSVMPairERC721ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IRoyaltyEngineV1} from \\\"manifoldxyz/IRoyaltyEngineV1.sol\\\";\\n\\nimport {LSSVMPair} from \\\"../LSSVMPair.sol\\\";\\nimport {LSSVMPairERC20} from \\\"../LSSVMPairERC20.sol\\\";\\nimport {LSSVMPairERC721} from \\\"./LSSVMPairERC721.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title An NFT/Token pair where the token is an ERC20\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\ncontract LSSVMPairERC721ERC20 is LSSVMPairERC721, LSSVMPairERC20 {\\n    uint256 internal constant IMMUTABLE_PARAMS_LENGTH = 101;\\n\\n    constructor(IRoyaltyEngineV1 royaltyEngine) LSSVMPair(royaltyEngine) {}\\n\\n    /**\\n     * Public functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function pairVariant() public pure override returns (ILSSVMPairFactoryLike.PairVariant) {\\n        return ILSSVMPairFactoryLike.PairVariant.ERC721_ERC20;\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     * @dev see LSSVMPairCloner for params length calculation\\n     */\\n    function _immutableParamsLength() internal pure override returns (uint256) {\\n        return IMMUTABLE_PARAMS_LENGTH;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/erc1155/LSSVMPairERC1155ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IRoyaltyEngineV1} from \\\"manifoldxyz/IRoyaltyEngineV1.sol\\\";\\n\\nimport {LSSVMPair} from \\\"../LSSVMPair.sol\\\";\\nimport {LSSVMPairERC20} from \\\"../LSSVMPairERC20.sol\\\";\\nimport {LSSVMPairERC1155} from \\\"./LSSVMPairERC1155.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\n\\n/**\\n * @title An ERC1155 pair where the token is an ERC20\\n * @author boredGenius, 0xmons, 0xCygaar\\n */\\ncontract LSSVMPairERC1155ERC20 is LSSVMPairERC1155, LSSVMPairERC20 {\\n    uint256 internal constant IMMUTABLE_PARAMS_LENGTH = 113;\\n\\n    constructor(IRoyaltyEngineV1 royaltyEngine) LSSVMPair(royaltyEngine) {}\\n\\n    /**\\n     * Public functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function pairVariant() public pure virtual override returns (ILSSVMPairFactoryLike.PairVariant) {\\n        return ILSSVMPairFactoryLike.PairVariant.ERC1155_ERC20;\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     * @dev see LSSVMPairCloner for params length calculation\\n     */\\n    function _immutableParamsLength() internal pure override returns (uint256) {\\n        return IMMUTABLE_PARAMS_LENGTH;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/settings/ISettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ISettings {\\n    struct PairInfo {\\n        address prevOwner;\\n        uint96 unlockTime;\\n        address prevFeeRecipient;\\n    }\\n\\n    function getFeeSplitBps() external pure returns (uint64);\\n\\n    function getRoyaltyInfo(address pairAddress) external view returns (bool, uint96);\\n\\n    function settingsFeeRecipient() external returns (address payable);\\n\\n    function getPrevFeeRecipientForPair(address pairAddress) external returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"lib/lssvm2/src/royalty-auth/INiftyGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Nifty builder instance\\n */\\ninterface INiftyBuilderInstance {\\n    function niftyRegistryContract() external view returns (address);\\n}\\n\\n/**\\n * @dev Nifty registry\\n */\\ninterface INiftyRegistry {\\n    /**\\n     * @dev function to see if sending key is valid\\n     */\\n    function isValidNiftySender(address sending_key) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/royalty-auth/IFoundation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFoundation {\\n    /*\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\\ninterface IFoundationTreasuryNode {\\n    function getFoundationTreasury() external view returns (address payable);\\n}\\n\\ninterface IFoundationTreasury {\\n    function isAdmin(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/royalty-auth/IDigitalax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Digitalax nfts\\n */\\ninterface IDigitalax {\\n    function accessControls() external view returns (address);\\n}\\n\\n/**\\n * @dev Digitalax Access Controls Simple\\n */\\ninterface IDigitalaxAccessControls {\\n    function hasAdminRole(address _account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/src/royalty-auth/IArtBlocks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Art Blocks nfts\\n */\\ninterface IArtBlocks {\\n    // document getter function of public variable\\n    function admin() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_SD59x18 } from \\\"../sd59x18/Constants.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport {\\n    PRBMath_UD60x18_IntoSD1x18_Overflow,\\n    PRBMath_UD60x18_IntoUD2x18_Overflow,\\n    PRBMath_UD60x18_IntoSD59x18_Overflow,\\n    PRBMath_UD60x18_IntoUint128_Overflow,\\n    PRBMath_UD60x18_IntoUint40_Overflow\\n} from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an UD60x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD60x18 x) pure returns (SD1x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(int256(uMAX_SD1x18))) {\\n        revert PRBMath_UD60x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(uint64(xUint)));\\n}\\n\\n/// @notice Casts an UD60x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(UD60x18 x) pure returns (UD2x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uMAX_UD2x18) {\\n        revert PRBMath_UD60x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xUint));\\n}\\n\\n/// @notice Casts an UD60x18 number into SD59x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD59x18`.\\nfunction intoSD59x18(UD60x18 x) pure returns (SD59x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(uMAX_SD59x18)) {\\n        revert PRBMath_UD60x18_IntoSD59x18_Overflow(x);\\n    }\\n    result = SD59x18.wrap(int256(xUint));\\n}\\n\\n/// @notice Casts an UD60x18 number into uint128.\\n/// @dev This is basically a functional alias for the `unwrap` function.\\nfunction intoUint256(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Casts an UD60x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT128`.\\nfunction intoUint128(UD60x18 x) pure returns (uint128 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT128) {\\n        revert PRBMath_UD60x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(xUint);\\n}\\n\\n/// @notice Casts an UD60x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD60x18 x) pure returns (uint40 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT40) {\\n        revert PRBMath_UD60x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for the `wrap` function.\\nfunction ud(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Alias for the `wrap` function.\\nfunction ud60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an UD60x18 number into uint256.\\nfunction unwrap(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an uint256 number into the UD60x18 value type.\\nfunction wrap(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an UD60x18 number.\\nUD60x18 constant E = UD60x18.wrap(2_718281828459045235);\\n\\n/// @dev Half the UNIT number.\\nuint256 constant uHALF_UNIT = 0.5e18;\\nUD60x18 constant HALF_UNIT = UD60x18.wrap(uHALF_UNIT);\\n\\n/// @dev log2(10) as an UD60x18 number.\\nuint256 constant uLOG2_10 = 3_321928094887362347;\\nUD60x18 constant LOG2_10 = UD60x18.wrap(uLOG2_10);\\n\\n/// @dev log2(e) as an UD60x18 number.\\nuint256 constant uLOG2_E = 1_442695040888963407;\\nUD60x18 constant LOG2_E = UD60x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an UD60x18 number can have.\\nuint256 constant uMAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(uMAX_UD60x18);\\n\\n/// @dev The maximum whole value an UD60x18 number can have.\\nuint256 constant uMAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(uMAX_WHOLE_UD60x18);\\n\\n/// @dev PI as an UD60x18 number.\\nUD60x18 constant PI = UD60x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit amount that implies how many trailing decimals can be represented.\\nuint256 constant uUNIT = 1e18;\\nUD60x18 constant UNIT = UD60x18.wrap(uUNIT);\\n\\n/// @dev Zero as an UD60x18 number.\\nUD60x18 constant ZERO = UD60x18.wrap(0);\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/Conversions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { uMAX_UD60x18, uUNIT } from \\\"./Constants.sol\\\";\\nimport { PRBMath_UD60x18_Convert_Overflow } from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Converts an UD60x18 number to a simple integer by dividing it by `UNIT`. Rounds towards zero in the process.\\n/// @dev Rounds down in the process.\\n/// @param x The UD60x18 number to convert.\\n/// @return result The same number in basic integer form.\\nfunction convert(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x) / uUNIT;\\n}\\n\\n/// @notice Converts a simple integer to UD60x18 by multiplying it by `UNIT`.\\n///\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UD60x18` divided by `UNIT`.\\n///\\n/// @param x The basic integer to convert.\\n/// @param result The same number converted to UD60x18.\\nfunction convert(uint256 x) pure returns (UD60x18 result) {\\n    if (x > uMAX_UD60x18 / uUNIT) {\\n        revert PRBMath_UD60x18_Convert_Overflow(x);\\n    }\\n    unchecked {\\n        result = UD60x18.wrap(x * uUNIT);\\n    }\\n}\\n\\n/// @notice Alias for the `convert` function defined above.\\n/// @dev Here for backward compatibility. Will be removed in V4.\\nfunction fromUD60x18(UD60x18 x) pure returns (uint256 result) {\\n    result = convert(x);\\n}\\n\\n/// @notice Alias for the `convert` function defined above.\\n/// @dev Here for backward compatibility. Will be removed in V4.\\nfunction toUD60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = convert(x);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMath_UD60x18_Ceil_Overflow(UD60x18 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows UD60x18.\\nerror PRBMath_UD60x18_Convert_Overflow(uint256 x);\\n\\n/// @notice Emitted when taking the natural exponent of a base greater than 133.084258667509499441.\\nerror PRBMath_UD60x18_Exp_InputTooBig(UD60x18 x);\\n\\n/// @notice Emitted when taking the binary exponent of a base greater than 192.\\nerror PRBMath_UD60x18_Exp2_InputTooBig(UD60x18 x);\\n\\n/// @notice Emitted when taking the geometric mean of two numbers and multiplying them overflows UD60x18.\\nerror PRBMath_UD60x18_Gm_Overflow(UD60x18 x, UD60x18 y);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD60x18_IntoSD1x18_Overflow(UD60x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in SD59x18.\\nerror PRBMath_UD60x18_IntoSD59x18_Overflow(UD60x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_UD60x18_IntoUD2x18_Overflow(UD60x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_UD60x18_IntoUint128_Overflow(UD60x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_UD60x18_IntoUint40_Overflow(UD60x18 x);\\n\\n/// @notice Emitted when taking the logarithm of a number less than 1.\\nerror PRBMath_UD60x18_Log_InputTooSmall(UD60x18 x);\\n\\n/// @notice Emitted when calculating the square root overflows UD60x18.\\nerror PRBMath_UD60x18_Sqrt_Overflow(UD60x18 x);\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { unwrap, wrap } from \\\"./Casting.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the UD60x18 type.\\nfunction add(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) + unwrap(y));\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) & bits);\\n}\\n\\n/// @notice Implements the equal operation (==) in the UD60x18 type.\\nfunction eq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = unwrap(x) == unwrap(y);\\n}\\n\\n/// @notice Implements the greater than operation (>) in the UD60x18 type.\\nfunction gt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = unwrap(x) > unwrap(y);\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the UD60x18 type.\\nfunction gte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = unwrap(x) >= unwrap(y);\\n}\\n\\n/// @notice Implements a zero comparison check function in the UD60x18 type.\\nfunction isZero(UD60x18 x) pure returns (bool result) {\\n    // This wouldn't work if x could be negative.\\n    result = unwrap(x) == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the UD60x18 type.\\nfunction lshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the UD60x18 type.\\nfunction lt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = unwrap(x) < unwrap(y);\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the UD60x18 type.\\nfunction lte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = unwrap(x) <= unwrap(y);\\n}\\n\\n/// @notice Implements the checked modulo operation (%) in the UD60x18 type.\\nfunction mod(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) % unwrap(y));\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the UD60x18 type\\nfunction neq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = unwrap(x) != unwrap(y);\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the UD60x18 type.\\nfunction or(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) | unwrap(y));\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the UD60x18 type.\\nfunction rshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the UD60x18 type.\\nfunction sub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) - unwrap(y));\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the UD60x18 type.\\nfunction uncheckedAdd(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(unwrap(x) + unwrap(y));\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the UD60x18 type.\\nfunction uncheckedSub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(unwrap(x) - unwrap(y));\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the UD60x18 type.\\nfunction xor(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(unwrap(x) ^ unwrap(y));\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { msb, mulDiv, mulDiv18, prbExp2, prbSqrt } from \\\"../Common.sol\\\";\\nimport { unwrap, wrap } from \\\"./Casting.sol\\\";\\nimport { uHALF_UNIT, uLOG2_10, uLOG2_E, uMAX_UD60x18, uMAX_WHOLE_UD60x18, UNIT, uUNIT, ZERO } from \\\"./Constants.sol\\\";\\nimport {\\n    PRBMath_UD60x18_Ceil_Overflow,\\n    PRBMath_UD60x18_Exp_InputTooBig,\\n    PRBMath_UD60x18_Exp2_InputTooBig,\\n    PRBMath_UD60x18_Gm_Overflow,\\n    PRBMath_UD60x18_Log_InputTooSmall,\\n    PRBMath_UD60x18_Sqrt_Overflow\\n} from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the arithmetic average of x and y, rounding down.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// avg(x, y) = (x & y) + ((xUint ^ yUint) / 2)\\n/// $$\\n//\\n/// In English, what this formula does is:\\n///\\n/// 1. AND x and y.\\n/// 2. Calculate half of XOR x and y.\\n/// 3. Add the two results together.\\n///\\n/// This technique is known as SWAR, which stands for \\\"SIMD within a register\\\". You can read more about it here:\\n/// https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223\\n///\\n/// @param x The first operand as an UD60x18 number.\\n/// @param y The second operand as an UD60x18 number.\\n/// @return result The arithmetic average as an UD60x18 number.\\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n    uint256 yUint = unwrap(y);\\n    unchecked {\\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\\n    }\\n}\\n\\n/// @notice Yields the smallest whole UD60x18 number greater than or equal to x.\\n///\\n/// @dev This is optimized for fractional value inputs, because for every whole value there are \\\"1e18 - 1\\\" fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_UD60x18`.\\n///\\n/// @param x The UD60x18 number to ceil.\\n/// @param result The least number greater than or equal to x, as an UD60x18 number.\\nfunction ceil(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n    if (xUint > uMAX_WHOLE_UD60x18) {\\n        revert PRBMath_UD60x18_Ceil_Overflow(x);\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to \\\"x % UNIT\\\" but faster.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to \\\"UNIT - remainder\\\" but faster.\\n        let delta := sub(uUNIT, remainder)\\n\\n        // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n        result := add(x, mul(delta, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Divides two UD60x18 numbers, returning a new UD60x18 number. Rounds towards zero.\\n///\\n/// @dev Uses `mulDiv` to enable overflow-safe multiplication and division.\\n///\\n/// Requirements:\\n/// - The denominator cannot be zero.\\n///\\n/// @param x The numerator as an UD60x18 number.\\n/// @param y The denominator as an UD60x18 number.\\n/// @param result The quotient as an UD60x18 number.\\nfunction div(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(mulDiv(unwrap(x), uUNIT, unwrap(y)));\\n}\\n\\n/// @notice Calculates the natural exponent of x.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `log2`.\\n/// - x must be less than 133.084258667509499441.\\n///\\n/// @param x The exponent as an UD60x18 number.\\n/// @return result The result as an UD60x18 number.\\nfunction exp(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n\\n    // Without this check, the value passed to `exp2` would be greater than 192.\\n    if (xUint >= 133_084258667509499441) {\\n        revert PRBMath_UD60x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // We do the fixed-point multiplication inline rather than via the `mul` function to save gas.\\n        uint256 doubleUnitProduct = xUint * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Requirements:\\n/// - x must be 192 or less.\\n/// - The result must fit within `MAX_UD60x18`.\\n///\\n/// @param x The exponent as an UD60x18 number.\\n/// @return result The result as an UD60x18 number.\\nfunction exp2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n\\n    // Numbers greater than or equal to 2^192 don't fit within the 192.64-bit format.\\n    if (xUint >= 192e18) {\\n        revert PRBMath_UD60x18_Exp2_InputTooBig(x);\\n    }\\n\\n    // Convert x to the 192.64-bit fixed-point format.\\n    uint256 x_192x64 = (xUint << 64) / uUNIT;\\n\\n    // Pass x to the `prbExp2` function, which uses the 192.64-bit fixed-point number representation.\\n    result = wrap(prbExp2(x_192x64));\\n}\\n\\n/// @notice Yields the greatest whole UD60x18 number less than or equal to x.\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n/// @param x The UD60x18 number to floor.\\n/// @param result The greatest integer less than or equal to x, as an UD60x18 number.\\nfunction floor(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to \\\"x % UNIT\\\" but faster.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n        result := sub(x, mul(remainder, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x.\\n/// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n/// @param x The UD60x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an UD60x18 number.\\nfunction frac(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        result := mod(x, uUNIT)\\n    }\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $$sqrt(x * y)$$, rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit within `MAX_UD60x18`, lest it overflows.\\n///\\n/// @param x The first operand as an UD60x18 number.\\n/// @param y The second operand as an UD60x18 number.\\n/// @return result The result as an UD60x18 number.\\nfunction gm(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n    uint256 yUint = unwrap(y);\\n    if (xUint == 0 || yUint == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        uint256 xyUint = xUint * yUint;\\n        if (xyUint / xUint != yUint) {\\n            revert PRBMath_UD60x18_Gm_Overflow(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product had picked up a factor of `UNIT`\\n        // during multiplication. See the comments in the `prbSqrt` function.\\n        result = wrap(prbSqrt(xyUint));\\n    }\\n}\\n\\n/// @notice Calculates 1 / x, rounding toward zero.\\n///\\n/// @dev Requirements:\\n/// - x cannot be zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the inverse.\\n/// @return result The inverse as an UD60x18 number.\\nfunction inv(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // 1e36 is UNIT * UNIT.\\n        result = wrap(1e36 / unwrap(x));\\n    }\\n}\\n\\n/// @notice Calculates the natural logarithm of x.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}$$.\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `log2`.\\n///\\n/// Caveats:\\n/// - All from `log2`.\\n/// - This doesn't return exactly 1 for 2.718281828459045235, for that more fine-grained precision is needed.\\n///\\n/// @param x The UD60x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an UD60x18 number.\\nfunction ln(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // We do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value\\n        // that `log2` can return is 196.205294292027477728.\\n        result = wrap((unwrap(log2(x)) * uUNIT) / uLOG2_E);\\n    }\\n}\\n\\n/// @notice Calculates the common logarithm of x.\\n///\\n/// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n/// logarithm based on the formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `log2`.\\n///\\n/// Caveats:\\n/// - All from `log2`.\\n///\\n/// @param x The UD60x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an UD60x18 number.\\nfunction log10(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n    if (xUint < uUNIT) {\\n        revert PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this assembly block is the assembly multiplication operation, not the UD60x18 `mul`.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 59) }\\n        default {\\n            result := uMAX_UD60x18\\n        }\\n    }\\n\\n    if (unwrap(result) == uMAX_UD60x18) {\\n        unchecked {\\n            // Do the fixed-point division inline to save gas.\\n            result = wrap((unwrap(log2(x)) * uUNIT) / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x.\\n///\\n/// @dev Based on the iterative approximation algorithm.\\n/// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to UNIT, otherwise the result would be negative.\\n///\\n/// Caveats:\\n/// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n///\\n/// @param x The UD60x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an UD60x18 number.\\nfunction log2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n\\n    if (xUint < uUNIT) {\\n        revert PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // Calculate the integer part of the logarithm, add it to the result and finally calculate y = x * 2^(-n).\\n        uint256 n = msb(xUint / uUNIT);\\n\\n        // This is the integer part of the logarithm as an UD60x18 number. The operation can't overflow because n\\n        // n is maximum 255 and UNIT is 1e18.\\n        uint256 resultUint = n * uUNIT;\\n\\n        // This is $y = x * 2^{-n}$.\\n        uint256 y = xUint >> n;\\n\\n        // If y is 1, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultUint);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The \\\"delta.rshift(1)\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n        uint256 DOUBLE_UNIT = 2e18;\\n        for (uint256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 > 2 and so in the range [2,4)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultUint += delta;\\n\\n                // Corresponds to z/2 on Wikipedia.\\n                y >>= 1;\\n            }\\n        }\\n        result = wrap(resultUint);\\n    }\\n}\\n\\n/// @notice Multiplies two UD60x18 numbers together, returning a new UD60x18 number.\\n/// @dev See the documentation for the `Common.mulDiv18` function.\\n/// @param x The multiplicand as an UD60x18 number.\\n/// @param y The multiplier as an UD60x18 number.\\n/// @return result The product as an UD60x18 number.\\nfunction mul(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(mulDiv18(unwrap(x), unwrap(y)));\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `exp2`, `log2` and `mul`.\\n///\\n/// Caveats:\\n/// - All from `exp2`, `log2` and `mul`.\\n/// - Assumes 0^0 is 1.\\n///\\n/// @param x Number to raise to given power y, as an UD60x18 number.\\n/// @param y Exponent to raise x to, as an UD60x18 number.\\n/// @return result x raised to power y, as an UD60x18 number.\\nfunction pow(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n    uint256 yUint = unwrap(y);\\n\\n    if (xUint == 0) {\\n        result = yUint == 0 ? UNIT : ZERO;\\n    } else {\\n        if (yUint == uUNIT) {\\n            result = x;\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n}\\n\\n/// @notice Raises x (an UD60x18 number) to the power y (unsigned basic integer) using the famous algorithm\\n/// \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n///\\n/// Requirements:\\n/// - The result must fit within `MAX_UD60x18`.\\n///\\n/// Caveats:\\n/// - All from \\\"Common.mulDiv18\\\".\\n/// - Assumes 0^0 is 1.\\n///\\n/// @param x The base as an UD60x18 number.\\n/// @param y The exponent as an uint256.\\n/// @return result The result as an UD60x18 number.\\nfunction powu(UD60x18 x, uint256 y) pure returns (UD60x18 result) {\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 xUint = unwrap(x);\\n    uint256 resultUint = y & 1 > 0 ? xUint : uUNIT;\\n\\n    // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n    for (y >>= 1; y > 0; y >>= 1) {\\n        xUint = mulDiv18(xUint, xUint);\\n\\n        // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n        if (y & 1 > 0) {\\n            resultUint = mulDiv18(resultUint, xUint);\\n        }\\n    }\\n    result = wrap(resultUint);\\n}\\n\\n/// @notice Calculates the square root of x, rounding down.\\n/// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Requirements:\\n/// - x must be less than `MAX_UD60x18` divided by `UNIT`.\\n///\\n/// @param x The UD60x18 number for which to calculate the square root.\\n/// @return result The result as an UD60x18 number.\\nfunction sqrt(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = unwrap(x);\\n\\n    unchecked {\\n        if (xUint > uMAX_UD60x18 / uUNIT) {\\n            revert PRBMath_UD60x18_Sqrt_Overflow(x);\\n        }\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` that is picked up when multiplying two UD60x18\\n        // numbers together (in this case, the two numbers are both the square root).\\n        result = wrap(prbSqrt(xUint * uUNIT));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud60x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport \\\"./Casting.sol\\\" as C;\\nimport \\\"./Helpers.sol\\\" as H;\\nimport \\\"./Math.sol\\\" as M;\\n\\n/// @notice The unsigned 60.18-decimal fixed-point number representation, which can have up to 60 digits and up to 18 decimals.\\n/// The values of this are bound by the minimum and the maximum values permitted by the Solidity type uint256.\\n/// @dev The value type is defined here so it can be imported in all other files.\\ntype UD60x18 is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { C.intoSD1x18, C.intoUD2x18, C.intoSD59x18, C.intoUint128, C.intoUint256, C.intoUint40, C.unwrap } for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    M.avg,\\n    M.ceil,\\n    M.div,\\n    M.exp,\\n    M.exp2,\\n    M.floor,\\n    M.frac,\\n    M.gm,\\n    M.inv,\\n    M.ln,\\n    M.log10,\\n    M.log2,\\n    M.mul,\\n    M.pow,\\n    M.powu,\\n    M.sqrt\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    H.add,\\n    H.and,\\n    H.eq,\\n    H.gt,\\n    H.gte,\\n    H.isZero,\\n    H.lshift,\\n    H.lt,\\n    H.lte,\\n    H.mod,\\n    H.neq,\\n    H.or,\\n    H.rshift,\\n    H.sub,\\n    H.uncheckedAdd,\\n    H.uncheckedSub,\\n    H.xor\\n} for UD60x18 global;\\n\"\r\n    },\r\n    \"lib/lssvm2/src/erc721/LSSVMPairERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\nimport {LSSVMPair} from \\\"../LSSVMPair.sol\\\";\\nimport {LSSVMRouter} from \\\"../LSSVMRouter.sol\\\";\\nimport {ICurve} from \\\"../bonding-curves/ICurve.sol\\\";\\nimport {ILSSVMPairFactoryLike} from \\\"../ILSSVMPairFactoryLike.sol\\\";\\nimport {IPropertyChecker} from \\\"../property-checking/IPropertyChecker.sol\\\";\\n\\n/**\\n * @title LSSVMPairERC721\\n * @author boredGenius, 0xmons, 0xCygaar\\n * @notice An NFT/Token pair for an ERC721 NFT\\n */\\nabstract contract LSSVMPairERC721 is LSSVMPair {\\n    error LSSVMPairERC721__PropertyCheckFailed();\\n    error LSSVMPairERC721__NeedPropertyChecking();\\n\\n    /**\\n     * External state-changing functions\\n     */\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function swapTokenForSpecificNFTs(\\n        uint256[] calldata nftIds,\\n        uint256 maxExpectedTokenInput,\\n        address nftRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) external payable virtual override returns (uint256) {\\n        // Store locally to remove extra calls\\n        factory().openLock();\\n\\n        // Input validation\\n        {\\n            PoolType _poolType = poolType();\\n            if (_poolType == PoolType.TOKEN) revert LSSVMPair__WrongPoolType();\\n            if (nftIds.length == 0) revert LSSVMPair__ZeroSwapAmount();\\n        }\\n\\n        // Call bonding curve for pricing information\\n        uint256 protocolFee;\\n        uint256 tradeFee;\\n        uint256 inputAmountExcludingRoyalty;\\n        (tradeFee, protocolFee, inputAmountExcludingRoyalty) =\\n            _calculateBuyInfoAndUpdatePoolParams(nftIds.length, bondingCurve(), factory());\\n\\n        // Calculate royalties\\n        (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal) =\\n            _calculateRoyalties(nftIds[0], inputAmountExcludingRoyalty - protocolFee - tradeFee);\\n\\n        // Revert if the input amount is too large\\n        if (royaltyTotal + inputAmountExcludingRoyalty > maxExpectedTokenInput) {\\n            revert LSSVMPair__DemandedInputTooLarge();\\n        }\\n\\n        _pullTokenInputs({\\n            inputAmountExcludingRoyalty: inputAmountExcludingRoyalty,\\n            royaltyAmounts: royaltyAmounts,\\n            royaltyRecipients: royaltyRecipients,\\n            royaltyTotal: royaltyTotal,\\n            tradeFeeAmount: 2 * tradeFee,\\n            isRouter: isRouter,\\n            routerCaller: routerCaller,\\n            protocolFee: protocolFee\\n        });\\n\\n        {\\n            _sendSpecificNFTsToRecipient(IERC721(nft()), nftRecipient, nftIds);\\n        }\\n\\n        _refundTokenToSender(royaltyTotal + inputAmountExcludingRoyalty);\\n\\n        factory().closeLock();\\n\\n        emit SwapNFTOutPair(royaltyTotal + inputAmountExcludingRoyalty, nftIds);\\n\\n        return (royaltyTotal + inputAmountExcludingRoyalty);\\n    }\\n\\n    /**\\n     * @inheritdoc LSSVMPair\\n     */\\n    function swapNFTsForToken(\\n        uint256[] calldata nftIds,\\n        uint256 minExpectedTokenOutput,\\n        address payable tokenRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) external virtual override returns (uint256 outputAmount) {\\n        if (propertyChecker() != address(0)) revert LSSVMPairERC721__NeedPropertyChecking();\\n\\n        return _swapNFTsForToken(nftIds, minExpectedTokenOutput, tokenRecipient, isRouter, routerCaller);\\n    }\\n\\n    /**\\n     * @notice Sends a set of NFTs to the pair in exchange for token\\n     * @dev To compute the amount of token to that will be received, call bondingCurve.getSellInfo.\\n     * @param nftIds The list of IDs of the NFTs to sell to the pair\\n     * @param minExpectedTokenOutput The minimum acceptable token received by the sender. If the actual\\n     * amount is less than this value, the transaction will be reverted.\\n     * @param tokenRecipient The recipient of the token output\\n     * @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for\\n     * ETH pairs.\\n     * @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for\\n     * ETH pairs.\\n     * @param propertyCheckerParams Parameters to pass into the pair's underlying property checker\\n     * @return outputAmount The amount of token received\\n     */\\n    function swapNFTsForToken(\\n        uint256[] calldata nftIds,\\n        uint256 minExpectedTokenOutput,\\n        address payable tokenRecipient,\\n        bool isRouter,\\n        address routerCaller,\\n        bytes calldata propertyCheckerParams\\n    ) external virtual returns (uint256 outputAmount) {\\n        if (!IPropertyChecker(propertyChecker()).hasProperties(nftIds, propertyCheckerParams)) {\\n            revert LSSVMPairERC721__PropertyCheckFailed();\\n        }\\n\\n        return _swapNFTsForToken(nftIds, minExpectedTokenOutput, tokenRecipient, isRouter, routerCaller);\\n    }\\n\\n    /**\\n     * View functions\\n     */\\n\\n    /**\\n     * @notice Returns the property checker address\\n     */\\n    function propertyChecker() public pure returns (address _propertyChecker) {\\n        uint256 paramsLength = _immutableParamsLength();\\n        assembly {\\n            _propertyChecker := shr(0x60, calldataload(add(sub(calldatasize(), paramsLength), 61)))\\n        }\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    function _swapNFTsForToken(\\n        uint256[] calldata nftIds,\\n        uint256 minExpectedTokenOutput,\\n        address payable tokenRecipient,\\n        bool isRouter,\\n        address routerCaller\\n    ) internal virtual returns (uint256 outputAmount) {\\n        // Store locally to remove extra calls\\n        ILSSVMPairFactoryLike _factory = factory();\\n\\n        _factory.openLock();\\n\\n        // Input validation\\n        {\\n            PoolType _poolType = poolType();\\n            if (_poolType == PoolType.NFT) revert LSSVMPair__WrongPoolType();\\n            if (nftIds.length == 0) revert LSSVMPair__ZeroSwapAmount();\\n        }\\n\\n        // Call bonding curve for pricing information\\n        uint256 protocolFee;\\n        (protocolFee, outputAmount) = _calculateSellInfoAndUpdatePoolParams(nftIds.length, bondingCurve(), _factory);\\n\\n        // Compute royalties\\n        (address payable[] memory royaltyRecipients, uint256[] memory royaltyAmounts, uint256 royaltyTotal) =\\n            _calculateRoyalties(nftIds[0], outputAmount);\\n\\n        // Deduct royalties from outputAmount\\n        unchecked {\\n            // Safe because we already require outputAmount >= royaltyTotal in calculateRoyalties()\\n            outputAmount -= royaltyTotal;\\n        }\\n\\n        if (outputAmount < minExpectedTokenOutput) revert LSSVMPair__OutputTooSmall();\\n\\n        _takeNFTsFromSender(IERC721(nft()), nftIds, _factory, isRouter, routerCaller);\\n\\n        _sendTokenOutput(tokenRecipient, outputAmount);\\n        for (uint256 i; i < royaltyRecipients.length;) {\\n            _sendTokenOutput(royaltyRecipients[i], royaltyAmounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _sendTokenOutput(payable(address(_factory)), protocolFee);\\n\\n        _factory.closeLock();\\n\\n        emit SwapNFTInPair(outputAmount, nftIds);\\n    }\\n\\n    /**\\n     * @notice Sends specific NFTs to a recipient address\\n     * @dev Even though we specify the NFT address here, this internal function is only\\n     * used to send NFTs associated with this specific pool.\\n     * @param _nft The address of the NFT to send\\n     * @param nftRecipient The receiving address for the NFTs\\n     * @param nftIds The specific IDs of NFTs to send\\n     */\\n    function _sendSpecificNFTsToRecipient(IERC721 _nft, address nftRecipient, uint256[] calldata nftIds)\\n        internal\\n        virtual\\n    {\\n        // Send NFTs to recipient\\n        uint256 numNFTs = nftIds.length;\\n        for (uint256 i; i < numNFTs;) {\\n            _nft.transferFrom(address(this), nftRecipient, nftIds[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Takes NFTs from the caller and sends them into the pair's asset recipient\\n     * @dev This is used by the LSSVMPair's swapNFTForToken function.\\n     * @param _nft The NFT collection to take from\\n     * @param nftIds The specific NFT IDs to take\\n     * @param isRouter True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\\n     * @param routerCaller If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\\n     */\\n    function _takeNFTsFromSender(\\n        IERC721 _nft,\\n        uint256[] calldata nftIds,\\n        ILSSVMPairFactoryLike _factory,\\n        bool isRouter,\\n        address routerCaller\\n    ) internal virtual {\\n        {\\n            address _assetRecipient = getAssetRecipient();\\n            uint256 numNFTs = nftIds.length;\\n\\n            if (isRouter) {\\n                // Verify if router is allowed\\n                LSSVMRouter router = LSSVMRouter(payable(msg.sender));\\n                (bool routerAllowed,) = _factory.routerStatus(router);\\n                if (!routerAllowed) revert LSSVMPair__NotRouter();\\n\\n                // Call router to pull NFTs\\n                // If more than 1 NFT is being transfered, and there is no property checker, we can do a balance check\\n                // instead of an ownership check, as pools are indifferent between NFTs from the same collection\\n                if ((numNFTs > 1) && (propertyChecker() == address(0))) {\\n                    uint256 beforeBalance = _nft.balanceOf(_assetRecipient);\\n                    for (uint256 i; i < numNFTs;) {\\n                        router.pairTransferNFTFrom(_nft, routerCaller, _assetRecipient, nftIds[i]);\\n\\n                        unchecked {\\n                            ++i;\\n                        }\\n                    }\\n                    if (_nft.balanceOf(_assetRecipient) - beforeBalance != numNFTs) {\\n                        revert LSSVMPair__NftNotTransferred();\\n                    }\\n                }\\n                // Otherwise we need to pull each asset 1 at a time and verify ownership\\n                else {\\n                    for (uint256 i; i < numNFTs;) {\\n                        router.pairTransferNFTFrom(_nft, routerCaller, _assetRecipient, nftIds[i]);\\n                        if (_nft.ownerOf(nftIds[i]) != _assetRecipient) revert LSSVMPair__NftNotTransferred();\\n                        unchecked {\\n                            ++i;\\n                        }\\n                    }\\n                }\\n            } else {\\n                // Pull NFTs directly from sender\\n                for (uint256 i; i < numNFTs;) {\\n                    _nft.transferFrom(msg.sender, _assetRecipient, nftIds[i]);\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Owner functions\\n     */\\n\\n    /**\\n     * @notice Rescues a specified set of NFTs owned by the pair to the owner address. (onlyOwner modifier is in the implemented function)\\n     * @param a The NFT to transfer\\n     * @param nftIds The list of IDs of the NFTs to send to the owner\\n     */\\n    function withdrawERC721(IERC721 a, uint256[] calldata nftIds) external virtual override onlyOwner {\\n        uint256 numNFTs = nftIds.length;\\n        for (uint256 i; i < numNFTs;) {\\n            a.safeTransferFrom(address(this), msg.sender, nftIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (a == IERC721(nft())) {\\n            emit NFTWithdrawal(nftIds);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rescues ERC1155 tokens from the pair to the owner. Only callable by the owner.\\n     * @param a The NFT to transfer\\n     * @param ids The NFT ids to transfer\\n     * @param amounts The amounts of each id to transfer\\n     */\\n    function withdrawERC1155(IERC1155 a, uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        a.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\n/// Common mathematical functions used in both SD59x18 and UD60x18. Note that these global functions do not\\n/// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Emitted when the ending result in the fixed-point version of `mulDiv` would overflow uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the ending result in `mulDiv` would overflow uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Emitted when attempting to run `mulDiv` with one of the inputs `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Emitted when the ending result in the signed version of `mulDiv` would overflow int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value an uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value an uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev How many trailing decimals can be represented.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev Largest power of two that is a divisor of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/// @dev The `UNIT` number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Finds the zero-based index of the first one in the binary representation of x.\\n/// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each of the steps in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is swapped with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// A list of the Yul instructions used below:\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as an uint256.\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Requirements:\\n/// - The denominator cannot be zero.\\n/// - The result must fit within uint256.\\n///\\n/// Caveats:\\n/// - This function does not work with fixed-point numbers.\\n///\\n/// @param x The multiplicand as an uint256.\\n/// @param y The multiplier as an uint256.\\n/// @param denominator The divisor as an uint256.\\n/// @return result The result as an uint256.\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512 bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n    unchecked {\\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        assembly (\\\"memory-safe\\\") {\\n            // Divide denominator by lpotdod.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n            lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * lpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates floor(x*y\u00f71e18) with full precision.\\n///\\n/// @dev Variant of `mulDiv` with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n/// final result, we add 1 if `(x * y) % UNIT >= HALF_UNIT`. Without this adjustment, 6.6e-19 would be truncated to 0\\n/// instead of being rounded to 1e-18. See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n///\\n/// Requirements:\\n/// - The result must fit within uint256.\\n///\\n/// Caveats:\\n/// - The body is purposely left uncommented; to understand how this works, see the NatSpec comments in `mulDiv`.\\n/// - It is assumed that the result can never be `type(uint256).max` when x and y solve the following two equations:\\n///     1. x * y = type(uint256).max * UNIT\\n///     2. (x * y) % UNIT >= UNIT / 2\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        result := mul(\\n            or(\\n                div(sub(prod0, remainder), UNIT_LPOTD),\\n                mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n            ),\\n            UNIT_INVERSE\\n        )\\n    }\\n}\\n\\n/// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n///\\n/// @dev An extension of `mulDiv` for signed numbers. Works by computing the signs and the absolute values separately.\\n///\\n/// Requirements:\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit within int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 absX;\\n    uint256 absY;\\n    uint256 absD;\\n    unchecked {\\n        absX = x < 0 ? uint256(-x) : uint256(x);\\n        absY = y < 0 ? uint256(-y) : uint256(y);\\n        absD = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of (x*y)\u00f7denominator. The result must fit within int256.\\n    uint256 rAbs = mulDiv(absX, absY, absD);\\n    if (rAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // This works thanks to two's complement.\\n        // \\\"sgt\\\" stands for \\\"signed greater than\\\" and \\\"sub(0,1)\\\" is max uint256.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers.\\n/// See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\nfunction prbExp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n        // because the initial result is 2^191 and all magic factors are less than 2^65.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // We're doing two things at the same time:\\n        //\\n        //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n        //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n        //      rather than 192.\\n        //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n        //\\n        // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Calculates the square root of x, rounding down if x is not a perfect square.\\n/// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n/// Credits to OpenZeppelin for the explanations in code comments below.\\n///\\n/// Caveats:\\n/// - This function does not work with fixed-point numbers.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as an uint256.\\nfunction prbSqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$ and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2}` is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since  it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // Round down the result in case x is not a perfect square.\\n        uint256 roundedDownResult = x / result;\\n        if (result >= roundedDownResult) {\\n            result = roundedDownResult;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd1x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an SD1x18 number.\\nSD1x18 constant E = SD1x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMAX_SD1x18 = 9_223372036854775807;\\nSD1x18 constant MAX_SD1x18 = SD1x18.wrap(uMAX_SD1x18);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMIN_SD1x18 = -9_223372036854775808;\\nSD1x18 constant MIN_SD1x18 = SD1x18.wrap(uMIN_SD1x18);\\n\\n/// @dev PI as an SD1x18 number.\\nSD1x18 constant PI = SD1x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit amount that implies how many trailing decimals can be represented.\\nSD1x18 constant UNIT = SD1x18.wrap(1e18);\\nint256 constant uUNIT = 1e18;\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd1x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport \\\"./Casting.sol\\\" as C;\\n\\n/// @notice The signed 1.18-decimal fixed-point number representation, which can have up to 1 digit and up to 18 decimals.\\n/// The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity type int64.\\n/// This is useful when end users want to use int64 to save gas, e.g. with tight variable packing in contract storage.\\ntype SD1x18 is int64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { C.intoSD59x18, C.intoUD2x18, C.intoUD60x18, C.intoUint256, C.intoUint128, C.intoUint40, C.unwrap } for SD1x18 global;\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd59x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as an SD59x18 number.\\nSD59x18 constant E = SD59x18.wrap(2_718281828459045235);\\n\\n/// @dev Half the UNIT number.\\nint256 constant uHALF_UNIT = 0.5e18;\\nSD59x18 constant HALF_UNIT = SD59x18.wrap(uHALF_UNIT);\\n\\n/// @dev log2(10) as an SD59x18 number.\\nint256 constant uLOG2_10 = 3_321928094887362347;\\nSD59x18 constant LOG2_10 = SD59x18.wrap(uLOG2_10);\\n\\n/// @dev log2(e) as an SD59x18 number.\\nint256 constant uLOG2_E = 1_442695040888963407;\\nSD59x18 constant LOG2_E = SD59x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an SD59x18 number can have.\\nint256 constant uMAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\nSD59x18 constant MAX_SD59x18 = SD59x18.wrap(uMAX_SD59x18);\\n\\n/// @dev The maximum whole value an SD59x18 number can have.\\nint256 constant uMAX_WHOLE_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MAX_WHOLE_SD59x18 = SD59x18.wrap(uMAX_WHOLE_SD59x18);\\n\\n/// @dev The minimum value an SD59x18 number can have.\\nint256 constant uMIN_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\nSD59x18 constant MIN_SD59x18 = SD59x18.wrap(uMIN_SD59x18);\\n\\n/// @dev The minimum whole value an SD59x18 number can have.\\nint256 constant uMIN_WHOLE_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MIN_WHOLE_SD59x18 = SD59x18.wrap(uMIN_WHOLE_SD59x18);\\n\\n/// @dev PI as an SD59x18 number.\\nSD59x18 constant PI = SD59x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit amount that implies how many trailing decimals can be represented.\\nint256 constant uUNIT = 1e18;\\nSD59x18 constant UNIT = SD59x18.wrap(1e18);\\n\\n/// @dev Zero as an SD59x18 number.\\nSD59x18 constant ZERO = SD59x18.wrap(0);\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd59x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport \\\"./Casting.sol\\\" as C;\\nimport \\\"./Helpers.sol\\\" as H;\\nimport \\\"./Math.sol\\\" as M;\\n\\n/// @notice The signed 59.18-decimal fixed-point number representation, which can have up to 59 digits and up to 18 decimals.\\n/// The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity type int256.\\ntype SD59x18 is int256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    C.intoInt256,\\n    C.intoSD1x18,\\n    C.intoUD2x18,\\n    C.intoUD60x18,\\n    C.intoUint256,\\n    C.intoUint128,\\n    C.intoUint40,\\n    C.unwrap\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    M.abs,\\n    M.avg,\\n    M.ceil,\\n    M.div,\\n    M.exp,\\n    M.exp2,\\n    M.floor,\\n    M.frac,\\n    M.gm,\\n    M.inv,\\n    M.log10,\\n    M.log2,\\n    M.ln,\\n    M.mul,\\n    M.pow,\\n    M.powu,\\n    M.sqrt\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    H.add,\\n    H.and,\\n    H.eq,\\n    H.gt,\\n    H.gte,\\n    H.isZero,\\n    H.lshift,\\n    H.lt,\\n    H.lte,\\n    H.mod,\\n    H.neq,\\n    H.or,\\n    H.rshift,\\n    H.sub,\\n    H.uncheckedAdd,\\n    H.uncheckedSub,\\n    H.uncheckedUnary,\\n    H.xor\\n} for SD59x18 global;\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud2x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an UD2x18 number.\\nUD2x18 constant E = UD2x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an UD2x18 number can have.\\nuint64 constant uMAX_UD2x18 = 18_446744073709551615;\\nUD2x18 constant MAX_UD2x18 = UD2x18.wrap(uMAX_UD2x18);\\n\\n/// @dev PI as an UD2x18 number.\\nUD2x18 constant PI = UD2x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit amount that implies how many trailing decimals can be represented.\\nuint256 constant uUNIT = 1e18;\\nUD2x18 constant UNIT = UD2x18.wrap(1e18);\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud2x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport \\\"./Casting.sol\\\" as C;\\n\\n/// @notice The unsigned 2.18-decimal fixed-point number representation, which can have up to 2 digits and up to 18 decimals.\\n/// The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity type uint64.\\n/// This is useful when end users want to use uint64 to save gas, e.g. with tight variable packing in contract storage.\\ntype UD2x18 is uint64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { C.intoSD1x18, C.intoSD59x18, C.intoUD60x18, C.intoUint256, C.intoUint128, C.intoUint40, C.unwrap } for UD2x18 global;\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd1x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport {\\n    PRBMath_SD1x18_ToUD2x18_Underflow,\\n    PRBMath_SD1x18_ToUD60x18_Underflow,\\n    PRBMath_SD1x18_ToUint128_Underflow,\\n    PRBMath_SD1x18_ToUint256_Underflow,\\n    PRBMath_SD1x18_ToUint40_Overflow,\\n    PRBMath_SD1x18_ToUint40_Underflow\\n} from \\\"./Errors.sol\\\";\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD1x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of SD1x18 is a subset of SD59x18.\\nfunction intoSD59x18(SD1x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(SD1x18.unwrap(x)));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD2x18.\\n/// - x must be positive.\\nfunction intoUD2x18(SD1x18 x) pure returns (UD2x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD1x18_ToUD2x18_Underflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD1x18 x) pure returns (UD60x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD1x18_ToUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD1x18 x) pure returns (uint256 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD1x18_ToUint256_Underflow(x);\\n    }\\n    result = uint256(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint128(SD1x18 x) pure returns (uint128 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD1x18_ToUint128_Underflow(x);\\n    }\\n    result = uint128(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD1x18 x) pure returns (uint40 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD1x18_ToUint40_Underflow(x);\\n    }\\n    if (xInt > int64(uint64(MAX_UINT40))) {\\n        revert PRBMath_SD1x18_ToUint40_Overflow(x);\\n    }\\n    result = uint40(uint64(xInt));\\n}\\n\\n/// @notice Alias for the `wrap` function.\\nfunction sd1x18(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD1x18 number into int64.\\nfunction unwrap(SD1x18 x) pure returns (int64 result) {\\n    result = SD1x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int64 number into the SD1x18 value type.\\nfunction wrap(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd59x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18, uMIN_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport {\\n    PRBMath_SD59x18_IntoSD1x18_Overflow,\\n    PRBMath_SD59x18_IntoSD1x18_Underflow,\\n    PRBMath_SD59x18_IntoUD2x18_Overflow,\\n    PRBMath_SD59x18_IntoUD2x18_Underflow,\\n    PRBMath_SD59x18_IntoUD60x18_Underflow,\\n    PRBMath_SD59x18_IntoUint128_Overflow,\\n    PRBMath_SD59x18_IntoUint128_Underflow,\\n    PRBMath_SD59x18_IntoUint256_Underflow,\\n    PRBMath_SD59x18_IntoUint40_Overflow,\\n    PRBMath_SD59x18_IntoUint40_Underflow\\n} from \\\"./Errors.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD59x18 number into int256.\\n/// @dev This is basically a functional alias for the `unwrap` function.\\nfunction intoInt256(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Casts an SD59x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `uMIN_SD1x18`.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(SD59x18 x) pure returns (SD1x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < uMIN_SD1x18) {\\n        revert PRBMath_SD59x18_IntoSD1x18_Underflow(x);\\n    }\\n    if (xInt > uMAX_SD1x18) {\\n        revert PRBMath_SD59x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(SD59x18 x) pure returns (UD2x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_IntoUD2x18_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(uMAX_UD2x18))) {\\n        revert PRBMath_SD59x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(uint256(xInt)));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD59x18 x) pure returns (UD60x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_IntoUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD59x18 x) pure returns (uint256 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_IntoUint256_Underflow(x);\\n    }\\n    result = uint256(xInt);\\n}\\n\\n/// @notice Casts an SD59x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UINT128`.\\nfunction intoUint128(SD59x18 x) pure returns (uint128 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_IntoUint128_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT128))) {\\n        revert PRBMath_SD59x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD59x18 x) pure returns (uint40 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_IntoUint40_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT40))) {\\n        revert PRBMath_SD59x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(uint256(xInt));\\n}\\n\\n/// @notice Alias for the `wrap` function.\\nfunction sd(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Alias for the `wrap` function.\\nfunction sd59x18(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD59x18 number into int256.\\nfunction unwrap(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int256 number into the SD59x18 value type.\\nfunction wrap(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd59x18/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { unwrap, wrap } from \\\"./Casting.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the SD59x18 type.\\nfunction add(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(unwrap(x) + unwrap(y));\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and(SD59x18 x, int256 bits) pure returns (SD59x18 result) {\\n    return wrap(unwrap(x) & bits);\\n}\\n\\n/// @notice Implements the equal (=) operation in the SD59x18 type.\\nfunction eq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = unwrap(x) == unwrap(y);\\n}\\n\\n/// @notice Implements the greater than operation (>) in the SD59x18 type.\\nfunction gt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = unwrap(x) > unwrap(y);\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the SD59x18 type.\\nfunction gte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = unwrap(x) >= unwrap(y);\\n}\\n\\n/// @notice Implements a zero comparison check function in the SD59x18 type.\\nfunction isZero(SD59x18 x) pure returns (bool result) {\\n    result = unwrap(x) == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the SD59x18 type.\\nfunction lshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the SD59x18 type.\\nfunction lt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = unwrap(x) < unwrap(y);\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the SD59x18 type.\\nfunction lte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = unwrap(x) <= unwrap(y);\\n}\\n\\n/// @notice Implements the unchecked modulo operation (%) in the SD59x18 type.\\nfunction mod(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) % unwrap(y));\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the SD59x18 type.\\nfunction neq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = unwrap(x) != unwrap(y);\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the SD59x18 type.\\nfunction or(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) | unwrap(y));\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the SD59x18 type.\\nfunction rshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the SD59x18 type.\\nfunction sub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) - unwrap(y));\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the SD59x18 type.\\nfunction uncheckedAdd(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(unwrap(x) + unwrap(y));\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the SD59x18 type.\\nfunction uncheckedSub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(unwrap(x) - unwrap(y));\\n    }\\n}\\n\\n/// @notice Implements the unchecked unary minus operation (-) in the SD59x18 type.\\nfunction uncheckedUnary(SD59x18 x) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(-unwrap(x));\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the SD59x18 type.\\nfunction xor(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) ^ unwrap(y));\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd59x18/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { MAX_UINT128, MAX_UINT40, msb, mulDiv, mulDiv18, prbExp2, prbSqrt } from \\\"../Common.sol\\\";\\nimport {\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_SD59x18,\\n    uMAX_WHOLE_SD59x18,\\n    uMIN_SD59x18,\\n    uMIN_WHOLE_SD59x18,\\n    UNIT,\\n    uUNIT,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport {\\n    PRBMath_SD59x18_Abs_MinSD59x18,\\n    PRBMath_SD59x18_Ceil_Overflow,\\n    PRBMath_SD59x18_Div_InputTooSmall,\\n    PRBMath_SD59x18_Div_Overflow,\\n    PRBMath_SD59x18_Exp_InputTooBig,\\n    PRBMath_SD59x18_Exp2_InputTooBig,\\n    PRBMath_SD59x18_Floor_Underflow,\\n    PRBMath_SD59x18_Gm_Overflow,\\n    PRBMath_SD59x18_Gm_NegativeProduct,\\n    PRBMath_SD59x18_Log_InputTooSmall,\\n    PRBMath_SD59x18_Mul_InputTooSmall,\\n    PRBMath_SD59x18_Mul_Overflow,\\n    PRBMath_SD59x18_Powu_Overflow,\\n    PRBMath_SD59x18_Sqrt_NegativeInput,\\n    PRBMath_SD59x18_Sqrt_Overflow\\n} from \\\"./Errors.sol\\\";\\nimport { unwrap, wrap } from \\\"./Helpers.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Calculate the absolute value of x.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than `MIN_SD59x18`.\\n///\\n/// @param x The SD59x18 number for which to calculate the absolute value.\\n/// @param result The absolute value of x as an SD59x18 number.\\nfunction abs(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt == uMIN_SD59x18) {\\n        revert PRBMath_SD59x18_Abs_MinSD59x18();\\n    }\\n    result = xInt < 0 ? wrap(-xInt) : x;\\n}\\n\\n/// @notice Calculates the arithmetic average of x and y, rounding towards zero.\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The arithmetic average as an SD59x18 number.\\nfunction avg(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    int256 yInt = unwrap(y);\\n\\n    unchecked {\\n        // This is equivalent to \\\"x / 2 +  y / 2\\\" but faster.\\n        // This operation can never overflow.\\n        int256 sum = (xInt >> 1) + (yInt >> 1);\\n\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, we add 1 to the result, since shifting negative numbers to the right rounds\\n            // down to infinity. The right part is equivalent to \\\"sum + (x % 2 == 1 || y % 2 == 1)\\\" but faster.\\n            assembly (\\\"memory-safe\\\") {\\n                result := add(sum, and(or(xInt, yInt), 1))\\n            }\\n        } else {\\n            // We need to add 1 if both x and y are odd to account for the double 0.5 remainder that is truncated after shifting.\\n            result = wrap(sum + (xInt & yInt & 1));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the smallest whole SD59x18 number greater than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to ceil.\\n/// @param result The least number greater than or equal to x, as an SD59x18 number.\\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt > uMAX_WHOLE_SD59x18) {\\n        revert PRBMath_SD59x18_Ceil_Overflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt > 0) {\\n                resultInt += uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Divides two SD59x18 numbers, returning a new SD59x18 number. Rounds towards zero.\\n///\\n/// @dev This is a variant of `mulDiv` that works with signed numbers. Works by computing the signs and the absolute values\\n/// separately.\\n///\\n/// Requirements:\\n/// - All from `Common.mulDiv`.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The denominator cannot be zero.\\n/// - The result must fit within int256.\\n///\\n/// Caveats:\\n/// - All from `Common.mulDiv`.\\n///\\n/// @param x The numerator as an SD59x18 number.\\n/// @param y The denominator as an SD59x18 number.\\n/// @param result The quotient as an SD59x18 number.\\nfunction div(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    int256 yInt = unwrap(y);\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert PRBMath_SD59x18_Div_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*UNIT)\u00f7y. The resulting value must fit within int256.\\n    uint256 resultAbs = mulDiv(xAbs, uint256(uUNIT), yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert PRBMath_SD59x18_Div_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign. This works thanks to two's complement; the left-most bit is the sign bit.\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs don't have the same sign, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Calculates the natural exponent of x.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `log2`.\\n/// - x must be less than 133.084258667509499441.\\n///\\n/// Caveats:\\n/// - All from `exp2`.\\n/// - For any x less than -41.446531673892822322, the result is zero.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\nfunction exp(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    // Without this check, the value passed to `exp2` would be less than -59.794705707972522261.\\n    if (xInt < -41_446531673892822322) {\\n        return ZERO;\\n    }\\n\\n    // Without this check, the value passed to `exp2` would be greater than 192.\\n    if (xInt >= 133_084258667509499441) {\\n        revert PRBMath_SD59x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Do the fixed-point multiplication inline to save gas.\\n        int256 doubleUnitProduct = xInt * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// 2^{-x} = \\\\frac{1}{2^x}\\n/// $$\\n///\\n/// See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Requirements:\\n/// - x must be 192 or less.\\n/// - The result must fit within `MAX_SD59x18`.\\n///\\n/// Caveats:\\n/// - For any x less than -59.794705707972522261, the result is zero.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\nfunction exp2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt < 0) {\\n        // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n        if (xInt < -59_794705707972522261) {\\n            return ZERO;\\n        }\\n\\n        unchecked {\\n            // Do the fixed-point inversion $1/2^x$ inline to save gas. 1e36 is UNIT * UNIT.\\n            result = wrap(1e36 / unwrap(exp2(wrap(-xInt))));\\n        }\\n    } else {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (xInt >= 192e18) {\\n            revert PRBMath_SD59x18_Exp2_InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x_192x64 = uint256((xInt << 64) / uUNIT);\\n\\n            // It is safe to convert the result to int256 with no checks because the maximum input allowed in this function is 192.\\n            result = wrap(int256(prbExp2(x_192x64)));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the greatest whole SD59x18 number less than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to `MIN_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to floor.\\n/// @param result The greatest integer less than or equal to x, as an SD59x18 number.\\nfunction floor(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt < uMIN_WHOLE_SD59x18) {\\n        revert PRBMath_SD59x18_Floor_Underflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt < 0) {\\n                resultInt -= uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right.\\n/// of the radix point for negative numbers.\\n/// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n/// @param x The SD59x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an SD59x18 number.\\nfunction frac(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(unwrap(x) % uUNIT);\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit within `MAX_SD59x18`, lest it overflows.\\n/// - x * y must not be negative, since this library does not handle complex numbers.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\nfunction gm(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    int256 yInt = unwrap(y);\\n    if (xInt == 0 || yInt == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Equivalent to \\\"xy / x != y\\\". Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xyInt = xInt * yInt;\\n        if (xyInt / xInt != yInt) {\\n            revert PRBMath_SD59x18_Gm_Overflow(x, y);\\n        }\\n\\n        // The product must not be negative, since this library does not handle complex numbers.\\n        if (xyInt < 0) {\\n            revert PRBMath_SD59x18_Gm_NegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product had picked up a factor of `UNIT`\\n        // during multiplication. See the comments within the `prbSqrt` function.\\n        uint256 resultUint = prbSqrt(uint256(xyInt));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\\n/// @notice Calculates 1 / x, rounding toward zero.\\n///\\n/// @dev Requirements:\\n/// - x cannot be zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the inverse.\\n/// @return result The inverse as an SD59x18 number.\\nfunction inv(SD59x18 x) pure returns (SD59x18 result) {\\n    // 1e36 is UNIT * UNIT.\\n    result = wrap(1e36 / unwrap(x));\\n}\\n\\n/// @notice Calculates the natural logarithm of x.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}$$.\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `log2`.\\n///\\n/// Caveats:\\n/// - All from `log2`.\\n/// - This doesn't return exactly 1 for 2.718281828459045235, for that more fine-grained precision is needed.\\n///\\n/// @param x The SD59x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an SD59x18 number.\\nfunction ln(SD59x18 x) pure returns (SD59x18 result) {\\n    // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n    // can return is 195.205294292027477728.\\n    result = wrap((unwrap(log2(x)) * uUNIT) / uLOG2_E);\\n}\\n\\n/// @notice Calculates the common logarithm of x.\\n///\\n/// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n/// logarithm based on the formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `log2`.\\n///\\n/// Caveats:\\n/// - All from `log2`.\\n///\\n/// @param x The SD59x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an SD59x18 number.\\nfunction log10(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this block is the assembly mul operation, not the SD59x18 `mul`.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        default {\\n            result := uMAX_SD59x18\\n        }\\n    }\\n\\n    if (unwrap(result) == uMAX_SD59x18) {\\n        unchecked {\\n            // Do the fixed-point division inline to save gas.\\n            result = wrap((unwrap(log2(x)) * uUNIT) / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x.\\n///\\n/// @dev Based on the iterative approximation algorithm.\\n/// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// Caveats:\\n/// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n///\\n/// @param x The SD59x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an SD59x18 number.\\nfunction log2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt <= 0) {\\n        revert PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // This works because of:\\n        //\\n        // $$\\n        // log_2{x} = -log_2{\\\\frac{1}{x}}\\n        // $$\\n        int256 sign;\\n        if (xInt >= uUNIT) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Do the fixed-point inversion inline to save gas. The numerator is UNIT * UNIT.\\n            xInt = 1e36 / xInt;\\n        }\\n\\n        // Calculate the integer part of the logarithm and add it to the result and finally calculate $y = x * 2^(-n)$.\\n        uint256 n = msb(uint256(xInt / uUNIT));\\n\\n        // This is the integer part of the logarithm as an SD59x18 number. The operation can't overflow\\n        // because n is maximum 255, UNIT is 1e18 and sign is either 1 or -1.\\n        int256 resultInt = int256(n) * uUNIT;\\n\\n        // This is $y = x * 2^{-n}$.\\n        int256 y = xInt >> n;\\n\\n        // If y is 1, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultInt * sign);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n        int256 DOUBLE_UNIT = 2e18;\\n        for (int256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is $y^2 > 2$ and so in the range [2,4)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultInt = resultInt + delta;\\n\\n                // Corresponds to z/2 on Wikipedia.\\n                y >>= 1;\\n            }\\n        }\\n        resultInt *= sign;\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Multiplies two SD59x18 numbers together, returning a new SD59x18 number.\\n///\\n/// @dev This is a variant of `mulDiv` that works with signed numbers and employs constant folding, i.e. the denominator\\n/// is always 1e18.\\n///\\n/// Requirements:\\n/// - All from `Common.mulDiv18`.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The result must fit within `MAX_SD59x18`.\\n///\\n/// Caveats:\\n/// - To understand how this works in detail, see the NatSpec comments in `Common.mulDivSigned`.\\n///\\n/// @param x The multiplicand as an SD59x18 number.\\n/// @param y The multiplier as an SD59x18 number.\\n/// @return result The product as an SD59x18 number.\\nfunction mul(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    int256 yInt = unwrap(y);\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert PRBMath_SD59x18_Mul_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    uint256 resultAbs = mulDiv18(xAbs, yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert PRBMath_SD59x18_Mul_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign. This works thanks to two's complement; the left-most bit is the sign bit.\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// @dev Based on the formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// Requirements:\\n/// - All from `exp2`, `log2` and `mul`.\\n/// - x cannot be zero.\\n///\\n/// Caveats:\\n/// - All from `exp2`, `log2` and `mul`.\\n/// - Assumes 0^0 is 1.\\n///\\n/// @param x Number to raise to given power y, as an SD59x18 number.\\n/// @param y Exponent to raise x to, as an SD59x18 number\\n/// @return result x raised to power y, as an SD59x18 number.\\nfunction pow(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    int256 yInt = unwrap(y);\\n\\n    if (xInt == 0) {\\n        result = yInt == 0 ? UNIT : ZERO;\\n    } else {\\n        if (yInt == uUNIT) {\\n            result = x;\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n}\\n\\n/// @notice Raises x (an SD59x18 number) to the power y (unsigned basic integer) using the famous algorithm\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n///\\n/// Requirements:\\n/// - All from `abs` and `Common.mulDiv18`.\\n/// - The result must fit within `MAX_SD59x18`.\\n///\\n/// Caveats:\\n/// - All from `Common.mulDiv18`.\\n/// - Assumes 0^0 is 1.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y The exponent as an uint256.\\n/// @return result The result as an SD59x18 number.\\nfunction powu(SD59x18 x, uint256 y) pure returns (SD59x18 result) {\\n    uint256 xAbs = uint256(unwrap(abs(x)));\\n\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 resultAbs = y & 1 > 0 ? xAbs : uint256(uUNIT);\\n\\n    // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n    uint256 yAux = y;\\n    for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n        xAbs = mulDiv18(xAbs, xAbs);\\n\\n        // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n        if (yAux & 1 > 0) {\\n            resultAbs = mulDiv18(resultAbs, xAbs);\\n        }\\n    }\\n\\n    // The result must fit within `MAX_SD59x18`.\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert PRBMath_SD59x18_Powu_Overflow(x, y);\\n    }\\n\\n    unchecked {\\n        // Is the base negative and the exponent an odd number?\\n        int256 resultInt = int256(resultAbs);\\n        bool isNegative = unwrap(x) < 0 && y & 1 == 1;\\n        if (isNegative) {\\n            resultInt = -resultInt;\\n        }\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x, rounding down. Only the positive root is returned.\\n/// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Requirements:\\n/// - x cannot be negative, since this library does not handle complex numbers.\\n/// - x must be less than `MAX_SD59x18` divided by `UNIT`.\\n///\\n/// @param x The SD59x18 number for which to calculate the square root.\\n/// @return result The result as an SD59x18 number.\\nfunction sqrt(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = unwrap(x);\\n    if (xInt < 0) {\\n        revert PRBMath_SD59x18_Sqrt_NegativeInput(x);\\n    }\\n    if (xInt > uMAX_SD59x18 / uUNIT) {\\n        revert PRBMath_SD59x18_Sqrt_Overflow(x);\\n    }\\n\\n    unchecked {\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` that is picked up when multiplying two SD59x18\\n        // numbers together (in this case, the two numbers are both the square root).\\n        uint256 resultUint = prbSqrt(uint256(xInt * uUNIT));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud2x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { PRBMath_UD2x18_IntoSD1x18_Overflow, PRBMath_UD2x18_IntoUint40_Overflow } from \\\"./Errors.sol\\\";\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an UD2x18 number into SD1x18.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD2x18 x) pure returns (SD1x18 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(uMAX_SD1x18)) {\\n        revert PRBMath_UD2x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xUint));\\n}\\n\\n/// @notice Casts an UD2x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of SD59x18.\\nfunction intoSD59x18(UD2x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(uint256(UD2x18.unwrap(x))));\\n}\\n\\n/// @notice Casts an UD2x18 number into UD60x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of UD60x18.\\nfunction intoUD60x18(UD2x18 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts an UD2x18 number into uint128.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint128.\\nfunction intoUint128(UD2x18 x) pure returns (uint128 result) {\\n    result = uint128(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts an UD2x18 number into uint256.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint256.\\nfunction intoUint256(UD2x18 x) pure returns (uint256 result) {\\n    result = uint256(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts an UD2x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD2x18 x) pure returns (uint40 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(MAX_UINT40)) {\\n        revert PRBMath_UD2x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for the `wrap` function.\\nfunction ud2x18(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\\n/// @notice Unwrap an UD2x18 number into uint64.\\nfunction unwrap(UD2x18 x) pure returns (uint64 result) {\\n    result = UD2x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an uint64 number into the UD2x18 value type.\\nfunction wrap(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd1x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Emitted when trying to cast a SD1x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD1x18_ToUD2x18_Underflow(SD1x18 x);\\n\\n/// @notice Emitted when trying to cast a SD1x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD1x18_ToUD60x18_Underflow(SD1x18 x);\\n\\n/// @notice Emitted when trying to cast a SD1x18 number that doesn't fit in uint128.\\nerror PRBMath_SD1x18_ToUint128_Underflow(SD1x18 x);\\n\\n/// @notice Emitted when trying to cast a SD1x18 number that doesn't fit in uint256.\\nerror PRBMath_SD1x18_ToUint256_Underflow(SD1x18 x);\\n\\n/// @notice Emitted when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Overflow(SD1x18 x);\\n\\n/// @notice Emitted when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Underflow(SD1x18 x);\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/sd59x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Emitted when taking the absolute value of `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Abs_MinSD59x18();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMath_SD59x18_Ceil_Overflow(SD59x18 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Overflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Underflow(int256 x);\\n\\n/// @notice Emitted when dividing two numbers and one of them is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Div_InputTooSmall();\\n\\n/// @notice Emitted when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMath_SD59x18_Div_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Emitted when taking the natural exponent of a base greater than 133.084258667509499441.\\nerror PRBMath_SD59x18_Exp_InputTooBig(SD59x18 x);\\n\\n/// @notice Emitted when taking the binary exponent of a base greater than 192.\\nerror PRBMath_SD59x18_Exp2_InputTooBig(SD59x18 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMath_SD59x18_Floor_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when taking the geometric mean of two numbers and their product is negative.\\nerror PRBMath_SD59x18_Gm_NegativeProduct(SD59x18 x, SD59x18 y);\\n\\n/// @notice Emitted when taking the geometric mean of two numbers and multiplying them overflows SD59x18.\\nerror PRBMath_SD59x18_Gm_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Overflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Overflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD59x18_IntoUD60x18_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Overflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint256.\\nerror PRBMath_SD59x18_IntoUint256_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Overflow(SD59x18 x);\\n\\n/// @notice Emitted when trying to cast an UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Underflow(SD59x18 x);\\n\\n/// @notice Emitted when taking the logarithm of a number less than or equal to zero.\\nerror PRBMath_SD59x18_Log_InputTooSmall(SD59x18 x);\\n\\n/// @notice Emitted when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Mul_InputTooSmall();\\n\\n/// @notice Emitted when multiplying two numbers and the intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Mul_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Emitted when raising a number to a power and hte intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Powu_Overflow(SD59x18 x, uint256 y);\\n\\n/// @notice Emitted when taking the square root of a negative number.\\nerror PRBMath_SD59x18_Sqrt_NegativeInput(SD59x18 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMath_SD59x18_Sqrt_Overflow(SD59x18 x);\\n\"\r\n    },\r\n    \"lib/lssvm2/lib/prb-math/src/ud2x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Emitted when trying to cast a UD2x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD2x18_IntoSD1x18_Overflow(UD2x18 x);\\n\\n/// @notice Emitted when trying to cast a UD2x18 number that doesn't fit in uint40.\\nerror PRBMath_UD2x18_IntoUint40_Overflow(UD2x18 x);\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap-v3/=lib/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@murky/=lib/murky/src/\",\r\n      \"@solidity-math-utils/=lib/solidity-math-utils/project/contracts/\",\r\n      \"@solidity-trigonometry/=lib/solidity-trigonometry/src/\",\r\n      \"@1inch/=lib/\",\r\n      \"@charmfi/=lib/charmfi-contracts-0.8.0-support/\",\r\n      \"@sudoswap/=lib/lssvm/src/\",\r\n      \"@floor/=src/contracts/\",\r\n      \"@floor-interfaces/=src/interfaces/\",\r\n      \"@floor-scripts/=script/\",\r\n      \"@ERC721A/=lib/ERC721A/contracts/\",\r\n      \"foundry-random/=lib/foundry-random/src/\",\r\n      \"lssvm2/=lib/lssvm2/src/\",\r\n      \"@nftx-protocol-v3/=lib/nftx-protocol-v3/src/\",\r\n      \"@manifoldxyz/=lib/lssvm2/lib/\",\r\n      \"@mocks/=lib/nftx-protocol-v3/src/mocks/\",\r\n      \"@permit2/=lib/nftx-protocol-v3/lib/permit2/src/\",\r\n      \"@prb/math/=lib/lssvm2/lib/prb-math/src/\",\r\n      \"@prb/test/=lib/foundry-random/lib/prb-test/src/\",\r\n      \"@src/=lib/nftx-protocol-v3/src/\",\r\n      \"@test/=lib/nftx-protocol-v3/test/\",\r\n      \"@uni-core/=lib/nftx-protocol-v3/src/uniswap/v3-core/\",\r\n      \"@uni-periphery/=lib/nftx-protocol-v3/src/uniswap/v3-periphery/\",\r\n      \"@uniswap/lib/=lib/nftx-protocol-v3/lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/nftx-protocol-v3/lib/v2-core/\",\r\n      \"@uniswap/v3-core/contracts/=lib/nftx-protocol-v3/src/uniswap/v3-core/\",\r\n      \"CramBit/=lib/foundry-random/lib/CramBit/\",\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"base64-sol/=lib/nftx-protocol-v3/src/uniswap/v3-periphery/libraries/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"charmfi-contracts-0.8.0-support/=lib/charmfi-contracts-0.8.0-support/\",\r\n      \"clones-with-immutable-args/=lib/lssvm2/lib/clones-with-immutable-args/src/\",\r\n      \"crambit/=lib/foundry-random/lib/CramBit/src/\",\r\n      \"create2-helpers/=lib/lssvm2/lib/royalty-registry-solidity/lib/create2-helpers/\",\r\n      \"create3-factory/=lib/lssvm2/lib/create3-factory/\",\r\n      \"foundry-huff/=lib/lssvm2/lib/foundry-huff/src/\",\r\n      \"foundry-random/=lib/foundry-random/src/\",\r\n      \"huffmate/=lib/lssvm2/lib/huffmate/src/\",\r\n      \"libraries-solidity/=lib/lssvm2/lib/libraries-solidity/contracts/\",\r\n      \"lssvm/=lib/lssvm/src/\",\r\n      \"lssvm2/=lib/lssvm2/src/\",\r\n      \"manifoldxyz/=lib/lssvm2/lib/royalty-registry-solidity/contracts/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"nftx-protocol-v3/=lib/nftx-protocol-v3/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/solidity-trigonometry/lib/prb-math/contracts/\",\r\n      \"prb-test/=lib/foundry-random/lib/prb-test/src/\",\r\n      \"royalty-registry-solidity.git/=lib/lssvm/lib/royalty-registry-solidity.git/contracts/\",\r\n      \"royalty-registry-solidity/=lib/lssvm2/lib/royalty-registry-solidity/\",\r\n      \"solidity-bytes-utils/=lib/foundry-random/lib/solidity-bytes-utils/contracts/\",\r\n      \"solidity-math-utils/=lib/solidity-math-utils/\",\r\n      \"solidity-stringutils/=lib/lssvm2/lib/foundry-huff/lib/solidity-stringutils/\",\r\n      \"solidity-trigonometry/=lib/solidity-trigonometry/src/\",\r\n      \"solidity-utils/=lib/solidity-utils/contracts/\",\r\n      \"solmate/=lib/lssvm2/lib/solmate/src/\",\r\n      \"src/=lib/foundry-random/src/\",\r\n      \"stringutils/=lib/lssvm2/lib/foundry-huff/lib/solidity-stringutils/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"weird-erc20/=lib/lssvm/lib/solmate/lib/weird-erc20/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_pairFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gdaCurve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSetNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"endSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdaCurve\",\"outputs\":[{\"internalType\":\"contract GDACurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_alpha\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_lambda\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"_time\",\"type\":\"uint48\"}],\"name\":\"getPackedDelta\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSpotPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFactory\",\"outputs\":[{\"internalType\":\"contract LSSVMPairFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lambda\",\"type\":\"uint256\"}],\"name\":\"setAlphaLambda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sweeperPools\",\"outputs\":[{\"internalType\":\"contract LSSVMPairETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SudoswapSweeper", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bf3cf484670dcf60f488e73bafb530348526eb9d000000000000000000000000a020d57ab0448ef74115c112d18a9c231cc860000000000000000000000000001fd5876d4a3860eb0159055a3b7cb79fdfff6b67", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}