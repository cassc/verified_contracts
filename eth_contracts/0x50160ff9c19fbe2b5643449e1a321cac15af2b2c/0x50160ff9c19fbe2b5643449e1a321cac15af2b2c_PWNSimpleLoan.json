{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/MultiToken/src/MultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"@MT/interfaces/ICryptoKitties.sol\\\";\\n\\n\\nlibrary MultiToken {\\n    using ERC165Checker for address;\\n    using SafeERC20 for IERC20;\\n\\n    bytes4 public constant ERC20_INTERFACE_ID = 0x36372b07;\\n    bytes4 public constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n    bytes4 public constant ERC1155_INTERFACE_ID = 0xd9b67a26;\\n    bytes4 public constant CRYPTO_KITTIES_INTERFACE_ID = 0x9a20483d;\\n\\n    /**\\n     * @title Category\\n     * @dev Enum representation Asset category.\\n     */\\n    enum Category {\\n        ERC20,\\n        ERC721,\\n        ERC1155,\\n        CryptoKitties\\n    }\\n\\n    /**\\n     * @title Asset\\n     * @param category Corresponding asset category.\\n     * @param assetAddress Address of the token contract defining the asset.\\n     * @param id TokenID of an NFT or 0.\\n     * @param amount Amount of fungible tokens or 0 -> 1.\\n     */\\n    struct Asset {\\n        Category category;\\n        address assetAddress;\\n        uint256 id;\\n        uint256 amount;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TRANSFER ASSET                                        *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * transferAssetFrom\\n     * @dev Wrapping function for `transferFrom` calls on various token interfaces.\\n     *      If `source` is `address(this)`, function `transfer` is called instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function transferAssetFrom(Asset memory asset, address source, address dest) internal {\\n        _transferAssetFrom(asset, source, dest, false);\\n    }\\n\\n    /**\\n     * safeTransferAssetFrom\\n     * @dev Wrapping function for `safeTransferFrom` calls on various token interfaces.\\n     *      If `source` is `address(this)`, function `transfer` is called instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function safeTransferAssetFrom(Asset memory asset, address source, address dest) internal {\\n        _transferAssetFrom(asset, source, dest, true);\\n    }\\n\\n    function _transferAssetFrom(Asset memory asset, address source, address dest, bool isSafe) private {\\n        if (asset.category == Category.ERC20) {\\n            if (source == address(this))\\n                IERC20(asset.assetAddress).safeTransfer(dest, asset.amount);\\n            else\\n                IERC20(asset.assetAddress).safeTransferFrom(source, dest, asset.amount);\\n\\n        } else if (asset.category == Category.ERC721) {\\n            if (!isSafe)\\n                IERC721(asset.assetAddress).transferFrom(source, dest, asset.id);\\n            else\\n                IERC721(asset.assetAddress).safeTransferFrom(source, dest, asset.id, \\\"\\\");\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            IERC1155(asset.assetAddress).safeTransferFrom(source, dest, asset.id, asset.amount == 0 ? 1 : asset.amount, \\\"\\\");\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            if (source == address(this))\\n                ICryptoKitties(asset.assetAddress).transfer(dest, asset.id);\\n            else\\n                ICryptoKitties(asset.assetAddress).transferFrom(source, dest, asset.id);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * getTransferAmount\\n     * @dev Get amount of asset that would be transferred.\\n     *      NFTs (ERC721, CryptoKitties & ERC1155 with amount 0) with return 1.\\n     *      Fungible tokens will return its amount (ERC20 with 0 amount is valid state).\\n     *      In combination with `MultiToken.balanceOf`, `getTransferAmount` can be used to check successful asset transfer.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @return Number of tokens that would be transferred of the asset.\\n     */\\n    function getTransferAmount(Asset memory asset) internal pure returns (uint256) {\\n        if (asset.category == Category.ERC20)\\n            return asset.amount;\\n        else if (asset.category == Category.ERC1155 && asset.amount > 0)\\n            return asset.amount;\\n        else // Return 1 for ERC721, CryptoKitties and ERC1155 used as NFTs (amount = 0)\\n            return 1;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TRANSFER ASSET CALLDATA                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * transferAssetFromCalldata\\n     * @dev Wrapping function for `transferFrom` calladata on various token interfaces.\\n     *      If `fromSender` is true, function `transfer` is returned instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function transferAssetFromCalldata(Asset memory asset, address source, address dest, bool fromSender) pure internal returns (bytes memory) {\\n        return _transferAssetFromCalldata(asset, source, dest, fromSender, false);\\n    }\\n\\n    /**\\n     * safeTransferAssetFromCalldata\\n     * @dev Wrapping function for `safeTransferFrom` calladata on various token interfaces.\\n     *      If `fromSender` is true, function `transfer` is returned instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function safeTransferAssetFromCalldata(Asset memory asset, address source, address dest, bool fromSender) pure internal returns (bytes memory) {\\n        return _transferAssetFromCalldata(asset, source, dest, fromSender, true);\\n    }\\n\\n    function _transferAssetFromCalldata(Asset memory asset, address source, address dest, bool fromSender, bool isSafe) pure private returns (bytes memory) {\\n        if (asset.category == Category.ERC20) {\\n            if (fromSender) {\\n                return abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\", dest, asset.amount\\n                );\\n            } else {\\n                return abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\", source, dest, asset.amount\\n                );\\n            }\\n        } else if (asset.category == Category.ERC721) {\\n            if (!isSafe) {\\n                return abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\", source, dest, asset.id\\n                );\\n            } else {\\n                return abi.encodeWithSignature(\\n                    \\\"safeTransferFrom(address,address,uint256,bytes)\\\", source, dest, asset.id, \\\"\\\"\\n                );\\n            }\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            return abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\", source, dest, asset.id, asset.amount == 0 ? 1 : asset.amount, \\\"\\\"\\n            );\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            if (fromSender) {\\n                return abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\", dest, asset.id\\n                );\\n            } else {\\n                return abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\", source, dest, asset.id\\n                );\\n            }\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # PERMIT                                                *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * permit\\n     * @dev Wrapping function for granting approval via permit signature.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param owner Account/address that signed the permit.\\n     * @param spender Account/address that would be granted approval to `asset`.\\n     * @param permitData Data about permit deadline (uint256) and permit signature (64/65 bytes).\\n     *                   Deadline and signature should be pack encoded together.\\n     *                   Signature can be standard (65 bytes) or compact (64 bytes) defined in EIP-2098.\\n     */\\n    function permit(Asset memory asset, address owner, address spender, bytes memory permitData) internal {\\n        if (asset.category == Category.ERC20) {\\n\\n            // Parse deadline and permit signature parameters\\n            uint256 deadline;\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n\\n            // Parsing signature parameters used from OpenZeppelins ECDSA library\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/83277ff916ac4f58fec072b8f28a252c1245c2f1/contracts/utils/cryptography/ECDSA.sol\\n\\n            // Deadline (32 bytes) + standard signature data (65 bytes) -> 97 bytes\\n            if (permitData.length == 97) {\\n                assembly {\\n                    deadline := mload(add(permitData, 0x20))\\n                    r := mload(add(permitData, 0x40))\\n                    s := mload(add(permitData, 0x60))\\n                    v := byte(0, mload(add(permitData, 0x80)))\\n                }\\n            }\\n            // Deadline (32 bytes) + compact signature data (64 bytes) -> 96 bytes\\n            else if (permitData.length == 96) {\\n                bytes32 vs;\\n\\n                assembly {\\n                    deadline := mload(add(permitData, 0x20))\\n                    r := mload(add(permitData, 0x40))\\n                    vs := mload(add(permitData, 0x60))\\n                }\\n\\n                s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n                v = uint8((uint256(vs) >> 255) + 27);\\n            } else {\\n                revert(\\\"MultiToken::Permit: Invalid permit length\\\");\\n            }\\n\\n            // Call permit with parsed parameters\\n            IERC20Permit(asset.assetAddress).permit(owner, spender, asset.amount, deadline, v, r, s);\\n\\n        } else {\\n            // Currently supporting only ERC20 signed approvals via ERC2612\\n            revert(\\\"MultiToken::Permit: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # BALANCE OF                                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * balanceOf\\n     * @dev Wrapping function for checking balances on various token interfaces.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param target Target address to be checked.\\n     */\\n    function balanceOf(Asset memory asset, address target) internal view returns (uint256) {\\n        if (asset.category == Category.ERC20) {\\n            return IERC20(asset.assetAddress).balanceOf(target);\\n\\n        } else if (asset.category == Category.ERC721) {\\n            return IERC721(asset.assetAddress).ownerOf(asset.id) == target ? 1 : 0;\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            return IERC1155(asset.assetAddress).balanceOf(target, asset.id);\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            return ICryptoKitties(asset.assetAddress).ownerOf(asset.id) == target ? 1 : 0;\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # APPROVE ASSET                                         *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * approveAsset\\n     * @dev Wrapping function for `approve` calls on various token interfaces.\\n     *      By using `safeApprove` for ERC20, caller can set allowance to 0 or from 0.\\n     *      Cannot set non-zero value if allowance is also non-zero.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param target Account/address that would be granted approval to `asset`.\\n     */\\n    function approveAsset(Asset memory asset, address target) internal {\\n        if (asset.category == Category.ERC20) {\\n            IERC20(asset.assetAddress).safeApprove(target, asset.amount);\\n\\n        } else if (asset.category == Category.ERC721) {\\n            IERC721(asset.assetAddress).approve(target, asset.id);\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            IERC1155(asset.assetAddress).setApprovalForAll(target, true);\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            ICryptoKitties(asset.assetAddress).approve(target, asset.id);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ASSET CHECKS                                          *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * isValid\\n     * @dev Checks that provided asset is contract, has correct format and stated category.\\n     *      Fungible tokens (ERC20) have to have id = 0.\\n     *      NFT (ERC721, CryptoKitties) tokens have to have amount = 0.\\n     *      Correct asset category is determined via ERC165.\\n     *      The check assumes, that asset contract implements only one token standard at a time.\\n     * @param asset Asset that is examined.\\n     * @return True if assets amount and id is valid in stated category.\\n     */\\n    function isValid(Asset memory asset) internal view returns (bool) {\\n        if (asset.category == Category.ERC20) {\\n            // Check format\\n            if (asset.id != 0)\\n                return false;\\n\\n            // ERC20 has optional ERC165 implementation\\n            if (asset.assetAddress.supportsERC165()) {\\n                // If ERC20 implements ERC165, it has to return true for its interface id\\n                return asset.assetAddress.supportsERC165InterfaceUnchecked(ERC20_INTERFACE_ID);\\n\\n            } else {\\n                // In case token doesn't implement ERC165, its safe to assume that provided category is correct,\\n                // because any other category have to implement ERC165.\\n\\n                // Check that asset address is contract\\n                // Tip: asset address will return code length 0, if this code is called from the asset constructor\\n                return asset.assetAddress.code.length > 0;\\n            }\\n\\n        } else if (asset.category == Category.ERC721) {\\n            // Check format\\n            if (asset.amount != 0)\\n                return false;\\n\\n            // Check it's ERC721 via ERC165\\n            return asset.assetAddress.supportsInterface(ERC721_INTERFACE_ID);\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            // Check it's ERC1155 via ERC165\\n            return asset.assetAddress.supportsInterface(ERC1155_INTERFACE_ID);\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            // Check format\\n            if (asset.amount != 0)\\n                return false;\\n\\n            // Check it's CryptoKitties via ERC165\\n            return asset.assetAddress.supportsInterface(CRYPTO_KITTIES_INTERFACE_ID);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * isSameAs\\n     * @dev Compare two assets, ignoring their amounts.\\n     * @param asset First asset to examine.\\n     * @param otherAsset Second asset to examine.\\n     * @return True if both structs represents the same asset.\\n     */\\n    function isSameAs(Asset memory asset, Asset memory otherAsset) internal pure returns (bool) {\\n        return\\n            asset.category == otherAsset.category &&\\n            asset.assetAddress == otherAsset.assetAddress &&\\n            asset.id == otherAsset.id;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/MultiToken/src/interfaces/ICryptoKitties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICryptoKitties {\\n    // Required methods\\n    function totalSupply() external view returns (uint256 total);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\n    function approve(address _to, uint256 _tokenId) external;\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    // Optional\\n    function name() external view returns (string memory name);\\n    function symbol() external view returns (string memory symbol);\\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory tokenIds);\\n    function tokenMetadata(uint256 _tokenId, string memory _preferredTransport) external view returns (string memory infoUrl);\\n\\n    // Events\\n    event Transfer(address from, address to, uint256 tokenId);\\n    event Approval(address owner, address approved, uint256 tokenId);\\n\\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\\n    // Is not part of the interface id\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/PWNErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\n\\n// Access control\\nerror CallerMissingHubTag(bytes32);\\n\\n// Loan contract\\nerror LoanDefaulted(uint40);\\nerror InvalidLoanStatus(uint256);\\nerror NonExistingLoan();\\nerror CallerNotLOANTokenHolder();\\nerror InvalidExtendedExpirationDate();\\n\\n// Invalid asset\\nerror InvalidLoanAsset();\\nerror InvalidCollateralAsset();\\n\\n// LOAN token\\nerror InvalidLoanContractCaller();\\n\\n// Vault\\nerror UnsupportedTransferFunction();\\nerror IncompleteTransfer();\\n\\n// Nonce\\nerror NonceAlreadyRevoked();\\nerror InvalidMinNonce();\\n\\n// Signature checks\\nerror InvalidSignatureLength(uint256);\\nerror InvalidSignature();\\n\\n// Offer\\nerror CallerIsNotStatedBorrower(address);\\nerror OfferExpired();\\nerror CollateralIdIsNotWhitelisted();\\n\\n// Request\\nerror CallerIsNotStatedLender(address);\\nerror RequestExpired();\\n\\n// Request & Offer\\nerror InvalidDuration();\\n\\n// Input data\\nerror InvalidInputData();\\n\\n// Config\\nerror InvalidFeeValue();\\nerror InvalidFeeCollector();\\n\"\r\n    },\r\n    \"src/config/PWNConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Config\\n * @notice Contract holding configurable values of PWN protocol.\\n * @dev Is intendet to be used as a proxy via `TransparentUpgradeableProxy`.\\n */\\ncontract PWNConfig is Ownable2Step, Initializable {\\n\\n    string internal constant VERSION = \\\"1.0\\\";\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    uint16 public constant MAX_FEE = 1000; // 10%\\n\\n    /**\\n     * @notice Protocol fee value in basis points.\\n     * @dev Value of 100 is 1% fee.\\n     */\\n    uint16 public fee;\\n\\n    /**\\n     * @notice Address that collects protocol fees.\\n     */\\n    address public feeCollector;\\n\\n    /**\\n     * @notice Mapping of a loan contract address to LOAN token metadata uri.\\n     * @dev LOAN token minted by a loan contract will return metadata uri stored in this mapping.\\n     */\\n    mapping (address => string) public loanMetadataUri;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when new fee value is set.\\n     */\\n    event FeeUpdated(uint16 oldFee, uint16 newFee);\\n\\n    /**\\n     * @dev Emitted when new fee collector address is set.\\n     */\\n    event FeeCollectorUpdated(address oldFeeCollector, address newFeeCollector);\\n\\n    /**\\n     * @dev Emitted when new LOAN token metadata uri is set.\\n     */\\n    event LoanMetadataUriUpdated(address indexed loanContract, string newUri);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor() Ownable2Step() {\\n\\n    }\\n\\n    function initialize(address _owner, uint16 _fee, address _feeCollector) initializer external {\\n        require(_owner != address(0), \\\"Owner is zero address\\\");\\n        _transferOwnership(_owner);\\n\\n        require(_feeCollector != address(0), \\\"Fee collector is zero address\\\");\\n        _setFeeCollector(_feeCollector);\\n\\n        _setFee(_fee);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # FEE MANAGEMENT                                        *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Set new protocol fee value.\\n     * @dev Only contract owner can call this function.\\n     * @param _fee New fee value in basis points. Value of 100 is 1% fee.\\n     */\\n    function setFee(uint16 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    function _setFee(uint16 _fee) private {\\n        if (_fee > MAX_FEE)\\n            revert InvalidFeeValue();\\n\\n        uint16 oldFee = fee;\\n        fee = _fee;\\n        emit FeeUpdated(oldFee, _fee);\\n    }\\n\\n    /**\\n     * @notice Set new fee collector address.\\n     * @dev Only contract owner can call this function.\\n     * @param _feeCollector New fee collector address.\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    function _setFeeCollector(address _feeCollector) private {\\n        if (_feeCollector == address(0))\\n            revert InvalidFeeCollector();\\n\\n        address oldFeeCollector = feeCollector;\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # LOAN METADATA MANAGEMENT                              *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Set a LOAN token metadata uri for a specific loan contract.\\n     * @param loanContract Address of a loan contract.\\n     * @param metadataUri New value of LOAN token metadata uri for given `loanContract`.\\n     */\\n    function setLoanMetadataUri(address loanContract, string memory metadataUri) external onlyOwner {\\n        loanMetadataUri[loanContract] = metadataUri;\\n        emit LoanMetadataUriUpdated(loanContract, metadataUri);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/hub/PWNHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable2Step.sol\\\";\\n\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Hub\\n * @notice Connects PWN contracts together into protocol via tags.\\n */\\ncontract PWNHub is Ownable2Step {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Mapping of address tags. (contract address => tag => is tagged)\\n     */\\n    mapping (address => mapping (bytes32 => bool)) private tags;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when tag is set for an address.\\n     */\\n    event TagSet(address indexed _address, bytes32 indexed tag, bool hasTag);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor() Ownable2Step() {\\n\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TAG MANAGEMENT                                        *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Set tag to an address.\\n     * @dev Tag can be added or removed via this functions. Only callable by contract owner.\\n     * @param _address Address to which a tag is set.\\n     * @param tag Tag that is set to an `_address`.\\n     * @param _hasTag Bool value if tag is added or removed.\\n     */\\n    function setTag(address _address, bytes32 tag, bool _hasTag) public onlyOwner {\\n        tags[_address][tag] = _hasTag;\\n        emit TagSet(_address, tag, _hasTag);\\n    }\\n\\n    /**\\n     * @notice Set list of tags to an address.\\n     * @dev Tags can be added or removed via this functions. Only callable by contract owner.\\n     * @param _addresses List of addresses to which tags are set.\\n     * @param _tags List of tags that are set to an `_address`.\\n     * @param _hasTag Bool value if tags are added or removed.\\n     */\\n    function setTags(address[] memory _addresses, bytes32[] memory _tags, bool _hasTag) external onlyOwner {\\n        if (_addresses.length != _tags.length)\\n            revert InvalidInputData();\\n\\n        uint256 length = _tags.length;\\n        for (uint256 i; i < length;) {\\n            setTag(_addresses[i], _tags[i], _hasTag);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TAG GETTER                                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Return if an address is associated with a tag.\\n     * @param _address Address that is examined for a `tag`.\\n     * @param tag Tag that should an `_address` be associated with.\\n     * @return True if given address has a tag.\\n     */\\n    function hasTag(address _address, bytes32 tag) external view returns (bool) {\\n        return tags[_address][tag];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/hub/PWNHubAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@pwn/hub/PWNHub.sol\\\";\\nimport \\\"@pwn/hub/PWNHubTags.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Hub Access Control\\n * @notice Implement modifiers for PWN Hub access control.\\n */\\nabstract contract PWNHubAccessControl {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    PWNHub immutable internal hub;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MODIFIERS                                             *|\\n    |*----------------------------------------------------------*/\\n\\n    modifier onlyActiveLoan() {\\n        if (hub.hasTag(msg.sender, PWNHubTags.ACTIVE_LOAN) == false)\\n            revert CallerMissingHubTag(PWNHubTags.ACTIVE_LOAN);\\n        _;\\n    }\\n\\n    modifier onlyWithTag(bytes32 tag) {\\n        if (hub.hasTag(msg.sender, tag) == false)\\n            revert CallerMissingHubTag(tag);\\n        _;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address pwnHub) {\\n        hub = PWNHub(pwnHub);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/hub/PWNHubTags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nlibrary PWNHubTags {\\n\\n    string internal constant VERSION = \\\"1.0\\\";\\n\\n    /// @dev Address can mint LOAN tokens and create LOANs via loan factory contracts.\\n    bytes32 internal constant ACTIVE_LOAN = keccak256(\\\"PWN_ACTIVE_LOAN\\\");\\n\\n    /// @dev Address can be used as a loan terms factory for creating simple loans.\\n    bytes32 internal constant SIMPLE_LOAN_TERMS_FACTORY = keccak256(\\\"PWN_SIMPLE_LOAN_TERMS_FACTORY\\\");\\n\\n    /// @dev Address can revoke loan request nonces.\\n    bytes32 internal constant LOAN_REQUEST = keccak256(\\\"PWN_LOAN_REQUEST\\\");\\n    /// @dev Address can revoke loan offer nonces.\\n    bytes32 internal constant LOAN_OFFER = keccak256(\\\"PWN_LOAN_OFFER\\\");\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/PWNVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"MultiToken/MultiToken.sol\\\";\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Vault\\n * @notice Base contract for transferring and managing collateral and loan assets in PWN protocol.\\n * @dev Loan contracts inherits PWN Vault to act as a Vault for its loan type.\\n */\\nabstract contract PWNVault is IERC721Receiver, IERC1155Receiver {\\n    using MultiToken for MultiToken.Asset;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS DEFINITIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when asset transfer happens from an `origin` address to a vault.\\n     */\\n    event VaultPull(MultiToken.Asset asset, address indexed origin);\\n\\n    /**\\n     * @dev Emitted when asset transfer happens from a vault to a `beneficiary` address.\\n     */\\n    event VaultPush(MultiToken.Asset asset, address indexed beneficiary);\\n\\n    /**\\n     * @dev Emitted when asset transfer happens from an `origin` address to a `beneficiary` address.\\n     */\\n    event VaultPushFrom(MultiToken.Asset asset, address indexed origin, address indexed beneficiary);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TRANSFER FUNCTIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * pull\\n     * @dev Function accessing an asset and pulling it INTO a vault.\\n     *      The function assumes a prior token approval was made to a vault address.\\n     * @param asset An asset construct - for a definition see { MultiToken dependency lib }.\\n     * @param origin Borrower address that is transferring collateral to Vault or repaying a loan.\\n     */\\n    function _pull(MultiToken.Asset memory asset, address origin) internal {\\n        uint256 originalBalance = asset.balanceOf(address(this));\\n\\n        asset.transferAssetFrom(origin, address(this));\\n        _checkTransfer(asset, originalBalance, address(this));\\n\\n        emit VaultPull(asset, origin);\\n    }\\n\\n    /**\\n     * push\\n     * @dev Function pushing an asset FROM a vault TO a defined recipient.\\n     *      This is used for claiming a paid back loan or a defaulted collateral, or returning collateral to a borrower.\\n     * @param asset An asset construct - for a definition see { MultiToken dependency lib }.\\n     * @param beneficiary An address of a recipient of an asset.\\n     */\\n    function _push(MultiToken.Asset memory asset, address beneficiary) internal {\\n        uint256 originalBalance = asset.balanceOf(beneficiary);\\n\\n        asset.safeTransferAssetFrom(address(this), beneficiary);\\n        _checkTransfer(asset, originalBalance, beneficiary);\\n\\n        emit VaultPush(asset, beneficiary);\\n    }\\n\\n    /**\\n     * pushFrom\\n     * @dev Function pushing an asset FROM a lender TO a borrower.\\n     *      The function assumes a prior token approval was made to a vault address.\\n     * @param asset An asset construct - for a definition see { MultiToken dependency lib }.\\n     * @param origin An address of a lender who is providing a loan asset.\\n     * @param beneficiary An address of the recipient of an asset.\\n     */\\n    function _pushFrom(MultiToken.Asset memory asset, address origin, address beneficiary) internal {\\n        uint256 originalBalance = asset.balanceOf(beneficiary);\\n\\n        asset.safeTransferAssetFrom(origin, beneficiary);\\n        _checkTransfer(asset, originalBalance, beneficiary);\\n\\n        emit VaultPushFrom(asset, origin, beneficiary);\\n    }\\n\\n    function _checkTransfer(MultiToken.Asset memory asset, uint256 originalBalance, address recipient) private view {\\n        if (originalBalance + asset.getTransferAmount() != asset.balanceOf(recipient))\\n            revert IncompleteTransfer();\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # PERMIT                                                *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * permit\\n     * @dev Function uses signed permit data to set vaults allowance for an asset.\\n     * @param asset An asset construct - for a definition see { MultiToken dependency lib }.\\n     * @param origin An address who is approving an asset.\\n     * @param permit Data about permit deadline (uint256) and permit signature (64/65 bytes).\\n     *               Deadline and signature should be pack encoded together.\\n     *               Signature can be standard (65 bytes) or compact (64 bytes) defined in EIP-2098.\\n     */\\n    function _permit(MultiToken.Asset memory asset, address origin, bytes memory permit) internal {\\n        if (permit.length > 0)\\n            asset.permit(origin, address(this), permit);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ERC721/1155 RECEIVED HOOKS                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * @return `IERC721Receiver.onERC721Received.selector` if transfer is allowed\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address /*from*/,\\n        uint256 /*tokenId*/,\\n        bytes calldata /*data*/\\n    ) override external view returns (bytes4) {\\n        if (operator != address(this))\\n            revert UnsupportedTransferFunction();\\n\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     * To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address /*from*/,\\n        uint256 /*id*/,\\n        uint256 /*value*/,\\n        bytes calldata /*data*/\\n    ) override external view returns (bytes4) {\\n        if (operator != address(this))\\n            revert UnsupportedTransferFunction();\\n\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated. To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address /*operator*/,\\n        address /*from*/,\\n        uint256[] calldata /*ids*/,\\n        uint256[] calldata /*values*/,\\n        bytes calldata /*data*/\\n    ) override external pure returns (bytes4) {\\n        revert UnsupportedTransferFunction();\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # SUPPORTED INTERFACES                                  *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external pure virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/lib/PWNFeeCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\n\\n/**\\n * @title PWN Fee Calculator\\n * @notice Library that calculates fee amount for given loan amount.\\n */\\nlibrary PWNFeeCalculator {\\n\\n    string internal constant VERSION = \\\"1.0\\\";\\n\\n    /**\\n     * @notice Compute fee amount.\\n     * @param fee Fee value in basis points. Value of 100 is 1% fee.\\n     * @param loanAmount Amount of an asset used as a loan credit.\\n     * @return feeAmount Amount of a loan asset that represents a protocol fee.\\n     * @return newLoanAmount New amount of a loan credit asset, after deducting protocol fee.\\n     */\\n    function calculateFeeAmount(uint16 fee, uint256 loanAmount) internal pure returns (uint256 feeAmount, uint256 newLoanAmount) {\\n        if (fee == 0)\\n            return (0, loanAmount);\\n\\n        unchecked {\\n            if ((loanAmount * fee) / fee == loanAmount)\\n                feeAmount = loanAmount * uint256(fee) / 1e4;\\n            else\\n                feeAmount = loanAmount / 1e4 * uint256(fee);\\n        }\\n        newLoanAmount = loanAmount - feeAmount;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/terms/PWNLOANTerms.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"MultiToken/MultiToken.sol\\\";\\n\\n\\nlibrary PWNLOANTerms {\\n\\n    /**\\n     * @notice Struct defining a simple loan terms.\\n     * @dev This struct is created by loan factories and never stored.\\n     * @param lender Address of a lender.\\n     * @param borrower Address of a borrower.\\n     * @param expiration Unix timestamp (in seconds) setting up a default date.\\n     * @param collateral Asset used as a loan collateral. For a definition see { MultiToken dependency lib }.\\n     * @param asset Asset used as a loan credit. For a definition see { MultiToken dependency lib }.\\n     * @param loanRepayAmount Amount of a loan asset to be paid back.\\n     */\\n    struct Simple {\\n        address lender;\\n        address borrower;\\n        uint40 expiration;\\n        MultiToken.Asset collateral;\\n        MultiToken.Asset asset;\\n        uint256 loanRepayAmount;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/terms/simple/factory/PWNSimpleLoanTermsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@pwn/loan/terms/PWNLOANTerms.sol\\\";\\n\\n\\n/**\\n * @title PWN Simple Loan Terms Factory Interface\\n * @notice Interface of a loan factory contract that builds a simple loan terms.\\n */\\nabstract contract PWNSimpleLoanTermsFactory {\\n\\n    uint32 public constant MIN_LOAN_DURATION = 600; // 10 min\\n\\n    /**\\n     * @notice Build a simple loan terms from given data.\\n     * @dev This function should be called only by contracts working with simple loan terms.\\n     * @param caller Caller of a create loan function on a loan contract.\\n     * @param factoryData Encoded data for a loan terms factory.\\n     * @param signature Signed loan factory data.\\n     * @return loanTerms Simple loan terms struct created from a loan factory data.\\n     */\\n    function createLOANTerms(\\n        address caller,\\n        bytes calldata factoryData,\\n        bytes calldata signature\\n    ) external virtual returns (PWNLOANTerms.Simple memory loanTerms);\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/terms/simple/loan/PWNSimpleLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"MultiToken/MultiToken.sol\\\";\\n\\nimport \\\"@pwn/config/PWNConfig.sol\\\";\\nimport \\\"@pwn/hub/PWNHub.sol\\\";\\nimport \\\"@pwn/hub/PWNHubTags.sol\\\";\\nimport \\\"@pwn/loan/lib/PWNFeeCalculator.sol\\\";\\nimport \\\"@pwn/loan/terms/PWNLOANTerms.sol\\\";\\nimport \\\"@pwn/loan/terms/simple/factory/PWNSimpleLoanTermsFactory.sol\\\";\\nimport \\\"@pwn/loan/token/IERC5646.sol\\\";\\nimport \\\"@pwn/loan/token/PWNLOAN.sol\\\";\\nimport \\\"@pwn/loan/PWNVault.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Simple Loan\\n * @notice Contract managing a simple loan in PWN protocol.\\n * @dev Acts as a vault for every loan created by this contract.\\n */\\ncontract PWNSimpleLoan is PWNVault, IERC5646, IPWNLoanMetadataProvider {\\n\\n    string internal constant VERSION = \\\"1.0\\\";\\n    uint256 public constant MAX_EXPIRATION_EXTENSION = 2_592_000; // 30 days\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    PWNHub immutable internal hub;\\n    PWNLOAN immutable internal loanToken;\\n    PWNConfig immutable internal config;\\n\\n    /**\\n     * @notice Struct defining a simple loan.\\n     * @param status 0 == none/dead || 2 == running/accepted offer/accepted request || 3 == paid back || 4 == expired.\\n     * @param borrower Address of a borrower.\\n     * @param expiration Unix timestamp (in seconds) setting up a default date.\\n     * @param loanAssetAddress Address of an asset used as a loan credit.\\n     * @param loanRepayAmount Amount of a loan asset to be paid back.\\n     * @param collateral Asset used as a loan collateral. For a definition see { MultiToken dependency lib }.\\n     */\\n    struct LOAN {\\n        uint8 status;\\n        address borrower;\\n        uint40 expiration;\\n        address loanAssetAddress;\\n        uint256 loanRepayAmount;\\n        MultiToken.Asset collateral;\\n    }\\n\\n    /**\\n     * Mapping of all LOAN data by loan id.\\n     */\\n    mapping (uint256 => LOAN) private LOANs;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when a new loan in created.\\n     */\\n    event LOANCreated(uint256 indexed loanId, PWNLOANTerms.Simple terms);\\n\\n    /**\\n     * @dev Emitted when a loan is paid back.\\n     */\\n    event LOANPaidBack(uint256 indexed loanId);\\n\\n    /**\\n     * @dev Emitted when a repaid or defaulted loan is claimed.\\n     */\\n    event LOANClaimed(uint256 indexed loanId, bool indexed defaulted);\\n\\n    /**\\n     * @dev Emitted when a LOAN token holder extends loan expiration date.\\n     */\\n    event LOANExpirationDateExtended(uint256 indexed loanId, uint40 extendedExpirationDate);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address _hub, address _loanToken, address _config) {\\n        hub = PWNHub(_hub);\\n        loanToken = PWNLOAN(_loanToken);\\n        config = PWNConfig(_config);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CREATE LOAN                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Create a new loan by minting LOAN token for lender, transferring loan asset to a borrower and a collateral to a vault.\\n     * @dev The function assumes a prior token approval to a contract address or signed permits.\\n     * @param loanTermsFactoryContract Address of a loan terms factory contract. Need to have `SIMPLE_LOAN_TERMS_FACTORY` tag in PWN Hub.\\n     * @param loanTermsFactoryData Encoded data for a loan terms factory.\\n     * @param signature Signed loan factory data. Could be empty if an offer / request has been made via on-chain transaction.\\n     * @param loanAssetPermit Permit data for a loan asset signed by a lender.\\n     * @param collateralPermit Permit data for a collateral signed by a borrower.\\n     * @return loanId Id of a newly minted LOAN token.\\n     */\\n    function createLOAN(\\n        address loanTermsFactoryContract,\\n        bytes calldata loanTermsFactoryData,\\n        bytes calldata signature,\\n        bytes calldata loanAssetPermit,\\n        bytes calldata collateralPermit\\n    ) external returns (uint256 loanId) {\\n        // Check that loan terms factory contract is tagged in PWNHub\\n        if (hub.hasTag(loanTermsFactoryContract, PWNHubTags.SIMPLE_LOAN_TERMS_FACTORY) == false)\\n            revert CallerMissingHubTag(PWNHubTags.SIMPLE_LOAN_TERMS_FACTORY);\\n\\n        // Build PWNLOANTerms.Simple by loan factory\\n        PWNLOANTerms.Simple memory loanTerms = PWNSimpleLoanTermsFactory(loanTermsFactoryContract).createLOANTerms({\\n            caller: msg.sender,\\n            factoryData: loanTermsFactoryData,\\n            signature: signature\\n        });\\n\\n        // Check loan asset validity\\n        if (MultiToken.isValid(loanTerms.asset) == false)\\n            revert InvalidLoanAsset();\\n\\n        // Check collateral validity\\n        if (MultiToken.isValid(loanTerms.collateral) == false)\\n            revert InvalidCollateralAsset();\\n\\n        // Mint LOAN token for lender\\n        loanId = loanToken.mint(loanTerms.lender);\\n\\n        // Store loan data under loan id\\n        LOAN storage loan = LOANs[loanId];\\n        loan.status = 2;\\n        loan.borrower = loanTerms.borrower;\\n        loan.expiration = loanTerms.expiration;\\n        loan.loanAssetAddress = loanTerms.asset.assetAddress;\\n        loan.loanRepayAmount = loanTerms.loanRepayAmount;\\n        loan.collateral = loanTerms.collateral;\\n\\n        emit LOANCreated(loanId, loanTerms);\\n\\n        // Transfer collateral to Vault\\n        _permit(loanTerms.collateral, loanTerms.borrower, collateralPermit);\\n        _pull(loanTerms.collateral, loanTerms.borrower);\\n\\n        // Permit spending if permit data provided\\n        _permit(loanTerms.asset, loanTerms.lender, loanAssetPermit);\\n\\n        uint16 fee = config.fee();\\n        if (fee > 0) {\\n            // Compute fee size\\n            (uint256 feeAmount, uint256 newLoanAmount) = PWNFeeCalculator.calculateFeeAmount(fee, loanTerms.asset.amount);\\n\\n            if (feeAmount > 0) {\\n                // Transfer fee amount to fee collector\\n                loanTerms.asset.amount = feeAmount;\\n                _pushFrom(loanTerms.asset, loanTerms.lender, config.feeCollector());\\n\\n                // Set new loan amount value\\n                loanTerms.asset.amount = newLoanAmount;\\n            }\\n        }\\n\\n        // Transfer loan asset to borrower\\n        _pushFrom(loanTerms.asset, loanTerms.lender, loanTerms.borrower);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # REPAY LOAN                                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Repay running loan.\\n     * @dev Any address can repay a running loan, but a collateral will be transferred to a borrower address associated with the loan.\\n     *      Repay will transfer a loan asset to a vault, waiting on a LOAN token holder to claim it.\\n     *      The function assumes a prior token approval to a contract address or a signed  permit.\\n     * @param loanId Id of a loan that is being repaid.\\n     * @param loanAssetPermit Permit data for a loan asset signed by a borrower.\\n     */\\n    function repayLOAN(\\n        uint256 loanId,\\n        bytes calldata loanAssetPermit\\n    ) external {\\n        LOAN storage loan = LOANs[loanId];\\n        uint8 status = loan.status;\\n\\n        // Check that loan is not from a different loan contract\\n        if (status == 0)\\n            revert NonExistingLoan();\\n        // Check that loan is running\\n        else if (status != 2)\\n            revert InvalidLoanStatus(status);\\n\\n        // Check that loan is not expired\\n        if (loan.expiration <= block.timestamp)\\n            revert LoanDefaulted(loan.expiration);\\n\\n        // Move loan to repaid state\\n        loan.status = 3;\\n\\n        // Transfer repaid amount of loan asset to Vault\\n        MultiToken.Asset memory repayLoanAsset = MultiToken.Asset({\\n            category: MultiToken.Category.ERC20,\\n            assetAddress: loan.loanAssetAddress,\\n            id: 0,\\n            amount: loan.loanRepayAmount\\n        });\\n\\n        _permit(repayLoanAsset, msg.sender, loanAssetPermit);\\n        _pull(repayLoanAsset, msg.sender);\\n\\n        // Transfer collateral back to borrower\\n        _push(loan.collateral, loan.borrower);\\n\\n        emit LOANPaidBack(loanId);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CLAIM LOAN                                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Claim a repaid or defaulted loan.\\n     * @dev Only a LOAN token holder can claim a repaid or defaulted loan.\\n     *      Claim will transfer the repaid loan asset or collateral to a LOAN token holder address and burn the LOAN token.\\n     * @param loanId Id of a loan that is being claimed.\\n     */\\n    function claimLOAN(uint256 loanId) external {\\n        LOAN storage loan = LOANs[loanId];\\n\\n        // Check that caller is LOAN token holder\\n        if (loanToken.ownerOf(loanId) != msg.sender)\\n            revert CallerNotLOANTokenHolder();\\n\\n        if (loan.status == 0) {\\n            revert NonExistingLoan();\\n        }\\n        // Loan has been paid back\\n        else if (loan.status == 3) {\\n            MultiToken.Asset memory loanAsset = MultiToken.Asset({\\n                category: MultiToken.Category.ERC20,\\n                assetAddress: loan.loanAssetAddress,\\n                id: 0,\\n                amount: loan.loanRepayAmount\\n            });\\n\\n            // Delete loan data & burn LOAN token before calling safe transfer\\n            _deleteLoan(loanId);\\n\\n            // Transfer repaid loan to lender\\n            _push(loanAsset, msg.sender);\\n\\n            emit LOANClaimed(loanId, false);\\n        }\\n        // Loan is running but expired\\n        else if (loan.status == 2 && loan.expiration <= block.timestamp) {\\n             MultiToken.Asset memory collateral = loan.collateral;\\n\\n            // Delete loan data & burn LOAN token before calling safe transfer\\n            _deleteLoan(loanId);\\n\\n            // Transfer collateral to lender\\n            _push(collateral, msg.sender);\\n\\n            emit LOANClaimed(loanId, true);\\n        }\\n        // Loan is in wrong state or from a different loan contract\\n        else {\\n            revert InvalidLoanStatus(loan.status);\\n        }\\n    }\\n\\n    function _deleteLoan(uint256 loanId) private {\\n        loanToken.burn(loanId);\\n        delete LOANs[loanId];\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EXTEND LOAN EXPIRATION DATE                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Enable lender to extend loans expiration date.\\n     * @dev Only LOAN token holder can call this function.\\n     *      Extending the expiration date of a repaid loan is allowed, but considered a lender mistake.\\n     *      The extended expiration date has to be in the future, be later than the current expiration date, and cannot be extending the date by more than `MAX_EXPIRATION_EXTENSION`.\\n     * @param loanId Id of a LOAN to extend its expiration date.\\n     * @param extendedExpirationDate New LOAN expiration date.\\n     */\\n    function extendLOANExpirationDate(uint256 loanId, uint40 extendedExpirationDate) external {\\n        // Check that caller is LOAN token holder\\n        // This prevents from extending non-existing loans\\n        if (loanToken.ownerOf(loanId) != msg.sender)\\n            revert CallerNotLOANTokenHolder();\\n\\n        LOAN storage loan = LOANs[loanId];\\n\\n        // Check extended expiration date\\n        if (extendedExpirationDate > uint40(block.timestamp + MAX_EXPIRATION_EXTENSION)) // to protect lender\\n            revert InvalidExtendedExpirationDate();\\n        if (extendedExpirationDate <= uint40(block.timestamp)) // have to extend expiration futher in time\\n            revert InvalidExtendedExpirationDate();\\n        if (extendedExpirationDate <= loan.expiration) // have to be later than current expiration date\\n            revert InvalidExtendedExpirationDate();\\n\\n        // Extend expiration date\\n        loan.expiration = extendedExpirationDate;\\n\\n        emit LOANExpirationDateExtended(loanId, extendedExpirationDate);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # GET LOAN                                              *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Return a LOAN data struct associated with a loan id.\\n     * @param loanId Id of a loan in question.\\n     * @return loan LOAN data struct or empty struct if the LOAN doesn't exist.\\n     */\\n    function getLOAN(uint256 loanId) external view returns (LOAN memory loan) {\\n        loan = LOANs[loanId];\\n        loan.status = _getLOANStatus(loanId);\\n    }\\n\\n    function _getLOANStatus(uint256 loanId) private view returns (uint8) {\\n        LOAN storage loan = LOANs[loanId];\\n        return (loan.status == 2 && loan.expiration <= block.timestamp) ? 4 : loan.status;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # IPWNLoanMetadataProvider                              *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice See { IPWNLoanMetadataProvider.sol }.\\n     */\\n    function loanMetadataUri() override external view returns (string memory) {\\n        return config.loanMetadataUri(address(this));\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ERC5646                                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev See {IERC5646-getStateFingerprint}.\\n     */\\n    function getStateFingerprint(uint256 tokenId) external view virtual override returns (bytes32) {\\n        LOAN storage loan = LOANs[tokenId];\\n\\n        if (loan.status == 0)\\n            return bytes32(0);\\n\\n        // The only mutable state properties are:\\n        // - status, expiration\\n        // Status is updated for expired loans based on block.timestamp.\\n        // Others don't have to be part of the state fingerprint as it does not act as a token identification.\\n        return keccak256(abi.encode(\\n            _getLOANStatus(tokenId),\\n            loan.expiration\\n        ));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/token/IERC5646.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\n/**\\n * @dev Interface of the ERC5646 standard, as defined in the https://eips.ethereum.org/EIPS/eip-5646.\\n */\\ninterface IERC5646 {\\n\\n    /**\\n     * @notice Function to return current token state fingerprint.\\n     * @param tokenId Id of a token state in question.\\n     * @return Current token state fingerprint.\\n     */\\n    function getStateFingerprint(uint256 tokenId) external view returns (bytes32);\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/token/IPWNLoanMetadataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\n/**\\n * @title PWN Loan Metadata Provider\\n * @notice Interface for a provider of a LOAN token metadata.\\n * @dev Loan contracts should implement this interface.\\n */\\ninterface IPWNLoanMetadataProvider {\\n\\n    /**\\n     * @notice Get a loan metadata uri for a LOAN token minted by this contract.\\n     * @return LOAN token metadata uri.\\n     */\\n    function loanMetadataUri() external view returns (string memory);\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/token/PWNLOAN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"@pwn/hub/PWNHubAccessControl.sol\\\";\\nimport \\\"@pwn/loan/token/IERC5646.sol\\\";\\nimport \\\"@pwn/loan/token/IPWNLoanMetadataProvider.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN LOAN token\\n * @notice A LOAN token representing a loan in PWN protocol.\\n * @dev Token doesn't hold any loan logic, just an address of a loan contract that minted the LOAN token.\\n *      PWN LOAN token is shared between all loan contracts.\\n */\\ncontract PWNLOAN is PWNHubAccessControl, IERC5646, ERC721 {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Last used LOAN id. First LOAN id is 1. This value is incremental.\\n     */\\n    uint256 public lastLoanId;\\n\\n    /**\\n     * @dev Mapping of a LOAN id to a loan contract that minted the LOAN token.\\n     */\\n    mapping (uint256 => address) public loanContract;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS DEFINITIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when a new LOAN token is minted.\\n     */\\n    event LOANMinted(uint256 indexed loanId, address indexed loanContract, address indexed owner);\\n\\n    /**\\n     * @dev Emitted when a LOAN token is burned.\\n     */\\n    event LOANBurned(uint256 indexed loanId);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address hub) PWNHubAccessControl(hub) ERC721(\\\"PWN LOAN\\\", \\\"LOAN\\\") {\\n\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TOKEN LIFECYCLE                                       *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Mint a new LOAN token.\\n     * @dev Only an address with associated `ACTIVE_LOAN` tag in PWN Hub can call this function.\\n     * @param owner Address of a LOAN token receiver.\\n     * @return loanId Id of a newly minted LOAN token.\\n     */\\n    function mint(address owner) external onlyActiveLoan returns (uint256 loanId) {\\n        loanId = ++lastLoanId;\\n        loanContract[loanId] = msg.sender;\\n        _mint(owner, loanId);\\n        emit LOANMinted(loanId, msg.sender, owner);\\n    }\\n\\n    /**\\n     * @notice Burn a LOAN token.\\n     * @dev Any address that is associated with given loan id can call this function.\\n     *      It is enabled to let deprecated loan contracts repay and claim existing loans.\\n     * @param loanId Id of a LOAN token to be burned.\\n     */\\n    function burn(uint256 loanId) external {\\n        if (loanContract[loanId] != msg.sender)\\n            revert InvalidLoanContractCaller();\\n\\n        delete loanContract[loanId];\\n        _burn(loanId);\\n        emit LOANBurned(loanId);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # METADATA                                              *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Return a LOAN token metadata uri base on a loan contract that minted the token.\\n     * @param tokenId Id of a LOAN token.\\n     * @return Metadata uri for given token id (loan id).\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        return IPWNLoanMetadataProvider(loanContract[tokenId]).loanMetadataUri();\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ERC5646                                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev See {IERC5646-getStateFingerprint}.\\n     */\\n    function getStateFingerprint(uint256 tokenId) external view virtual override returns (bytes32) {\\n        address _loanContract = loanContract[tokenId];\\n\\n        if (_loanContract == address(0))\\n            return bytes32(0);\\n\\n        return IERC5646(_loanContract).getStateFingerprint(tokenId);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ERC165                                                *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC5646).interfaceId;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@MT/=lib/MultiToken/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@pwn-test/=test/\",\r\n      \"@pwn/=src/\",\r\n      \"MultiToken/=lib/MultiToken/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CallerMissingHubTag\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotLOANTokenHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompleteTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateralAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExtendedExpirationDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLoanAsset\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidLoanStatus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"LoanDefaulted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistingLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedTransferFunction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"defaulted\",\"type\":\"bool\"}],\"name\":\"LOANClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiToken.Asset\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiToken.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"loanRepayAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PWNLOANTerms.Simple\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"LOANCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"extendedExpirationDate\",\"type\":\"uint40\"}],\"name\":\"LOANExpirationDateExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LOANPaidBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MultiToken.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"VaultPull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MultiToken.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"VaultPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MultiToken.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"VaultPushFrom\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_EXPIRATION_EXTENSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"claimLOAN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTermsFactoryContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"loanTermsFactoryData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"loanAssetPermit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"collateralPermit\",\"type\":\"bytes\"}],\"name\":\"createLOAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"extendedExpirationDate\",\"type\":\"uint40\"}],\"name\":\"extendLOANExpirationDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLOAN\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"loanAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanRepayAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiToken.Asset\",\"name\":\"collateral\",\"type\":\"tuple\"}],\"internalType\":\"struct PWNSimpleLoan.LOAN\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStateFingerprint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanMetadataUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"loanAssetPermit\",\"type\":\"bytes\"}],\"name\":\"repayLOAN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "PWNSimpleLoan", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000037807a2f031b3b44081f4b21500e5d70ebadadd50000000000000000000000004440c069272cc34b80c7b11bee657d0349ba9c2300000000000000000000000003deafc9678ab25f059df59be3b20875018e1d46", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}