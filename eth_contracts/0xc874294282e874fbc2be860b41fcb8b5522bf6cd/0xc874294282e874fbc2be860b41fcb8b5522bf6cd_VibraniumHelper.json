{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/IVibranium.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IVibranium {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalDepositedEther() external view returns (uint256);\\n\\n    function safeCollateralRate() external view returns (uint256);\\n\\n    function redemptionFee() external view returns (uint256);\\n\\n    function keeperRate() external view returns (uint256);\\n\\n    function depositedEther(address user) external view returns (uint256);\\n\\n    function getBorrowedOf(address user) external view returns (uint256);\\n\\n    function isRedemptionProvider(address user) external view returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function badCollateralRate() external view returns (uint256);\\n\\n    function burn(address onBehalfOf, uint256 amount) external;\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n    \\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferShares(\\n        address _recipient,\\n        uint256 _sharesAmount\\n    ) external returns (uint256);\\n\\n    function getSharesByMintedVUSD(\\n        uint256 _VUSDAmount\\n    ) external view returns (uint256);\\n\\n    function getMintedVUSDByShares(\\n        uint256 _sharesAmount\\n    ) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/VibraniumHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVibranium.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IStakingRewards {\\n    function rewardRate() external view returns (uint256);\\n}\\n\\ncontract VibraniumHelper {\\n    IVibranium public immutable vibranium;\\n    address public lido;\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(address _vibranium, address _lido, address _priceFeed) {\\n        vibranium = IVibranium(_vibranium);\\n        lido = _lido;\\n        priceFeed =\\n        AggregatorV3Interface(_priceFeed);\\n\\n    }\\n\\n    function getEtherPrice() public view returns (uint256) {\\n        // prettier-ignore\\n        (\\n            /* uint80 roundID */,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    function getCollateralRate(address user) public view returns (uint256) {\\n        if (vibranium.getBorrowedOf(user) == 0) return 1e22;\\n        return\\n            (vibranium.depositedEther(user) * getEtherPrice() * 1e12) /\\n            vibranium.getBorrowedOf(user);\\n    }\\n\\n    function getExcessIncomeAmount()\\n        external\\n        view\\n        returns (uint256 vusdAmount)\\n    {\\n        if (\\n            IERC20(lido).balanceOf(address(vibranium)) < vibranium.totalDepositedEther()\\n        ) {\\n            vusdAmount = 0;\\n        } else {\\n            vusdAmount =\\n                ((IERC20(lido).balanceOf(address(vibranium)) -\\n                    vibranium.totalDepositedEther()) * getEtherPrice()) /\\n                1e8;\\n        }\\n    }\\n\\n    function getOverallCollateralRate() public view returns (uint256) {\\n        return\\n            (vibranium.totalDepositedEther() * getEtherPrice() * 1e12) /\\n            vibranium.totalSupply();\\n    }\\n\\n    function getLiquidateableAmount(address user)\\n        external\\n        view\\n        returns (uint256 etherAmount, uint256 vusdAmount)\\n    {\\n        if (getCollateralRate(user) > 150 * 1e18) return (0, 0);\\n        if (\\n            getCollateralRate(user) >= 125 * 1e18 ||\\n            getOverallCollateralRate() >= 150 * 1e18\\n        ) {\\n            etherAmount = vibranium.depositedEther(user) / 2;\\n            vusdAmount = (etherAmount * getEtherPrice()) / 1e8;\\n        } else {\\n            etherAmount = vibranium.depositedEther(user);\\n            vusdAmount = (etherAmount * getEtherPrice()) / 1e8;\\n            if (getCollateralRate(user) >= 1e20) {\\n                vusdAmount = (vusdAmount * 1e20) / getCollateralRate(user);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableAmount(address user) external view returns (uint256) {\\n        if (!vibranium.isRedemptionProvider(user)) return 0;\\n        return vibranium.getBorrowedOf(user);\\n    }\\n\\n    function getRedeemableAmounts(address[] calldata users)\\n        external\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = new uint256[](users.length);\\n        for (uint256 i = 0; i < users.length; i++) {\\n            if (!vibranium.isRedemptionProvider(users[i])) amounts[i] = 0;\\n            amounts[i] = vibranium.getBorrowedOf(users[i]);\\n        }\\n    }\\n\\n    function getLiquidateFund(address user)\\n        external\\n        view\\n        returns (uint256 vusdAmount)\\n    {\\n        uint256 appro = vibranium.allowance(user, address(vibranium));\\n        if (appro == 0) return 0;\\n        uint256 bal = vibranium.balanceOf(user);\\n        vusdAmount = appro > bal ? bal : appro;\\n    }\\n\\n    function getWithdrawableAmount(address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (vibranium.getBorrowedOf(user) == 0) return vibranium.depositedEther(user);\\n        if (getCollateralRate(user) <= 160 * 1e18) return 0;\\n        return\\n            (vibranium.depositedEther(user) *\\n                (getCollateralRate(user) - 160 * 1e18)) /\\n            getCollateralRate(user);\\n    }\\n\\n    function getVusdMintableAmount(address user)\\n        external\\n        view\\n        returns (uint256 vusdAmount)\\n    {\\n        if (getCollateralRate(user) <= 160 * 1e18) return 0;\\n        return\\n            (vibranium.depositedEther(user) * getEtherPrice()) /\\n            1e6 /\\n            160 -\\n            vibranium.getBorrowedOf(user);\\n    }\\n\\n    function getStakingPoolAPR(\\n        address poolAddress,\\n        address vib,\\n        address lpToken\\n    ) external view returns (uint256 apr) {\\n        uint256 pool_lp_stake = IERC20(poolAddress).totalSupply();\\n        uint256 rewardRate = IStakingRewards(poolAddress).rewardRate();\\n        uint256 lp_vib_amount = IERC20(vib).balanceOf(lpToken);\\n        uint256 lp_total_supply = IERC20(lpToken).totalSupply();\\n        apr =\\n            (lp_total_supply * rewardRate * 86400 * 365 * 1e6) /\\n            (pool_lp_stake * lp_vib_amount * 2);\\n    }\\n\\n    function getTokenPrice(address token, address UniPool, address wethAddress) external view returns (uint256 price) {\\n        uint256 token_in_pool = IERC20(token).balanceOf(UniPool);\\n        uint256 weth_in_pool = IERC20(wethAddress).balanceOf(UniPool);\\n        price = weth_in_pool * getEtherPrice() * 1e10 / token_in_pool;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vibranium\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lido\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcessIncomeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLiquidateFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLiquidateableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOverallCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRedeemableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getRedeemableAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"getStakingPoolAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"UniPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVusdMintableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lido\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vibranium\",\"outputs\":[{\"internalType\":\"contract IVibranium\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VibraniumHelper", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001aa3745f9ecacb090e5e6e309474d411dabf27cf000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}