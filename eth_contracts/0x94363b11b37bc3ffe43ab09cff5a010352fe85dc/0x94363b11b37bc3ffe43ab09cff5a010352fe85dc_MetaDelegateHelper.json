{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/dataHelpers/MetaDelegateHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IGovernancePowerDelegationToken} from 'aave-token-v3/interfaces/IGovernancePowerDelegationToken.sol';\\nimport {IMetaDelegateHelper} from './interfaces/IMetaDelegateHelper.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/**\\n * @title MetaDelegateHelper\\n * @author BGD Labs\\n * @notice The helper contract for the batch governance power delegation across multiple voting assets\\n */\\ncontract MetaDelegateHelper is IMetaDelegateHelper {\\n  /// @inheritdoc IMetaDelegateHelper\\n  function batchMetaDelegate(\\n    MetaDelegateParams[] calldata delegateParams\\n  ) external {\\n    bool atLeastOnePassed = false;\\n\\n    for (uint256 i = 0; i < delegateParams.length; i++) {\\n      if (delegateParams[i].delegationType == DelegationType.ALL) {\\n        try\\n          delegateParams[i].underlyingAsset.metaDelegate(\\n            delegateParams[i].delegator,\\n            delegateParams[i].delegatee,\\n            delegateParams[i].deadline,\\n            delegateParams[i].v,\\n            delegateParams[i].r,\\n            delegateParams[i].s\\n          )\\n        {\\n          atLeastOnePassed = true;\\n        } catch {}\\n      } else {\\n        try\\n          delegateParams[i].underlyingAsset.metaDelegateByType(\\n            delegateParams[i].delegator,\\n            delegateParams[i].delegatee,\\n            delegateParams[i].delegationType == DelegationType.VOTING\\n              ? IGovernancePowerDelegationToken.GovernancePowerType.VOTING\\n              : IGovernancePowerDelegationToken.GovernancePowerType.PROPOSITION,\\n            delegateParams[i].deadline,\\n            delegateParams[i].v,\\n            delegateParams[i].r,\\n            delegateParams[i].s\\n          )\\n        {\\n          atLeastOnePassed = true;\\n        } catch {}\\n      }\\n    }\\n    require(atLeastOnePassed, Errors.ALL_DELEGATION_ACTIONS_FAILED);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-token-v3/src/interfaces/IGovernancePowerDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum GovernancePowerType {\\n    VOTING,\\n    PROPOSITION\\n  }\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the user which delegated governance power\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    GovernancePowerType delegationType\\n  );\\n\\n  // @dev we removed DelegatedPowerChanged event because to reconstruct the full state of the system,\\n  // is enough to have Transfer and DelegateChanged TODO: document it\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power will change\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  function delegateByType(address delegatee, GovernancePowerType delegationType) external;\\n\\n  /**\\n   * @dev delegates all the governance powers to a specific user\\n   * @param delegatee the user to which the powers will be delegated\\n   **/\\n  function delegate(address delegatee) external;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   * @return address of the specified delegatee\\n   **/\\n  function getDelegateeByType(address delegator, GovernancePowerType delegationType)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev returns delegates of an user\\n   * @param delegator the address of the delegator\\n   * @return a tuple of addresses the VOTING and PROPOSITION delegatee\\n   **/\\n  function getDelegates(address delegator)\\n    external\\n    view\\n    returns (address, address);\\n\\n  /**\\n   * @dev returns the current voting or proposition power of a user.\\n   * @param user the user\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   * @return the current voting or proposition power of a user\\n   **/\\n  function getPowerCurrent(address user, GovernancePowerType delegationType)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the current voting or proposition power of a user.\\n   * @param user the user\\n   * @return the current voting and proposition power of a user\\n   **/\\n  function getPowersCurrent(address user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who owner delegates his governance power\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function metaDelegateByType(\\n    address delegator,\\n    address delegatee,\\n    GovernancePowerType delegationType,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who delegator delegates his voting and proposition governance power\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function metaDelegate(\\n    address delegator,\\n    address delegatee,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/dataHelpers/interfaces/IMetaDelegateHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IGovernancePowerDelegationToken} from 'aave-token-v3/interfaces/IGovernancePowerDelegationToken.sol';\\n\\n/**\\n * @title IMetaDelegateHelper\\n * @author BGD Labs\\n * @notice Interface containing the methods for the batch governance power delegation across multiple voting assets\\n */\\n\\ninterface IMetaDelegateHelper {\\n  enum DelegationType {\\n    VOTING,\\n    PROPOSITION,\\n    ALL\\n  }\\n\\n  /**\\n   * @notice an object including parameters for the delegation change\\n   * @param underlyingAsset the asset the governance power of which delegator wants to delegate\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION, ALL)\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who owner delegates his governance power\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  struct MetaDelegateParams {\\n    IGovernancePowerDelegationToken underlyingAsset;\\n    DelegationType delegationType;\\n    address delegator;\\n    address delegatee;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  /**\\n   * @notice method for the batch upgrade governance power delegation across multiple voting assets with signatures\\n   * @param delegateParams an array with signatures with the user and assets to interact with\\n   */\\n  function batchMetaDelegate(MetaDelegateParams[] calldata delegateParams)\\n    external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author BGD Labs\\n * @notice Defines the error messages emitted by the different contracts of the Aave Governance V3\\n */\\nlibrary Errors {\\n  string public constant VOTING_PORTALS_COUNT_NOT_0 = '1'; // to be able to rescue voting portals count must be 0\\n  string public constant AT_LEAST_ONE_PAYLOAD = '2'; // to create a proposal, it must have at least one payload\\n  string public constant VOTING_PORTAL_NOT_APPROVED = '3'; // the voting portal used to vote on proposal must be approved\\n  string public constant PROPOSITION_POWER_IS_TOO_LOW = '4'; // proposition power of proposal creator must be equal or higher than the specified threshold for the access level\\n  string public constant PROPOSAL_NOT_IN_CREATED_STATE = '5'; // proposal should be in the CREATED state\\n  string public constant PROPOSAL_NOT_IN_ACTIVE_STATE = '6'; // proposal must be in an ACTIVE state\\n  string public constant PROPOSAL_NOT_IN_QUEUED_STATE = '7'; // proposal must be in a QUEUED state\\n  string public constant VOTING_START_COOLDOWN_PERIOD_NOT_PASSED = '8'; // to activate a proposal vote, the cool down delay must pass\\n  string public constant CALLER_NOT_A_VALID_VOTING_PORTAL = '9'; // only an allowed voting portal can queue a proposal\\n  string public constant QUEUE_COOLDOWN_PERIOD_NOT_PASSED = '10'; // to execute a proposal a cooldown delay must pass\\n  string public constant PROPOSAL_NOT_IN_THE_CORRECT_STATE = '11'; // proposal must be created but not executed yet to be able to be canceled\\n  string public constant CALLER_NOT_GOVERNANCE = '12'; // caller must be governance\\n  string public constant VOTER_ALREADY_VOTED_ON_PROPOSAL = '13'; // voter can only vote once per proposal using voting portal\\n  string public constant WRONG_MESSAGE_ORIGIN = '14'; // received message must come from registered source address, chain id, CrossChainController\\n  string public constant NO_VOTING_ASSETS = '15'; // Strategy must have voting assets\\n  string public constant PROPOSAL_VOTE_ALREADY_CREATED = '16'; // vote on proposal can only be created once\\n  string public constant INVALID_SIGNATURE = '17'; // submitted signature is not valid\\n  string public constant PROPOSAL_VOTE_NOT_FINISHED = '18'; // proposal vote must be finished\\n  string public constant PROPOSAL_VOTE_NOT_IN_ACTIVE_STATE = '19'; // proposal vote must be in active state\\n  string public constant PROPOSAL_VOTE_ALREADY_EXISTS = '20'; // proposal vote already exists\\n  string public constant VOTE_ONCE_FOR_ASSET = '21'; // an asset can only be used once per vote\\n  string public constant USER_BALANCE_DOES_NOT_EXISTS = '22'; // to vote an user must have balance in the token the user is voting with\\n  string public constant USER_VOTING_BALANCE_IS_ZERO = '23'; // to vote an user must have some balance between all the tokens selected for voting\\n  string public constant MISSING_AAVE_ROOTS = '24'; // must have AAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_ROOTS = '25'; // must have stkAAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_SLASHING_EXCHANGE_RATE = '26'; // must have stkAAVE slashing exchange rate registered to use strategy\\n  string public constant UNPROCESSED_STORAGE_ROOT = '27'; // root must be registered beforehand\\n  string public constant NOT_ENOUGH_MSG_VALUE = '28'; // method was not called with enough value to execute the call\\n  string public constant FAILED_ACTION_EXECUTION = '29'; // action failed to execute\\n  string public constant SHOULD_BE_AT_LEAST_ONE_EXECUTOR = '30'; // at least one executor is needed\\n  string public constant INVALID_EMPTY_TARGETS = '31'; // target of the payload execution must not be empty\\n  string public constant EXECUTOR_WAS_NOT_SPECIFIED_FOR_REQUESTED_ACCESS_LEVEL =\\n    '32'; // payload executor must be registered for the specified payload access level\\n  string public constant PAYLOAD_NOT_IN_QUEUED_STATE = '33'; // payload must be en the queued state\\n  string public constant TIMELOCK_NOT_FINISHED = '34'; // delay has not passed before execution can be called\\n  string public constant PAYLOAD_NOT_IN_THE_CORRECT_STATE = '35'; // payload must be created but not executed yet to be able to be canceled\\n  string public constant PAYLOAD_NOT_IN_CREATED_STATE = '36'; // payload must be in the created state\\n  string public constant MISSING_A_AAVE_ROOTS = '37'; // must have aAAVE roots registered to use strategy\\n  string public constant MISSING_PROPOSAL_BLOCK_HASH = '38'; // block hash for this proposal was not bridged before\\n  string public constant PROPOSAL_VOTE_CONFIGURATION_ALREADY_BRIDGED = '39'; // configuration for this proposal bridged already\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS = '40'; // voting portal address can't be 0x0\\n  string public constant INVALID_POWER_STRATEGY = '41'; // 0x0 is not valid as the power strategy\\n  string public constant INVALID_EXECUTOR_ADDRESS = '42'; // executor address can't be 0x0\\n  string public constant EXECUTOR_ALREADY_SET_IN_DIFFERENT_LEVEL = '43'; // executor address already being used as executor of a different level\\n  string public constant INVALID_VOTING_DURATION = '44'; // voting duration can not be bigger than the time it takes to execute a proposal\\n  string public constant VOTING_DURATION_NOT_PASSED = '45'; // at least votingDuration should have passed since voting started for a proposal to be queued\\n  string public constant INVALID_PROPOSAL_ACCESS_LEVEL = '46'; // the bridged proposal access level does not correspond with the maximum access level required by the payload\\n  string public constant PAYLOAD_NOT_CREATED_BEFORE_PROPOSAL = '47'; // payload must be created before proposal\\n  string public constant INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '48';\\n  string public constant INVALID_MESSAGE_ORIGINATOR_ADDRESS = '49';\\n  string public constant INVALID_ORIGIN_CHAIN_ID = '50';\\n  string public constant INVALID_ACTION_TARGET = '51';\\n  string public constant INVALID_ACTION_ACCESS_LEVEL = '52';\\n  string public constant INVALID_EXECUTOR_ACCESS_LEVEL = '53';\\n  string public constant INVALID_VOTING_PORTAL_CROSS_CHAIN_CONTROLLER = '54';\\n  string public constant INVALID_VOTING_PORTAL_VOTING_MACHINE = '55';\\n  string public constant INVALID_VOTING_PORTAL_GOVERNANCE = '56';\\n  string public constant INVALID_VOTING_MACHINE_CHAIN_ID = '57';\\n  string public constant G_INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '58';\\n  string public constant G_INVALID_IPFS_HASH = '59';\\n  string public constant G_INVALID_PAYLOAD_ACCESS_LEVEL = '60';\\n  string public constant G_INVALID_PAYLOADS_CONTROLLER = '61';\\n  string public constant G_INVALID_PAYLOAD_CHAIN = '62';\\n  string public constant POWER_STRATEGY_HAS_NO_TOKENS = '63'; // power strategy should at least have\\n  string public constant INVALID_VOTING_CONFIG_ACCESS_LEVEL = '64';\\n  string public constant VOTING_DURATION_TOO_SMALL = '65';\\n  string public constant NO_BRIDGED_VOTING_ASSETS = '66';\\n  string public constant INVALID_VOTER = '67';\\n  string public constant INVALID_DATA_WAREHOUSE = '68';\\n  string public constant INVALID_VOTING_MACHINE_CROSS_CHAIN_CONTROLLER = '69';\\n  string public constant INVALID_L1_VOTING_PORTAL = '70';\\n  string public constant INVALID_VOTING_PORTAL_CHAIN_ID = '71';\\n  string public constant INVALID_VOTING_STRATEGY = '72';\\n  string public constant INVALID_VOTE_CONFIGURATION_BLOCKHASH = '73';\\n  string public constant INVALID_VOTE_CONFIGURATION_VOTING_DURATION = '74';\\n  string public constant INVALID_GAS_LIMIT = '75';\\n  string public constant INVALID_VOTING_CONFIGS = '76'; // a lvl2 voting configuration must be sent to initializer\\n  string public constant INVALID_EXECUTOR_DELAY = '77';\\n  string public constant REPEATED_STRATEGY_ASSET = '78';\\n  string public constant EMPTY_ASSET_STORAGE_SLOTS = '79';\\n  string public constant REPEATED_STRATEGY_ASSET_SLOT = '80';\\n  string public constant INVALID_EXECUTION_TARGET = '81';\\n  string public constant MISSING_VOTING_CONFIGURATIONS = '82'; // voting configurations for lvl1 and lvl2 must be included on initialization\\n  string public constant INVALID_PROPOSITION_POWER = '83';\\n  string public constant INVALID_YES_THRESHOLD = '84';\\n  string public constant INVALID_YES_NO_DIFFERENTIAL = '85';\\n  string public constant ETH_TRANSFER_FAILED = '86';\\n  string public constant INVALID_INITIAL_VOTING_CONFIGS = '87'; // initial voting configurations can not be of the same level\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS_IN_VOTING_MACHINE = '88';\\n  string public constant INVALID_VOTING_PORTAL_OWNER = '89';\\n  string public constant CANCELLATION_FEE_REDEEM_FAILED = '90'; // cancellation fee was not able to be redeemed\\n  string public constant INVALID_CANCELLATION_FEE_COLLECTOR = '91'; // collector can not be address 0\\n  string public constant INVALID_CANCELLATION_FEE_SENT = '92'; // cancellation fee sent does not match the needed amount\\n  string public constant CANCELLATION_FEE_ALREADY_REDEEMED = '93'; // cancellation fee already redeemed\\n  string public constant INVALID_STATE_TO_REDEEM_CANCELLATION_FEE = '94'; // proposal state is not a valid state to redeem cancellation fee\\n  string public constant MISSING_REPRESENTATION_ROOTS = '95'; // to represent a voter the representation roots need to be registered\\n  string public constant CALLER_IS_NOT_VOTER_REPRESENTATIVE = '96'; // to represent a voter, caller must be the stored representative\\n  string public constant VM_INVALID_GOVERNANCE_ADDRESS = '97'; // governance address can not be 0\\n  string public constant ALL_DELEGATION_ACTIONS_FAILED = '98'; // all meta delegation actions failed on MetaDelegateHelper\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solidity-utils/=lib/solidity-utils/src/\",\r\n      \"aave-crosschain-infra/=lib/aave-crosschain-infra/src/\",\r\n      \"aave-token-v3/=lib/aave-token-v3/src/\",\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"@openzeppelin/=lib/aave-crosschain-infra/lib/openzeppelin-contracts/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"aave-token-v2/=lib/aave-token-v3/lib/aave-token-v2/contracts/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hyperlane-monorepo/=lib/aave-crosschain-infra/lib/hyperlane-monorepo/\",\r\n      \"nitro-contracts/=lib/aave-crosschain-infra/lib/nitro-contracts/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solidity-examples/=lib/aave-crosschain-infra/lib/solidity-examples/contracts/\",\r\n      \"aave-crosschain-infra-scripts/=lib/aave-crosschain-infra/scripts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IGovernancePowerDelegationToken\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"enum IMetaDelegateHelper.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMetaDelegateHelper.MetaDelegateParams[]\",\"name\":\"delegateParams\",\"type\":\"tuple[]\"}],\"name\":\"batchMetaDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaDelegateHelper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}