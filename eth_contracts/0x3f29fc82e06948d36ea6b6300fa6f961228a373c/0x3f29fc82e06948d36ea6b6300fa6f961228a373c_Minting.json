{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Minting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IUniswapV2Pair} from \\\"./interface/IUniswapV2Pair.sol\\\";\\nimport {IUniswapV2Router} from \\\"./interface/IUniswapV2Router.sol\\\";\\nimport {INoFomo} from \\\"./interface/INoFomo.sol\\\";\\nimport {INoFomoNFT} from \\\"./interface/INoFomoNFT.sol\\\";\\nimport {IFomosPrizePool} from \\\"./interface/IFomosPrizePool.sol\\\";\\nimport {IFomosStaking} from \\\"./interface/IFomosStaking.sol\\\";\\n\\ncontract Minting is Ownable, ReentrancyGuard {\\n    uint256 public currentStoredBlock;\\n    uint256 public immutable BLOCK_INTERVAL = 150;\\n\\n    IUniswapV2Pair public unfomosTokenpair;\\n    IUniswapV2Router public uniswapV2Router;\\n\\n    address public governAddress;\\n    address public stakingPool;\\n    address public fomoPrizePool;\\n    INoFomo public nofomoToken;\\n    INoFomoNFT public nofomoNFT;\\n    address public invationAddress;\\n\\n    uint256 public currentPeriodId;\\n    // periodId => user => tokenIds\\n    mapping(uint256 => mapping(address => uint256[])) public mintedNFTs;\\n    // periodId => total minted\\n    mapping(uint256 => uint256) public periodIdToTotalMinted;\\n    mapping(uint256 => uint256) public periodIdToClaimAmount;\\n    mapping(uint256 => uint256) public periodIdToStartTokenId;\\n    mapping(address => uint256) public claimTokenRecord;\\n\\n    bool public isMinting = true;\\n\\n    uint256 public changeTime = 1752768000;\\n\\n    constructor(\\n        address _goveranceAddress,\\n        address _nofomoToken,\\n        address _nofomoNFT,\\n        address _stakingPool,\\n        uint256 _startBlockHeight\\n    ) Ownable(msg.sender) {\\n        governAddress = _goveranceAddress;\\n        nofomoToken = INoFomo(_nofomoToken);\\n        nofomoNFT = INoFomoNFT(_nofomoNFT);\\n        stakingPool = _stakingPool;\\n        currentStoredBlock = _startBlockHeight;\\n    }\\n\\n    modifier flushCycle() {\\n        if (isMinting && block.number > currentStoredBlock + BLOCK_INTERVAL) {\\n            uint256 periodLength = (block.number - currentStoredBlock) / 150;\\n\\n            if (periodIdToTotalMinted[currentPeriodId] > 0) {\\n                uint256 mintPrice;\\n                if (block.timestamp < changeTime) {\\n                    mintPrice = 0.02 ether;\\n                } else {\\n                    mintPrice = 0.002 ether;\\n                }\\n                uint256 totalMintAmount = periodIdToTotalMinted[currentPeriodId];\\n                totalMintAmount = totalMintAmount - 1 > 0 ? totalMintAmount - 1 : 1;\\n                uint256 mintedAmountInEther = totalMintAmount * mintPrice;\\n                // 90% add to LP\\n                addNoFomosLP((mintedAmountInEther * 9) / 10);\\n\\n                // transfer 10% received amount to govern address\\n                uint256 goverancePeriodReceivedAmount = mintedAmountInEther / 10;\\n\\n                (bool sent,) = address(governAddress).call{value: goverancePeriodReceivedAmount}(\\\"\\\");\\n                require(sent, \\\"Failed to send Ether to govern address\\\");\\n\\n                uint256 distributionAmount = nofomoToken.mint();\\n\\n                periodIdToClaimAmount[currentPeriodId] = (distributionAmount * 7) / 10 / (totalMintAmount + 1);\\n                nofomoToken.transfer(fomoPrizePool, (distributionAmount * 2) / 10);\\n                nofomoToken.transfer(stakingPool, (distributionAmount * 1) / 10);\\n\\n                IFomosStaking(stakingPool).updateCycle(currentPeriodId, (distributionAmount * 1) / 10);\\n            }\\n\\n            if (periodLength > 1 && currentPeriodId > 0) {\\n                IFomosPrizePool(fomoPrizePool).updateTokenInMinting();\\n            }\\n            currentPeriodId += periodLength;\\n            currentStoredBlock += periodLength * BLOCK_INTERVAL;\\n        }\\n        _;\\n    }\\n\\n    function mintNoFomos() external payable flushCycle nonReentrant {\\n        uint256 mintPrice;\\n        if (block.timestamp < changeTime) {\\n            mintPrice = 0.02 ether;\\n        } else {\\n            mintPrice = 0.002 ether;\\n        }\\n        require(msg.value > 0 && msg.value % mintPrice == 0 && msg.value <= 1 ether, \\\"FomosToken: invalid amount\\\");\\n        require(block.number >= currentStoredBlock, \\\"Minting not started\\\");\\n        require(isMinting, \\\"FomosToken: mint ended\\\");\\n        uint256 amount = msg.value / mintPrice;\\n\\n        uint256[] memory tokenIds = nofomoNFT.mint(msg.sender, amount, currentPeriodId);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            mintedNFTs[currentPeriodId][msg.sender].push(tokenIds[i]);\\n        }\\n        if (periodIdToTotalMinted[currentPeriodId] == 0) {\\n            periodIdToStartTokenId[currentPeriodId] = tokenIds[0];\\n            uint256 incentiveTokenId = nofomoNFT.mint(msg.sender, 1, currentPeriodId)[0];\\n            mintedNFTs[currentPeriodId][msg.sender].push(incentiveTokenId);\\n            periodIdToTotalMinted[currentPeriodId] += amount + 1;\\n        } else {\\n            periodIdToTotalMinted[currentPeriodId] += amount;\\n        }\\n    }\\n\\n    function mintByInvitation(address receipt, uint256 amount) external {\\n        require(msg.sender == invationAddress, \\\"FomosToken: invalid invation address\\\");\\n        require(amount > 0, \\\"FomosToken: invalid amount\\\");\\n        require(isMinting, \\\"FomosToken: mint ended\\\");\\n        if (block.number > currentStoredBlock + BLOCK_INTERVAL) {\\n            revert(\\\"OUT OF CYCLE\\\");\\n        }\\n        uint256[] memory tokenIds = nofomoNFT.mint(receipt, amount, currentPeriodId);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            mintedNFTs[currentPeriodId][receipt].push(tokenIds[i]);\\n        }\\n        periodIdToTotalMinted[currentPeriodId] += amount;\\n    }\\n\\n    function addNoFomosLP(uint256 lpEtherAmount) internal {\\n        uint112 reserveWETH;\\n        uint112 reserveNofomoToken;\\n\\n        if (unfomosTokenpair.token0() == address(nofomoToken)) {\\n            (reserveNofomoToken, reserveWETH,) = IUniswapV2Pair(unfomosTokenpair).getReserves();\\n        } else {\\n            (reserveWETH, reserveNofomoToken,) = IUniswapV2Pair(unfomosTokenpair).getReserves();\\n        }\\n\\n        // use 1.01 for fully slippage protection\\n        uint256 amountTokenDesired = (uniswapV2Router.quote(lpEtherAmount, reserveWETH, reserveNofomoToken) * 101) / 100;\\n\\n        require(nofomoToken.approve(address(uniswapV2Router), amountTokenDesired), \\\"approve nofomo token failed\\\");\\n        require(nofomoToken.liquidityPoolMint(amountTokenDesired), \\\"FomosToken: liquidity pool mint failed\\\");\\n\\n        (uint256 amountToken, uint256 amountETH, uint256 liquidity) = uniswapV2Router.addLiquidityETH{\\n            value: lpEtherAmount\\n        }(address(nofomoToken), amountTokenDesired, 0, lpEtherAmount, address(1), block.timestamp + 1000);\\n    }\\n\\n    function getClaimTokenAmount(address receipt) external view returns (uint256) {\\n        uint256 claimAmount = 0;\\n        uint256 startPeriodId = claimTokenRecord[receipt];\\n        for (uint256 i = startPeriodId; i < currentPeriodId; i++) {\\n            uint256[] memory tokenIds = mintedNFTs[i][receipt];\\n            claimAmount += periodIdToClaimAmount[i] * tokenIds.length;\\n        }\\n        return claimAmount;\\n    }\\n\\n    function claimNoFomosToken() external {\\n        uint256 claimAmount = 0;\\n        uint256 startPeriodId = claimTokenRecord[msg.sender];\\n        for (uint256 i = startPeriodId; i < currentPeriodId; i++) {\\n            uint256[] memory tokenIds = mintedNFTs[i][msg.sender];\\n            claimAmount += periodIdToClaimAmount[i] * tokenIds.length;\\n        }\\n        claimTokenRecord[msg.sender] = currentPeriodId;\\n        require(claimAmount > 0, \\\"FomosToken: no claimable amount\\\");\\n        require(nofomoToken.transfer(msg.sender, claimAmount), \\\"FomosToken: transfer failed\\\");\\n    }\\n\\n    function setUnfomoTokenPair(address _unfomoTokenPair) external onlyOwner {\\n        require(_unfomoTokenPair != address(0), \\\"FomosToken: unfomoTokenPair is the zero address\\\");\\n        unfomosTokenpair = IUniswapV2Pair(_unfomoTokenPair);\\n    }\\n\\n    function setUniswapV2Router(address _uniswapV2Router) external onlyOwner {\\n        require(_uniswapV2Router != address(0), \\\"FomosToken: uniswapV2Router is the zero address\\\");\\n        uniswapV2Router = IUniswapV2Router(_uniswapV2Router);\\n    }\\n\\n    function setFomosPrizePool(address _fomosPrizePool) external onlyOwner {\\n        require(_fomosPrizePool != address(0), \\\"FomosToken: fomosPrizePool is the zero address\\\");\\n        fomoPrizePool = _fomosPrizePool;\\n    }\\n\\n    function setInvitationAddress(address _invationAddress) external onlyOwner {\\n        require(_invationAddress != address(0), \\\"FomosToken: invationAddress is the zero address\\\");\\n        invationAddress = _invationAddress;\\n    }\\n\\n    function setFomosStakingPool(address _stakingPool) external onlyOwner {\\n        require(_stakingPool != address(0), \\\"FomosToken: stakingPool is the zero address\\\");\\n        stakingPool = _stakingPool;\\n    }\\n\\n    function changeMintingStatus() public onlyOwner {\\n        isMinting = !isMinting;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interface/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\\n\"\r\n    },\r\n    \"src/interface/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IUniswapV2Router {\\n    function WETH() external pure returns (address);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountOut);\\n\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"src/interface/INoFomo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface INoFomo {\\n    function mint() external returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function liquidityPoolMint(uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interface/INoFomoNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface INoFomoNFT {\\n    function mint(address to, uint256 amount, uint256 periodId) external returns (uint256[] memory tokenIds);\\n\\n    function getPeriodIdByTokenId(uint256 tokenId) external returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external returns (address);\\n\\n    function tokenId() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interface/IFomosPrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IFomosPrizePool {\\n    function updateTokenInMinting() external;\\n\\n    function endMintingPeriod(uint256 _currentPeriodId, uint256 _currentStordBlock, address _lastMinter) external;\\n}\\n\"\r\n    },\r\n    \"src/interface/IFomosStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IFomosStaking {\\n    function updateCycle(uint256 _periodId, uint256 distributionAmount) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_goveranceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nofomoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nofomoNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlockHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNoFomosToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTokenRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStoredBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoPrizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"getClaimTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintByInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNoFomos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nofomoNFT\",\"outputs\":[{\"internalType\":\"contract INoFomoNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nofomoToken\",\"outputs\":[{\"internalType\":\"contract INoFomo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodIdToClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodIdToStartTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodIdToTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fomosPrizePool\",\"type\":\"address\"}],\"name\":\"setFomosPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"setFomosStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invationAddress\",\"type\":\"address\"}],\"name\":\"setInvitationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unfomoTokenPair\",\"type\":\"address\"}],\"name\":\"setUnfomoTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfomosTokenpair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Minting", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000412e316e8b5642d31701965a3e396292019e4c28000000000000000000000000aac54007694b03c11e87e8202653d11dc81119220000000000000000000000004f84562970b6e2de0c036b8b300dcf81de8f9bc80000000000000000000000002dc0e33c29af2cae596fed1edab8c7ba6fcd970d0000000000000000000000000000000000000000000000000000000001279010", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}