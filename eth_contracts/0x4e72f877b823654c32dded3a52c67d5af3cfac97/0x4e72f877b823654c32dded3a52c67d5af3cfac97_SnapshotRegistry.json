{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/SnapshotRegistry/SnapshotRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"openzeppelin-contracts/access/Ownable.sol\\\";\\n\\n/// @title SnapshotRegistry\\n/// @custom:security-contact security@euler.xyz\\n/// @author Euler Labs (https://www.eulerlabs.com/)\\n/// @notice Revokeable append-only registry of addresses.\\ncontract SnapshotRegistry is Ownable {\\n    struct Entry {\\n        /// @notice The timestamp when the address was added.\\n        uint128 addedAt;\\n        /// @notice The timestamp when the address was revoked.\\n        uint128 revokedAt;\\n    }\\n\\n    /// @notice List of addresses by their base and quote asset.\\n    /// @dev The keys are lexicographically sorted (asset0 < asset1).\\n    mapping(address asset0 => mapping(address asset1 => address[])) internal map;\\n\\n    /// @notice Addresses added to the registry.\\n    mapping(address => Entry) public entries;\\n\\n    /// @notice An address was added to the registry.\\n    /// @param element The address added.\\n    /// @param asset0 The smaller address out of (base, quote).\\n    /// @param asset1 The larger address out of (base, quote).\\n    /// @param addedAt The timestamp when the address was added.\\n    event Added(address indexed element, address indexed asset0, address indexed asset1, uint256 addedAt);\\n    /// @notice An address was revoked from the registry.\\n    /// @param element The address revoked.\\n    /// @param revokedAt The timestamp when the address was revoked.\\n    event Revoked(address indexed element, uint256 revokedAt);\\n\\n    /// @notice The address cannot be added because it already exists in the registry.\\n    error Registry_AlreadyAdded();\\n    /// @notice The address cannot be revoked because it does not exist in the registry.\\n    error Registry_NotAdded();\\n    /// @notice The address cannot be revoked because it was already revoked from the registry.\\n    error Registry_AlreadyRevoked();\\n\\n    /// @notice Deploy SnapshotRegistry.\\n    /// @param _owner The address of the owner.\\n    constructor(address _owner) Ownable(_owner) {}\\n\\n    /// @notice Adds an address to the registry.\\n    /// @param element The address to add.\\n    /// @param base The corresponding base asset.\\n    /// @param quote The corresponding quote asset.\\n    /// @dev Only callable by the owner.\\n    function add(address element, address base, address quote) external onlyOwner {\\n        Entry storage entry = entries[element];\\n        if (entry.addedAt != 0) revert Registry_AlreadyAdded();\\n        entry.addedAt = uint128(block.timestamp);\\n\\n        (address asset0, address asset1) = _sort(base, quote);\\n        map[asset0][asset1].push(element);\\n\\n        emit Added(element, asset0, asset1, block.timestamp);\\n    }\\n\\n    /// @notice Revokes an address from the registry.\\n    /// @param element The address to revoke.\\n    /// @dev Only callable by the owner.\\n    function revoke(address element) external onlyOwner {\\n        Entry storage entry = entries[element];\\n        if (entry.addedAt == 0) revert Registry_NotAdded();\\n        if (entry.revokedAt != 0) revert Registry_AlreadyRevoked();\\n        entry.revokedAt = uint128(block.timestamp);\\n        emit Revoked(element, block.timestamp);\\n    }\\n\\n    /// @notice Returns the all valid addresses for a given base and quote.\\n    /// @param base The address of the base asset.\\n    /// @param quote The address of the quote asset.\\n    /// @param snapshotTime The timestamp to check.\\n    /// @dev Order of base and quote does not matter.\\n    /// @return All addresses for base and quote valid at `snapshotTime`.\\n    function getValidAddresses(address base, address quote, uint256 snapshotTime)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        (address asset0, address asset1) = _sort(base, quote);\\n        address[] memory elements = map[asset0][asset1];\\n        address[] memory validElements = new address[](elements.length);\\n\\n        uint256 numValid = 0;\\n        for (uint256 i = 0; i < elements.length; ++i) {\\n            address element = elements[i];\\n            if (isValid(element, snapshotTime)) {\\n                validElements[numValid++] = element;\\n            }\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // update the length\\n            mstore(validElements, numValid)\\n        }\\n        return validElements;\\n    }\\n\\n    /// @notice Returns whether an address was valid at a point in time.\\n    /// @param element The address to check.\\n    /// @param snapshotTime The timestamp to check.\\n    /// @dev Returns false if:\\n    /// - address was never added,\\n    /// - address was added after the timestamp,\\n    /// - address was revoked before or at the timestamp.\\n    /// @return Whether `element` was valid at `snapshotTime`.\\n    function isValid(address element, uint256 snapshotTime) public view returns (bool) {\\n        uint256 addedAt = entries[element].addedAt;\\n        uint256 revokedAt = entries[element].revokedAt;\\n\\n        if (addedAt == 0 || addedAt > snapshotTime) return false;\\n        if (revokedAt != 0 && revokedAt <= snapshotTime) return false;\\n        return true;\\n    }\\n\\n    /// @notice Lexicographically sort two addresses.\\n    /// @param assetA One of the assets in the pair.\\n    /// @param assetB The other asset in the pair.\\n    /// @return The address first in lexicographic order.\\n    /// @return The address second in lexicographic order.\\n    function _sort(address assetA, address assetB) internal pure returns (address, address) {\\n        return assetA < assetB ? (assetA, assetB) : (assetB, assetA);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\r\n      \"evc/=lib/ethereum-vault-connector/src/\",\r\n      \"evk/=lib/euler-vault-kit/src/\",\r\n      \"evk-test/=lib/euler-vault-kit/test/\",\r\n      \"euler-price-oracle/=lib/euler-price-oracle/src/\",\r\n      \"euler-price-oracle-test/=lib/euler-price-oracle/test/\",\r\n      \"fee-flow/=lib/fee-flow/src/\",\r\n      \"reward-streams/=lib/reward-streams/src/\",\r\n      \"@openzeppelin/contracts/utils/math/=lib/euler-price-oracle/lib/openzeppelin-contracts/contracts/utils/math/\",\r\n      \"@chainlink/=lib/euler-price-oracle/node_modules/@chainlink/\",\r\n      \"@eth-optimism/=lib/euler-price-oracle/node_modules/@eth-optimism/contracts/\",\r\n      \"@pyth/=lib/euler-price-oracle/lib/pyth-sdk-solidity/\",\r\n      \"@redstone-finance/=lib/euler-price-oracle/node_modules/@redstone-finance/\",\r\n      \"@redstone/evm-connector/=lib/euler-price-oracle/lib/redstone-oracles-monorepo/packages/evm-connector/contracts/\",\r\n      \"@solady/=lib/euler-price-oracle/lib/solady/src/\",\r\n      \"@uniswap/v3-core/=lib/euler-price-oracle/lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/\",\r\n      \"ds-test/=lib/fee-flow/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"euler-vault-kit/=lib/euler-vault-kit/src/\",\r\n      \"forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\r\n      \"openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\r\n      \"permit2/=lib/euler-vault-kit/lib/permit2/\",\r\n      \"pyth-sdk-solidity/=lib/euler-price-oracle/lib/pyth-sdk-solidity/\",\r\n      \"redstone-oracles-monorepo/=lib/euler-price-oracle/lib/\",\r\n      \"solady/=lib/euler-price-oracle/lib/solady/src/\",\r\n      \"solmate/=lib/fee-flow/lib/solmate/src/\",\r\n      \"v3-core/=lib/euler-price-oracle/lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"cancun\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Registry_AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Registry_AlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Registry_NotAdded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokedAt\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"addedAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"revokedAt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"}],\"name\":\"getValidAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SnapshotRegistry", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000ee009faf00cf54c1b4387829af7a8dc5f0c8c8c5", "EVMVersion": "cancun", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}