{"SourceCode": "pragma solidity 0.8.26;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract ChefFunSplitter is Ownable {\r\n    \r\n    address public incubatorAddress;\r\n    address public projectOwnerAddress;\r\n    address public marketingAddress;\r\n\r\n    address public tokenAddress;\r\n\r\n    IDexRouter immutable public dexRouter;\r\n\r\n    uint256 public constant FEE_DIVISOR = 10000;\r\n\r\n    uint256 public minEthToConvert = 0.4 ether;\r\n\r\n    event BuyBackAndBurn(uint256 ethAmount, uint256 tokenAmount, uint256 totalBurned);\r\n\r\n    struct DistributionPercentages {\r\n        uint24 incubatorPerc;\r\n        uint24 projectOwnerPerc;\r\n        uint24 marketingPerc;\r\n        uint24 buybackPerc;\r\n    }\r\n\r\n    DistributionPercentages public distributionPercs;\r\n\r\n    constructor(){\r\n        address _v2Router;\r\n        if(block.chainid == 1){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else if(block.chainid == 5){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else if(block.chainid == 97){\r\n            _v2Router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\r\n        } else if(block.chainid == 42161){\r\n            _v2Router = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\r\n        } else if(block.chainid == 8453){ // BASE\r\n            _v2Router = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24;\r\n        } else if(block.chainid == 11155111) { // Sepolia Custom V2 router\r\n            _v2Router = 0xa3D89E5B9C7a863BF4535F349Bc5619ABe72fb09;\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n        dexRouter = IDexRouter(_v2Router);\r\n        incubatorAddress = msg.sender;\r\n        projectOwnerAddress = msg.sender;\r\n        marketingAddress = msg.sender;\r\n\r\n        distributionPercs.incubatorPerc = 2333;\r\n        distributionPercs.projectOwnerPerc = 2333;\r\n        distributionPercs.marketingPerc = 667;\r\n        distributionPercs.buybackPerc = 4667;\r\n        require(distributionPercs.incubatorPerc + distributionPercs.projectOwnerPerc + distributionPercs.marketingPerc + distributionPercs.buybackPerc == FEE_DIVISOR, \"Must equal 100%\");\r\n    }\r\n    \r\n    receive() external payable {\r\n        distributeETH();\r\n    }\r\n\r\n    function updateIncubatorAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"cannot set to 0 address\");\r\n        incubatorAddress = _address;\r\n    }\r\n\r\n    function updateProjectOwnerAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"cannot set to 0 address\");\r\n        projectOwnerAddress = _address;\r\n    }\r\n\r\n    function updateMarketingAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"cannot set to 0 address\");\r\n        marketingAddress = _address;\r\n    }\r\n\r\n    function updateTokenAddress(address _address) external onlyOwner {\r\n        tokenAddress = _address;\r\n    }\r\n\r\n    function updateMinEthToConvert(uint256 _minEthToConvertInwei) external onlyOwner {\r\n        minEthToConvert = _minEthToConvertInwei;\r\n    }\r\n\r\n    function updateDistribution(uint24 _incubator, uint24 _projectOwner, uint24 _marketing, uint24 _buyback) external onlyOwner {\r\n        DistributionPercentages memory distributionPercsMem;\r\n        distributionPercsMem.incubatorPerc = _incubator;\r\n        distributionPercsMem.projectOwnerPerc = _projectOwner;\r\n        distributionPercsMem.marketingPerc = _marketing;\r\n        distributionPercsMem.buybackPerc = _buyback;\r\n\r\n        require(distributionPercsMem.incubatorPerc + distributionPercsMem.projectOwnerPerc + distributionPercsMem.marketingPerc + distributionPercsMem.buybackPerc == FEE_DIVISOR, \"Must equal 100%\");\r\n        distributionPercs = distributionPercsMem;\r\n    }\r\n    \r\n    function distributeETH() internal {\r\n        DistributionPercentages memory distributionPercsMem = distributionPercs;\r\n        uint256 balance = address(this).balance;\r\n        uint256 incubatorAmount = balance * distributionPercsMem.incubatorPerc / FEE_DIVISOR;\r\n        uint256 projectOwnerAmount = balance * distributionPercsMem.projectOwnerPerc / FEE_DIVISOR;\r\n        uint256 marketingAmount = balance * distributionPercsMem.marketingPerc / FEE_DIVISOR;\r\n        \r\n        bool success;\r\n\r\n        if(incubatorAmount > 0){\r\n            (success,) = payable(incubatorAddress).call{value: incubatorAmount}(\"\");\r\n        }\r\n\r\n        if(projectOwnerAmount > 0){\r\n            (success,) = payable(projectOwnerAddress).call{value: projectOwnerAmount}(\"\");\r\n        }\r\n\r\n        if(marketingAmount > 0){\r\n            (success,) = payable(marketingAddress).call{value: marketingAmount}(\"\");\r\n        }\r\n\r\n        uint256 ethAmount = address(this).balance;\r\n\r\n        if(tokenAddress != address(0) && ethAmount >= minEthToConvert){\r\n            uint256 initialBalance = IERC20(tokenAddress).balanceOf(address(0xdead));\r\n            \r\n            swapEthForCFUN(ethAmount, 1);\r\n            uint256 totalBurned = IERC20(tokenAddress).balanceOf(address(0xdead));\r\n            uint256 deltaBalance = totalBurned - initialBalance;\r\n            emit BuyBackAndBurn(ethAmount, deltaBalance, totalBurned);\r\n        }\r\n    }\r\n\r\n    function buyBackAndBurnManually(uint256 amountOutMin) external payable {\r\n        require(tokenAddress != address(0), \"Token not active yet\");\r\n\r\n        uint256 initialBalance = IERC20(tokenAddress).balanceOf(address(0xdead));\r\n        \r\n        swapEthForCFUN(msg.value, amountOutMin);\r\n        uint256 totalBurned = IERC20(tokenAddress).balanceOf(address(0xdead));\r\n        uint256 deltaBalance = totalBurned - initialBalance;\r\n        emit BuyBackAndBurn(msg.value, deltaBalance, totalBurned);\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function swapEthForCFUN(uint256 amountInWei, uint256 amountOutMin) private {\r\n        // generate the uniswap pair path of weth -> eth\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(tokenAddress);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}(\r\n            amountOutMin, // accept any amount of Ethereum\r\n            path,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"}],\"name\":\"BuyBackAndBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"buyBackAndBurnManually\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPercs\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"incubatorPerc\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"projectOwnerPerc\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"marketingPerc\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"buybackPerc\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incubatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthToConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_incubator\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_projectOwner\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_marketing\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_buyback\",\"type\":\"uint24\"}],\"name\":\"updateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateIncubatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minEthToConvertInwei\",\"type\":\"uint256\"}],\"name\":\"updateMinEthToConvert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateProjectOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ChefFunSplitter", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef588edb66899818a9f5ac9c1a6023f5ab263ecf510c510be34dda4bdd6ba801"}