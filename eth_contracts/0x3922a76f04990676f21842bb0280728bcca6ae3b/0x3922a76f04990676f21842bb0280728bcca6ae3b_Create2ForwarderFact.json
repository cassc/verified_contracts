{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/forwarder/Create2ForwarderFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { CheckoutPoolInterface } from \\\"../interfaces/CheckoutPoolInterface.sol\\\";\\nimport {\\n    Create2ForwarderInterface\\n} from \\\"../interfaces/Create2ForwarderInterface.sol\\\";\\nimport {\\n    Create2ForwarderFactoryInterface\\n} from \\\"../interfaces/Create2ForwarderFactoryInterface.sol\\\";\\nimport { CheckoutState } from \\\"../interfaces/CheckoutPoolInterface.sol\\\";\\nimport { WETH9Interface } from \\\"../interfaces/WETH9Interface.sol\\\";\\nimport { Create2ForwarderImpl } from \\\"../forwarder/Create2ForwarderImpl.sol\\\";\\nimport { Create2ForwarderProxy } from \\\"./Create2ForwarderProxy.sol\\\";\\n\\n/**\\n * @title Create2ForwarderFactory\\n * @author Fun.xyz\\n *\\n * @notice Factory for \u201ccounterfactual\u201d forwarder contracts for the Checkout Pools protocol.\\n *\\n *  A forwarder contract is created for each checkout operation executed by the protocol.\\n *  It is the entry point for funds into the protocol.\\n *\\n *  Before the forwarder contract is deployed, its CREATE2 address (the \u201cdeposit address\u201d)\\n *  is calculated, so that the contract can be deployed only as needed, after funds have\\n *  been deposited.\\n *\\n *  As a gas optimization, each forwarder contract is deployed as a proxy. All of the proxy\\n *  contracts reference the same implementation logic, which is a constant on the factory contract.\\n *\\n *  As a gas optimization, checkout parameters that are not expected to change (often) are\\n *  stored as constants on the factory contract. Parameters that do not need to be stored\\n *  on-chain (e.g. the full user operation) are expected to be stored off-chain by the liquidity\\n *  provider that is responsible for executing the checkout.\\n *\\n *  Constants (same for all forwarders created by the factory).\\n *    - source chain\\n *    - guardian address\\n *    - CheckoutPools contract address (corresponds to a liquidity provider)\\n *    - wrapped native token address\\n *\\n *  On-chain configuration (different for each forwarder / checkout operation)\\n *    - user op hash\\n *    - target chain\\n *    - target asset and amount\\n *    - source asset and amount\\n *    - expiration timestamp\\n *    - salt (not stored)\\n *\\n *  Off-chain configuration\\n *    - user op\\n */\\ncontract Create2ForwarderFactory is Create2ForwarderFactoryInterface {\\n    error ErrorCreatingProxy();\\n\\n    Create2ForwarderImpl public immutable IMPLEMENTATION;\\n\\n    constructor(\\n        address guardian,\\n        WETH9Interface wrappedNativeToken,\\n        CheckoutPoolInterface checkoutPool\\n    ) {\\n        IMPLEMENTATION = new Create2ForwarderImpl(\\n            guardian,\\n            wrappedNativeToken,\\n            checkoutPool\\n        );\\n    }\\n\\n    function create(\\n        CheckoutState calldata checkout,\\n        bytes32 salt\\n    ) external returns (Create2ForwarderInterface) {\\n        return _create(checkout, salt);\\n    }\\n\\n    function createAndForward(\\n        CheckoutState calldata checkout,\\n        bytes32 salt\\n    ) external returns (Create2ForwarderInterface) {\\n        Create2ForwarderInterface proxy = _create(checkout, salt);\\n        proxy.forward();\\n        return proxy;\\n    }\\n\\n    function getAddress(\\n        CheckoutState calldata checkout,\\n        bytes32 salt\\n    ) external view returns (address payable) {\\n        return _getAddress(checkout, salt, block.chainid);\\n    }\\n\\n    /**\\n     * @notice Get the deposit address for a target chain ID.\\n     *\\n     *  IMPORTANT NOTE: This implementation assumes that the forwarder factory has the same\\n     *  address on each chain. This has to be ensured before a chain ID is added to the allowed\\n     *  list of target chain IDs on the CheckoutPools contract.\\n     */\\n    function getAddressForChain(\\n        CheckoutState calldata checkout,\\n        bytes32 salt,\\n        uint256 chainId\\n    ) external view returns (address payable) {\\n        return _getAddress(checkout, salt, chainId);\\n    }\\n\\n    function getProxyCreationCode() external pure returns (bytes memory) {\\n        return type(Create2ForwarderProxy).creationCode;\\n    }\\n\\n    function _create(\\n        CheckoutState calldata checkout,\\n        bytes32 salt\\n    ) internal returns (Create2ForwarderInterface) {\\n        Create2ForwarderProxy deployed = new Create2ForwarderProxy{\\n            salt: salt\\n        }(IMPLEMENTATION, checkout, block.chainid);\\n\\n        Create2ForwarderInterface proxy = Create2ForwarderInterface(\\n            address(deployed)\\n        );\\n        return proxy;\\n    }\\n\\n    function _getAddress(\\n        CheckoutState calldata checkout,\\n        bytes32 salt,\\n        uint256 chainId\\n    ) internal view returns (address payable) {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Create2ForwarderProxy).creationCode,\\n                        abi.encode(IMPLEMENTATION, checkout, chainId)\\n                    )\\n                )\\n            )\\n        );\\n        return payable(address(uint160(uint256(digest))));\\n    }\\n}\\n\\n// Compare with:\\n// function create3(bytes32 _salt, bytes memory _creationCode, uint256 _value) internal returns (address addr) {\\n//     // Creation code\\n//     bytes memory creationCode = PROXY_CHILD_BYTECODE;\\n\\n//     // Get target final address\\n//     addr = addressOf(_salt);\\n//     if (codeSize(addr) != 0) revert TargetAlreadyExists();\\n\\n//     // Create CREATE2 proxy\\n//     address proxy; assembly { proxy := create2(0, add(creationCode, 32), mload(creationCode), _salt)}\\n//     if (proxy == address(0)) revert ErrorCreatingProxy();\\n\\n//     // Call proxy with final init code\\n//     (bool success,) = proxy.call{ value: _value }(_creationCode);\\n//     if (!success || codeSize(addr) == 0) revert ErrorCreatingContract();\\n// }\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/CheckoutPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {\\n    UserOperation\\n} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Immutable parameters of a checkout account.\\nstruct CheckoutParams {\\n    bytes32 userOpHash;\\n    bytes32 targetAsset;\\n    uint96 targetChainId;\\n    uint128 targetAmount;\\n    uint128 expiration;\\n    bytes32 recipient;\\n}\\n\\n/// @dev State of a checkout account.\\nstruct CheckoutState {\\n    CheckoutParams params;\\n    IERC20 heldAsset;\\n    uint256 heldAmount;\\n}\\n\\nstruct SwapParams {\\n    address target;\\n    address spender;\\n    bytes callData;\\n    IERC20 receivedAsset;\\n}\\n\\nstruct BridgeParams {\\n    address target;\\n    address spender;\\n    bytes callData;\\n    IERC20 bridgeReceivedAsset;\\n    uint256 minBridgeReceivedAmount;\\n}\\n\\ninterface CheckoutPoolInterface {\\n    function deposit(CheckoutState calldata checkoutState) external;\\n\\n    function swap(\\n        address depositAddress,\\n        SwapParams calldata swapParams\\n    ) external;\\n\\n    function bridge(\\n        address depositAddress,\\n        BridgeParams calldata bridgeParams\\n    ) external;\\n\\n    function execute(\\n        address depositAddress,\\n        UserOperation[] calldata ops // length-1 array (gas optimization)\\n    ) external;\\n\\n    function checkoutExists(\\n        address depositAddress\\n    ) external view returns (bool);\\n\\n    function getCheckout(\\n        address depositAddress\\n    ) external view returns (CheckoutState memory);\\n\\n    function getCheckoutOrZero(\\n        address depositAddress\\n    ) external view returns (CheckoutState memory);\\n\\n    function forwardFund(address depositAddress) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/Create2ForwarderInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface Create2ForwarderInterface {\\n    function forward() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/Create2ForwarderFactoryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {\\n    Create2ForwarderInterface\\n} from \\\"../interfaces/Create2ForwarderInterface.sol\\\";\\nimport { CheckoutState } from \\\"./CheckoutPoolInterface.sol\\\";\\n\\ninterface Create2ForwarderFactoryInterface {\\n    function createAndForward(\\n        CheckoutState calldata checkout,\\n        bytes32 salt\\n    ) external returns (Create2ForwarderInterface);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/WETH9Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface WETH9Interface is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/forwarder/Create2ForwarderImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { CheckoutPoolInterface } from \\\"../interfaces/CheckoutPoolInterface.sol\\\";\\nimport {\\n    Create2ForwarderInterface\\n} from \\\"../interfaces/Create2ForwarderInterface.sol\\\";\\nimport {\\n    Create2ForwarderEventsAndErrors\\n} from \\\"../interfaces/Create2ForwarderEventsAndErrors.sol\\\";\\nimport { WETH9Interface } from \\\"../interfaces/WETH9Interface.sol\\\";\\nimport {\\n    CheckoutParams,\\n    CheckoutState\\n} from \\\"../interfaces/CheckoutPoolInterface.sol\\\";\\nimport { GuardianRescuable } from \\\"../utils/GuardianRescuable.sol\\\";\\nimport { Create2ForwarderProxy } from \\\"./Create2ForwarderProxy.sol\\\";\\n\\n/**\\n * @title Create2ForwarderImpl\\n * @author Fun.xyz\\n *\\n * @notice A forwarder contract (a.k.a. \u201cdeposit address\u201d) for the Checkout Pools protocol.\\n *\\n *  See Create2ForwarderFactory and Create2ForwarderProxy for more info.\\n */\\ncontract Create2ForwarderImpl is\\n    GuardianRescuable,\\n    Create2ForwarderInterface,\\n    Create2ForwarderEventsAndErrors\\n{\\n    address public immutable GUARDIAN;\\n    WETH9Interface public immutable WRAPPED_NATIVE_TOKEN;\\n    CheckoutPoolInterface public immutable CHECKOUT_POOL;\\n\\n    bool internal _FORWARDED_;\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Implementation constructor.\\n     *\\n     *  Sets immutable values that are the same across all deployed proxies.\\n     */\\n    constructor(\\n        address initialGuardian,\\n        WETH9Interface wrappedNativeToken,\\n        CheckoutPoolInterface checkoutPool\\n    ) {\\n        GUARDIAN = initialGuardian;\\n        WRAPPED_NATIVE_TOKEN = wrappedNativeToken;\\n        CHECKOUT_POOL = checkoutPool;\\n    }\\n\\n    function guardian() public override returns (address) {\\n        return GUARDIAN;\\n    }\\n\\n    /**\\n     * @notice Forward deposited funds to the CheckoutPool contract.\\n     */\\n    function forward() external {\\n        // Forward at most once.\\n        if (_FORWARDED_) {\\n            revert AlreadyForwarded();\\n        }\\n        _FORWARDED_ = true;\\n\\n        // Read checkout state from proxy immutable configuration.\\n        CheckoutState memory checkout = Create2ForwarderProxy(payable(this))\\n            .getCheckout();\\n        IERC20 heldAsset = checkout.heldAsset;\\n        uint256 minSourceAmount = checkout.heldAmount;\\n\\n        // Get native value.\\n        uint256 value = address(this).balance;\\n\\n        // Convert any native value to wrapped native token.\\n        if (value != 0) {\\n            // Note: Intentionally not sanity checking that ERC20 == WRAPPED_NATIVE_TOKEN\\n            //       since that's of little help at this point, if the contract is misconfigured.\\n            WRAPPED_NATIVE_TOKEN.deposit{ value: value }();\\n        }\\n\\n        // Get actual held amount.\\n        uint256 actualHeldAmount = heldAsset.balanceOf(address(this));\\n\\n        // Validate and possibly overwrite the source amount.\\n        if (actualHeldAmount < minSourceAmount) {\\n            revert Underfunded(actualHeldAmount, minSourceAmount);\\n        } else if (actualHeldAmount > minSourceAmount) {\\n            checkout.heldAmount = actualHeldAmount;\\n        }\\n\\n        // Make external ERC-20 approval.\\n        // Note: This is not optional.\\n        // Note: Intentionally not using SafeERC20 safeIncreaseAllowance() or forceApprove().\\n        heldAsset.approve(address(CHECKOUT_POOL), type(uint256).max);\\n\\n        // Make the external call, reverting on failure.\\n        try CHECKOUT_POOL.deposit(checkout) {} catch (bytes memory errorData) {\\n            revert ForwardError(errorData);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/forwarder/Create2ForwarderProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { Proxy } from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Create2ForwarderImpl } from \\\"../forwarder/Create2ForwarderImpl.sol\\\";\\nimport { WETH9Interface } from \\\"../interfaces/WETH9Interface.sol\\\";\\nimport { GuardianOwnable } from \\\"../utils/GuardianOwnable.sol\\\";\\n\\nimport {\\n    CheckoutParams,\\n    CheckoutState\\n} from \\\"../interfaces/CheckoutPoolInterface.sol\\\";\\n\\n/**\\n * @title Create2ForwarderProxy\\n * @author Fun.xyz\\n *\\n * @notice A forwarder contract proxy (a.k.a. \u201cdeposit address\u201d) for the Checkout Pools protocol.\\n *\\n *  Intended to be deployed as a \u201ccounterfactual\u201d contract.\\n *\\n *  See Create2ForwarderFactory and Create2ForwarderImpl for more info.\\n */\\ncontract Create2ForwarderProxy is Proxy {\\n    using SafeERC20 for IERC20;\\n\\n    Create2ForwarderImpl internal immutable IMPLEMENTATION;\\n\\n    // Expand out the CheckoutState struct so that it can be stored as immutables.\\n    bytes32 public immutable USER_OP_HASH;\\n    uint96 public immutable TARGET_CHAIN_ID;\\n    bytes32 public immutable TARGET_ASSET;\\n    uint128 public immutable TARGET_AMOUNT;\\n    uint128 public immutable EXPIRATION;\\n    bytes32 public immutable RECIPIENT;\\n    IERC20 public immutable HELD_ASSET; // Here represents the source asset.\\n    uint256 public immutable HELD_AMOUNT; // Here represents the min source amount.\\n\\n    receive() external payable override {}\\n\\n    /**\\n     * @notice Proxy constructor.\\n     *\\n     *  Sets immutable values that are different between deployed proxy instances.\\n     *\\n     *  IMPORTANT: Include chain ID in the constructor to ensure that the deposit address is\\n     *  unique for all checkout operations globally. This reduces confusion and allows us to use\\n     *  the deposit address as a unique ID in off-chain services. Note that we include the\\n     *  chain ID as a constructor param instead of hashing it into the salt, for gas efficiency.\\n     *\\n     *  The heldAsset and heldAmount are included in the constructor to ensure that it is possible\\n     *  to prove whether a liquidity provider is censoring checkouts (differenting this from the\\n     *  case where checkouts are under-funded).\\n     */\\n    constructor(\\n        Create2ForwarderImpl implementation,\\n        CheckoutState memory checkout,\\n        uint256 /* chainId */\\n    ) {\\n        IMPLEMENTATION = implementation;\\n\\n        USER_OP_HASH = checkout.params.userOpHash;\\n        TARGET_ASSET = checkout.params.targetAsset;\\n        TARGET_CHAIN_ID = checkout.params.targetChainId;\\n        TARGET_AMOUNT = checkout.params.targetAmount;\\n        EXPIRATION = checkout.params.expiration;\\n        RECIPIENT = checkout.params.recipient;\\n        HELD_ASSET = checkout.heldAsset;\\n        HELD_AMOUNT = checkout.heldAmount;\\n    }\\n\\n    function getCheckout()\\n        external\\n        view\\n        returns (CheckoutState memory checkout)\\n    {\\n        return\\n            CheckoutState({\\n                params: CheckoutParams({\\n                    userOpHash: USER_OP_HASH,\\n                    targetAsset: TARGET_ASSET,\\n                    targetChainId: TARGET_CHAIN_ID,\\n                    targetAmount: TARGET_AMOUNT,\\n                    expiration: EXPIRATION,\\n                    recipient: RECIPIENT\\n                }),\\n                heldAsset: HELD_ASSET,\\n                heldAmount: HELD_AMOUNT\\n            });\\n    }\\n\\n    function _implementation() internal view override returns (address) {\\n        return address(IMPLEMENTATION);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/account-abstraction/contracts/interfaces/UserOperation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/Create2ForwarderEventsAndErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface Create2ForwarderEventsAndErrors {\\n    error AlreadyForwarded();\\n    error ForwardError(bytes errorData);\\n    error Underfunded(uint256 actualHeldAmount, uint256 minSourceAmount);\\n}\\n\"\r\n    },\r\n    \"src/utils/GuardianRescuable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title GuardianRescuable\\n * @author Fun.xyz\\n */\\nabstract contract GuardianRescuable {\\n    using SafeERC20 for IERC20;\\n\\n    error NotGuardian(address sender);\\n\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian()) {\\n            revert NotGuardian(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function guardian() public virtual returns (address);\\n\\n    function withdrawNative(\\n        address payable recipient,\\n        uint256 amount\\n    ) external onlyGuardian {\\n        recipient.transfer(amount);\\n    }\\n\\n    function withdrawErc20(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyGuardian {\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    function withdrawAllNative(\\n        address payable recipient\\n    ) external onlyGuardian {\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    function withdrawAllErc20(\\n        IERC20 token,\\n        address recipient\\n    ) external onlyGuardian {\\n        uint256 balance = token.balanceOf(address(this));\\n        token.safeTransfer(recipient, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/GuardianOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { GuardianRescuable } from \\\"./GuardianRescuable.sol\\\";\\n\\n/**\\n * @title GuardianOwnable\\n * @author Fun.xyz\\n */\\nabstract contract GuardianOwnable is Ownable2Step, GuardianRescuable {\\n    error RenounceDisabled();\\n\\n    function guardian() public view override returns (address) {\\n        return owner();\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert RenounceDisabled();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/account-abstraction/contracts/core/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@account-abstraction/contracts/=lib/account-abstraction/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"account-abstraction/=lib/account-abstraction/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract WETH9Interface\",\"name\":\"wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"contract CheckoutPoolInterface\",\"name\":\"checkoutPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorCreatingProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"contract Create2ForwarderImpl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"targetChainId\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"targetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiration\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct CheckoutParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"heldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CheckoutState\",\"name\":\"checkout\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract Create2ForwarderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"targetChainId\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"targetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiration\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct CheckoutParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"heldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CheckoutState\",\"name\":\"checkout\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createAndForward\",\"outputs\":[{\"internalType\":\"contract Create2ForwarderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"targetChainId\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"targetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiration\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct CheckoutParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"heldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CheckoutState\",\"name\":\"checkout\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"targetChainId\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"targetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiration\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct CheckoutParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"heldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CheckoutState\",\"name\":\"checkout\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getAddressForChain\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Create2ForwarderFactory", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001bd170ca224807ebbc2085d738e7a83451c69038000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000035b87597d54af4adb112464623478cc72f842825", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}