{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/marketplace/NFTingSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./NFTingBase.sol\\\";\\n\\ncontract NFTingSale is NFTingBase {\\n    using Counters for Counters.Counter;\\n\\n    struct Listing {\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 amount;\\n        uint256 price;\\n        address payable seller;\\n        uint256 collectionIndex;\\n        uint256 sellerIndex;\\n    }\\n\\n    Counters.Counter private currentSaleId;\\n\\n    mapping(uint256 => Listing) private listings;\\n    mapping(address => uint256[]) private collectionToListings;\\n    mapping(address => uint256[]) private sellerToListings;\\n\\n    event ItemListed(\\n        uint256 indexed saleId,\\n        address indexed seller,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 price\\n    );\\n\\n    event ItemUpdated(uint256 indexed saleId, uint256 price);\\n\\n    event ItemUnlisted(uint256 indexed saleId);\\n\\n    event ItemSold(\\n        uint256 indexed saleId,\\n        address indexed buyer,\\n        uint256 price\\n    );\\n\\n    modifier onlyForSale(uint256 _saleId) {\\n        if (listings[_saleId].seller == address(0)) {\\n            revert NotListed();\\n        }\\n        _;\\n    }\\n\\n    modifier isTokenSeller(uint256 _saleId, address _seller) {\\n        if (listings[_saleId].seller != _seller) {\\n            revert NotTokenSeller();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isNotTokenSeller(uint256 _saleId, address _addr) {\\n        if (listings[_saleId].seller == _addr) {\\n            revert TokenSeller();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isNotZeroPrice(uint256 _price) {\\n        if (_price == 0) {\\n            revert PriceMustBeAboveZero(_price);\\n        }\\n\\n        _;\\n    }\\n\\n    function _createListingOnSale(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _price\\n    ) private returns (uint256 saleId) {\\n        currentSaleId.increment();\\n        saleId = currentSaleId.current();\\n\\n        Listing storage newListing = listings[saleId];\\n        newListing.nftAddress = _nftAddress;\\n        newListing.tokenId = _tokenId;\\n        newListing.amount = _amount;\\n        newListing.price = _price;\\n        newListing.seller = payable(_msgSender());\\n        newListing.collectionIndex = collectionToListings[_nftAddress].length;\\n        newListing.sellerIndex = sellerToListings[_msgSender()].length;\\n\\n        collectionToListings[_nftAddress].push(saleId);\\n        sellerToListings[_msgSender()].push(saleId);\\n    }\\n\\n    function listOnSale(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _price\\n    )\\n        external\\n        onlyNFT(_nftAddress)\\n        isTokenOwnerOrApproved(_nftAddress, _tokenId, _amount, _msgSender())\\n        isNotZeroPrice(_price)\\n        isApprovedMarketplace(_nftAddress, _tokenId, _msgSender())\\n    {\\n        uint256 saleId = _createListingOnSale(\\n            _nftAddress,\\n            _tokenId,\\n            _amount,\\n            _price\\n        );\\n        Listing storage sale = listings[saleId];\\n\\n        _transfer721And1155(\\n            _msgSender(),\\n            address(this),\\n            sale.nftAddress,\\n            sale.tokenId,\\n            sale.amount\\n        );\\n\\n        emit ItemListed(\\n            saleId,\\n            _msgSender(),\\n            sale.nftAddress,\\n            sale.tokenId,\\n            sale.amount,\\n            sale.price\\n        );\\n    }\\n\\n    function _deleteListingOnSale(uint256 _saleId) private {\\n        Listing storage listedItem = listings[_saleId];\\n\\n        uint256[] storage cListings = collectionToListings[\\n            listedItem.nftAddress\\n        ];\\n        uint256[] storage sListings = sellerToListings[listedItem.seller];\\n\\n        if (cListings.length > 1) {\\n            cListings[listedItem.collectionIndex] = cListings[\\n                cListings.length - 1\\n            ];\\n        }\\n        cListings.pop();\\n\\n        if (sListings.length > 1) {\\n            sListings[listedItem.sellerIndex] = sListings[sListings.length - 1];\\n        }\\n        sListings.pop();\\n\\n        delete listings[_saleId];\\n    }\\n\\n    function unlistOnSale(\\n        uint256 _saleId\\n    )\\n        external\\n        nonReentrant\\n        onlyForSale(_saleId)\\n        isTokenSeller(_saleId, _msgSender())\\n    {\\n        Listing storage listedItem = listings[_saleId];\\n\\n        _transfer721And1155(\\n            address(this),\\n            _msgSender(),\\n            listedItem.nftAddress,\\n            listedItem.tokenId,\\n            listedItem.amount\\n        );\\n\\n        _deleteListingOnSale(_saleId);\\n\\n        emit ItemUnlisted(_saleId);\\n    }\\n\\n    function paperBuyItem(\\n        address _to,\\n        uint256 _saleId,\\n        uint256 _value\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyForSale(_saleId)\\n        isNotTokenSeller(_saleId, _to)\\n    {\\n        Listing memory listedItem = listings[_saleId];\\n        uint256 buyPrice = _addBuyFee(listedItem.price);\\n        if (_value < buyPrice) {\\n            revert NotEnoughEthProvided(_value, buyPrice);\\n        }\\n\\n        _transfer721And1155(\\n            address(this),\\n            _to,\\n            listedItem.nftAddress,\\n            listedItem.tokenId,\\n            listedItem.amount\\n        );\\n\\n        _deleteListingOnSale(_saleId);\\n\\n        uint256 rest = _payFee(\\n            listedItem.nftAddress,\\n            listedItem.tokenId,\\n            buyPrice\\n        );\\n        (bool success, ) = listedItem.seller.call{value: rest}(\\\"\\\");\\n        if (!success) revert TransferFailed(listedItem.seller, rest);\\n\\n        emit ItemSold(_saleId, _to, buyPrice);\\n    }\\n\\n    function buyItem(\\n        uint256 _saleId\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyForSale(_saleId)\\n        isNotTokenSeller(_saleId, _msgSender())\\n    {\\n        Listing memory listedItem = listings[_saleId];\\n        uint256 buyPrice = _addBuyFee(listedItem.price);\\n        if (msg.value < buyPrice) {\\n            revert NotEnoughEthProvided(msg.value, buyPrice);\\n        }\\n\\n        _transfer721And1155(\\n            address(this),\\n            _msgSender(),\\n            listedItem.nftAddress,\\n            listedItem.tokenId,\\n            listedItem.amount\\n        );\\n\\n        _deleteListingOnSale(_saleId);\\n\\n        uint256 rest = _payFee(\\n            listedItem.nftAddress,\\n            listedItem.tokenId,\\n            buyPrice\\n        );\\n        (bool success, ) = listedItem.seller.call{value: rest}(\\\"\\\");\\n        if (!success) revert TransferFailed(listedItem.seller, rest);\\n\\n        emit ItemSold(_saleId, _msgSender(), buyPrice);\\n    }\\n\\n    function updateSalePrice(\\n        uint256 _saleId,\\n        uint256 _newPrice\\n    ) external onlyForSale(_saleId) isTokenSeller(_saleId, _msgSender()) {\\n        listings[_saleId].price = _newPrice;\\n\\n        emit ItemUpdated(_saleId, _newPrice);\\n    }\\n\\n    function getListing(\\n        uint256 _saleId\\n    )\\n        external\\n        view\\n        onlyForSale(_saleId)\\n        returns (\\n            address nft,\\n            uint256 tokenId,\\n            uint256 amount,\\n            uint256 price,\\n            address seller\\n        )\\n    {\\n        return (\\n            listings[_saleId].nftAddress,\\n            listings[_saleId].tokenId,\\n            listings[_saleId].amount,\\n            listings[_saleId].price,\\n            listings[_saleId].seller\\n        );\\n    }\\n\\n    function getListingsByCollection(\\n        address _nftAddress\\n    ) public view returns (uint256[] memory) {\\n        return collectionToListings[_nftAddress];\\n    }\\n\\n    function getListingsBySeller(\\n        address _seller\\n    ) public view returns (uint256[] memory) {\\n        return sellerToListings[_seller];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/NFTingBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interface/INFTingConfig.sol\\\";\\nimport \\\"../utilities/NFTingErrors.sol\\\";\\n\\ncontract NFTingBase is\\n    Context,\\n    Ownable,\\n    IERC721Receiver,\\n    IERC1155Receiver,\\n    ReentrancyGuard\\n{\\n    bytes4 internal constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 internal constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n    bytes4 internal constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    INFTingConfig config;\\n\\n    uint256 feesCollected;\\n\\n    modifier onlyNFT(address _addr) {\\n        if (\\n            !_supportsInterface(_addr, INTERFACE_ID_ERC1155) &&\\n            !_supportsInterface(_addr, INTERFACE_ID_ERC721)\\n        ) {\\n            revert InvalidAddressProvided(_addr);\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isTokenOwnerOrApproved(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _addr\\n    ) {\\n        if (_supportsInterface(_nftAddress, INTERFACE_ID_ERC1155)) {\\n            if (\\n                IERC1155(_nftAddress).balanceOf(_addr, _tokenId) < _amount &&\\n                !IERC1155(_nftAddress).isApprovedForAll(_addr, _msgSender())\\n            ) {\\n                revert NotTokenOwnerOrInsufficientAmount();\\n            }\\n            _;\\n        } else if (_supportsInterface(_nftAddress, INTERFACE_ID_ERC721)) {\\n            if (\\n                IERC721(_nftAddress).ownerOf(_tokenId) != _addr &&\\n                IERC721(_nftAddress).getApproved(_tokenId) != _addr\\n            ) {\\n                revert NotTokenOwnerOrInsufficientAmount();\\n            }\\n            _;\\n        } else {\\n            revert InvalidAddressProvided(_nftAddress);\\n        }\\n    }\\n\\n    modifier isApprovedMarketplace(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        if (_supportsInterface(_nftAddress, INTERFACE_ID_ERC1155)) {\\n            if (\\n                !IERC1155(_nftAddress).isApprovedForAll(_owner, address(this))\\n            ) {\\n                revert NotApprovedMarketplace();\\n            }\\n            _;\\n        } else if (_supportsInterface(_nftAddress, INTERFACE_ID_ERC721)) {\\n            if (\\n                !IERC721(_nftAddress).isApprovedForAll(_owner, address(this)) &&\\n                IERC721(_nftAddress).getApproved(_tokenId) != address(this)\\n            ) {\\n                revert NotApprovedMarketplace();\\n            }\\n            _;\\n        } else {\\n            revert InvalidAddressProvided(_nftAddress);\\n        }\\n    }\\n\\n    function _transfer721And1155(\\n        address _from,\\n        address _to,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal virtual {\\n        if (_amount == 0) {\\n            revert ZeroAmountTransfer();\\n        }\\n\\n        if (_supportsInterface(_nftAddress, INTERFACE_ID_ERC1155)) {\\n            IERC1155(_nftAddress).safeTransferFrom(\\n                _from,\\n                _to,\\n                _tokenId,\\n                _amount,\\n                \\\"\\\"\\n            );\\n        } else if (_supportsInterface(_nftAddress, INTERFACE_ID_ERC721)) {\\n            IERC721(_nftAddress).safeTransferFrom(_from, _to, _tokenId);\\n        } else {\\n            revert InvalidAddressProvided(_nftAddress);\\n        }\\n    }\\n\\n    function _supportsInterface(\\n        address _addr,\\n        bytes4 _interface\\n    ) internal view returns (bool) {\\n        return IERC165(_addr).supportsInterface(_interface);\\n    }\\n\\n    function checkRoyalties(address _contract) internal view returns (bool) {\\n        return IERC165(_contract).supportsInterface(INTERFACE_ID_ERC2981);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n            );\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                )\\n            );\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256[],uint256[],bytes)\\\"\\n                )\\n            );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            type(IERC1155Receiver).interfaceId == _interfaceId ||\\n            type(IERC721Receiver).interfaceId == _interfaceId;\\n    }\\n\\n    function setConfig(address newConfig) external onlyOwner {\\n        if (newConfig == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        config = INFTingConfig(newConfig);\\n    }\\n\\n    function _addBuyFee(uint256 price) internal view returns (uint256) {\\n        return price += (price * config.buyFee()) / 10000;\\n    }\\n\\n    function _payFee(\\n        address token,\\n        uint256 tokenId,\\n        uint256 price\\n    ) internal returns (uint256 rest) {\\n        // Cut buy fee\\n        uint256 listedPrice = (price * 10000) / (10000 + config.buyFee());\\n        uint256 buyFee = price - listedPrice;\\n\\n        // If the NFT was created on our marketplace, pay creator fee\\n        uint256 royaltyFee;\\n        if (checkRoyalties(token)) {\\n            (address creator, uint256 royaltyAmount) = IERC2981(token)\\n                .royaltyInfo(tokenId, listedPrice);\\n            (bool success, ) = creator.call{value: royaltyAmount}(\\\"\\\");\\n            if (!success) revert TransferFailed(creator, royaltyAmount);\\n\\n            royaltyFee = royaltyAmount;\\n        }\\n\\n        // Cut sell fee and creator fee\\n        uint256 sellFee = (listedPrice * config.sellFee()) / 10000;\\n        rest = listedPrice - sellFee - royaltyFee;\\n\\n        address treasury = config.treasury();\\n        if (treasury != address(0)) {\\n            (bool success, ) = treasury.call{value: buyFee + sellFee}(\\\"\\\");\\n            if (!success) revert TransferFailed(treasury, buyFee + sellFee);\\n        } else {\\n            feesCollected += (buyFee + sellFee);\\n        }\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        address treasury = config.treasury();\\n        if (treasury == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        (bool success, ) = treasury.call{value: feesCollected}(\\\"\\\");\\n        if (!success) revert TransferFailed(treasury, feesCollected);\\n        feesCollected = 0;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/INFTingConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface INFTingConfig {\\n    function buyFee() external view returns (uint256);\\n\\n    function sellFee() external view returns (uint256);\\n\\n    function maxFee() external view returns (uint256);\\n\\n    function maxRoyaltyFee() external view returns (uint256);\\n\\n    function treasury() external view returns (address);\\n\\n    function updateFee(uint256 newBuyFee, uint256 newSellFee) external;\\n\\n    function updateTreasury(address newTreasury) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utilities/NFTingErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// Common Errors\\nerror ZeroAddress();\\nerror WithdrawalFailed();\\nerror NoTrailingSlash(string _uri);\\nerror InvalidArgumentsProvided();\\nerror PriceMustBeAboveZero(uint256 _price);\\nerror PermissionDenied();\\nerror InvalidTokenId(uint256 _tokenId);\\nerror TransferFailed(address recipient, uint amount);\\n\\n// NFTing Base Contract\\nerror NotTokenOwnerOrInsufficientAmount();\\nerror NotApprovedMarketplace();\\nerror ZeroAmountTransfer();\\nerror TransactionError();\\nerror InvalidAddressProvided(address _invalidAddress);\\n\\n// PreAuthorization Contract\\nerror NoAuthorizedOperator();\\n\\n// Auction Contract\\nerror NotExistingAuction(uint256 _auctionId);\\nerror NotExistingBidder(address _bidder);\\nerror NotEnoughPriceToBid();\\nerror SelfBid();\\nerror ExpiredAuction(uint256 _auctionId);\\nerror RunningAuction(uint256 _auctionId);\\nerror NotAuctionCreatorOrOwner();\\nerror InvalidAmountOfTokens(uint256 _amount);\\nerror AlreadyWithdrawn(uint256 _auctionId, address _bidder);\\nerror NotBidder(uint256 _auctionId, address _bidder);\\n\\n// Offer Contract\\nerror NotExistingOffer(uint256 _offerId);\\nerror PriceMustBeDifferent(uint256 _price);\\nerror InsufficientETHProvided(uint256 _value);\\nerror InvalidOfferState();\\n\\n// Marketplace Contract\\nerror NotListed();\\nerror NotEnoughEthProvided(uint256 providedEth, uint256 requiredEth);\\nerror NotTokenOwner();\\nerror NotTokenSeller();\\nerror TokenSeller();\\nerror InvalidBasisProvided(uint256 _newBasis);\\n\\n// NFTing Single Token Contract\\nerror MaxBatchMintLimitExceeded();\\nerror AlreadyExistentToken();\\nerror NotApprovedOrOwner();\\nerror MaxMintLimitExceeded();\\n\\n// NFTing Token Manager Contract\\nerror AlreadyRegisteredAddress();\\n\\n// NFTingSignature\\nerror HashUsed(bytes32 _hash);\\nerror SignatureFailed(address _signatureAddress, address _signer);\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invalidAddress\",\"type\":\"address\"}],\"name\":\"InvalidAddressProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredEth\",\"type\":\"uint256\"}],\"name\":\"NotEnoughEthProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwnerOrInsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"ItemUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"getListingsByCollection\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getListingsBySeller\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"paperBuyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newConfig\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"unlistOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTingSale", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}