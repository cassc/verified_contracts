{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/abstract/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.13;\\n\\nabstract contract Admin {\\n  /**\\n   * @dev bytes32(uint256(keccak256('eip1967.FRACT10N.admin')) - 1)\\n   */\\n  bytes32 constant _adminSlot = 0xce00b027a69a53c861af45595a8cf45803b5ac2b4ac1de9fc600df4275db0c38;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == getAdmin(), \\\"FRACT10N: admin only function\\\");\\n    _;\\n  }\\n\\n  constructor() {}\\n\\n  function admin() public view returns (address) {\\n    return getAdmin();\\n  }\\n\\n  function getAdmin() public view returns (address adminAddress) {\\n    assembly {\\n      adminAddress := sload(_adminSlot)\\n    }\\n  }\\n\\n  function setAdmin(address adminAddress) public onlyAdmin {\\n    assembly {\\n      sstore(_adminSlot, adminAddress)\\n    }\\n  }\\n\\n  function adminCall(address target, bytes calldata data) external payable onlyAdmin {\\n    assembly {\\n      calldatacopy(0, data.offset, data.length)\\n      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  function adminDelegateCall(address target, bytes calldata data) external payable onlyAdmin {\\n    assembly {\\n      calldatacopy(0, data.offset, data.length)\\n      let result := delegatecall(gas(), target, 0, data.length, 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  function adminStaticCall(address target, bytes calldata data) external view onlyAdmin {\\n    assembly {\\n      calldatacopy(0, data.offset, data.length)\\n      let result := staticcall(gas(), target, 0, data.length, 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.13;\\n\\nimport {InitializableInterface} from \\\"../interface/InitializableInterface.sol\\\";\\n\\nabstract contract Initializable is InitializableInterface {\\n  /**\\n   * @dev bytes32(uint256(keccak256('eip1967.FRACT10N.initialized')) - 1)\\n   */\\n  bytes32 constant _initializedSlot = 0xea16ca35b2bc1c07977062f4d8e3e28f8f6d9d37576ddf51150bf265f8912f29;\\n\\n  /**\\n   * @dev Constructor is left empty and init is used instead\\n   */\\n  constructor() {}\\n\\n  /**\\n   * @notice Used internally to initialize the contract instead of through a constructor\\n   * @dev This function is called by the deployer/factory when creating a contract\\n   * @param initPayload abi encoded payload to use for contract initilaization\\n   */\\n  function init(bytes memory initPayload) external virtual returns (bytes4);\\n\\n  function _isInitialized() internal view returns (bool initialized) {\\n    assembly {\\n      initialized := sload(_initializedSlot)\\n    }\\n  }\\n\\n  function _setInitialized() internal {\\n    assembly {\\n      sstore(_initializedSlot, 0x0000000000000000000000000000000000000000000000000000000000000001)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/InitializableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.13;\\n\\ninterface InitializableInterface {\\n  function init(bytes memory initPayload) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/FractionTreasuryProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.13;\\n\\nimport {Admin} from \\\"../abstract/Admin.sol\\\";\\nimport {InitializableInterface, Initializable} from \\\"../abstract/Initializable.sol\\\";\\n\\ncontract FractionTreasuryProxy is Admin, Initializable {\\n  /**\\n   * @dev bytes32(uint256(keccak256('eip1967.FRACT10N.treasury')) - 1)\\n   */\\n  bytes32 constant _fractionTreasurySlot = 0x1136b6b83da8d61ba4fa1d68b5ef128602c708583193e4c55add5660847fff03;\\n\\n  constructor() {}\\n\\n  function init(bytes memory data) external override returns (bytes4) {\\n    require(!_isInitialized(), \\\"FRACT10N: already initialized\\\");\\n    (address adminAddress, address fractionTreasury, bytes memory initCode) = abi.decode(\\n      data,\\n      (address, address, bytes)\\n    );\\n    assembly {\\n      sstore(_adminSlot, adminAddress)\\n      sstore(_fractionTreasurySlot, fractionTreasury)\\n    }\\n    (bool success, bytes memory returnData) = fractionTreasury.delegatecall(\\n      abi.encodeWithSelector(InitializableInterface.init.selector, initCode)\\n    );\\n    bytes4 selector = abi.decode(returnData, (bytes4));\\n    require(success && selector == InitializableInterface.init.selector, \\\"initialization failed\\\");\\n    _setInitialized();\\n    return InitializableInterface.init.selector;\\n  }\\n\\n  function getFractionTreasury() external view returns (address fractionTreasury) {\\n    assembly {\\n      fractionTreasury := sload(_fractionTreasurySlot)\\n    }\\n  }\\n\\n  function setFractionTreasury(address fractionTreasury) external onlyAdmin {\\n    assembly {\\n      sstore(_fractionTreasurySlot, fractionTreasury)\\n    }\\n  }\\n\\n  receive() external payable {}\\n\\n  fallback() external payable {\\n    assembly {\\n      let fractionTreasury := sload(_fractionTreasurySlot)\\n      calldatacopy(0, 0, calldatasize())\\n      let result := delegatecall(gas(), fractionTreasury, 0, calldatasize(), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminDelegateCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminStaticCall\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFractionTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fractionTreasury\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fractionTreasury\",\"type\":\"address\"}],\"name\":\"setFractionTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FractionTreasuryProxy", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}