{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        // Gnosis Safe MultiSig Wallet\r\n        _owner = address(0xd701a9BAB866610189285E1BE17D2A80A4Df29b3);\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _owner = address(0);\r\n        pendingOwner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == pendingOwner, 'Caller != pending owner');\r\n        address oldOwner = _owner;\r\n        _owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n        emit OwnershipTransferred(oldOwner, _owner);\r\n    }\r\n}\r\n\r\ncontract ClaimingContract is Ownable {\r\n    IERC20 public token;\r\n\r\n    mapping(address => uint256) public allocations;\r\n    uint256 public totalAllocatedAmount;\r\n\r\n    event TokensAllocated(address indexed to, uint256 amount);\r\n    event TokensClaimed(address indexed by, uint256 amount);\r\n    event TokensDeposited(address indexed by, uint256 amount);\r\n    event TokensWithdrawn(address indexed by, uint256 amount);\r\n\r\n    constructor(address _token) {\r\n        require(_token != address(0), \"Token address cannot be zero.\");\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function depositTokens(uint256 _amount) public onlyOwner {\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n        emit TokensDeposited(msg.sender, _amount);\r\n    }\r\n\r\n    function allocateTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(_to != address(0), \"Cannot allocate to zero address.\");\r\n        // require(token.balanceOf(address(this)) - totalAllocatedAmount >= _amount, \"Insufficient unallocated balance\");\r\n        allocations[_to] += _amount;\r\n        totalAllocatedAmount += _amount;\r\n        emit TokensAllocated(_to, _amount);\r\n    }\r\n\r\n    function claimTokens() public {\r\n        uint256 amount = allocations[msg.sender];\r\n        require(amount > 0, \"No tokens allocated\");\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient contract balance\");\r\n\r\n        allocations[msg.sender] = 0;\r\n        totalAllocatedAmount -= amount;\r\n        \r\n        require(token.transfer(msg.sender, amount), \"Transfer failed\");\r\n        emit TokensClaimed(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawUnallocatedTokens() public onlyOwner {\r\n        uint256 unallocatedTokens = token.balanceOf(address(this)) - totalAllocatedAmount;\r\n        require(unallocatedTokens > 0, \"No unallocated tokens to withdraw\");\r\n        require(token.transfer(msg.sender, unallocatedTokens), \"Transfer failed\");\r\n        emit TokensWithdrawn(msg.sender, unallocatedTokens);\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount) public onlyOwner {\r\n        require(token.transfer(msg.sender, _amount), \"Transfer failed\");\r\n        emit TokensWithdrawn(msg.sender, _amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnallocatedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClaimingContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000edcddc3073c39345b5920e7f0e9b68cb2bc5b5bb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5aac1ff99ca03d93d827ba5cfa7812b3f919422c9a8fa5e0206cbb89c80bf1b9"}