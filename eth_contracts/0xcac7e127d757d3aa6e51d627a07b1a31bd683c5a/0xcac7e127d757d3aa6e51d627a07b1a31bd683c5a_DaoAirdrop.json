{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Platform/DAO/DaoProducts/DaoAirdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Pausable} from \\\"../../../Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author MetaPlayerOne DAO\\r\\n * @title DaoAirdrop\\r\\n * @notice Contract which manages airdrops in MetaPlayerOne.\\r\\n */\\r\\ncontract DaoAirdrop is Pausable {\\r\\n    struct Airdrop {\\r\\n        uint256 uid;\\r\\n        address owner_of;\\r\\n        address dao_token_address;\\r\\n        address token_address;\\r\\n        uint256 amount;\\r\\n        uint256 max_per_user;\\r\\n        uint256 start_time;\\r\\n        uint256 end_time;\\r\\n        uint256 droped_amount;\\r\\n    }\\r\\n    struct Metadata {\\r\\n        string name;\\r\\n        string description;\\r\\n        string file_uri;\\r\\n    }\\r\\n\\r\\n    Airdrop[] private _airdrops;\\r\\n\\r\\n    mapping(uint256 => mapping(address => uint256)) private _airdrop_limit;\\r\\n    mapping(uint256 => address[]) private _white_lists;\\r\\n\\r\\n    constructor(address owner_of_) Pausable(owner_of_) {}\\r\\n\\r\\n    event airdropCreated(\\r\\n        uint256 uid,\\r\\n        address owner_of,\\r\\n        address[2] addresses,\\r\\n        uint256 amount,\\r\\n        uint256 max_per_user,\\r\\n        uint256 start_time,\\r\\n        uint256 end_time,\\r\\n        string file_uri,\\r\\n        string description,\\r\\n        string name\\r\\n    );\\r\\n    event whitelistCreated(uint256 uid, address[] whitelist);\\r\\n    event claimed(\\r\\n        uint256 airdrop_uid,\\r\\n        uint256 sold_amount,\\r\\n        address eth_address\\r\\n    );\\r\\n    event withdrawed(uint256 airdrop_uid, uint256 amount);\\r\\n\\r\\n    function createAirdrop(\\r\\n        uint256 amount,\\r\\n        address dao_token_address,\\r\\n        address token_address,\\r\\n        uint256 max_per_user,\\r\\n        uint256 start_time,\\r\\n        uint256 end_time,\\r\\n        Metadata memory metadata\\r\\n    ) public notPaused {\\r\\n        require(\\r\\n            IERC20(dao_token_address).balanceOf(msg.sender) > 0,\\r\\n            \\\"No permissions\\\"\\r\\n        );\\r\\n        require(\\r\\n            amount > max_per_user,\\r\\n            \\\"Max. limit per wallet is greater than total amount\\\"\\r\\n        );\\r\\n        uint256 newAirdropUid = _airdrops.length;\\r\\n        _airdrops.push(\\r\\n            Airdrop(\\r\\n                newAirdropUid,\\r\\n                msg.sender,\\r\\n                dao_token_address,\\r\\n                token_address,\\r\\n                amount,\\r\\n                max_per_user,\\r\\n                start_time,\\r\\n                end_time,\\r\\n                0\\r\\n            )\\r\\n        );\\r\\n        IERC20(token_address).transferFrom(msg.sender, address(this), amount);\\r\\n        emit airdropCreated(\\r\\n            newAirdropUid,\\r\\n            msg.sender,\\r\\n            [dao_token_address, token_address],\\r\\n            amount,\\r\\n            max_per_user,\\r\\n            start_time,\\r\\n            end_time,\\r\\n            metadata.file_uri,\\r\\n            metadata.description,\\r\\n            metadata.name\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setWhiteList(\\r\\n        uint256 airdrop_uid,\\r\\n        address[] memory whitelist_\\r\\n    ) public {\\r\\n        require(msg.sender == _airdrops[airdrop_uid].owner_of, \\\"No permission\\\");\\r\\n        _white_lists[airdrop_uid] = whitelist_;\\r\\n        emit whitelistCreated(airdrop_uid, whitelist_);\\r\\n    }\\r\\n\\r\\n    function isMember(\\r\\n        uint256 airdrop_uid_,\\r\\n        address eth_address\\r\\n    ) public view returns (bool) {\\r\\n        if (_white_lists[airdrop_uid_].length == 0) return true;\\r\\n        for (uint256 i = 0; i < _white_lists[airdrop_uid_].length; i++) {\\r\\n            if (\\r\\n                IERC20(_white_lists[airdrop_uid_][i]).balanceOf(eth_address) > 0\\r\\n            ) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function claim(uint256 airdrop_uid, uint256 amount) public notPaused {\\r\\n        Airdrop memory airdrop = _airdrops[airdrop_uid];\\r\\n        require(\\r\\n            IERC20(airdrop.dao_token_address).balanceOf(msg.sender) > 0,\\r\\n            \\\"No permissions\\\"\\r\\n        );\\r\\n        bool hasMembership = isMember(airdrop_uid, msg.sender);\\r\\n        if (!hasMembership) revert(\\\"You has no whitelist tokens\\\");\\r\\n        require(\\r\\n            _airdrop_limit[airdrop_uid][msg.sender] + amount <=\\r\\n                airdrop.max_per_user,\\r\\n            \\\"Limit per user exeeded\\\"\\r\\n        );\\r\\n        require(\\r\\n            airdrop.droped_amount + amount <= airdrop.amount,\\r\\n            \\\"Drop limit exeeded\\\"\\r\\n        );\\r\\n        require(airdrop.start_time <= block.timestamp, \\\"Aidrop not started\\\");\\r\\n        require(\\r\\n            airdrop.end_time >= block.timestamp,\\r\\n            \\\"Aidrop has been finished\\\"\\r\\n        );\\r\\n        IERC20(airdrop.token_address).transfer(\\r\\n            msg.sender,\\r\\n            (amount * 975) / 1000\\r\\n        );\\r\\n        IERC20(airdrop.token_address).transfer(_owner_of, (amount * 25) / 1000);\\r\\n        _airdrops[airdrop_uid].droped_amount += amount;\\r\\n        _airdrop_limit[airdrop_uid][msg.sender] += amount;\\r\\n        emit claimed(airdrop_uid, amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 airdrop_uid) public notPaused {\\r\\n        Airdrop memory aidrop = _airdrops[airdrop_uid];\\r\\n        require(msg.sender == aidrop.owner_of, \\\"No permission\\\");\\r\\n        require(aidrop.end_time < block.timestamp, \\\"Not Finished\\\");\\r\\n        uint256 amount = aidrop.amount - aidrop.droped_amount;\\r\\n        _airdrops[airdrop_uid].droped_amount = aidrop.amount;\\r\\n        IERC20(aidrop.token_address).transfer(msg.sender, amount);\\r\\n        emit withdrawed(airdrop_uid, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @author MetaPlayerOne DAO\\r\\n * @title Pausable\\r\\n */\\r\\ncontract Pausable {\\r\\n    address internal _owner_of;\\r\\n    bool internal _paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev setup owner of this contract with paused off state.\\r\\n     */\\r\\n    constructor(address owner_of_) {\\r\\n        _owner_of = owner_of_;\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev modifier which can be used on child contract for checking if contract services are paused.\\r\\n     */\\r\\n    modifier notPaused() {\\r\\n        require(!_paused, \\\"Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function which setup paused variable.\\r\\n     * @param paused_ new boolean value of paused condition.\\r\\n     */\\r\\n    function setPaused(bool paused_) external {\\r\\n        require(_paused == paused_, \\\"Param has been asigned already\\\");\\r\\n        require(_owner_of == msg.sender, \\\"Permission address\\\");\\r\\n        _paused = paused_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function which setup owner variable.\\r\\n     * @param owner_of_ new owner of contract.\\r\\n     */\\r\\n    function setOwner(address owner_of_) external {\\r\\n        require(_owner_of == msg.sender, \\\"Permission address\\\");\\r\\n        _owner_of = owner_of_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function returns owner of contract.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner_of;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_of_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_of\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[2]\",\"name\":\"addresses\",\"type\":\"address[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_per_user\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"file_uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"airdropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airdrop_uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eth_address\",\"type\":\"address\"}],\"name\":\"claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"whitelistCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airdrop_uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop_uid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dao_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_per_user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"file_uri\",\"type\":\"string\"}],\"internalType\":\"struct DaoAirdrop.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"createAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop_uid_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"eth_address\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_of_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop_uid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop_uid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DaoAirdrop", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008e66691515badbaca6ee686d74c8ef29e1afe57f", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}