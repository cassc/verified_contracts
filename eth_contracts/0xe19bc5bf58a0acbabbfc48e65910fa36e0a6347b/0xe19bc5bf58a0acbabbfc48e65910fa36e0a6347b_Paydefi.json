{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPaydefi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IPaydefi {\\n    enum SwapType {\\n        SEll,\\n        BUY\\n    }\\n\\n    struct PaymentArgs {\\n        string orderId;\\n        address payInToken;\\n        address payOutToken;\\n        uint256 payInAmount;\\n        uint256 payOutAmount;\\n        address merchant;\\n        SwapType swapType;\\n    }\\n\\n    struct SwapArgs {\\n        uint256 value;\\n        address provider;\\n        address approveProxy;\\n        bool shouldApprove;\\n        bytes callData;\\n    }\\n\\n    function completePayment(\\n        string calldata orderId,\\n        address payToken,\\n        uint256 payInAmount,\\n        uint256 payOutAmount,\\n        address merchant\\n    ) external payable;\\n\\n    function completePaymentWithSwap(\\n        PaymentArgs calldata paymentArgs,\\n        SwapArgs calldata swapArgs\\n    ) external payable;\\n\\n    function claimProtocolFee(address token, address receiver) external;\\n\\n    function addWhitelistedSwapProvider(address swapProvider) external;\\n\\n    function removeWhitelistedSwapProvider(address swapProvider) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ERC20Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ERC20Utils\\n/// @notice Optimized functions for ERC20 tokens\\nlibrary ERC20Utils {\\n    /*//////////////////////////////////////////////////////////////\\n                                ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    error IncorrectEthAmount();\\n    error PermitFailed();\\n    error TransferFromFailed();\\n    error TransferFailed();\\n    error ApprovalFailed();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    IERC20 internal constant ETH = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                APPROVE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Vendored from Solady by @vectorized - SafeTransferLib.approveWithRetry\\n    /// https://github.com/Vectorized/solady/src/utils/SafeTransferLib.sol#L325\\n    /// Instead of approving a specific amount, this function approves for uint256(-1) (type(uint256).max).\\n    function approve(IERC20 token, address to) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) // Store the `amount`\\n        // argument (type(uint256).max).\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n        // Perform the approval, retrying upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\\n                mstore(0x34, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) // Store\\n            // type(uint256).max for the `amount`.\\n            // Retry the approval, reverting upon failure.\\n                if iszero(\\n                    and(\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0, 0x8164f84200000000000000000000000000000000000000000000000000000000)\\n                // store the selector (error ApprovalFailed())\\n                    revert(0, 4) // revert with error selector\\n                }\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                PERMIT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Executes an ERC20 permit and reverts if invalid length is provided\\n    function permit(IERC20 token, bytes calldata data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n        // check the permit length\\n            switch data.length\\n            // 32 * 7 = 224 EIP2612 Permit\\n            case 224 {\\n                let x := mload(64) // get the free memory pointer\\n                mstore(x, 0xd505accf00000000000000000000000000000000000000000000000000000000) // store the selector\\n            // function permit(address owner, address spender, uint256\\n            // amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                calldatacopy(add(x, 4), data.offset, 224) // store the args\\n                pop(call(gas(), token, 0, x, 228, 0, 32)) // call ERC20 permit, skip checking return data\\n            }\\n            // 32 * 8 = 256 DAI-Style Permit\\n            case 256 {\\n                let x := mload(64) // get the free memory pointer\\n                mstore(x, 0x8fcbaf0c00000000000000000000000000000000000000000000000000000000) // store the selector\\n            // function permit(address holder, address spender, uint256\\n            // nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                calldatacopy(add(x, 4), data.offset, 256) // store the args\\n                pop(call(gas(), token, 0, x, 260, 0, 32)) // call ERC20 permit, skip checking return data\\n            }\\n            default {\\n                mstore(0, 0xb78cb0dd00000000000000000000000000000000000000000000000000000000) // store the selector\\n            // (error PermitFailed())\\n                revert(0, 4)\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 ETH\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns 1 if the token is ETH, 0 if not ETH\\n    function isETH(IERC20 token, uint256 amount) internal view returns (uint256 fromETH) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n        // If token is ETH\\n            if eq(token, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            // if msg.value is not equal to fromAmount, then revert\\n                if xor(amount, callvalue()) {\\n                    mstore(0, 0x8b6ebb4d00000000000000000000000000000000000000000000000000000000) // store the selector\\n                // (error IncorrectEthAmount())\\n                    revert(0, 4) // revert with error selector\\n                }\\n            // return 1 if ETH\\n                fromETH := 1\\n            }\\n        // If token is not ETH\\n            if xor(token, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            // if msg.value is not equal to 0, then revert\\n                if gt(callvalue(), 0) {\\n                    mstore(0, 0x8b6ebb4d00000000000000000000000000000000000000000000000000000000) // store the selector\\n                // (error IncorrectEthAmount())\\n                    revert(0, 4) // revert with error selector\\n                }\\n            }\\n        }\\n        // return 0 if not ETH\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                TRANSFER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Executes transfer and reverts if it fails, works for both ETH and ERC20 transfers\\n    function safeTransfer(IERC20 token, address recipient, uint256 amount) internal returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch eq(token, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            // ETH\\n            case 1 {\\n            // transfer ETH\\n            // Cap gas at 10000 to avoid reentrancy\\n                success := call(10000, recipient, amount, 0, 0, 0, 0)\\n            }\\n            // ERC20\\n            default {\\n                let x := mload(64) // get the free memory pointer\\n                mstore(x, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // store the selector\\n            // (function transfer(address recipient, uint256 amount))\\n                mstore(add(x, 4), recipient) // store the recipient\\n                mstore(add(x, 36), amount) // store the amount\\n                success := call(gas(), token, 0, x, 68, 0, 32) // call transfer\\n                if success {\\n                    switch returndatasize()\\n                    // check the return data size\\n                    case 0 { success := gt(extcodesize(token), 0) }\\n                    default { success := and(gt(returndatasize(), 31), eq(mload(0), 1)) }\\n                }\\n            }\\n            if iszero(success) {\\n                mstore(0, 0x90b8ec1800000000000000000000000000000000000000000000000000000000) // store the selector\\n            // (error TransferFailed())\\n                revert(0, 4) // revert with error selector\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             TRANSFER FROM\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Executes transferFrom and reverts if it fails\\n    function safeTransferFrom(\\n        IERC20 srcToken,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n    internal\\n    returns (bool success)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let x := mload(64) // get the free memory pointer\\n            mstore(x, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // store the selector\\n        // (function transferFrom(address sender, address recipient,\\n        // uint256 amount))\\n            mstore(add(x, 4), sender) // store the sender\\n            mstore(add(x, 36), recipient) // store the recipient\\n            mstore(add(x, 68), amount) // store the amount\\n            success := call(gas(), srcToken, 0, x, 100, 0, 32) // call transferFrom\\n            if success {\\n                switch returndatasize()\\n                // check the return data size\\n                case 0 { success := gt(extcodesize(srcToken), 0) }\\n                default { success := and(gt(returndatasize(), 31), eq(mload(0), 1)) }\\n            }\\n            if iszero(success) {\\n                mstore(x, 0x7939f42400000000000000000000000000000000000000000000000000000000) // store the selector\\n            // (error TransferFromFailed())\\n                revert(x, 4) // revert with error selector\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                BALANCE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns the balance of an account, works for both ETH and ERC20 tokens\\n    function getBalance(IERC20 token, address account) internal view returns (uint256 balanceOf) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch eq(token, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            // ETH\\n            case 1 { balanceOf := balance(account) }\\n            // ERC20\\n            default {\\n                let x := mload(64) // get the free memory pointer\\n                mstore(x, 0x70a0823100000000000000000000000000000000000000000000000000000000) // store the selector\\n            // (function balanceOf(address account))\\n                mstore(add(x, 4), account) // store the account\\n                let success := staticcall(gas(), token, x, 36, x, 32) // call balanceOf\\n                if success { balanceOf := mload(x) } // load the balance\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PaymentErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nlibrary PaymentErrors {\\n    error IncorrectNativeTokenAmount();\\n    error SwapProviderNotWhitelisted();\\n    error FeeRateOutOfRange();\\n    error ZeroClaimAddress();\\n}\\n\"\r\n    },\r\n    \"contracts/Paydefi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPaydefi.sol\\\";\\nimport \\\"./libraries/PaymentErrors.sol\\\";\\nimport \\\"./libraries/ERC20Utils.sol\\\";\\n\\ncontract Paydefi is IPaydefi, Ownable {\\n    using ERC20Utils for IERC20;\\n\\n    mapping(address => bool) public whitelistedSwapProviders;\\n\\n    event Payment(\\n        string orderId,\\n        address payInToken,\\n        address payOutToken,\\n        uint256 payInAmount,\\n        uint256 payOutAmount,\\n        uint256 protocolFeeAmount,\\n        address merchant\\n    );\\n\\n    constructor(address _initialOwner, address[] memory swapProviders) Ownable(_initialOwner) {\\n        for (uint256 i = 0; i < swapProviders.length; i++) {\\n            whitelistedSwapProviders[swapProviders[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @param payToken token address which user sends\\n     * @param payInAmount amount of payToken for user to pay\\n     * @param payOutAmount amount of payToken for merchant to receive\\n     * @param merchant address of merchant\\n     */\\n    function completePayment(\\n        string calldata orderId,\\n        address payToken,\\n        uint256 payInAmount,\\n        uint256 payOutAmount,\\n        address merchant\\n    ) external payable {\\n        if (IERC20(payToken).isETH(payInAmount) == 0) {\\n            IERC20(payToken).safeTransferFrom(msg.sender, address(this), payInAmount);\\n        }\\n\\n        uint256 feeCollected = payInAmount - payOutAmount;\\n\\n        IERC20(payToken).safeTransfer(merchant, payOutAmount);\\n\\n        emit Payment(orderId, payToken, payToken, payInAmount, payOutAmount, feeCollected, merchant);\\n    }\\n\\n    /**\\n     * @param paymentArgs payment arguments\\n     * @param swapArgs swap arguments\\n     */\\n    function completePaymentWithSwap(PaymentArgs calldata paymentArgs, SwapArgs calldata swapArgs) external payable {\\n        if (!whitelistedSwapProviders[swapArgs.provider]) {\\n            revert PaymentErrors.SwapProviderNotWhitelisted();\\n        }\\n\\n        (uint256 actualPayInAmount, uint256 receivedPayOutAmount) = executeSwap(paymentArgs, swapArgs);\\n\\n        uint256 feeCollected = receivedPayOutAmount - paymentArgs.payOutAmount;\\n\\n        // transfer payOutToken to merchant\\n        IERC20(paymentArgs.payOutToken).safeTransfer(paymentArgs.merchant, paymentArgs.payOutAmount);\\n\\n        // if swap is a BUY, return unused payInAmount to user\\n        if (paymentArgs.swapType == SwapType.BUY) {\\n            uint256 unusedPayInAmount = paymentArgs.payInAmount - actualPayInAmount;\\n\\n            if (unusedPayInAmount > 0) {\\n                IERC20(paymentArgs.payInToken).safeTransfer(msg.sender, unusedPayInAmount);\\n            }\\n        }\\n\\n        emit Payment(\\n            paymentArgs.orderId,\\n            paymentArgs.payInToken,\\n            paymentArgs.payOutToken,\\n            actualPayInAmount,\\n            paymentArgs.payOutAmount,\\n            feeCollected,\\n            paymentArgs.merchant\\n        );\\n    }\\n\\n    /**\\n     * @notice add address of the swap provider\\n     * @param swapProvider swap provider address\\n     */\\n    function addWhitelistedSwapProvider(address swapProvider) external onlyOwner {\\n        whitelistedSwapProviders[swapProvider] = true;\\n    }\\n\\n    /**\\n     * @notice Remove address of the swap provider\\n     * @param swapProvider swap provider address\\n     */\\n    function removeWhitelistedSwapProvider(address swapProvider) external onlyOwner {\\n        whitelistedSwapProviders[swapProvider] = false;\\n    }\\n\\n    /**\\n     * @notice Returns amount of protocol fees collected for the token\\n     */\\n    function protocolFee(address token) public view returns (uint256) {\\n        return IERC20(token).getBalance(address(this));\\n    }\\n\\n    /**\\n     * @notice claim protocol fee\\n     */\\n    function claimProtocolFee(address token, address receiver) external onlyOwner {\\n        if (receiver == address(0)) {\\n            revert PaymentErrors.ZeroClaimAddress();\\n        }\\n\\n        uint256 protocolFeeAmount = protocolFee(token);\\n        IERC20(token).safeTransfer(receiver, protocolFeeAmount);\\n    }\\n\\n    function executeSwap(\\n        PaymentArgs calldata paymentArgs,\\n        SwapArgs calldata swapArgs\\n    ) internal returns (uint256 spent, uint256 received) {\\n        if (IERC20(paymentArgs.payInToken).isETH(paymentArgs.payInAmount) == 0) {\\n            IERC20(paymentArgs.payInToken).safeTransferFrom(msg.sender, address(this), paymentArgs.payInAmount);\\n            if (swapArgs.shouldApprove) {\\n                IERC20(paymentArgs.payInToken).approve(swapArgs.approveProxy);\\n            }\\n        }\\n\\n        uint256 payInBeforeSwap = IERC20(paymentArgs.payInToken).getBalance(address(this));\\n        uint256 payOutBeforeSwap = IERC20(paymentArgs.payOutToken).getBalance(address(this));\\n\\n        (bool success, ) = swapArgs.provider.call{ value: swapArgs.value }(swapArgs.callData);\\n\\n        /** @dev assembly allows to get tx failure reason here*/\\n        if (success == false) {\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n\\n        uint256 payInAfterSwap = IERC20(paymentArgs.payInToken).getBalance(address(this));\\n        uint256 payOutAfterSwap = IERC20(paymentArgs.payOutToken).getBalance(address(this));\\n\\n        spent = payInBeforeSwap - payInAfterSwap;\\n        received = payOutAfterSwap - payOutBeforeSwap;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapProviders\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapProviderNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroClaimAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payInToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payOutToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapProvider\",\"type\":\"address\"}],\"name\":\"addWhitelistedSwapProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"}],\"name\":\"completePayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payInToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payOutToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"enum IPaydefi.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"}],\"internalType\":\"struct IPaydefi.PaymentArgs\",\"name\":\"paymentArgs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveProxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldApprove\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct IPaydefi.SwapArgs\",\"name\":\"swapArgs\",\"type\":\"tuple\"}],\"name\":\"completePaymentWithSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapProvider\",\"type\":\"address\"}],\"name\":\"removeWhitelistedSwapProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSwapProviders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Paydefi", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000071850486b4c3e807b69ba0752e0543f4437de42800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee57", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}