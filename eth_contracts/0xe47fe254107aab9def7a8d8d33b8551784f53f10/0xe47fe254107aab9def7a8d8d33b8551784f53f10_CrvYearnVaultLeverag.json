{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.21;\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface IBaseLeverage {\r\n  enum FlashLoanType {\r\n    AAVE,\r\n    BALANCER\r\n  }\r\n\r\n  enum SwapType {\r\n    NONE,\r\n    DEPOSIT,\r\n    WITHDRAW,\r\n    UNISWAP,\r\n    BALANCER,\r\n    CURVE\r\n  }\r\n\r\n  struct MultipSwapPath {\r\n    address[9] routes;\r\n    uint256[3][4] routeParams;\r\n    // uniswap/balancer/curve\r\n    SwapType swapType;\r\n    uint256 poolCount;\r\n    address swapFrom;\r\n    address swapTo;\r\n    uint256 inAmount;\r\n    uint256 outAmount;\r\n  }\r\n\r\n  struct BiDirectSwapInfo {\r\n    MultipSwapPath[3] paths;\r\n    MultipSwapPath[3] reversePaths;\r\n    uint256 pathLength;\r\n  }\r\n\r\n  struct UniDirectSwapInfo {\r\n    MultipSwapPath[3] paths;\r\n    uint256 pathLength;\r\n  }\r\n\r\n  struct FlashLoanParams {\r\n    bool isEnterPosition;\r\n    uint256 minRequiredAmount;\r\n    address user;\r\n    address collateralAsset;\r\n    address silo;\r\n    BiDirectSwapInfo borrowAssetAndCollateral;\r\n    BiDirectSwapInfo borrowAssetAndSiloAsset;\r\n  }\r\n\r\n  struct LeverageParams {\r\n    address user;\r\n    uint256 principal;\r\n    uint256 leverage;\r\n    address borrowAsset;\r\n    address collateralAsset;\r\n    address silo;\r\n    FlashLoanType flashLoanType;\r\n    BiDirectSwapInfo borrowAssetAndCollateral;\r\n    BiDirectSwapInfo borrowAssetAndSiloAsset;\r\n  }\r\n\r\n  function enterPositionWithFlashloan(\r\n    uint256 _principal,\r\n    uint256 _leverage,\r\n    address _borrowAsset,\r\n    address _collateralAsset,\r\n    address _silo,\r\n    FlashLoanType _flashLoanType,\r\n    BiDirectSwapInfo calldata _borrowAssetAndCollateral,\r\n    BiDirectSwapInfo calldata _borrowAssetAndSiloAsset\r\n  ) external;\r\n\r\n  function withdrawWithFlashloan(\r\n    uint256 _repayAmount,\r\n    uint256 _requiredAmount,\r\n    address _borrowAsset,\r\n    address _collateralAsset,\r\n    address _silo,\r\n    FlashLoanType _flashLoanType,\r\n    BiDirectSwapInfo calldata _borrowAssetAndSiloAsset,\r\n    BiDirectSwapInfo calldata _borrowAssetAndCollateral\r\n  ) external;\r\n}\r\n\r\ninterface IFlashLoanReceiver {\r\n  function executeOperation(\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata premiums,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface IFlashLoanRecipient {\r\n  /**\r\n   * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\r\n   *\r\n   * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\r\n   * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\r\n   * Vault, or else the entire flash loan will revert.\r\n   *\r\n   * `userData` is the same value passed in the `IVault.flashLoan` call.\r\n   */\r\n  function receiveFlashLoan(\r\n    IERC20[] memory tokens,\r\n    uint256[] memory amounts,\r\n    uint256[] memory feeAmounts,\r\n    bytes memory userData\r\n  ) external;\r\n}\r\n\r\ninterface IPoolAddressesProvider {\r\n    /**\r\n     * @dev Emitted when the market identifier is updated.\r\n     * @param oldMarketId The old id of the market\r\n     * @param newMarketId The new id of the market\r\n     */\r\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\r\n\r\n    /**\r\n     * @dev Emitted when the pool is updated.\r\n     * @param oldAddress The old address of the Pool\r\n     * @param newAddress The new address of the Pool\r\n     */\r\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n    /**\r\n     * @dev Emitted when the pool configurator is updated.\r\n     * @param oldAddress The old address of the PoolConfigurator\r\n     * @param newAddress The new address of the PoolConfigurator\r\n     */\r\n    event PoolConfiguratorUpdated(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the price oracle is updated.\r\n     * @param oldAddress The old address of the PriceOracle\r\n     * @param newAddress The new address of the PriceOracle\r\n     */\r\n    event PriceOracleUpdated(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the ACL manager is updated.\r\n     * @param oldAddress The old address of the ACLManager\r\n     * @param newAddress The new address of the ACLManager\r\n     */\r\n    event ACLManagerUpdated(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the ACL admin is updated.\r\n     * @param oldAddress The old address of the ACLAdmin\r\n     * @param newAddress The new address of the ACLAdmin\r\n     */\r\n    event ACLAdminUpdated(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the price oracle sentinel is updated.\r\n     * @param oldAddress The old address of the PriceOracleSentinel\r\n     * @param newAddress The new address of the PriceOracleSentinel\r\n     */\r\n    event PriceOracleSentinelUpdated(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the pool data provider is updated.\r\n     * @param oldAddress The old address of the PoolDataProvider\r\n     * @param newAddress The new address of the PoolDataProvider\r\n     */\r\n    event PoolDataProviderUpdated(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a new proxy is created.\r\n     * @param id The identifier of the proxy\r\n     * @param proxyAddress The address of the created proxy contract\r\n     * @param implementationAddress The address of the implementation contract\r\n     */\r\n    event ProxyCreated(\r\n        bytes32 indexed id,\r\n        address indexed proxyAddress,\r\n        address indexed implementationAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a new non-proxied contract address is registered.\r\n     * @param id The identifier of the contract\r\n     * @param oldAddress The address of the old contract\r\n     * @param newAddress The address of the new contract\r\n     */\r\n    event AddressSet(\r\n        bytes32 indexed id,\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the implementation of the proxy registered with id is updated\r\n     * @param id The identifier of the contract\r\n     * @param proxyAddress The address of the proxy contract\r\n     * @param oldImplementationAddress The address of the old implementation contract\r\n     * @param newImplementationAddress The address of the new implementation contract\r\n     */\r\n    event AddressSetAsProxy(\r\n        bytes32 indexed id,\r\n        address indexed proxyAddress,\r\n        address oldImplementationAddress,\r\n        address indexed newImplementationAddress\r\n    );\r\n\r\n    /**\r\n     * @notice Returns the id of the Aave market to which this contract points to.\r\n     * @return The market id\r\n     **/\r\n    function getMarketId() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Associates an id with a specific PoolAddressesProvider.\r\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\r\n     * identify and validate multiple Aave markets.\r\n     * @param newMarketId The market id\r\n     */\r\n    function setMarketId(string calldata newMarketId) external;\r\n\r\n    /**\r\n     * @notice Returns an address by its identifier.\r\n     * @dev The returned address might be an EOA or a contract, potentially proxied\r\n     * @dev It returns ZERO if there is no registered address with the given id\r\n     * @param id The id\r\n     * @return The address of the registered for the specified id\r\n     */\r\n    function getAddress(bytes32 id) external view returns (address);\r\n\r\n    /**\r\n     * @notice General function to update the implementation of a proxy registered with\r\n     * certain `id`. If there is no proxy registered, it will instantiate one and\r\n     * set as implementation the `newImplementationAddress`.\r\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\r\n     * setter function, in order to avoid unexpected consequences\r\n     * @param id The id\r\n     * @param newImplementationAddress The address of the new implementation\r\n     */\r\n    function setAddressAsProxy(\r\n        bytes32 id,\r\n        address newImplementationAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\r\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\r\n     * @param id The id\r\n     * @param newAddress The address to set\r\n     */\r\n    function setAddress(bytes32 id, address newAddress) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the Pool proxy.\r\n     * @return The Pool proxy address\r\n     **/\r\n    function getPool() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the implementation of the Pool, or creates a proxy\r\n     * setting the new `pool` implementation when the function is called for the first time.\r\n     * @param newPoolImpl The new Pool implementation\r\n     **/\r\n    function setPoolImpl(address newPoolImpl) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the PoolConfigurator proxy.\r\n     * @return The PoolConfigurator proxy address\r\n     **/\r\n    function getPoolConfigurator() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\r\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\r\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\r\n     **/\r\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the price oracle.\r\n     * @return The address of the PriceOracle\r\n     */\r\n    function getPriceOracle() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the address of the price oracle.\r\n     * @param newPriceOracle The address of the new PriceOracle\r\n     */\r\n    function setPriceOracle(address newPriceOracle) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the ACL manager.\r\n     * @return The address of the ACLManager\r\n     */\r\n    function getACLManager() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the address of the ACL manager.\r\n     * @param newAclManager The address of the new ACLManager\r\n     **/\r\n    function setACLManager(address newAclManager) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the ACL admin.\r\n     * @return The address of the ACL admin\r\n     */\r\n    function getACLAdmin() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the address of the ACL admin.\r\n     * @param newAclAdmin The address of the new ACL admin\r\n     */\r\n    function setACLAdmin(address newAclAdmin) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the price oracle sentinel.\r\n     * @return The address of the PriceOracleSentinel\r\n     */\r\n    function getPriceOracleSentinel() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the address of the price oracle sentinel.\r\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\r\n     **/\r\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the data provider.\r\n     * @return The address of the DataProvider\r\n     */\r\n    function getPoolDataProvider() external view returns (address);\r\n\r\n    /**\r\n     * @notice Updates the address of the data provider.\r\n     * @param newDataProvider The address of the new DataProvider\r\n     **/\r\n    function setPoolDataProvider(address newDataProvider) external;\r\n}\r\n\r\nlibrary DataTypesV3 {\r\n    struct ReserveData {\r\n        //stores the reserve configuration\r\n        ReserveConfigurationMap configuration;\r\n        //the liquidity index. Expressed in ray\r\n        uint128 liquidityIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint128 currentLiquidityRate;\r\n        //variable borrow index. Expressed in ray\r\n        uint128 variableBorrowIndex;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint128 currentVariableBorrowRate;\r\n        //the current stable borrow rate. Expressed in ray\r\n        uint128 currentStableBorrowRate;\r\n        //timestamp of last update\r\n        uint40 lastUpdateTimestamp;\r\n        //the id of the reserve. Represents the position in the list of the active reserves\r\n        uint16 id;\r\n        //aToken address\r\n        address aTokenAddress;\r\n        //stableDebtToken address\r\n        address stableDebtTokenAddress;\r\n        //variableDebtToken address\r\n        address variableDebtTokenAddress;\r\n        //address of the interest rate strategy\r\n        address interestRateStrategyAddress;\r\n        //the current treasury balance, scaled\r\n        uint128 accruedToTreasury;\r\n        //the outstanding unbacked aTokens minted through the bridging feature\r\n        uint128 unbacked;\r\n        //the outstanding debt borrowed against this asset in isolation mode\r\n        uint128 isolationModeTotalDebt;\r\n    }\r\n\r\n    struct ReserveConfigurationMap {\r\n        //bit 0-15: LTV\r\n        //bit 16-31: Liq. threshold\r\n        //bit 32-47: Liq. bonus\r\n        //bit 48-55: Decimals\r\n        //bit 56: reserve is active\r\n        //bit 57: reserve is frozen\r\n        //bit 58: borrowing is enabled\r\n        //bit 59: stable rate borrowing enabled\r\n        //bit 60: asset is paused\r\n        //bit 61: borrowing in isolation mode is enabled\r\n        //bit 62-63: reserved\r\n        //bit 64-79: reserve factor\r\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n        //bit 152-167 liquidation protocol fee\r\n        //bit 168-175 eMode category\r\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n        //bit 252-255 unused\r\n\r\n        uint256 data;\r\n    }\r\n\r\n    struct UserConfigurationMap {\r\n        /**\r\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\r\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\r\n         * asset is borrowed by the user.\r\n         */\r\n        uint256 data;\r\n    }\r\n\r\n    struct EModeCategory {\r\n        // each eMode category has a custom ltv and liquidation threshold\r\n        uint16 ltv;\r\n        uint16 liquidationThreshold;\r\n        uint16 liquidationBonus;\r\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\r\n        address priceSource;\r\n        string label;\r\n    }\r\n\r\n    enum InterestRateMode {\r\n        NONE,\r\n        STABLE,\r\n        VARIABLE\r\n    }\r\n\r\n    struct ReserveCache {\r\n        uint256 currScaledVariableDebt;\r\n        uint256 nextScaledVariableDebt;\r\n        uint256 currPrincipalStableDebt;\r\n        uint256 currAvgStableBorrowRate;\r\n        uint256 currTotalStableDebt;\r\n        uint256 nextAvgStableBorrowRate;\r\n        uint256 nextTotalStableDebt;\r\n        uint256 currLiquidityIndex;\r\n        uint256 nextLiquidityIndex;\r\n        uint256 currVariableBorrowIndex;\r\n        uint256 nextVariableBorrowIndex;\r\n        uint256 currLiquidityRate;\r\n        uint256 currVariableBorrowRate;\r\n        uint256 reserveFactor;\r\n        ReserveConfigurationMap reserveConfiguration;\r\n        address aTokenAddress;\r\n        address stableDebtTokenAddress;\r\n        address variableDebtTokenAddress;\r\n        uint40 reserveLastUpdateTimestamp;\r\n        uint40 stableDebtLastUpdateTimestamp;\r\n    }\r\n\r\n    struct ExecuteLiquidationCallParams {\r\n        uint256 reservesCount;\r\n        uint256 debtToCover;\r\n        address collateralAsset;\r\n        address debtAsset;\r\n        address user;\r\n        bool receiveAToken;\r\n        address priceOracle;\r\n        uint8 userEModeCategory;\r\n        address priceOracleSentinel;\r\n    }\r\n\r\n    struct ExecuteSupplyParams {\r\n        address asset;\r\n        uint256 amount;\r\n        address onBehalfOf;\r\n        uint16 referralCode;\r\n    }\r\n\r\n    struct ExecuteBorrowParams {\r\n        address asset;\r\n        address user;\r\n        address onBehalfOf;\r\n        uint256 amount;\r\n        InterestRateMode interestRateMode;\r\n        uint16 referralCode;\r\n        bool releaseUnderlying;\r\n        uint256 maxStableRateBorrowSizePercent;\r\n        uint256 reservesCount;\r\n        address oracle;\r\n        uint8 userEModeCategory;\r\n        address priceOracleSentinel;\r\n    }\r\n\r\n    struct ExecuteRepayParams {\r\n        address asset;\r\n        uint256 amount;\r\n        InterestRateMode interestRateMode;\r\n        address onBehalfOf;\r\n        bool useATokens;\r\n    }\r\n\r\n    struct ExecuteWithdrawParams {\r\n        address asset;\r\n        uint256 amount;\r\n        address to;\r\n        uint256 reservesCount;\r\n        address oracle;\r\n        uint8 userEModeCategory;\r\n    }\r\n\r\n    struct ExecuteSetUserEModeParams {\r\n        uint256 reservesCount;\r\n        address oracle;\r\n        uint8 categoryId;\r\n    }\r\n\r\n    struct FinalizeTransferParams {\r\n        address asset;\r\n        address from;\r\n        address to;\r\n        uint256 amount;\r\n        uint256 balanceFromBefore;\r\n        uint256 balanceToBefore;\r\n        uint256 reservesCount;\r\n        address oracle;\r\n        uint8 fromEModeCategory;\r\n    }\r\n\r\n    struct FlashloanParams {\r\n        address receiverAddress;\r\n        address[] assets;\r\n        uint256[] amounts;\r\n        uint256[] interestRateModes;\r\n        address onBehalfOf;\r\n        bytes params;\r\n        uint16 referralCode;\r\n        uint256 flashLoanPremiumToProtocol;\r\n        uint256 flashLoanPremiumTotal;\r\n        uint256 maxStableRateBorrowSizePercent;\r\n        uint256 reservesCount;\r\n        address addressesProvider;\r\n        uint8 userEModeCategory;\r\n        bool isAuthorizedFlashBorrower;\r\n    }\r\n\r\n    struct FlashloanSimpleParams {\r\n        address receiverAddress;\r\n        address asset;\r\n        uint256 amount;\r\n        bytes params;\r\n        uint16 referralCode;\r\n        uint256 flashLoanPremiumToProtocol;\r\n        uint256 flashLoanPremiumTotal;\r\n    }\r\n\r\n    struct FlashLoanRepaymentParams {\r\n        uint256 amount;\r\n        uint256 totalPremium;\r\n        uint256 flashLoanPremiumToProtocol;\r\n        address asset;\r\n        address receiverAddress;\r\n        uint16 referralCode;\r\n    }\r\n\r\n    struct CalculateUserAccountDataParams {\r\n        UserConfigurationMap userConfig;\r\n        uint256 reservesCount;\r\n        address user;\r\n        address oracle;\r\n        uint8 userEModeCategory;\r\n    }\r\n\r\n    struct ValidateBorrowParams {\r\n        ReserveCache reserveCache;\r\n        UserConfigurationMap userConfig;\r\n        address asset;\r\n        address userAddress;\r\n        uint256 amount;\r\n        InterestRateMode interestRateMode;\r\n        uint256 maxStableLoanPercent;\r\n        uint256 reservesCount;\r\n        address oracle;\r\n        uint8 userEModeCategory;\r\n        address priceOracleSentinel;\r\n        bool isolationModeActive;\r\n        address isolationModeCollateralAddress;\r\n        uint256 isolationModeDebtCeiling;\r\n    }\r\n\r\n    struct ValidateLiquidationCallParams {\r\n        ReserveCache debtReserveCache;\r\n        uint256 totalDebt;\r\n        uint256 healthFactor;\r\n        address priceOracleSentinel;\r\n    }\r\n\r\n    struct CalculateInterestRatesParams {\r\n        uint256 unbacked;\r\n        uint256 liquidityAdded;\r\n        uint256 liquidityTaken;\r\n        uint256 totalStableDebt;\r\n        uint256 totalVariableDebt;\r\n        uint256 averageStableBorrowRate;\r\n        uint256 reserveFactor;\r\n        address reserve;\r\n        address aToken;\r\n    }\r\n\r\n    struct InitReserveParams {\r\n        address asset;\r\n        address aTokenAddress;\r\n        address stableDebtAddress;\r\n        address variableDebtAddress;\r\n        address interestRateStrategyAddress;\r\n        uint16 reservesCount;\r\n        uint16 maxNumberReserves;\r\n    }\r\n}\r\n\r\ninterface IPool {\r\n    /**\r\n     * @dev Emitted on mintUnbacked()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address initiating the supply\r\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\r\n     * @param amount The amount of supplied assets\r\n     * @param referralCode The referral code used\r\n     **/\r\n    event MintUnbacked(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        uint16 indexed referralCode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on backUnbacked()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param backer The address paying for the backing\r\n     * @param amount The amount added as backing\r\n     * @param fee The amount paid in fees\r\n     **/\r\n    event BackUnbacked(\r\n        address indexed reserve,\r\n        address indexed backer,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on supply()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address initiating the supply\r\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\r\n     * @param amount The amount supplied\r\n     * @param referralCode The referral code used\r\n     **/\r\n    event Supply(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        uint16 indexed referralCode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on withdraw()\r\n     * @param reserve The address of the underlying asset being withdrawn\r\n     * @param user The address initiating the withdrawal, owner of aTokens\r\n     * @param to The address that will receive the underlying\r\n     * @param amount The amount to be withdrawn\r\n     **/\r\n    event Withdraw(\r\n        address indexed reserve,\r\n        address indexed user,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n     * @param reserve The address of the underlying asset being borrowed\r\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n     * initiator of the transaction on flashLoan()\r\n     * @param onBehalfOf The address that will be getting the debt\r\n     * @param amount The amount borrowed out\r\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\r\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\r\n     * @param referralCode The referral code used\r\n     **/\r\n    event Borrow(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        DataTypesV3.InterestRateMode interestRateMode,\r\n        uint256 borrowRate,\r\n        uint16 indexed referralCode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on repay()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The beneficiary of the repayment, getting his debt reduced\r\n     * @param repayer The address of the user initiating the repay(), providing the funds\r\n     * @param amount The amount repaid\r\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\r\n     **/\r\n    event Repay(\r\n        address indexed reserve,\r\n        address indexed user,\r\n        address indexed repayer,\r\n        uint256 amount,\r\n        bool useATokens\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on swapBorrowRateMode()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user swapping his rate mode\r\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n     **/\r\n    event SwapBorrowRateMode(\r\n        address indexed reserve,\r\n        address indexed user,\r\n        DataTypesV3.InterestRateMode interestRateMode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @param totalDebt The total isolation mode debt for the reserve\r\n     */\r\n    event IsolationModeTotalDebtUpdated(\r\n        address indexed asset,\r\n        uint256 totalDebt\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the user selects a certain asset category for eMode\r\n     * @param user The address of the user\r\n     * @param categoryId The category id\r\n     **/\r\n    event UserEModeSet(address indexed user, uint8 categoryId);\r\n\r\n    /**\r\n     * @dev Emitted on setUserUseReserveAsCollateral()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user enabling the usage as collateral\r\n     **/\r\n    event ReserveUsedAsCollateralEnabled(\r\n        address indexed reserve,\r\n        address indexed user\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on setUserUseReserveAsCollateral()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user enabling the usage as collateral\r\n     **/\r\n    event ReserveUsedAsCollateralDisabled(\r\n        address indexed reserve,\r\n        address indexed user\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on rebalanceStableBorrowRate()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user for which the rebalance has been executed\r\n     **/\r\n    event RebalanceStableBorrowRate(\r\n        address indexed reserve,\r\n        address indexed user\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on flashLoan()\r\n     * @param target The address of the flash loan receiver contract\r\n     * @param initiator The address initiating the flash loan\r\n     * @param asset The address of the asset being flash borrowed\r\n     * @param amount The amount flash borrowed\r\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\r\n     * @param premium The fee flash borrowed\r\n     * @param referralCode The referral code used\r\n     **/\r\n    event FlashLoan(\r\n        address indexed target,\r\n        address initiator,\r\n        address indexed asset,\r\n        uint256 amount,\r\n        DataTypesV3.InterestRateMode interestRateMode,\r\n        uint256 premium,\r\n        uint16 indexed referralCode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a borrower is liquidated.\r\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n     * @param user The address of the borrower getting liquidated\r\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\r\n     * @param liquidator The address of the liquidator\r\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n     * to receive the underlying collateral asset directly\r\n     **/\r\n    event LiquidationCall(\r\n        address indexed collateralAsset,\r\n        address indexed debtAsset,\r\n        address indexed user,\r\n        uint256 debtToCover,\r\n        uint256 liquidatedCollateralAmount,\r\n        address liquidator,\r\n        bool receiveAToken\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the state of a reserve is updated.\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param liquidityRate The next liquidity rate\r\n     * @param stableBorrowRate The next stable borrow rate\r\n     * @param variableBorrowRate The next variable borrow rate\r\n     * @param liquidityIndex The next liquidity index\r\n     * @param variableBorrowIndex The next variable borrow index\r\n     **/\r\n    event ReserveDataUpdated(\r\n        address indexed reserve,\r\n        uint256 liquidityRate,\r\n        uint256 stableBorrowRate,\r\n        uint256 variableBorrowRate,\r\n        uint256 liquidityIndex,\r\n        uint256 variableBorrowIndex\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\r\n     * @param reserve The address of the reserve\r\n     * @param amountMinted The amount minted to the treasury\r\n     **/\r\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\r\n\r\n    /**\r\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\r\n     * @param asset The address of the underlying asset to mint\r\n     * @param amount The amount to mint\r\n     * @param onBehalfOf The address that will receive the aTokens\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function mintUnbacked(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\r\n     * @param asset The address of the underlying asset to back\r\n     * @param amount The amount to back\r\n     * @param fee The amount paid in fees\r\n     **/\r\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external;\r\n\r\n    /**\r\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n     * @param asset The address of the underlying asset to supply\r\n     * @param amount The amount to be supplied\r\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n     *   is a different wallet\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function supply(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\r\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n     * @param asset The address of the underlying asset to supply\r\n     * @param amount The amount to be supplied\r\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n     *   is a different wallet\r\n     * @param deadline The deadline timestamp that the permit is valid\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     * @param permitV The V parameter of ERC712 permit sig\r\n     * @param permitR The R parameter of ERC712 permit sig\r\n     * @param permitS The S parameter of ERC712 permit sig\r\n     **/\r\n    function supplyWithPermit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode,\r\n        uint256 deadline,\r\n        uint8 permitV,\r\n        bytes32 permitR,\r\n        bytes32 permitS\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n     * @param asset The address of the underlying asset to withdraw\r\n     * @param amount The underlying amount to be withdrawn\r\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n     * @param to The address that will receive the underlying, same as msg.sender if the user\r\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n     *   different wallet\r\n     * @return The final amount withdrawn\r\n     **/\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\r\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n     * @param asset The address of the underlying asset to borrow\r\n     * @param amount The amount to be borrowed\r\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\r\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n     * if he has been given credit delegation allowance\r\n     **/\r\n    function borrow(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        uint16 referralCode,\r\n        address onBehalfOf\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n     * @param asset The address of the borrowed underlying asset previously borrowed\r\n     * @param amount The amount to repay\r\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\r\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n     * other borrower whose debt should be removed\r\n     * @return The final amount repaid\r\n     **/\r\n    function repay(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        address onBehalfOf\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\r\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n     * @param asset The address of the borrowed underlying asset previously borrowed\r\n     * @param amount The amount to repay\r\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n     * other borrower whose debt should be removed\r\n     * @param deadline The deadline timestamp that the permit is valid\r\n     * @param permitV The V parameter of ERC712 permit sig\r\n     * @param permitR The R parameter of ERC712 permit sig\r\n     * @param permitS The S parameter of ERC712 permit sig\r\n     * @return The final amount repaid\r\n     **/\r\n    function repayWithPermit(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        address onBehalfOf,\r\n        uint256 deadline,\r\n        uint8 permitV,\r\n        bytes32 permitR,\r\n        bytes32 permitS\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\r\n     * equivalent debt tokens\r\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\r\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\r\n     * balance is not enough to cover the whole debt\r\n     * @param asset The address of the borrowed underlying asset previously borrowed\r\n     * @param amount The amount to repay\r\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n     * @return The final amount repaid\r\n     **/\r\n    function repayWithATokens(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\r\n     * @param asset The address of the underlying asset borrowed\r\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n     **/\r\n    function swapBorrowRateMode(\r\n        address asset,\r\n        uint256 interestRateMode\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n     * - Users can be rebalanced if the following conditions are satisfied:\r\n     *     1. Usage ratio is above 95%\r\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\r\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\r\n     * @param asset The address of the underlying asset borrowed\r\n     * @param user The address of the user to be rebalanced\r\n     **/\r\n    function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n    /**\r\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\r\n     * @param asset The address of the underlying asset supplied\r\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\r\n     **/\r\n    function setUserUseReserveAsCollateral(\r\n        address asset,\r\n        bool useAsCollateral\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n     * @param user The address of the borrower getting liquidated\r\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n     * to receive the underlying collateral asset directly\r\n     **/\r\n    function liquidationCall(\r\n        address collateralAsset,\r\n        address debtAsset,\r\n        address user,\r\n        uint256 debtToCover,\r\n        bool receiveAToken\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n     * as long as the amount taken plus a fee is returned.\r\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n     * into consideration. For further details please visit https://developers.aave.com\r\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\r\n     * @param assets The addresses of the assets being flash-borrowed\r\n     * @param amounts The amounts of the assets being flash-borrowed\r\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\r\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n     * @param params Variadic packed params to pass to the receiver as extra information\r\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata interestRateModes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n     * as long as the amount taken plus a fee is returned.\r\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n     * into consideration. For further details please visit https://developers.aave.com\r\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\r\n     * @param asset The address of the asset being flash-borrowed\r\n     * @param amount The amount of the asset being flash-borrowed\r\n     * @param params Variadic packed params to pass to the receiver as extra information\r\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function flashLoanSimple(\r\n        address receiverAddress,\r\n        address asset,\r\n        uint256 amount,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Returns the user account data across all the reserves\r\n     * @param user The address of the user\r\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\r\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\r\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\r\n     * @return currentLiquidationThreshold The liquidation threshold of the user\r\n     * @return ltv The loan to value of The user\r\n     * @return healthFactor The current health factor of the user\r\n     **/\r\n    function getUserAccountData(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalCollateralBase,\r\n            uint256 totalDebtBase,\r\n            uint256 availableBorrowsBase,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n\r\n    /**\r\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\r\n     * interest rate strategy\r\n     * @dev Only callable by the PoolConfigurator contract\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\r\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\r\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\r\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\r\n     **/\r\n    function initReserve(\r\n        address asset,\r\n        address aTokenAddress,\r\n        address stableDebtAddress,\r\n        address variableDebtAddress,\r\n        address interestRateStrategyAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Drop a reserve\r\n     * @dev Only callable by the PoolConfigurator contract\r\n     * @param asset The address of the underlying asset of the reserve\r\n     **/\r\n    function dropReserve(address asset) external;\r\n\r\n    /**\r\n     * @notice Updates the address of the interest rate strategy contract\r\n     * @dev Only callable by the PoolConfigurator contract\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @param rateStrategyAddress The address of the interest rate strategy contract\r\n     **/\r\n    function setReserveInterestRateStrategyAddress(\r\n        address asset,\r\n        address rateStrategyAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Sets the configuration bitmap of the reserve as a whole\r\n     * @dev Only callable by the PoolConfigurator contract\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @param configuration The new configuration bitmap\r\n     **/\r\n    function setConfiguration(\r\n        address asset,\r\n        DataTypesV3.ReserveConfigurationMap calldata configuration\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Returns the configuration of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The configuration of the reserve\r\n     **/\r\n    function getConfiguration(\r\n        address asset\r\n    ) external view returns (DataTypesV3.ReserveConfigurationMap memory);\r\n\r\n    /**\r\n     * @notice Returns the configuration of the user across all the reserves\r\n     * @param user The user address\r\n     * @return The configuration of the user\r\n     **/\r\n    function getUserConfiguration(\r\n        address user\r\n    ) external view returns (DataTypesV3.UserConfigurationMap memory);\r\n\r\n    /**\r\n     * @notice Returns the normalized income normalized income of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The reserve's normalized income\r\n     */\r\n    function getReserveNormalizedIncome(\r\n        address asset\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the normalized variable debt per unit of asset\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The reserve normalized variable debt\r\n     */\r\n    function getReserveNormalizedVariableDebt(\r\n        address asset\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the state and configuration of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The state and configuration data of the reserve\r\n     **/\r\n    function getReserveData(\r\n        address asset\r\n    ) external view returns (DataTypesV3.ReserveData memory);\r\n\r\n    /**\r\n     * @notice Validates and finalizes an aToken transfer\r\n     * @dev Only callable by the overlying aToken of the `asset`\r\n     * @param asset The address of the underlying asset of the aToken\r\n     * @param from The user from which the aTokens are transferred\r\n     * @param to The user receiving the aTokens\r\n     * @param amount The amount being transferred/withdrawn\r\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\r\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\r\n     */\r\n    function finalizeTransfer(\r\n        address asset,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 balanceFromBefore,\r\n        uint256 balanceToBefore\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Returns the list of the underlying assets of all the initialized reserves\r\n     * @dev It does not include dropped reserves\r\n     * @return The addresses of the underlying assets of the initialized reserves\r\n     **/\r\n    function getReservesList() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypesV3.ReserveData struct\r\n     * @param id The id of the reserve as stored in the DataTypesV3.ReserveData struct\r\n     * @return The address of the reserve associated with id\r\n     **/\r\n    function getReserveAddressById(uint16 id) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the PoolAddressesProvider connected to this contract\r\n     * @return The address of the PoolAddressesProvider\r\n     **/\r\n    function ADDRESSES_PROVIDER()\r\n        external\r\n        view\r\n        returns (IPoolAddressesProvider);\r\n\r\n    /**\r\n     * @notice Updates the protocol fee on the bridging\r\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\r\n     */\r\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\r\n\r\n    /**\r\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\r\n     * - A part is sent to aToken holders as extra, one time accumulated interest\r\n     * - A part is collected by the protocol treasury\r\n     * @dev The total premium is calculated on the total borrowed amount\r\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\r\n     * @dev Only callable by the PoolConfigurator contract\r\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\r\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\r\n     */\r\n    function updateFlashloanPremiums(\r\n        uint128 flashLoanPremiumTotal,\r\n        uint128 flashLoanPremiumToProtocol\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Configures a new category for the eMode.\r\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\r\n     * The category 0 is reserved as it's the default for volatile assets\r\n     * @param id The id of the category\r\n     * @param config The configuration of the category\r\n     */\r\n    function configureEModeCategory(\r\n        uint8 id,\r\n        DataTypesV3.EModeCategory memory config\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Returns the data of an eMode category\r\n     * @param id The id of the category\r\n     * @return The configuration data of the category\r\n     */\r\n    function getEModeCategoryData(\r\n        uint8 id\r\n    ) external view returns (DataTypesV3.EModeCategory memory);\r\n\r\n    /**\r\n     * @notice Allows a user to use the protocol in eMode\r\n     * @param categoryId The id of the category\r\n     */\r\n    function setUserEMode(uint8 categoryId) external;\r\n\r\n    /**\r\n     * @notice Returns the eMode the user is using\r\n     * @param user The address of the user\r\n     * @return The eMode id\r\n     */\r\n    function getUserEMode(address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Resets the isolation mode total debt of the given asset to zero\r\n     * @dev It requires the given asset has zero debt ceiling\r\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\r\n     */\r\n    function resetIsolationModeTotalDebt(address asset) external;\r\n\r\n    /**\r\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\r\n     * @return The percentage of available liquidity to borrow, expressed in bps\r\n     */\r\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the total fee on flash loans\r\n     * @return The total fee on flashloans\r\n     */\r\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\r\n\r\n    /**\r\n     * @notice Returns the part of the bridge fees sent to protocol\r\n     * @return The bridge fee sent to the protocol treasury\r\n     */\r\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the part of the flashloan fees sent to protocol\r\n     * @return The flashloan fee sent to the protocol treasury\r\n     */\r\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\r\n\r\n    /**\r\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\r\n     * @return The maximum number of reserves supported\r\n     */\r\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\r\n\r\n    /**\r\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\r\n     * @param assets The list of reserves for which the minting needs to be executed\r\n     **/\r\n    function mintToTreasury(address[] calldata assets) external;\r\n\r\n    /**\r\n     * @notice Rescue and transfer tokens locked in this contract\r\n     * @param token The address of the token\r\n     * @param to The address of the recipient\r\n     * @param amount The amount of token to transfer\r\n     */\r\n    function rescueTokens(address token, address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n     * @dev Deprecated: Use the `supply` function instead\r\n     * @param asset The address of the underlying asset to supply\r\n     * @param amount The amount to be supplied\r\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n     *   is a different wallet\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n}\r\n\r\ninterface IBalancerVault {\r\n  // Pools\r\n  //\r\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n  // functionality:\r\n  //\r\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n  // which increase with the number of registered tokens.\r\n  //\r\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n  // independent of the number of registered tokens.\r\n  //\r\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n  enum PoolSpecialization {\r\n    GENERAL,\r\n    MINIMAL_SWAP_INFO,\r\n    TWO_TOKEN\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a Pool's contract address and specialization setting.\r\n   */\r\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n  // Swaps\r\n  //\r\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n  //\r\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n  // individual swaps.\r\n  //\r\n  // There are two swap kinds:\r\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n  //\r\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n  // the final intended token.\r\n  //\r\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n  // much less gas than they would otherwise.\r\n  //\r\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n  // updating the Pool's internal accounting).\r\n  //\r\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n  //\r\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n  //\r\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n  //\r\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n  enum SwapKind {\r\n    GIVEN_IN,\r\n    GIVEN_OUT\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a swap with a single Pool.\r\n   *\r\n   * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n   * taken from the Pool, which must be greater than or equal to `limit`.\r\n   *\r\n   * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n   * sent to the Pool, which must be less than or equal to `limit`.\r\n   *\r\n   * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n   *\r\n   * Emits a `Swap` event.\r\n   */\r\n  function swap(\r\n    SingleSwap memory singleSwap,\r\n    FundManagement memory funds,\r\n    uint256 limit,\r\n    uint256 deadline\r\n  ) external payable returns (uint256);\r\n\r\n  /**\r\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n   * the `kind` value.\r\n   *\r\n   * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n   * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n   *\r\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n   * used to extend swap behavior.\r\n   */\r\n  struct SingleSwap {\r\n    bytes32 poolId;\r\n    SwapKind kind;\r\n    address assetIn;\r\n    address assetOut;\r\n    uint256 amount;\r\n    bytes userData;\r\n  }\r\n\r\n  /**\r\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n   * `recipient` account.\r\n   *\r\n   * If the caller is not `sender`, it must be an authorized relayer for them.\r\n   *\r\n   * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n   * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n   * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n   * `joinPool`.\r\n   *\r\n   * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n   * transferred. This matches the behavior of `exitPool`.\r\n   *\r\n   * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n   * revert.\r\n   */\r\n  struct FundManagement {\r\n    address sender;\r\n    bool fromInternalBalance;\r\n    address payable recipient;\r\n    bool toInternalBalance;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n   * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n   * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n   * `getPoolTokenInfo`).\r\n   *\r\n   * If the caller is not `sender`, it must be an authorized relayer for them.\r\n   *\r\n   * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n   * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n   * it just enforces these minimums.\r\n   *\r\n   * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n   * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n   * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n   *\r\n   * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n   * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n   * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n   * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n   *\r\n   * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n   * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n   * do so will trigger a revert.\r\n   *\r\n   * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n   * `tokens` array. This array must match the Pool's registered tokens.\r\n   *\r\n   * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n   * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n   * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n   * passed directly to the Pool's contract.\r\n   *\r\n   * Emits a `PoolBalanceChanged` event.\r\n   */\r\n  function exitPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address payable recipient,\r\n    ExitPoolRequest memory request\r\n  ) external;\r\n\r\n  struct ExitPoolRequest {\r\n    address[] assets;\r\n    uint256[] minAmountsOut;\r\n    bytes userData;\r\n    bool toInternalBalance;\r\n  }\r\n\r\n  enum ExitKind {\r\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\r\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\r\n    BPT_IN_FOR_EXACT_TOKENS_OUT\r\n  }\r\n\r\n  function joinPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    JoinPoolRequest memory request\r\n  ) external payable;\r\n\r\n  struct JoinPoolRequest {\r\n    address[] assets;\r\n    uint256[] maxAmountsIn;\r\n    bytes userData;\r\n    bool fromInternalBalance;\r\n  }\r\n\r\n  enum JoinKind {\r\n    INIT,\r\n    EXACT_TOKENS_IN_FOR_BPT_OUT,\r\n    TOKEN_IN_FOR_EXACT_BPT_OUT\r\n  }\r\n\r\n  function getPoolTokenInfo(\r\n    bytes32 poolId,\r\n    IERC20 token\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\r\n\r\n  function getPoolTokens(\r\n    bytes32 poolId\r\n  )\r\n    external\r\n    view\r\n    returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\r\n\r\n  struct BatchSwapStep {\r\n    bytes32 poolId;\r\n    uint256 assetInIndex;\r\n    uint256 assetOutIndex;\r\n    uint256 amount;\r\n    bytes userData;\r\n  }\r\n\r\n  function batchSwap(\r\n    SwapKind kind,\r\n    BatchSwapStep[] memory swaps,\r\n    address[] memory assets,\r\n    FundManagement memory funds,\r\n    int256[] memory limits,\r\n    uint256 deadline\r\n  ) external payable returns (int256[] memory);\r\n\r\n  function flashLoan(\r\n    address recipient,\r\n    IERC20[] memory tokens,\r\n    uint256[] memory amounts,\r\n    bytes memory userData\r\n  ) external;\r\n}\r\n\r\nlibrary BalancerswapAdapter {\r\n  using SafeERC20 for IERC20;\r\n\r\n  struct Path {\r\n    address[] tokens;\r\n    bytes32[] poolIds;\r\n  }\r\n\r\n  error SW_PATH_LENGTH_INVALID();\r\n  error SW_PATH_TOKEN_INVALID();\r\n  error SW_MISMATCH_RETURNED_AMOUNT();\r\n\r\n  address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\r\n\r\n  function swapExactTokensForTokens(\r\n    address assetToSwapFrom,\r\n    address assetToSwapTo,\r\n    uint256 amountToSwap,\r\n    Path calldata path,\r\n    uint256 minAmountOut\r\n  ) external returns (uint256) {\r\n    // Check path is valid\r\n    uint256 length = path.tokens.length;\r\n    if (length <= 1 || length - 1 != path.poolIds.length) revert SW_PATH_LENGTH_INVALID();\r\n    if (path.tokens[0] != assetToSwapFrom || path.tokens[length - 1] != assetToSwapTo) revert SW_PATH_TOKEN_INVALID();\r\n\r\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\r\n    IERC20(assetToSwapFrom).safeApprove(address(BALANCER_VAULT), 0);\r\n    if (IERC20(assetToSwapFrom).allowance(address(this), address(BALANCER_VAULT)) == 0)\r\n      IERC20(assetToSwapFrom).safeApprove(address(BALANCER_VAULT), amountToSwap);\r\n\r\n    IBalancerVault.BatchSwapStep[] memory swaps = new IBalancerVault.BatchSwapStep[](length - 1);\r\n    int256[] memory limits = new int256[](length);\r\n    for (uint256 i; i < length - 1; ++i) {\r\n      swaps[i] = IBalancerVault.BatchSwapStep({\r\n        poolId: path.poolIds[i],\r\n        assetInIndex: i,\r\n        assetOutIndex: i + 1,\r\n        amount: 0,\r\n        userData: \"0\"\r\n      });\r\n    }\r\n    swaps[0].amount = amountToSwap;\r\n    limits[0] = int256(amountToSwap);\r\n    unchecked {\r\n      limits[length - 1] = int256(0 - minAmountOut);\r\n    }\r\n\r\n    IBalancerVault.FundManagement memory funds = IBalancerVault.FundManagement({\r\n      sender: address(this),\r\n      fromInternalBalance: false,\r\n      recipient: payable(address(this)),\r\n      toInternalBalance: false\r\n    });\r\n\r\n    int256[] memory receivedAmount = IBalancerVault(BALANCER_VAULT).batchSwap(\r\n      IBalancerVault.SwapKind.GIVEN_IN,\r\n      swaps,\r\n      path.tokens,\r\n      funds,\r\n      limits,\r\n      block.timestamp\r\n    );\r\n\r\n    uint256 receivedPositveAmount;\r\n    unchecked {\r\n      receivedPositveAmount = uint256(0 - receivedAmount[length - 1]);\r\n    }\r\n\r\n    if (receivedPositveAmount == 0) revert SW_MISMATCH_RETURNED_AMOUNT();\r\n    if (IERC20(assetToSwapTo).balanceOf(address(this)) < receivedPositveAmount) revert SW_MISMATCH_RETURNED_AMOUNT();\r\n\r\n    return receivedPositveAmount;\r\n  }\r\n}\r\n\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    // Taken from https://soliditydeveloper.com/uniswap3\r\n    // Manually added to the interface\r\n    function refundETH() external payable;\r\n}\r\n\r\nlibrary UniswapAdapter {\r\n  using SafeERC20 for IERC20;\r\n\r\n  error SW_PATH_LENGTH_INVALID();\r\n  error SW_PATH_TOKEN_INVALID();\r\n  error SW_MISMATCH_RETURNED_AMOUNT();\r\n\r\n  address private constant UNISWAP_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\n  struct Path {\r\n    address[] tokens;\r\n    uint256[] fees;\r\n  }\r\n\r\n  function swapExactTokensForTokens(\r\n    address assetToSwapFrom,\r\n    address assetToSwapTo,\r\n    uint256 amountToSwap,\r\n    Path calldata path,\r\n    uint256 minAmountOut\r\n  ) external returns (uint256) {\r\n    // Check path is valid\r\n    uint256 length = path.tokens.length;\r\n    if (length <= 1 || length - 1 != path.fees.length) revert SW_PATH_LENGTH_INVALID();\r\n    if (path.tokens[0] != assetToSwapFrom || path.tokens[length - 1] != assetToSwapTo) revert SW_PATH_TOKEN_INVALID();\r\n\r\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\r\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), 0);\r\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), amountToSwap);\r\n\r\n    uint256 receivedAmount;\r\n    if (length > 2) {\r\n      bytes memory _path;\r\n\r\n      for (uint256 i; i < length - 1; ++i) {\r\n        _path = abi.encodePacked(_path, path.tokens[i], uint24(path.fees[i]));\r\n      }\r\n      _path = abi.encodePacked(_path, assetToSwapTo);\r\n\r\n      ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\r\n        path: _path,\r\n        recipient: address(this),\r\n        deadline: block.timestamp,\r\n        amountIn: amountToSwap,\r\n        amountOutMinimum: minAmountOut\r\n      });\r\n\r\n      // Executes the swap.\r\n      receivedAmount = ISwapRouter(UNISWAP_ROUTER).exactInput(params);\r\n    } else {\r\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\r\n        tokenIn: assetToSwapFrom,\r\n        tokenOut: assetToSwapTo,\r\n        fee: uint24(path.fees[0]),\r\n        recipient: address(this),\r\n        deadline: block.timestamp,\r\n        amountIn: amountToSwap,\r\n        amountOutMinimum: minAmountOut,\r\n        sqrtPriceLimitX96: 0\r\n      });\r\n\r\n      // Executes the swap.\r\n      receivedAmount = ISwapRouter(UNISWAP_ROUTER).exactInputSingle(params);\r\n    }\r\n\r\n    if (receivedAmount == 0) revert SW_MISMATCH_RETURNED_AMOUNT();\r\n    if (IERC20(assetToSwapTo).balanceOf(address(this)) < receivedAmount) revert SW_MISMATCH_RETURNED_AMOUNT();\r\n\r\n    return receivedAmount;\r\n  }\r\n}\r\n\r\ninterface ICurveAddressProvider {\r\n  function get_address(uint256 id) external view returns (address);\r\n}\r\n\r\ninterface ICurveExchange {\r\n  function exchange(\r\n    address _pool,\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount,\r\n    uint256 _expected,\r\n    address _receiver\r\n  ) external payable returns (uint256);\r\n\r\n  function exchange_multiple(\r\n    address[9] memory _route,\r\n    uint256[3][4] memory _swap_params,\r\n    uint256 _amount,\r\n    uint256 _expected,\r\n    address[4] memory _pools,\r\n    address _receiver\r\n  ) external payable returns (uint256);\r\n}\r\n\r\nlibrary CurveswapAdapter {\r\n  using SafeERC20 for IERC20;\r\n\r\n  error SW_MISMATCH_RETURNED_AMOUNT();\r\n\r\n  address private constant curveAddressProvider = 0x0000000022D53366457F9d5E68Ec105046FC4383;\r\n\r\n  struct Path {\r\n    address[9] routes;\r\n    uint256[3][4] swapParams;\r\n  }\r\n\r\n  address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n  function swapExactTokensForTokens(\r\n    address assetToSwapFrom,\r\n    address assetToSwapTo,\r\n    uint256 amountToSwap,\r\n    Path calldata path,\r\n    uint256 minAmountOut\r\n  ) external returns (uint256) {\r\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\r\n    address curveExchange = ICurveAddressProvider(curveAddressProvider).get_address(2);\r\n\r\n    IERC20(assetToSwapFrom).safeApprove(address(curveExchange), 0);\r\n    IERC20(assetToSwapFrom).safeApprove(address(curveExchange), amountToSwap);\r\n\r\n    address[4] memory pools;\r\n    uint256 receivedAmount = ICurveExchange(curveExchange).exchange_multiple(\r\n      path.routes,\r\n      path.swapParams,\r\n      amountToSwap,\r\n      minAmountOut,\r\n      pools,\r\n      address(this)\r\n    );\r\n\r\n    if (receivedAmount == 0) revert SW_MISMATCH_RETURNED_AMOUNT();\r\n    uint256 balanceOfAsset;\r\n    if (assetToSwapTo == ETH) {\r\n      balanceOfAsset = address(this).balance;\r\n    } else {\r\n      balanceOfAsset = IERC20(assetToSwapTo).balanceOf(address(this));\r\n    }\r\n    if (balanceOfAsset < receivedAmount - 2) revert SW_MISMATCH_RETURNED_AMOUNT();\r\n    return balanceOfAsset;\r\n  }\r\n}\r\n\r\nabstract contract BaseLeverage is IFlashLoanReceiver, IFlashLoanRecipient, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n\r\n  error LV_INVALID_CONFIGURATION();\r\n  error LV_AMOUNT_NOT_GT_0();\r\n  error LV_SUPPLY_NOT_ALLOWED();\r\n  error LV_SUPPLY_FAILED();\r\n\r\n  address private constant AAVE_LENDING_POOL_ADDRESS = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\r\n\r\n  address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\r\n\r\n  uint256 private constant PERCENTAGE_FACTOR = 100_00;\r\n\r\n  //1 == not inExec\r\n  //2 == inExec;\r\n  //setting default to 1 to save some gas.\r\n  uint256 private _balancerFlashLoanLock = 1;\r\n\r\n  /**\r\n   * This function is called after your contract has received the flash loaned amount\r\n   * overriding executeOperation() in IFlashLoanReceiver\r\n   */\r\n  function executeOperation(\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata premiums,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external override returns (bool) {\r\n    if (initiator != address(this)) revert LV_INVALID_CONFIGURATION();\r\n    if (msg.sender != AAVE_LENDING_POOL_ADDRESS) revert LV_INVALID_CONFIGURATION();\r\n    if (assets.length != amounts.length) revert LV_INVALID_CONFIGURATION();\r\n    if (assets.length != premiums.length) revert LV_INVALID_CONFIGURATION();\r\n    if (amounts[0] == 0) revert LV_INVALID_CONFIGURATION();\r\n    if (assets[0] == address(0)) revert LV_INVALID_CONFIGURATION();\r\n\r\n    _executeOperation(assets[0], amounts[0], premiums[0], params);\r\n\r\n    // approve the Aave LendingPool contract allowance to *pull* the owed amount\r\n    IERC20(assets[0]).safeApprove(AAVE_LENDING_POOL_ADDRESS, 0);\r\n    IERC20(assets[0]).safeApprove(AAVE_LENDING_POOL_ADDRESS, amounts[0] + premiums[0]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * This function is called after your contract has received the flash loaned amount\r\n   * overriding receiveFlashLoan() in IFlashLoanRecipient\r\n   */\r\n  function receiveFlashLoan(\r\n    IERC20[] memory tokens,\r\n    uint256[] memory amounts,\r\n    uint256[] memory feeAmounts,\r\n    bytes memory userData\r\n  ) external override {\r\n    if (msg.sender != BALANCER_VAULT) revert LV_INVALID_CONFIGURATION();\r\n    if (_balancerFlashLoanLock != 2) revert LV_INVALID_CONFIGURATION();\r\n    if (tokens.length != amounts.length) revert LV_INVALID_CONFIGURATION();\r\n    if (tokens.length != feeAmounts.length) revert LV_INVALID_CONFIGURATION();\r\n    if (amounts[0] == 0) revert LV_INVALID_CONFIGURATION();\r\n    if (address(tokens[0]) == address(0)) revert LV_INVALID_CONFIGURATION();\r\n\r\n    _balancerFlashLoanLock = 1;\r\n\r\n    _executeOperation(address(tokens[0]), amounts[0], feeAmounts[0], userData);\r\n\r\n    // send tokens to Balancer vault contract\r\n    IERC20(tokens[0]).safeTransfer(msg.sender, amounts[0] + feeAmounts[0]);\r\n  }\r\n\r\n  function _executeOperation(\r\n    address asset,\r\n    uint256 borrowAmount,\r\n    uint256 fee,\r\n    bytes memory params\r\n  ) internal {\r\n    // parse params\r\n    IBaseLeverage.FlashLoanParams memory opsParams = abi.decode(\r\n      params,\r\n      (IBaseLeverage.FlashLoanParams)\r\n    );\r\n    if (opsParams.minRequiredAmount == 0) revert LV_INVALID_CONFIGURATION();\r\n    if (opsParams.user == address(0)) revert LV_INVALID_CONFIGURATION();\r\n\r\n    if (opsParams.isEnterPosition) {\r\n      _enterPositionWithFlashloan(asset, borrowAmount, fee, opsParams);\r\n    } else {\r\n      _withdrawWithFlashloan(asset, borrowAmount, opsParams);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param _principal - The amount of collateral\r\n   * @param _leverage - Extra leverage value and must be greater than 0, ex. 300% = 300_00\r\n   *                    _principal + _principal * _leverage should be used as collateral\r\n   * @param _borrowAsset - The flashloan borrowing asset address when leverage works\r\n   * @param _collateralAsset - The collateral asset address when leverage works\r\n   * @param _silo - The silo address\r\n   * @param _flashLoanType - 0 is Aave, 1 is Balancer\r\n   * @param _borrowAssetAndCollateral - The uniswap/balancer/curve swap paths between borrowAsset and collateral\r\n   * @param _borrowAssetAndSiloAsset - The uniswap/balancer/curve swap paths between borrowAsset and silo asset\r\n   */\r\n  function enterPositionWithFlashloan(\r\n    uint256 _principal,\r\n    uint256 _leverage,\r\n    address _borrowAsset,\r\n    address _collateralAsset,\r\n    address _silo,\r\n    IBaseLeverage.FlashLoanType _flashLoanType,\r\n    IBaseLeverage.BiDirectSwapInfo calldata _borrowAssetAndCollateral,\r\n    IBaseLeverage.BiDirectSwapInfo calldata _borrowAssetAndSiloAsset\r\n  ) external nonReentrant {\r\n    if (_principal == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_leverage == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_leverage >= 900_00) revert LV_INVALID_CONFIGURATION();\r\n    if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (IERC20(_collateralAsset).balanceOf(msg.sender) < _principal) revert LV_SUPPLY_NOT_ALLOWED();\r\n\r\n    IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _principal);\r\n\r\n    _leverageWithFlashloan(\r\n      IBaseLeverage.LeverageParams(\r\n        msg.sender,\r\n        _principal,\r\n        _leverage,\r\n        _borrowAsset,\r\n        _collateralAsset,\r\n        _silo,\r\n        _flashLoanType,\r\n        _borrowAssetAndCollateral,\r\n        _borrowAssetAndSiloAsset\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param _repayAmount - The amount of repay\r\n   * @param _requiredAmount - The amount of collateral\r\n   * @param _borrowAsset - The flashloan borrowing asset address when leverage works\r\n   * @param _collateralAsset - The collateral asset address when leverage works\r\n   * @param _silo - The silo address\r\n   * @param _flashLoanType - 0 is Aave, 1 is Balancer\r\n   * @param _borrowAssetAndCollateral - The uniswap/balancer/curve swap paths between borrowAsset and collateral asset\r\n   * @param _borrowAssetAndSiloAsset - The uniswap/balancer/curve swap paths between borrowAsset and silo asset\r\n   */\r\n  function withdrawWithFlashloan(\r\n    uint256 _repayAmount,\r\n    uint256 _requiredAmount,\r\n    address _borrowAsset,\r\n    address _collateralAsset,\r\n    address _silo,\r\n    IBaseLeverage.FlashLoanType _flashLoanType,\r\n    IBaseLeverage.BiDirectSwapInfo calldata _borrowAssetAndCollateral,\r\n    IBaseLeverage.BiDirectSwapInfo calldata _borrowAssetAndSiloAsset\r\n  ) external nonReentrant {\r\n    if (_repayAmount == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_requiredAmount == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\r\n\r\n    uint256[] memory amounts = new uint256[](1);\r\n    amounts[0] = _borrowAssetAndSiloAsset.paths[0].inAmount;\r\n    if (amounts[0] == 0) {\r\n      amounts[0] = _repayAmount;\r\n    }\r\n\r\n    bytes memory params = abi.encode(\r\n      false /*leavePosition*/,\r\n      _repayAmount,\r\n      msg.sender,\r\n      _collateralAsset,\r\n      _silo,\r\n      _borrowAssetAndCollateral,\r\n      _borrowAssetAndSiloAsset\r\n    );\r\n\r\n    if (_flashLoanType == IBaseLeverage.FlashLoanType.AAVE) {\r\n      // 0 means revert the transaction if not validated\r\n      uint256[] memory modes = new uint256[](1);\r\n      modes[0] = 0;\r\n\r\n      address[] memory assets = new address[](1);\r\n      assets[0] = _borrowAsset;\r\n      IPool(AAVE_LENDING_POOL_ADDRESS).flashLoan(\r\n        address(this),\r\n        assets,\r\n        amounts,\r\n        modes,\r\n        address(this),\r\n        params,\r\n        0\r\n      );\r\n    } else {\r\n      if (_balancerFlashLoanLock != 1) revert LV_INVALID_CONFIGURATION();\r\n      IERC20[] memory assets = new IERC20[](1);\r\n      assets[0] = IERC20(_borrowAsset);\r\n      _balancerFlashLoanLock = 2;\r\n      IBalancerVault(BALANCER_VAULT).flashLoan(address(this), assets, amounts, params);\r\n    }\r\n\r\n    // remained borrow asset -> collateral\r\n    _swapAsset(\r\n      _borrowAsset,\r\n      _collateralAsset,\r\n      IERC20(_borrowAsset).balanceOf(address(this)),\r\n      _borrowAssetAndCollateral.paths,\r\n      _borrowAssetAndCollateral.pathLength,\r\n      false\r\n    );\r\n\r\n    uint256 collateralAmount = IERC20(_collateralAsset).balanceOf(address(this));\r\n    if (collateralAmount > _requiredAmount) {\r\n      _supply(_collateralAsset, _silo, collateralAmount - _requiredAmount, msg.sender);\r\n      collateralAmount = _requiredAmount;\r\n    }\r\n\r\n    // finally deliver the collateral to user\r\n    IERC20(_collateralAsset).safeTransfer(msg.sender, collateralAmount);\r\n  }\r\n\r\n  /**\r\n   * @param _principal - The amount of zapping asset\r\n   * @param _borrowAmount - The amount of borrowing asset\r\n   * @param _zappingAsset - The address which will zap into collateral asset\r\n   * @param _collateralAsset - The collateral asset address\r\n   * @param _silo - The silo address\r\n   * @param _zapAssetToCollateral - The uniswap/balancer/curve swap paths from zappingAsset to collateral asset\r\n   */\r\n  function zapDeposit(\r\n    uint256 _principal,\r\n    uint256 _borrowAmount,\r\n    address _zappingAsset,\r\n    address _collateralAsset,\r\n    address _silo,\r\n    IBaseLeverage.UniDirectSwapInfo calldata _zapAssetToCollateral\r\n  ) external nonReentrant {\r\n    if (_principal == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_zappingAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (IERC20(_zappingAsset).balanceOf(msg.sender) < _principal) revert LV_SUPPLY_FAILED();\r\n\r\n    IERC20(_zappingAsset).safeTransferFrom(msg.sender, address(this), _principal);\r\n\r\n    uint256 collateralAmount = _swapAsset(\r\n      _zappingAsset, \r\n      _collateralAsset, \r\n      _principal, \r\n      _zapAssetToCollateral.paths, \r\n      _zapAssetToCollateral.pathLength, \r\n      true\r\n    );\r\n    \r\n    // deposit collateral\r\n    _supply(_collateralAsset, _silo, collateralAmount, msg.sender);\r\n\r\n    //borrow\r\n    if (_borrowAmount != 0) {\r\n      _borrow(_silo, _borrowAmount, msg.sender, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param _principal - The amount of the zapping asset\r\n   * @param _leverage - Extra leverage value and must be greater than 0, ex. 300% = 300_00\r\n   *                    principal + principal * leverage should be used as collateral\r\n   * @param _zappingAsset - The address which will zap into collateral asset\r\n   * @param _collateralAsset - The collateral asset address when leverage works\r\n   * @param _borrowAsset - The flashloan borrowing asset address when leverage works\r\n   * @param _silo - The silo address\r\n   * @param _flashLoanType - 0 is Aave, 1 is Balancer\r\n   * @param _zapAssetToCollateral - The uniswap/balancer/curve swap paths from zappingAsset to collateral asset\r\n   * @param _borrowAssetAndCollateral - The uniswap/balancer/curve swap path length between borrowAsset and collateral asset\r\n   * @param _borrowAssetAndSiloAsset - The uniswap/balancer/curve swap between borrowAsset and collateralAsset\r\n   */\r\n  function zapLeverageWithFlashloan(\r\n    uint256 _principal,\r\n    uint256 _leverage,\r\n    address _zappingAsset,\r\n    address _collateralAsset,\r\n    address _borrowAsset,\r\n    address _silo,\r\n    IBaseLeverage.FlashLoanType _flashLoanType,\r\n    IBaseLeverage.UniDirectSwapInfo calldata _zapAssetToCollateral,\r\n    IBaseLeverage.BiDirectSwapInfo calldata _borrowAssetAndCollateral,\r\n    IBaseLeverage.BiDirectSwapInfo calldata _borrowAssetAndSiloAsset\r\n  ) external nonReentrant {\r\n    if (_principal == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_leverage == 0) revert LV_AMOUNT_NOT_GT_0();\r\n    if (_leverage >= 900_00) revert LV_INVALID_CONFIGURATION();\r\n    if (_zappingAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\r\n    if (IERC20(_zappingAsset).balanceOf(msg.sender) < _principal) revert LV_SUPPLY_FAILED();\r\n\r\n    IERC20(_zappingAsset).safeTransferFrom(msg.sender, address(this), _principal);\r\n\r\n    uint256 collateralAmount = _swapAsset(\r\n      _zappingAsset, \r\n      _collateralAsset, \r\n      _principal, \r\n      _zapAssetToCollateral.paths, \r\n      _zapAssetToCollateral.pathLength, \r\n      true\r\n    );\r\n\r\n    _leverageWithFlashloan(\r\n      IBaseLeverage.LeverageParams(\r\n        msg.sender,\r\n        collateralAmount,\r\n        _leverage,\r\n        _borrowAsset,\r\n        _collateralAsset,\r\n        _silo,\r\n        _flashLoanType,\r\n        _borrowAssetAndCollateral,\r\n        _borrowAssetAndSiloAsset\r\n      )\r\n    );\r\n  }\r\n\r\n  function _leverageWithFlashloan(IBaseLeverage.LeverageParams memory _params) internal {\r\n    uint256 minCollateralAmount = _params.principal * (PERCENTAGE_FACTOR + _params.leverage) / PERCENTAGE_FACTOR;\r\n\r\n    bytes memory params = abi.encode(\r\n      true /*enterPosition*/,\r\n      minCollateralAmount,\r\n      _params.user,\r\n      _params.collateralAsset,\r\n      _params.silo,\r\n      _params.borrowAssetAndCollateral,\r\n      _params.borrowAssetAndSiloAsset\r\n    );\r\n\r\n    uint256[] memory amounts = new uint256[](1);\r\n    amounts[0] = _params.borrowAssetAndCollateral.paths[0].inAmount;\r\n    if (_params.flashLoanType == IBaseLeverage.FlashLoanType.AAVE) {\r\n      // 0 means revert the transaction if not validated\r\n      uint256[] memory modes = new uint256[](1);\r\n      address[] memory assets = new address[](1);\r\n      assets[0] = _params.borrowAsset;\r\n      IPool(AAVE_LENDING_POOL_ADDRESS).flashLoan(\r\n        address(this),\r\n        assets,\r\n        amounts,\r\n        modes,\r\n        address(this),\r\n        params,\r\n        0\r\n      );\r\n    } else {\r\n      if (_balancerFlashLoanLock != 1) revert LV_INVALID_CONFIGURATION();\r\n\r\n      IERC20[] memory assets = new IERC20[](1);\r\n      assets[0] = IERC20(_params.borrowAsset);\r\n      _balancerFlashLoanLock = 2;\r\n      IBalancerVault(BALANCER_VAULT).flashLoan(address(this), assets, amounts, params);\r\n      _balancerFlashLoanLock = 1;\r\n    }\r\n\r\n    _afterLeverageWithFlashloan(\r\n      _params.borrowAsset,\r\n      _params\r\n    );\r\n  }\r\n\r\n  function _swapAsset(\r\n    address _fromAsset,\r\n    address _toAsset,\r\n    uint256 _amount,\r\n    IBaseLeverage.MultipSwapPath[3] memory _paths,\r\n    uint256 _pathLength,\r\n    bool _checkOutAmount\r\n  ) internal returns (uint256) {\r\n    if (_pathLength == 0) revert LV_INVALID_CONFIGURATION();\r\n    if (_paths[0].swapFrom != _fromAsset) revert LV_INVALID_CONFIGURATION();\r\n    if (_paths[_pathLength - 1].swapTo != _toAsset) revert LV_INVALID_CONFIGURATION();\r\n\r\n    uint256 amount = _amount;\r\n    if (amount == 0) return 0;\r\n\r\n    for (uint256 i; i < _pathLength; ++i) {\r\n      if (_paths[i].swapType == IBaseLeverage.SwapType.NONE) continue;\r\n\r\n      amount = _processSwap(amount, _paths[i], _checkOutAmount);\r\n    }\r\n\r\n    return amount;\r\n  }\r\n\r\n  function _swapByPath(\r\n    uint256 _fromAmount,\r\n    IBaseLeverage.MultipSwapPath memory _path,\r\n    bool _checkOutAmount\r\n  ) internal returns (uint256) {\r\n    uint256 poolCount = _path.poolCount;\r\n    uint256 outAmount = _checkOutAmount ? _path.outAmount : 0;\r\n    if (poolCount == 0) revert LV_INVALID_CONFIGURATION();\r\n\r\n    if (_path.swapType == IBaseLeverage.SwapType.BALANCER) {\r\n      // Balancer Swap\r\n      BalancerswapAdapter.Path memory path;\r\n      path.tokens = new address[](poolCount + 1);\r\n      path.poolIds = new bytes32[](poolCount);\r\n\r\n      for (uint256 i; i < poolCount; ++i) {\r\n        path.tokens[i] = _path.routes[i * 2];\r\n        path.poolIds[i] = bytes32(_path.routeParams[i][0]);\r\n      }\r\n      path.tokens[poolCount] = _path.routes[poolCount * 2];\r\n\r\n      return\r\n        BalancerswapAdapter.swapExactTokensForTokens(\r\n          _path.swapFrom,\r\n          _path.swapTo,\r\n          _fromAmount,\r\n          path,\r\n          outAmount\r\n        );\r\n    }\r\n\r\n    if (_path.swapType == IBaseLeverage.SwapType.UNISWAP) {\r\n      // UniSwap\r\n      UniswapAdapter.Path memory path;\r\n      path.tokens = new address[](poolCount + 1);\r\n      path.fees = new uint256[](poolCount);\r\n\r\n      for (uint256 i; i < poolCount; ++i) {\r\n        path.tokens[i] = _path.routes[i * 2];\r\n        path.fees[i] = _path.routeParams[i][0];\r\n      }\r\n      path.tokens[poolCount] = _path.routes[poolCount * 2];\r\n\r\n      return\r\n        UniswapAdapter.swapExactTokensForTokens(\r\n          _path.swapFrom,\r\n          _path.swapTo,\r\n          _fromAmount,\r\n          path,\r\n          outAmount\r\n        );\r\n    }\r\n\r\n    // Curve Swap\r\n    return\r\n      CurveswapAdapter.swapExactTokensForTokens(\r\n        _path.swapFrom,\r\n        _path.swapTo,\r\n        _fromAmount,\r\n        CurveswapAdapter.Path(_path.routes, _path.routeParams),\r\n        outAmount\r\n      );\r\n  }\r\n\r\n  function _enterPositionWithFlashloan(\r\n    address _borrowAsset,\r\n    uint256 _borrowedAmount,\r\n    uint256 _fee,\r\n    IBaseLeverage.FlashLoanParams memory _params\r\n  ) internal virtual;\r\n\r\n  function _afterLeverageWithFlashloan(\r\n    address _borrowAsset,\r\n    IBaseLeverage.LeverageParams memory _params\r\n  ) internal virtual;\r\n\r\n  function _withdrawWithFlashloan(\r\n    address _borrowAsset,\r\n    uint256 _borrowedAmount,\r\n    IBaseLeverage.FlashLoanParams memory _params\r\n  ) internal virtual;\r\n\r\n  function _supply(\r\n    address _collateralAsset, \r\n    address _silo, \r\n    uint256 _amount, \r\n    address _user\r\n  ) internal virtual;\r\n\r\n  function _remove(\r\n    uint256 _amount, \r\n    address _silo, \r\n    uint256 _slippage, \r\n    address _user\r\n  ) internal virtual;\r\n\r\n  function _borrow(\r\n    address _silo, \r\n    uint256 _amount, \r\n    address _borrower,\r\n    address _receiver\r\n  ) internal virtual;\r\n\r\n  function _repay(\r\n    address _silo, \r\n    uint256 _amount, \r\n    address _borrower\r\n  ) internal virtual;\r\n\r\n  function _processSwap(\r\n    uint256 _amount,\r\n    IBaseLeverage.MultipSwapPath memory _path,\r\n    bool _checkOutAmount\r\n  ) internal virtual returns (uint256);\r\n}\r\n\r\nstruct VaultAccount {\r\n    uint128 amount; // Total amount, analogous to market cap\r\n    uint128 shares; // Total shares, analogous to shares outstanding\r\n}\r\n\r\ninterface ISturdyPair {\r\n    struct CurrentRateInfo {\r\n        uint32 lastBlock;\r\n        uint32 feeToProtocolRate; // Fee amount 1e5 precision\r\n        uint64 lastTimestamp;\r\n        uint64 ratePerSec;\r\n        uint64 fullUtilizationRate;\r\n    }\r\n\r\n    function CIRCUIT_BREAKER_ADDRESS() external view returns (address);\r\n\r\n    function COMPTROLLER_ADDRESS() external view returns (address);\r\n\r\n    function DEPLOYER_ADDRESS() external view returns (address);\r\n\r\n    function FRAXLEND_WHITELIST_ADDRESS() external view returns (address);\r\n\r\n    function timelockAddress() external view returns (address);\r\n\r\n    function addCollateral(uint256 _collateralAmount, address _borrower) external;\r\n    \r\n    function addInterest(\r\n        bool _returnAccounting\r\n    )\r\n        external\r\n        returns (\r\n            uint256 _interestEarned,\r\n            uint256 _feesAmount,\r\n            uint256 _feesShare,\r\n            CurrentRateInfo memory _currentRateInfo,\r\n            VaultAccount memory _totalAsset,\r\n            VaultAccount memory _totalBorrow\r\n        );\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function approvedBorrowers(address) external view returns (bool);\r\n\r\n    function approvedLenders(address) external view returns (bool);\r\n\r\n    function approveBorrowDelegation(address _delegatee, uint256 _amount) external;\r\n\r\n    function asset() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function borrowAsset(\r\n        uint256 _borrowAmount,\r\n        uint256 _collateralAmount,\r\n        address _receiver\r\n    ) external returns (uint256 _shares);\r\n\r\n    function borrowAssetOnBehalfOf(\r\n        uint256 _borrowAmount,\r\n        address _onBehalfOf\r\n    ) external returns (uint256 _shares);\r\n\r\n    function borrowerWhitelistActive() external view returns (bool);\r\n\r\n    function changeFee(uint32 _newFee) external;\r\n\r\n    function cleanLiquidationFee() external view returns (uint256);\r\n\r\n    function collateralContract() external view returns (address);\r\n\r\n    function currentRateInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint32 lastBlock,\r\n            uint32 feeToProtocolRate,\r\n            uint64 lastTimestamp,\r\n            uint64 ratePerSec,\r\n            uint64 fullUtilizationRate\r\n        );\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n\r\n    function deposit(uint256 _amount, address _receiver) external returns (uint256 _sharesReceived);\r\n\r\n    function dirtyLiquidationFee() external view returns (uint256);\r\n\r\n    function exchangeRateInfo() external view returns (address oracle, uint32 maxOracleDeviation, uint184 lastTimestamp, uint256 lowExchangeRate, uint256 highExchangeRate);\r\n\r\n    function getConstants()\r\n        external\r\n        pure\r\n        returns (\r\n            uint256 _LTV_PRECISION,\r\n            uint256 _LIQ_PRECISION,\r\n            uint256 _UTIL_PREC,\r\n            uint256 _FEE_PRECISION,\r\n            uint256 _EXCHANGE_PRECISION,\r\n            uint256 _DEVIATION_PRECISION,\r\n            uint256 _RATE_PRECISION,\r\n            uint256 _MAX_PROTOCOL_FEE\r\n        );\r\n\r\n    function getImmutableAddressBool()\r\n        external\r\n        view\r\n        returns (\r\n            address _assetContract,\r\n            address _collateralContract,\r\n            address _oracleMultiply,\r\n            address _oracleDivide,\r\n            address _rateContract,\r\n            address _DEPLOYER_CONTRACT,\r\n            address _COMPTROLLER_ADDRESS,\r\n            address _FRAXLEND_WHITELIST,\r\n            bool _borrowerWhitelistActive,\r\n            bool _lenderWhitelistActive\r\n        );\r\n\r\n    function getImmutableUint256()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _oracleNormalization,\r\n            uint256 _maxLTV,\r\n            uint256 _cleanLiquidationFee,\r\n            uint256 _maturityDate,\r\n            uint256 _penaltyRate\r\n        );\r\n\r\n    function getPairAccounting()\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _totalAssetAmount,\r\n            uint128 _totalAssetShares,\r\n            uint128 _totalBorrowAmount,\r\n            uint128 _totalBorrowShares,\r\n            uint256 _totalCollateral\r\n        );\r\n\r\n    function getUserSnapshot(\r\n        address _address\r\n    ) external view returns (uint256 _userAssetShares, uint256 _userBorrowShares, uint256 _userCollateralBalance);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n    function lenderWhitelistActive() external view returns (bool);\r\n\r\n    function leveragedPosition(\r\n        address _swapperAddress,\r\n        uint256 _borrowAmount,\r\n        uint256 _initialCollateralAmount,\r\n        uint256 _amountCollateralOutMin,\r\n        address[] memory _path\r\n    ) external returns (uint256 _totalCollateralBalance);\r\n\r\n    function liquidate(\r\n        uint128 _sharesToLiquidate,\r\n        uint256 _deadline,\r\n        address _borrower\r\n    ) external returns (uint256 _collateralForLiquidator);\r\n\r\n    function maturityDate() external view returns (uint256);\r\n\r\n    function maxLTV() external view returns (uint256);\r\n\r\n    function maxOracleDelay() external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function oracleDivide() external view returns (address);\r\n\r\n    function oracleMultiply() external view returns (address);\r\n\r\n    function oracleNormalization() external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pause() external;\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function penaltyRate() external view returns (uint256);\r\n\r\n    function rateContract() external view returns (address);\r\n\r\n    function redeem(uint256 _shares, address _receiver, address _owner) external returns (uint256 _amountToReturn);\r\n\r\n    function removeCollateral(uint256 _collateralAmount, address _receiver) external;\r\n\r\n    function removeCollateralFrom(\r\n        uint256 _collateralAmount,\r\n        address _receiver,\r\n        address _borrower\r\n    ) external;\r\n\r\n    function setWhitelistedDelegators(address _delegator, bool _enabled) external;\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function repayAsset(uint256 _shares, address _borrower) external returns (uint256 _amountToRepay);\r\n\r\n    function repayAssetWithCollateral(\r\n        address _swapperAddress,\r\n        uint256 _collateralToSwap,\r\n        uint256 _amountAssetOutMin,\r\n        address[] memory _path\r\n    ) external returns (uint256 _amountAssetOut);\r\n\r\n    function setApprovedBorrowers(address[] memory _borrowers, bool _approval) external;\r\n\r\n    function setApprovedLenders(address[] memory _lenders, bool _approval) external;\r\n\r\n    function setMaxOracleDelay(uint256 _newDelay) external;\r\n\r\n    function setSwapper(address _swapper, bool _approval) external;\r\n\r\n    function setTimelock(address _newAddress) external;\r\n\r\n    function swappers(address) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function toAssetAmount(\r\n        uint256 _shares,\r\n        bool _roundUp,\r\n        bool _previewInterest\r\n    ) external view returns (uint256);\r\n\r\n    function toAssetShares(\r\n        uint256 _amount,\r\n        bool _roundUp,\r\n        bool _previewInterest\r\n    ) external view returns (uint256);\r\n\r\n    function toBorrowAmount(\r\n        uint256 _shares,\r\n        bool _roundUp,\r\n        bool _previewInterest\r\n    ) external view returns (uint256 _amount);\r\n\r\n    function toBorrowShares(\r\n        uint256 _amount,\r\n        bool _roundUp,\r\n        bool _previewInterest\r\n    ) external view returns (uint256 _shares);\r\n\r\n    function totalAsset() external view returns (uint128 amount, uint128 shares);\r\n\r\n    function totalBorrow() external view returns (uint128 amount, uint128 shares);\r\n\r\n    function totalCollateral() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function unpause() external;\r\n\r\n    function updateExchangeRate()\r\n        external\r\n        returns (bool _isBorrowAllowed, uint256 _lowExchangeRate, uint256 _highExchangeRate);\r\n\r\n    function userBorrowShares(address) external view returns (uint256);\r\n\r\n    function userCollateralBalance(address) external view returns (uint256);\r\n\r\n    function version() external pure returns (uint256 _major, uint256 _minor, uint256 _patch);\r\n\r\n    function withdrawFees(uint128 _shares, address _recipient) external returns (uint256 _amountToTransfer);\r\n\r\n    function isInterestPaused() external view returns (bool);\r\n}\r\n\r\ninterface ISiloGateway {\r\n    function borrowAsset(\r\n        address _silo,\r\n        uint256 _borrowAmount,\r\n        uint256 _collateralAmount,\r\n        address _collateralAsset,\r\n        address _borrower,\r\n        address _receiver\r\n    ) external;\r\n}\r\n\r\ncontract SturdyLeverage is Ownable, BaseLeverage {\r\n  using SafeERC20 for IERC20;\r\n\r\n  // silo -> silo gateway\r\n  mapping (address => address) private _siloToGateway;\r\n\r\n  error LV_REPAY_FAILED();\r\n\r\n  /**\r\n   * @dev Set the mapping between silos and gateways. \r\n   *      Gateways will be used to borrow asset for the Just-In-Time liquidity features.\r\n   * @param _silos - The silo addresses\r\n   * @param _gateways - The gateway addresses\r\n   */\r\n  function setGateways(\r\n    address[] calldata _silos, \r\n    address[] calldata _gateways\r\n  ) external payable onlyOwner {\r\n    uint256 length = _silos.length;\r\n    if (length != _gateways.length) revert LV_INVALID_CONFIGURATION();\r\n\r\n    for (uint256 i; i < length; ++i) {\r\n      _siloToGateway[_silos[i]] = _gateways[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Get the gateway address for the silo\r\n   * @param _silo - The silo address\r\n   * @return The gateway address\r\n   */\r\n  function getGateway(\r\n    address _silo\r\n  ) external view returns (address) {\r\n    return _siloToGateway[_silo];\r\n  }\r\n\r\n  function _enterPositionWithFlashloan(\r\n    address _borrowAsset,\r\n    uint256 _borrowedAmount,\r\n    uint256 _fee,\r\n    IBaseLeverage.FlashLoanParams memory _params\r\n  ) internal override {\r\n    //swap borrow asset -> collateral\r\n    _swapAsset(\r\n      _borrowAsset,\r\n      _params.collateralAsset,\r\n      _borrowedAmount,\r\n      _params.borrowAssetAndCollateral.paths,\r\n      _params.borrowAssetAndCollateral.pathLength,\r\n      true\r\n    );\r\n\r\n    uint256 collateralAmount = IERC20(_params.collateralAsset).balanceOf(address(this));\r\n    if (collateralAmount < _params.minRequiredAmount) revert LV_SUPPLY_FAILED();\r\n\r\n    //deposit collateral\r\n    _supply(_params.collateralAsset, _params.silo, collateralAmount, _params.user);\r\n\r\n    ISturdyPair pair = ISturdyPair(_params.silo);\r\n    if (pair.asset() == _borrowAsset) {\r\n      //borrow\r\n      _borrow(_params.silo, _borrowedAmount + _fee, _params.user, address(this));\r\n    } else {\r\n      ( uint256 LTV_PRECISION,,,, uint256 EXCHANGE_PRECISION,,,) = pair.getConstants();\r\n      pair.addInterest(false);\r\n\r\n      (,, uint256 exchangeRate) = pair.updateExchangeRate();\r\n      uint256 borrowShares = pair.userBorrowShares(_params.user);\r\n      uint256 borrowAmount =  pair.toBorrowAmount(borrowShares, true, false);\r\n      uint256 collateralAmount = pair.userCollateralBalance(_params.user);\r\n      borrowAmount = collateralAmount * EXCHANGE_PRECISION * pair.maxLTV() / exchangeRate / LTV_PRECISION - borrowAmount;\r\n\r\n      //borrow\r\n      _borrow(_params.silo, borrowAmount, _params.user, address(this));\r\n\r\n      //swap asset -> borrow asset\r\n      _swapAsset(\r\n        pair.asset(),\r\n        _borrowAsset,\r\n        borrowAmount,\r\n        _params.borrowAssetAndSiloAsset.reversePaths,\r\n        _params.borrowAssetAndSiloAsset.pathLength,\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  function _afterLeverageWithFlashloan(\r\n    address _borrowAsset,\r\n    IBaseLeverage.LeverageParams memory _params\r\n  ) internal override {\r\n    address asset = ISturdyPair(_params.silo).asset();\r\n\r\n    if (asset == _borrowAsset) return;\r\n\r\n    // remained borrow asset -> asset\r\n    _swapAsset(\r\n      _borrowAsset,\r\n      asset,\r\n      IERC20(_borrowAsset).balanceOf(address(this)),\r\n      _params.borrowAssetAndSiloAsset.paths,\r\n      _params.borrowAssetAndSiloAsset.pathLength,\r\n      false\r\n    );\r\n\r\n    // repay\r\n    _repay(_params.silo, IERC20(asset).balanceOf(address(this)), _params.user);\r\n  }\r\n\r\n  function _withdrawWithFlashloan(\r\n    address _borrowAsset,\r\n    uint256 _borrowedAmount,\r\n    IBaseLeverage.FlashLoanParams memory _params\r\n  ) internal override {\r\n    ISturdyPair pair = ISturdyPair(_params.silo);\r\n    address asset = pair.asset();\r\n\r\n    if (asset == _borrowAsset) {\r\n      // repay\r\n      _repay(_params.silo, _borrowedAmount, _params.user);\r\n    } else {\r\n      //swap borrow asset -> asset\r\n      _swapAsset(\r\n        _borrowAsset,\r\n        asset,\r\n        _borrowedAmount,\r\n        _params.borrowAssetAndSiloAsset.paths,\r\n        _params.borrowAssetAndSiloAsset.pathLength,\r\n        true\r\n      );\r\n\r\n      uint256 assetAmount = IERC20(asset).balanceOf(address(this));\r\n      if (assetAmount < _params.minRequiredAmount) revert LV_REPAY_FAILED();\r\n\r\n      // repay\r\n      _repay(_params.silo, _params.minRequiredAmount, _params.user);\r\n\r\n      //swap asset -> borrow asset\r\n      _swapAsset(\r\n        asset,\r\n        _borrowAsset,\r\n        assetAmount - _params.minRequiredAmount,\r\n        _params.borrowAssetAndSiloAsset.reversePaths,\r\n        _params.borrowAssetAndSiloAsset.pathLength,\r\n        false\r\n      );\r\n    }\r\n\r\n    // withdraw collateral    \r\n    if (_params.collateralAsset != pair.collateralContract()) revert LV_INVALID_CONFIGURATION();\r\n\r\n    ( uint256 LTV_PRECISION,,,, uint256 EXCHANGE_PRECISION,,,) = pair.getConstants();\r\n    pair.addInterest(false);\r\n\r\n    (,, uint256 exchangeRate) = pair.updateExchangeRate();\r\n    uint256 borrowShares = pair.userBorrowShares(_params.user);\r\n    uint256 borrowAmount =  pair.toBorrowAmount(borrowShares, true, false);\r\n    uint256 collateralAmount = pair.userCollateralBalance(_params.user);\r\n    uint256 withdrawalAmount = collateralAmount - (borrowAmount * exchangeRate * LTV_PRECISION / EXCHANGE_PRECISION / pair.maxLTV());\r\n\r\n    _remove(withdrawalAmount, _params.silo, 0, _params.user);\r\n\r\n    // collateral -> borrow asset\r\n    _swapAsset(\r\n      _params.collateralAsset, \r\n      _borrowAsset, \r\n      IERC20(_params.collateralAsset).balanceOf(address(this)),\r\n      _params.borrowAssetAndCollateral.reversePaths, \r\n      _params.borrowAssetAndCollateral.pathLength,\r\n      true\r\n    );\r\n  }\r\n\r\n  function _supply(\r\n    address _collateralAsset, \r\n    address _silo, \r\n    uint256 _amount, \r\n    address _user\r\n  ) internal override {\r\n    IERC20(_collateralAsset).safeApprove(_silo, 0);\r\n    IERC20(_collateralAsset).safeApprove(_silo, _amount);\r\n    ISturdyPair(_silo).addCollateral(_amount, _user);\r\n  }\r\n\r\n  function _remove(\r\n    uint256 _amount, \r\n    address _silo, \r\n    uint256 _slippage, \r\n    address _user\r\n  ) internal override {\r\n    ISturdyPair(_silo).removeCollateralFrom(_amount, address(this), _user);\r\n  }\r\n\r\n  function _borrow(\r\n    address _silo, \r\n    uint256 _amount, \r\n    address _borrower,\r\n    address _receiver\r\n  ) internal override {\r\n    if (_siloToGateway[_silo] == address(0)) {\r\n      ISturdyPair(_silo).borrowAssetOnBehalfOf(_amount, _borrower);\r\n      \r\n      if (_receiver != address(this)) {\r\n        IERC20(ISturdyPair(_silo).asset()).safeTransfer(_receiver, _amount);\r\n      }\r\n    } else {\r\n      ISiloGateway(_siloToGateway[_silo]).borrowAsset(\r\n        _silo,\r\n        _amount,\r\n        0,\r\n        ISturdyPair(_silo).collateralContract(),\r\n        _borrower,\r\n        _receiver\r\n      );\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  function _repay(\r\n    address _silo, \r\n    uint256 _amount, \r\n    address _borrower\r\n  ) internal override {\r\n    IERC20 borrowAsset = IERC20(ISturdyPair(_silo).asset());\r\n\r\n    ISturdyPair(_silo).addInterest(false);\r\n\r\n    uint256 borrowShares =  ISturdyPair(_silo).toBorrowShares(_amount, false, false);\r\n\r\n    borrowAsset.safeApprove(_silo, 0);\r\n    borrowAsset.safeApprove(_silo, _amount);\r\n\r\n    uint256 paybackAmount = ISturdyPair(_silo).repayAsset(borrowShares, _borrower);\r\n    if (paybackAmount == 0) revert LV_REPAY_FAILED();\r\n  }\r\n\r\n  function _processSwap(\r\n    uint256 _amount,\r\n    IBaseLeverage.MultipSwapPath memory _path,\r\n    bool _checkOutAmount\r\n  ) internal virtual override returns (uint256) {\r\n    return _swapByPath(_amount, _path, _checkOutAmount);\r\n  }\r\n}\r\n\r\ninterface IYearnVault {\r\n    function pricePerShare() external view returns (uint256 price);\r\n\r\n    function deposit(uint256 _amount, address recipient) external returns (uint256);\r\n\r\n    function withdraw(\r\n        uint256 maxShares,\r\n        address recipient,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface ICurvePool {\r\n    function get_virtual_price() external view returns (uint256 price);\r\n\r\n    function price_oracle() external view returns (uint256);\r\n\r\n    function price_oracle(uint256 i) external view returns (uint256);\r\n\r\n    function balances(uint256 _id) external view returns (uint256);\r\n\r\n    function calc_token_amount(\r\n        uint256[2] memory _amounts,\r\n        bool _is_deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(\r\n        uint256[] memory _amounts,\r\n        bool _is_deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\r\n\r\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\r\n    function coins(uint256 index) external view returns (address);\r\n\r\n    function add_liquidity(uint256[2] memory amounts, uint256 _min_mint_amount) external;\r\n\r\n    function add_liquidity(uint256[] memory amounts, uint256 _min_mint_amount) external returns (uint256);\r\n}\r\n\r\n/// @notice  Leverage contract for yearn vault of curve lp token\r\ncontract CrvYearnVaultLeverage2 is SturdyLeverage {\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public immutable YEARN_VAULT;\r\n\r\n  error LV_REQUIRE_MIN_AMOUNT();\r\n\r\n  constructor(\r\n      address _yearnVault\r\n  ) {\r\n    YEARN_VAULT = _yearnVault;\r\n  }\r\n\r\n  function _processSwap(\r\n    uint256 _amount,\r\n    IBaseLeverage.MultipSwapPath memory _path,\r\n    bool _checkOutAmount\r\n  ) internal override returns (uint256) {\r\n    if (_path.swapType > IBaseLeverage.SwapType.WITHDRAW) {\r\n      return _swapByPath(_amount, _path, _checkOutAmount);\r\n    }\r\n\r\n    if (_path.swapType == IBaseLeverage.SwapType.WITHDRAW) {\r\n      if (!_checkOutAmount) revert LV_INVALID_CONFIGURATION();\r\n      \r\n      // Withdraw from Yearn Vault and receive Curve LP token\r\n      uint256 outAmount = IYearnVault(_path.swapFrom).withdraw(_amount, address(this), 1);\r\n      if (outAmount < _path.outAmount) revert LV_REQUIRE_MIN_AMOUNT();\r\n\r\n      return outAmount;\r\n    }\r\n\r\n    address asset = _path.swapFrom;\r\n    address vault = _path.swapTo;\r\n    uint256 outAmount;\r\n\r\n    IERC20(asset).safeApprove(vault, 0);\r\n    IERC20(asset).safeApprove(vault, _amount);\r\n\r\n    if (vault == YEARN_VAULT) {\r\n      // Deposit Curve LP token to Yearn Vault and receive Yearn Vault LP token\r\n      outAmount = IYearnVault(vault).deposit(_amount, address(this));\r\n    } else {\r\n      // Deposit asset to Curve pool and receive LP token.\r\n      uint256[] memory amounts = new uint256[](2);\r\n      for (uint256 i; i < 2; ++i) {\r\n        if (ICurvePool(vault).coins(i) == asset) {\r\n          amounts[i] = _amount;\r\n          break;\r\n        }\r\n      }\r\n\r\n      outAmount = ICurvePool(vault).add_liquidity(amounts, 0);\r\n    }    \r\n\r\n    if (_checkOutAmount && outAmount < _path.outAmount) {\r\n      revert LV_REQUIRE_MIN_AMOUNT();\r\n    }\r\n  \r\n    return outAmount;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yearnVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LV_AMOUNT_NOT_GT_0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_INVALID_CONFIGURATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_REPAY_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_REQUIRE_MIN_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_SUPPLY_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_SUPPLY_NOT_ALLOWED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YEARN_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"enum IBaseLeverage.FlashLoanType\",\"name\":\"_flashLoanType\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.BiDirectSwapInfo\",\"name\":\"_borrowAssetAndCollateral\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.BiDirectSwapInfo\",\"name\":\"_borrowAssetAndSiloAsset\",\"type\":\"tuple\"}],\"name\":\"enterPositionWithFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_silos\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_gateways\",\"type\":\"address[]\"}],\"name\":\"setGateways\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"enum IBaseLeverage.FlashLoanType\",\"name\":\"_flashLoanType\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.BiDirectSwapInfo\",\"name\":\"_borrowAssetAndCollateral\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.BiDirectSwapInfo\",\"name\":\"_borrowAssetAndSiloAsset\",\"type\":\"tuple\"}],\"name\":\"withdrawWithFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zappingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.UniDirectSwapInfo\",\"name\":\"_zapAssetToCollateral\",\"type\":\"tuple\"}],\"name\":\"zapDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zappingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"enum IBaseLeverage.FlashLoanType\",\"name\":\"_flashLoanType\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.UniDirectSwapInfo\",\"name\":\"_zapAssetToCollateral\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.BiDirectSwapInfo\",\"name\":\"_borrowAssetAndCollateral\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.BiDirectSwapInfo\",\"name\":\"_borrowAssetAndSiloAsset\",\"type\":\"tuple\"}],\"name\":\"zapLeverageWithFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrvYearnVaultLeverage2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1660", "ConstructorArguments": "0000000000000000000000002c8a33c66c00264316ea4e4433e86a386eb6ecbf", "EVMVersion": "paris", "Library": "BalancerswapAdapter:dad951530ef3a823d835ef34367a96f5b9077cdb;UniswapAdapter:d23bfa060c2dcb70d4aeb78ebd2ee9a172cf5818;CurveswapAdapter:4827b1bb7fac4bef01273cde0abab695c32402a7", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7acbc21278b407cd12a59568367a64ad73d37dd90d41562931775492e68921f7"}