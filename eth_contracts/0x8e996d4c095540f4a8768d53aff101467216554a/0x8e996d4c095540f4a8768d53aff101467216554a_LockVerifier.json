{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\ncontract LockVerifier {\r\n    \r\n    struct PublicKey {\r\n        bytes32 key;\r\n    }\r\n\r\n    struct EncryptedBalance {\r\n        bytes balance;\r\n    }\r\n\r\n    struct LockProof {\r\n        bytes proofData;\r\n    }\r\n\r\n    function verifyLock(\r\n        PublicKey memory userPublicKey,\r\n        EncryptedBalance memory userEncryptedBalance,\r\n        address contractAddressToLock,\r\n        LockProof memory proof\r\n    ) public pure returns (bool) {\r\n        return _verifyLockProof(userPublicKey, userEncryptedBalance, contractAddressToLock, proof) &&\r\n               _performConsistencyChecks(userEncryptedBalance, contractAddressToLock, proof);\r\n    }\r\n\r\n    function _verifyLockProof(\r\n        PublicKey memory userPublicKey,\r\n        EncryptedBalance memory userEncryptedBalance,\r\n        address contractAddressToLock,\r\n        LockProof memory proof\r\n    ) private pure returns (bool) {\r\n        \r\n        return proof.proofData.length > 0 && userPublicKey.key != 0 && contractAddressToLock != address(0);\r\n    }\r\n\r\n    function _performConsistencyChecks(\r\n        EncryptedBalance memory userEncryptedBalance,\r\n        address contractAddressToLock,\r\n        LockProof memory proof\r\n    ) private pure returns (bool) {\r\n        \r\n        return userEncryptedBalance.balance.length != 0 && proof.proofData[0] != 0;\r\n    }\r\n\r\n    function encodeLockDetails(\r\n        address contractAddressToLock,\r\n        PublicKey memory userPublicKey\r\n    ) public pure returns (bytes memory) {\r\n        \r\n        return abi.encodePacked(contractAddressToLock, userPublicKey.key, _securityKey());\r\n    }\r\n\r\n    function computeEncryptedBalanceHash(EncryptedBalance memory userEncryptedBalance) public pure returns (bytes32) {\r\n        \r\n        return keccak256(abi.encodePacked(userEncryptedBalance.balance, _securityKey()));\r\n    }\r\n\r\n    function _securityKey() private pure returns (bytes32) {\r\n       \r\n        return bytes32(0x9a3f2c1548ee1b93e4a5b6c7d8e9f0a1b2c3d4e5f6789012a3b4c5d6e7f89012);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct LockVerifier.EncryptedBalance\",\"name\":\"userEncryptedBalance\",\"type\":\"tuple\"}],\"name\":\"computeEncryptedBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddressToLock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct LockVerifier.PublicKey\",\"name\":\"userPublicKey\",\"type\":\"tuple\"}],\"name\":\"encodeLockDetails\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct LockVerifier.PublicKey\",\"name\":\"userPublicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct LockVerifier.EncryptedBalance\",\"name\":\"userEncryptedBalance\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"contractAddressToLock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"internalType\":\"struct LockVerifier.LockProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "LockVerifier", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3344081a03823540b2433bd8274c975eb9a107df90ea380485080327f34b94a"}