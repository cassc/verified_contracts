{"SourceCode": "/**\r\n\r\n\ud835\udd4b\ud835\udd59\ud835\udd56 \ud835\udd52\ud835\udd5d\ud835\udd5d\ud835\udd66\ud835\udd63\ud835\udd56 \ud835\udd60\ud835\udd57 \ud835\udd55\ud835\udd5a\ud835\udd64\ud835\udd54\ud835\udd60\ud835\udd67\ud835\udd56\ud835\udd63\ud835\udd5a\ud835\udd5f\ud835\udd58 \ud835\udd59\ud835\udd5a\ud835\udd55\ud835\udd55\ud835\udd56\ud835\udd5f \ud835\udd65\ud835\udd63\ud835\udd66\ud835\udd65\ud835\udd59\ud835\udd64 \ud835\udd5a\ud835\udd64 \ud835\udd5a\ud835\udd63\ud835\udd63\ud835\udd56\ud835\udd64\ud835\udd5a\ud835\udd64\ud835\udd65\ud835\udd5a\ud835\udd53\ud835\udd5d\ud835\udd56, \r\n\ud835\udd6a\ud835\udd56\ud835\udd65 \ud835\udd65\ud835\udd59\ud835\udd56 \ud835\udd5b\ud835\udd60\ud835\udd66\ud835\udd63\ud835\udd5f\ud835\udd56\ud835\udd6a \ud835\udd52\ud835\udd59\ud835\udd56\ud835\udd52\ud835\udd55 \ud835\udd5a\ud835\udd64 \ud835\udd5d\ud835\udd52\ud835\udd55\ud835\udd56\ud835\udd5f \ud835\udd68\ud835\udd5a\ud835\udd65\ud835\udd59 \ud835\udd58\ud835\udd63\ud835\udd52\ud835\udd67\ud835\udd5a\ud835\udd65\ud835\udd6a \ud835\udd52\ud835\udd5f\ud835\udd55 \ud835\udd66\ud835\udd5f\ud835\udd54\ud835\udd56\ud835\udd63\ud835\udd65\ud835\udd52\ud835\udd5a\ud835\udd5f\ud835\udd65\ud835\udd6a. \r\n\ud835\udd4a\ud835\udd60\ud835\udd60\ud835\udd5f \ud835\udd52\ud835\udd5d\ud835\udd5d \ud835\udd68\ud835\udd5a\ud835\udd5d\ud835\udd5d \ud835\udd66\ud835\udd5f\ud835\udd55\ud835\udd56\ud835\udd63\ud835\udd64\ud835\udd65\ud835\udd52\ud835\udd5f\ud835\udd55 \ud835\udd59\ud835\udd56\ud835\udd63.\r\n\r\nhttps://www.conaiha.ai/\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: NONE\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {return _name;}\r\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\r\n    function decimals() public view virtual override returns (uint8) {return 18;}\r\n    function totalSupply() public view virtual override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view virtual override returns (uint256) {return _balances[account];}\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n        _balances[to] += amount;\r\n    }\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        unchecked {\r\n        _balances[account] += amount;\r\n    }\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n    }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract CONAIHA is ERC20, Ownable {\r\n\r\n    modifier lockTheSwap() {\r\n        processingFees = true;\r\n        _;\r\n        processingFees = false;\r\n    }\r\n\r\n    bool private processingFees = false;\r\n    uint256 public maxWallet;\r\n    uint256 public thresholdToProcessFees;\r\n\r\n    address public treasury;\r\n    address public dev;\r\n    address public lpWallet;\r\n    IRouter public router;\r\n    address public automatedMarketMakerAddress;\r\n    mapping(address => bool) public automatedMarketMakerPair;\r\n\r\n    uint256 public buyFee;\r\n    uint256 public sellFee;\r\n    uint256 public liquidityShare;\r\n    uint256 public treasuryShare;\r\n    uint256 public devShare;\r\n    mapping(address => bool) excludedAddresses;\r\n\r\n    bool public tradingEnabled = false;\r\n\r\n    event AMMSet(address indexed pairAddress, bool isAMM);\r\n    event TradingEnabled();\r\n    event NewTreasuryWalletSet(address newTreasury);\r\n    event NewDevWalletSet(address newDevWallet);\r\n    event NewLpWalletSet(address newLpWallet);\r\n    event ThresholdToProcessFeesSet(uint256 oldThreshold, uint256 newThreshold);\r\n    event MaxWalletSet(uint256 oldMaxWallet, uint256 newMaxWallet);\r\n    event FeeSet(uint256 buyFee, uint256 sellFee);\r\n    event FeeSharesSet(\r\n        uint256 newBurnAndLiquidityShare,\r\n        uint256 newTreasuryShare,\r\n        uint256 newOpsShare\r\n    );\r\n    event FeesProcessed();\r\n    event ExcludedAddressSet(address indexed excludedAddress, bool isExcluded);\r\n\r\nconstructor() ERC20(\"Conaiha\", \"CONAIHA\")\r\n    {\r\n        _mint(_msgSender(), 1000000000 * 1e18);\r\n        router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        updateAutomatedMarketMaker(address(_pair), true);\r\n        excludedAddresses[address(_msgSender())] = true;\r\n\r\n        treasury = address(0x00Cb2EEf16307825fB536F42521Ad4c93244eAe8);\r\n        dev = address(0x0C91F5694EA821F03Edf75445411A1A51f4ec15d);\r\n\r\n        excludedAddresses[address(router)] = true;\r\n        excludedAddresses[address(treasury)] = true;\r\n        excludedAddresses[address(dev)] = true;\r\n\r\n        buyFee = 30000;\r\n        sellFee = 30000;\r\n        liquidityShare = 20000;\r\n        treasuryShare = 40000;\r\n        devShare = 40000;\r\n\r\n        lpWallet = address(treasury);\r\n\r\n        maxWallet = 20000000 * 1e18;\r\n        thresholdToProcessFees = 10000000 * 1e18;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function excludeWalletFromFees(address excludedAddress, bool isExcluded) public onlyOwner {\r\n        require(excludedAddress != address(0), \"(New) excluded address can not be address 0x\");\r\n        excludedAddresses[excludedAddress] = isExcluded;\r\n        emit ExcludedAddressSet(excludedAddress, isExcluded);\r\n    }\r\n\r\n    function updateAutomatedMarketMaker(address ammAddress, bool isAMM) public onlyOwner {\r\n        require(ammAddress != address(0), \"(New) AMM address can not be address 0x\");\r\n        automatedMarketMakerPair[ammAddress] = isAMM;\r\n        automatedMarketMakerAddress = ammAddress;\r\n        emit AMMSet(ammAddress, isAMM);\r\n    }\r\n\r\n    function setThresholdToProcessFees(uint256 newThreshold) external onlyOwner {\r\n        require(newThreshold >= 1000 * 1e18, \"1000 is the minmum\");\r\n        uint256 _oldThreshold = thresholdToProcessFees;\r\n        thresholdToProcessFees = newThreshold;\r\n        emit ThresholdToProcessFeesSet(_oldThreshold, newThreshold);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newMaxWallet) external onlyOwner {\r\n        require(newMaxWallet >= 1000000 * 1e18, \"Max wallet is less the minimum then 0,1% of totalSupply\");\r\n        uint256 _oldMaxWallet = maxWallet;\r\n        maxWallet = newMaxWallet;\r\n        emit MaxWalletSet(_oldMaxWallet, newMaxWallet);\r\n    }\r\n\r\n    function setFeePercentage(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\r\n        require(newBuyFee >= 0, \"Buy fee is less than 0\");\r\n        require(newSellFee >= 0, \"Sell fee is less than 0\");\r\n        require(newBuyFee != buyFee, \"Buy fee is already that percentage\");\r\n        require(newSellFee != sellFee, \"Sell fee is already that percentage\");\r\n\r\n        buyFee = newBuyFee;\r\n        sellFee = newSellFee;\r\n\r\n        emit FeeSet(buyFee, sellFee);\r\n    }\r\n\r\n    function setFeeDistributions(uint256 newLiquidityShare, uint256 newTreasuryShare, uint256 newDevShare) external onlyOwner {\r\n        require(newLiquidityShare + newTreasuryShare + newDevShare == 100000,\r\n            \"Summed fee shares are not 100% (100000)!\"\r\n        );\r\n\r\n        liquidityShare = newLiquidityShare;\r\n        treasuryShare = newTreasuryShare;\r\n        devShare = newDevShare;\r\n\r\n        emit FeeSharesSet(\r\n            newLiquidityShare,\r\n            newTreasuryShare,\r\n            newDevShare\r\n        );\r\n    }\r\n\r\n    function updateTreasuryWallet(address newTreasury) public onlyOwner {\r\n        require(newTreasury != address(0), \"New treasury can not be address 0x\");\r\n        excludedAddresses[address(treasury)] = false;\r\n        treasury = newTreasury;\r\n        excludedAddresses[address(newTreasury)] = true;\r\n        emit NewTreasuryWalletSet(newTreasury);\r\n    }\r\n\r\n    function updateDevWallet(address newDevWallet) public onlyOwner {\r\n        require(newDevWallet != address(0), \"New operations wallet can not be address 0x\");\r\n        excludedAddresses[address(dev)] = false;\r\n        dev = newDevWallet;\r\n        excludedAddresses[address(newDevWallet)] = true;\r\n        emit NewDevWalletSet(newDevWallet);\r\n    }\r\n\r\n    function setLiquidityFeeReceiver(address newLpWallet) public onlyOwner {\r\n        lpWallet = newLpWallet;\r\n        emit NewLpWalletSet(newLpWallet);\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(tradingEnabled || from == owner(), \"Trading will enable when AMM is set\");\r\n\r\n        if (excludedAddresses[from] || excludedAddresses[to]) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 _transferAmount = amount;\r\n\r\n        if (automatedMarketMakerPair[from] || automatedMarketMakerPair[to]) {\r\n            uint256 _txnFee;\r\n\r\n            if (automatedMarketMakerPair[from]) {\r\n                _txnFee = (_transferAmount * buyFee) / 100000;\r\n            }\r\n\r\n            if (automatedMarketMakerPair[to]) {\r\n                _txnFee = (_transferAmount * sellFee) / 100000;\r\n\r\n                if (!processingFees && balanceOf(address(this)) >= thresholdToProcessFees) {\r\n                    processFees();\r\n                }\r\n            }\r\n\r\n            _transferAmount = _transferAmount - _txnFee;\r\n\r\n            if (automatedMarketMakerPair[from]) {\r\n                require(balanceOf(automatedMarketMakerPair[from] ? to : from) + _transferAmount <= maxWallet,\r\n                    \"transaction exceeds max wallet\");\r\n            }\r\n\r\n            super._transfer(from, address(this), _txnFee);\r\n        }\r\n\r\n        if (automatedMarketMakerPair[to] && !processingFees\r\n        && balanceOf(address(this)) >= thresholdToProcessFees\r\n        ) {\r\n            processFees();\r\n        }\r\n\r\n        super._transfer(from, to, _transferAmount);\r\n    }\r\n\r\n    function processFees() public lockTheSwap {\r\n        uint256 _contractBalance = balanceOf(address(this));\r\n        require(_contractBalance != 0, \"Token balance cannot be 0\");\r\n        uint256 _liquidityTokens = 0;\r\n        uint256 _swapAmount = _contractBalance;\r\n\r\n        if (liquidityShare != 0) {\r\n            _liquidityTokens = (_contractBalance * (liquidityShare / 2)) / 100000;\r\n            _swapAmount = _contractBalance - _liquidityTokens;\r\n        }\r\n\r\n        _swapTokensForEth(_swapAmount);\r\n\r\n        uint256 _balance = address(this).balance;\r\n\r\n        require(_balance != 0, \"ETH balance cannot be 0\");\r\n\r\n        if (liquidityShare != 0) {\r\n            uint256 _ethForLiquidity = (_balance * (liquidityShare / 2)) / 100000;\r\n\r\n            _addLiquidityETH(\r\n                address(this),\r\n                _liquidityTokens,\r\n                _ethForLiquidity\r\n            );\r\n        }\r\n\r\n        if (treasuryShare != 0) {\r\n            uint256 _ethForTreasury = (_balance * treasuryShare) / 100000;\r\n            (bool treasurySendSuccess,) = treasury.call{value : _ethForTreasury}(\"\");\r\n            require(treasurySendSuccess, \"Transfer to treasury failed.\");\r\n        }\r\n\r\n        if (devShare != 0) {\r\n            uint256 _ethForDev = (_balance * devShare) / 100000;\r\n            (bool devWalletSendSuccess,) = dev.call{value : _ethForDev}(\"\");\r\n            require(devWalletSendSuccess, \"Transfer to dev failed.\");\r\n        }\r\n\r\n        emit FeesProcessed();\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidityETH(address token, uint256 tokenAmount, uint256 ethAmount) internal {\r\n        IERC20(token).approve(address(router), tokenAmount);\r\n        router.addLiquidityETH{value : ethAmount}(\r\n            token,\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(lpWallet),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function rescueWETH() external onlyOwner {\r\n        address wethAddress = router.WETH();\r\n        IWETH(wethAddress).withdraw(\r\n            IERC20(wethAddress).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function rescueETH() external onlyOwner {\r\n        uint256 _balance = address(this).balance;\r\n        require(_balance > 0, \"No ETH to withdraw\");\r\n\r\n        (bool success,) = dev.call{value : _balance}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n    function rescueTokens(address tokenAddress) external onlyOwner {\r\n        IERC20 tokenContract = IERC20(tokenAddress);\r\n        tokenContract.transfer(address(dev), tokenContract.balanceOf(address(this)));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAMM\",\"type\":\"bool\"}],\"name\":\"AMMSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnAndLiquidityShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOpsShare\",\"type\":\"uint256\"}],\"name\":\"FeeSharesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"NewDevWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLpWallet\",\"type\":\"address\"}],\"name\":\"NewLpWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasuryWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdToProcessFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automatedMarketMakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeWalletFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTreasuryShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDevShare\",\"type\":\"uint256\"}],\"name\":\"setFeeDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setThresholdToProcessFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdToProcessFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAMM\",\"type\":\"bool\"}],\"name\":\"updateAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CONAIHA", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "250", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f13b347f72d9bf2c98c55ade703f9835cd8a7d0ff47818ca4d248a82187d2df9"}