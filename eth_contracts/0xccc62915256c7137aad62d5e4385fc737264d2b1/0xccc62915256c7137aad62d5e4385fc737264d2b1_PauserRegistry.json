{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/eigenlayer-contracts/src/contracts/permissions/PauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.12;\\n\\nimport \\\"../interfaces/IPauserRegistry.sol\\\";\\n\\n/**\\n * @title Defines pauser & unpauser roles + modifiers to be used elsewhere.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ncontract PauserRegistry is IPauserRegistry {\\n    /// @notice Mapping of addresses to whether they hold the pauser role.\\n    mapping(address => bool) public isPauser;\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    address public unpauser;\\n\\n    modifier onlyUnpauser() {\\n        require(msg.sender == unpauser, \\\"msg.sender is not permissioned as unpauser\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _pausers, address _unpauser) {\\n        for (uint256 i = 0; i < _pausers.length; i++) {\\n            _setIsPauser(_pausers[i], true);\\n        }\\n        _setUnpauser(_unpauser);\\n    }\\n\\n    /// @notice Sets new pauser - only callable by unpauser, as the unpauser is expected to be kept more secure, e.g. being a multisig with a higher threshold\\n    /// @param newPauser Address to be added/removed as pauser\\n    /// @param canPause Whether the address should be added or removed as pauser\\n    function setIsPauser(address newPauser, bool canPause) external onlyUnpauser {\\n        _setIsPauser(newPauser, canPause);\\n    }\\n\\n    /// @notice Sets new unpauser - only callable by unpauser, as the unpauser is expected to be kept more secure, e.g. being a multisig with a higher threshold\\n    function setUnpauser(address newUnpauser) external onlyUnpauser {\\n        _setUnpauser(newUnpauser);\\n    }\\n\\n    function _setIsPauser(address pauser, bool canPause) internal {\\n        require(pauser != address(0), \\\"PauserRegistry._setPauser: zero address input\\\");\\n        isPauser[pauser] = canPause;\\n        emit PauserStatusChanged(pauser, canPause);\\n    }\\n\\n    function _setUnpauser(address newUnpauser) internal {\\n        require(newUnpauser != address(0), \\\"PauserRegistry._setUnpauser: zero address input\\\");\\n        emit UnpauserChanged(unpauser, newUnpauser);\\n        unpauser = newUnpauser;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IPauserRegistry {\\n    event PauserStatusChanged(address pauser, bool canPause);\\n\\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n\\n    /// @notice Mapping of addresses to whether they hold the pauser role.\\n    function isPauser(address pauser) external view returns (bool);\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    function unpauser() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"eigenlayer-middleware/=lib/eigenlayer-middleware/src/\",\r\n      \"eigenlayer-core/=lib/eigenlayer-contracts/src/\",\r\n      \"@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/eigenlayer-contracts/lib/ds-test/src/\",\r\n      \"eigenlayer-contracts/=lib/eigenlayer-contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/eigenlayer-contracts/lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pausers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_unpauser\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canPause\",\"type\":\"bool\"}],\"name\":\"PauserStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousUnpauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUnpauser\",\"type\":\"address\"}],\"name\":\"UnpauserChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canPause\",\"type\":\"bool\"}],\"name\":\"setIsPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnpauser\",\"type\":\"address\"}],\"name\":\"setUnpauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PauserRegistry", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000004e9bb2be300005a6dfd80645afa6be58c4f0a41b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e9bb2be300005a6dfd80645afa6be58c4f0a41b", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}