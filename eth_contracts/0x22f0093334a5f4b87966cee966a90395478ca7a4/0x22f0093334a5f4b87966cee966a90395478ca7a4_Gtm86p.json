{"SourceCode": "/**\r\n                            ##############################                         \r\n                            ,##############################                         \r\n                            ,############### ,( (##########                         \r\n        &.################################.##*(################                   \r\n        &.################################.##*(################                   \r\n        &.#####################################################                   \r\n                    #......&&&&&&.............(################                   \r\n                    #......&&&&&&.............(################                   \r\n        & .................&&&&&&..................######......######&            \r\n        & .................&&&&&&..................######......######&            \r\n    & .................&&&&&&.................*############......######&            \r\n    & .................&&&&&&.................*############......######&            \r\n    & .................&&&&&&.................*############......######&            \r\n        &,&&&&&&&&&&&&&&&&&&&&&&&........................######                   \r\n        &,&&&&&&&&&&&&&&&&&&&&&&&........................######                   \r\n        &&&&&&&&&&&#.................................... &&&&&(                  \r\n                    #....................................                         \r\n                &################################################                   \r\n                &################################################                   \r\n        &,,,,,,################################################ ,,,,,&            \r\n        &.################&&&&&&&####################################&            \r\n    ,,,,&.############&&&&&&&&&&&&&&&#######################&#  ..... .&&         \r\n    & #################&&&&&&&&&&&&&&&&&&#################&  ...........,,,,.*&     \r\n    & ################&&&&&&&  &  &&&  &&&#############&\uff0f    .*\uff0f\uff0f,,,,,,,\uff0f\uff0f.,,*, &   \r\n    & ...........#####&&       &  &&&  &&&#####\uff0f.....#&    **,,,,\uff0f.\uff0f..\uff0f,,,**\uff0f*,,,\uff0f& \r\n    & ...........#####&&       &       &&######\uff0f.....& ...**,,,....**,...\uff0f****.,,,\uff0f&\r\n    & ...........######&&&&&&&&&&&&&&&&&#######\uff0f.....#...*\uff0f,,,,,\uff0f..\uff0f,,*.*\uff0f*****,,, (\r\n    & .................##&&&&&&&&&&&&&################...**,,***\uff0f..\uff0f\uff0f\uff0f\uff0f..\uff0f*****,,,.\uff0f\r\n    & .................##############################&....\uff0f,****\uff0f.,\uff0f**\uff0f..\uff0f****.,..\uff0f&\r\n    & ...........######################################,,,,\uff0f***\uff0f\uff0f\uff0f.\uff0f*,\uff0f\uff0f*****....\uff0f(\uff0f\r\n    & ...........######################################& ,,,,\uff0f************* ....\uff0f&  \r\n    \uff0f            ##################            \uff0f#########&\uff0f,,,,,,,.....,,....,\uff0f&.   \r\n                &##################(          &\uff0f############&\uff0f\uff0f,,,,,.....**\uff0f&#      \r\n        #(\uff0f\uff0f\uff0f\uff0f\uff0f##################(          &\uff0f#################*&&&&&&            \r\n        &.#################                       &##################&            \r\n        &.#################                       &##################&            \r\n    & #######################                       &#######################&       \r\n    & #######################                       &#######################&       \r\n    \uff0f                       &                      &                       &\r\n\r\n    GandalfTrumpMario86Pepe ($COSMOS)\r\n\r\n    Website:  https://gtm86p.com\r\n    Twitter:  https://twitter.com/gtm86p\r\n    Telegram: http://t.me/gtm86p\r\n\r\n    GTM86P is an innovative ERC20 token project originating from a community, aiming to revolutionize the blockchain system by breaking decentralization barriers. \r\nInspired by the courage of Gandalf, the business acumen of Trump, the determination of Mario, and the wisdom of PEPE, \r\nGTM86P is committed to enhancing transaction speeds and unlocking infinite potential.\r\nOur heroes symbolize our dedication to technological advancement, improvement of user experience, and overcoming challenges. \r\nThe emergence of '86' marks a new era filled with upgraded technology and unbounded potential.\r\nJoin our GTM86P community, a world full of passion, fiery innovation, and a shared bright future.\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniRouter {\r\n    function factoryV2() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Gtm86p is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    IUniRouter private _uniRouter;\r\n    address private _uniPair;\r\n    address payable private _taxWallet;\r\n\r\n    bool public transferDelayEnabled = true;\r\n    uint256 public finalBuyTax = 1;\r\n    uint256 public finalSellTax = 1;\r\n    uint256 private _initialBuyTax = 15;\r\n    uint256 private _initialSellTax = 30;\r\n    uint256 private _reduceBuyTaxAt = 30;\r\n    uint256 private _reduceSellTaxAt = 86;\r\n    uint256 private _preventSwapBefore = 30;\r\n    uint256 private _buyCount = 0;\r\n\r\n    string private constant _name = \"GandalfTrumpMario86Pepe\";\r\n    string private constant _symbol = \"COSMOS\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 860_000_000_000_000 * 10 ** _decimals;\r\n\r\n    bool private _tradingOpen;\r\n    uint256 public maxWalletSize = _tTotal * 2 / 100;\r\n    uint256 public maxTxAmount = _tTotal * 2 / 100;\r\n    uint256 private _taxSwapThreshold = _tTotal * 5 / 1000;\r\n    uint256 private _maxTaxSwap = _tTotal * 5 / 1000;\r\n    bool private _inSwap = false;\r\n    bool private _swapEnabled = false;\r\n\r\n    modifier lockTheSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[address(this)] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _uniRouter = IUniRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(_uniRouter), type(uint256).max);\r\n        _approve(address(this), address(this), type(uint256).max);\r\n        _uniPair = IUniFactory(_uniRouter.factory()).createPair(address(this), _uniRouter.WETH());\r\n        emit Transfer(address(0), address(this), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(_uniRouter) && to != address(_uniPair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number, \"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _uniPair && to != address(_uniRouter) && !_isExcludedFromFee[to] ) {\r\n                require(_tradingOpen, \"not open pls wait\");\r\n                require(amount <= maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt) ? finalBuyTax : _initialBuyTax).div(100);\r\n            if (to == _uniPair && from != address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt) ? finalSellTax : _initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_inSwap && to == _uniPair && _swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {\r\n                _swapTokensForEth(_min(amount, _min(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    _sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n          _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) private pure returns (uint256){\r\n        return (a>b)?b:a;\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {return;}\r\n        if (!_tradingOpen) {return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniRouter.WETH();\r\n        _approve(address(this), address(_uniRouter), tokenAmount);\r\n        _uniRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function removeLimits() public onlyOwner{\r\n        maxTxAmount = _tTotal;\r\n        maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        _reduceSellTaxAt = 1;\r\n        _reduceBuyTaxAt = 1;\r\n    }\r\n\r\n    function letsAGo() external onlyOwner() {\r\n        require(!_tradingOpen, \"Already open\");\r\n        _uniRouter.addLiquidityETH{value: 1 ether}(address(this), balanceOf(address(this)), 0, 0, _msgSender(), block.timestamp);\r\n        _swapEnabled = true;\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0){\r\n            _swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0){\r\n            _sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"letsAGo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Gtm86p", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8058a806c87cc357c9353c05e3836db30ca70421d3d55799a451bd3294e4962d"}