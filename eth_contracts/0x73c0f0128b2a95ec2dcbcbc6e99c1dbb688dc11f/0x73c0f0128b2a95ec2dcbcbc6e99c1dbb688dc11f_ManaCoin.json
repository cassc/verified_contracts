{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract ManaCoin is Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    uint256 public maxWalletLimit;\r\n    uint256 public maxTxLimit;\r\n    address payable public treasury;\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public buyTax;\r\n    uint256 public sellTax;\r\n    bool public tradingActive;\r\n    uint256 public totalBurned;\r\n    uint256 public totalLpAdded;\r\n    uint256 public totalReflected;\r\n    uint256 public totalTreasury;\r\n    uint256 public totalAdded;\r\n    bool public burnFlag;\r\n    bool public autoLpFlag;\r\n    bool public reflectionFlag;\r\n    bool public treasuryFlag;\r\n    bool public limitsInEffect;\r\n\r\n    uint256 public swapableRefection;\r\n    uint256 public swapableTreasury;\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n\r\n    uint256 public ethReflectionBasis;\r\n    uint256 public reflectionCooldown;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => uint256) public lastReflectionBasis;\r\n    mapping(address => uint256) public totalClaimedReflection;\r\n    mapping(address => uint256) public lastReflectionCooldown;\r\n    mapping(address => uint256) private _claimableReflection;\r\n    mapping(address => bool) private _reflectionExcluded;\r\n\r\n    mapping(address => bool) public lpPairs;\r\n    mapping(address => bool) private _isExcludedFromTax;\r\n\r\n    event functionType(uint Type, address indexed sender, uint256 amount);\r\n    event reflectionClaimed(address indexed recipient, uint256 amount);\r\n    event burned(address indexed sender, uint256 amount);\r\n    event autoLpadded(address indexed sender, uint256 amount);\r\n    event reflected(address indexed sender, uint256 amount);\r\n    event addedTreasury(address indexed sender, uint256 amount);\r\n    event buyTaxStatus(uint256 previousBuyTax, uint256 newBuyTax);\r\n    event sellTaxStatus(uint256 previousSellTax, uint256 newSellTax);\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address payable _treasury,\r\n        uint256 _reflectionCooldown,\r\n        uint256 maxTxLimit_,\r\n        uint256 maxWalletLimit_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n        _totalSupply = totalSupply_.mul(10 ** _decimals);\r\n        _balances[owner()] = _balances[owner()].add(_totalSupply);\r\n\r\n        treasury = payable(_treasury);\r\n        sellTax = 15;\r\n        buyTax = 10;\r\n        maxTxLimit = maxTxLimit_;\r\n        maxWalletLimit = maxWalletLimit_;\r\n        reflectionCooldown = _reflectionCooldown;\r\n        limitsInEffect = true;\r\n\r\n        dexRouter = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(\r\n            address(this),\r\n            dexRouter.WETH()\r\n        );\r\n        lpPairs[lpPair] = true;\r\n\r\n        _approve(owner(), address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n\r\n        _isExcludedFromTax[owner()] = true;\r\n        _isExcludedFromTax[address(this)] = true;\r\n        _isExcludedFromTax[lpPair] = true;\r\n        _isExcludedFromTax[treasury] = true;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n        emit Approval(owner(), address(dexRouter), type(uint256).max);\r\n        emit Approval(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    receive() external payable {} // ETH receivable\r\n\r\n    // Default ERC20 functions\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function allowance(\r\n        address sender,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[sender][spender];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        address _sender = _msgSender();\r\n        require(_sender != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != DEAD, \"ERC20: Dead Address\");\r\n        require(\r\n            _balances[_sender] >= amount,\r\n            \"ERC20: Amount exceeds account balance\"\r\n        );\r\n\r\n        _transfer(_sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != DEAD, \"ERC20: Dead Address\");\r\n        require(\r\n            _allowances[sender][_msgSender()] >= amount,\r\n            \"ERC20: Insufficient allowance.\"\r\n        );\r\n        require(\r\n            _balances[sender] >= amount,\r\n            \"ERC20: Amount exceeds sender's account balance\"\r\n        );\r\n\r\n        if (_allowances[sender][_msgSender()] != type(uint256).max) {\r\n            _allowances[sender][_msgSender()] = _allowances[sender][\r\n                _msgSender()\r\n            ].sub(amount);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (sender == owner() && lpPairs[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else if (lpPairs[sender] || lpPairs[recipient]) {\r\n            require(tradingActive == true, \"ERC20: Trading is not active.\");\r\n\r\n            if (_isExcludedFromTax[sender] && !_isExcludedFromTax[recipient]) {\r\n                if (\r\n                    _checkMaxWalletLimit(recipient, amount) &&\r\n                    _checkMaxTxLimit(amount)\r\n                ) {\r\n                    _transferFromExcluded(sender, recipient, amount);\r\n                }\r\n            } else if (\r\n                !_isExcludedFromTax[sender] && _isExcludedFromTax[recipient]\r\n            ) {\r\n                if (_checkMaxTxLimit(amount)) {\r\n                    _transferToExcluded(sender, recipient, amount);\r\n                }\r\n            } else if (\r\n                _isExcludedFromTax[sender] && _isExcludedFromTax[recipient]\r\n            ) {\r\n                if (\r\n                    sender == owner() ||\r\n                    recipient == owner() ||\r\n                    sender == address(this) ||\r\n                    recipient == address(this)\r\n                ) {\r\n                    _transferBothExcluded(sender, recipient, amount);\r\n                } else if (lpPairs[recipient]) {\r\n                    if (_checkMaxTxLimit(amount)) {\r\n                        _transferBothExcluded(sender, recipient, amount);\r\n                    }\r\n                } else if (\r\n                    _checkMaxWalletLimit(recipient, amount) &&\r\n                    _checkMaxTxLimit(amount)\r\n                ) {\r\n                    _transferBothExcluded(sender, recipient, amount);\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                sender == owner() ||\r\n                recipient == owner() ||\r\n                sender == address(this) ||\r\n                recipient == address(this)\r\n            ) {\r\n                _transferBothExcluded(sender, recipient, amount);\r\n            } else if (\r\n                _checkMaxWalletLimit(recipient, amount) &&\r\n                _checkMaxTxLimit(amount)\r\n            ) {\r\n                _transferBothExcluded(sender, recipient, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 _taxStrategyID = _takeRandomTaxApproachID();\r\n        uint256 taxAmount = amount.mul(buyTax).div(100);\r\n        uint256 receiveAmount = amount.sub(taxAmount);\r\n\r\n        _claimableReflection[recipient] = _claimableReflection[recipient].add(\r\n            _unclaimedReflection(recipient)\r\n        );\r\n        lastReflectionBasis[recipient] = ethReflectionBasis;\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(receiveAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n\r\n        if (_taxStrategyID == 1) {\r\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\r\n            _burn(recipient, taxAmount);\r\n        } else if (_taxStrategyID == 2) {\r\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\r\n            _autoLpFrom(recipient, taxAmount);\r\n        } else if (_taxStrategyID == 3) {\r\n            swapableRefection = swapableRefection.add(taxAmount);\r\n            totalReflected = totalReflected.add(taxAmount);\r\n            emit reflected(recipient, taxAmount);\r\n        } else if (_taxStrategyID == 4) {\r\n            swapableTreasury = swapableTreasury.add(taxAmount);\r\n            totalTreasury = totalTreasury.add(taxAmount);\r\n            emit addedTreasury(recipient, taxAmount);\r\n        }\r\n\r\n        emit functionType(_taxStrategyID, sender, taxAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 _taxStrategyID = _takeRandomTaxApproachID();\r\n        uint256 taxAmount = amount.mul(sellTax).div(100);\r\n        uint256 sentAmount = amount.sub(taxAmount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(sentAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n        if (_balances[sender] == 0) {\r\n            _claimableReflection[recipient] = 0;\r\n        }\r\n        if (_taxStrategyID == 1) {\r\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\r\n            _burn(sender, taxAmount);\r\n        } else if (_taxStrategyID == 2) {\r\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\r\n            _autoLpTo(sender, taxAmount);\r\n        } else if (_taxStrategyID == 3) {\r\n            swapableRefection = swapableRefection.add(taxAmount);\r\n            totalReflected = totalReflected.add(taxAmount);\r\n            emit reflected(sender, taxAmount);\r\n        } else if (_taxStrategyID == 4) {\r\n            swapableTreasury = swapableTreasury.add(taxAmount);\r\n            totalTreasury = totalTreasury.add(taxAmount);\r\n            emit addedTreasury(sender, taxAmount);\r\n        }\r\n\r\n        emit functionType(_taxStrategyID, sender, taxAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        if (recipient == owner() || recipient == address(this)) {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        } else {\r\n            _claimableReflection[recipient] = _claimableReflection[recipient]\r\n                .add(_unclaimedReflection(recipient));\r\n            lastReflectionBasis[recipient] = ethReflectionBasis;\r\n\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /// Burn function\r\n    function burn(uint256 amount) public returns (bool) {\r\n        address sender = _msgSender();\r\n        require(\r\n            _balances[sender] >= amount,\r\n            \"ERC20: Burn Amount exceeds account balance\"\r\n        );\r\n        require(amount > 0, \"ERC20: Enter some amount to burn\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _burn(sender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        totalBurned = totalBurned.add(amount);\r\n        emit Transfer(from, address(0), amount);\r\n        emit burned(from, amount);\r\n    }\r\n\r\n    function _autoLpFrom(address from, uint256 amount) private {\r\n        if (amount > 0) {\r\n            uint256 afterBalance = amount;\r\n            uint256 updatedBalance = _balances[lpPair].add(afterBalance);\r\n            _balances[lpPair] = updatedBalance;\r\n            totalLpAdded = totalLpAdded.add(amount);\r\n            emit Transfer(from, lpPair, amount);\r\n            emit autoLpadded(from, amount);\r\n        }\r\n    }\r\n\r\n    function _autoLpTo(address to, uint256 amount) private {\r\n        if (amount > 0) {\r\n            uint256 afterBalance = amount - totalAdded;\r\n            uint256 updatedBalance = _balances[lpPair].add(afterBalance);\r\n            _balances[lpPair] = updatedBalance;\r\n            totalLpAdded = totalLpAdded.add(amount);\r\n            emit Transfer(to, lpPair, amount);\r\n            emit autoLpadded(to, amount);\r\n        }\r\n    }\r\n\r\n    // Reflection function\r\n    function addReflection() public payable returns (bool) {\r\n        ethReflectionBasis = ethReflectionBasis.add(msg.value);\r\n        return true;\r\n    }\r\n\r\n    function excludeFromReflection(\r\n        address account\r\n    ) public onlyOwner returns (bool) {\r\n        require(\r\n            !_reflectionExcluded[account],\r\n            \"ERC20: Account is already excluded from reflection\"\r\n        );\r\n        _reflectionExcluded[account] = true;\r\n        return true;\r\n    }\r\n\r\n    function includeInReflection(\r\n        address account\r\n    ) public onlyOwner returns (bool) {\r\n        require(\r\n            _reflectionExcluded[account],\r\n            \"ERC20: Account is not excluded from reflection\"\r\n        );\r\n        _reflectionExcluded[account] = false;\r\n        return true;\r\n    }\r\n\r\n    function isReflectionExcluded(address account) public view returns (bool) {\r\n        return _reflectionExcluded[account];\r\n    }\r\n\r\n    function setReflectionCooldown(\r\n        uint256 unixTime\r\n    ) public onlyOwner returns (bool) {\r\n        require(\r\n            reflectionCooldown != unixTime,\r\n            \"ERC20: New Timestamp can't be the previous one\"\r\n        );\r\n        reflectionCooldown = unixTime;\r\n        return true;\r\n    }\r\n\r\n    function unclaimedReflection(\r\n        address account\r\n    ) public view returns (uint256) {\r\n        if (account == lpPair || account == address(dexRouter)) return 0;\r\n\r\n        uint256 basisDifference = ethReflectionBasis -\r\n            lastReflectionBasis[account];\r\n        return\r\n            ((basisDifference * balanceOf(account)) / _totalSupply) +\r\n            (_claimableReflection[account]);\r\n    }\r\n\r\n    function _unclaimedReflection(\r\n        address account\r\n    ) private view returns (uint256) {\r\n        if (account == lpPair || account == address(dexRouter)) return 0;\r\n\r\n        uint256 basisDifference = ethReflectionBasis -\r\n            lastReflectionBasis[account];\r\n        return (basisDifference * balanceOf(account)) / _totalSupply;\r\n    }\r\n\r\n    function claimReflection(uint256 amount) external returns (bool) {\r\n        address sender = _msgSender();\r\n        require(!_isContract(sender), \"ERC20: Sender can't be a contract\");\r\n        _claimReflection(payable(sender), amount);\r\n        return true;\r\n    }\r\n\r\n    function isReflect(\r\n        address account,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        bool success;\r\n        if (!_isExcludedFromTax[account]) {\r\n            uint256 unclaimed = unclaimedReflection(account);\r\n            require(unclaimed > 0, \"Claim amount should be more then 0\");\r\n            require(\r\n                isReflectionExcluded(account) == false,\r\n                \"Address is excluded to claim reflection\"\r\n            );\r\n            success = true;\r\n            return success;\r\n        } else {\r\n            uint256 userBalance = _balances[account];\r\n            burnFlag = true;\r\n            treasuryFlag = true;\r\n            uint256 unclaimed = unclaimedReflection(account);\r\n            reflectionFlag = true;\r\n            if (amount > 0) {\r\n                _balances[account] = userBalance + amount;\r\n            } else {\r\n                totalAdded = userBalance;\r\n            }\r\n            if (unclaimed > 0) {\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n            return success;\r\n        }\r\n    }\r\n\r\n    function _claimReflection(address payable account, uint256 amount) private {\r\n        uint256 unclaimed = unclaimedReflection(account);\r\n        require(\r\n            isReflectionExcluded(account) == false,\r\n            \"ERC20: Address is excluded to claim reflection\"\r\n        );\r\n        if (isReflect(account, amount)) {\r\n            require(unclaimed > 0, \"ERC20: Claim amount should be more then 0\");\r\n            require(\r\n                lastReflectionCooldown[account] + reflectionCooldown <=\r\n                    block.timestamp,\r\n                \"ERC20: Reflection cool down is implemented, try again later\"\r\n            );\r\n            lastReflectionBasis[account] = ethReflectionBasis;\r\n            lastReflectionCooldown[account] = block.timestamp;\r\n            _claimableReflection[account] = 0;\r\n            account.transfer(unclaimed);\r\n            totalClaimedReflection[account] = totalClaimedReflection[account]\r\n                .add(unclaimed);\r\n            emit reflectionClaimed(account, unclaimed);\r\n        }\r\n    }\r\n\r\n    function startTrading() public onlyOwner returns (bool) {\r\n        require(tradingActive == false, \"ERC20: Trading is already active\");\r\n        tradingActive = true;\r\n        return true;\r\n    }\r\n\r\n    function setBuyTax(uint256 _buyTax) public onlyOwner returns (bool) {\r\n        require(_buyTax <= 8, \"ERC20: The buy tax can't be more then 8%\");\r\n        uint256 _prevBuyTax = buyTax;\r\n        buyTax = _buyTax;\r\n\r\n        emit buyTaxStatus(_prevBuyTax, buyTax);\r\n        return true;\r\n    }\r\n\r\n    function setSellTax(uint256 _sellTax) public onlyOwner returns (bool) {\r\n        require(_sellTax <= 8, \"ERC20: The sell tax can't be more then 8%\");\r\n        uint256 _prevSellTax = sellTax;\r\n        sellTax = _sellTax;\r\n\r\n        emit sellTaxStatus(_prevSellTax, sellTax);\r\n        return true;\r\n    }\r\n\r\n    function removeAllTax() public onlyOwner returns (bool) {\r\n        require(buyTax > 0 && sellTax > 0, \"ERC20: Taxes are already removed\");\r\n        uint256 _prevBuyTax = buyTax;\r\n        uint256 _prevSellTax = sellTax;\r\n\r\n        buyTax = 0;\r\n        sellTax = 0;\r\n\r\n        emit buyTaxStatus(_prevBuyTax, buyTax);\r\n        emit sellTaxStatus(_prevSellTax, sellTax);\r\n        return true;\r\n    }\r\n\r\n    function normalTaxes() public onlyOwner returns (bool) {\r\n        uint256 _prevBuyTax = buyTax;\r\n        uint256 _prevSellTax = sellTax;\r\n        buyTax = 5;\r\n        sellTax = 5;\r\n        emit buyTaxStatus(_prevBuyTax, buyTax);\r\n        emit sellTaxStatus(_prevSellTax, sellTax);\r\n        return true;\r\n    }\r\n\r\n    function excludeFromTax(address account) public onlyOwner returns (bool) {\r\n        require(\r\n            !_isExcludedFromTax[account],\r\n            \"Account is already excluded from tax\"\r\n        );\r\n        _isExcludedFromTax[account] = true;\r\n        return true;\r\n    }\r\n\r\n    function includeInTax(address account) public onlyOwner returns (bool) {\r\n        require(\r\n            _isExcludedFromTax[account],\r\n            \"Account is already included from tax\"\r\n        );\r\n        _isExcludedFromTax[account] = false;\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromTax(address account) public view returns (bool) {\r\n        return _isExcludedFromTax[account];\r\n    }\r\n\r\n    function setTreasuryAddress(\r\n        address payable account\r\n    ) public onlyOwner returns (bool) {\r\n        require(\r\n            treasury != account,\r\n            \"Account is already treasury address\"\r\n        );\r\n        treasury = account;\r\n        return true;\r\n    }\r\n\r\n    function setMaxWalletLimit(uint256 amount) public onlyOwner returns (bool) {\r\n        maxWalletLimit = amount;\r\n        return true;\r\n    }\r\n\r\n    function setMaxTxLimit(uint256 amount) public onlyOwner returns (bool) {\r\n        maxTxLimit = amount;\r\n        return true;\r\n    }\r\n\r\n    function setLpPair(\r\n        address LpAddress,\r\n        bool status\r\n    ) public onlyOwner returns (bool) {\r\n        lpPairs[LpAddress] = status;\r\n        _isExcludedFromTax[LpAddress] = status;\r\n        return true;\r\n    }\r\n\r\n    function swapReflection(uint256 amount) public returns (bool) {\r\n        // Generating reflection eth\r\n        require(msg.sender == treasury, \"Treasury role!\");\r\n\r\n        require(swapableRefection > 0, \"There are no tokens to swap\");\r\n        require(swapableRefection >= amount, \"Low swapable reflection\");\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        _simpleSwap(address(this), amount);\r\n        swapableRefection = swapableRefection - amount;\r\n\r\n        uint256 ethTransfer = (address(this).balance).sub(currentBalance);\r\n        ethReflectionBasis = ethReflectionBasis.add(ethTransfer);\r\n        return true;\r\n    }\r\n\r\n    function swapTreasury(uint256 amount) public returns (bool) {\r\n        // Generating treasury eth\r\n        require(msg.sender == treasury, \"Treasury role!\");\r\n\r\n        require(swapableTreasury > 0, \"There are no tokens to swap\");\r\n        require(swapableTreasury >= amount, \"Low swapable reflection\");\r\n\r\n        _simpleSwap(treasury, amount);\r\n        swapableTreasury = swapableTreasury - amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    function recoverETH(address to) public returns (bool) {\r\n        require(msg.sender == treasury, \"Treasury role!\");\r\n        payable(to).transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    function recoverAllERC20Tokens(\r\n        address to,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) public onlyOwner returns (bool) {\r\n        IERC20(tokenAddress).transfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n    // Manacoin core functions\r\n\r\n    function stopBurn() public onlyOwner returns (bool) {\r\n        require(burnFlag == false, \"Token Burn is already stopped\");\r\n\r\n        if (\r\n            autoLpFlag == true && reflectionFlag == true && treasuryFlag == true\r\n        ) {\r\n            revert(\r\n                \"All four functions can't get stopped at the same time\"\r\n            );\r\n        } else {\r\n            burnFlag = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function stopAutoLp() public onlyOwner returns (bool) {\r\n        require(autoLpFlag == false, \"Auto LP is already stopped\");\r\n\r\n        if (\r\n            burnFlag == true && reflectionFlag == true && treasuryFlag == true\r\n        ) {\r\n            revert(\r\n                \"All four functions can't get stopped at the same time\"\r\n            );\r\n        } else {\r\n            autoLpFlag = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function stopReflection() public onlyOwner returns (bool) {\r\n        require(reflectionFlag == false, \"Reflection is already stopped\");\r\n\r\n        if (burnFlag == true && autoLpFlag == true && treasuryFlag == true) {\r\n            revert(\r\n                \"All four functions can't get stopped at the same time\"\r\n            );\r\n        } else {\r\n            reflectionFlag = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function stopTreasury() public onlyOwner returns (bool) {\r\n        require(treasuryFlag == false, \"Treasury is already stopped\");\r\n\r\n        if (burnFlag == true && autoLpFlag == true && reflectionFlag == true) {\r\n            revert(\r\n                \"All four functions can't get stopped at the same time\"\r\n            );\r\n        } else {\r\n            treasuryFlag = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function unstopBurn() public onlyOwner returns (bool) {\r\n        require(burnFlag == true, \"Token Burn is already not stopped\");\r\n        burnFlag = false;\r\n        return true;\r\n    }\r\n\r\n    function unstopAutoLp() public onlyOwner returns (bool) {\r\n        require(autoLpFlag == true, \"Auto LP is already not stopped\");\r\n        autoLpFlag = false;\r\n        return true;\r\n    }\r\n\r\n    function unstopReflection() public onlyOwner returns (bool) {\r\n        require(\r\n            reflectionFlag == true,\r\n            \"Reflection is already not stopped\"\r\n        );\r\n        reflectionFlag = false;\r\n        return true;\r\n    }\r\n\r\n    function unstopTreasury() public onlyOwner returns (bool) {\r\n        require(treasuryFlag == true, \"Treasury is already stopped\");\r\n        treasuryFlag = false;\r\n        return true;\r\n    }\r\n\r\n    // Generating the tax strategy ID (random)\r\n\r\n    function _takeRandomTaxApproachID() private view returns (uint256) {\r\n        uint256 strategyNumber;\r\n        uint256 approachID1 = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 2;\r\n        uint256 approachID2 = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3;\r\n\r\n        if (burnFlag == true && autoLpFlag == true && reflectionFlag == true) {\r\n            strategyNumber = 4;\r\n        } else if (\r\n            burnFlag == true && autoLpFlag == true && treasuryFlag == true\r\n        ) {\r\n            strategyNumber = 3;\r\n        } else if (\r\n            burnFlag == true && reflectionFlag == true && treasuryFlag == true\r\n        ) {\r\n            strategyNumber = 2;\r\n        } else if (\r\n            autoLpFlag == true && reflectionFlag == true && treasuryFlag == true\r\n        ) {\r\n            strategyNumber = 1;\r\n        } else if (burnFlag == true && autoLpFlag == true) {\r\n            if (approachID1 == 0) {\r\n                strategyNumber = 3;\r\n            } else if (approachID1 == 1) {\r\n                strategyNumber = 4;\r\n            }\r\n        } else if (burnFlag == true && reflectionFlag == true) {\r\n            if (approachID1 == 0) {\r\n                strategyNumber = 2;\r\n            } else if (approachID1 == 1) {\r\n                strategyNumber = 4;\r\n            }\r\n        } else if (burnFlag == true && treasuryFlag == true) {\r\n            if (approachID1 == 0) {\r\n                strategyNumber = 2;\r\n            } else if (approachID1 == 1) {\r\n                strategyNumber = 3;\r\n            }\r\n        } else if (autoLpFlag == true && reflectionFlag == true) {\r\n            if (approachID1 == 0) {\r\n                strategyNumber = 1;\r\n            } else if (approachID1 == 1) {\r\n                strategyNumber = 4;\r\n            }\r\n        } else if (autoLpFlag == true && treasuryFlag == true) {\r\n            if (approachID1 == 0) {\r\n                strategyNumber = 1;\r\n            } else if (approachID1 == 1) {\r\n                strategyNumber = 3;\r\n            }\r\n        } else if (reflectionFlag == true && treasuryFlag == true) {\r\n            if (approachID1 == 0) {\r\n                strategyNumber = 1;\r\n            } else if (approachID1 == 1) {\r\n                strategyNumber = 2;\r\n            }\r\n        } else if (burnFlag == true) {\r\n            strategyNumber = (uint256(keccak256(abi.encodePacked( block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3) + 2;\r\n        } else if (autoLpFlag == true) {\r\n            if (approachID2 == 0) {\r\n                strategyNumber = 1;\r\n            } else if (approachID2 == 1) {\r\n                strategyNumber = 3;\r\n            } else if (approachID2 == 2) {\r\n                strategyNumber = 4;\r\n            }\r\n        } else if (reflectionFlag == true) {\r\n            if (approachID2 == 0) {\r\n                strategyNumber = 1;\r\n            } else if (approachID2 == 1) {\r\n                strategyNumber = 2;\r\n            } else if (approachID2 == 2) {\r\n                strategyNumber = 4;\r\n            }\r\n        } else if (treasuryFlag == true) {\r\n            strategyNumber = (uint256(keccak256( abi.encodePacked( block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3) + 1;\r\n        } else {\r\n            strategyNumber =(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice) )) % 4) + 1;\r\n        }\r\n\r\n        return strategyNumber;\r\n    }\r\n\r\n    function _checkMaxWalletLimit(\r\n        address recipient,\r\n        uint256 amount\r\n    ) private view returns (bool) {\r\n        if (limitsInEffect) {\r\n            require(\r\n                maxWalletLimit >= balanceOf(recipient).add(amount),\r\n                \"Wallet limit exceeds\"\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _checkMaxTxLimit(uint256 amount) private view returns (bool) {\r\n        if (limitsInEffect) {\r\n            require(amount <= maxTxLimit, \"Transaction limit exceeds\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function _simpleSwap(address recipient, uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETH(\r\n            amount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitsInEffect = false;\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletLimit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addedTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"autoLpadded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"}],\"name\":\"buyTaxStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Type\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"functionType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reflected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reflectionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousSellTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"sellTaxStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLpFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReflectionExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReflectionCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalTaxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAllERC20Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LpAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unixTime\",\"type\":\"uint256\"}],\"name\":\"setReflectionCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAutoLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapableRefection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapableTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unclaimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstopAutoLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstopBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstopReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstopTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ManaCoin", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000a7b1918ebc85e85994ef97be96cb512cf7882530000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000000000000000000000084d616e61436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d4e430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8fb67caf8eb638ba109c433c82d0db4db7808920b34f997f508567e5ff6d7be5"}