{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ITreasury.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function mint(address _to, uint256 _amount) external;\\n    function valueOfToken( address _token, uint _amount ) external view returns ( uint value_ );\\n    function VEC() external view returns (address);\\n    function vETH() external view returns (address);\\n    function LP() external view returns (address);\\n    function excessReserves() external view returns (uint256);\\n    function RESERVE_BACKING() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interface/IVEC.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\ninterface IVEC is IERC20Metadata {\\n    function mint(address to_, uint256 amount_) external;\\n    function burnFrom(address account_, uint256 amount_) external;\\n    function burn(uint256 amount_) external;\\n    function uniswapV2Pair() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IvETH.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\ninterface IvETH is IERC20Metadata {\\n    function currentBalance() external view returns (uint256);\\n\\n    function deposit(\\n        address _restakedLST,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interface/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function withdraw(uint) external;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/reward/RewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interface/IVEC.sol\\\";\\nimport \\\"../interface/IvETH.sol\\\";\\nimport \\\"../interface/IWETH.sol\\\";\\nimport \\\"../interface/ITreasury.sol\\\";\\n\\n/// @title   Distributor\\n/// @notice  VEC Staking Distributor\\ncontract Distributor is Ownable {\\n    /// EVENTS ///\\n\\n    event VECRateSet(uint256 oldRate, uint256 newRate);\\n    event vETHRewardSet(uint256 oldReward, uint256 newReward);\\n\\n    /// VARIABLES ///\\n\\n    /// @notice VEC address\\n    IERC20 public immutable VEC;\\n    /// @notice Treasury address\\n    ITreasury public immutable treasury;\\n    /// @notice Staking address\\n    address public immutable vecStaking;\\n    /// @notice WETH address\\n    address public immutable WETH;\\n    /// @notice vETH address\\n    address public immutable vETH;\\n    /// @notice svETH address\\n    address public immutable svETH;\\n\\n    /// @notice In ten-thousandths ( 5000 = 0.5% )\\n    uint256 public vecRate;\\n    /// @notice Amount of WETH sent to svETH every epoch\\n    uint256 public svETHRewardPerEpoch;\\n    /// @notice Total wETH torwards ssvETH\\n    uint256 public historicalYield;\\n\\n    uint256 public constant rateDenominator = 1_000_000;\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @param _treasury    Address of treasury contract\\n    /// @param _VEC         Address of VEC\\n    /// @param _vETH        Address of vETH\\n    /// @param _svETH       Address of svETH\\n    /// @param _vecStaking  Address of staking contract\\n    constructor(\\n        address _treasury,\\n        address _VEC,\\n        address _vETH,\\n        address _svETH,\\n        address _vecStaking\\n    ) {\\n        WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n        treasury = ITreasury(_treasury);\\n        VEC = IVEC(_VEC);\\n        vETH = _vETH;\\n        svETH = _svETH;\\n        vecStaking = _vecStaking;\\n    }\\n\\n    /// STAKING FUNCTION ///\\n\\n    /// @notice Send epoch reward to staking contract and svETH reward\\n    function distribute() external {\\n        require(msg.sender == vecStaking, \\\"Only staking\\\");\\n        treasury.mint(vecStaking, nextVECReward()); // mint and send tokens\\n\\n        if (address(this).balance > 0) IWETH(WETH).deposit{value: address(this).balance}();\\n        if (svETHRewardPerEpoch == 0 || IERC20(WETH).balanceOf(address(this)) == 0) return;\\n\\n        if(IERC20(WETH).balanceOf(address(this)) >= svETHRewardPerEpoch) {\\n            historicalYield += svETHRewardPerEpoch;\\n            IvETH(vETH).deposit(WETH, svETH, svETHRewardPerEpoch);\\n        } else {\\n            historicalYield += IERC20(WETH).balanceOf(address(this));\\n            IvETH(vETH).deposit(WETH, svETH, IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// VIEW FUNCTIONS ///\\n\\n    /// @notice          Returns next reward at given rate\\n    /// @param _rate     Rate\\n    /// @return _reward  Next reward\\n    function nextRewardAt(uint256 _rate) public view returns (uint256 _reward) {\\n        return (VEC.totalSupply() * _rate) / rateDenominator;\\n    }\\n\\n    /// @notice          Returns next reward of staking contract\\n    /// @return _reward  Next reward for staking contract\\n    function nextVECReward() public view returns (uint256 _reward) {\\n        uint256 excessReserves = treasury.excessReserves();\\n        _reward = nextRewardAt(vecRate);\\n        if (excessReserves < _reward) _reward = excessReserves;\\n    }\\n\\n    /// POLICY FUNCTIONS ///\\n\\n    /// @notice             Set reward rate for rebase\\n    /// @param _rewardRate  New rate\\n    function setVECRate(uint256 _rewardRate) external onlyOwner {\\n        require(\\n            _rewardRate <= rateDenominator,\\n            \\\"Rate cannot exceed denominator\\\"\\n        );\\n        uint256 _oldRate = vecRate;\\n        vecRate = _rewardRate;\\n        emit VECRateSet(_oldRate, _rewardRate);\\n    }\\n\\n    /// @notice            Set reward for svETH\\n    /// @param _newReward  New rate\\n    function setsvETHReward(uint256 _newReward) external onlyOwner {\\n        IERC20(WETH).approve(vETH, type(uint256).max);\\n        uint256 _oldReward = svETHRewardPerEpoch;\\n        svETHRewardPerEpoch = _newReward;\\n        emit vETHRewardSet(_oldReward, _newReward);\\n    }\\n\\n    /// @notice Withdraw token from contract\\n    function withdrawToken(address _token, address _to, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n    /// @notice Withdraw stuck ETH from contract\\n    function withdrawStuckEth(address toAddr) external onlyOwner {\\n        (bool success, ) = toAddr.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /// RECEIVE ///\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_VEC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_svETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vecStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"VECRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"vETHRewardSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VEC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historicalYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVECReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setVECRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"setsvETHReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svETHRewardPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vecRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vecStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Distributor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000002dd568028682ff2961cc341a4849f1b32f3710640000000000000000000000001bb9b64927e0c5e207c9db4093b3738eef5d844700000000000000000000000038d64ce1bdf1a9f24e0ec469c9cade61236fb4a00000000000000000000000006733f0283711f225a447e759d859a70b0c0fd2bc000000000000000000000000fdc28cd1bfebf3033870c0344b4e0bee639be9b1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}