{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.22;\r\n\r\n/*\r\n\r\nTelegram: https://t.me/BOSHPortal\r\nTwitter: https://twitter.com/BOSHToken\r\nWebsite: https://BOSHToken.fun\r\n\r\n*/\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token, \r\n        uint amountTokenDesired, \r\n        uint amountTokenMin, \r\n        uint amountETHMin, \r\n        address to, \r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn, \r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract BOSH is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = unicode\"Book of SHIB\";\r\n    string private constant _symbol = unicode\"BOSH\";\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * (10 ** _decimals);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    address private _uniswapV2Pair;\r\n\r\n    address private _taxWallet;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 private _initialBuyTax = 20;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _reduceBuyTaxAt = 30;\r\n\r\n    uint256 private _initialSellTax = 20;\r\n    uint256 private _finalSellTax = 0;\r\n    uint256 private _reduceSellTaxAt = 30;\r\n\r\n    uint256 private _buyCount;\r\n    uint256 private _sellCount;\r\n    uint256 private _lastSellBlock;\r\n    uint256 private _preventSwapBefore = 30;\r\n    uint256 private _maxSellsPerBlock = 3;\r\n\r\n    uint256 private _maxTxAmount = _totalSupply.mul(2).div(100);\r\n    uint256 private _maxWalletAmount = _totalSupply.mul(2).div(100);\r\n\r\n    uint256 private _swapThresholdAmount = _totalSupply.div(100);\r\n    uint256 private _maxSwapAmount = _totalSupply.div(100);\r\n\r\n    bool private _inSwap;\r\n    bool private _swapEnabled;\r\n    bool private _tradingEnabled;\r\n\r\n    bool private _limitsEnabled = true;\r\n    uint256 private _launchBlock;\r\n    uint256 private _disableLimitsAfterBlock = 10;\r\n\r\n    modifier onlyTaxWallet() {\r\n        require(_msgSender() == _taxWallet, \"Caller not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor() payable {\r\n        _taxWallet = _msgSender();\r\n        address devWallet = 0xC0599496c77f8914958F0251eF2C4c719C477c04;\r\n        address ecoWallet = 0x42F4D10b70367d45b7eCa3Ccd61AAF4a7Cd5d662;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        _isExcludedFromFee[devWallet] = true;\r\n        _isExcludedFromFee[ecoWallet] = true;\r\n\r\n        uint256 taxWalletAmount = _totalSupply.mul(2).div(100);\r\n        uint256 devWalletAmount = _totalSupply.mul(2).div(100);\r\n        uint256 ecoWalletAmount = _totalSupply.mul(2).div(100);\r\n        uint256 liquidityAmount = _totalSupply.mul(94).div(100);\r\n\r\n        _balances[_taxWallet] = taxWalletAmount;\r\n        _balances[devWallet] = devWalletAmount;\r\n        _balances[ecoWallet] = ecoWalletAmount;\r\n        _balances[address(this)] = liquidityAmount;\r\n\r\n        emit Transfer(address(0), _taxWallet, taxWalletAmount);\r\n        emit Transfer(address(0), devWallet, devWalletAmount);\r\n        emit Transfer(address(0), ecoWallet, ecoWalletAmount);\r\n        emit Transfer(address(0), address(this), liquidityAmount);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n\r\n        if (_tradingEnabled && _limitsEnabled && block.number > _launchBlock.add(_disableLimitsAfterBlock)) {\r\n            _disableLimits();\r\n        }\r\n\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax).div(100);\r\n\r\n            if (from == _uniswapV2Pair && to != address(_uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the max TX amount\");\r\n                require(balanceOf(to) + amount <= _maxWalletAmount, \"Exceeds the max wallet amount\");\r\n\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != _uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletAmount, \"Exceeds the max wallet amount\");\r\n            }\r\n\r\n            if (to == _uniswapV2Pair && from != address(this)) {\r\n                taxAmount = amount.mul((_buyCount > _reduceSellTaxAt) ? _finalSellTax : _initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if (\r\n                !_inSwap && \r\n                to == _uniswapV2Pair && \r\n                _swapEnabled && \r\n                _buyCount > _preventSwapBefore && \r\n                contractTokenBalance > _swapThresholdAmount\r\n            ) {\r\n                if (block.number > _lastSellBlock) {\r\n                    _sellCount = 0;\r\n                }\r\n\r\n                require(_sellCount < _maxSellsPerBlock, \"Max sells per block exceeded\");\r\n\r\n                _sellCount++;\r\n                _lastSellBlock = block.number;\r\n\r\n                _swapTokensForEth(_min(amount, _min(contractTokenBalance, _maxSwapAmount)));\r\n\r\n                _sendETHToFee();\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        try _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {}\r\n    }\r\n\r\n    function _sendETHToFee() private {\r\n        uint256 contractETHBalance = address(this).balance;\r\n\r\n        if (contractETHBalance == 0) {\r\n            return;\r\n        }\r\n\r\n        bool success;\r\n        (success,) = address(_taxWallet).call{value: contractETHBalance}(\"\");\r\n    }\r\n\r\n    function _disableLimits() private {\r\n        _maxTxAmount = totalSupply();\r\n        _maxWalletAmount = totalSupply();\r\n\r\n        _limitsEnabled = false;\r\n    }\r\n\r\n    function disableLimits() external onlyTaxWallet {\r\n        _disableLimits();\r\n    }\r\n\r\n    function reduceTaxes(uint256 buyTax_, uint256 sellTax_) external onlyTaxWallet {\r\n        require(buyTax_ <= _finalBuyTax, \"New buy tax cannot exceed current buy tax\");\r\n        require(sellTax_ <= _finalSellTax, \"New sell tax cannot exceed current sell tax\");\r\n\r\n        _initialBuyTax = buyTax_;\r\n        _initialSellTax = sellTax_;\r\n\r\n        _finalBuyTax = buyTax_;\r\n        _finalSellTax = sellTax_;\r\n    }\r\n\r\n    function manualSwap() external onlyTaxWallet {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance > 0) {\r\n            _swapTokensForEth(contractTokenBalance);\r\n\r\n            _sendETHToFee();\r\n        }\r\n    }\r\n\r\n    function manualSendETH() external onlyTaxWallet {\r\n        _sendETHToFee();\r\n    }\r\n\r\n    function manualSendTokens(uint256 tokenAmount) external onlyTaxWallet {\r\n        require(tokenAmount <= balanceOf(address(this)), \"Transfer amount exceeds balance\");\r\n\r\n        IERC20(address(this)).transfer(_msgSender(), tokenAmount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!_tradingEnabled, \"Trading already open\");\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        _approve(address(this), address(_uniswapV2Router), totalSupply());\r\n\r\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20(_uniswapV2Pair).approve(address(_uniswapV2Router), type(uint256).max);\r\n\r\n        _swapEnabled = true;\r\n        _tradingEnabled = true;\r\n        _launchBlock = block.number;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSendETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"reduceTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BOSH", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84214fb7dd09b5fd0348f8c211f889c842a8f1241d7efc23cc2af2d6901e373a"}