{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/fee/IFeeSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/// @title the fee settings of GigaSwap system interface\\r\\ninterface IFeeSettings {\\r\\n    /// @notice address to pay fee\\r\\n    function feeAddress() external view returns (address);\\r\\n\\r\\n    /// @notice fee in 1/decimals for dividing values\\r\\n    function feePercent() external view returns (uint256);\\r\\n\\r\\n    /// @notice account fee share\\r\\n    /// @dev used only if asset is dividing\\r\\n    /// @dev fee in 1/feeDecimals for dividing values\\r\\n    /// @param account the account, that can be hold GigaSwap token\\r\\n    /// @return uint256 asset fee share in 1/feeDecimals\\r\\n    function feePercentFor(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice account fee for certain asset count\\r\\n    /// @dev used only if asset is dividing\\r\\n    /// @param account the account, that can be hold GigaSwap token\\r\\n    /// @param count asset count for calculate fee\\r\\n    /// @return uint256 asset fee count\\r\\n    function feeForCount(\\r\\n        address account,\\r\\n        uint256 count\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @notice decimals for fee shares\\r\\n    function feeDecimals() external view returns (uint256);\\r\\n\\r\\n    /// @notice fix fee value\\r\\n    /// @dev used only if asset is not dividing\\r\\n    function feeEth() external view returns (uint256);\\r\\n\\r\\n    /// @notice fee in 1/decimals for dividing values\\r\\n    function feeEthFor(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice if account balance is greather than or equal this value, than this account has no fee\\r\\n    function zeroFeeShare() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/factories/IHasFactories.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport '../ownable/IOwnable.sol';\\r\\n\\r\\n/// @title if contract has factories\\r\\ninterface IHasFactories is IOwnable {\\r\\n    /// @dev returns true, if address is factory\\r\\n    function isFactory(address addr) external view returns (bool);\\r\\n\\r\\n    /// @dev mark address as factory (only owner)\\r\\n    function addFactory(address factory) external;\\r\\n\\r\\n    /// @dev mark address as not factory (only owner)\\r\\n    function removeFactory(address factory) external;\\r\\n\\r\\n    /// @dev mark addresses as factory or not (only owner)\\r\\n    function setFactories(address[] calldata addresses, bool isFactory_)\\r\\n        external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/ownable/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/// @title enables owner of contract\\r\\ninterface IOwnable {\\r\\n    /// @notice owner of contract\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /// @notice transfers ownership of contract\\r\\n    /// @param newOwner new owner of contract\\r\\n    function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/Deal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport './DealPointRef.sol';\\r\\n\\r\\nstruct Deal {\\r\\n    uint256 state; // 0 - not exists, 1-editing 2-execution 3-swapped\\r\\n    address owner1; // owner 1 - creator\\r\\n    address owner2; // owner 2 - second part if zero than it is open deal\\r\\n    uint256 pointsCount;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/DealPointData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct DealPointData {\\r\\n    address controller;\\r\\n    uint256 id;\\r\\n    /// @dev deal point id\\r\\n    /// 1 - eth\\r\\n    /// 2 - erc20\\r\\n    /// 3 erc721 item\\r\\n    /// 4 erc721 count\\r\\n    uint256 dealPointTypeId;\\r\\n    uint256 dealId;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 withdrawTimer;\\r\\n    uint256 withdrawTime;\\r\\n    address owner;\\r\\n    uint256 value;\\r\\n    uint256 balance;\\r\\n    uint256 fee;\\r\\n    address tokenAddress;\\r\\n    bool isSwapped;\\r\\n    bool isExecuted;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/DealPointRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct DealPointRef {\\r\\n    /// @dev controller of deal point\\r\\n    address controller;\\r\\n    /// @dev id of the deal point\\r\\n    uint256 id;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/DealsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n//import 'hardhat/console.sol';\\r\\n\\r\\nimport './IDealsController.sol';\\r\\nimport './plugins/erc20/IErc20DealPointsController.sol';\\r\\nimport './plugins/ether/IEtherDealPointsController.sol';\\r\\nimport './plugins/erc721/erc721item/IErc721ItemDealPointsController.sol';\\r\\nimport './plugins/erc721/erc721count/IErc721CountDealPointsController.sol';\\r\\n\\r\\nstruct EtherPointCreationData {\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 count;\\r\\n    uint256 withdrawTimer;\\r\\n}\\r\\nstruct Erc20PointCreationData {\\r\\n    address from;\\r\\n    address to;\\r\\n    address token;\\r\\n    uint256 count;\\r\\n    uint256 withdrawTimer;\\r\\n}\\r\\nstruct Erc721ItemPointCreationData {\\r\\n    address from;\\r\\n    address to;\\r\\n    address token;\\r\\n    uint256 tokenId;\\r\\n    uint256 withdrawTimer;\\r\\n}\\r\\nstruct Erc721CountPointCreationData {\\r\\n    address from;\\r\\n    address to;\\r\\n    address token;\\r\\n    uint256 count;\\r\\n    uint256 withdrawTimer;\\r\\n}\\r\\nstruct DealCreationData {\\r\\n    address owner2; // another owner or zero if open swap\\r\\n    EtherPointCreationData[] eth; // type id 1\\r\\n    Erc20PointCreationData[] erc20; // type id 2\\r\\n    Erc721ItemPointCreationData[] erc721Item; // type id 3\\r\\n    Erc721CountPointCreationData[] erc721Count; // type id 4\\r\\n}\\r\\n\\r\\ncontract DealsFactory {\\r\\n    IDealsController public dealsController;\\r\\n    IEtherDealPointsController public eth;\\r\\n    IErc20DealPointsController public erc20;\\r\\n    IErc721ItemDealPointsController public erc721Item;\\r\\n    IErc721CountDealPointsController public erc721Count;\\r\\n\\r\\n    constructor(\\r\\n        IDealsController dealsController_,\\r\\n        IEtherDealPointsController eth_,\\r\\n        IErc20DealPointsController erc20_,\\r\\n        IErc721ItemDealPointsController erc721Item_,\\r\\n        IErc721CountDealPointsController erc721Count_\\r\\n    ) {\\r\\n        dealsController = dealsController_;\\r\\n        erc20 = erc20_;\\r\\n        eth = eth_;\\r\\n        erc721Item = erc721Item_;\\r\\n        erc721Count = erc721Count_;\\r\\n    }\\r\\n\\r\\n    function createDeal(DealCreationData calldata data) external {\\r\\n        // limitation\\r\\n        uint256 dealPointsCount = data.erc20.length +\\r\\n            data.erc721Item.length +\\r\\n            data.eth.length;\\r\\n        require(dealPointsCount > 1, 'at least 2 deal points required');\\r\\n        // create deal\\r\\n        uint256 dealId = dealsController.createDeal(msg.sender, data.owner2);\\r\\n        // create points\\r\\n        for (uint256 i = 0; i < data.eth.length; ++i) {\\r\\n            checkPointAddresses(data.eth[i].from, data.eth[i].to, data.owner2);\\r\\n            eth.createPoint(\\r\\n                dealId,\\r\\n                data.eth[i].from,\\r\\n                data.eth[i].to,\\r\\n                data.eth[i].count,\\r\\n                data.eth[i].withdrawTimer\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < data.erc20.length; ++i) {\\r\\n            checkPointAddresses(\\r\\n                data.erc20[i].from,\\r\\n                data.erc20[i].to,\\r\\n                data.owner2\\r\\n            );\\r\\n            erc20.createPoint(\\r\\n                dealId,\\r\\n                data.erc20[i].from,\\r\\n                data.erc20[i].to,\\r\\n                data.erc20[i].token,\\r\\n                data.erc20[i].count,\\r\\n                data.erc20[i].withdrawTimer\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < data.erc721Item.length; ++i) {\\r\\n            checkPointAddresses(\\r\\n                data.erc721Item[i].from,\\r\\n                data.erc721Item[i].to,\\r\\n                data.owner2\\r\\n            );\\r\\n            erc721Item.createPoint(\\r\\n                dealId,\\r\\n                data.erc721Item[i].from,\\r\\n                data.erc721Item[i].to,\\r\\n                data.erc721Item[i].token,\\r\\n                data.erc721Item[i].tokenId,\\r\\n                data.erc721Item[i].withdrawTimer\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < data.erc721Count.length; ++i) {\\r\\n            checkPointAddresses(\\r\\n                data.erc721Count[i].from,\\r\\n                data.erc721Count[i].to,\\r\\n                data.owner2\\r\\n            );\\r\\n            erc721Count.createPoint(\\r\\n                dealId,\\r\\n                data.erc721Count[i].from,\\r\\n                data.erc721Count[i].to,\\r\\n                data.erc721Count[i].token,\\r\\n                data.erc721Count[i].count,\\r\\n                data.erc721Count[i].withdrawTimer\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // stop deal editing\\r\\n        dealsController.stopDealEditing(dealId);\\r\\n    }\\r\\n\\r\\n    function checkPointAddresses(\\r\\n        address from,\\r\\n        address to,\\r\\n        address owner2\\r\\n    ) private view {\\r\\n        require(from != to, 'from equals to address');\\r\\n        require(\\r\\n            !(from == address(0) && to == address(0)),\\r\\n            'from ant to booth equals zero address'\\r\\n        );\\r\\n        require(\\r\\n            from == msg.sender || from == owner2,\\r\\n            'from must be msg.sender address or owner2 address'\\r\\n        );\\r\\n        require(\\r\\n            to == msg.sender || to == owner2,\\r\\n            'to must be msg.sender address or owner2 address'\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/IDealPointsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/// @notice controller for swap deals\\r\\ninterface IDealPointsController {\\r\\n    receive() external payable;\\r\\n\\r\\n    /// @notice returns type id of deal points\\r\\n    /// @return \\r\\n    /// 1 - eth;\\r\\n    /// 2 - erc20;\\r\\n    /// 3 - erc721 item;\\r\\n    /// 4 - erc721 count;\\r\\n    function dealPointTypeId() external pure returns (uint256);\\r\\n\\r\\n    /// @notice returns deal id for deal point or 0 if point is not exists in this controller\\r\\n    function dealId(uint256 pointId) external view returns (uint256);\\r\\n\\r\\n    /// @notice token contract address, that need to be transferred or zero\\r\\n    function tokenAddress(uint256 pointId) external view returns (address);\\r\\n\\r\\n    /// @notice from\\r\\n    /// @dev zero address - for open swap\\r\\n    function from(uint256 pointId) external view returns (address);\\r\\n\\r\\n    /// @notice to\\r\\n    function to(uint256 pointId) external view returns (address);\\r\\n\\r\\n    /// @notice withdrawTimer\\r\\n    function withdrawTimer(uint256 pointId) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns allowed times to withdraw assets after executing\\r\\n    function withdrawTime(uint256 positionId) external view returns (uint256);\\r\\n\\r\\n    /// @notice sets to account for point\\r\\n    /// @dev only DealsController and only once\\r\\n    function setTo(uint256 pointId, address account) external;\\r\\n\\r\\n    /// @notice asset value (count or nft id), needs to execute deal point\\r\\n    function value(uint256 pointId) external view returns (uint256);\\r\\n\\r\\n    /// @notice balance of the deal point\\r\\n    function balance(uint256 pointId) external view returns (uint256);\\r\\n\\r\\n    /// @notice deal point fee. In ether or token. Only if withdraw after deal is swapped\\r\\n    function fee(uint256 pointId) external view returns (uint256);\\r\\n\\r\\n    /// @notice if true, than fee is ether, that sends on withdraw after swapped\\r\\n    function feeIsEthOnWithdraw() external pure returns (bool);\\r\\n\\r\\n    /// @notice current owner of deal point\\r\\n    /// @dev zero address - for open deals, before execution\\r\\n    function owner(uint256 pointId) external view returns (address);\\r\\n\\r\\n    /// @notice deals controller\\r\\n    function dealsController() external view returns (address);\\r\\n\\r\\n    /// @notice if true, than deal is swapped\\r\\n    function isSwapped(uint256 pointId) external view returns (bool);\\r\\n\\r\\n    /// @notice if true, than point is executed and can be swapped\\r\\n    function isExecuted(uint256 pointId) external view returns (bool);\\r\\n\\r\\n    /// @notice executes the point, by using address\\r\\n    /// @dev if already executed than nothing happens\\r\\n    function execute(uint256 pointId, address addr) external payable;\\r\\n\\r\\n    /// @notice the execute ether value for owner with number\\r\\n    function executeEtherValue(uint256 pointId) external view returns (uint256);\\r\\n\\r\\n    /// @notice withdraw the asset from deal point\\r\\n    /// @dev only deals controller\\r\\n    function withdraw(uint256 pointId) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/IDealsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport '../fee/IFeeSettings.sol';\\r\\nimport '../lib/factories/IHasFactories.sol';\\r\\nimport './Deal.sol';\\r\\nimport './DealPointData.sol';\\r\\n\\r\\ninterface IDealsController is IFeeSettings, IHasFactories {\\r\\n    /// @dev new deal created\\r\\n    /// deals are creates by factories by one transaction, therefore another events, such as deal point adding is no need\\r\\n    event NewDeal(uint256 indexed dealId, address indexed creator);\\r\\n    /// @dev the deal is swapped\\r\\n    event Swap(uint256 indexed dealId);\\r\\n    /// @dev the deal is executed by account\\r\\n    event Execute(uint256 indexed dealId, address account, bool executed);\\r\\n    /// @dev the deal withdraw\\r\\n    event OnWithdraw(uint256 indexed dealId, address indexed account);\\r\\n\\r\\n    /// @dev swap the deal\\r\\n    function swap(uint256 dealId) external;\\r\\n\\r\\n    /// @dev if true, than deal is swapped\\r\\n    function isSwapped(uint256 dealId) external view returns (bool);\\r\\n\\r\\n    /// @dev when position is swapped or 0\\r\\n    function swapTime(uint256 dealId) external view returns (uint256);\\r\\n\\r\\n    /// @dev total deal points count\\r\\n    function getTotalDealPointsCount() external view returns (uint256);\\r\\n\\r\\n    /// @dev creates the deal.\\r\\n    /// Only for factories.\\r\\n    /// @param owner1 - first owner (creator)\\r\\n    /// @param owner2 - second owner of deal. If zero than deal is open for any account\\r\\n    /// @return id of new deal\\r\\n    function createDeal(\\r\\n        address owner1,\\r\\n        address owner2\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @dev returns all deal information\\r\\n    function getDeal(\\r\\n        uint256 dealId\\r\\n    ) external view returns (Deal memory, DealPointData[] memory);\\r\\n\\r\\n    /// @dev returns the deals header information (without points)\\r\\n    function getDealHeader(uint256 dealId) external view returns (Deal memory);\\r\\n\\r\\n    /// @dev adds the deal point to deal.\\r\\n    /// only for factories\\r\\n    /// @param dealId deal id\\r\\n    function addDealPoint(\\r\\n        uint256 dealId,\\r\\n        address dealPointsController,\\r\\n        uint256 newPointId\\r\\n    ) external;\\r\\n\\r\\n    /// @dev returns deal point by its index in deal\\r\\n    function getDealPoint(\\r\\n        uint256 dealId,\\r\\n        uint256 pointIndex\\r\\n    ) external view returns (DealPointData memory);\\r\\n\\r\\n    /// @dev returns deal points count for the deal\\r\\n    function getDealPointsCount(uint256 dealId) external view returns (uint256);\\r\\n\\r\\n    /// @dev returns true, if all deal points is executed, and can be made swap, if not swapped already\\r\\n    function isExecuted(uint256 dealId) external view returns (bool);\\r\\n\\r\\n    /// @dev makes withdraw from all deal points of deal, where caller is owner\\r\\n    function withdraw(uint256 dealId) external payable;\\r\\n\\r\\n    /// @dev stops all editing for deal\\r\\n    /// only for factories\\r\\n    function stopDealEditing(uint256 dealId) external;\\r\\n\\r\\n    /// @dev executes all points of the deal\\r\\n    function execute(uint256 dealId) external payable;\\r\\n\\r\\n    /// @dev the execute ether value for owner with number\\r\\n    function executeEtherValue(\\r\\n        uint256 dealId,\\r\\n        uint256 ownerNumber\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @dev returns fee in ether on withdraw for owner number\\r\\n    function feeEthOnWithdraw(\\r\\n        uint256 dealId,\\r\\n        uint256 ownerNumber\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/plugins/erc20/IErc20DealPointsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport '../../IDealPointsController.sol';\\r\\n\\r\\ninterface IErc20DealPointsController is IDealPointsController {\\r\\n    /// @dev creates the deal point\\r\\n    /// only for factories\\r\\n    function createPoint(\\r\\n        uint256 dealId_,\\r\\n        address from_,\\r\\n        address to_,\\r\\n        address token_,\\r\\n        uint256 count_,\\r\\n        uint256 withdrawTimer\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/plugins/erc721/erc721count/IErc721CountDealPointsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IErc721CountDealPointsController {\\r\\n    /// @dev creates the deal point\\r\\n    function createPoint(\\r\\n        uint256 dealId_,\\r\\n        address from_,\\r\\n        address to_,\\r\\n        address token_,\\r\\n        uint256 count_,\\r\\n        uint256 withdrawTimer_\\r\\n    ) external;\\r\\n\\r\\n    /// @dev all tokens, that stores deal point\\r\\n    function tokensId(uint256 pointId) external view returns (uint256[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/plugins/erc721/erc721item/IErc721ItemDealPointsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport '../../../IDealPointsController.sol';\\r\\n\\r\\ninterface IErc721ItemDealPointsController is IDealPointsController {\\r\\n    /// @dev creates the deal point\\r\\n    function createPoint(\\r\\n        uint256 dealId_,\\r\\n        address from_,\\r\\n        address to_,\\r\\n        address token_,\\r\\n        uint256 tokenId_,\\r\\n        uint256 withdrawTimer_\\r\\n    ) external;\\r\\n\\r\\n    /// @dev token id that need to transfer\\r\\n    function tokenId(uint256 pointId) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapper/plugins/ether/IEtherDealPointsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport '../../IDealPointsController.sol';\\r\\n\\r\\ninterface IEtherDealPointsController is IDealPointsController {\\r\\n    /// @dev creates the deal point\\r\\n    /// only for factories\\r\\n    function createPoint(\\r\\n        uint256 dealId_,\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 count_,\\r\\n        uint256 withdrawTimer_\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IDealsController\",\"name\":\"dealsController_\",\"type\":\"address\"},{\"internalType\":\"contract IEtherDealPointsController\",\"name\":\"eth_\",\"type\":\"address\"},{\"internalType\":\"contract IErc20DealPointsController\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"contract IErc721ItemDealPointsController\",\"name\":\"erc721Item_\",\"type\":\"address\"},{\"internalType\":\"contract IErc721CountDealPointsController\",\"name\":\"erc721Count_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner2\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTimer\",\"type\":\"uint256\"}],\"internalType\":\"struct EtherPointCreationData[]\",\"name\":\"eth\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTimer\",\"type\":\"uint256\"}],\"internalType\":\"struct Erc20PointCreationData[]\",\"name\":\"erc20\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTimer\",\"type\":\"uint256\"}],\"internalType\":\"struct Erc721ItemPointCreationData[]\",\"name\":\"erc721Item\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTimer\",\"type\":\"uint256\"}],\"internalType\":\"struct Erc721CountPointCreationData[]\",\"name\":\"erc721Count\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DealCreationData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"createDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealsController\",\"outputs\":[{\"internalType\":\"contract IDealsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IErc20DealPointsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Count\",\"outputs\":[{\"internalType\":\"contract IErc721CountDealPointsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Item\",\"outputs\":[{\"internalType\":\"contract IErc721ItemDealPointsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"contract IEtherDealPointsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DealsFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000331d017d055e4966fbfeec07f33c2e63522b9a540000000000000000000000009aa18e3aefb08549c39e35824c1a9af6b070fafb000000000000000000000000298629ba44d0742d57a450beee3f1e0028057571000000000000000000000000f5ec823e430afebaba29868cbd676c224f56e7e8000000000000000000000000ddca4a39757fe0323e7bc6ed30e2ead8489b7ba4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}