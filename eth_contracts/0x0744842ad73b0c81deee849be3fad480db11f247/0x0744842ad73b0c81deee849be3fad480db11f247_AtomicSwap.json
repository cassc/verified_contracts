{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.26;\r\npragma abicoder v2;\r\n\r\n/**\r\n* @dev Interface for chainlink price oracle \r\n*/\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n/**\r\n* @dev Interface for Subscription contract.  Allows the contract to query the subscription\r\n* status of an address\r\n*/\r\ninterface ISUB{\r\n\r\n  function isSubscriber(address _address) external view returns (bool);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 {\r\n    \r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 {\r\n   \r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @dev chainlink price oracle to return ETH/USD price data\r\n*/\r\nabstract contract PriceConsumerV3 {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n     /**\r\n     * Network: mainnet\r\n     * Aggregator: ETH/USD\r\n     * Address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n     */\r\n    constructor() {\r\n        priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n    }\r\n\r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getLatestPrice() public view returns (uint256, uint80) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            /* uint startedAt */,\r\n            /* uint timeStamp */,\r\n            /* uint80 answeredInRound */\r\n        ) = priceFeed.latestRoundData();\r\n        return (uint256(price), roundID);\r\n    }\r\n\r\n     /**\r\n     * Returns historical price for a round id.\r\n     * roundId is NOT incremental. Not all roundIds are valid.\r\n     * You must know a valid roundId before consuming historical data.\r\n     *\r\n     * ROUNDID VALUES:\r\n     *    InValid:      18446744073709562300\r\n     *    Valid:        18446744073709562301\r\n     *    \r\n     * @dev A timestamp with zero value means the round is not complete and should not be used.\r\n     */\r\n    function getHistoricalPrice(uint80 roundId) public view returns (uint256) {\r\n        (\r\n            /* uint80 id */, \r\n            int price,\r\n            /* uint startedAt */,\r\n            uint timeStamp,\r\n            /* uint80 answeredInRound */\r\n        ) = priceFeed.getRoundData(roundId);\r\n        require(timeStamp > 0, \"Round not complete\");\r\n        return uint256(price);\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n        /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n* @dev AtomicSwap contract allows users to create many to many NFT swaps between two parties\r\n* in a single atomic transaction. The contract supports the NFT ERC721 and ERC1155 standards \r\n* as well as the ability to send Ethereum as part of the contract. \r\n* NEFSTER.COM\r\n*/\r\ncontract AtomicSwap is Ownable, Pausable, PriceConsumerV3 {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // Swap Status\r\n    enum swapStatus { New, Opened, Closed, Cancelled }\r\n    enum contractType { ERC721, ERC1155 }\r\n\r\n    struct atomicSwapContract {\r\n        address payable addressOne;\r\n        uint256 valueOne;\r\n        address payable addressTwo;\r\n        uint256 valueTwo;\r\n        bytes nonce;\r\n        affiliateStruct affiliateOne;\r\n        affiliateStruct affiliateTwo;\r\n        nftStruct nftsOne;\r\n        nftStruct nftsTwo;\r\n    }\r\n\r\n    struct nftStruct {\r\n        address[] contractAddress;\r\n        uint256[] tokenId; \r\n        uint256[] amount;\r\n        bytes[] data;\r\n        contractType[] typeOf;\r\n    }\r\n\r\n    struct affiliateStruct {\r\n        bytes32 code;\r\n        address payable affiliateAddress;\r\n    }\r\n\r\n    mapping(address => uint256) public affiliateBalanceNEF; // track the balance\r\n    mapping(address => uint256) public rewardsBalanceNEF; // track the NEF rewards\r\n    mapping(bytes32 => swapStatus) public swapContract;  // track the contract status\r\n    mapping(bytes32 => uint256) public _feePaid; // track the swap fee paid\r\n\r\n    uint256 public _ethFee;\r\n    uint256 public _usdFee;\r\n    uint256 public _pendingFee;\r\n    uint256 public _feeBalance;\r\n    uint256 public _commission;\r\n    uint256 public _commissionMultiplier;\r\n    uint256 public _commissionBalance;\r\n    uint256 public _rewards;\r\n    uint256 public _rewardsMultiplier;\r\n    uint256 public _rewardsBalance;\r\n    bool public _chainLink;\r\n   \r\n    address public _subscribeContract;\r\n    address payable public _nefster;\r\n\r\n    address public nefTokenAddress;\r\n    IERC20 public nefToken;\r\n\r\n    event paymentReceived(address indexed payer, uint256 value);\r\n    event swapCreated(bytes32 contractId);\r\n    event swapClosed(bytes32 contractId);\r\n    event swapCanceled(bytes32 contractId);\r\n    event feeTransfer(uint256 amount);\r\n    event commissionEarned(address indexed user, uint256 amount);\r\n    event commissionWithdrawn(address indexed user, uint256 amount);\r\n    event rewardEarned(address indexed user, uint256 amount);\r\n    event rewardWithdrawn(address indexed user, uint256 amount);\r\n    event nefWithdrawn(address indexed user, uint256 amount);\r\n\r\n    string public constant name = \"AtomicSwap\";\r\n    string public constant version = \"1.0\";\r\n    string public constant codename = \"NEFSTER\";\r\n\r\n    constructor()  {\r\n        // 2x the NEF rewards for subscribers\r\n        setRewardsMultiplier(2);\r\n        setCommissionMultiplier(2);\r\n        setChainLink(false);\r\n        setEthFee(0);\r\n        setUsdFee(0);\r\n        setNefToken(0xDa6593dBF7604744972B1B6C6124cB6981b3c833);\r\n        setNefster(payable(0x1720530C97a0A40Bf9aA66BE3F2A7A38E45C195C));\r\n        setSubContract(0xbCcac47d4fec571883e0aB92D1736c1C39Ce147B);\r\n        setRewardsNEF(100000000000000000000); // 100 NEF\r\n        setCommissionNEF(100000000000000000000); // 100 NEF\r\n    }\r\n \r\n    receive() external payable { \r\n        _feeBalance = _feeBalance.add(msg.value);\r\n        emit paymentReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    function setNefToken(address _nefTokenAddress) public onlyOwner {\r\n        require(_nefTokenAddress != address(0), \"Invalid address\");\r\n        nefTokenAddress = _nefTokenAddress;\r\n        nefToken = IERC20(nefTokenAddress);\r\n    }\r\n\r\n    /** \r\n    * @dev Create the atomic swap contract & return the contractId\r\n    */\r\n    function createAtomicSwap(atomicSwapContract memory _contract) payable public whenNotPaused returns(bytes32) {\r\n        uint256 swapFee =  getSwapFee();\r\n        require(msg.value >= _contract.valueOne.add(swapFee), \"not enough eth sent\");\r\n        require(msg.sender == _contract.addressOne, \"invalid nft holder address\");\r\n        // pending fee is refundable if the contract is cancelled\r\n        _pendingFee = _pendingFee.add(swapFee);\r\n        // get a new contract id \r\n        bytes32 _contractId = getContractId(_contract);\r\n        // swap fee paid for this contract\r\n        _feePaid[_contractId] = swapFee;\r\n        // make sure this contract is new\r\n        require(swapContract[_contractId] == swapStatus.New, \"contract already exists\");\r\n        swapContract[_contractId] = swapStatus.Opened;\r\n        emit swapCreated(_contractId);\r\n        return _contractId;\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to calculate contract hash. Returns unique id per contract \r\n    */\r\n    function getContractId(atomicSwapContract memory _contract) internal pure returns(bytes32) {\r\n        return keccak256(abi.encode(_contract));\r\n    }\r\n\r\n    /**\r\n    * @dev Close the atomic swap contract\r\n    */\r\n    function closeAtomicSwap(atomicSwapContract memory _contract, bytes32 _contractId) payable public whenNotPaused {\r\n        uint256 swapFee = getSwapFee();\r\n        require(msg.value >= _contract.valueTwo.add(swapFee), \"not enough eth sent\");\r\n        require(_contractId == getContractId(_contract), \"invalid contract hash\");\r\n        require(msg.sender == _contract.addressTwo, \"invalid nft holder address\");\r\n        require(swapContract[_contractId] == swapStatus.Opened, \"contract not open\");\r\n        \r\n        // move the pending fee to contract fee balance\r\n        _pendingFee = _pendingFee.sub(_feePaid[_contractId]);\r\n\r\n        // check for affiliates\r\n        if (_contract.affiliateOne.code != 0 \r\n            && _contract.affiliateOne.affiliateAddress != address(0)){\r\n                // add the commission to the affiliateOne address\r\n                uint256 commisionOne = isSubscriber(_contract.affiliateOne.affiliateAddress) ? _commission.mul(_commissionMultiplier) : _commission;\r\n                affiliateBalanceNEF[_contract.affiliateOne.affiliateAddress] = affiliateBalanceNEF[_contract.affiliateOne.affiliateAddress].add(commisionOne);\r\n                _commissionBalance = _commissionBalance.add(commisionOne);\r\n                emit commissionEarned(_contract.affiliateOne.affiliateAddress, commisionOne);    \r\n        }\r\n\r\n        if (_contract.affiliateTwo.code != 0 \r\n            && _contract.affiliateTwo.affiliateAddress != address(0)){\r\n                // add the commission to the affiliateTwo address\r\n                uint256 commisionTwo = isSubscriber(_contract.affiliateTwo.affiliateAddress) ? _commission.mul(_commissionMultiplier) : _commission;\r\n                affiliateBalanceNEF[_contract.affiliateTwo.affiliateAddress] = affiliateBalanceNEF[_contract.affiliateTwo.affiliateAddress].add(commisionTwo);\r\n                _commissionBalance = _commissionBalance.add(commisionTwo);\r\n                emit commissionEarned(_contract.affiliateTwo.affiliateAddress, commisionTwo);    \r\n        }\r\n\r\n        // The remaining swap fee goes to the house\r\n        _feeBalance = _feeBalance.add(swapFee.add(_feePaid[_contractId])); \r\n            \r\n        // do the eth transfers\r\n        if (_contract.valueOne > 0) {\r\n            _contract.addressTwo.transfer(_contract.valueOne);\r\n        }\r\n        if (_contract.valueTwo > 0) {\r\n            _contract.addressOne.transfer(_contract.valueTwo);\r\n        }\r\n        // do the nft transfers \r\n        for(uint i=0; i < _contract.nftsTwo.contractAddress.length; i++) {\r\n            if (_contract.nftsTwo.typeOf[i] == contractType.ERC721)\r\n                IERC721(_contract.nftsTwo.contractAddress[i])\r\n                .safeTransferFrom(_contract.addressTwo, \r\n                                  _contract.addressOne, \r\n                                  _contract.nftsTwo.tokenId[i],\r\n                                  _contract.nftsTwo.data[i]);\r\n            else\r\n                IERC1155(_contract.nftsTwo.contractAddress[i])\r\n                .safeTransferFrom(_contract.addressTwo, \r\n                                  _contract.addressOne, \r\n                                  _contract.nftsTwo.tokenId[i],\r\n                                  _contract.nftsTwo.amount[i],\r\n                                  _contract.nftsTwo.data[i]);\r\n        }\r\n        for(uint i=0; i < _contract.nftsOne.contractAddress.length; i++) {\r\n             if (_contract.nftsOne.typeOf[i] == contractType.ERC721)\r\n                IERC721(_contract.nftsOne.contractAddress[i])\r\n                .safeTransferFrom(_contract.addressOne, \r\n                                  _contract.addressTwo, \r\n                                  _contract.nftsOne.tokenId[i],\r\n                                  _contract.nftsOne.data[i]);\r\n            else\r\n                IERC1155(_contract.nftsOne.contractAddress[i])\r\n                .safeTransferFrom(_contract.addressOne, \r\n                                  _contract.addressTwo, \r\n                                  _contract.nftsOne.tokenId[i],\r\n                                  _contract.nftsOne.amount[i],\r\n                                  _contract.nftsOne.data[i]);\r\n        }\r\n        swapContract[_contractId] = swapStatus.Closed;\r\n        emit swapClosed(_contractId);\r\n\r\n        // NEF token rewards for addressOne\r\n        uint256 rewardOne = isSubscriber(_contract.addressOne) ? _rewards.mul(_rewardsMultiplier) : _rewards;\r\n        rewardsBalanceNEF[_contract.addressOne] = rewardsBalanceNEF[_contract.addressOne].add(rewardOne);\r\n        emit rewardEarned(_contract.addressOne, rewardOne);\r\n        // NEF token rewards for addressTwo\r\n        uint256 rewardTwo = isSubscriber(_contract.addressTwo) ? _rewards.mul(_rewardsMultiplier) : _rewards;\r\n        rewardsBalanceNEF[_contract.addressTwo] = rewardsBalanceNEF[_contract.addressTwo].add(rewardTwo);\r\n        emit rewardEarned(_contract.addressTwo, rewardTwo);\r\n        // update the rewards balance\r\n        _rewardsBalance = _rewardsBalance.add(rewardOne).add(rewardTwo);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel the atomic swap contract\r\n     */ \r\n    function cancelAtomicSwap(bytes32 _contractId, atomicSwapContract memory _contract) public {\r\n        require(_contractId == getContractId(_contract), \"invalid contract hash\");\r\n        require(msg.sender == _contract.addressOne, \"not swap creator\");\r\n        require(swapContract[_contractId] == swapStatus.Opened, \"contract not open\");\r\n        // cancel the contract\r\n        swapContract[_contractId] = swapStatus.Cancelled;\r\n        // refund the fee paid \r\n        _pendingFee = _pendingFee.sub(_feePaid[_contractId]);\r\n        // refund any crypto to swap creator - addressOne\r\n        if(_contract.valueOne > 0){\r\n            _contract.addressOne.transfer(_contract.valueOne.add(_feePaid[_contractId]));\r\n        }\r\n        // refund the swap free\r\n        if (_feePaid[_contractId] > 0){\r\n            _contract.addressOne.transfer(_feePaid[_contractId]);\r\n        }\r\n        emit swapCanceled(_contractId); \r\n    }\r\n\r\n    /**\r\n     * @dev Set the nefster address for fee payouts \r\n     */\r\n    function setNefster(address payable _address) public onlyOwner {\r\n      require(_address != address(0), \"zero address\");\r\n      _nefster = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the swap fee rate in wei\r\n     */\r\n    function setEthFee(uint256 _fee) public onlyOwner {\r\n      _ethFee = _fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the swap fee rate in usd\r\n     */\r\n    function setUsdFee(uint256 _fee) public onlyOwner {\r\n      _usdFee = _fee;\r\n    }\r\n\r\n      /**\r\n     * @dev Set the chainLink flag\r\n     */\r\n    function setChainLink(bool _value) public onlyOwner {\r\n      _chainLink = _value;\r\n    }\r\n\r\n    /**\r\n    * @dev set the external subscription contract address and vendorId\r\n    */\r\n    function setSubContract(address _address) public onlyOwner {\r\n        _subscribeContract = _address;\r\n    }\r\n\r\n    /**\r\n    * @dev checks the external _subscribeContract to see if the address is a subscriber\r\n    */\r\n    function isSubscriber(address _address) public view returns (bool) {\r\n        // create interface to subscribe contract\r\n        ISUB SubContract = ISUB(_subscribeContract);\r\n        // try-catch will return false on any error condition\r\n        try SubContract.isSubscriber(_address) returns (bool result) {\r\n            return result;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev get the swap fee rate. calls external subscribe contract method isSubscriber\r\n    * The swap fee for subscribers is zero.  For non-subscribers, return the _usdFee in ETH using the chainLink\r\n    * price oracle when the _chainLink flag is true and _ethPrice when false;\r\n    */\r\n    function getSwapFee() public view returns (uint256) {\r\n        if (isSubscriber(msg.sender)){\r\n            return 0;\r\n        }\r\n        if (_chainLink && _usdFee > 0){\r\n            (, uint80 _roundId) = getLatestPrice();\r\n            return getUsdFee(_roundId);\r\n        }\r\n        // fallback to eth fee\r\n        return _ethFee;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the _usdFee in ETH \r\n     * calls chainlink price oracle \r\n     * @param _roundID  the roundID value returned from Chainlink getHistoricalPrice\r\n     * @return uint256 \r\n     */\r\n    function getUsdFee(uint80 _roundID) public view returns (uint256) {\r\n      // get eth price from chainlink oracle \r\n      uint256 price = getHistoricalPrice(_roundID);\r\n      return (1 ether / price.div(100000000)).mul(_usdFee);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Admin function to widthdraw ETH fees collected \r\n     */\r\n    function transferFees(uint256 _amount) public returns(uint256) {\r\n        require(msg.sender == _nefster, \"only nefster can do this\");\r\n        require(_amount <= _feeBalance, \"amount not available\");\r\n        _feeBalance = _feeBalance.sub(_amount);\r\n        _nefster.transfer(_amount);\r\n        emit feeTransfer(_amount);\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function to widthdraw NEF tokens\r\n     */\r\n    function withdrawNEF(uint256 _amount) public onlyOwner {\r\n        require(_amount <= getBalanceNEF(), \"invalid amount\");\r\n        nefToken.transfer(msg.sender, _amount);\r\n        emit nefWithdrawn(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the amount of NEF token currently held in the contract\r\n    */\r\n    function getBalanceNEF() public view returns (uint256) {\r\n        return nefToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev sets the current  affiliate commission amount in NEF\r\n    */\r\n    function setCommissionNEF(uint256 amount) public onlyOwner {\r\n        _commission = amount;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the NEF commission multiplier for subscribers\r\n    */\r\n    function setCommissionMultiplier(uint256 amount) public onlyOwner {\r\n        _commissionMultiplier = amount;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the current rewards  amount in NEF\r\n    */\r\n    function setRewardsNEF(uint256 amount) public onlyOwner {\r\n        _rewards = amount;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the NEF rewards multiplier for subscribers\r\n    */\r\n    function setRewardsMultiplier(uint256 amount) public onlyOwner {\r\n        _rewardsMultiplier = amount;\r\n    }\r\n\r\n   /**\r\n    * @dev Allows users to withdraw all their NEF tokens\r\n    */\r\n    function withdrawAllNEF() public {\r\n        uint256 total = rewardsBalanceNEF[msg.sender].add(affiliateBalanceNEF[msg.sender]);\r\n        require(total > 0, \"No NEF rewards to withdraw\");\r\n        require(nefToken.balanceOf(address(this)) >= total, \"Not enough NEF tokens in contract\");\r\n        emit rewardWithdrawn(msg.sender, rewardsBalanceNEF[msg.sender]);\r\n        emit commissionWithdrawn(msg.sender, affiliateBalanceNEF[msg.sender]);\r\n        // Reset the balances to 0\r\n        rewardsBalanceNEF[msg.sender] = 0;\r\n        affiliateBalanceNEF[msg.sender] = 0;\r\n        // transfer the NEF tokens\r\n        nefToken.transfer(msg.sender, total);\r\n    }\r\n\r\n    /** \r\n     * @dev pause the contract\r\n     */\r\n    function pause(bool val) public onlyOwner {\r\n        if (val) _pause();  else  _unpause();\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"commissionEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"commissionWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nefWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"paymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"}],\"name\":\"swapCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"}],\"name\":\"swapClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"}],\"name\":\"swapCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commissionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commissionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ethFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_feePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nefster\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_subscribeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateBalanceNEF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"addressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOne\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueTwo\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"internalType\":\"struct AtomicSwap.affiliateStruct\",\"name\":\"affiliateOne\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"internalType\":\"struct AtomicSwap.affiliateStruct\",\"name\":\"affiliateTwo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"enum AtomicSwap.contractType[]\",\"name\":\"typeOf\",\"type\":\"uint8[]\"}],\"internalType\":\"struct AtomicSwap.nftStruct\",\"name\":\"nftsOne\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"enum AtomicSwap.contractType[]\",\"name\":\"typeOf\",\"type\":\"uint8[]\"}],\"internalType\":\"struct AtomicSwap.nftStruct\",\"name\":\"nftsTwo\",\"type\":\"tuple\"}],\"internalType\":\"struct AtomicSwap.atomicSwapContract\",\"name\":\"_contract\",\"type\":\"tuple\"}],\"name\":\"cancelAtomicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"addressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOne\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueTwo\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"internalType\":\"struct AtomicSwap.affiliateStruct\",\"name\":\"affiliateOne\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"internalType\":\"struct AtomicSwap.affiliateStruct\",\"name\":\"affiliateTwo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"enum AtomicSwap.contractType[]\",\"name\":\"typeOf\",\"type\":\"uint8[]\"}],\"internalType\":\"struct AtomicSwap.nftStruct\",\"name\":\"nftsOne\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"enum AtomicSwap.contractType[]\",\"name\":\"typeOf\",\"type\":\"uint8[]\"}],\"internalType\":\"struct AtomicSwap.nftStruct\",\"name\":\"nftsTwo\",\"type\":\"tuple\"}],\"internalType\":\"struct AtomicSwap.atomicSwapContract\",\"name\":\"_contract\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"closeAtomicSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codename\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"addressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOne\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueTwo\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"internalType\":\"struct AtomicSwap.affiliateStruct\",\"name\":\"affiliateOne\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"internalType\":\"struct AtomicSwap.affiliateStruct\",\"name\":\"affiliateTwo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"enum AtomicSwap.contractType[]\",\"name\":\"typeOf\",\"type\":\"uint8[]\"}],\"internalType\":\"struct AtomicSwap.nftStruct\",\"name\":\"nftsOne\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"enum AtomicSwap.contractType[]\",\"name\":\"typeOf\",\"type\":\"uint8[]\"}],\"internalType\":\"struct AtomicSwap.nftStruct\",\"name\":\"nftsTwo\",\"type\":\"tuple\"}],\"internalType\":\"struct AtomicSwap.atomicSwapContract\",\"name\":\"_contract\",\"type\":\"tuple\"}],\"name\":\"createAtomicSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceNEF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundID\",\"type\":\"uint80\"}],\"name\":\"getUsdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSubscriber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nefToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nefTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsBalanceNEF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setChainLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCommissionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCommissionNEF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setEthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nefTokenAddress\",\"type\":\"address\"}],\"name\":\"setNefToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNefster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRewardsMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRewardsNEF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSubContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setUsdFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swapContract\",\"outputs\":[{\"internalType\":\"enum AtomicSwap.swapStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllNEF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNEF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AtomicSwap", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7122d712c3fc2a32646ca3e8ddd9ef0ae0210f45f54a7a18d4479ddf473bf64"}