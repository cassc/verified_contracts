{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/_interfaces/buttonwood/IBondController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { ITranche } from \\\"./ITranche.sol\\\";\\n\\ninterface IBondController {\\n    function collateralToken() external view returns (address);\\n\\n    function maturityDate() external view returns (uint256);\\n\\n    function creationDate() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function feeBps() external view returns (uint256);\\n\\n    function isMature() external view returns (bool);\\n\\n    function tranches(uint256 i) external view returns (ITranche token, uint256 ratio);\\n\\n    function trancheCount() external view returns (uint256 count);\\n\\n    function trancheTokenAddresses(ITranche token) external view returns (bool);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function redeem(uint256[] memory amounts) external;\\n\\n    function mature() external;\\n\\n    function redeemMature(address tranche, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/buttonwood/ITranche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"../../oz/IERC20Upgradeable.sol\\\";\\n\\ninterface ITranche is IERC20Upgradeable {\\n    function bond() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IBondIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IBondController } from \\\"./buttonwood/IBondController.sol\\\";\\n\\n/// @notice Expected at least one matured bond.\\nerror NoMaturedBonds();\\n\\ninterface IBondIssuer {\\n    /// @notice Event emitted when a new bond is issued by the issuer.\\n    /// @param bond The newly issued bond.\\n    event BondIssued(IBondController bond);\\n\\n    /// @notice Event emitted when a bond has matured.\\n    /// @param bond The matured bond.\\n    event BondMature(IBondController bond);\\n\\n    /// @notice The address of the underlying collateral token to be used for issued bonds.\\n    /// @return Address of the collateral token.\\n    function collateral() external view returns (address);\\n\\n    /// @notice Invokes `mature` on issued active bonds.\\n    function matureActive() external;\\n\\n    /// @notice Issues a new bond if sufficient time has elapsed since the last issue.\\n    function issue() external;\\n\\n    /// @notice Checks if a given bond has been issued by the issuer.\\n    /// @param bond Address of the bond to check.\\n    /// @return if the bond has been issued by the issuer.\\n    function isInstance(IBondController bond) external view returns (bool);\\n\\n    /// @notice Fetches the most recently issued bond.\\n    /// @return Address of the most recent bond.\\n    function getLatestBond() external returns (IBondController);\\n\\n    /// @notice Returns the total number of bonds issued by this issuer.\\n    /// @return Number of bonds.\\n    function issuedCount() external view returns (uint256);\\n\\n    /// @notice The bond address from the issued list by index.\\n    /// @param index The index of the bond in the issued list.\\n    /// @return Address of the bond.\\n    function issuedBondAt(uint256 index) external view returns (IBondController);\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IDiscountStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"../oz/IERC20Upgradeable.sol\\\";\\n\\ninterface IDiscountStrategy {\\n    /// @notice Computes the discount to be applied to a given tranche token.\\n    /// @param tranche The tranche token to compute discount for.\\n    /// @return The discount as a fixed point number with `decimals()`.\\n    function computeTrancheDiscount(IERC20Upgradeable tranche) external view returns (uint256);\\n\\n    /// @notice Number of discount decimals.\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IFeeStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"../oz/IERC20Upgradeable.sol\\\";\\n\\ninterface IFeeStrategy {\\n    /// @notice Address of the fee token.\\n    function feeToken() external view returns (IERC20Upgradeable);\\n\\n    /// @notice Computes the fees while minting given amount of perp tokens.\\n    /// @dev The mint fee can be either positive or negative. When positive it's paid by the minting users to the reserve.\\n    ///      When negative its paid to the minting users by the reserve.\\n    ///      The protocol fee is always non-negative and is paid by the users minting to the\\n    ///      perp contract's fee collector.\\n    /// @param amount The amount of perp tokens to be minted.\\n    /// @return reserveFee The fee paid to the reserve to mint perp tokens.\\n    /// @return protocolFee The fee paid to the protocol to mint perp tokens.\\n    function computeMintFees(uint256 amount) external view returns (int256 reserveFee, uint256 protocolFee);\\n\\n    /// @notice Computes the fees while burning given amount of perp tokens.\\n    /// @dev The burn fee can be either positive or negative. When positive it's paid by the burning users to the reserve.\\n    ///      When negative its paid to the burning users by the reserve.\\n    ///      The protocol fee is always non-negative and is paid by the users burning to the\\n    ///      perp contract's fee collector.\\n    /// @param amount The amount of perp tokens to be burnt.\\n    /// @return reserveFee The fee paid to the reserve to burn perp tokens.\\n    /// @return protocolFee The fee paid to the protocol to burn perp tokens.\\n    function computeBurnFees(uint256 amount) external view returns (int256 reserveFee, uint256 protocolFee);\\n\\n    /// @notice Computes the fees while rolling over given amount of perp tokens.\\n    /// @dev The rollover fee can be either positive or negative. When positive it's paid by the users rolling over to the reserve.\\n    ///      When negative its paid to the users rolling over by the reserve.\\n    ///      The protocol fee is always positive and is paid by the users rolling over to the\\n    ///      perp contract's fee collector.\\n    /// @param amount The Perp-denominated value of the tranches being rolled over.\\n    /// @return reserveFee The fee paid to the reserve to rollover tokens.\\n    /// @return protocolFee The fee paid to the protocol to rollover tokens.\\n    function computeRolloverFees(uint256 amount) external view returns (int256 reserveFee, uint256 protocolFee);\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IPerpetualTranche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"../oz/IERC20Upgradeable.sol\\\";\\n\\nimport { IBondIssuer } from \\\"./IBondIssuer.sol\\\";\\nimport { IFeeStrategy } from \\\"./IFeeStrategy.sol\\\";\\nimport { IPricingStrategy } from \\\"./IPricingStrategy.sol\\\";\\nimport { IDiscountStrategy } from \\\"./IDiscountStrategy.sol\\\";\\nimport { IBondController } from \\\"./buttonwood/IBondController.sol\\\";\\nimport { ITranche } from \\\"./buttonwood/ITranche.sol\\\";\\n\\ninterface IPerpetualTranche is IERC20Upgradeable {\\n    //--------------------------------------------------------------------------\\n    // Events\\n\\n    /// @notice Event emitted when the applied discount for a given token is set.\\n    /// @param token The address of the token.\\n    /// @param discount The discount factor applied.\\n    event DiscountApplied(IERC20Upgradeable token, uint256 discount);\\n\\n    /// @notice Event emitted the reserve's current token balance is recorded after change.\\n    /// @param token Address of token.\\n    /// @param balance The recorded ERC-20 balance of the token held by the reserve.\\n    event ReserveSynced(IERC20Upgradeable token, uint256 balance);\\n\\n    /// @notice Event emitted when the active deposit bond is updated.\\n    /// @param bond Address of the new deposit bond.\\n    event UpdatedDepositBond(IBondController bond);\\n\\n    /// @notice Event emitted when the mature tranche balance is updated.\\n    /// @param matureTrancheBalance The mature tranche balance.\\n    event UpdatedMatureTrancheBalance(uint256 matureTrancheBalance);\\n\\n    //--------------------------------------------------------------------------\\n    // Methods\\n\\n    /// @notice Deposits tranche tokens into the system and mint perp tokens.\\n    /// @param trancheIn The address of the tranche token to be deposited.\\n    /// @param trancheInAmt The amount of tranche tokens deposited.\\n    function deposit(ITranche trancheIn, uint256 trancheInAmt) external;\\n\\n    /// @notice Burn perp tokens and redeem the share of reserve assets.\\n    /// @param perpAmtBurnt The amount of perp tokens burnt from the caller.\\n    function redeem(uint256 perpAmtBurnt) external;\\n\\n    /// @notice Rotates newer tranches in for reserve tokens.\\n    /// @param trancheIn The tranche token deposited.\\n    /// @param tokenOut The reserve token to be redeemed.\\n    /// @param trancheInAmt The amount of trancheIn tokens deposited.\\n    function rollover(\\n        ITranche trancheIn,\\n        IERC20Upgradeable tokenOut,\\n        uint256 trancheInAmt\\n    ) external;\\n\\n    /// @notice Reference to the wallet or contract that has the ability to pause/unpause operations.\\n    /// @return The address of the keeper.\\n    function keeper() external view returns (address);\\n\\n    /// @notice The address of the underlying rebasing ERC-20 collateral token backing the tranches.\\n    /// @return Address of the collateral token.\\n    function collateral() external view returns (IERC20Upgradeable);\\n\\n    /// @notice The \\\"virtual\\\" balance of all mature tranches held by the system.\\n    /// @return The mature tranche balance.\\n    function getMatureTrancheBalance() external returns (uint256);\\n\\n    /// @notice The parent bond whose tranches are currently accepted to mint perp tokens.\\n    /// @return Address of the deposit bond.\\n    function getDepositBond() external returns (IBondController);\\n\\n    /// @notice Checks if the given `trancheIn` can be rolled out for `tokenOut`.\\n    /// @param trancheIn The tranche token deposited.\\n    /// @param tokenOut The reserve token to be redeemed.\\n    /// @return If the given pair is a valid rollover.\\n    function isAcceptableRollover(ITranche trancheIn, IERC20Upgradeable tokenOut) external returns (bool);\\n\\n    /// @notice The strategy contract with the fee computation logic.\\n    /// @return Address of the strategy contract.\\n    function feeStrategy() external view returns (IFeeStrategy);\\n\\n    /// @notice The ERC-20 contract which holds perp balances.\\n    /// @return Address of the token.\\n    function perpERC20() external view returns (IERC20Upgradeable);\\n\\n    /// @notice The contract where the protocol holds funds which back the perp token supply.\\n    /// @return Address of the reserve.\\n    function reserve() external view returns (address);\\n\\n    /// @notice The address which holds any revenue extracted by protocol.\\n    /// @return Address of the fee collector.\\n    function protocolFeeCollector() external view returns (address);\\n\\n    /// @notice The fee token currently used to receive fees in.\\n    /// @return Address of the fee token.\\n    function feeToken() external view returns (IERC20Upgradeable);\\n\\n    /// @notice Total count of tokens held in the reserve.\\n    /// @return The reserve token count.\\n    function getReserveCount() external returns (uint256);\\n\\n    /// @notice The token address from the reserve list by index.\\n    /// @param index The index of a token.\\n    /// @return The reserve token address.\\n    function getReserveAt(uint256 index) external returns (IERC20Upgradeable);\\n\\n    /// @notice Checks if the given token is part of the reserve.\\n    /// @param token The address of a token to check.\\n    /// @return If the token is part of the reserve.\\n    function inReserve(IERC20Upgradeable token) external returns (bool);\\n\\n    /// @notice Fetches the reserve's token balance.\\n    /// @param token The address of the tranche token held by the reserve.\\n    /// @return The ERC-20 balance of the reserve token.\\n    function getReserveTokenBalance(IERC20Upgradeable token) external returns (uint256);\\n\\n    /// @notice Fetches the reserve's tranche token balance.\\n    /// @param tranche The address of the tranche token held by the reserve.\\n    /// @return The ERC-20 balance of the reserve tranche token.\\n    function getReserveTrancheBalance(IERC20Upgradeable tranche) external returns (uint256);\\n\\n    /// @notice Calculates the reserve's tranche token value,\\n    ///         in a standard denomination as defined by the implementation.\\n    /// @param tranche The address of the tranche token held by the reserve.\\n    /// @return The value of the reserve tranche balance held by the reserve, in a standard denomination.\\n    function getReserveTrancheValue(IERC20Upgradeable tranche) external returns (uint256);\\n\\n    /// @notice Computes the price of each perp token, i.e) reserve value / total supply.\\n    /// @return The average price per perp token.\\n    function getAvgPrice() external returns (uint256);\\n\\n    /// @notice Fetches the list of reserve tokens which are up for rollover.\\n    /// @return The list of reserve tokens up for rollover.\\n    function getReserveTokensUpForRollover() external returns (IERC20Upgradeable[] memory);\\n\\n    /// @notice Computes the amount of perp tokens minted when `trancheInAmt` `trancheIn` tokens\\n    ///         are deposited into the system.\\n    /// @param trancheIn The tranche token deposited.\\n    /// @param trancheInAmt The amount of tranche tokens deposited.\\n    /// @return The amount of perp tokens to be minted.\\n    function computeMintAmt(ITranche trancheIn, uint256 trancheInAmt) external returns (uint256);\\n\\n    /// @notice Computes the amount reserve tokens redeemed when burning given number of perp tokens.\\n    /// @param perpAmtBurnt The amount of perp tokens to be burnt.\\n    /// @return tokensOut The list of reserve tokens redeemed.\\n    /// @return tokenOutAmts The list of reserve token amounts redeemed.\\n    function computeRedemptionAmts(uint256 perpAmtBurnt)\\n        external\\n        returns (IERC20Upgradeable[] memory tokensOut, uint256[] memory tokenOutAmts);\\n\\n    struct RolloverPreview {\\n        /// @notice The perp denominated value of tokens rolled over.\\n        uint256 perpRolloverAmt;\\n        /// @notice The amount of tokens rolled out.\\n        uint256 tokenOutAmt;\\n        /// @notice The tranche denominated amount of tokens rolled out.\\n        /// @dev tokenOutAmt and trancheOutAmt can only be different values\\n        ///      in the case of rolling over the mature tranche.\\n        uint256 trancheOutAmt;\\n        /// @notice The amount of trancheIn tokens rolled in.\\n        uint256 trancheInAmt;\\n        /// @notice The difference between the available trancheIn amount and\\n        ///        the amount of tokens used for the rollover.\\n        uint256 remainingTrancheInAmt;\\n    }\\n\\n    /// @notice Computes the amount reserve tokens that are rolled out for the given number\\n    ///         of `trancheIn` tokens rolled in.\\n    /// @param trancheIn The tranche token rolled in.\\n    /// @param tokenOut The reserve token to be rolled out.\\n    /// @param trancheInAmtAvailable The amount of trancheIn tokens rolled in.\\n    /// @param tokenOutAmtRequested The amount of tokenOut tokens requested to be rolled out.\\n    /// @return r The rollover amounts in various denominations.\\n    function computeRolloverAmt(\\n        ITranche trancheIn,\\n        IERC20Upgradeable tokenOut,\\n        uint256 trancheInAmtAvailable,\\n        uint256 tokenOutAmtRequested\\n    ) external returns (RolloverPreview memory);\\n\\n    /// @notice The discount to be applied given the reserve token.\\n    /// @param token The address of the reserve token.\\n    /// @return The discount applied.\\n    function computeDiscount(IERC20Upgradeable token) external view returns (uint256);\\n\\n    /// @notice The price of the given reserve token.\\n    /// @param token The address of the reserve token.\\n    /// @return The computed price.\\n    function computePrice(IERC20Upgradeable token) external view returns (uint256);\\n\\n    /// @notice Updates time dependent storage state.\\n    function updateState() external;\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IPricingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"../oz/IERC20Upgradeable.sol\\\";\\nimport { ITranche } from \\\"../_interfaces/buttonwood/ITranche.sol\\\";\\n\\ninterface IPricingStrategy {\\n    /// @notice Computes the price of a given tranche token.\\n    /// @param tranche The tranche to compute price of.\\n    /// @return The price as a fixed point number with `decimals()`.\\n    function computeTranchePrice(ITranche tranche) external view returns (uint256);\\n\\n    /// @notice Computes the price of mature tranches extracted and held as naked collateral.\\n    /// @param collateralToken The collateral token.\\n    /// @param collateralBalance The collateral balance of all the mature tranches.\\n    /// @param debt The total count of mature tranches.\\n    /// @return The price as a fixed point number with `decimals()`.\\n    function computeMatureTranchePrice(\\n        IERC20Upgradeable collateralToken,\\n        uint256 collateralBalance,\\n        uint256 debt\\n    ) external view returns (uint256);\\n\\n    /// @notice Number of price decimals.\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"../oz/IERC20Upgradeable.sol\\\";\\n\\n/// @notice Expected asset to be a valid vault asset.\\n/// @param token Address of the token.\\nerror UnexpectedAsset(IERC20Upgradeable token);\\n\\n/// @notice Expected transfer out asset to not be a vault asset.\\n/// @param token Address of the token transferred.\\nerror UnauthorizedTransferOut(IERC20Upgradeable token);\\n\\n/// @notice Expected a minimum amount of vault assets to be deployed.\\nerror InsufficientDeployment();\\n\\n/// @notice Expected the number of vault assets deployed to be under the limit.\\nerror DeployedCountOverLimit();\\n\\n/*\\n *  @title IVault\\n *\\n *  @notice The standard interface for a generic vault as described by the \\\"Vault Framework\\\".\\n *          http://thinking.farm/essays/2022-10-05-mechanical-finance/\\n *\\n *          Users deposit a \\\"underlying\\\" asset and mint \\\"notes\\\" (or vault shares).\\n *          The vault \\\"deploys\\\" underlying asset in a rules-based fashion (through a hard-coded strategy)\\n *          to \\\"earn\\\" income. It \\\"recovers\\\" deployed assets once the investment matures.\\n *\\n *          The vault operates through two external poke functions which off-chain keepers can execute.\\n *              1) `deploy`: When executed, the vault \\\"puts to work\\\" the underlying assets it holds. The vault\\n *                           usually returns other ERC-20 tokens which act as receipts of the deployment.\\n *              2) `recover`: When executed, the vault turns in the receipts and retrieves the underlying asset and\\n *                            usually collects some yield for this work.\\n *\\n *          The rules of the deployment and recovery are specific to the vault strategy.\\n *\\n *          At any time the vault will hold multiple ERC20 tokens, together referred to as the vault's \\\"assets\\\".\\n *          They can be a combination of the underlying asset, the earned asset and the deployed assets (receipts).\\n *\\n *          On redemption users burn their \\\"notes\\\" to receive a proportional slice of all the vault's assets.\\n *\\n */\\n\\ninterface IVault {\\n    /// @notice Recovers deployed funds and redeploys them.\\n    function recoverAndRedeploy() external;\\n\\n    /// @notice Deploys deposited funds.\\n    function deploy() external;\\n\\n    /// @notice Recovers deployed funds.\\n    function recover() external;\\n\\n    /// @notice Recovers a given deployed asset.\\n    /// @param token The ERC-20 token address of the deployed asset.\\n    function recover(IERC20Upgradeable token) external;\\n\\n    /// @notice Deposits the underlying asset from {msg.sender} into the vault and mints notes.\\n    /// @param amount The amount tokens to be deposited into the vault.\\n    /// @return The amount of notes.\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    struct TokenAmount {\\n        /// @notice The asset token redeemed.\\n        IERC20Upgradeable token;\\n        /// @notice The amount redeemed.\\n        uint256 amount;\\n    }\\n\\n    /// @notice Burns notes and sends a proportional share of vault's assets back to {msg.sender}.\\n    /// @param notes The amount of notes to be burnt.\\n    /// @return The list of asset tokens and amounts redeemed.\\n    function redeem(uint256 notes) external returns (TokenAmount[] memory);\\n\\n    /// @return The total value of assets currently held by the vault, denominated in a standard unit of account.\\n    function getTVL() external returns (uint256);\\n\\n    /// @param token The address of the asset ERC-20 token held by the vault.\\n    /// @return The vault's asset token value, denominated in a standard unit of account.\\n    function getVaultAssetValue(IERC20Upgradeable token) external returns (uint256);\\n\\n    /// @notice The ERC20 token that can be deposited into this vault.\\n    function underlying() external view returns (IERC20Upgradeable);\\n\\n    /// @param token The address of the asset ERC-20 token held by the vault.\\n    /// @return The vault's asset token balance.\\n    function vaultAssetBalance(IERC20Upgradeable token) external view returns (uint256);\\n\\n    /// @return Total count of deployed asset tokens held by the vault.\\n    function deployedCount() external view returns (uint256);\\n\\n    /// @param i The index of a token.\\n    /// @return The token address from the deployed asset token list by index.\\n    function deployedAt(uint256 i) external view returns (IERC20Upgradeable);\\n\\n    /// @return Total count of earned income tokens held by the vault.\\n    function earnedCount() external view returns (uint256);\\n\\n    /// @param i The index of a token.\\n    /// @return The token address from the earned income token list by index.\\n    function earnedAt(uint256 i) external view returns (IERC20Upgradeable);\\n\\n    /// @param token The address of a token to check.\\n    /// @return If the given token is held by the vault.\\n    function isVaultAsset(IERC20Upgradeable token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/_utils/BondHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport { IERC20Upgradeable } from \\\"../oz/IERC20Upgradeable.sol\\\";\\nimport { IBondController } from \\\"../_interfaces/buttonwood/IBondController.sol\\\";\\nimport { ITranche } from \\\"../_interfaces/buttonwood/ITranche.sol\\\";\\n\\nimport { SafeCastUpgradeable } from \\\"../oz/SafeCastUpgradeable.sol\\\";\\nimport { MathUpgradeable } from \\\"../oz/MathUpgradeable.sol\\\";\\n\\n/// @notice Expected tranche to be part of bond.\\n/// @param tranche Address of the tranche token.\\nerror UnacceptableTranche(ITranche tranche);\\n\\nstruct BondTranches {\\n    ITranche[] tranches;\\n    uint256[] trancheRatios;\\n}\\n\\n/**\\n *  @title BondTranchesHelpers\\n *\\n *  @notice Library with helper functions for the bond's retrieved tranche data.\\n *\\n */\\nlibrary BondTranchesHelpers {\\n    /// @notice Iterates through the tranche data to find the seniority index of the given tranche.\\n    /// @param bt The tranche data object.\\n    /// @param t The address of the tranche to check.\\n    /// @return the index of the tranche in the tranches array.\\n    function indexOf(BondTranches memory bt, ITranche t) internal pure returns (uint8) {\\n        for (uint8 i = 0; i < bt.tranches.length; i++) {\\n            if (bt.tranches[i] == t) {\\n                return i;\\n            }\\n        }\\n        revert UnacceptableTranche(t);\\n    }\\n}\\n\\n/**\\n *  @title TrancheHelpers\\n *\\n *  @notice Library with helper functions for tranche tokens.\\n *\\n */\\nlibrary TrancheHelpers {\\n    /// @notice Given a tranche, looks up the collateral balance backing the tranche supply.\\n    /// @param t Address of the tranche token.\\n    /// @return The collateral balance and the tranche token supply.\\n    function getTrancheCollateralization(ITranche t) internal view returns (uint256, uint256) {\\n        IBondController bond = IBondController(t.bond());\\n        BondTranches memory bt;\\n        uint256[] memory collateralBalances;\\n        uint256[] memory trancheSupplies;\\n        (bt, collateralBalances, trancheSupplies) = BondHelpers.getTrancheCollateralizations(bond);\\n        uint256 trancheIndex = BondTranchesHelpers.indexOf(bt, t);\\n        return (collateralBalances[trancheIndex], trancheSupplies[trancheIndex]);\\n    }\\n}\\n\\n/**\\n *  @title BondHelpers\\n *\\n *  @notice Library with helper functions for ButtonWood's Bond contract.\\n *\\n */\\nlibrary BondHelpers {\\n    using SafeCastUpgradeable for uint256;\\n    using MathUpgradeable for uint256;\\n\\n    // Replicating value used here:\\n    // https://github.com/buttonwood-protocol/tranche/blob/main/contracts/BondController.sol\\n    uint256 private constant TRANCHE_RATIO_GRANULARITY = 1000;\\n    uint256 private constant BPS = 10_000;\\n\\n    /// @notice Given a bond, calculates the time remaining to maturity.\\n    /// @param b The address of the bond contract.\\n    /// @return The number of seconds before the bond reaches maturity.\\n    function secondsToMaturity(IBondController b) internal view returns (uint256) {\\n        uint256 maturityDate = b.maturityDate();\\n        return maturityDate > block.timestamp ? maturityDate - block.timestamp : 0;\\n    }\\n\\n    /// @notice Given a bond, retrieves all of the bond's tranches.\\n    /// @param b The address of the bond contract.\\n    /// @return The tranche data.\\n    function getTranches(IBondController b) internal view returns (BondTranches memory) {\\n        BondTranches memory bt;\\n        uint8 trancheCount = b.trancheCount().toUint8();\\n        bt.tranches = new ITranche[](trancheCount);\\n        bt.trancheRatios = new uint256[](trancheCount);\\n        // Max tranches per bond < 2**8 - 1\\n        for (uint8 i = 0; i < trancheCount; i++) {\\n            (ITranche t, uint256 ratio) = b.tranches(i);\\n            bt.tranches[i] = t;\\n            bt.trancheRatios[i] = ratio;\\n        }\\n        return bt;\\n    }\\n\\n    /// @notice Given a bond, returns the tranche at the specified index.\\n    /// @param b The address of the bond contract.\\n    /// @param i Index of the tranche.\\n    /// @return t The tranche address.\\n    function trancheAt(IBondController b, uint8 i) internal view returns (ITranche t) {\\n        (t, ) = b.tranches(i);\\n        return t;\\n    }\\n\\n    /// @notice Helper function to estimate the amount of tranches minted when a given amount of collateral\\n    ///         is deposited into the bond.\\n    /// @dev This function is used off-chain services (using callStatic) to preview tranches minted after\\n    /// @param b The address of the bond contract.\\n    /// @return The tranche data, an array of tranche amounts and fees.\\n    function previewDeposit(IBondController b, uint256 collateralAmount)\\n        internal\\n        view\\n        returns (\\n            BondTranches memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        BondTranches memory bt = getTranches(b);\\n        uint256[] memory trancheAmts = new uint256[](bt.tranches.length);\\n        uint256[] memory fees = new uint256[](bt.tranches.length);\\n\\n        uint256 totalDebt = b.totalDebt();\\n        uint256 collateralBalance = IERC20Upgradeable(b.collateralToken()).balanceOf(address(b));\\n        uint256 feeBps = b.feeBps();\\n\\n        for (uint8 i = 0; i < bt.tranches.length; i++) {\\n            trancheAmts[i] = collateralAmount.mulDiv(bt.trancheRatios[i], TRANCHE_RATIO_GRANULARITY);\\n            if (collateralBalance > 0) {\\n                trancheAmts[i] = trancheAmts[i].mulDiv(totalDebt, collateralBalance);\\n            }\\n        }\\n\\n        if (feeBps > 0) {\\n            for (uint8 i = 0; i < bt.tranches.length; i++) {\\n                fees[i] = trancheAmts[i].mulDiv(feeBps, BPS);\\n                trancheAmts[i] -= fees[i];\\n            }\\n        }\\n\\n        return (bt, trancheAmts, fees);\\n    }\\n\\n    /// @notice Given a bond, for each tranche token retrieves the total collateral redeemable\\n    ///         for the total supply of the tranche token (aka debt issued).\\n    /// @dev The cdr can be computed for each tranche by dividing the\\n    ///      returned tranche's collateralBalance by the tranche's totalSupply.\\n    /// @param b The address of the bond contract.\\n    /// @return The tranche data and the list of collateral balances and the total supplies for each tranche.\\n    function getTrancheCollateralizations(IBondController b)\\n        internal\\n        view\\n        returns (\\n            BondTranches memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        BondTranches memory bt = getTranches(b);\\n        uint256[] memory collateralBalances = new uint256[](bt.tranches.length);\\n        uint256[] memory trancheSupplies = new uint256[](bt.tranches.length);\\n\\n        // When the bond is mature, the collateral is transferred over to the individual tranche token contracts\\n        if (b.isMature()) {\\n            for (uint8 i = 0; i < bt.tranches.length; i++) {\\n                trancheSupplies[i] = bt.tranches[i].totalSupply();\\n                collateralBalances[i] = IERC20Upgradeable(b.collateralToken()).balanceOf(address(bt.tranches[i]));\\n            }\\n            return (bt, collateralBalances, trancheSupplies);\\n        }\\n\\n        // Before the bond is mature, all the collateral is held by the bond contract\\n        uint256 bondCollateralBalance = IERC20Upgradeable(b.collateralToken()).balanceOf(address(b));\\n        uint256 zTrancheIndex = bt.tranches.length - 1;\\n        for (uint8 i = 0; i < bt.tranches.length; i++) {\\n            trancheSupplies[i] = bt.tranches[i].totalSupply();\\n\\n            // a to y tranches\\n            if (i != zTrancheIndex) {\\n                collateralBalances[i] = (trancheSupplies[i] <= bondCollateralBalance)\\n                    ? trancheSupplies[i]\\n                    : bondCollateralBalance;\\n                bondCollateralBalance -= collateralBalances[i];\\n            }\\n            // z tranche\\n            else {\\n                collateralBalances[i] = bondCollateralBalance;\\n            }\\n        }\\n\\n        return (bt, collateralBalances, trancheSupplies);\\n    }\\n\\n    /// @notice For a given bond and user address, computes the maximum number of each of the bond's tranches\\n    ///         the user is able to redeem before the bond's maturity. These tranche amounts necessarily match the bond's tranche ratios.\\n    /// @param b The address of the bond contract.\\n    /// @param u The address to check balance for.\\n    /// @return The tranche data and an array of tranche token balances.\\n    function computeRedeemableTrancheAmounts(IBondController b, address u)\\n        internal\\n        view\\n        returns (BondTranches memory, uint256[] memory)\\n    {\\n        BondTranches memory bt = getTranches(b);\\n        uint256[] memory redeemableAmts = new uint256[](bt.tranches.length);\\n\\n        // We Calculate how many underlying assets could be redeemed from each tranche balance,\\n        // assuming other tranches are not an issue, and record the smallest amount.\\n        //\\n        // Usually one tranche balance is the limiting factor, we first loop through to identify\\n        // it by figuring out the one which has the least `trancheBalance/trancheRatio`.\\n        //\\n        uint256 minBalanceToTrancheRatio = type(uint256).max;\\n        uint8 i;\\n        for (i = 0; i < bt.tranches.length; i++) {\\n            // NOTE: We round the avaiable balance down to the nearest multiple of the\\n            //       tranche ratio. This ensures that `minBalanceToTrancheRatio`\\n            //       can be represented without loss as a fixedPt number.\\n            uint256 bal = bt.tranches[i].balanceOf(u);\\n            bal = bal - (bal % bt.trancheRatios[i]);\\n\\n            uint256 d = bal.mulDiv(TRANCHE_RATIO_GRANULARITY, bt.trancheRatios[i]);\\n            if (d < minBalanceToTrancheRatio) {\\n                minBalanceToTrancheRatio = d;\\n            }\\n\\n            // if one of the balances is zero, we return\\n            if (minBalanceToTrancheRatio == 0) {\\n                return (bt, redeemableAmts);\\n            }\\n        }\\n\\n        // Now that we have `minBalanceToTrancheRatio`, we compute the redeemable amounts.\\n        for (i = 0; i < bt.tranches.length; i++) {\\n            redeemableAmts[i] = bt.trancheRatios[i].mulDiv(minBalanceToTrancheRatio, TRANCHE_RATIO_GRANULARITY);\\n        }\\n\\n        return (bt, redeemableAmts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/oz/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/oz/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20Upgradeable } from \\\"./ERC20Upgradeable.sol\\\";\\nimport { ContextUpgradeable } from \\\"./ContextUpgradeable.sol\\\";\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {}\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/oz/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"./IERC20Upgradeable.sol\\\";\\nimport { IERC20MetadataUpgradeable } from \\\"./IERC20MetadataUpgradeable.sol\\\";\\nimport { ContextUpgradeable } from \\\"./ContextUpgradeable.sol\\\";\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/oz/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/oz/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/oz/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport { AddressUpgradeable } from \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { ContextUpgradeable } from \\\"./ContextUpgradeable.sol\\\";\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/oz/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { ContextUpgradeable } from \\\"./ContextUpgradeable.sol\\\";\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/oz/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/oz/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/RolloverVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport { IERC20Upgradeable, IPerpetualTranche, IBondIssuer, IBondController, ITranche } from \\\"../_interfaces/IPerpetualTranche.sol\\\";\\nimport { IVault, UnexpectedAsset, UnauthorizedTransferOut, InsufficientDeployment, DeployedCountOverLimit } from \\\"../_interfaces/IVault.sol\\\";\\n\\nimport { OwnableUpgradeable } from \\\"../oz/OwnableUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"../oz/PausableUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"../oz/ReentrancyGuardUpgradeable.sol\\\";\\nimport { MathUpgradeable } from \\\"../oz/MathUpgradeable.sol\\\";\\nimport { ERC20BurnableUpgradeable } from \\\"../oz/ERC20BurnableUpgradeable.sol\\\";\\nimport { EnumerableSetUpgradeable } from \\\"../oz/EnumerableSetUpgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"../oz/SafeERC20Upgradeable.sol\\\";\\n\\nimport { BondTranches, TrancheHelpers, BondHelpers } from \\\"../_utils/BondHelpers.sol\\\";\\n\\n/// @notice Storage array access out of bounds.\\nerror OutOfBounds();\\n\\n/*\\n *  @title RolloverVault\\n *\\n *  @notice A vault which generates yield (from fees) by performing rollovers on PerpetualTranche (or perp).\\n *          The vault takes in AMPL or any other rebasing collateral as the \\\"underlying\\\" asset.\\n *\\n *          Vault strategy:\\n *              1) deploy: The vault deposits the underlying asset into perp's current deposit bond\\n *                 to get tranche tokens in return, it then swaps these fresh tranche tokens for\\n *                 older tranche tokens (ones mature or approaching maturity) from perp.\\n *                 system through a rollover operation and earns an income in perp tokens.\\n *              2) recover: The vault redeems tranches for the underlying asset.\\n *                 NOTE: It performs both mature and immature redemption. Read more: https://bit.ly/3tuN6OC\\n *\\n *\\n */\\ncontract RolloverVault is\\n    ERC20BurnableUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IVault\\n{\\n    // data handling\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using BondHelpers for IBondController;\\n    using TrancheHelpers for ITranche;\\n\\n    // ERC20 operations\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // math\\n    using MathUpgradeable for uint256;\\n\\n    //-------------------------------------------------------------------------\\n    // Events\\n\\n    /// @notice Emits the vault asset's token balance that's recorded after a change.\\n    /// @param token Address of token.\\n    /// @param balance The recorded ERC-20 balance of the token.\\n    event AssetSynced(IERC20Upgradeable token, uint256 balance);\\n\\n    //-------------------------------------------------------------------------\\n    // Constants\\n    uint8 public constant PERC_DECIMALS = 6;\\n    uint256 public constant UNIT_PERC = 10**PERC_DECIMALS;\\n    uint256 public constant HUNDRED_PERC = 100 * UNIT_PERC;\\n\\n    /// @dev Initial exchange rate between the underlying asset and notes.\\n    uint256 private constant INITIAL_RATE = 10**6;\\n\\n    /// @dev Values should line up as is in the perp contract.\\n    uint8 private constant PERP_PRICE_DECIMALS = 8;\\n    uint256 private constant PERP_UNIT_PRICE = (10**PERP_PRICE_DECIMALS);\\n\\n    /// @dev The maximum number of deployed assets that can be held in this vault at any given time.\\n    uint256 public constant MAX_DEPLOYED_COUNT = 47;\\n\\n    //--------------------------------------------------------------------------\\n    // ASSETS\\n    //\\n    // The vault's assets are represented by a master list of ERC-20 tokens\\n    //      => { [underlying] U _deployed U _earned }\\n    //\\n    // In the case of this vault, the \\\"earned\\\" assets are the perp tokens themselves.\\n    // The reward (or yield) for performing rollovers is paid out in perp tokens.\\n\\n    /// @notice The ERC20 token that can be deposited into this vault.\\n    IERC20Upgradeable public underlying;\\n\\n    /// @dev The set of the intermediate ERC-20 tokens when the underlying asset has been put to use.\\n    ///      In the case of this vault, they represent the tranche tokens held before maturity.\\n    EnumerableSetUpgradeable.AddressSet private _deployed;\\n\\n    //-------------------------------------------------------------------------\\n    // Storage\\n\\n    /// @notice Minimum amount of underlying assets that must be deployed, for a deploy operation to succeed.\\n    /// @dev The deployment transaction reverts, if the vaults does not have sufficient underlying tokens\\n    ///      to cover the minimum deployment amount.\\n    uint256 public minDeploymentAmt;\\n\\n    /// @notice The perpetual token on which rollovers are performed.\\n    IPerpetualTranche public perp;\\n\\n    //--------------------------------------------------------------------------\\n    // Construction & Initialization\\n\\n    /// @notice Contract state initialization.\\n    /// @param name ERC-20 Name of the vault token.\\n    /// @param symbol ERC-20 Symbol of the vault token.\\n    /// @param perp_ ERC-20 address of the perpetual tranche rolled over.\\n    function init(\\n        string memory name,\\n        string memory symbol,\\n        IPerpetualTranche perp_\\n    ) public initializer {\\n        __ERC20_init(name, symbol);\\n        __ERC20Burnable_init();\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        underlying = perp_.collateral();\\n        _syncAsset(underlying);\\n\\n        perp = perp_;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // ADMIN only methods\\n\\n    /// @notice Pauses deposits, withdrawals and vault operations.\\n    /// @dev NOTE: ERC-20 functions, like transfers will always remain operational.\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses deposits, withdrawals and vault operations.\\n    /// @dev NOTE: ERC-20 functions, like transfers will always remain operational.\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Updates the minimum deployment amount.\\n    /// @param minDeploymentAmt_ The new minimum deployment amount, denominated in underlying tokens.\\n    function updateMinDeploymentAmt(uint256 minDeploymentAmt_) external onlyOwner {\\n        minDeploymentAmt = minDeploymentAmt_;\\n    }\\n\\n    /// @notice Transfers a non-vault token out of the contract, which may have been added accidentally.\\n    /// @param token The token address.\\n    /// @param to The destination address.\\n    /// @param amount The amount of tokens to be transferred.\\n    function transferERC20(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (isVaultAsset(token)) {\\n            revert UnauthorizedTransferOut(token);\\n        }\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // HOT-FIX, update name and symbol\\n\\n    function forceUpdateERC20Params() external onlyOwner {\\n        _name = \\\"Staked Ampleforth\\\";\\n        _symbol = \\\"stAMPL\\\";\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // External & Public write methods\\n\\n    /// @inheritdoc IVault\\n    /// @dev Simply batches the `recover` and `deploy` functions. Reverts if there are no funds to deploy.\\n    function recoverAndRedeploy() external override {\\n        recover();\\n        deploy();\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev Its safer to call `recover` before `deploy` so the full available balance can be deployed.\\n    ///      Reverts if no funds are rolled over or if the minimum deployment threshold is not reached.\\n    function deploy() public override nonReentrant whenNotPaused {\\n        (uint256 deployedAmt, BondTranches memory bt) = _tranche(perp.getDepositBond());\\n        uint256 perpsRolledOver = _rollover(perp, bt);\\n        // NOTE: The following enforces that we only tranche the underlying if it can immediately be used for rotations.\\n        if (deployedAmt <= minDeploymentAmt || perpsRolledOver <= 0) {\\n            revert InsufficientDeployment();\\n        }\\n    }\\n\\n    /// @inheritdoc IVault\\n    function recover() public override nonReentrant whenNotPaused {\\n        uint256 deployedCount_ = _deployed.length();\\n        if (deployedCount_ <= 0) {\\n            return;\\n        }\\n\\n        // execute redemption on each deployed asset\\n        for (uint256 i = 0; i < deployedCount_; i++) {\\n            ITranche tranche = ITranche(_deployed.at(i));\\n            uint256 trancheBalance = tranche.balanceOf(address(this));\\n\\n            // if the vault has no tranche balance,\\n            // we update our internal book-keeping and continue to the next one.\\n            if (trancheBalance <= 0) {\\n                continue;\\n            }\\n\\n            // get the parent bond\\n            IBondController bond = IBondController(tranche.bond());\\n\\n            // if bond has matured, redeem the tranche token\\n            if (bond.secondsToMaturity() <= 0) {\\n                // execute redemption\\n                _execMatureTrancheRedemption(bond, tranche, trancheBalance);\\n            }\\n            // if not redeem using proportional balances\\n            // redeems this tranche and it's siblings if the vault holds balances.\\n            // NOTE: For gas optimization, we perform this operation only once\\n            // ie) when we encounter the most-senior tranche.\\n            else if (tranche == bond.trancheAt(0)) {\\n                // execute redemption\\n                _execImmatureTrancheRedemption(bond);\\n            }\\n        }\\n\\n        // sync deployed tranches\\n        // NOTE: We traverse the deployed set in the reverse order\\n        //       as deletions involve swapping the deleted element to the\\n        //       end of the set and removing the last element.\\n        for (uint256 i = deployedCount_; i > 0; i--) {\\n            _syncAndRemoveDeployedAsset(IERC20Upgradeable(_deployed.at(i - 1)));\\n        }\\n\\n        // sync underlying\\n        _syncAsset(underlying);\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev Reverts when attempting to recover a tranche which is not part of the deployed list.\\n    ///      In the case of immature redemption, this method will recover other sibling tranches as well.\\n    function recover(IERC20Upgradeable token) external override nonReentrant whenNotPaused {\\n        if (!_deployed.contains(address(token))) {\\n            revert UnexpectedAsset(token);\\n        }\\n\\n        ITranche tranche = ITranche(address(token));\\n        uint256 trancheBalance = tranche.balanceOf(address(this));\\n\\n        // if the vault has no tranche balance,\\n        // we update our internal book-keeping and return.\\n        if (trancheBalance <= 0) {\\n            _syncAndRemoveDeployedAsset(tranche);\\n            return;\\n        }\\n\\n        // get the parent bond\\n        IBondController bond = IBondController(tranche.bond());\\n\\n        // if bond has matured, redeem the tranche token\\n        if (bond.secondsToMaturity() <= 0) {\\n            // execute redemption\\n            _execMatureTrancheRedemption(bond, tranche, trancheBalance);\\n\\n            // sync deployed asset\\n            _syncAndRemoveDeployedAsset(tranche);\\n        }\\n        // if not redeem using proportional balances\\n        // redeems this tranche and it's siblings if the vault holds balances.\\n        else {\\n            // execute redemption\\n            BondTranches memory bt = _execImmatureTrancheRedemption(bond);\\n\\n            // sync deployed asset, ie current tranche and all its siblings.\\n            for (uint8 j = 0; j < bt.tranches.length; j++) {\\n                _syncAndRemoveDeployedAsset(bt.tranches[j]);\\n            }\\n        }\\n\\n        // sync underlying\\n        _syncAsset(underlying);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function deposit(uint256 amount) external override nonReentrant whenNotPaused returns (uint256) {\\n        uint256 totalSupply_ = totalSupply();\\n        uint256 notes = (totalSupply_ > 0) ? totalSupply_.mulDiv(amount, getTVL()) : (amount * INITIAL_RATE);\\n\\n        underlying.safeTransferFrom(_msgSender(), address(this), amount);\\n        _syncAsset(underlying);\\n\\n        _mint(_msgSender(), notes);\\n        return notes;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function redeem(uint256 notes) external override nonReentrant whenNotPaused returns (IVault.TokenAmount[] memory) {\\n        uint256 totalNotes = totalSupply();\\n        uint256 deployedCount_ = _deployed.length();\\n        uint256 assetCount = 2 + deployedCount_;\\n\\n        // aggregating vault assets to be redeemed\\n        IVault.TokenAmount[] memory redemptions = new IVault.TokenAmount[](assetCount);\\n        redemptions[0].token = underlying;\\n        for (uint256 i = 0; i < deployedCount_; i++) {\\n            redemptions[i + 1].token = IERC20Upgradeable(_deployed.at(i));\\n        }\\n        redemptions[deployedCount_ + 1].token = IERC20Upgradeable(perp);\\n\\n        // burn notes\\n        _burn(_msgSender(), notes);\\n\\n        // calculating amounts and transferring assets out proportionally\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            redemptions[i].amount = redemptions[i].token.balanceOf(address(this)).mulDiv(notes, totalNotes);\\n            redemptions[i].token.safeTransfer(_msgSender(), redemptions[i].amount);\\n            _syncAsset(redemptions[i].token);\\n        }\\n\\n        return redemptions;\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev The total value is denominated in the underlying asset.\\n    function getTVL() public override returns (uint256) {\\n        uint256 totalValue = 0;\\n\\n        // The underlying balance\\n        totalValue += underlying.balanceOf(address(this));\\n\\n        // The deployed asset value denominated in the underlying\\n        for (uint256 i = 0; i < _deployed.length(); i++) {\\n            ITranche tranche = ITranche(_deployed.at(i));\\n            uint256 trancheBalance = tranche.balanceOf(address(this));\\n            if (trancheBalance > 0) {\\n                (uint256 collateralBalance, uint256 trancheSupply) = tranche.getTrancheCollateralization();\\n                totalValue += collateralBalance.mulDiv(trancheBalance, trancheSupply);\\n            }\\n        }\\n\\n        // The earned asset (perp token) value denominated in the underlying\\n        uint256 perpBalance = perp.balanceOf(address(this));\\n        if (perpBalance > 0) {\\n            // The \\\"earned\\\" asset is assumed to be the perp token.\\n            // Perp tokens are assumed to have the same denomination as the underlying\\n            totalValue += perpBalance.mulDiv(IPerpetualTranche(address(perp)).getAvgPrice(), PERP_UNIT_PRICE);\\n        }\\n\\n        return totalValue;\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev The asset value is denominated in the underlying asset.\\n    function getVaultAssetValue(IERC20Upgradeable token) external override returns (uint256) {\\n        // Underlying asset\\n        if (token == underlying) {\\n            return token.balanceOf(address(this));\\n        }\\n        // Deployed asset\\n        else if (_deployed.contains(address(token))) {\\n            (uint256 collateralBalance, uint256 trancheSupply) = ITranche(address(token)).getTrancheCollateralization();\\n            return collateralBalance.mulDiv(token.balanceOf(address(this)), trancheSupply);\\n        }\\n        // Earned asset\\n        else if (address(token) == address(perp)) {\\n            return (\\n                token.balanceOf(address(this)).mulDiv(IPerpetualTranche(address(perp)).getAvgPrice(), PERP_UNIT_PRICE)\\n            );\\n        }\\n\\n        // Not a vault asset, so returning zero\\n        return 0;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // External & Public read methods\\n\\n    /// @inheritdoc IVault\\n    function vaultAssetBalance(IERC20Upgradeable token) external view override returns (uint256) {\\n        return isVaultAsset(token) ? token.balanceOf(address(this)) : 0;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function deployedCount() external view override returns (uint256) {\\n        return _deployed.length();\\n    }\\n\\n    /// @inheritdoc IVault\\n    function deployedAt(uint256 i) external view override returns (IERC20Upgradeable) {\\n        return IERC20Upgradeable(_deployed.at(i));\\n    }\\n\\n    /// @inheritdoc IVault\\n    function earnedCount() external pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function earnedAt(uint256 i) external view override returns (IERC20Upgradeable) {\\n        if (i > 0) {\\n            revert OutOfBounds();\\n        }\\n        return IERC20Upgradeable(perp);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function isVaultAsset(IERC20Upgradeable token) public view override returns (bool) {\\n        return (token == underlying) || _deployed.contains(address(token)) || (address(token) == address(perp));\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Private write methods\\n\\n    /// @dev Deposits underlying balance into the provided bond and receives tranche tokens in return.\\n    ///      And performs some book-keeping to keep track of the vault's assets.\\n    /// @return balance The amount of underlying assets tranched.\\n    /// @return bt The given bonds tranche data.\\n    function _tranche(IBondController bond) private returns (uint256, BondTranches memory) {\\n        // Get bond's tranche data\\n        BondTranches memory bt = bond.getTranches();\\n\\n        // Get underlying balance\\n        uint256 balance = underlying.balanceOf(address(this));\\n\\n        // Skip if balance is zero\\n        if (balance <= 0) {\\n            return (0, bt);\\n        }\\n\\n        // balance is tranched\\n        _checkAndApproveMax(underlying, address(bond), balance);\\n        bond.deposit(balance);\\n\\n        // sync holdings\\n        for (uint8 i = 0; i < bt.tranches.length; i++) {\\n            _syncAndAddDeployedAsset(bt.tranches[i]);\\n        }\\n        _syncAsset(underlying);\\n\\n        return (balance, bt);\\n    }\\n\\n    /// @dev Rolls over freshly tranched tokens from the given bond for older tranches (close to maturity) from perp.\\n    ///      And performs some book-keeping to keep track of the vault's assets.\\n    /// @return The amount of perps rolled over.\\n    function _rollover(IPerpetualTranche perp_, BondTranches memory bt) private returns (uint256) {\\n        // NOTE: The first element of the list is the mature tranche,\\n        //       there after the list is NOT ordered by maturity.\\n        IERC20Upgradeable[] memory rolloverTokens = perp_.getReserveTokensUpForRollover();\\n\\n        // Batch rollover\\n        uint256 totalPerpRolledOver = 0;\\n        uint8 vaultTrancheIdx = 0;\\n        uint256 perpTokenIdx = 0;\\n\\n        // We pair tranche tokens held by the vault with tranche tokens held by perp,\\n        // And execute the rollover and continue to the next token with a usable balance.\\n        while (vaultTrancheIdx < bt.tranches.length && perpTokenIdx < rolloverTokens.length) {\\n            // trancheIntoPerp refers to the tranche going into perp from the vault\\n            ITranche trancheIntoPerp = bt.tranches[vaultTrancheIdx];\\n\\n            // tokenOutOfPerp is the reserve token coming out of perp into the vault\\n            IERC20Upgradeable tokenOutOfPerp = rolloverTokens[perpTokenIdx];\\n\\n            // compute available token out\\n            uint256 tokenOutAmtAvailable = address(tokenOutOfPerp) != address(0)\\n                ? tokenOutOfPerp.balanceOf(perp_.reserve())\\n                : 0;\\n\\n            // trancheIntoPerp tokens are NOT exhausted but tokenOutOfPerp is exhausted\\n            if (tokenOutAmtAvailable <= 0) {\\n                // Rollover is a no-op, so skipping to next tokenOutOfPerp\\n                ++perpTokenIdx;\\n                continue;\\n            }\\n\\n            // Compute available tranche in\\n            uint256 trancheInAmtAvailable = trancheIntoPerp.balanceOf(address(this));\\n\\n            // trancheInAmtAvailable is exhausted\\n            if (trancheInAmtAvailable <= 0) {\\n                // Rollover is a no-op, so skipping to next trancheIntoPerp\\n                ++vaultTrancheIdx;\\n                continue;\\n            }\\n\\n            // Preview rollover\\n            IPerpetualTranche.RolloverPreview memory rd = perp_.computeRolloverAmt(\\n                trancheIntoPerp,\\n                tokenOutOfPerp,\\n                trancheInAmtAvailable,\\n                tokenOutAmtAvailable\\n            );\\n\\n            // trancheIntoPerp isn't accepted by perp, likely because it's yield=0, refer perp docs for more info\\n            if (rd.perpRolloverAmt <= 0) {\\n                // Rollover is a no-op, so skipping to next trancheIntoPerp\\n                ++vaultTrancheIdx;\\n                continue;\\n            }\\n\\n            // Perform rollover\\n            _checkAndApproveMax(trancheIntoPerp, address(perp_), trancheInAmtAvailable);\\n            perp_.rollover(trancheIntoPerp, tokenOutOfPerp, trancheInAmtAvailable);\\n\\n            // sync deployed asset sent to perp\\n            _syncAndRemoveDeployedAsset(trancheIntoPerp);\\n\\n            // skip insertion into the deployed list the case of the mature tranche, ie underlying\\n            if (tokenOutOfPerp != underlying) {\\n                // sync deployed asset retrieved from perp\\n                _syncAndAddDeployedAsset(tokenOutOfPerp);\\n            }\\n\\n            // keep track of total amount rolled over\\n            totalPerpRolledOver += rd.perpRolloverAmt;\\n        }\\n\\n        // sync underlying and earned (ie perp)\\n        _syncAsset(underlying);\\n        _syncAsset(perp_);\\n\\n        return totalPerpRolledOver;\\n    }\\n\\n    /// @dev Low level method that redeems the given mature tranche for the underlying asset.\\n    ///      It interacts with the button-wood bond contract.\\n    ///      This function should NOT be called directly, use `recover()` or `recover(tranche)`\\n    ///      which wrap this function with the internal book-keeping necessary,\\n    ///      to keep track of the vault's assets.\\n    function _execMatureTrancheRedemption(\\n        IBondController bond,\\n        ITranche tranche,\\n        uint256 amount\\n    ) private {\\n        if (!bond.isMature()) {\\n            bond.mature();\\n        }\\n        bond.redeemMature(address(tranche), amount);\\n    }\\n\\n    /// @dev Low level method that redeems the given tranche for the underlying asset, before maturity.\\n    ///      If the vault holds sibling tranches with proportional balances, those will also get redeemed.\\n    ///      It interacts with the button-wood bond contract.\\n    ///      This function should NOT be called directly, use `recover()` or `recover(tranche)`\\n    ///      which wrap this function with the internal book-keeping necessary,\\n    ///      to keep track of the vault's assets.\\n    function _execImmatureTrancheRedemption(IBondController bond) private returns (BondTranches memory bt) {\\n        uint256[] memory trancheAmts;\\n        (bt, trancheAmts) = bond.computeRedeemableTrancheAmounts(address(this));\\n\\n        // NOTE: It is guaranteed that if one tranche amount is zero, all amounts are zeros.\\n        if (trancheAmts[0] > 0) {\\n            bond.redeem(trancheAmts);\\n        }\\n\\n        return bt;\\n    }\\n\\n    /// @dev Syncs balance and adds the given asset into the deployed list if the vault has a balance.\\n    function _syncAndAddDeployedAsset(IERC20Upgradeable token) private {\\n        uint256 balance = token.balanceOf(address(this));\\n        emit AssetSynced(token, balance);\\n\\n        if (balance > 0 && !_deployed.contains(address(token))) {\\n            // Inserts new token into the deployed assets list.\\n            _deployed.add(address(token));\\n            if (_deployed.length() > MAX_DEPLOYED_COUNT) {\\n                revert DeployedCountOverLimit();\\n            }\\n        }\\n    }\\n\\n    /// @dev Syncs balance and removes the given asset from the deployed list if the vault has no balance.\\n    function _syncAndRemoveDeployedAsset(IERC20Upgradeable token) private {\\n        uint256 balance = token.balanceOf(address(this));\\n        emit AssetSynced(token, balance);\\n\\n        if (balance <= 0 && _deployed.contains(address(token))) {\\n            // Removes token into the deployed assets list.\\n            _deployed.remove(address(token));\\n        }\\n    }\\n\\n    /// @dev Logs the token balance held by the vault.\\n    function _syncAsset(IERC20Upgradeable token) private {\\n        uint256 balance = token.balanceOf(address(this));\\n        emit AssetSynced(token, balance);\\n    }\\n\\n    /// @dev Checks if the spender has sufficient allowance. If not, approves the maximum possible amount.\\n    function _checkAndApproveMax(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance < amount) {\\n            token.safeApprove(spender, 0);\\n            token.safeApprove(spender, type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DeployedCountOverLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ITranche\",\"name\":\"tranche\",\"type\":\"address\"}],\"name\":\"UnacceptableTranche\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransferOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnexpectedAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"AssetSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPLOYED_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT_PERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"deployedAt\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"earnedAt\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUpdateERC20Params\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getVaultAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IPerpetualTranche\",\"name\":\"perp_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isVaultAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeploymentAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perp\",\"outputs\":[{\"internalType\":\"contract IPerpetualTranche\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverAndRedeploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notes\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.TokenAmount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeploymentAmt_\",\"type\":\"uint256\"}],\"name\":\"updateMinDeploymentAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"vaultAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RolloverVault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}