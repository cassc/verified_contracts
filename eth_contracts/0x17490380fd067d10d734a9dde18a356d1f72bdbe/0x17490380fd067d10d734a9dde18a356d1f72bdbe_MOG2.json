{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IMOG2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./math/SafeMath.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMOG2 is IERC20 {\\n    event MOGMaxTxAmountUpdated(uint value);\\n    event MOGTaxReducedToZero();\\n}\\n\"\r\n    },\r\n    \"contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MOG2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n// Local Imports\\nimport \\\"./IMOG2.sol\\\";\\n\\n// @@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@%%%%%###########%%%%%@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@%%%##%%%@@@@@@@@@@@@@@@@@%%%##%%%@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@\\n// @@@@@@@@@@@%%@@@@@@@@@@@@@@@@%%##%%@@@@@@@@@@@%%%%%%%@@@@@@@@@@@%%##%%@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@\\n// @@@@@@@@@@%%@@@@@@@@@@@@@@%%##%@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@%##%%@@@@@@@@@@@@@@%%@@@@@@@@@@@\\n// @@@@@@@@%%@@@@@@@@@@@@@%%##@@@@@@%%%%%%%%#################%%%%%%%%@@@@@@##%%@@@@@@@@@@@@@%%@@@@@@@@@\\n// @@@@@@@%@@@@@@@@@@@@@%%#%@@@@@%%%%%##########*********##########%%%%%%@@@@%#%%@@@@@@@@@@@@@%@@@@@@@@\\n// @@@@@%%@@@@@@@@@@@@%%#%@#----*%%######***********************######%%*----#@@#%%@@@@@@@@@@@@%%@@@@@@\\n// @@@@%%@@@@@@@@@@@%%#%@@@+-=+=---=*#****#%@@@@@@@@@%@@@@@@@%#****#*=----==-+@@@@#%@@@@@@@@@@@@%%@@@@@\\n// @@@%%@@@@@@@@@@@%#%@@@@%=-+++++=---=#@@%%%%%%%%%%%%%%%%%%%%%@@#=---=++++=-=@@@@@%#%@@@@@@@@@@@%%@@@@\\n// @@%%@@@@@@@@@@%%#@@@%%%%=-++++++++==--=#%%###############%%#=--==++++++++--%%%%@@@#%%@@@@@@@@@@@%@@@\\n// @%%@@@@@@@@@@%#%@@@%%%%%--+++++++++++==--+###********####+=-==+++++++++++--#%%%%@@@%#%@@@@@@@@@@@%@@\\n// %%@@@@@@@@@@%#%@@@%%%%%%--++++++++++=-:::::::::::::::::::::::-=++++++++++--#%#%%%@@@%#%@@@@@@@@@@%%@\\n// %@@@@@@@@@@%#%@@@%%%####-=++++++=-:::::::::::::::::::::::::::::::-=++++++=-#####%%%@@%#%@@@@@@@@@@%%\\n// @@@@@@@@@@%#%@@%%%######--++++-::::::::::::..........:::::::::::::::=++++=-*#####%%%@@@#%@@@@@@@@@@%\\n// @@@@@@@@@%#%@@%%%###**#%=-++-::::::::::::::............:::::::::------=++--%#**###%%%@@%#%@@@@@@@@@@\\n// @@@@@@@@%##@@@%%###***%@=-=--:::::::::::::..............:::::::::-------=-=@@***###%%%@@%#%@@@@@@@@@\\n// @@@@@@@@%#@@@%%%##***%@@+----::-=++-::::::...............::::::-+*+-------*@@%***###%%@@@#%@@@@@@@@@\\n// @@@@@@@%#%@@%%%###**#@%%=---=#%%%%+:----=***+**********+*==-----+%%%%%=---*%%@%***##%%%@@%#%@@@@@@@@\\n// @@@@@@@%#@@%%%###**#@%%=--=#=--------===+**#*#**##*******++====------=+#=--+%%@#**###%%%@@#%%@@@@@@@\\n// @@@@@@%#%@@%%%##***%@%*+*=----::::::---====++++++++++++====---::::----==+**+#%%%***##%%%@@%#%@@@@@@@\\n// @@@@@@%#@@@%%###**#@%%+*#+--::::::::---====++++++++++++====---::::-----=+##*=%%@#**###%%@@@#%@@@@@@@\\n// @@@@@@%#@@%%%###**%@%++##=--:::-------=====+++++**+++++=====-----------=+#**=*%@%**###%%%@@#%%@@@@@@\\n// @@@@@%#%@@%%%##***@@%=-=--------------===+++++%@@@@@#++++===-----------=++*=-=%@%***##%%%@@%#%@@@@@@\\n// @@@@@%#%@@%%%##**#@@*--=------::::::---===+++%@%::-@@%++===---::::-----=++*=--#@@***##%%%@@%#%@@@@@@\\n// @@@@@%#%@@%%%##**#@@+--=----::::::::---====++##*****#*+====---::::-----=++*=--+@@***###%%@@%#%@@@@@@\\n// @@@@@%#%@@%%%##**#@@++**=----:::::::---====+#*++++++***+===---:::------=++****+@@***##%%%@@%#%@@@@@@\\n// @@@@@%#%@@%%%##***@%==+*=-----:::::----====#%*********@*===---:::------=++*#*++%@***##%%%@@%#%@@@@@@\\n// @@@@@%%#@@%%%###*#@@=-=+=----::::::----===*@-:+%***%=:=@+==---:::------=+***+==%@%####%%%@@##@@@@@@@\\n// @@@@@@%#@@@%%#####%@#=-=*#=-::::::::---===-::::::-::::::-==---:::------=+#*=--=@@#####%%%@@#%@@@@@@@\\n// @@@@@@%#%@@%%%##@##@*=**+:.:-=-:::::---==----:::::::::----=---:::----=-:..=**+*@###@%%%%@@%#%@@@@@@@\\n// @@@@@@@##@@%%%%####%#*+:..::::.-*%%**+=--------------------==+**%%#=.::::..:+**#####%%%%@@%#%@@@@@@@\\n// @@@@@@@%#%@@%%%####**+:::::::..=*%@*-=++*##%%%%%%%%%%%%%##*++==*@@*+..:::::::=**####%%%@@%#%@@@@@@@@\\n// @@@@@@@%%#@@@%%%##**+=-::::::::+*%@%-:-:::................::-:-@@@#*-:::::::--+**#%%%%%@@##%@@@@@@@@\\n// @@@@@@@@%#%@@%%%%#**+===------=**@@@++%%%%%%%%%%%%%%%%%%%%%%%-*@@%**+------===+***%%%%@@%#%@@@@@@@@@\\n// @@@@@@@@@%#%@@%%%*+**++======+**+=+%@%%%%%%%%%%%%%%%%%%%%%%%%%@%+=+**+======+++**+%%%@@%#%@@@@@@@@@@\\n// @@@@@@@@@@%#%@@%%%++**+++++++***==-==#@@%%%%%%%%%%%%%%%%%%%@@*==-==***++++++++*++#%%@@@#%@@@@@@@@@@%\\n// %@@@@@@@@@@%#@@@@@%+++*********=========*%@@@@%%%%%%@@@@@%*=========**********++*@@@@@#%@@@@@@@@@@%%\\n// %@@@@@@@@@@@%#%@@@@@#+++++++*%@@#+========---+*####**+--=========+%@@@#+++++++*%@@@@%#%@@@@@@@@@@@%@\\n// %%@@@@@@@@@@@%#%@@@@@@@@@%%%%%@@@@@%+=========================+%@@@@@%#%%%@@@@@@@@@%#%@@@@@@@@@@@%@@\\n// @@%@@@@@@@@@@@%##@@@@%%%%%###**#%@@@@@@*===================*@@@@@@@#**###%%%%%%@@@%#%@@@@@@@@@@@%@@@\\n// @@@%@@@@@@@@@@@%%#@@@@%%%%####****#@@@@@@@%+===========*@@@@@@@@#****####%%%%@@@@#%@@@@@@@@@@@@%@@@@\\n// @@@@%%@@@@@@@@@@@%##@@@@%%%%#####*****#%@@@@@@@%##%@@@@@@@@%#*****#####%%%%@@@@##%@@@@@@@@@@@@%@@@@@\\n// @@@@@%%@@@@@@@@@@@@%##@@@@%%%%%######*******###%%%%%###*******######%%%%%@@@@##%@@@@@@@@@@@@%%@@@@@@\\n// @@@@@@%%@@@@@@@@@@@@@%##@@@@@%%%%%%########******##*****#########%%%%%@@@@@##%@@@@@@@@@@@@@%%@@@@@@@\\n// @@@@@@@@%%@@@@@@@@@@@@@%%#%@@@@@%%%%%%%#####################%%%%%%%@@@@@%#%%@@@@@@@@@@@@@%%@@@@@@@@@\\n// @@@@@@@@@%%@@@@@@@@@@@@@@%%##%@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@%##%%@@@@@@@@@@@@@@%%@@@@@@@@@@\\n// @@@@@@@@@@@%%@@@@@@@@@@@@@@@%%%#%%@@@@@@@@@%%%%%%%%%%%%%@@@@@@@@@%%#%%%@@@@@@@@@@@@@@@%%@@@@@@@@@@@@\\n// @@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@%%%##%%@@@@@@@@@@@@@@@@@@@@@%%##%%%@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@%%%%%######%%%######%%%%%@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@\\n\\n// Telegram: https://t.me/mogcoin20\\n\\ncontract MOG2 is IMOG2, Context, Ownable {\\n    using SafeMath for uint256;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private bots;\\n    uint256 firstBlock;\\n\\n    uint256 private _tax = 5;\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant _tTotal = 10000000000 * 10 ** _decimals;\\n    string private constant _name = unicode\\\"Mog 2.0\\\";\\n    string private constant _symbol = unicode\\\"MOG2\\\";\\n\\n    uint256 public _maxTxAmount = 200000000 * 10 ** _decimals;\\n    uint256 public _maxWalletSize = 200000000 * 10 ** _decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() Ownable(_msgSender()) {\\n        _balances[owner()] = _tTotal;\\n\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        emit Transfer(address(0), owner(), _balances[owner()]);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount = 0;\\n        if (from != owner() && to != owner()) {\\n            require(!bots[from] && !bots[to]);\\n            taxAmount = amount.mul(_tax).div(100);\\n\\n            if (\\n                from == uniswapV2Pair &&\\n                to != address(uniswapV2Router) &&\\n                !_isExcludedFromFee[to]\\n            ) {\\n                require(\\n                    amount <= _maxTxAmount,\\n                    \\\"$CORN amount exceeds the maxTxAmount.\\\"\\n                );\\n                require(\\n                    balanceOf(to) + amount <= _maxWalletSize,\\n                    \\\"$CORN amount exceeds the maxWalletSize.\\\"\\n                );\\n                if (firstBlock + 3 > block.number) {\\n                    require(!isContract(to));\\n                }\\n            }\\n\\n            if (to != uniswapV2Pair && !_isExcludedFromFee[to])\\n                require(\\n                    balanceOf(to) + amount <= _maxWalletSize,\\n                    \\\"$CORN amount exceeds the maxWalletSize.\\\"\\n                );\\n\\n            if (to == uniswapV2Pair && from != address(this))\\n                taxAmount = amount.mul(_tax).div(100);\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[owner()] = _balances[owner()].add(taxAmount);\\n            emit Transfer(from, owner(), taxAmount);\\n        }\\n\\n        _balances[from] = _balances[from].sub(amount);\\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize = _tTotal;\\n        emit MOGMaxTxAmountUpdated(_tTotal);\\n\\n        _tax = 0;\\n        emit MOGTaxReducedToZero();\\n    }\\n\\n    function conify() external onlyOwner {\\n        require(!tradingOpen, \\\"$MOG2 trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n                address(this),\\n                uniswapV2Router.WETH()\\n            );\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this),\\n            balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n        firstBlock = block.number;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1336\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MOGMaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MOGTaxReducedToZero\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MOG2", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "1336", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}