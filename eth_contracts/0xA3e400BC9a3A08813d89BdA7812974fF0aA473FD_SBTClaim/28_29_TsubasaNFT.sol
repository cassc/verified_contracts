// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@operator-filter-registry/DefaultOperatorFilterer.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract TsubasaNFT is
    Context,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable,
    ERC721URIStorage,
    DefaultOperatorFilterer
{
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    address public owner;

    string private _baseTokenURI;

    /**
     * @notice timestamp of each minted nft. tokenId => timestamp
     */
    mapping(uint256 => uint256) public mintAt;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    modifier onlyAdmin() {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "TsubasaNFT: Caller not allowed to operate"
        );
        _;
    }

    modifier onlyMinter() {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "TsubasaNFT: Caller not allowed to operate"
        );
        _;
    }

    modifier onlyBurner() {
        require(
            hasRole(BURNER_ROLE, _msgSender()),
            "TsubasaNFT: Caller not allowed to operate"
        );
        _;
    }

    modifier onlyPauser() {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "TsubasaNFT: Caller not allowed to operate"
        );
        _;
    }

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, `BURNER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        address _owner,
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _owner);

        _setupRole(MINTER_ROLE, _owner);
        _setupRole(BURNER_ROLE, _owner);
        _setupRole(PAUSER_ROLE, _owner);

        _transferOwnership(_owner);
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 tokenId) public onlyMinter {
        _mint(to, tokenId);
    }

    /**
     * Bulk mint
     * @param tos List of receipient address.
     * @param tokenIds List of tokenId.
     */
    function mint(
        address[] memory tos,
        uint256[] memory tokenIds
    ) public onlyMinter {
        require(
            tos.length == tokenIds.length,
            "TsubasaNFT: args must be equals"
        );
        for (uint256 i; i < tos.length; i++) {
            _mint(tos[i], tokenIds[i]);
        }
    }

    /**
     * @notice burn NFT. only the address having burner role can do this
     * @param _tokenId token id to burn
     */
    function burn(uint256 _tokenId) public override onlyBurner {
        _burn(_tokenId);
    }

    /**
     * Bulk transferFrom
     * @param froms List of receipient address.
     * @param tos List of receipient address.
     * @param tokenIds List of tokenId.
     */
    function transferFrom(
        address[] memory froms,
        address[] memory tos,
        uint256[] memory tokenIds
    ) public {
        require(
            froms.length == tos.length && tos.length == tokenIds.length,
            "TsubasaNFT: args must be equals"
        );
        for (uint256 i; i < froms.length; i++) {
            transferFrom(froms[i], tos[i], tokenIds[i]);
        }
    }

    /**
     * Bulk safeTransferFrom
     * @param froms List of receipient address.
     * @param tos List of receipient address.
     * @param tokenIds List of tokenId.
     */
    function safeTransferFrom(
        address[] memory froms,
        address[] memory tos,
        uint256[] memory tokenIds
    ) public {
        require(
            froms.length == tos.length && tos.length == tokenIds.length,
            "TsubasaNFT: args must be equals"
        );
        for (uint256 i; i < froms.length; i++) {
            safeTransferFrom(froms[i], tos[i], tokenIds[i]);
        }
    }

    /**
     * Bulk safeTransferFrom with data
     * @param froms List of receipient address.
     * @param tos List of receipient address.
     * @param tokenIds List of tokenId.
     * @param dataList List of data.
     */
    function safeTransferFrom(
        address[] memory froms,
        address[] memory tos,
        uint256[] memory tokenIds,
        bytes[] memory dataList
    ) public {
        require(
            froms.length == tos.length &&
                tos.length == tokenIds.length &&
                tokenIds.length == dataList.length,
            "TsubasaNFT: args must be equals"
        );
        for (uint256 i; i < froms.length; i++) {
            safeTransferFrom(froms[i], tos[i], tokenIds[i], dataList[i]);
        }
    }

    /**
     * setBaseURI
     * @param baseURI base URI of NFT.
     */
    function setBaseURI(string memory baseURI) public onlyAdmin {
        _baseTokenURI = baseURI;
    }

    /**
     * setTokenURI
     * @param tokenId NFT token ID.
     * @param _tokenURI token URI of NFT.
     */
    function setTokenURI(
        uint256 tokenId,
        string memory _tokenURI
    ) public onlyMinter {
        _setTokenURI(tokenId, _tokenURI);
    }

    /**
     * Bulk setTokenURI
     * @param tokenIds List of tokenId.
     * @param tokenURIs List of tokenURI.
     */
    function setTokenURI(
        uint256[] memory tokenIds,
        string[] memory tokenURIs
    ) public onlyMinter {
        require(
            tokenIds.length == tokenURIs.length,
            "TsubasaNFT: args must be equals"
        );
        for (uint256 i; i < tokenIds.length; i++) {
            _setTokenURI(tokenIds[i], tokenURIs[i]);
        }
    }

    /**
     * @notice set minter role. only admin can call this.
     */
    function setMinterRole(address _to) external onlyAdmin {
        _grantRole(MINTER_ROLE, _to);
    }

    /**
     * @notice set burner role. only admin can call this.
     */
    function setBurnerRole(address _to) external onlyAdmin {
        _grantRole(BURNER_ROLE, _to);
    }

    /**
     * @notice set pauser role. only admin can call this.
     */
    function setPauserRole(address _to) external onlyAdmin {
        _grantRole(PAUSER_ROLE, _to);
    }

    /**
     * @notice remove minter role from the specified accout. only admin can call this.
     */
    function removeMinterRole(address _from) external onlyAdmin {
        _revokeRole(MINTER_ROLE, _from);
    }

    /**
     * @notice remove burner role from the specified accout. only admin can call this.
     */
    function removeBurnerRole(address _from) external onlyAdmin {
        _revokeRole(BURNER_ROLE, _from);
    }

    /**
     * @notice remove pauser role from the specified accout. only admin can call this.
     */
    function removePauserRole(address _to) external onlyAdmin {
        _revokeRole(PAUSER_ROLE, _to);
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public onlyPauser {
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public onlyPauser {
        _unpause();
    }

    /**
     * Transfer Ownership
     * @param newOwner Address of new owner.
     */
    function transferOwnership(address newOwner) public onlyAdmin {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal {
        address oldOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    function tokenURI(
        uint256 tokenId
    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {
        return super.tokenURI(tokenId);
    }

    /**
     * @dev overide ERC721._mint to record timestamp
     */
    function _mint(address _to, uint256 _tokenId) internal override {
        mintAt[_tokenId] = block.timestamp;
        super._mint(_to, _tokenId);
    }

    function _burn(
        uint256 tokenId
    ) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId,
        uint256 batchSize
    ) internal override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId, batchSize);
    }

    /**
     * @notice to claim secondary fee, introduce Operator Filter Registory.
     */
    function setApprovalForAll(
        address operator,
        bool approved
    ) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {
        super.setApprovalForAll(operator, approved);
    }

    function approve(
        address operator,
        uint256 tokenId
    ) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {
        super.approve(operator, tokenId);
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId, data);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(
        bytes4 interfaceId
    )
        public
        view
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}