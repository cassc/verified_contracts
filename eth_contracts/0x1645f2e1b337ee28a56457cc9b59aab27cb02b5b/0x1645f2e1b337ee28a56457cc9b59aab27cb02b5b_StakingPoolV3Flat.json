{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/active/stakingpool/StakingPoolV3Flat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// StakingPoolV3\\n// - Fixed total, reward per second\\n// - Dynamic APY based on pool size\\n// - Multiple deposit packages with separate locking time\\ncontract StakingPoolV3Flat is Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  struct UserInfo {\\n    bool isAdded;\\n    address addr;\\n    uint256 totalAmount;\\n    uint256 nextDepositId;\\n  }\\n\\n  struct DepositInfo {\\n    uint256 amount;\\n    uint256 lockFrom;\\n    uint256 lockTo;\\n    uint256 rewardDebt;\\n    uint256 rewardPending;\\n  }\\n\\n  // The precision factor. Should be 1e12 to avoid overflow.\\n  uint256 private constant _PRECISION_FACTOR = 1e12;\\n\\n  IERC20 public rewardToken;\\n  IERC20 public stakedToken;\\n\\n  // Info of each user that stakes tokens (stakedToken)\\n  mapping(address => UserInfo) public userInfos;\\n  // User list\\n  address[] public userList;\\n\\n  // depositInfos[user][depositId] = DepositInfo\\n  mapping(address => mapping(uint256 => DepositInfo)) public depositInfos;\\n\\n  // Reward tokens created per second.\\n  uint256 public rewardPerSecond;\\n  // The time when Pool mining starts.\\n  uint256 public startTime;\\n  // The time when Pool mining ends.\\n  uint256 public endTime;\\n\\n  // The time of the last pool update\\n  uint256 public lastRewardTime;\\n  // Accumulated token per share\\n  uint256 public accTokenPerShare;\\n\\n  // Total staking tokens\\n  uint256 public totalStakingTokens;\\n  // Total reward tokens\\n  uint256 public totalRewardTokens;\\n\\n  // Freeze start time\\n  uint256 public freezeStartTime;\\n  // Freeze end time\\n  uint256 public freezeEndTime;\\n\\n  // The pool limit (0 if none)\\n  uint256 public poolLimitPerUser;\\n  // Minimum deposit amount\\n  uint256 public minDepositAmount;\\n\\n  // The locking duration for each deposit package\\n  uint256 public lockDuration;\\n\\n  // delegators[staker][delegate] = status\\n  mapping(address => mapping(address => bool)) public delegators;\\n\\n  event EDeposit(address indexed user, uint256 amount, uint256 depositId);\\n  event EWithdraw(address indexed user, uint256 amount, uint256 depositId);\\n  event EAddRewardTokens(address indexed user, uint256 amount);\\n\\n  constructor(\\n    IERC20 _stakedToken,\\n    IERC20 _rewardToken,\\n    uint256 _rewardPerSecond,\\n    uint256 _startTime,\\n    uint256 _endTime,\\n    uint256 _lockDuration\\n  ) {\\n    stakedToken = _stakedToken;\\n    rewardToken = _rewardToken;\\n    rewardPerSecond = _rewardPerSecond;\\n    startTime = _startTime;\\n    endTime = _endTime;\\n    lockDuration = _lockDuration;\\n    lastRewardTime = startTime;\\n  }\\n\\n  /*\\n   * @notice isFrozen is true => user cannot call deposit, withdraw function\\n   */\\n  function isFrozen() public view returns (bool) {\\n    return block.timestamp >= freezeStartTime && block.timestamp <= freezeEndTime;\\n  }\\n\\n  /*\\n   * @notice View function to see pending reward on frontend.\\n   * @param _user: user address\\n   * @param _depositId: deposit id\\n   * @return Pending reward for a given user and depositId\\n   */\\n  function pendingReward(address _user, uint256 _depositId) external view returns (uint256) {\\n    DepositInfo storage deposit = depositInfos[_user][_depositId];\\n    if (block.timestamp > lastRewardTime && totalStakingTokens != 0) {\\n      uint256 multiplier = _getMultiplier(lastRewardTime, block.timestamp);\\n      uint256 tokenReward = multiplier * rewardPerSecond;\\n      uint256 adjustedTokenPerShare = accTokenPerShare + ((tokenReward * _PRECISION_FACTOR) / totalStakingTokens);\\n      return\\n        deposit.rewardPending + (((deposit.amount * adjustedTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt);\\n    } else {\\n      return deposit.rewardPending + (((deposit.amount * accTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt);\\n    }\\n  }\\n\\n  /*\\n   * @notice Length of users\\n   */\\n  function getUserListLength() external view returns (uint) {\\n    return userList.length;\\n  }\\n\\n  /*\\n   * @notice View function to get users.\\n   * @param _offset: offset for paging\\n   * @param _limit: limit for paging\\n   * @return get users, next offset and total users\\n   */\\n  function getUsersPaging(\\n    uint _offset,\\n    uint _limit\\n  ) external view returns (UserInfo[] memory users, uint nextOffset, uint total) {\\n    uint totalUsers = userList.length;\\n    if (_limit == 0) {\\n      _limit = 1;\\n    }\\n\\n    if (_limit > totalUsers - _offset) {\\n      _limit = totalUsers - _offset;\\n    }\\n\\n    UserInfo[] memory values = new UserInfo[](_limit);\\n    for (uint i = 0; i < _limit; i++) {\\n      values[i] = userInfos[userList[_offset + i]];\\n    }\\n\\n    return (values, _offset + _limit, totalUsers);\\n  }\\n\\n  /*\\n   * @notice Deposit staked tokens and collect reward tokens (if any)\\n   * @param _amount: amount to withdraw (in rewardToken)\\n   */\\n  function depositTokens(uint256 _amount) external nonReentrant {\\n    require(block.timestamp >= startTime && block.timestamp <= endTime, \\\"Invalid time\\\");\\n    require(!isFrozen(), \\\"Deposit is frozen\\\");\\n    require(_amount > 0, \\\"Invalid amount\\\");\\n    address sender_ = _msgSender();\\n\\n    UserInfo storage user = userInfos[sender_];\\n    require(_amount + user.totalAmount >= minDepositAmount, \\\"User amount below minimum\\\");\\n    if (poolLimitPerUser > 0) {\\n      require(_amount + user.totalAmount <= poolLimitPerUser, \\\"User amount above limit\\\");\\n    }\\n\\n    _updatePool();\\n\\n    if (!user.isAdded) {\\n      user.isAdded = true;\\n      user.addr = sender_;\\n      userList.push(sender_);\\n    }\\n\\n    DepositInfo storage deposit = depositInfos[sender_][user.nextDepositId++];\\n    if (deposit.amount > 0) {\\n      deposit.rewardPending += ((deposit.amount * accTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt;\\n    }\\n\\n    // Check real amount to avoid taxed token\\n    uint256 previousBalance_ = stakedToken.balanceOf(address(this));\\n    stakedToken.safeTransferFrom(sender_, address(this), _amount);\\n    uint256 newBalance_ = stakedToken.balanceOf(address(this));\\n    uint256 addedAmount_ = newBalance_ - previousBalance_;\\n\\n    user.totalAmount += addedAmount_;\\n    totalStakingTokens += addedAmount_;\\n\\n    deposit.amount += addedAmount_;\\n    deposit.lockFrom = block.timestamp;\\n    deposit.lockTo = block.timestamp + lockDuration;\\n    deposit.rewardDebt = (deposit.amount * accTokenPerShare) / _PRECISION_FACTOR;\\n\\n    emit EDeposit(sender_, addedAmount_, user.nextDepositId - 1);\\n  }\\n\\n  /*\\n   * @notice Withdraw staked tokens and collect reward tokens\\n   */\\n  function withdrawTokens(address _staker, uint256 _amount, uint256 _depositId) external nonReentrant {\\n    require(!isFrozen(), \\\"Withdraw is frozen\\\");\\n    require(_amount > 0, \\\"Invalid amount\\\");\\n    address trigger_ = _msgSender();\\n\\n    if (trigger_ != _staker) {\\n      require(delegators[_staker][trigger_], \\\"Invalid user\\\");\\n    }\\n\\n    DepositInfo storage deposit = depositInfos[_staker][_depositId];\\n    require(deposit.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n    require(block.timestamp >= deposit.lockTo, \\\"Invalid time to withdraw\\\");\\n\\n    _updatePool();\\n\\n    deposit.rewardPending += ((deposit.amount * accTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt;\\n    uint256 pending = deposit.rewardPending;\\n    if (pending > 0) {\\n      deposit.rewardPending = 0;\\n      _safeRewardTransfer(trigger_, pending);\\n    }\\n\\n    UserInfo storage user = userInfos[_staker];\\n    user.totalAmount -= _amount;\\n    totalStakingTokens -= _amount;\\n\\n    deposit.amount -= _amount;\\n    stakedToken.safeTransfer(trigger_, _amount);\\n    deposit.rewardDebt = (deposit.amount * accTokenPerShare) / _PRECISION_FACTOR;\\n\\n    emit EWithdraw(_staker, _amount, _depositId);\\n  }\\n\\n  /*\\n   * @dev Set delegator\\n   */\\n  function setDelegators(address _delegator, bool _status) external nonReentrant {\\n    delegators[_msgSender()][_delegator] = _status;\\n  }\\n\\n  /*\\n   * @dev Update lock duration\\n   */\\n  function setLockDuration(uint256 _duration) external onlyOwner {\\n    lockDuration = _duration;\\n  }\\n\\n  /**\\n   * @notice It allows the admin to add reward tokens\\n   * @param _amount: amount of tokens\\n   * @dev This function is only callable by admin.\\n   */\\n  function addRewardTokens(uint256 _amount) external onlyOwner {\\n    // Check real amount to avoid taxed token\\n    uint256 previousBalance_ = rewardToken.balanceOf(address(this));\\n    rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    uint256 newBalance_ = rewardToken.balanceOf(address(this));\\n    uint256 addedAmount_ = newBalance_ - previousBalance_;\\n\\n    totalRewardTokens += addedAmount_;\\n    emit EAddRewardTokens(msg.sender, addedAmount_);\\n  }\\n\\n  /**\\n   * @notice It allows the admin to correct reward tokens\\n   */\\n  function correctRewardTokens(uint256 _amount) external onlyOwner {\\n    totalRewardTokens = _amount;\\n  }\\n\\n  /**\\n   * @notice It allows the admin to recover wrong tokens sent to the contract\\n   * @param _tokenAddress: the address of the token to withdraw\\n   * @param _tokenAmount: the number of tokens to withdraw\\n   * @dev This function is only callable by admin.\\n   */\\n  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n    require(_tokenAddress != address(stakedToken), \\\"Cannot be staked token\\\");\\n    require(_tokenAddress != address(rewardToken), \\\"Cannot be reward token\\\");\\n\\n    IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n  }\\n\\n  /*\\n   * @notice Stop rewards\\n   * @dev Only callable by owner\\n   */\\n  function stopReward() external onlyOwner {\\n    endTime = block.timestamp;\\n  }\\n\\n  /*\\n   * @notice Stop Freeze\\n   * @dev Only callable by owner\\n   */\\n  function stopFreeze() external onlyOwner {\\n    freezeStartTime = 0;\\n    freezeEndTime = 0;\\n  }\\n\\n  /*\\n   * @notice Update reward per second\\n   * @dev Only callable by owner.\\n   * @param _rewardPerSecond: the reward per second\\n   */\\n  function setRewardPerSecond(uint256 _rewardPerSecond) external onlyOwner {\\n    _updatePool();\\n    rewardPerSecond = _rewardPerSecond;\\n  }\\n\\n  /**\\n   * @notice It allows the admin to update start and end time\\n   * @dev This function is only callable by owner.\\n   * @param _startTime: the new start time\\n   * @param _endTime: the new end time\\n   */\\n  function setStartAndEndTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\\n    require(block.timestamp > endTime, \\\"Pool has started\\\");\\n    require(_startTime < _endTime, \\\"Invalid start and end block\\\");\\n    endTime = _endTime;\\n\\n    if (_startTime > block.timestamp) {\\n      startTime = _startTime;\\n      // Set the lastRewardTime as the startTime\\n      lastRewardTime = startTime;\\n    }\\n  }\\n\\n  /**\\n   * @notice It allows the admin to update freeze start and end time\\n   * @dev This function is only callable by owner.\\n   * @param _freezeStartTime: the new freeze start time\\n   * @param _freezeEndTime: the new freeze end time\\n   */\\n  function setFreezaTimes(uint256 _freezeStartTime, uint256 _freezeEndTime) external onlyOwner {\\n    require(_freezeStartTime < _freezeEndTime, \\\"Invalid start and end time\\\");\\n    require(block.timestamp < _freezeStartTime, \\\"Invalid start and current\\\");\\n\\n    freezeStartTime = _freezeStartTime;\\n    freezeEndTime = _freezeEndTime;\\n  }\\n\\n  /*\\n   * @notice Update pool limit per user\\n   * @dev Only callable by owner.\\n   * @param _poolLimitPerUser: new pool limit per user\\n   */\\n  function setPoolLimitPerUser(uint256 _poolLimitPerUser) external onlyOwner {\\n    poolLimitPerUser = _poolLimitPerUser;\\n  }\\n\\n  /**\\n   * @notice Update minimum deposit amount\\n   * @dev This function is only callable by owner.\\n   * @param _minDepositAmount: the new minimum deposit amount\\n   */\\n  function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\\n    minDepositAmount = _minDepositAmount;\\n  }\\n\\n  /*\\n   * @notice Stop rewards\\n   * @dev Only callable by owner. Needs to be for emergency.\\n   */\\n  function safeWithdrawReward(uint256 _amount) external onlyOwner {\\n    totalRewardTokens -= _amount;\\n    rewardToken.safeTransfer(msg.sender, _amount);\\n  }\\n\\n  /**\\n   * @dev Emergency case withdraw tokens\\n   * @param _token token address\\n   * @param _to destination address\\n   * @param _amount token amount\\n   */\\n  function emergencyWithdrawTokens(address _token, address _to, uint256 _amount) external onlyOwner {\\n    IERC20(_token).safeTransfer(_to, _amount);\\n  }\\n\\n  /*\\n   * @notice Update reward variables of the given pool to be up-to-date.\\n   */\\n  function _updatePool() private {\\n    if (block.timestamp <= lastRewardTime) {\\n      return;\\n    }\\n\\n    if (totalStakingTokens == 0) {\\n      lastRewardTime = block.timestamp;\\n      return;\\n    }\\n\\n    uint256 multiplier = _getMultiplier(lastRewardTime, block.timestamp);\\n    uint256 tokenReward = multiplier * rewardPerSecond;\\n    accTokenPerShare += (tokenReward * _PRECISION_FACTOR) / totalStakingTokens;\\n    lastRewardTime = block.timestamp;\\n  }\\n\\n  /*\\n   * @notice Return reward multiplier over the given _from to _to time.\\n   * @param _from: time to start\\n   * @param _to: time to finish\\n   */\\n  function _getMultiplier(uint256 _from, uint256 _to) private view returns (uint256) {\\n    if (_to <= endTime) {\\n      return _to - _from;\\n    } else if (_from >= endTime) {\\n      return 0;\\n    } else {\\n      return endTime - _from;\\n    }\\n  }\\n\\n  /*\\n   * @notice Transfer reward tokens.\\n   * @param _to: address where tokens will transfer\\n   * @param _amount: amount of tokens\\n   */\\n  function _safeRewardTransfer(address _to, uint256 _amount) private {\\n    uint256 rewardTokenBal = totalRewardTokens;\\n    if (_amount > rewardTokenBal) {\\n      totalRewardTokens -= rewardTokenBal;\\n      rewardToken.safeTransfer(_to, rewardTokenBal);\\n    } else {\\n      totalRewardTokens -= _amount;\\n      rewardToken.safeTransfer(_to, _amount);\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EAddRewardTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"EDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"EWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"correctRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getUsersPaging\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextDepositId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPoolV3Flat.UserInfo[]\",\"name\":\"users\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setDelegators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freezeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freezeEndTime\",\"type\":\"uint256\"}],\"name\":\"setFreezaTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"setPoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setStartAndEndTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextDepositId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPoolV3Flat", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c092a137df3cf2b9e5971ba1874d26487c12626d000000000000000000000000c092a137df3cf2b9e5971ba1874d26487c12626d0000000000000000000000000000000000000000000000000000befe6f67200000000000000000000000000000000000000000000000000000000000660191700000000000000000000000000000000000000000000000000000000066f425700000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}