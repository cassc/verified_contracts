{"SourceCode": "// https://t.me/PeachesETH\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.25;\r\n\r\ninterface IUniswapV2Router {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Peaches is IERC20, Ownable {    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    string private constant _name = \"Gamestop's Dog\";\r\n    string private constant _symbol = \"PEACHES\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private constant _totalSupply = 1_000_000_000 * 1e9;\r\n    uint256 public maxTxWallet = 20_000_000 * 1e9;\r\n\r\n    uint256 public buyTax = 0;\r\n    uint256 public sellTax = 22;\r\n    \r\n    uint256 private constant contractSwapLimit = 5_000_000 * 1e9;\r\n    uint256 private contractSwapMax = 3;\r\n    uint256 private contractSwapMin = 10;\r\n    uint256 private contractMinSwaps = 1;\r\n\r\n    IUniswapV2Router private constant UNISWAP_ROUTER = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);          \r\n    address private constant ETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;    \r\n\r\n    address public immutable uniswapPair;\r\n\r\n    address payable public marketingWallet = payable(tx.origin);\r\n    address immutable deployerWallet = msg.sender;\r\n    address public developmentWallet;\r\n\r\n    bool private inSwap = false;\r\n    bool private tradingLive;\r\n    mapping(uint256 => uint256) swapBlocks;\r\n    uint private swaps;\r\n    uint private buys;\r\n\r\n    mapping (address => bool) blacklisted;\r\n    mapping(address => bool) excludedFromFees;    \r\n\r\n    modifier swapping {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier tradable(address sender) {\r\n        require(tradingLive || sender == deployerWallet);\r\n        _;\r\n    }\r\n\r\n    constructor (address _developmentWallet) {\r\n        developmentWallet = _developmentWallet;\r\n        excludedFromFees[address(this)] = true;\r\n        excludedFromFees[developmentWallet] = true;\r\n        uniswapPair = IUniswapV2Factory(UNISWAP_ROUTER.factory()).createPair(address(this), ETH);\r\n\r\n        uint256 developmentTokens = 8 * _totalSupply / 100; \r\n\r\n        _balances[developmentWallet] = developmentTokens;\r\n        emit Transfer(address(0), developmentWallet, developmentTokens);\r\n\r\n        _balances[msg.sender] = _totalSupply - developmentTokens;\r\n        emit Transfer(address(0), msg.sender, _totalSupply - developmentTokens);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) tradable(from) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Token: transfer amount must be greater than zero\");\r\n        require(!blacklisted[from] && !blacklisted[to], \"Token: blacklisted cannot trade\");\r\n\r\n        _balances[from] -= amount;\r\n\r\n        if(from != address(this) && from != deployerWallet && to != marketingWallet) {            \r\n            if (from == uniswapPair) {\r\n                buys++;\r\n                require(buys > 50 || balanceOf(to) + amount <= maxTxWallet, \"Token: max wallet amount restriction\");\r\n            }\r\n            require(buys > 50 || amount <= maxTxWallet, \"Token: max tx amount restriction\");\r\n            uint256 contractTokens = balanceOf(address(this));\r\n            if(!inSwap && to == uniswapPair && contractTokens >= contractSwapLimit && shouldSwapback(amount)) \r\n               swapback(calculateSwapback(amount, contractTokens));                            \r\n        }\r\n\r\n        if(!excludedFromFees[from] && !excludedFromFees[to]) {          \r\n            uint256 taxedTokens = calculateTax(from, to, amount);\r\n            if(taxedTokens > 0){\r\n                amount -= taxedTokens;\r\n                _balances[address(this)] += taxedTokens;\r\n                emit Transfer(from, address(this), taxedTokens);\r\n            }\r\n        }\r\n\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function calculateTax(address from, address to, uint256 amount) private view returns (uint256) {\r\n        return amount * (from == uniswapPair ? buyTax : to == uniswapPair ? sellTax : 0) / 100;\r\n    }\r\n\r\n    function calculateSwapback(uint256 transferAmount, uint256 contractTokens) private view returns (uint256) {\r\n        return transferAmount < contractSwapLimit ? contractSwapLimit : \r\n            min(transferAmount, min(contractTokens, contractSwapLimit * contractSwapMax));\r\n    }\r\n\r\n    function shouldSwapback(uint256 transferAmount) private returns (bool) {\r\n        return transferAmount >= (contractSwapMin == 0 ? 0 : contractSwapLimit / contractSwapMin) &&\r\n            ++swaps >= contractMinSwaps && swapBlocks[block.number]++ < 2;\r\n    }    \r\n\r\n    function swapback(uint256 tokenAmount) private swapping {\r\n        swaps = 0;\r\n        if(allowance(address(this), address(UNISWAP_ROUTER)) < tokenAmount) {\r\n            _approve(address(this), address(UNISWAP_ROUTER), _totalSupply);\r\n        }\r\n        \r\n        uint256 contractETHBalance = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = ETH;\r\n        UNISWAP_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        contractETHBalance = address(this).balance - contractETHBalance;\r\n        if(contractETHBalance > 0) {\r\n            transferEth(contractETHBalance);\r\n        } \r\n    }\r\n\r\n    function transferEth(uint256 amount) private {\r\n        marketingWallet.transfer(amount);\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) private pure returns (uint256) {\r\n      return (x > y) ? y : x;\r\n    }\r\n\r\n    function blacklist(address[] calldata addresses) external {\r\n        require(msg.sender == developmentWallet && owner() != address(0));\r\n        for (uint i = 0; i < addresses.length; i++) \r\n            blacklisted[addresses[i]] = true;\r\n    }\r\n\r\n    function unblacklist(address[] calldata addresses) external  {\r\n        require(msg.sender == developmentWallet);\r\n        for (uint i = 0; i < addresses.length; i++) \r\n            blacklisted[addresses[i]] = false;\r\n    }\r\n\r\n    function recoverTokens(address token, address wallet) external {\r\n        require(msg.sender == developmentWallet);\r\n        if(token == address(0))\r\n            payable(wallet).transfer(address(this).balance);\r\n        else if(token != address(this))\r\n            IERC20(token).transfer(wallet, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function setStructure(uint256 newSwapMaxMultiplier, uint256 newSwapMinDivisor, uint256 newMinSwaps) external {\r\n        require(msg.sender == developmentWallet);\r\n        require(newSwapMaxMultiplier <= 4 && newSwapMinDivisor != 0);\r\n        contractSwapMax = newSwapMaxMultiplier;\r\n        contractSwapMin = newSwapMinDivisor;\r\n        contractMinSwaps = newMinSwaps;\r\n    }\r\n\r\n    function burn() external {\r\n        require(msg.sender == developmentWallet);\r\n        _transfer(address(this), address(0xdEaD), _balances[address(this)]);\r\n    }\r\n\r\n    function setDevelopmentWallet(address newDevelopmentWallet) external {\r\n        require(msg.sender == developmentWallet || msg.sender == owner());\r\n        developmentWallet = newDevelopmentWallet;\r\n    }\r\n    \r\n    function setMarketingWallet(address payable newMarketingWallet) external onlyOwner {\r\n        marketingWallet = newMarketingWallet;\r\n    }    \r\n\r\n    function setMaxWallet(uint256 newMaxTxWallet) external onlyOwner {\r\n        maxTxWallet = newMaxTxWallet;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxTxWallet = _totalSupply;\r\n    }\r\n \r\n    function setFees(uint256 newBuyTax, uint256 newSellTax) external onlyOwner {\r\n        buyTax = newBuyTax;\r\n        sellTax = newSellTax;\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingLive, \"Token: trading already open\");\r\n        tradingLive = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developmentWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevelopmentWallet\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapMaxMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMinDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinSwaps\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Peaches", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006ded3f03e80fc2cf0fc693200e74984d3e8bfd17", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5a75edae603710f7b17efa0ff7fbd8394d0c57aab46f2861749280ddf39d712f"}