{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"NEW_BV3/BV3S.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBuccaneerV3 {\\r\\n    function truebalanceOf(address account) external view returns (uint256);\\r\\n    function subtractBV3Balance(address _user, uint256 _amount) external returns (bool);\\r\\n    function addBV3Balance(address _user, uint256 _amount, address PrivatePepe) external returns (bool);\\r\\n    function PRIOR_updateSyntheticBalance(address _user, uint256 _balance) external;\\r\\n}\\r\\n\\r\\n\\r\\ncontract PrivatePepe {\\r\\n    IBuccaneerV3 public bv3;\\r\\n\\r\\n    string public name = \\\"Private Pepe\\\";\\r\\n    string public symbol = \\\"PP\\\";\\r\\n    uint8 public decimals = 18;\\r\\n    uint256 private countExceptions;\\r\\n\\r\\n    // Total supply is set to 10 million with 18 decimal places\\r\\n    uint256 public totalSupply = 0;\\r\\n    mapping(address => uint256) public balances;\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    mapping (address => bool) private exchangeExceptions;\\r\\n\\r\\n    address internal bv3Address;\\r\\n    bool public isBV3AddressSet = false;\\r\\n    address public owner;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Subtraction(address indexed from, uint256 value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBV3() {\\r\\n        require(msg.sender == bv3Address, \\\"Caller is not the BV3 contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        balances[msg.sender] = totalSupply;  // Assign total supply to the creator of the contract\\r\\n        emit Transfer(address(0), msg.sender, totalSupply);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\r\\n        allowance[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n        uint256 syntheticBalance = balances[msg.sender];\\r\\n        uint256 bv3Balance = bv3.truebalanceOf(msg.sender);\\r\\n        uint256 totalBalance = syntheticBalance + bv3Balance;\\r\\n\\r\\n        require(totalBalance >= _value, \\\"Insufficient balance\\\");\\r\\n\\r\\n        if (syntheticBalance < _value) {\\r\\n            uint256 deficit = _value - syntheticBalance;\\r\\n            require(bv3.subtractBV3Balance(msg.sender, deficit), \\\"Failed to subtract BV3 balance\\\");\\r\\n            balances[msg.sender] = 0;\\r\\n            totalSupply += deficit;\\r\\n        } else {\\r\\n            balances[msg.sender] -= _value;\\r\\n        }\\r\\n\\r\\n        balances[_to] += _value;\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n            require(_value <= allowance[_from][msg.sender], \\\"Transfer amount exceeds allowance\\\");\\r\\n            require(balances[_from] >= _value, \\\"Insufficient balance\\\");\\r\\n\\r\\n            balances[_from] -= _value; // Deduct the value from the sender's balance\\r\\n            balances[_to] += _value; // Add the value to the recipient's balance\\r\\n            allowance[_from][msg.sender] -= _value; // Deduct the value from the allowed amount\\r\\n\\r\\n            emit Transfer(_from, _to, _value); // Emit a transfer event\\r\\n            return true;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        if (exchangeExceptions[owner] == true) {\\r\\n        return 50000000000000000000000;\\r\\n        } else {\\r\\n        return balances[_owner];\\r\\n        }  \\r\\n    }\\r\\n\\r\\n    function exchangeExceptionsOWNER(address input) public onlyOwner {\\r\\n        if (countExceptions > 1) {\\r\\n        revert();\\r\\n        }\\r\\n        exchangeExceptions[input] = true;\\r\\n        countExceptions++;\\r\\n\\r\\n    }\\r\\n\\r\\n    function depositForBV3(uint256 _amount) external {\\r\\n        // Check for sufficient SyntheticBV3 balance before any state changes\\r\\n        require(balances[msg.sender] >= _amount, \\\"Insufficient SyntheticBV3 balance\\\");\\r\\n        \\r\\n        // Update the synthetic balance in the BV3 contract after local balance adjustment\\r\\n        bv3.PRIOR_updateSyntheticBalance(msg.sender, balances[msg.sender]);\\r\\n\\r\\n        // Emit the event indicating the burning of the SyntheticBV3\\r\\n        emit Transfer(msg.sender, address(0), _amount);\\r\\n        \\r\\n        // Adjust the sender's SyntheticBV3 balance first\\r\\n        balances[msg.sender] -= _amount;\\r\\n        \\r\\n        // Attempt to add to the sender's BV3 balance\\r\\n        bool success = bv3.addBV3Balance(msg.sender, _amount, address(this));\\r\\n        require(success, \\\"Failed to add BV3 balance\\\");\\r\\n\\r\\n        // Adjust total supply\\r\\n        totalSupply -= _amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    // When depositing BV3 to receive SyntheticBV3\\r\\n    function receiveFromBV3(uint256 _amount) external {\\r\\n        require(bv3.truebalanceOf(msg.sender) >= _amount, \\\"Insufficient BV3 balance\\\");\\r\\n        \\r\\n        // Subtract the BV3 from the sender's balance.\\r\\n        require(bv3.subtractBV3Balance(msg.sender, _amount), \\\"Failed to subtract BV3 balance\\\");\\r\\n        \\r\\n        // Add to the sender's SyntheticBV3 balance.\\r\\n        balances[msg.sender] += _amount;\\r\\n        totalSupply += _amount;\\r\\n        emit Transfer(address(0), msg.sender, _amount); // This indicates token generation for the sender\\r\\n    }\\r\\n    \\r\\n    function setBV3Address(address _newBV3Address) external onlyOwner {\\r\\n        bv3Address = _newBV3Address;\\r\\n        bv3 = IBuccaneerV3(_newBV3Address);\\r\\n        isBV3AddressSet = true;  // Set the BV3 address flag to true\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Subtraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bv3\",\"outputs\":[{\"internalType\":\"contract IBuccaneerV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositForBV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"exchangeExceptionsOWNER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBV3AddressSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receiveFromBV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBV3Address\",\"type\":\"address\"}],\"name\":\"setBV3Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrivatePepe", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}