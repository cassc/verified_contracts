{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.25;\r\n\r\ninterface IGaussToken {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract RevenueShare {\r\n    IGaussToken public gaussToken;\r\n    mapping(address => uint256) public lockedTokens;\r\n    mapping(address => uint256) public userETHBalances;\r\n    mapping(address => uint256) public lockTimes; // Track when tokens were locked\r\n    mapping(address => bool) private isLocked;\r\n    address[] private lockers;\r\n    uint256 public totalLocked;\r\n    uint256 public remainETH;\r\n    uint256 public totalDepositedETH;\r\n    bool public distributionEnabled = false;\r\n    address private owner;\r\n    uint256 public minimumLockAmount = 10000 * 10**9; \r\n\r\n    event TokensLocked(address indexed user, uint256 amount, uint256 lockTime);\r\n    event TokensUnlocked(address indexed user, uint256 amount, uint256 ethRedistributed);\r\n    event ETHDeposited(uint256 amount, uint256 totalDeposited);\r\n    event Redistributed(uint256 amount, uint256 users);\r\n    event DistributionEnabled();\r\n    event RewardClaimed(address indexed user, uint256 reward);\r\n\r\n    constructor(address _gaussTokenAddress) {\r\n        owner = msg.sender;\r\n        gaussToken = IGaussToken(_gaussTokenAddress);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value > 0, \"RevenueShare: Deposit must be greater than 0\");\r\n        remainETH += msg.value;\r\n        totalDepositedETH += msg.value;\r\n        if (distributionEnabled) redistributeETH();\r\n        emit ETHDeposited(msg.value, totalDepositedETH);\r\n    }\r\n\r\n    function lockTokens(uint256 amount) public {\r\n        require(amount >= minimumLockAmount, \"Amount is below the minimum lock requirement\");\r\n        require(gaussToken.transferFrom(msg.sender, address(this), amount), \"RevenueShare:Transfer failed\");\r\n        lockedTokens[msg.sender] += amount;\r\n        lockTimes[msg.sender] = block.timestamp; // Set lock time\r\n        totalLocked += amount;\r\n        if(isLocked[msg.sender] == false) {\r\n            lockers.push(msg.sender);\r\n            isLocked[msg.sender] = true;\r\n        }\r\n        emit TokensLocked(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function unlockTokens(uint256 amount) public {\r\n        require(block.timestamp >= lockTimes[msg.sender] + 1 weeks, \"RevenueShare: Tokens must be locked for at least one week\");\r\n        require(lockedTokens[msg.sender] >= amount, \"RevenueShare: Insufficient locked tokens\");\r\n        require(gaussToken.transfer(msg.sender, amount), \"RevenueShare: Transfer failed\");\r\n\r\n        lockedTokens[msg.sender] -= amount;\r\n        totalLocked -= amount;\r\n\r\n        emit TokensUnlocked(msg.sender, amount, userETHBalances[msg.sender]);\r\n    }\r\n\r\n    function enableDistribution() public {\r\n        require(owner == msg.sender, \"RevenueShare: Only owner can enable distribution\");\r\n        require(!distributionEnabled, \"RevenueShare: Distribution already enabled\");\r\n        distributionEnabled = true;\r\n        if(remainETH > 0) redistributeETH();\r\n        emit DistributionEnabled();\r\n    }\r\n\r\n    function redistributeETH() internal {\r\n        require(distributionEnabled, \"RevenueShare: Distribution not enabled\");\r\n        \r\n        uint256 distributionETH = remainETH;\r\n        uint256 distributedAmount = 0; // Track the distributed amount to verify after distribution\r\n\r\n        for (uint i = 0; i < lockers.length; i++) {\r\n            address locker = lockers[i];\r\n            if (lockedTokens[locker] > 0) {\r\n                uint256 userShare = (lockedTokens[locker] * distributionETH) / totalLocked;\r\n                userETHBalances[locker] += userShare;\r\n                distributedAmount += userShare;\r\n            }\r\n        }\r\n        \r\n        require(distributedAmount <= remainETH, \"Insufficient ETH for distribution\");\r\n        remainETH -= distributedAmount;\r\n        emit Redistributed(distributedAmount, lockers.length);\r\n    }\r\n\r\n    function claimETHReward() public {\r\n        require(distributionEnabled, \"RevenueShare: Distribution not enabled\");\r\n        uint256 reward = userETHBalances[msg.sender];\r\n        require(reward > 0, \"RevenueShare: No reward available\");\r\n        userETHBalances[msg.sender] = 0; // Reset the balance after claiming\r\n        payable(msg.sender).transfer(reward);\r\n        emit RewardClaimed(msg.sender, reward);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaussTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"}],\"name\":\"ETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"users\",\"type\":\"uint256\"}],\"name\":\"Redistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRedistributed\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimETHReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaussToken\",\"outputs\":[{\"internalType\":\"contract IGaussToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userETHBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevenueShare", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000622984873c958e00aa0f004cbdd2b5301cf0b132", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://67a2abe0f40fd4a71e8a8febbae8be562c8089ae7096b92173ecc15702aef8c0"}