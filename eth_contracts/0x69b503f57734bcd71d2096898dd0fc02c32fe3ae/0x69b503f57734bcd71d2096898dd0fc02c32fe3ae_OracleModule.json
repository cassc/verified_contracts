{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IAaveOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.16;\\n\\ninterface IAaveOracle {\\n\\n    function BASE_CURRENCY() external view returns(address);\\n    function BASE_CURRENCY_UNIT() external view returns(uint256);\\n\\n    function getAssetPrice(address asset) external view returns(uint256);\\n\\n    function getSourceOfAsset(address asset) external view returns(address);\\n\\n    function getFallbackOracle() external view returns(address);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDullahanVault.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IDullahanVault {\\n\\n    function totalAssets() external view returns (uint256);\\n    function totalRentedAmount() external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracleModule.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IOracleModule {\\n\\n    function getCollateralAmount(address collateral, uint256 feeAmount) external view returns(uint256 collateralAmount);\\n\\n    function getFeeAmount(address collateral, uint256 collateralAmount) external view returns(uint256 feeAmount);\\n\\n}\"\r\n    },\r\n    \"contracts/modules/OracleModule.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"../interfaces/IDullahanVault.sol\\\";\\nimport \\\"../interfaces/IOracleModule.sol\\\";\\nimport \\\"../oz/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IAaveOracle.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/** @title Dullahan Oracle Module contract\\n *  @author Paladin\\n *  @notice Module wrapping the Aave Price Oracle to convert owed GHO fees into an amount of collateral.\\n */\\ncontract OracleModule is IOracleModule {\\n\\n    // Constants\\n\\n    /** @notice 1e18 scale */\\n    uint256 public constant UNIT = 1e18;\\n    \\n    /** @notice Number of decimals in the GHO token */\\n    uint256 public constant GHO_DECIMALS = 18;\\n\\n    /** @notice Address of the Aave Price Oracle */\\n    address public immutable AAVE_ORACLE;\\n    /** @notice Address of the GHO token */\\n    address public immutable GHO;\\n\\n\\n    constructor(\\n        address _oracle,\\n        address _gho\\n    ) {\\n        if(_oracle == address(0) || _gho == address(0)) revert Errors.AddressZero();\\n        AAVE_ORACLE = _oracle;\\n        GHO = _gho;\\n    }\\n\\n\\n    // Functions\\n\\n    /**\\n    * @notice Get the amount of collateral for a given amount of fees\\n    * @dev Calculates the amount of collateral matching the given amount of fees based on current prices\\n    * @param collateral Address of the collateral\\n    * @param feeAmount Amount of fees\\n    * @return uint256 : Amount of collateral\\n    */\\n    function getCollateralAmount(address collateral, uint256 feeAmount) external view returns(uint256) {\\n        uint256 collateralDecimals = IERC20Metadata(collateral).decimals();\\n\\n        IAaveOracle _oracle = IAaveOracle(AAVE_ORACLE);\\n\\n        // Get the price for both assets\\n        uint256 collateralPrice = _oracle.getAssetPrice(collateral);\\n        uint256 feePrice = _oracle.getAssetPrice(GHO);\\n\\n        // Calculate & return the amount based on both prices & scaling it to the correct decimals for the given token\\n        if(collateralDecimals > GHO_DECIMALS) {\\n            return ((feeAmount * feePrice) * (10**(collateralDecimals - GHO_DECIMALS))) / collateralPrice;\\n        } else {\\n            return ((feeAmount * feePrice) / (10**(GHO_DECIMALS - collateralDecimals))) / collateralPrice;\\n        }\\n\\n    }\\n\\n    /**\\n    * @notice Get the amount of fees for a given amount of collateral\\n    * @dev Calculates the amount of fees matching the given amount of collateral based on current prices\\n    * @param collateral Address of the collateral\\n    * @param collateralAmount Amount of collateral\\n    * @return uint256 : Amount of fees\\n    */\\n    function getFeeAmount(address collateral, uint256 collateralAmount) external view returns(uint256) {\\n        uint256 collateralDecimals = IERC20Metadata(collateral).decimals();\\n\\n        IAaveOracle _oracle = IAaveOracle(AAVE_ORACLE);\\n\\n        // Get the price for both assets\\n        uint256 collateralPrice = _oracle.getAssetPrice(collateral);\\n        uint256 feePrice = _oracle.getAssetPrice(GHO);\\n\\n        // Calculate & return the amount based on both prices & scaling it from the decimals of the given token\\n        if(collateralDecimals > GHO_DECIMALS) {\\n            return ((collateralAmount * collateralPrice) / (10**(collateralDecimals - GHO_DECIMALS))) / feePrice;\\n        } else {\\n            return ((collateralAmount * collateralPrice) * (10**(GHO_DECIMALS - collateralDecimals))) / feePrice;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/oz/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/oz/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary Errors {\\n\\n    // Common Errors\\n    error AddressZero();\\n    error NullAmount();\\n    error IncorrectRewardToken();\\n    error SameAddress();\\n    error InequalArraySizes();\\n    error EmptyArray();\\n    error EmptyParameters();\\n    error NotInitialized();\\n    error AlreadyInitialized();\\n    error CannotInitialize();\\n    error InvalidParameter();\\n    error CannotRecoverToken();\\n    error NullWithdraw();\\n    error AlreadyListedManager();\\n    error NotListedManager();\\n\\n    // Access Control Erros\\n    error CallerNotAdmin();\\n    error CannotBeAdmin();\\n    error CallerNotPendingAdmin();\\n    error CallerNotAllowed();\\n\\n    // ERC20 Errors\\n    error ERC20_ApproveAddressZero();\\n    error ERC20_AllowanceUnderflow();\\n    error ERC20_AmountOverAllowance();\\n    error ERC20_AddressZero();\\n    error ERC20_SelfTransfer();\\n    error ERC20_NullAmount();\\n    error ERC20_AmountExceedBalance();\\n\\n    // Maths Errors\\n    error NumberExceed96Bits();\\n    error NumberExceed128Bits();\\n    error NumberExceed248Bits();\\n\\n    // Vault Errors\\n    error ManagerAlreadyListed();\\n    error ManagerNotListed();\\n    error NotEnoughAvailableFunds();\\n    error WithdrawBuffer();\\n    error ReserveTooLow();\\n    error CallerNotAllowedManager();\\n    error NotUndebtedManager();\\n    error AmountExceedsDebt();\\n\\n    // Vaults Rewards Errors\\n    error NullScaledAmount();\\n    error AlreadyListedDepositor();\\n    error NotListedDepositor();\\n    error ClaimNotAllowed();\\n\\n    // Pods Errors\\n    error NotPodOwner();\\n    error NotPodManager();\\n    error FailPodStateUpdate();\\n    error MintAmountUnderMinimum();\\n    error RepayFailed();\\n\\n    // Pods Manager Errors\\n    error CallerNotValidPod();\\n    error CollateralBlocked();\\n    error MintingAllowanceFailed();\\n    error FreeingStkAaveFailed();\\n    error CollateralAlreadyListed();\\n    error CollateralNotListed();\\n    error CollateralNotAllowed();\\n    error PodInvalid();\\n    error FailStateUpdate();\\n    error PodNotLiquidable();\\n\\n    // Registry Errors\\n    error VaultAlreadySet();\\n\\n    // Zap Errors\\n    error InvalidSourceToken();\\n    error DepositFailed();\\n\\n    // Wrapper Errors\\n    error NullConvertedAmount();\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gho\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AAVE_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GHO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GHO_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"getFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OracleModule", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000054586be62e3c3580375ae3723c145253060ca0c200000000000000000000000040d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}