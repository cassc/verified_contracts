{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapFirstBuyHandling.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface ITaxToken {\\n    function addInitialLiquidity(uint256 tokenAmount) external payable;\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IUniswapFirstBuy {\\n    function totalEthContributed() external view returns (uint256);\\n    function totalTokensBought() external view returns (uint256);\\n    function maxContribution() external view returns (uint256);\\n    function ethContributions(address) external view returns (uint256);\\n    function token() external view returns (address);\\n    function isOpen() external view returns (bool);\\n    function isLiquidityAdded() external view returns (bool);\\n    function uniswapV2Router() external view returns (address);\\n\\n    function setTokenAddress(address addr) external;\\n    function setMaxContribution(uint256 newMax) external;\\n    function setIsOpen(bool _isOpen) external;\\n    function launchToken(uint256 tokenAmount) external payable;\\n    function buyTokensWithEth(uint256 ethAmount) external;\\n    function withdrawTokens() external;\\n    function calculateTokenAmount(\\n        address userAddy\\n    ) external view returns (uint256);\\n    function getCurrentContribution() external view returns (uint256);\\n    function setTokenOwner(address newOwner) external;\\n    function emergencyWithdraw() external;\\n}\\n\\ncontract UniswapFirstBuyHandling is Ownable {\\n    uint256 public totalEthContributed;\\n    uint256 public totalTokensBought;\\n\\n    mapping(address => bool) public tokensWithdrawn;\\n\\n    bool public isLiquidityAdded = false;\\n\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    IUniswapFirstBuy public immutable uniswapFirstBuyContract;\\n    ITaxToken public token;\\n\\n    constructor(\\n        address uniswapAddress,\\n        address firstBuyContractAddress,\\n        address tokenAddress\\n    ) Ownable() {\\n        uniswapV2Router = IUniswapV2Router02(uniswapAddress);\\n        uniswapFirstBuyContract = IUniswapFirstBuy(firstBuyContractAddress);\\n        token = ITaxToken(tokenAddress);\\n    }\\n\\n    function setTokenAddress(address addr) public onlyOwner {\\n        token = ITaxToken(addr);\\n    }\\n\\n    function launchToken(uint256 tokenAmount) public payable onlyOwner {\\n        require(!isLiquidityAdded, \\\"Already launched\\\");\\n        require(msg.value > 0, \\\"Must send ETH\\\");\\n        require(totalEthContributed > 0, \\\"No ETH contributed\\\");\\n\\n        token.transferFrom(msg.sender, address(this), tokenAmount);\\n        token.approve(address(token), tokenAmount);\\n        token.addInitialLiquidity{value: msg.value}(tokenAmount);\\n\\n        buyTokensWithEth(totalEthContributed);\\n\\n        isLiquidityAdded = true;\\n    }\\n\\n    receive() external payable {\\n        require(msg.value > 0, \\\"Must send ETH\\\");\\n\\n        totalEthContributed += msg.value;\\n    }\\n\\n    function buyTokensWithEth(uint256 ethAmount) internal {\\n        require(address(this).balance >= ethAmount, \\\"Insufficient ETH balance\\\");\\n\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(token);\\n\\n        uint256 initialTokenBalance = token.balanceOf(address(this));\\n\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: ethAmount\\n        }(0, path, address(this), block.timestamp);\\n\\n        totalTokensBought =\\n            token.balanceOf(address(this)) -\\n            initialTokenBalance;\\n    }\\n\\n    function withdrawTokens() public {\\n        require(isLiquidityAdded, \\\"Liquidity not yet added\\\");\\n        uint256 userEthContribution = uniswapFirstBuyContract.ethContributions(\\n            msg.sender\\n        );\\n        require(userEthContribution > 0, \\\"No ETH contribution\\\");\\n        require(\\n            tokensWithdrawn[msg.sender] == false,\\n            \\\"Tokens have been paid out\\\"\\n        );\\n\\n        uint256 tokenAmount = calculateTokenAmount(msg.sender);\\n        token.transfer(msg.sender, tokenAmount);\\n        tokensWithdrawn[msg.sender] = true;\\n    }\\n\\n    function calculateTokenAmount(\\n        address userAddy\\n    ) public view returns (uint256) {\\n        uint256 remoteEthContributed = uniswapFirstBuyContract.totalEthContributed();\\n        if (remoteEthContributed == 0) return 0;\\n\\n        return\\n            (uniswapFirstBuyContract.ethContributions(userAddy) *\\n                totalTokensBought) / remoteEthContributed;\\n    }\\n\\n    function ethContributions(address userAddy) public view returns (uint256) {\\n        return uniswapFirstBuyContract.ethContributions(userAddy);\\n    }\\n\\n    function getCurrentContribution() public view returns (uint256) {\\n        return uniswapFirstBuyContract.ethContributions(msg.sender);\\n    }\\n\\n    function setTokenOwner(address newOwner) public onlyOwner {\\n        token.transferOwnership(newOwner);\\n    }\\n\\n    function emergencyWithdraw() public onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function emergencyWithdrawTokens() public onlyOwner {\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"firstBuyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddy\",\"type\":\"address\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddy\",\"type\":\"address\"}],\"name\":\"ethContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ITaxToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFirstBuyContract\",\"outputs\":[{\"internalType\":\"contract IUniswapFirstBuy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniswapFirstBuyHandling", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000006533ae6301c5a8bc22341a6c13b05a40d71a0fc7000000000000000000000000828eb9a1934c143808e325754c54ae2c1741ec49", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}