{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface ISafeDepositsSender {\r\n    event Withdraw(address indexed from, address indexed token, uint256 amount);\r\n    event DepositToLockdrop(address indexed lockDrop, address indexed token, uint256 amount);\r\n    event DepositSOVToLockdrop(address indexed lockDrop, uint256 amount);\r\n    event WithdrawBalanceFromSafe(address indexed token, uint256 balance);\r\n    event Pause();\r\n    event Unpause();\r\n    event Stop();\r\n    event SetDepositorAddress(address indexed oldDepositor, address indexed newDepositor);\r\n    event SetLockDropAddress(address indexed oldLockDrop, address indexed newLockDrop);\r\n    event MapDepositorToReceiver(address indexed depositor, address indexed receiver);\r\n\r\n    function getSafeAddress() external view returns (address);\r\n    function getLockDropAddress() external view returns (address);\r\n    function getSovTokenAddress() external view returns (address);\r\n    function getDepositorAddress() external view returns (address);\r\n    function isStopped() external view returns (bool);\r\n    function isPaused() external view returns (bool);\r\n\r\n    // @note amount > 0 should be checked by the caller\r\n    function withdraw(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        address recipient\r\n    ) external;\r\n\r\n    function withdrawAll(address[] calldata tokens, address recipient) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function stop() external;\r\n\r\n    function setDepositorAddress(address _newDepositor) external;\r\n\r\n    function sendToLockDropContract(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256 sovAmount\r\n    ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\ninterface GnosisSafe {\r\n    enum Operation {\r\n        Call,\r\n        DelegateCall\r\n    }\r\n\r\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\r\n    /// @param to Destination address of module transaction.\r\n    /// @param value Ether value of module transaction.\r\n    /// @param data Data payload of module transaction.\r\n    /// @param operation Operation type of module transaction.\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Operation operation\r\n    ) external returns (bool success);\r\n}\r\n\r\n/**\r\n * @title SafeDepositsSender\r\n * @notice This contract is a gateway for depositing funds into the Bob locker contracts\r\n */\r\ncontract SafeDepositsSender is ISafeDepositsSender {\r\n    using SafeERC20 for IERC20;\r\n    address public constant ETH_TOKEN_ADDRESS = address(0x01);\r\n    GnosisSafe private immutable SAFE;\r\n    address private immutable SOV_TOKEN_ADDRESS;\r\n    address private lockdropDepositorAddress; // address used by automation script to deposit to the LockDrop contract\r\n    address private lockDropAddress;\r\n    uint256 private stopBlock; // if set the contract is stopped forever - irreversible\r\n    bool private paused;\r\n\r\n    /**\r\n     * @param _safeAddress Address of the Gnosis Safe\r\n     * @param _lockDrop Address of the BOB FusionLock contract\r\n     * @param _sovToken Address of the SOV token contract\r\n     * @param _depositor Address of the depositor account\r\n     */\r\n    constructor(address _safeAddress, address _lockDrop, address _sovToken, address _depositor) {\r\n        require(_safeAddress != address(0), \"SafeDepositsSender: Invalid safe address\");\r\n        require(_lockDrop != address(0), \"SafeDepositsSender: Invalid lockdrop address\");\r\n        require(_sovToken != address(0), \"SafeDepositsSender: Invalid sov token address\");\r\n        require(_depositor != address(0), \"SafeDepositsSender: Invalid depositor token address\");\r\n        SAFE = GnosisSafe(_safeAddress);\r\n        SOV_TOKEN_ADDRESS = _sovToken;\r\n        lockdropDepositorAddress = _depositor;\r\n        lockDropAddress = _lockDrop;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // MODIFIERS //\r\n\r\n    modifier onlySafe() {\r\n        require(msg.sender == address(SAFE), \"SafeDepositsSender: Only Safe\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDepositor() {\r\n        require(msg.sender == lockdropDepositorAddress, \"SafeDepositsSender: Only Depositor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDepositorOrSafe() {\r\n        require(\r\n            msg.sender == lockdropDepositorAddress || msg.sender == address(SAFE),\r\n            \"SafeDepositsSender: Only Depositor or Safe\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"SafeDepositsSender: Paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"SafeDepositsSender: Not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenUnstopped() {\r\n        require(stopBlock == 0, \"SafeDepositsSender: Stopped\");\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0), \"SafeDepositsSender: Invalid address\");\r\n        _;\r\n    }\r\n\r\n    // CORE FUNCTIONS\r\n\r\n    /**\r\n     * @notice Sends tokens to the LockDrop contract\r\n     * @dev This function is for sending tokens to the LockDrop contract for users to receive rewards and to be bridged to the BOB mainnet for Sovryn DEX\r\n     * @dev The function is allowed to be called only by the lockdropDepositorAddress\r\n     * @dev Token amounts and SOV amount to send are calculated offchain\r\n     * @param tokens List of tokens to send\r\n     * @param amounts List of amounts of tokens to send\r\n     * @param sovAmount Amount of SOV tokens to send\r\n     */\r\n    function sendToLockDropContract(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256 sovAmount\r\n    ) external onlyDepositorOrSafe whenNotPaused whenUnstopped {\r\n        require(\r\n            tokens.length == amounts.length,\r\n            \"SafeDepositsSender: Tokens and amounts length mismatch\"\r\n        );\r\n        require(sovAmount > 0, \"SafeDepositsSender: Invalid SOV amount\");\r\n\r\n        bytes memory data;\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            require(\r\n                tokens[i] != SOV_TOKEN_ADDRESS,\r\n                \"SafeDepositsSender: SOV token is transferred separately\"\r\n            );\r\n\r\n            // transfer native token\r\n            uint256 balance;\r\n            uint256 transferAmount;\r\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\r\n                require(\r\n                    address(SAFE).balance >= amounts[i],\r\n                    \"SafeDepositsSender: Not enough eth balance to deposit\"\r\n                );\r\n                data = abi.encodeWithSignature(\"depositEth()\");\r\n                require(\r\n                    SAFE.execTransactionFromModule(\r\n                        lockDropAddress,\r\n                        amounts[i],\r\n                        data,\r\n                        GnosisSafe.Operation.Call\r\n                    ),\r\n                    \"SafeDepositsSender: Could not deposit ether\"\r\n                );\r\n\r\n                // withdraw balance to this contract left after deposit to the LockDrop\r\n                balance = address(SAFE).balance;\r\n                transferAmount = balance < amounts[i] ? balance : amounts[i];\r\n                if (transferAmount > 0) {\r\n                    require(\r\n                        SAFE.execTransactionFromModule(\r\n                            address(this),\r\n                            transferAmount,\r\n                            \"\",\r\n                            GnosisSafe.Operation.Call\r\n                        ),\r\n                        \"SafeDepositsSender: Could not withdraw ether after deposit\"\r\n                    );\r\n                    emit WithdrawBalanceFromSafe(tokens[i], transferAmount);\r\n                }\r\n            } else {\r\n                // transfer ERC20 tokens\r\n                IERC20 token = IERC20(tokens[i]);\r\n                balance = token.balanceOf(address(SAFE));\r\n                require(balance >= amounts[i], \"SafeDepositsSender: Not enough tokens to deposit\");\r\n\r\n                data = abi.encodeWithSignature(\r\n                    \"approve(address,uint256)\",\r\n                    lockDropAddress,\r\n                    amounts[i]\r\n                );\r\n                require(\r\n                    SAFE.execTransactionFromModule(tokens[i], 0, data, GnosisSafe.Operation.Call),\r\n                    \"SafeDepositsSender: Could not approve token transfer\"\r\n                );\r\n\r\n                data = abi.encodeWithSignature(\r\n                    \"depositERC20(address,uint256)\",\r\n                    tokens[i],\r\n                    amounts[i]\r\n                );\r\n                require(\r\n                    SAFE.execTransactionFromModule(\r\n                        lockDropAddress,\r\n                        0,\r\n                        data,\r\n                        GnosisSafe.Operation.Call\r\n                    ),\r\n                    \"SafeDepositsSender: Could not deposit token\"\r\n                );\r\n\r\n                // withdraw balance to this contract left after deposit to the LockDrop\r\n                balance = token.balanceOf(address(SAFE));\r\n                transferAmount = balance < amounts[i] ? balance : amounts[i];\r\n                if (transferAmount > 0) {\r\n                    data = abi.encodeWithSignature(\r\n                        \"transfer(address,uint256)\",\r\n                        address(this),\r\n                        transferAmount\r\n                    );\r\n                    require(\r\n                        SAFE.execTransactionFromModule(\r\n                            tokens[i],\r\n                            0,\r\n                            data,\r\n                            GnosisSafe.Operation.Call\r\n                        ),\r\n                        \"SafeDepositsSender: Could not withdraw token after deposit\"\r\n                    );\r\n                    emit WithdrawBalanceFromSafe(tokens[i], transferAmount);\r\n                }\r\n            }\r\n            emit DepositToLockdrop(lockDropAddress, tokens[i], amounts[i]);\r\n        }\r\n\r\n        // transfer SOV\r\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", lockDropAddress, sovAmount);\r\n        require(\r\n            SAFE.execTransactionFromModule(SOV_TOKEN_ADDRESS, 0, data, GnosisSafe.Operation.Call),\r\n            \"SafeDepositsSender: Could not execute SOV transfer\"\r\n        );\r\n        data = abi.encodeWithSignature(\r\n            \"depositERC20(address,uint256)\",\r\n            SOV_TOKEN_ADDRESS,\r\n            sovAmount\r\n        );\r\n        require(\r\n            SAFE.execTransactionFromModule(lockDropAddress, 0, data, GnosisSafe.Operation.Call),\r\n            \"SafeDepositsSender: Could not execute SOV transfer\"\r\n        );\r\n\r\n        emit DepositSOVToLockdrop(lockDropAddress, sovAmount);\r\n    }\r\n\r\n    /// @notice Maps depositor on ethereum to receiver on BOB\r\n    /// @notice Receiver from the last emitted event called by msg.sender will be used\r\n    /// @param receiver Receiver address on BOB. The depositor address will be replaced with the receiver address for distribution of LP tokens and rewards on BOB\r\n    function mapDepositorToReceiver(address receiver) external {\r\n        emit MapDepositorToReceiver(msg.sender, receiver);\r\n    }\r\n\r\n    // ADMINISTRATIVE FUNCTIONS //\r\n\r\n    /**\r\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) from Safe\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     * @return success Boolean flag indicating if the call succeeded.\r\n     */\r\n    function execTransactionFromSafe(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        GnosisSafe.Operation operation\r\n    ) external onlySafe returns (bool success) {\r\n        success = execute(to, value, data, operation, type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * @notice Executes either a delegatecall or a call with provided parameters.\r\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\r\n     *      - if the contract at `to` address has code or not\r\n     *      It is the responsibility of the caller to perform such checks.\r\n     * @param to Destination address.\r\n     * @param value Ether value.\r\n     * @param data Data payload.\r\n     * @param operation Operation type.\r\n     * @return success boolean flag indicating if the call succeeded.\r\n     */\r\n    function execute(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        GnosisSafe.Operation operation,\r\n        uint256 txGas\r\n    ) internal returns (bool success) {\r\n        if (operation == GnosisSafe.Operation.DelegateCall) {\r\n            /* solhint-disable no-inline-assembly */\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        } else {\r\n            /* solhint-disable no-inline-assembly */\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        }\r\n    }\r\n\r\n    /// @notice There is no check if _newDepositor is not zero on purpose - that could be required\r\n\r\n    /**\r\n     * @notice Sets new depositor address\r\n     * @dev Only Safe can call this function\r\n     * @dev New depositor can be zero address\r\n     * @param _newDepositor New depositor address\r\n     */\r\n    function setDepositorAddress(address _newDepositor) external onlySafe {\r\n        emit SetDepositorAddress(lockdropDepositorAddress, _newDepositor);\r\n        lockdropDepositorAddress = _newDepositor;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets new LockDrop address\r\n     * @dev Only Safe can call this function\r\n     * @dev New LockDrop can't be zero address\r\n     * @param _newLockdrop New depositor address\r\n     */\r\n    function setLockDropAddress(address _newLockdrop) external onlySafe {\r\n        require(_newLockdrop != address(0), \"SafeDepositsSender: Zero address not allowed\");\r\n        emit SetLockDropAddress(lockDropAddress, _newLockdrop);\r\n        lockDropAddress = _newLockdrop;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws tokens from this contract to a recipient address\r\n     * @notice Withdrawal to the Safe address will affect balances and rewards\r\n     * @notice Amount > 0 should be checked by the caller before calling this function\r\n     * @dev Only Safe can call this function\r\n     * @dev Recipient should not be a zero address\r\n     * @param tokens List of token addresses to withdraw\r\n     * @param amounts List of token amounts to withdraw\r\n     * @param recipient Recipient address\r\n     */\r\n    function withdraw(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        address recipient\r\n    ) external onlySafe notZeroAddress(recipient) {\r\n        require(\r\n            tokens.length == amounts.length,\r\n            \"SafeDepositsSender: Tokens and amounts length mismatch\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            require(tokens[i] != address(0x00), \"SafeDepositsSender: Zero address not allowed\");\r\n            require(amounts[i] != 0, \"SafeDepositsSender: Zero amount not allowed\");\r\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\r\n                require(\r\n                    address(this).balance >= amounts[i],\r\n                    \"SafeDepositsSender: Not enough funds\"\r\n                );\r\n                (bool success, ) = payable(recipient).call{ value: amounts[i] }(\"\");\r\n                require(success, \"Could not withdraw ether\");\r\n                continue;\r\n            }\r\n\r\n            IERC20 token = IERC20(tokens[i]);\r\n            uint256 balance = token.balanceOf(address(this));\r\n            require(balance >= amounts[i], \"SafeDepositsSender: Not enough funds\");\r\n\r\n            token.safeTransfer(recipient, amounts[i]);\r\n\r\n            emit Withdraw(recipient, tokens[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws all tokens from this contract to a recipient\r\n     * @notice Amount > 0 should be checked by the caller before calling this function\r\n     * @dev Only Safe can call this function\r\n     * @dev Recipient should not be a zero address\r\n     * @notice Withdrawal to the Safe address will affect balances and rewards\r\n     * @param tokens List of token addresses to withdraw\r\n     * @param recipient Recipient address\r\n     */\r\n    function withdrawAll(\r\n        address[] calldata tokens,\r\n        address recipient\r\n    ) external onlySafe notZeroAddress(recipient) {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\r\n                (bool success, ) = payable(recipient).call{ value: address(this).balance }(\"\");\r\n                require(success, \"SafeDepositsSender: Could not withdraw ether\");\r\n                continue;\r\n            }\r\n            IERC20 token = IERC20(tokens[i]);\r\n            uint256 balance = token.balanceOf(address(this));\r\n            if (balance > 0) {\r\n                token.safeTransfer(recipient, balance);\r\n            }\r\n\r\n            emit Withdraw(recipient, tokens[i], balance);\r\n        }\r\n    }\r\n\r\n    /// @notice pause the contract - no funds can be sent to the LockDrop contract\r\n    function pause() external onlySafe whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /// @notice unpause the contract\r\n    function unpause() external onlySafe whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /// @notice stops the contract - no funds can be sent to the LockDrop contract, this is irreversible\r\n    function stop() external onlySafe {\r\n        stopBlock = block.number;\r\n        emit Stop();\r\n    }\r\n\r\n    // GETTERS //\r\n    function getSafeAddress() external view returns (address) {\r\n        return address(SAFE);\r\n    }\r\n\r\n    function getLockDropAddress() external view returns (address) {\r\n        return lockDropAddress;\r\n    }\r\n\r\n    function getSovTokenAddress() external view returns (address) {\r\n        return SOV_TOKEN_ADDRESS;\r\n    }\r\n\r\n    function getDepositorAddress() external view returns (address) {\r\n        return lockdropDepositorAddress;\r\n    }\r\n\r\n    function isStopped() external view returns (bool) {\r\n        return stopBlock != 0;\r\n    }\r\n\r\n    function getStopBlock() external view returns (uint256) {\r\n        return stopBlock;\r\n    }\r\n\r\n    function isPaused() external view returns (bool) {\r\n        return paused;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockDrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sovToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockDrop\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositSOVToLockdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockDrop\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToLockdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"MapDepositorToReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDepositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"}],\"name\":\"SetDepositorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLockDrop\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLockDrop\",\"type\":\"address\"}],\"name\":\"SetLockDropAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawBalanceFromSafe\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum GnosisSafe.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockDropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStopBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mapDepositorToReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"sovAmount\",\"type\":\"uint256\"}],\"name\":\"sendToLockDropContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDepositor\",\"type\":\"address\"}],\"name\":\"setDepositorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLockdrop\",\"type\":\"address\"}],\"name\":\"setLockDropAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafeDepositsSender", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000949cf9295d2950b6bd9b7334846101e9ae44bbb000000000000000000000000061dc14b28d4dbcd6cf887e9b72018b9da1ce6ff7000000000000000000000000bdab72602e9ad40fc6a6852caf43258113b8f7a500000000000000000000000086de732721fffcdf163629c64e3925b5bf7f371a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79436df57107ad03a8a62cb0ffaabfeebb3ab9643ced815126b2474370014c4c"}