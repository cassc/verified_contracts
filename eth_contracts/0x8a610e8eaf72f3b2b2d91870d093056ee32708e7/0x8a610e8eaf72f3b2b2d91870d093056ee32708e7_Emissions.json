{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/rewards/Emissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../rewards/interfaces/IRewardsConfig.sol\\\";\\nimport \\\"../interfaces/IExchangeConfig.sol\\\";\\nimport \\\"./interfaces/IEmissions.sol\\\";\\nimport \\\"../interfaces/ISalt.sol\\\";\\n\\n\\n// Responsible for storing the SALT emissions at launch and then distributing them over time.\\n// The emissions are gradually distributed to the stakingRewardsEmitter and liquidityRewardsEmitter on performUpkeep (via the SaltRewards contract).\\n// Default rate of emissions is 0.50% of the remaining SALT balance per week (interpolated based on the time elapsed since the last performUpkeep call).\\n\\ncontract Emissions is IEmissions\\n    {\\n\\tusing SafeERC20 for ISalt;\\n\\n    uint256 constant public MAX_TIME_SINCE_LAST_UPKEEP = 1 weeks;\\n\\n    ISaltRewards immutable public saltRewards;\\n\\tIExchangeConfig immutable public exchangeConfig;\\n\\tIRewardsConfig immutable public rewardsConfig;\\n\\tISalt immutable public salt;\\n\\n\\n    constructor( ISaltRewards _saltRewards, IExchangeConfig _exchangeConfig, IRewardsConfig _rewardsConfig )\\n\\t\\t{\\n\\t\\tsaltRewards = _saltRewards;\\n\\t\\texchangeConfig = _exchangeConfig;\\n\\t\\trewardsConfig = _rewardsConfig;\\n\\n\\t\\t// Cached for efficiency\\n\\t\\tsalt = _exchangeConfig.salt();\\n\\t\\t}\\n\\n\\n\\t// Transfer a percent (default 0.50% per week) of the currently held SALT to the stakingRewardsEmitter and liquidityRewardsEmitter (via SaltRewards).\\n\\t// The percentage to transfer is interpolated from how long it's been since the last performUpkeep() call.\\n\\tfunction performUpkeep(uint256 timeSinceLastUpkeep) external\\n\\t\\t{\\n\\t\\trequire( msg.sender == address(exchangeConfig.upkeep()), \\\"Emissions.performUpkeep is only callable from the Upkeep contract\\\" );\\n\\n\\t\\tif ( timeSinceLastUpkeep == 0 )\\n\\t\\t\\treturn;\\n\\n\\t\\t// Cap the timeSinceLastUpkeep at one week (if for some reason it has been longer).\\n\\t\\t// This will cap the emitted rewards at a default of 0.50% in this transaction.\\n\\t\\tif ( timeSinceLastUpkeep >= MAX_TIME_SINCE_LAST_UPKEEP )\\n\\t\\t\\ttimeSinceLastUpkeep = MAX_TIME_SINCE_LAST_UPKEEP;\\n\\n\\t\\tuint256 saltBalance = salt.balanceOf( address( this ) );\\n\\n\\t\\t// Target a certain percentage of rewards per week and base what we need to distribute now on how long it has been since the last distribution\\n\\t\\tuint256 saltToSend = ( saltBalance * timeSinceLastUpkeep * rewardsConfig.emissionsWeeklyPercentTimes1000() ) / ( 100 * 1000 weeks );\\n\\t\\tif ( saltToSend == 0 )\\n\\t\\t\\treturn;\\n\\n\\t\\t// Send the emissions to saltRewards\\n\\t\\tsalt.safeTransfer(address(saltRewards), saltToSend);\\n\\t\\t}\\n\\t}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/IRewardsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IRewardsConfig\\n\\t{\\n\\tfunction changeRewardsEmitterDailyPercent(bool increase) external; // onlyOwner\\n\\tfunction changeEmissionsWeeklyPercent(bool increase) external; // onlyOwner\\n\\tfunction changeStakingRewardsPercent(bool increase) external; // onlyOwner\\n\\n\\t// Views\\n    function emissionsWeeklyPercentTimes1000() external view returns (uint256);\\n    function rewardsEmitterDailyPercentTimes1000() external view returns (uint256);\\n    function stakingRewardsPercent() external view returns (uint256);\\n    }\"\r\n    },\r\n    \"src/interfaces/IExchangeConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/finance/VestingWallet.sol\\\";\\nimport \\\"../staking/interfaces/ILiquidity.sol\\\";\\nimport \\\"../launch/interfaces/IInitialDistribution.sol\\\";\\nimport \\\"../rewards/interfaces/IRewardsEmitter.sol\\\";\\nimport \\\"../rewards/interfaces/ISaltRewards.sol\\\";\\nimport \\\"../rewards/interfaces/IEmissions.sol\\\";\\nimport \\\"../interfaces/IAccessManager.sol\\\";\\nimport \\\"../launch/interfaces/IAirdrop.sol\\\";\\nimport \\\"../dao/interfaces/IDAO.sol\\\";\\nimport \\\"../interfaces/ISalt.sol\\\";\\nimport \\\"./IUpkeep.sol\\\";\\n\\n\\ninterface IExchangeConfig\\n\\t{\\n\\tfunction setContracts( IDAO _dao, IUpkeep _upkeep, IInitialDistribution _initialDistribution, VestingWallet _teamVestingWallet, VestingWallet _daoVestingWallet ) external; // onlyOwner\\n\\tfunction setAccessManager( IAccessManager _accessManager ) external; // onlyOwner\\n\\n\\t// Views\\n\\tfunction salt() external view returns (ISalt);\\n\\tfunction wbtc() external view returns (IERC20);\\n\\tfunction weth() external view returns (IERC20);\\n\\tfunction usdc() external view returns (IERC20);\\n\\tfunction usdt() external view returns (IERC20);\\n\\n\\tfunction daoVestingWallet() external view returns (VestingWallet);\\n    function teamVestingWallet() external view returns (VestingWallet);\\n    function initialDistribution() external view returns (IInitialDistribution);\\n\\n\\tfunction accessManager() external view returns (IAccessManager);\\n\\tfunction dao() external view returns (IDAO);\\n\\tfunction upkeep() external view returns (IUpkeep);\\n\\tfunction teamWallet() external view returns (address);\\n\\n\\tfunction walletHasAccess( address wallet ) external view returns (bool);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/IEmissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IEmissions\\n\\t{\\n\\tfunction performUpkeep( uint256 timeSinceLastUpkeep ) external;\\n    }\"\r\n    },\r\n    \"src/interfaces/ISalt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ISalt is IERC20\\n\\t{\\n\\tfunction burnTokensInContract() external;\\n\\n\\t// Views\\n\\tfunction totalBurned() external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (finance/VestingWallet.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title VestingWallet\\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract VestingWallet is Context {\\n    event EtherReleased(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n\\n    uint256 private _released;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable _beneficiary;\\n    uint64 private immutable _start;\\n    uint64 private immutable _duration;\\n\\n    /**\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\n     */\\n    constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds) payable {\\n        require(beneficiaryAddress != address(0), \\\"VestingWallet: beneficiary is zero address\\\");\\n        _beneficiary = beneficiaryAddress;\\n        _start = startTimestamp;\\n        _duration = durationSeconds;\\n    }\\n\\n    /**\\n     * @dev The contract should be able to receive Eth.\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @dev Getter for the beneficiary address.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Getter for the start timestamp.\\n     */\\n    function start() public view virtual returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @dev Amount of eth already released\\n     */\\n    function released() public view virtual returns (uint256) {\\n        return _released;\\n    }\\n\\n    /**\\n     * @dev Amount of token already released\\n     */\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable eth.\\n     */\\n    function releasable() public view virtual returns (uint256) {\\n        return vestedAmount(uint64(block.timestamp)) - released();\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(address token) public view virtual returns (uint256) {\\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\\n    }\\n\\n    /**\\n     * @dev Release the native token (ether) that have already vested.\\n     *\\n     * Emits a {EtherReleased} event.\\n     */\\n    function release() public virtual {\\n        uint256 amount = releasable();\\n        _released += amount;\\n        emit EtherReleased(amount);\\n        Address.sendValue(payable(beneficiary()), amount);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     *\\n     * Emits a {ERC20Released} event.\\n     */\\n    function release(address token) public virtual {\\n        uint256 amount = releasable(token);\\n        _erc20Released[token] += amount;\\n        emit ERC20Released(token, amount);\\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), amount);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(address(this).balance + released(), timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\\n    }\\n\\n    /**\\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\\n     * an asset given its total historical allocation.\\n     */\\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\\n        if (timestamp < start()) {\\n            return 0;\\n        } else if (timestamp > start() + duration()) {\\n            return totalAllocation;\\n        } else {\\n            return (totalAllocation * (timestamp - start())) / duration();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/staking/interfaces/ILiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n\\ninterface ILiquidity is IStakingRewards\\n\\t{\\n\\tfunction depositLiquidityAndIncreaseShare( IERC20 tokenA, IERC20 tokenB, uint256 maxAmountA, uint256 maxAmountB, uint256 minAddedAmountA, uint256 minAddedAmountB, uint256 minAddedLiquidity, uint256 deadline, bool useZapping ) external returns (uint256 addedLiquidity);\\n\\tfunction withdrawLiquidityAndClaim( IERC20 tokenA, IERC20 tokenB, uint256 liquidityToWithdraw, uint256 minReclaimedA, uint256 minReclaimedB, uint256 deadline ) external returns (uint256 reclaimedA, uint256 reclaimedB);\\n\\t}\\n\"\r\n    },\r\n    \"src/launch/interfaces/IInitialDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./IBootstrapBallot.sol\\\";\\nimport \\\"./IAirdrop.sol\\\";\\n\\n\\ninterface IInitialDistribution\\n\\t{\\n\\tfunction distributionApproved( IAirdrop airdrop1, IAirdrop airdrop2 ) external;\\n\\n\\t// Views\\n\\tfunction bootstrapBallot() external view returns (IBootstrapBallot);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/IRewardsEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../staking/interfaces/IStakingRewards.sol\\\";\\n\\n\\ninterface IRewardsEmitter\\n\\t{\\n\\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external;\\n\\tfunction performUpkeep( uint256 timeSinceLastUpkeep ) external;\\n\\n\\t// Views\\n\\tfunction pendingRewardsForPools( bytes32[] calldata pools ) external view returns (uint256[] calldata);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/ISaltRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./IRewardsEmitter.sol\\\";\\n\\n\\ninterface ISaltRewards\\n\\t{\\n\\tfunction sendInitialSaltRewards( uint256 liquidityBootstrapAmount, bytes32[] calldata poolIDs ) external;\\n    function performUpkeep( bytes32[] calldata poolIDs, uint256[] calldata profitsForPools ) external;\\n\\n    // Views\\n    function stakingRewardsEmitter() external view returns (IRewardsEmitter);\\n    function liquidityRewardsEmitter() external view returns (IRewardsEmitter);\\n    }\"\r\n    },\r\n    \"src/interfaces/IAccessManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IAccessManager\\n\\t{\\n\\tfunction excludedCountriesUpdated() external;\\n\\tfunction grantAccess(bytes calldata signature) external;\\n\\n\\t// Views\\n\\tfunction geoVersion() external view returns (uint256);\\n\\tfunction walletHasAccess(address wallet) external view returns (bool);\\n\\t}\\n\"\r\n    },\r\n    \"src/launch/interfaces/IAirdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IAirdrop\\n\\t{\\n\\tfunction authorizeWallet( address wallet, uint256 saltAmount ) external;\\n\\tfunction allowClaiming() external;\\n\\tfunction claim() external;\\n\\n\\t// Views\\n\\tfunction claimedByUser( address wallet) external view returns (uint256);\\n\\tfunction claimingAllowed() external view returns (bool);\\n\\tfunction claimingStartTimestamp() external view returns (uint256);\\n\\tfunction claimableAmount(address wallet) external view returns (uint256);\\n    function airdropForUser( address wallet ) external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/dao/interfaces/IDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../rewards/interfaces/ISaltRewards.sol\\\";\\nimport \\\"../../pools/interfaces/IPools.sol\\\";\\nimport \\\"../../interfaces/ISalt.sol\\\";\\n\\ninterface IDAO\\n\\t{\\n\\tfunction finalizeBallot( uint256 ballotID ) external;\\n\\tfunction manuallyRemoveBallot( uint256 ballotID ) external;\\n\\n\\tfunction withdrawFromDAO( IERC20 token ) external returns (uint256 withdrawnAmount);\\n\\n\\t// Views\\n\\tfunction pools() external view returns (IPools);\\n\\tfunction websiteURL() external view returns (string memory);\\n\\tfunction countryIsExcluded( string calldata country ) external view returns (bool);\\n\\t}\"\r\n    },\r\n    \"src/interfaces/IUpkeep.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IUpkeep\\n\\t{\\n\\tfunction performUpkeep() external;\\n\\n\\t// Views\\n\\tfunction currentRewardsForCallingPerformUpkeep() external view returns (uint256);\\n\\tfunction lastUpkeepTimeEmissions() external view returns (uint256);\\n\\tfunction lastUpkeepTimeRewardsEmitters() external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/staking/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\nstruct AddedReward\\n\\t{\\n\\tbytes32 poolID;\\t\\t\\t\\t\\t\\t\\t// The pool to add rewards to\\n\\tuint256 amountToAdd;\\t\\t\\t\\t// The amount of rewards (as SALT) to add\\n\\t}\\n\\nstruct UserShareInfo\\n\\t{\\n\\tuint256 userShare;\\t\\t\\t\\t\\t// A user's share for a given poolID\\n\\tuint256 virtualRewards;\\t\\t\\t\\t// The amount of rewards that were added to maintain proper rewards/share ratio - and will be deducted from a user's pending rewards.\\n\\tuint256 cooldownExpiration;\\t\\t// The timestamp when the user can modify their share\\n\\t}\\n\\n\\ninterface IStakingRewards\\n\\t{\\n\\tfunction claimAllRewards( bytes32[] calldata poolIDs ) external returns (uint256 rewardsAmount);\\n\\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external;\\n\\n\\t// Views\\n\\tfunction totalShares(bytes32 poolID) external view returns (uint256);\\n\\tfunction totalSharesForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] calldata shares);\\n\\tfunction totalRewardsForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] calldata rewards);\\n\\n\\tfunction userRewardForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\tfunction userShareForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\tfunction userVirtualRewardsForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\n\\tfunction userRewardsForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata rewards);\\n\\tfunction userShareForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata shares);\\n\\tfunction userCooldowns( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata cooldowns);\\n\\t}\\n\"\r\n    },\r\n    \"src/launch/interfaces/IBootstrapBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IBootstrapBallot\\n\\t{\\n\\tfunction vote( bool voteStartExchangeYes, uint256 saltAmount, bytes calldata signature ) external;\\n\\tfunction finalizeBallot() external;\\n\\n\\tfunction authorizeAirdrop2( uint256 saltAmount, bytes calldata signature ) external;\\n\\tfunction finalizeAirdrop2() external;\\n\\n\\t// Views\\n\\tfunction claimableTimestamp1() external view returns (uint256);\\n\\tfunction claimableTimestamp2() external view returns (uint256);\\n\\n\\tfunction hasVoted(address user) external view returns (bool);\\n\\tfunction ballotFinalized() external view returns (bool);\\n\\n\\tfunction startExchangeYes() external view returns (uint256);\\n\\tfunction startExchangeNo() external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../staking/interfaces/ILiquidity.sol\\\";\\nimport \\\"../../dao/interfaces/IDAO.sol\\\";\\nimport \\\"./IPoolStats.sol\\\";\\n\\n\\ninterface IPools is IPoolStats\\n\\t{\\n\\tfunction startExchangeApproved() external;\\n\\tfunction setContracts( IDAO _dao, ILiquidity _liquidity ) external; // onlyOwner\\n\\n\\tfunction addLiquidity( IERC20 tokenA, IERC20 tokenB, uint256 maxAmountA, uint256 maxAmountB, uint256 minAddedAmountA, uint256 minAddedAmountB, uint256 totalLiquidity ) external returns (uint256 addedAmountA, uint256 addedAmountB, uint256 addedLiquidity);\\n\\tfunction removeLiquidity( IERC20 tokenA, IERC20 tokenB, uint256 liquidityToRemove, uint256 minReclaimedA, uint256 minReclaimedB, uint256 totalLiquidity ) external returns (uint256 reclaimedA, uint256 reclaimedB);\\n\\n\\tfunction deposit( IERC20 token, uint256 amount ) external;\\n\\tfunction withdraw( IERC20 token, uint256 amount ) external;\\n\\tfunction swap( IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositSwapWithdraw(IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositDoubleSwapWithdraw( IERC20 swapTokenIn, IERC20 swapTokenMiddle, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositZapSwapWithdraw(IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn ) external returns (uint256 swapAmountOut);\\n\\n\\t// Views\\n\\tfunction exchangeIsLive() external view returns (bool);\\n\\tfunction getPoolReserves(IERC20 tokenA, IERC20 tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\n\\tfunction depositedUserBalance(address user, IERC20 token) external view returns (uint256);\\n\\t}\\n\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPoolStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IPoolStats\\n\\t{\\n\\t// These are the indicies (in terms of a poolIDs location in the current whitelistedPoolIDs array) of pools involved in an arbitrage path\\n\\tstruct ArbitrageIndicies\\n\\t\\t{\\n\\t\\tuint64 index1;\\n\\t\\tuint64 index2;\\n\\t\\tuint64 index3;\\n\\t\\t}\\n\\n\\tfunction clearProfitsForPools() external;\\n\\tfunction updateArbitrageIndicies() external;\\n\\n\\t// Views\\n\\tfunction profitsForWhitelistedPools() external view returns (uint256[] memory _calculatedProfits);\\n\\tfunction arbitrageIndicies(bytes32 poolID) external view returns (ArbitrageIndicies memory);\\n\\t}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISaltRewards\",\"name\":\"_saltRewards\",\"type\":\"address\"},{\"internalType\":\"contract IExchangeConfig\",\"name\":\"_exchangeConfig\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsConfig\",\"name\":\"_rewardsConfig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MAX_TIME_SINCE_LAST_UPKEEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeConfig\",\"outputs\":[{\"internalType\":\"contract IExchangeConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeSinceLastUpkeep\",\"type\":\"uint256\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsConfig\",\"outputs\":[{\"internalType\":\"contract IRewardsConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"contract ISalt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saltRewards\",\"outputs\":[{\"internalType\":\"contract ISaltRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Emissions", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000adac7ab59fc12908d70d0846e4d2e9e73ca6f196000000000000000000000000c1c4cd45572ebc537120f25be396f2c6d2825e620000000000000000000000003a07ffb529c1f4efe2bb3613e2419a149c357110", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}