{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the OptionalOnlyCaller helper, used to opt in to a caller\\n * verification for a given address to methods that are otherwise callable by any address.\\n */\\ninterface IOptionalOnlyCaller {\\n    /**\\n     * @dev Emitted every time setOnlyCallerCheck is called.\\n     */\\n    event OnlyCallerOptIn(address user, bool enabled);\\n\\n    /**\\n     * @dev Enables / disables verification mechanism for caller.\\n     * @param enabled - True if caller verification shall be enabled, false otherwise.\\n     */\\n    function setOnlyCallerCheck(bool enabled) external;\\n\\n    function setOnlyCallerCheckWithSignature(\\n        address user,\\n        bool enabled,\\n        bytes memory signature\\n    ) external;\\n\\n    /**\\n     * @dev Returns true if caller verification is enabled for the given user, false otherwise.\\n     */\\n    function isOnlyCallerEnabled(address user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\\\";\\n\\nimport \\\"../openzeppelin/EIP712.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract EOASignaturesValidator is ISignaturesValidator, EIP712 {\\n    // Replay attack prevention for each account.\\n    mapping(address => uint256) internal _nextNonce;\\n\\n    function getDomainSeparator() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function getNextNonce(address account) public view override returns (uint256) {\\n        return _nextNonce[account];\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 errorCode\\n    ) internal {\\n        return _ensureValidSignature(account, structHash, signature, type(uint256).max, errorCode);\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 deadline,\\n        uint256 errorCode\\n    ) internal {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _require(_isValidSignature(account, digest, signature), errorCode);\\n\\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\\n        // scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n\\n        // We only advance the nonce after validating the signature. This is irrelevant for this module, but it can be\\n        // important in derived contracts that override _isValidSignature (e.g. SignaturesValidator), as we want for\\n        // the observable state to still have the current nonce as the next valid one.\\n        _nextNonce[account] += 1;\\n    }\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual returns (bool) {\\n        _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the r, s and v signature parameters, and the only way to get them is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\\n        return (recoveredAddress != address(0) && recoveredAddress == account);\\n    }\\n\\n    function _toArraySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory signature = new bytes(65);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(signature, 32), r)\\n            mstore(add(signature, 64), s)\\n            mstore8(add(signature, 96), v)\\n        }\\n\\n        return signature;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./SignaturesValidator.sol\\\";\\n\\nabstract contract OptionalOnlyCaller is IOptionalOnlyCaller, SignaturesValidator {\\n    mapping(address => bool) private _isOnlyCallerEnabled;\\n\\n    bytes32 private constant _SET_ONLY_CALLER_CHECK_TYPEHASH = keccak256(\\n        \\\"SetOnlyCallerCheck(address user,bool enabled,uint256 nonce)\\\"\\n    );\\n\\n    /**\\n     * @dev Reverts if the verification mechanism is enabled and the given address is not the caller.\\n     * @param user - Address to validate as the only allowed caller, if the verification is enabled.\\n     */\\n    modifier optionalOnlyCaller(address user) {\\n        _verifyCaller(user);\\n        _;\\n    }\\n\\n    function setOnlyCallerCheck(bool enabled) external override {\\n        _setOnlyCallerCheck(msg.sender, enabled);\\n    }\\n\\n    function setOnlyCallerCheckWithSignature(\\n        address user,\\n        bool enabled,\\n        bytes memory signature\\n    ) external override {\\n        bytes32 structHash = keccak256(abi.encode(_SET_ONLY_CALLER_CHECK_TYPEHASH, user, enabled, getNextNonce(user)));\\n        _ensureValidSignature(user, structHash, signature, Errors.INVALID_SIGNATURE);\\n        _setOnlyCallerCheck(user, enabled);\\n    }\\n\\n    function _setOnlyCallerCheck(address user, bool enabled) private {\\n        _isOnlyCallerEnabled[user] = enabled;\\n        emit OnlyCallerOptIn(user, enabled);\\n    }\\n\\n    function isOnlyCallerEnabled(address user) external view override returns (bool) {\\n        return _isOnlyCallerEnabled[user];\\n    }\\n\\n    function _verifyCaller(address user) private view {\\n        if (_isOnlyCallerEnabled[user]) {\\n            _require(msg.sender == user, Errors.SENDER_NOT_ALLOWED);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/SignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol\\\";\\n\\nimport \\\"./EOASignaturesValidator.sol\\\";\\nimport \\\"../openzeppelin/Address.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract SignaturesValidator is EOASignaturesValidator {\\n    using Address for address;\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual override returns (bool) {\\n        if (account.isContract()) {\\n            return IERC1271(account).isValidSignature(digest, signature) == IERC1271.isValidSignature.selector;\\n        } else {\\n            return super._isValidSignature(account, digest, signature);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library.\\n */\\nlibrary Math {\\n    // solhint-disable no-inline-assembly\\n\\n    /**\\n     * @dev Returns the absolute value of a signed integer.\\n     */\\n    function abs(int256 a) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = a > 0 ? uint256(a) : uint256(-a)\\n        assembly {\\n            let s := sar(255, a)\\n            result := sub(xor(a, s), s)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (a < b) ? b : a;\\n        assembly {\\n            result := sub(a, mul(sub(a, b), lt(a, b)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to `result = (a < b) ? a : b`\\n        assembly {\\n            result := sub(a, mul(sub(a, b), gt(a, b)))\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : 1 + (a - 1) / b;\\n        assembly {\\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the Address library from OpenZeppelin Contracts, altered by removing the `isContract` checks on\\n// `functionCall` and `functionDelegateCall` in order to save gas, as the recipients are known to be contracts.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    // solhint-disable max-line-length\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        _require(address(this).balance >= amount, Errors.ADDRESS_INSUFFICIENT_BALANCE);\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        _require(success, Errors.ADDRESS_CANNOT_SEND_VALUE);\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    // solhint-enable max-line-length\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but passing some native ETH as msg.value to the call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling up the\\n     * revert reason or using the one provided.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                _revert(Errors.LOW_LEVEL_CALL_FAILED);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    // solc-ignore-next-line func-mutability\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // Some contracts need their allowance reduced to 0 before setting it to an arbitrary amount.\\n        if (value != 0 && token.allowance(address(this), address(to)) != 0) {\\n            _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, to, 0));\\n        }\\n\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, to, value));\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVotingEscrow.sol\\\";\\n\\n/**\\n * @title Reward Distributor\\n * @notice Distributes any tokens transferred to the contract (e.g. Protocol rewards and any token emissions) among veBPT\\n * holders proportionally based on a snapshot of the week at which the tokens are sent to the RewardDistributor contract.\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veBPT\\n * holders simply transfer the tokens to the `RewardDistributor` contract and then call `checkpointToken`.\\n */\\ninterface IRewardDistributor {\\n    event TokenCheckpointed(\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 lastCheckpointTimestamp\\n    );\\n    event TokensClaimed(\\n        address user,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 userTokenTimeCursor\\n    );\\n    event TokenAdded(address indexed token);\\n\\n    /**\\n     * @notice Returns the VotingEscrow (veBPT) token contract\\n     */\\n    function getVotingEscrow() external view returns (IVotingEscrow);\\n\\n    /**\\n     * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\n     */\\n    function getTimeCursor() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserTimeCursor(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenTimeCursor(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\n     * @param user - The address of the user to query.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getUserTokenTimeCursor(\\n        address user,\\n        IERC20 token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user's cached balance of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\n     * @param user - The address of the user of which to read the cached balance of.\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\n     */\\n    function getUserBalanceAtTimestamp(\\n        address user,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the cached total supply of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\n     */\\n    function getTotalSupplyAtTimestamp(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the RewardDistributor's cached balance of `token`.\\n     */\\n    function getTokenLastBalance(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of `token` which the RewardDistributor received in the week beginning at `timestamp`.\\n     * @param token - The ERC20 token address to query.\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\n     */\\n    function getTokensDistributedInWeek(\\n        IERC20 token,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    // Depositing\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev Sending tokens directly to the RewardDistributor instead of using `depositTokens` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositTokens` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function depositToken(IERC20 token, uint256 amount) external;\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\n     * See `depositToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\n     * @param amounts - An array of token amounts to deposit.\\n     */\\n    function depositTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    // Checkpointing\\n\\n    /**\\n     * @notice Caches the total supply of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Caches the user's balance of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param user - The address of the user to be checkpointed.\\n     */\\n    function checkpointUser(address user) external;\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev Any `token` balance held by the RewardDistributor above that which is returned by `getTokenLastBalance`\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\n     *\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param token - The ERC20 token address to be checkpointed.\\n     */\\n    function checkpointToken(IERC20 token) external;\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\n     * See `checkpointToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\n     */\\n    function checkpointTokens(IERC20[] calldata tokens) external;\\n\\n    // Claiming\\n\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the RewardDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(\\n        address user,\\n        IERC20[] calldata tokens\\n    ) external returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function epoch() external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function future_admin() external view returns (address);\\n\\n    function apply_smart_wallet_checker() external;\\n\\n    function apply_transfer_ownership() external;\\n\\n    // function balanceOf(address addr, uint256 _t) external view returns (uint256);\\n    function balanceOf(\\n        address user,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    function balanceOfAt(\\n        address addr,\\n        uint256 _block\\n    ) external view returns (uint256);\\n\\n    function checkpoint() external;\\n\\n    function commit_smart_wallet_checker(address addr) external;\\n\\n    function commit_transfer_ownership(address addr) external;\\n\\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function deposit_for(address _addr, uint256 _value) external;\\n\\n    function get_last_user_slope(address addr) external view returns (int128);\\n\\n    function increase_amount(uint256 _value) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function point_history(\\n        uint256 timestamp\\n    ) external view returns (Point memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function totalSupply(uint256 t) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n\\n    function user_point_epoch(address user) external view returns (uint256);\\n\\n    function user_point_history__ts(\\n        address _addr,\\n        uint256 _idx\\n    ) external view returns (uint256);\\n\\n    function user_point_history(\\n        address user,\\n        uint256 timestamp\\n    ) external view returns (Point memory);\\n\\n    function withdraw() external;\\n}\"\r\n    },\r\n    \"contracts/RewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IRewardDistributor} from \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\n/**\\n * @title Reward Distributor\\n * @notice Distributes any tokens transferred to the contract among veBPT holders\\n * proportionally based on a snapshot of the week at which the tokens are sent to the RewardDistributor contract.\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veBPT\\n * holders simply transfer the tokens to the `RewardDistributor` contract and then call `checkpointToken`.\\n */\\ncontract RewardDistributor is\\n    IRewardDistributor,\\n    OptionalOnlyCaller,\\n    ReentrancyGuard\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bool public isInitialized;\\n    IVotingEscrow private _votingEscrow;\\n\\n    uint256 private _startTime;\\n\\n    // Global State\\n    uint256 private _timeCursor;\\n    mapping(uint256 => uint256) private _veSupplyCache;\\n\\n    address public admin;\\n    address[] private _rewardTokens;\\n    mapping(address => bool) public allowedRewardTokens;\\n\\n    /**\\n     * @notice Event emitted when the admin role is transferred\\n     * @param newAdmin The address of the new admin\\n     */\\n    event AdminTransferred(address indexed newAdmin);\\n\\n    // Token State\\n\\n    // `startTime` and `timeCursor` are both timestamps so comfortably fit in a uint64.\\n    // `cachedBalance` will comfortably fit the total supply of any meaningful token.\\n    // Should more than 2^128 tokens be sent to this contract then checkpointing this token will fail until enough\\n    // tokens have been claimed to bring the total balance back below 2^128.\\n    struct TokenState {\\n        uint64 startTime;\\n        uint64 timeCursor;\\n        uint128 cachedBalance;\\n    }\\n\\n    mapping(IERC20 => TokenState) private _tokenState;\\n    mapping(IERC20 => mapping(uint256 => uint256)) private _tokensPerWeek;\\n\\n    // User State\\n\\n    // `startTime` and `timeCursor` are timestamps so will comfortably fit in a uint64.\\n    // For `lastEpochCheckpointed` to overflow would need over 2^128 transactions to the VotingEscrow contract.\\n    struct UserState {\\n        uint64 startTime;\\n        uint64 timeCursor;\\n        uint128 lastEpochCheckpointed;\\n    }\\n\\n    mapping(address => UserState) internal _userState;\\n    mapping(address => mapping(uint256 => uint256))\\n        private _userBalanceAtTimestamp;\\n    mapping(address => mapping(IERC20 => uint256)) private _userTokenTimeCursor;\\n\\n    constructor() EIP712(\\\"RewardDistributor\\\", \\\"1\\\") {}\\n\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        IVotingEscrow votingEscrow,\\n        uint256 startTime,\\n        address admin_\\n    ) external {\\n        require(!isInitialized, \\\"only once\\\");\\n        isInitialized = true;\\n\\n        require (admin_ != address(0), \\\"zero address\\\");\\n        admin = admin_;\\n        \\n        _votingEscrow = votingEscrow;\\n\\n        startTime = _roundDownTimestamp(startTime);\\n        uint256 currentWeek = _roundDownTimestamp(block.timestamp);\\n        require(startTime >= currentWeek, \\\"Cannot start before current week\\\");\\n        if (startTime == currentWeek) {\\n            // We assume that `votingEscrow` has been deployed in a week previous to this one.\\n            // If `votingEscrow` did not have a non-zero supply at the beginning of the current week\\n            // then any tokens which are distributed this week will be lost permanently.\\n            require(\\n                votingEscrow.totalSupply(currentWeek) > 0,\\n                \\\"Zero total supply results in lost tokens\\\"\\n            );\\n        }\\n        _startTime = startTime;\\n        _timeCursor = startTime;\\n    }\\n\\n    /**\\n     * @notice Returns the VotingEscrow (veBPT) token contract\\n     */\\n    function getVotingEscrow()\\n        external\\n        view\\n        override\\n        returns (IVotingEscrow)\\n    {\\n        return _votingEscrow;\\n    }\\n\\n    /**\\n     * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\n     */\\n    function getTimeCursor() external view override returns (uint256) {\\n        return _timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserTimeCursor(\\n        address user\\n    ) external view override returns (uint256) {\\n        return _userState[user].timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenTimeCursor(\\n        IERC20 token\\n    ) external view override returns (uint256) {\\n        return _tokenState[token].timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\n     * @param user - The address of the user to query.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getUserTokenTimeCursor(\\n        address user,\\n        IERC20 token\\n    ) external view override returns (uint256) {\\n        return _getUserTokenTimeCursor(user, token);\\n    }\\n\\n    /**\\n     * @notice Returns the user's cached balance of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\n     * @param user - The address of the user of which to read the cached balance of.\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\n     */\\n    function getUserBalanceAtTimestamp(\\n        address user,\\n        uint256 timestamp\\n    ) external view override returns (uint256) {\\n        return _userBalanceAtTimestamp[user][timestamp];\\n    }\\n\\n    /**\\n     * @notice Returns the cached total supply of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\n     */\\n    function getTotalSupplyAtTimestamp(\\n        uint256 timestamp\\n    ) external view override returns (uint256) {\\n        return _veSupplyCache[timestamp];\\n    }\\n\\n    /**\\n     * @notice Returns the RewardDistributor's cached balance of `token`.\\n     */\\n    function getTokenLastBalance(\\n        IERC20 token\\n    ) external view override returns (uint256) {\\n        return _tokenState[token].cachedBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of `token` which the RewardDistributor received in the week beginning at `timestamp`.\\n     * @param token - The ERC20 token address to query.\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\n     */\\n    function getTokensDistributedInWeek(\\n        IERC20 token,\\n        uint256 timestamp\\n    ) external view override returns (uint256) {\\n        return _tokensPerWeek[token][timestamp];\\n    }\\n\\n    // Depositing\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev Sending tokens directly to the RewardDistributor instead of using `depositToken` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositToken` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function depositToken(\\n        IERC20 token,\\n        uint256 amount\\n    ) external override nonReentrant {\\n        require(allowedRewardTokens[address(token)], \\\"token not allowed\\\");\\n        _checkpointToken(token, false);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        _checkpointToken(token, true);\\n    }\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\n     * See `depositToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\n     * @param amounts - An array of token amounts to deposit.\\n     */\\n    function depositTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external override nonReentrant {\\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\\n\\n        uint256 length = tokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            require(allowedRewardTokens[address(tokens[i])], \\\"token not allowed\\\");\\n            _checkpointToken(tokens[i], false);\\n            tokens[i].safeTransferFrom(msg.sender, address(this), amounts[i]);\\n            _checkpointToken(tokens[i], true);\\n        }\\n    }\\n\\n    // Checkpointing\\n\\n    /**\\n     * @notice Caches the total supply of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     */\\n    function checkpoint() external override nonReentrant {\\n        _checkpointTotalSupply();\\n    }\\n\\n    /**\\n     * @notice Caches the user's balance of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param user - The address of the user to be checkpointed.\\n     */\\n    function checkpointUser(address user) external override nonReentrant {\\n        _checkpointUserBalance(user);\\n    }\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev Any `token` balance held by the RewardDistributor above that which is returned by `getTokenLastBalance`\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\n     *\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param token - The ERC20 token address to be checkpointed.\\n     */\\n    function checkpointToken(IERC20 token) external override nonReentrant {\\n        _checkpointToken(token, true);\\n    }\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\n     * See `checkpointToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\n     */\\n    function checkpointTokens(\\n        IERC20[] calldata tokens\\n    ) external override nonReentrant {\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            _checkpointToken(tokens[i], true);\\n        }\\n    }\\n\\n    // Claiming\\n\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the RewardDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(\\n        address user,\\n        IERC20 token\\n    )\\n        external\\n        override\\n        nonReentrant\\n        optionalOnlyCaller(user)\\n        returns (uint256)\\n    {\\n        _checkpointTotalSupply();\\n        _checkpointUserBalance(user);\\n        _checkpointToken(token, false);\\n\\n        uint256 amount = _claimToken(user, token);\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(\\n        address user,\\n        IERC20[] calldata tokens\\n    )\\n        external\\n        override\\n        nonReentrant\\n        optionalOnlyCaller(user)\\n        returns (uint256[] memory)\\n    {\\n        _checkpointTotalSupply();\\n        _checkpointUserBalance(user);\\n\\n        uint256 tokensLength = tokens.length;\\n        uint256[] memory amounts = new uint256[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            _checkpointToken(tokens[i], false);\\n            amounts[i] = _claimToken(user, tokens[i]);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev It is required that both the global, token and user state have been properly checkpointed\\n     * before calling this function.\\n     */\\n    function _claimToken(\\n        address user,\\n        IERC20 token\\n    ) internal returns (uint256) {\\n        TokenState storage tokenState = _tokenState[token];\\n        uint256 nextUserTokenWeekToClaim = _getUserTokenTimeCursor(user, token);\\n\\n        // The first week which cannot be correctly claimed is the earliest of:\\n        // - A) The global or user time cursor (whichever is earliest), rounded up to the end of the week.\\n        // - B) The token time cursor, rounded down to the beginning of the week.\\n        //\\n        // This prevents the two failure modes:\\n        // - A) A user may claim a week for which we have not processed their balance, resulting in tokens being locked.\\n        // - B) A user may claim a week which then receives more tokens to be distributed. However the user has\\n        //      already claimed for that week so their share of these new tokens are lost.\\n        uint256 firstUnclaimableWeek = Math.min(\\n            _roundUpTimestamp(\\n                Math.min(_timeCursor, _userState[user].timeCursor)\\n            ),\\n            _roundDownTimestamp(tokenState.timeCursor)\\n        );\\n\\n        mapping(uint256 => uint256) storage tokensPerWeek = _tokensPerWeek[\\n            token\\n        ];\\n        mapping(uint256 => uint256)\\n            storage userBalanceAtTimestamp = _userBalanceAtTimestamp[user];\\n\\n        uint256 amount;\\n        for (uint256 i = 0; i < 20; ++i) {\\n            // We clearly cannot claim for `firstUnclaimableWeek` and so we break here.\\n            if (nextUserTokenWeekToClaim >= firstUnclaimableWeek) break;\\n\\n            amount +=\\n                (tokensPerWeek[nextUserTokenWeekToClaim] *\\n                    userBalanceAtTimestamp[nextUserTokenWeekToClaim]) /\\n                _veSupplyCache[nextUserTokenWeekToClaim];\\n            nextUserTokenWeekToClaim += 1 weeks;\\n        }\\n        // Update the stored user-token time cursor to prevent this user claiming this week again.\\n        _userTokenTimeCursor[user][token] = nextUserTokenWeekToClaim;\\n\\n        if (amount > 0) {\\n            // For a token to be claimable it must have been added to the cached balance so this is safe.\\n            tokenState.cachedBalance = uint128(\\n                tokenState.cachedBalance - amount\\n            );\\n            token.safeTransfer(user, amount);\\n            emit TokensClaimed(user, token, amount, nextUserTokenWeekToClaim);\\n        }\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Calculate the amount of `token` to be distributed to `_votingEscrow` holders since the last checkpoint.\\n     */\\n    function _checkpointToken(IERC20 token, bool force) internal {\\n        TokenState storage tokenState = _tokenState[token];\\n        uint256 lastTokenTime = tokenState.timeCursor;\\n        uint256 timeSinceLastCheckpoint;\\n        if (lastTokenTime == 0) {\\n            // If it's the first time we're checkpointing this token then start distributing from now.\\n            // Also mark at which timestamp users should start attempts to claim this token from.\\n            lastTokenTime = block.timestamp;\\n            tokenState.startTime = uint64(_roundDownTimestamp(block.timestamp));\\n\\n            // Prevent someone from assigning tokens to an inaccessible week.\\n            require(\\n                block.timestamp > _startTime,\\n                \\\"Reward distribution has not started yet\\\"\\n            );\\n        } else {\\n            timeSinceLastCheckpoint = block.timestamp - lastTokenTime;\\n\\n            if (!force) {\\n                // Checkpointing N times within a single week is completely equivalent to checkpointing once at the end.\\n                // We then want to get as close as possible to a single checkpoint every Wed 23:59 UTC to save gas.\\n\\n                // We then skip checkpointing if we're in the same week as the previous checkpoint.\\n                bool alreadyCheckpointedThisWeek = _roundDownTimestamp(\\n                    block.timestamp\\n                ) == _roundDownTimestamp(lastTokenTime);\\n                // However we want to ensure that all of this week's rewards are assigned to the current week without\\n                // overspilling into the next week. To mitigate this, we checkpoint if we're near the end of the week.\\n                bool nearingEndOfWeek = _roundUpTimestamp(block.timestamp) -\\n                    block.timestamp <\\n                    1 days;\\n\\n                // This ensures that we checkpoint once at the beginning of the week and again for each user interaction\\n                // towards the end of the week to give an accurate final reading of the balance.\\n                if (alreadyCheckpointedThisWeek && !nearingEndOfWeek) {\\n                    return;\\n                }\\n            }\\n        }\\n\\n        tokenState.timeCursor = uint64(block.timestamp);\\n\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        uint256 newTokensToDistribute = tokenBalance.sub(\\n            tokenState.cachedBalance\\n        );\\n        if (newTokensToDistribute == 0) return;\\n        require(\\n            tokenBalance <= type(uint128).max,\\n            \\\"Maximum token balance exceeded\\\"\\n        );\\n        tokenState.cachedBalance = uint128(tokenBalance);\\n\\n        uint256 firstIncompleteWeek = _roundDownTimestamp(lastTokenTime);\\n        uint256 nextWeek = 0;\\n\\n        // Distribute `newTokensToDistribute` evenly across the time period from `lastTokenTime` to now.\\n        // These tokens are assigned to weeks proportionally to how much of this period falls into each week.\\n        mapping(uint256 => uint256) storage tokensPerWeek = _tokensPerWeek[\\n            token\\n        ];\\n        for (uint256 i = 0; i < 20; ++i) {\\n            // This is safe as we're incrementing a timestamp.\\n            nextWeek = firstIncompleteWeek + 1 weeks;\\n            if (block.timestamp < nextWeek) {\\n                // `firstIncompleteWeek` is now the beginning of the current week, i.e. this is the final iteration.\\n                if (\\n                    timeSinceLastCheckpoint == 0 &&\\n                    block.timestamp == lastTokenTime\\n                ) {\\n                    tokensPerWeek[firstIncompleteWeek] += newTokensToDistribute;\\n                } else {\\n                    // block.timestamp >= lastTokenTime by definition.\\n                    tokensPerWeek[firstIncompleteWeek] +=\\n                        (newTokensToDistribute *\\n                            (block.timestamp - lastTokenTime)) /\\n                        timeSinceLastCheckpoint;\\n                }\\n                // As we've caught up to the present then we should now break.\\n                break;\\n            } else {\\n                // We've gone a full week or more without checkpointing so need to distribute tokens to previous weeks.\\n                if (timeSinceLastCheckpoint == 0 && nextWeek == lastTokenTime) {\\n                    // It shouldn't be possible to enter this block\\n                    tokensPerWeek[firstIncompleteWeek] += newTokensToDistribute;\\n                } else {\\n                    // nextWeek > lastTokenTime by definition.\\n                    tokensPerWeek[firstIncompleteWeek] +=\\n                        (newTokensToDistribute * (nextWeek - lastTokenTime)) /\\n                        timeSinceLastCheckpoint;\\n                }\\n            }\\n\\n            // We've now \\\"checkpointed\\\" up to the beginning of next week so must update timestamps appropriately.\\n            lastTokenTime = nextWeek;\\n            firstIncompleteWeek = nextWeek;\\n        }\\n\\n        emit TokenCheckpointed(token, newTokensToDistribute, lastTokenTime);\\n    }\\n\\n    /**\\n     * @dev Cache the `user`'s balance of `_votingEscrow` at the beginning of each new week\\n     */\\n    function _checkpointUserBalance(address user) internal {\\n        uint256 maxUserEpoch = _votingEscrow.user_point_epoch(user);\\n\\n        // If user has no epochs then they have never locked veBPT.\\n        // They clearly will not then receive rewards.\\n        if (maxUserEpoch == 0) return;\\n\\n        UserState storage userState = _userState[user];\\n\\n        // `nextWeekToCheckpoint` represents the timestamp of the beginning of the first week\\n        // which we haven't checkpointed the user's VotingEscrow balance yet.\\n        uint256 nextWeekToCheckpoint = userState.timeCursor;\\n\\n        uint256 userEpoch;\\n        if (nextWeekToCheckpoint == 0) {\\n            // First checkpoint for user so need to do the initial binary search\\n            userEpoch = _findTimestampUserEpoch(\\n                user,\\n                _startTime,\\n                0,\\n                maxUserEpoch\\n            );\\n        } else {\\n            if (nextWeekToCheckpoint >= block.timestamp) {\\n                // User has checkpointed the current week already so perform early return.\\n                // This prevents a user from processing epochs created later in this week, however this is not an issue\\n                // as if a significant number of these builds up then the user will skip past them with a binary search.\\n                return;\\n            }\\n\\n            // Otherwise use the value saved from last time\\n            userEpoch = userState.lastEpochCheckpointed;\\n\\n            // This optimizes a scenario common for power users, which have frequent `VotingEscrow` interactions in\\n            // the same week. We assume that any such user is also claiming rewards every week, and so we only perform\\n            // a binary search here rather than integrating it into the main search algorithm, effectively skipping\\n            // most of the week's irrelevant checkpoints.\\n            // The slight tradeoff is that users who have multiple infrequent `VotingEscrow` interactions and also don't\\n            // claim frequently will also perform the binary search, despite it not leading to gas savings.\\n            if (maxUserEpoch - userEpoch > 20) {\\n                userEpoch = _findTimestampUserEpoch(\\n                    user,\\n                    nextWeekToCheckpoint,\\n                    userEpoch,\\n                    maxUserEpoch\\n                );\\n            }\\n        }\\n\\n        // Epoch 0 is always empty so bump onto the next one so that we start on a valid epoch.\\n        if (userEpoch == 0) {\\n            userEpoch = 1;\\n        }\\n\\n        IVotingEscrow.Point memory nextUserPoint = _votingEscrow\\n            .user_point_history(user, userEpoch);\\n\\n        // If this is the first checkpoint for the user, calculate the first week they're eligible for.\\n        // i.e. the timestamp of the first Thursday after they locked.\\n        // If this is earlier then the first distribution then fast forward to then.\\n        if (nextWeekToCheckpoint == 0) {\\n            // Disallow checkpointing before `startTime`.\\n            require(\\n                block.timestamp > _startTime,\\n                \\\"Reward distribution has not started yet\\\"\\n            );\\n            nextWeekToCheckpoint = Math.max(\\n                _startTime,\\n                _roundUpTimestamp(nextUserPoint.ts)\\n            );\\n            userState.startTime = uint64(nextWeekToCheckpoint);\\n        }\\n\\n        // It's safe to increment `userEpoch` and `nextWeekToCheckpoint` in this loop as epochs and timestamps\\n        // are always much smaller than 2^256 and are being incremented by small values.\\n        IVotingEscrow.Point memory currentUserPoint;\\n        for (uint256 i = 0; i < 50; ++i) {\\n            if (\\n                nextWeekToCheckpoint >= nextUserPoint.ts &&\\n                userEpoch <= maxUserEpoch\\n            ) {\\n                // The week being considered is contained in a user epoch after that described by `currentUserPoint`.\\n                // We then shift `nextUserPoint` into `currentUserPoint` and query the Point for the next user epoch.\\n                // We do this in order to step though epochs until we find the first epoch starting after\\n                // `nextWeekToCheckpoint`, making the previous epoch the one that contains `nextWeekToCheckpoint`.\\n                userEpoch += 1;\\n                currentUserPoint = nextUserPoint;\\n                if (userEpoch > maxUserEpoch) {\\n                    nextUserPoint = IVotingEscrow.Point(0, 0, 0, 0);\\n                } else {\\n                    nextUserPoint = _votingEscrow.user_point_history(\\n                        user,\\n                        userEpoch\\n                    );\\n                }\\n            } else {\\n                // The week being considered lies inside the user epoch described by `oldUserPoint`\\n                // we can then use it to calculate the user's balance at the beginning of the week.\\n                if (nextWeekToCheckpoint >= block.timestamp) {\\n                    // Break if we're trying to cache the user's balance at a timestamp in the future.\\n                    // We only perform this check here to ensure that we can still process checkpoints created\\n                    // in the current week.\\n                    break;\\n                }\\n\\n                int128 dt = int128(nextWeekToCheckpoint - currentUserPoint.ts);\\n                uint256 userBalance = currentUserPoint.bias >\\n                    currentUserPoint.slope * dt\\n                    ? uint256(\\n                        currentUserPoint.bias - currentUserPoint.slope * dt\\n                    )\\n                    : 0;\\n\\n                // User's lock has expired and they haven't relocked yet.\\n                if (userBalance == 0 && userEpoch > maxUserEpoch) {\\n                    nextWeekToCheckpoint = _roundUpTimestamp(block.timestamp);\\n                    break;\\n                }\\n\\n                // User had a nonzero lock and so is eligible to collect rewards.\\n                _userBalanceAtTimestamp[user][\\n                    nextWeekToCheckpoint\\n                ] = userBalance;\\n\\n                nextWeekToCheckpoint += 1 weeks;\\n            }\\n        }\\n\\n        // We subtract off 1 from the userEpoch to step back once so that on the next attempt to checkpoint\\n        // the current `currentUserPoint` will be loaded as `nextUserPoint`. This ensures that we can't skip over the\\n        // user epoch containing `nextWeekToCheckpoint`.\\n        // userEpoch > 0 so this is safe.\\n        userState.lastEpochCheckpointed = uint64(userEpoch - 1);\\n        userState.timeCursor = uint64(nextWeekToCheckpoint);\\n    }\\n\\n    /**\\n     * @dev Cache the totalSupply of VotingEscrow token at the beginning of each new week\\n     */\\n    function _checkpointTotalSupply() internal {\\n        uint256 nextWeekToCheckpoint = _timeCursor;\\n        uint256 weekStart = _roundDownTimestamp(block.timestamp);\\n\\n        // We expect `timeCursor == weekStart + 1 weeks` when fully up to date.\\n        if (nextWeekToCheckpoint > weekStart || weekStart == block.timestamp) {\\n            // We've already checkpointed up to this week so perform early return\\n            return;\\n        }\\n\\n        _votingEscrow.checkpoint();\\n\\n        // Step through the each week and cache the total supply at beginning of week on this contract\\n        for (uint256 i = 0; i < 20; ++i) {\\n            if (nextWeekToCheckpoint > weekStart) break;\\n\\n            _veSupplyCache[nextWeekToCheckpoint] = _votingEscrow.totalSupply(\\n                nextWeekToCheckpoint\\n            );\\n\\n            // This is safe as we're incrementing a timestamp\\n            nextWeekToCheckpoint += 1 weeks;\\n        }\\n        // Update state to the end of the current week (`weekStart` + 1 weeks)\\n        _timeCursor = nextWeekToCheckpoint;\\n    }\\n\\n    // Helper functions\\n\\n    /**\\n     * @dev Wrapper around `_userTokenTimeCursor` which returns the start timestamp for `token`\\n     * if `user` has not attempted to interact with it previously.\\n     */\\n    function _getUserTokenTimeCursor(\\n        address user,\\n        IERC20 token\\n    ) internal view returns (uint256) {\\n        uint256 userTimeCursor = _userTokenTimeCursor[user][token];\\n        if (userTimeCursor > 0) return userTimeCursor;\\n        // This is the first time that the user has interacted with this token.\\n        // We then start from the latest out of either when `user` first locked veBPT or `token` was first checkpointed.\\n        return\\n            Math.max(_userState[user].startTime, _tokenState[token].startTime);\\n    }\\n\\n    /**\\n     * @dev Return the user epoch number for `user` corresponding to the provided `timestamp`\\n     */\\n    function _findTimestampUserEpoch(\\n        address user,\\n        uint256 timestamp,\\n        uint256 minUserEpoch,\\n        uint256 maxUserEpoch\\n    ) internal view returns (uint256) {\\n        uint256 min = minUserEpoch;\\n        uint256 max = maxUserEpoch;\\n\\n        // Perform binary search through epochs to find epoch containing `timestamp`\\n        for (uint256 i = 0; i < 128; ++i) {\\n            if (min >= max) break;\\n\\n            // Algorithm assumes that inputs are less than 2^128 so this operation is safe.\\n            // +2 avoids getting stuck in min == mid < max\\n            uint256 mid = (min + max + 2) / 2;\\n            IVotingEscrow.Point memory pt = _votingEscrow\\n                .user_point_history(user, mid);\\n            if (pt.ts <= timestamp) {\\n                min = mid;\\n            } else {\\n                // max > min so this is safe.\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Rounds the provided timestamp down to the beginning of the previous week (Thurs 00:00 UTC)\\n     */\\n    function _roundDownTimestamp(\\n        uint256 timestamp\\n    ) private pure returns (uint256) {\\n        // Division by zero or overflows are impossible here.\\n        return (timestamp / 1 weeks) * 1 weeks;\\n    }\\n\\n    /**\\n     * @dev Rounds the provided timestamp up to the beginning of the next week (Thurs 00:00 UTC)\\n     */\\n    function _roundUpTimestamp(\\n        uint256 timestamp\\n    ) private pure returns (uint256) {\\n        // Overflows are impossible here for all realistic inputs.\\n        return _roundDownTimestamp(timestamp + 1 weeks - 1);\\n    }\\n\\n    function addAllowedRewardTokens(address[] calldata tokens) external onlyAdmin {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(!allowedRewardTokens[tokens[i]], \\\"already exist\\\");\\n            allowedRewardTokens[tokens[i]] = true;\\n            _rewardTokens.push(tokens[i]);\\n            emit TokenAdded(tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the list of allowed reward tokens\\n     * @return An array of addresses of the allowed reward tokens\\n     */\\n    function getAllowedRewardTokens() external view returns (address[] memory) {\\n        return _rewardTokens;\\n    }\\n\\n    /**\\n     * @notice Transfers the admin role to a new address\\n     * @param newAdmin The address of the new admin\\n     */\\n    function transferAdmin(address newAdmin) external onlyAdmin {\\n        require (newAdmin != address(0), \\\"zero address\\\");\\n        admin = newAdmin;\\n        emit AdminTransferred(newAdmin);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OnlyCallerOptIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCheckpointTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokenCheckpointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTokenTimeCursor\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"addAllowedRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRewardTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"checkpointTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkpointUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTokensDistributedInWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTotalSupplyAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getUserBalanceAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserTokenTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"votingEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOnlyCallerEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOnlyCallerCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setOnlyCallerCheckWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardDistributor", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}