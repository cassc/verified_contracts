{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface ISplitMain {\r\n    function getHash(address split) external view returns (bytes32);\r\n}\r\n\r\ncontract VerifySplitHash {\r\n    address constant SPLIT_MAIN_ADDRESS = 0x2ed6c4B5dA6378c7897AC67Ba9e43102Feb694EE;\r\n\r\n    function verifySplitHash(\r\n        address splitAddress,\r\n        address[] memory accounts\r\n    ) external view returns (string memory) {\r\n        ISplitMain splitMain = ISplitMain(SPLIT_MAIN_ADDRESS);\r\n        bytes32 splitHash = splitMain.getHash(splitAddress);\r\n\r\n        uint32[] memory percentAllocations = new uint32[](7);\r\n        percentAllocations[0] = 142857;\r\n        percentAllocations[1] = 142857;\r\n        percentAllocations[2] = 142857;\r\n        percentAllocations[3] = 142857;\r\n        percentAllocations[4] = 142857;\r\n        percentAllocations[5] = 142857;\r\n        percentAllocations[6] = 142858;\r\n\r\n        uint32 distributorFee = 0;\r\n\r\n        bytes32 computedHash = keccak256(\r\n            abi.encodePacked(accounts, percentAllocations, distributorFee)\r\n        );\r\n\r\n        if (computedHash == splitHash) {\r\n            return \"(^_^) Hash matches! The data you provided matches the splitter contract exactly!\";\r\n        } else {\r\n            return \"(>_<) Hash does not match. The data input is different to the splitter contract.\";\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"splitAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"verifySplitHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VerifySplitHash", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca7289f37a564013f2f962721381e93ee12b9dae3735735c9c721b6b98da3808"}