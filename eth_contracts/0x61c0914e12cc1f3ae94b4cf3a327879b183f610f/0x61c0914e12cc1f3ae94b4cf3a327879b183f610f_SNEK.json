{"SourceCode": "// TG: https://t.me/snekgames\r\n// Twitter: https://twitter.com/snek_games\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract SNEK is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _buyerMap;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping(address => bool) internal _isAdmin;\r\n    mapping(address => bool) private _isBot;\r\n\r\n    address payable private _taxWallet;\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 private _initialBuyTax = 20;\r\n    uint256 private _initialSellTax = 30;\r\n    uint256 public _finalTax = 4;\r\n\r\n    uint256 private _blockAtLaunch;\r\n    uint256 private _blockRemoveLimits = 20;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 1_000_000_000 * 10 ** _decimals;\r\n    string private constant _name = unicode\"SNEK\";\r\n    string private constant _symbol = unicode\"SNEK\";\r\n    uint256 public _maxWalletSize = (_tTotal * 50) / 10000; // 0.5%\r\n    uint256 public _maxLittleWalletSize = (_tTotal * 100) / 10000; // 1%\r\n    uint256 private swapThreshold = (_tTotal * 100) / 10000; // 1%\r\n\r\n    IUniswapV2Router02 private router;\r\n    address public pair;\r\n    bool public tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address[] memory addresses) {\r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _isAdmin[addresses[i]] = true;\r\n        }\r\n        _isAdmin[owner()] = true;\r\n\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Launch limits functions\r\n\r\n    /** @dev Remove wallet cap.\r\n     * @notice Can only be called by the current owner.\r\n     */\r\n    function removeLimits() external onlyOwner {\r\n        _maxWalletSize = _tTotal;\r\n    }\r\n\r\n    /** @dev Enable trading.\r\n     * @notice Can only be called by the current owner.\r\n     * @notice Can only be called once.\r\n     */\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        _blockAtLaunch = block.number;\r\n    }\r\n\r\n    function manageBot(address account, bool a) external onlyOwner {\r\n        _isBot[account] = a;\r\n    }\r\n\r\n    // Transfer functions\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        require(!_isBot[msg.sender], \"You are a bot\");\r\n        if (msg.sender == pair) {\r\n            return _transferFrom(msg.sender, recipient, amount);\r\n        } else {\r\n            return _basicTransfer(msg.sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        require(!_isBot[msg.sender], \"You are a bot\");\r\n        require(\r\n            _allowances[sender][_msgSender()] >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _transferFrom(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(\r\n            _isExcludedFromFee[sender] ||\r\n                _isExcludedFromFee[recipient] ||\r\n                _isAdmin[sender] ||\r\n                _isAdmin[recipient] ||\r\n                tradingOpen,\r\n            \"Not authorized to trade yet\"\r\n        );\r\n\r\n        uint256 blockSinceLaunch = block.number - _blockAtLaunch;\r\n        uint256 _limit = _maxWalletSize;\r\n\r\n        // Checks max transaction limit\r\n        if (sender != owner() && recipient != owner() && recipient != DEAD) {\r\n            if (recipient != pair) {\r\n                if (blockSinceLaunch <= _blockRemoveLimits) {\r\n                    _limit = _maxLittleWalletSize;\r\n                } else if (\r\n                    blockSinceLaunch > _blockRemoveLimits && _blockAtLaunch != 0\r\n                ) {\r\n                    _limit = _maxWalletSize;\r\n                }\r\n                require(\r\n                    _isExcludedFromFee[recipient] ||\r\n                        (_balances[recipient] + amount <= _limit),\r\n                    \"Transfer amount exceeds the MaxWallet size.\"\r\n                );\r\n            }\r\n        }\r\n\r\n        //shouldSwapBack\r\n        if (shouldSwapBack() && recipient == pair) {\r\n            swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        //Check if should Take Fee\r\n        uint256 amountReceived = (!shouldTakeFee(sender) ||\r\n            !shouldTakeFee(recipient))\r\n            ? amount\r\n            : takeFee(sender, recipient, amount);\r\n        _balances[recipient] = _balances[recipient] + (amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + (amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !_isExcludedFromFee[sender];\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n        uint256 blockSinceLaunch = block.number - _blockAtLaunch;\r\n        uint256 tax;\r\n\r\n        if (blockSinceLaunch >= _blockRemoveLimits) {\r\n            tax = _finalTax;\r\n        } else {\r\n            if (sender == pair && recipient != pair) {\r\n                tax = _initialBuyTax;\r\n            } else if (sender != pair && recipient == pair) {\r\n                tax = _initialSellTax;\r\n            }\r\n        }\r\n\r\n        feeAmount = (amount * tax) / 100;\r\n\r\n        if (feeAmount > 0) {\r\n            _balances[address(this)] += feeAmount;\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n        uint256 amountToSwap = swapThreshold;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), amountToSwap);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETHDev = address(this).balance;\r\n\r\n        if (amountETHDev > 0) {\r\n            bool tmpSuccess;\r\n            (tmpSuccess, ) = payable(_taxWallet).call{\r\n                value: amountETHDev,\r\n                gas: 30000\r\n            }(\"\");\r\n        }\r\n    }\r\n\r\n    // Threshold management functions\r\n\r\n    /** @dev Set a new threshold to trigger swapBack.\r\n     * @notice Can only be called by the current owner.\r\n     */\r\n    function setSwapThreshold(uint256 newTax) external onlyOwner {\r\n        swapThreshold = newTax;\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_finalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxLittleWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"manageBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SNEK", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000015e4381c0375e4c638b7da15bc751e4443ad95a500000000000000000000000060036d94f759c8aa6812428c315949cc33956e970000000000000000000000004f9932d8945c9ef345f6495eb417bae0e9268d69000000000000000000000000b81785ea09b09f7961e5cbac19e4f9e1daeba364000000000000000000000000732422a4afde3dae61657f0731ac1101b061918b00000000000000000000000056dac66db126d5ad9aba4422717d68ac5774f1b8000000000000000000000000aa61a58830996a2b54902bac0913641ccd3628280000000000000000000000005e2d4dcbdc864afa6094a6b93e2b6813fe3d560d000000000000000000000000a45b31458b378c9955c7ab43371b6767042d03f40000000000000000000000004d9551e7efefe9fe8982e27b40c90867a6e01cb500000000000000000000000026a8adaef87bbb9eaa0078f9ba99c55a8d8ad2ef000000000000000000000000b27b8a3dd2fecde8c0c8bf44d22c8a98ec062254000000000000000000000000f63ac5bb60e82b93576547215077938387cfbcc1000000000000000000000000bfe4d3bc72bc52709a9f65ebc59a5fe49f61b335000000000000000000000000de260bc3a661f58248dac0a023abfbd4349549d1000000000000000000000000ca117fed9e002e5da24afb303e7d7cfb479cdf1a000000000000000000000000cceb10f787e4198d32b9f46eb7ca78130c49044f000000000000000000000000060b4ce99e437749f6bfb737646b413b01269c210000000000000000000000006c9b107336ca7dd7bcb40662b76fa78aefff6254000000000000000000000000fdc27a55425718097e61924c2a604b5f694e2b8b000000000000000000000000d39564af0e975bdad2f84fa9c17253f8245474b7000000000000000000000000386f2f729bb540bc20e5a61303cf5b01346180f0000000000000000000000000f68663b77e193b8e1570fefe0aac8c7c68d9ac34000000000000000000000000b0c1ea2701ea0beba9f173c664d635f3105663cd000000000000000000000000cc731095cd449eabe6b02a313d78fd65f266cc290000000000000000000000004f72a2b6620c4e12278b0dcd14a1a30dd3527b04000000000000000000000000b81785ea09b09f7961e5cbac19e4f9e1daeba364000000000000000000000000952785a2e4426caaa82e4b3c0a1a8f02831a8016000000000000000000000000a3c41882e1cc4a3465f682fe3f3939cdff363551000000000000000000000000051f56300648d2da3375aee4c5994ce0cdb2e2fd000000000000000000000000a3bb3f1de6e76588ecb82be1d87df793d1e3bb970000000000000000000000006cbb7e256390063b82608853ed9b8c43464d28a30000000000000000000000000d2f0b80b440eed55a176e78fc3da12d4cabe2ad000000000000000000000000ccdedb5f3116084a58ffb29d5046188a0a1d896c0000000000000000000000007f74efaadac28857f115de5ba94970cdba97b2490000000000000000000000005adb1b7d36ec7636bae2b2d0f4bacd131e7857f6000000000000000000000000112a6efa0b325a06fb3b3f46d79a43b8375495a4000000000000000000000000163ad1c302420c18ad934d70df6485707bbad8c2000000000000000000000000275383b20f0437dac88f50652e5752e0417e307e000000000000000000000000383d6da40eeb04b58c774ad8c0ffea0b07bea4690000000000000000000000001ee78718026c1e10af3ef9f29164a6d51320631e000000000000000000000000f344c77bc898cc5855c337ad58da74920eafb18b000000000000000000000000929b8aec1084fac2b6ca1239c82e5fe78dc79d2b000000000000000000000000cfe48281f044f33833052cacf927ca2292542ff300000000000000000000000045d0b5ed66a7e29e9dcd91fb678c391cae383072000000000000000000000000751e555ab9ac54d6c154fe5e7b0ee8fd5454d2ed00000000000000000000000087a3f8d25e98d806011b2e4b43cfb191eed935200000000000000000000000004d7801ad31ce87789b0e43e47ea6629a675460ab0000000000000000000000002f7ec909952668930968d581006b1ac60430c33d0000000000000000000000005533b01232c519793027ea05ca7ad9e6382bda7b000000000000000000000000ab40182d00e3a721ebb18445edb3364df2ba142300000000000000000000000060ed4de4777f3ce591ae11ee5200864da6207fe900000000000000000000000075908185fd5d70e3623c250a3cf02108e3ae65ed0000000000000000000000009d69eec37cbfcb4ccac8621140fe1754f25a205d00000000000000000000000077ce7152ddbd65b230813225264cb00485249a4d00000000000000000000000006ec2935db24cbd174fdf5b37e4c074eacee0cf8000000000000000000000000509a6fb1d88d2bdabe701904d96a304e53cced2a0000000000000000000000001bf86c0bd2227e912047aab9e996e422622b008e0000000000000000000000000cab28835c5411e07a58128847d2cf34eb3565a8000000000000000000000000269e2ce676b8fef26200badc12625c1fe8090b9e000000000000000000000000da86a4d262631ed5f3de2010cf33eb548b13fc700000000000000000000000001ed07cef8eb64f80e444580204796bfa360ded45000000000000000000000000ce31780d4414aa80ce6dad13f5330c18ea5518100000000000000000000000004e0383182c5947a7a105c15f2f05812487971692000000000000000000000000f17013e13f8080d6051ccce70002eb83e2296ec50000000000000000000000009dd51107f23fdb3784556f5a3697eed9aab1483d000000000000000000000000e52384484c2f8b52c1394fd6ec46083e54c4e09b000000000000000000000000fc42ae463e40fa4586ab4706dd35ec915fe4702d00000000000000000000000047df7763261a381a766387bdda695941225bfde1000000000000000000000000d9f8e7295753cbfb0e11b5a4e0bb8fa6c3a985060000000000000000000000006c879cc71ed3801d513e1d7db151b2c08899ec590000000000000000000000009672ac6c900cad76b81a5b7faa290f3509c2d2000000000000000000000000000862852ad4164191aa02edce36c2e1b577378a4400000000000000000000000089d4feb982354fd8e6eaa241ea39d91a599cb221000000000000000000000000dd14a6299aa69a2beff7c656c0197e96c08010f8000000000000000000000000c2691be6786734b81cd27af20f3d74e73ac449e500000000000000000000000056778e8e29790c59bc00e5be8afbe026e7384cbf000000000000000000000000715282f022fac7cfb8217bf05e1d760f0f64782d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4cb9f600da2f0eb83801aa57d64ca1ac0b6bcc58e78093a586f9e6c69a5192e9"}