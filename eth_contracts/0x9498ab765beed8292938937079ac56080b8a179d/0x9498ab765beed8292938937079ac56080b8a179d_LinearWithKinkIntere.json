{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/common/CommonEventsAndErrors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (common/CommonEventsAndErrors.sol)\\n\\n/// @notice A collection of common errors thrown within the Temple contracts\\nlibrary CommonEventsAndErrors {\\n    error InsufficientBalance(address token, uint256 required, uint256 balance);\\n    error InvalidParam();\\n    error InvalidAddress();\\n    error InvalidAccess();\\n    error InvalidAmount(address token, uint256 amount);\\n    error ExpectedNonZero();\\n    error Unimplemented();\\n    event TokenRecovered(address indexed to, address indexed token, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/access/ITempleElevatedAccess.sol)\\n\\n/**\\n * @notice Inherit to add Executor and Rescuer roles for DAO elevated access.\\n */ \\ninterface ITempleElevatedAccess {\\n    event ExplicitAccessSet(address indexed account, bytes4 indexed fnSelector, bool indexed value);\\n    event RescueModeSet(bool indexed value);\\n\\n    event NewRescuerProposed(address indexed oldRescuer, address indexed oldProposedRescuer, address indexed newProposedRescuer);\\n    event NewRescuerAccepted(address indexed oldRescuer, address indexed newRescuer);\\n\\n    event NewExecutorProposed(address indexed oldExecutor, address indexed oldProposedExecutor, address indexed newProposedExecutor);\\n    event NewExecutorAccepted(address indexed oldExecutor, address indexed newExecutor);\\n\\n    struct ExplicitAccess {\\n        bytes4 fnSelector;\\n        bool allowed;\\n    }\\n\\n    /**\\n     * @notice A set of addresses which are approved to execute emergency operations.\\n     */ \\n    function rescuer() external returns (address);\\n\\n    /**\\n     * @notice A set of addresses which are approved to execute normal operations on behalf of the DAO.\\n     */ \\n    function executor() external returns (address);\\n\\n    /**\\n     * @notice Explicit approval for an address to execute a function.\\n     * allowedCaller => function selector => true/false\\n     */\\n    function explicitFunctionAccess(address contractAddr, bytes4 functionSelector) external returns (bool);\\n\\n    /**\\n     * @notice Under normal circumstances, rescuers don't have access to admin/operational functions.\\n     * However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\\n     */\\n    function inRescueMode() external returns (bool);\\n    \\n    /**\\n     * @notice Set the contract into or out of rescue mode.\\n     * Only the rescuers or executors are allowed to set.\\n     */\\n    function setRescueMode(bool value) external;\\n\\n    /**\\n     * @notice Proposes a new Rescuer.\\n     * Can only be called by the current rescuer.\\n     */\\n    function proposeNewRescuer(address account) external;\\n\\n    /**\\n     * @notice Caller accepts the role as new Rescuer.\\n     * Can only be called by the proposed rescuer\\n     */\\n    function acceptRescuer() external;\\n\\n    /**\\n     * @notice Proposes a new Executor.\\n     * Can only be called by the current executor or resucer (if in resuce mode)\\n     */\\n    function proposeNewExecutor(address account) external;\\n\\n    /**\\n     * @notice Caller accepts the role as new Executor.\\n     * Can only be called by the proposed executor\\n     */\\n    function acceptExecutor() external;\\n\\n    /**\\n     * @notice Grant `allowedCaller` the rights to call the function selectors in the access list.\\n     * @dev fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\\n     */\\n    function setExplicitAccess(address allowedCaller, ExplicitAccess[] calldata access) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/interestRate/IInterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/interestRate/IInterestRateModel.sol)\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current interest rate based on a utilization ratio\\n     * @param utilizationRatio The utilization ratio scaled to `PRECISION`\\n     * @return interestRate The interest rate (scaled by PRECISION). 0.05e18 == 5%\\n     */\\n    function calculateInterestRate(\\n        uint256 utilizationRatio\\n    ) external view returns (uint96 interestRate);\\n}\"\r\n    },\r\n    \"contracts/v2/access/TempleElevatedAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/access/TempleElevatedAccess.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\nimport { CommonEventsAndErrors } from \\\"contracts/common/CommonEventsAndErrors.sol\\\";\\n\\n/**\\n * @notice Inherit to add Executor and Rescuer roles for DAO elevated access.\\n */ \\nabstract contract TempleElevatedAccess is ITempleElevatedAccess {\\n    /**\\n     * @notice The address which is approved to execute emergency operations.\\n     */ \\n    address public override rescuer;\\n\\n    /**\\n     * @notice The address which is approved to execute normal operations on behalf of the DAO.\\n     */ \\n    address public override executor;\\n\\n    /**\\n     * @notice Explicit approval for an address to execute a function.\\n     * allowedCaller => function selector => true/false\\n     */\\n    mapping(address => mapping(bytes4 => bool)) public override explicitFunctionAccess;\\n\\n    /**\\n     * @notice Under normal circumstances, rescuers don't have access to admin/operational functions.\\n     * However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\\n     */\\n    bool public override inRescueMode;\\n\\n    /// @dev Track proposed rescuer/executor\\n    address private _proposedNewRescuer;\\n    address private _proposedNewExecutor;\\n\\n    constructor(address initialRescuer, address initialExecutor) {\\n        if (initialRescuer == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (initialExecutor == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (initialExecutor == initialRescuer) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        rescuer = initialRescuer;\\n        executor = initialExecutor;\\n    }\\n\\n    /**\\n     * @notice Set the contract into or out of rescue mode.\\n     * Only the rescuers are allowed to set.\\n     */\\n    function setRescueMode(bool value) external override {\\n        if (msg.sender != rescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        emit RescueModeSet(value);\\n        inRescueMode = value;\\n    }\\n\\n    /**\\n     * @notice Proposes a new Rescuer.\\n     * Can only be called by the current rescuer.\\n     */\\n    function proposeNewRescuer(address account) external override {\\n        if (msg.sender != rescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        if (account == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        emit NewRescuerProposed(msg.sender, _proposedNewRescuer, account);\\n        _proposedNewRescuer = account;\\n    }\\n\\n    /**\\n     * @notice Caller accepts the role as new Rescuer.\\n     * Can only be called by the proposed rescuer\\n     */\\n    function acceptRescuer() external override {\\n        if (msg.sender != _proposedNewRescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        if (msg.sender == executor) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        emit NewRescuerAccepted(rescuer, msg.sender);\\n        rescuer = msg.sender;\\n        delete _proposedNewRescuer;\\n    }\\n\\n    /**\\n     * @notice Proposes a new Executor.\\n     * Can only be called by the current executor or rescuer (if in resuce mode)\\n     */\\n    function proposeNewExecutor(address account) external override onlyElevatedAccess {\\n        if (account == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        emit NewExecutorProposed(executor, _proposedNewExecutor, account);\\n        _proposedNewExecutor = account;\\n    }\\n\\n    /**\\n     * @notice Caller accepts the role as new Executor.\\n     * Can only be called by the proposed executor\\n     */\\n    function acceptExecutor() external override {\\n        if (msg.sender != _proposedNewExecutor) revert CommonEventsAndErrors.InvalidAccess();\\n        if (msg.sender == rescuer) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        emit NewExecutorAccepted(executor, msg.sender);\\n        executor = msg.sender;\\n        delete _proposedNewExecutor;\\n    }\\n\\n    /**\\n     * @notice Grant `allowedCaller` the rights to call the function selectors in the access list.\\n     * @dev fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\\n     */\\n    function setExplicitAccess(address allowedCaller, ExplicitAccess[] calldata access) external override onlyElevatedAccess {\\n        if (allowedCaller == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        uint256 _length = access.length;\\n        ExplicitAccess memory _access;\\n        for (uint256 i; i < _length; ++i) {\\n            _access = access[i];\\n            emit ExplicitAccessSet(allowedCaller, _access.fnSelector, _access.allowed);\\n            explicitFunctionAccess[allowedCaller][_access.fnSelector] = _access.allowed;\\n        }\\n    }\\n\\n    function isElevatedAccess(address caller, bytes4 fnSelector) internal view returns (bool) {\\n        if (inRescueMode) {\\n            // If we're in rescue mode, then only the rescuers can call\\n            return caller == rescuer;\\n        } else if (caller == executor || explicitFunctionAccess[caller][fnSelector]) {\\n            // If we're not in rescue mode, the executor can call all functions\\n            // or the caller has been given explicit access on this function\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Under normal operations, only the executors are allowed to call.\\n     * If 'rescue mode' has been enabled, then only the rescuers are allowed to call.\\n     * @dev Important: Only for use when called from an *external* contract. \\n     * If a function with this modifier is called internally then the `msg.sig` \\n     * will still refer to the top level externally called function.\\n     */\\n    modifier onlyElevatedAccess() {\\n        if (!isElevatedAccess(msg.sender, msg.sig)) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only the executors or rescuers can call.\\n     */\\n    modifier onlyInRescueMode() {\\n        if (!(inRescueMode && msg.sender == rescuer)) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n\\n    modifier notInRescueMode() {\\n        if (inRescueMode) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interestRate/BaseInterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/interestRate/BaseInterestRateModel.sol)\\n\\nimport { IInterestRateModel } from \\\"contracts/interfaces/v2/interestRate/IInterestRateModel.sol\\\";\\n\\n/**\\n * @notice An abstract base contract to calculate the interest rate derived from the current utilization ratio (UR) of debt.\\n */\\nabstract contract BaseInterestRateModel is IInterestRateModel {\\n    \\n    uint256 internal constant PRECISION = 1e18;\\n\\n    uint96 internal constant MAX_ALLOWED_INTEREST_RATE = 5e18; // 500% APR\\n\\n    /**\\n     * @notice Derived interest rate model contracts need to implement.\\n     */\\n    function computeInterestRateImpl(uint256) internal virtual view returns (uint96);\\n\\n    /**\\n     * @notice Calculates the current interest rate based on a utilization ratio\\n     * @dev The rates are bound to sensible min/max amounts, but it does not fail.\\n     * @return interestRate The interest rate (scaled by PRECISION). 0.05e18 == 5%\\n     */\\n    function calculateInterestRate(uint256 utilizationRatio) external view returns (uint96 interestRate) {\\n        // Cap the UR at 100%\\n        if (utilizationRatio > PRECISION) {\\n            utilizationRatio = PRECISION;\\n        }\\n\\n        interestRate = computeInterestRateImpl(utilizationRatio);\\n\\n        if (interestRate > MAX_ALLOWED_INTEREST_RATE) {\\n            interestRate = MAX_ALLOWED_INTEREST_RATE;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interestRate/LinearWithKinkInterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/interestRate/LinearWithKinkInterestRateModel.sol)\\n\\nimport { BaseInterestRateModel } from \\\"contracts/v2/interestRate/BaseInterestRateModel.sol\\\";\\nimport { TempleElevatedAccess } from \\\"contracts/v2/access/TempleElevatedAccess.sol\\\";\\nimport { CommonEventsAndErrors } from \\\"contracts/common/CommonEventsAndErrors.sol\\\";\\n\\n/**\\n * @title 'Linear With Kink' Interest Rate Model\\n * @notice An interest rate curve derived from the current utilization ratio (UR) of debt.\\n * This is represented as two seperate linear slopes, joined at a 'kink' - a particular UR.\\n */\\ncontract LinearWithKinkInterestRateModel is BaseInterestRateModel, TempleElevatedAccess {\\n    struct RateParams {\\n        /// @notice The base interest rate which is the y-intercept when utilization rate is 0\\n        uint80 baseInterestRate;\\n\\n        /// @notice Interest rate at 100 percent utilization\\n        uint80 maxInterestRate;\\n\\n        /// @notice Interest rate at kink\\n        uint80 kinkInterestRate;\\n\\n        /// @notice The utilization ratio point at which slope changes\\n        uint256 kinkUtilizationRatio;\\n    }\\n\\n    /**\\n     * @notice The interest rate parameters to derive the two curves with a kink.\\n     */\\n    RateParams public rateParams;\\n\\n    event InterestRateParamsSet(\\n        uint80 _baseInterestRate, \\n        uint80 _maxInterestRate, \\n        uint256 _kinkUtilizationRatio, \\n        uint80 _kinkInterestRate\\n    );\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param _baseInterestRate base interest rate which is the y-intercept when utilization rate is 0\\n     * @param _maxInterestRate Interest rate at 100 percent utilization\\n     * @param _kinkUtilizationRatio The utilization point at which slope changes\\n     * @param _kinkInterestRate Interest rate at the `kinkUtiliszation`;\\n     */\\n    constructor(\\n        address _initialRescuer, \\n        address _initialExecutor,\\n        uint80 _baseInterestRate, \\n        uint80 _maxInterestRate, \\n        uint256 _kinkUtilizationRatio, \\n        uint80 _kinkInterestRate\\n    ) TempleElevatedAccess(_initialRescuer, _initialExecutor)\\n    {\\n        _setRateParams(\\n            _baseInterestRate, \\n            _maxInterestRate, \\n            _kinkUtilizationRatio, \\n            _kinkInterestRate\\n        );\\n    }\\n    \\n    /**\\n     * @notice Update the interest rate parameters.\\n     */\\n    function setRateParams(\\n        uint80 _baseInterestRate, \\n        uint80 _maxInterestRate, \\n        uint256 _kinkUtilizationRatio, \\n        uint80 _kinkInterestRate\\n    ) external onlyElevatedAccess {\\n        _setRateParams(\\n            _baseInterestRate, \\n            _maxInterestRate, \\n            _kinkUtilizationRatio, \\n            _kinkInterestRate\\n        );\\n    }\\n\\n    function _setRateParams(\\n        uint80 _baseInterestRate, \\n        uint80 _maxInterestRate, \\n        uint256 _kinkUtilizationRatio, \\n        uint80 _kinkInterestRate\\n    ) internal {\\n        if (_kinkUtilizationRatio == 0) revert CommonEventsAndErrors.InvalidParam();\\n        if (_kinkUtilizationRatio >= PRECISION) revert CommonEventsAndErrors.InvalidParam();\\n        if (_baseInterestRate > _kinkInterestRate) revert CommonEventsAndErrors.InvalidParam();\\n        if (_kinkInterestRate > _maxInterestRate) revert CommonEventsAndErrors.InvalidParam();\\n\\n        rateParams = RateParams({\\n            baseInterestRate: _baseInterestRate,\\n            maxInterestRate: _maxInterestRate,\\n            kinkInterestRate: _kinkInterestRate,\\n            kinkUtilizationRatio: _kinkUtilizationRatio\\n        });\\n        emit InterestRateParamsSet(\\n            _baseInterestRate, \\n            _maxInterestRate, \\n            _kinkUtilizationRatio, \\n            _kinkInterestRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the current interest rate based on a utilization ratio\\n     * @param utilizationRatio The utilization ratio scaled to `PRECISION`\\n     */\\n    function computeInterestRateImpl(uint256 utilizationRatio) internal override view returns (uint96) {\\n        RateParams memory _rateParams = rateParams;\\n\\n        uint256 interestRate;\\n        // slither-disable-start divide-before-multiply\\n        if (utilizationRatio > _rateParams.kinkUtilizationRatio) {\\n            // Slope between kink% -> max%\\n            uint256 slope = (\\n                (PRECISION * (_rateParams.maxInterestRate - _rateParams.kinkInterestRate))\\n                / (PRECISION - _rateParams.kinkUtilizationRatio)\\n            );\\n            interestRate = (\\n                (\\n                    (slope * (utilizationRatio - _rateParams.kinkUtilizationRatio)) \\n                    / PRECISION\\n                ) + _rateParams.kinkInterestRate\\n            );\\n        } else {\\n            // Slope between base% -> kink%\\n            uint256 slope = (\\n                (PRECISION * (_rateParams.kinkInterestRate - _rateParams.baseInterestRate))\\n                 / _rateParams.kinkUtilizationRatio\\n            );\\n            interestRate = (\\n                (utilizationRatio * slope / PRECISION) \\n                + _rateParams.baseInterestRate\\n            );\\n        }\\n        // slither-disable-end divide-before-multiply\\n        return uint96(interestRate);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialRescuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialExecutor\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_baseInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"_maxInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"_kinkUtilizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_kinkInterestRate\",\"type\":\"uint80\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"_baseInterestRate\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"_maxInterestRate\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_kinkUtilizationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"_kinkInterestRate\",\"type\":\"uint80\"}],\"name\":\"InterestRateParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"interestRate\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateParams\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"baseInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"maxInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"kinkInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"kinkUtilizationRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_baseInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"_maxInterestRate\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"_kinkUtilizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_kinkInterestRate\",\"type\":\"uint80\"}],\"name\":\"setRateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LinearWithKinkInterestRateModel", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000009f90430179d9b67341bfa50559bc7b8e35629f1b000000000000000000000000b1e8ab0a81aadf632a653e46caeda1593d71d14300000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000c7d713b49da0000000000000000000000000000000000000000000000000000016345785d8a0000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}