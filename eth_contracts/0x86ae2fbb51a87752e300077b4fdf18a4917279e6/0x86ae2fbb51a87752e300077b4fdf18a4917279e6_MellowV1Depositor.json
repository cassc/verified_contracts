{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/utils/MellowV1Depositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20RootVault} from \\\"@mellow-vaults/contracts/vaults/ERC20RootVault.sol\\\";\\n\\nimport \\\"../interfaces/external/univ3/ISwapRouter.sol\\\";\\nimport \\\"../interfaces/external/univ3/IUniswapV3Pool.sol\\\";\\n\\nimport \\\"../libraries/external/FullMath.sol\\\";\\n\\nimport \\\"./IDepositV1Wrapper.sol\\\";\\n\\ncontract MellowV1Depositor {\\n    error Forbidden();\\n    error PoolNotFound();\\n    error LimitUnderflow();\\n\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant Q96 = 2 ** 96;\\n    uint256 public constant D6 = 10 ** 6;\\n\\n    address public immutable owner;\\n    ISwapRouter public immutable router;\\n    mapping(address => mapping(address => IUniswapV3Pool)) public uniV3Pools;\\n\\n    constructor(ISwapRouter router_, address owner_) {\\n        owner = owner_;\\n        router = router_;\\n    }\\n\\n    function addPools(IUniswapV3Pool[] memory pools) external {\\n        if (msg.sender != owner) revert Forbidden();\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IUniswapV3Pool pool = pools[i];\\n            address token0 = pool.token0();\\n            address token1 = pool.token1();\\n            uniV3Pools[token0][token1] = pool;\\n            uniV3Pools[token1][token0] = pool;\\n        }\\n    }\\n\\n    function claim(address token) external {\\n        if (msg.sender != owner) revert Forbidden();\\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function _calculateAmountsForSwap(\\n        uint256[] memory pricesX96,\\n        uint256[] memory tvl,\\n        uint256 capitalInTokenIn,\\n        uint256 amountIn\\n    ) private pure returns (uint256[] memory amountsIn) {\\n        uint256 coefficientX96 = FullMath.mulDiv(amountIn, Q96, capitalInTokenIn);\\n        amountsIn = new uint256[](pricesX96.length);\\n        for (uint256 i = 0; i < pricesX96.length; i++) {\\n            uint256 priceX96 = FullMath.mulDiv(Q96, Q96, pricesX96[i]);\\n            amountsIn[i] = FullMath.mulDiv(tvl[i], coefficientX96, priceX96);\\n            if (amountsIn[i] > amountIn) {\\n                amountsIn[i] = amountIn;\\n            }\\n            amountIn -= amountsIn[i];\\n        }\\n    }\\n\\n    function deposit(address tokenIn, uint256 minCoefficientX96, uint256 minAmountOut, ERC20RootVault vault) external {\\n        uint256 amountIn = IERC20(tokenIn).allowance(msg.sender, address(this));\\n        (, uint256[] memory tvl) = vault.tvl();\\n        address[] memory tokens = vault.vaultTokens();\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountIn = FullMath.mulDiv(amountIn, minCoefficientX96, Q96);\\n\\n        uint256[] memory tokenAmounts = new uint256[](tokens.length);\\n        uint256[] memory amountsIn;\\n\\n        {\\n            uint256 capitalInTokenIn = 0;\\n            uint256[] memory pricesX96 = new uint256[](tokens.length);\\n\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    tokenAmounts[i] = amountIn;\\n                    pricesX96[i] = Q96;\\n                } else {\\n                    IUniswapV3Pool pool = uniV3Pools[tokenIn][tokens[i]];\\n                    if (address(0) == address(pool)) revert PoolNotFound();\\n                    (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\\n                    uint256 priceX96 = FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, Q96);\\n                    if (pool.token0() == tokenIn) {\\n                        priceX96 = FullMath.mulDiv(Q96, Q96, priceX96);\\n                    }\\n                    uint24 fee = pool.fee();\\n                    pricesX96[i] = FullMath.mulDiv(priceX96, D6, D6 - fee);\\n                }\\n                capitalInTokenIn += FullMath.mulDiv(tvl[i], pricesX96[i], Q96);\\n            }\\n\\n            amountsIn = _calculateAmountsForSwap(pricesX96, tvl, capitalInTokenIn, amountIn);\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == tokenIn) {\\n                tokenAmounts[i] = amountsIn[i];\\n            } else {\\n                if (amountsIn[i] == 0) continue;\\n                uint24 fee = uniV3Pools[tokenIn][tokens[i]].fee();\\n                IERC20(tokenIn).safeIncreaseAllowance(address(router), amountsIn[i]);\\n                tokenAmounts[i] = router.exactInputSingle(\\n                    ISwapRouter.ExactInputSingleParams({\\n                        tokenIn: tokenIn,\\n                        tokenOut: tokens[i],\\n                        fee: fee,\\n                        recipient: address(this),\\n                        deadline: type(uint256).max,\\n                        amountIn: amountsIn[i],\\n                        amountOutMinimum: 0,\\n                        sqrtPriceLimitX96: 0\\n                    })\\n                );\\n            }\\n        }\\n\\n        uint256 balanceBefore = vault.balanceOf(address(this));\\n\\n        {\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                IERC20(tokens[i]).safeIncreaseAllowance(address(vault), tokenAmounts[i]);\\n            }\\n        }\\n        vault.deposit(tokenAmounts, 0, \\\"\\\");\\n        {\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                IERC20(tokens[i]).safeApprove(address(vault), 0);\\n            }\\n        }\\n        uint256 lpAmount = vault.balanceOf(address(this)) - balanceBefore;\\n\\n        if (lpAmount < minAmountOut) {\\n            revert LimitUnderflow();\\n        }\\n\\n        IERC20(address(vault)).safeTransfer(msg.sender, lpAmount);\\n    }\\n\\n    function depositUsingWrapper(\\n        address tokenIn,\\n        uint256 minCoefficientX96,\\n        uint256 minAmountOut,\\n        ERC20RootVault vault,\\n        IDepositV1Wrapper depositWrapper\\n    ) external {\\n        uint256 amountIn = IERC20(tokenIn).allowance(msg.sender, address(this));\\n        (, uint256[] memory tvl) = vault.tvl();\\n        address[] memory tokens = vault.vaultTokens();\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountIn = FullMath.mulDiv(amountIn, minCoefficientX96, Q96);\\n\\n        uint256[] memory tokenAmounts = new uint256[](tokens.length);\\n        uint256[] memory amountsIn;\\n\\n        {\\n            uint256 capitalInTokenIn = 0;\\n            uint256[] memory pricesX96 = new uint256[](tokens.length);\\n\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    tokenAmounts[i] = amountIn;\\n                    pricesX96[i] = Q96;\\n                } else {\\n                    IUniswapV3Pool pool = uniV3Pools[tokenIn][tokens[i]];\\n                    if (address(0) == address(pool)) revert PoolNotFound();\\n                    (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\\n                    uint256 priceX96 = FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, Q96);\\n                    if (pool.token0() == tokenIn) {\\n                        priceX96 = FullMath.mulDiv(Q96, Q96, priceX96);\\n                    }\\n                    uint24 fee = pool.fee();\\n                    pricesX96[i] = FullMath.mulDiv(priceX96, D6, D6 - fee);\\n                }\\n                capitalInTokenIn += FullMath.mulDiv(tvl[i], pricesX96[i], Q96);\\n            }\\n\\n            amountsIn = _calculateAmountsForSwap(pricesX96, tvl, capitalInTokenIn, amountIn);\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == tokenIn) {\\n                tokenAmounts[i] = amountsIn[i];\\n            } else {\\n                if (amountsIn[i] == 0) continue;\\n                uint24 fee = uniV3Pools[tokenIn][tokens[i]].fee();\\n                IERC20(tokenIn).safeIncreaseAllowance(address(router), amountsIn[i]);\\n                tokenAmounts[i] = router.exactInputSingle(\\n                    ISwapRouter.ExactInputSingleParams({\\n                        tokenIn: tokenIn,\\n                        tokenOut: tokens[i],\\n                        fee: fee,\\n                        recipient: address(this),\\n                        deadline: type(uint256).max,\\n                        amountIn: amountsIn[i],\\n                        amountOutMinimum: 0,\\n                        sqrtPriceLimitX96: 0\\n                    })\\n                );\\n            }\\n        }\\n\\n        uint256 balanceBefore = vault.balanceOf(address(this));\\n\\n        {\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                IERC20(tokens[i]).safeIncreaseAllowance(address(depositWrapper), tokenAmounts[i]);\\n            }\\n        }\\n        depositWrapper.deposit(address(vault), tokenAmounts, 0, \\\"\\\");\\n        {\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                IERC20(tokens[i]).safeApprove(address(vault), 0);\\n            }\\n        }\\n        uint256 lpAmount = vault.balanceOf(address(this)) - balanceBefore;\\n\\n        if (lpAmount < minAmountOut) {\\n            revert LimitUnderflow();\\n        }\\n\\n        IERC20(address(vault)).safeTransfer(msg.sender, lpAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/vaults/ERC20RootVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../libraries/external/FullMath.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../interfaces/vaults/IERC20RootVaultGovernance.sol\\\";\\nimport \\\"../interfaces/vaults/IERC20RootVault.sol\\\";\\nimport \\\"../interfaces/utils/ILpCallback.sol\\\";\\nimport \\\"../utils/ERC20Token.sol\\\";\\nimport \\\"./AggregateVault.sol\\\";\\nimport \\\"../interfaces/utils/IERC20RootVaultHelper.sol\\\";\\n\\n/// @notice Contract that mints and burns LP tokens in exchange for ERC20 liquidity.\\ncontract ERC20RootVault is IERC20RootVault, ERC20Token, ReentrancyGuard, AggregateVault {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @inheritdoc IERC20RootVault\\n    uint64 public lastFeeCharge;\\n    /// @inheritdoc IERC20RootVault\\n    uint64 public totalWithdrawnAmountsTimestamp;\\n    /// @inheritdoc IERC20RootVault\\n    uint256[] public totalWithdrawnAmounts;\\n    /// @inheritdoc IERC20RootVault\\n    uint256 public lpPriceHighWaterMarkD18;\\n    EnumerableSet.AddressSet private _depositorsAllowlist;\\n    IERC20RootVaultHelper public helper;\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n    /// @inheritdoc IERC20RootVault\\n    function depositorsAllowlist() external view returns (address[] memory) {\\n        return _depositorsAllowlist.values();\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, AggregateVault)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId) || type(IERC20RootVault).interfaceId == interfaceId;\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n    /// @inheritdoc IERC20RootVault\\n    function addDepositorsToAllowlist(address[] calldata depositors) external {\\n        _requireAtLeastStrategy();\\n        for (uint256 i = 0; i < depositors.length; i++) {\\n            _depositorsAllowlist.add(depositors[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20RootVault\\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external {\\n        _requireAtLeastStrategy();\\n        for (uint256 i = 0; i < depositors.length; i++) {\\n            _depositorsAllowlist.remove(depositors[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20RootVault\\n    function initialize(\\n        uint256 nft_,\\n        address[] memory vaultTokens_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_,\\n        IERC20RootVaultHelper helper_\\n    ) external {\\n        _initialize(vaultTokens_, nft_, strategy_, subvaultNfts_);\\n        _initERC20(_getTokenName(bytes(\\\"Mellow Lp Token \\\"), nft_), _getTokenName(bytes(\\\"MLP\\\"), nft_));\\n        uint256 len = vaultTokens_.length;\\n        totalWithdrawnAmounts = new uint256[](len);\\n        lastFeeCharge = uint64(block.timestamp);\\n        helper = helper_;\\n    }\\n\\n    /// @inheritdoc IERC20RootVault\\n    function deposit(\\n        uint256[] memory tokenAmounts,\\n        uint256 minLpTokens,\\n        bytes memory vaultOptions\\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\\n        require(\\n            !IERC20RootVaultGovernance(address(_vaultGovernance)).operatorParams().disableDeposit,\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n        address[] memory tokens = _vaultTokens;\\n        uint256 supply = totalSupply;\\n        if (supply == 0) {\\n            for (uint256 i = 0; i < tokens.length; ++i) {\\n                require(tokenAmounts[i] >= 10 * _pullExistentials[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\\n                require(\\n                    tokenAmounts[i] <= _pullExistentials[i] * _pullExistentials[i],\\n                    ExceptionsLibrary.LIMIT_OVERFLOW\\n                );\\n            }\\n        }\\n        (uint256[] memory minTvl, uint256[] memory maxTvl) = tvl();\\n        uint256 thisNft = _nft;\\n        _chargeFees(thisNft, minTvl, supply, tokens);\\n        supply = totalSupply;\\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\\n            address(_vaultGovernance)\\n        ).delayedStrategyParams(thisNft);\\n        require(\\n            !delayedStrategyParams.privateVault || _depositorsAllowlist.contains(msg.sender),\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n        uint256 preLpAmount;\\n        uint256[] memory normalizedAmounts = new uint256[](tokenAmounts.length);\\n        {\\n            bool isSignificantTvl;\\n            (preLpAmount, isSignificantTvl) = _getLpAmount(maxTvl, tokenAmounts, supply);\\n            for (uint256 i = 0; i < tokens.length; ++i) {\\n                normalizedAmounts[i] = _getNormalizedAmount(\\n                    maxTvl[i],\\n                    tokenAmounts[i],\\n                    preLpAmount,\\n                    supply,\\n                    isSignificantTvl,\\n                    _pullExistentials[i]\\n                );\\n                IERC20(tokens[i]).safeTransferFrom(msg.sender, address(this), normalizedAmounts[i]);\\n            }\\n        }\\n        actualTokenAmounts = _push(normalizedAmounts, vaultOptions);\\n        (uint256 lpAmount, ) = _getLpAmount(maxTvl, actualTokenAmounts, supply);\\n        require(lpAmount >= minLpTokens, ExceptionsLibrary.LIMIT_UNDERFLOW);\\n        require(lpAmount != 0, ExceptionsLibrary.VALUE_ZERO);\\n        IERC20RootVaultGovernance.StrategyParams memory params = IERC20RootVaultGovernance(address(_vaultGovernance))\\n            .strategyParams(thisNft);\\n        require(lpAmount + balanceOf[msg.sender] <= params.tokenLimitPerAddress, ExceptionsLibrary.LIMIT_OVERFLOW);\\n        require(lpAmount + supply <= params.tokenLimit, ExceptionsLibrary.LIMIT_OVERFLOW);\\n        // lock tokens on first deposit\\n        if (supply == 0) {\\n            _mint(address(0), lpAmount);\\n        } else {\\n            _mint(msg.sender, lpAmount);\\n        }\\n\\n        for (uint256 i = 0; i < _vaultTokens.length; ++i) {\\n            if (normalizedAmounts[i] > actualTokenAmounts[i]) {\\n                IERC20(_vaultTokens[i]).safeTransfer(msg.sender, normalizedAmounts[i] - actualTokenAmounts[i]);\\n            }\\n        }\\n\\n        if (delayedStrategyParams.depositCallbackAddress != address(0)) {\\n            try ILpCallback(delayedStrategyParams.depositCallbackAddress).depositCallback() {} catch Error(\\n                string memory reason\\n            ) {\\n                emit DepositCallbackLog(reason);\\n            } catch {\\n                emit DepositCallbackLog(\\\"callback failed without reason\\\");\\n            }\\n        }\\n\\n        emit Deposit(msg.sender, _vaultTokens, actualTokenAmounts, lpAmount);\\n    }\\n\\n    /// @inheritdoc IERC20RootVault\\n    function withdraw(\\n        address to,\\n        uint256 lpTokenAmount,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\\n        uint256 supply = totalSupply;\\n        require(supply > 0, ExceptionsLibrary.VALUE_ZERO);\\n        address[] memory tokens = _vaultTokens;\\n        uint256[] memory tokenAmounts = new uint256[](_vaultTokens.length);\\n        (uint256[] memory minTvl, ) = tvl();\\n        _chargeFees(_nft, minTvl, supply, tokens);\\n        supply = totalSupply;\\n        uint256 balance = balanceOf[msg.sender];\\n        if (lpTokenAmount > balance) {\\n            lpTokenAmount = balance;\\n        }\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            tokenAmounts[i] = FullMath.mulDiv(lpTokenAmount, minTvl[i], supply);\\n        }\\n        actualTokenAmounts = _pull(address(this), tokenAmounts, vaultsOptions);\\n        // we are draining balance\\n        // if no sufficent amounts rest\\n        bool sufficientAmountRest = false;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            require(actualTokenAmounts[i] >= minTokenAmounts[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\\n            if (FullMath.mulDiv(balance, minTvl[i], supply) >= _pullExistentials[i] + actualTokenAmounts[i]) {\\n                sufficientAmountRest = true;\\n            }\\n            if (actualTokenAmounts[i] != 0) {\\n                IERC20(tokens[i]).safeTransfer(to, actualTokenAmounts[i]);\\n            }\\n        }\\n        _updateWithdrawnAmounts(actualTokenAmounts);\\n        if (sufficientAmountRest) {\\n            _burn(msg.sender, lpTokenAmount);\\n        } else {\\n            _burn(msg.sender, balance);\\n        }\\n\\n        uint256 thisNft = _nft;\\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\\n            address(_vaultGovernance)\\n        ).delayedStrategyParams(thisNft);\\n\\n        if (delayedStrategyParams.withdrawCallbackAddress != address(0)) {\\n            try ILpCallback(delayedStrategyParams.withdrawCallbackAddress).withdrawCallback() {} catch Error(\\n                string memory reason\\n            ) {\\n                emit WithdrawCallbackLog(reason);\\n            } catch {\\n                emit WithdrawCallbackLog(\\\"callback failed without reason\\\");\\n            }\\n        }\\n\\n        emit Withdraw(msg.sender, _vaultTokens, actualTokenAmounts, lpTokenAmount);\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function _getLpAmount(\\n        uint256[] memory tvl_,\\n        uint256[] memory amounts,\\n        uint256 supply\\n    ) internal view returns (uint256 lpAmount, bool isSignificantTvl) {\\n        if (supply == 0) {\\n            // On init lpToken = max(tokenAmounts)\\n            for (uint256 i = 0; i < tvl_.length; ++i) {\\n                if (amounts[i] > lpAmount) {\\n                    lpAmount = amounts[i];\\n                }\\n            }\\n            return (lpAmount, false);\\n        }\\n        uint256 tvlsLength = tvl_.length;\\n        bool isLpAmountUpdated = false;\\n        uint256[] memory pullExistentials = _pullExistentials;\\n        for (uint256 i = 0; i < tvlsLength; ++i) {\\n            if (tvl_[i] < pullExistentials[i]) {\\n                continue;\\n            }\\n\\n            uint256 tokenLpAmount = FullMath.mulDiv(amounts[i], supply, tvl_[i]);\\n            // take min of meaningful tokenLp amounts\\n            if ((tokenLpAmount < lpAmount) || (isLpAmountUpdated == false)) {\\n                isLpAmountUpdated = true;\\n                lpAmount = tokenLpAmount;\\n            }\\n        }\\n        isSignificantTvl = isLpAmountUpdated;\\n        // in case of almost zero tvl for all tokens -> do the same with supply == 0\\n        if (!isSignificantTvl) {\\n            for (uint256 i = 0; i < tvl_.length; ++i) {\\n                if (amounts[i] > lpAmount) {\\n                    lpAmount = amounts[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getNormalizedAmount(\\n        uint256 tvl_,\\n        uint256 amount,\\n        uint256 lpAmount,\\n        uint256 supply,\\n        bool isSignificantTvl,\\n        uint256 existentialsAmount\\n    ) internal pure returns (uint256) {\\n        if (supply == 0 || !isSignificantTvl) {\\n            // skip normalization on init\\n            return amount;\\n        }\\n\\n        if (tvl_ < existentialsAmount) {\\n            // use zero-normalization when all tvls are dust-like\\n            return 0;\\n        }\\n\\n        // normalize amount\\n        uint256 res = FullMath.mulDiv(tvl_, lpAmount, supply);\\n        if (res > amount) {\\n            res = amount;\\n        }\\n\\n        return res;\\n    }\\n\\n    function _requireAtLeastStrategy() internal view {\\n        uint256 nft_ = _nft;\\n        IVaultGovernance.InternalParams memory internalParams = _vaultGovernance.internalParams();\\n        require(\\n            (internalParams.protocolGovernance.isAdmin(msg.sender) ||\\n                internalParams.registry.getApproved(nft_) == msg.sender ||\\n                (internalParams.registry.ownerOf(nft_) == msg.sender)),\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n    }\\n\\n    function _getTokenName(bytes memory prefix, uint256 nft_) internal pure returns (string memory) {\\n        bytes memory number = bytes(Strings.toString(nft_));\\n        return string(abi.encodePacked(prefix, number));\\n    }\\n\\n    // -------------------  INTERNAL, MUTATING  -------------------\\n\\n    /// @dev we are charging fees on the deposit / withdrawal\\n    /// fees are charged before the tokens transfer and change the balance of the lp tokens\\n    function _chargeFees(\\n        uint256 thisNft,\\n        uint256[] memory tvls,\\n        uint256 supply,\\n        address[] memory tokens\\n    ) internal {\\n        IERC20RootVaultGovernance vg = IERC20RootVaultGovernance(address(_vaultGovernance));\\n        uint256 elapsed = block.timestamp - uint256(lastFeeCharge);\\n        IERC20RootVaultGovernance.DelayedProtocolParams memory delayedProtocolParams = vg.delayedProtocolParams();\\n        if (elapsed < delayedProtocolParams.managementFeeChargeDelay) {\\n            return;\\n        }\\n        lastFeeCharge = uint64(block.timestamp);\\n        // don't charge on initial deposit\\n        if (supply == 0) {\\n            return;\\n        }\\n        {\\n            bool needSkip = true;\\n            uint256[] memory pullExistentials = _pullExistentials;\\n            for (uint256 i = 0; i < pullExistentials.length; ++i) {\\n                if (tvls[i] >= pullExistentials[i]) {\\n                    needSkip = false;\\n                    break;\\n                }\\n            }\\n            if (needSkip) {\\n                return;\\n            }\\n        }\\n        IERC20RootVaultGovernance.DelayedStrategyParams memory strategyParams = vg.delayedStrategyParams(thisNft);\\n        uint256 protocolFee = vg.delayedProtocolPerVaultParams(thisNft).protocolFee;\\n        address protocolTreasury = vg.internalParams().protocolGovernance.protocolTreasury();\\n        _chargeManagementFees(\\n            strategyParams.managementFee,\\n            protocolFee,\\n            strategyParams.strategyTreasury,\\n            protocolTreasury,\\n            elapsed,\\n            supply\\n        );\\n\\n        _chargePerformanceFees(\\n            supply,\\n            tvls,\\n            strategyParams.performanceFee,\\n            strategyParams.strategyPerformanceTreasury,\\n            tokens,\\n            delayedProtocolParams.oracle\\n        );\\n    }\\n\\n    function _chargeManagementFees(\\n        uint256 managementFee,\\n        uint256 protocolFee,\\n        address strategyTreasury,\\n        address protocolTreasury,\\n        uint256 elapsed,\\n        uint256 lpSupply\\n    ) internal {\\n        if (managementFee > 0) {\\n            uint256 toMint = FullMath.mulDiv(\\n                managementFee * elapsed,\\n                lpSupply,\\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\\n            );\\n            _mint(strategyTreasury, toMint);\\n            emit ManagementFeesCharged(strategyTreasury, managementFee, toMint);\\n        }\\n        if (protocolFee > 0) {\\n            uint256 toMint = FullMath.mulDiv(\\n                protocolFee * elapsed,\\n                lpSupply,\\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\\n            );\\n            _mint(protocolTreasury, toMint);\\n            emit ProtocolFeesCharged(protocolTreasury, protocolFee, toMint);\\n        }\\n    }\\n\\n    function _chargePerformanceFees(\\n        uint256 baseSupply,\\n        uint256[] memory baseTvls,\\n        uint256 performanceFee,\\n        address treasury,\\n        address[] memory tokens,\\n        IOracle oracle\\n    ) internal {\\n        if ((performanceFee == 0) || (baseSupply == 0)) {\\n            return;\\n        }\\n        uint256 tvlToken0 = helper.getTvlToken0(baseTvls, tokens, oracle);\\n        uint256 lpPriceD18 = FullMath.mulDiv(tvlToken0, CommonLibrary.D18, baseSupply);\\n        uint256 hwmsD18 = lpPriceHighWaterMarkD18;\\n        if (lpPriceD18 <= hwmsD18) {\\n            return;\\n        }\\n        uint256 toMint;\\n        if (hwmsD18 > 0) {\\n            toMint = FullMath.mulDiv(baseSupply, lpPriceD18 - hwmsD18, hwmsD18);\\n            toMint = FullMath.mulDiv(toMint, performanceFee, CommonLibrary.DENOMINATOR);\\n            _mint(treasury, toMint);\\n        }\\n        lpPriceHighWaterMarkD18 = lpPriceD18;\\n        emit PerformanceFeesCharged(treasury, performanceFee, toMint);\\n    }\\n\\n    function _updateWithdrawnAmounts(uint256[] memory tokenAmounts) internal {\\n        uint256[] memory withdrawn = new uint256[](tokenAmounts.length);\\n        uint64 timestamp = uint64(block.timestamp);\\n        IProtocolGovernance protocolGovernance = _vaultGovernance.internalParams().protocolGovernance;\\n        if (timestamp != totalWithdrawnAmountsTimestamp) {\\n            totalWithdrawnAmountsTimestamp = timestamp;\\n        } else {\\n            for (uint256 i = 0; i < tokenAmounts.length; i++) {\\n                withdrawn[i] = totalWithdrawnAmounts[i];\\n            }\\n        }\\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\\n            withdrawn[i] += tokenAmounts[i];\\n            require(\\n                withdrawn[i] <= protocolGovernance.withdrawLimit(_vaultTokens[i]),\\n                ExceptionsLibrary.LIMIT_OVERFLOW\\n            );\\n            totalWithdrawnAmounts[i] = withdrawn[i];\\n        }\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice Emitted when management fees are charged\\n    /// @param treasury Treasury receiver of the fee\\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\\n    /// @param amount Amount of lp token minted\\n    event ManagementFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\\n\\n    /// @notice Emitted when protocol fees are charged\\n    /// @param treasury Treasury receiver of the fee\\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\\n    /// @param amount Amount of lp token minted\\n    event ProtocolFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\\n\\n    /// @notice Emitted when performance fees are charged\\n    /// @param treasury Treasury receiver of the fee\\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\\n    /// @param amount Amount of lp token minted\\n    event PerformanceFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\\n\\n    /// @notice Emitted when liquidity is deposited\\n    /// @param from The source address for the liquidity\\n    /// @param tokens ERC20 tokens deposited\\n    /// @param actualTokenAmounts Token amounts deposited\\n    /// @param lpTokenMinted LP tokens received by the liquidity provider\\n    event Deposit(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenMinted);\\n\\n    /// @notice Emitted when liquidity is withdrawn\\n    /// @param from The source address for the liquidity\\n    /// @param tokens ERC20 tokens withdrawn\\n    /// @param actualTokenAmounts Token amounts withdrawn\\n    /// @param lpTokenBurned LP tokens burned from the liquidity provider\\n    event Withdraw(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenBurned);\\n\\n    /// @notice Emitted when callback in deposit failed\\n    /// @param reason Error reason\\n    event DepositCallbackLog(string reason);\\n\\n    /// @notice Emitted when callback in withdraw failed\\n    /// @param reason Error reason\\n    event WithdrawCallbackLog(string reason);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/univ3/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/univ3/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./pool/IUniswapV3PoolActions.sol\\\";\\nimport \\\"./pool/IUniswapV3PoolImmutables.sol\\\";\\nimport \\\"./pool/IUniswapV3PoolState.sol\\\";\\nimport \\\"./pool/IUniswapV3PoolDerivedState.sol\\\";\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions\\n{\\n\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // diff: original uint256 twos = -denominator & denominator;\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/IDepositV1Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDepositV1Wrapper {\\n    function deposit(\\n        address vault,\\n        uint256[] calldata tokenAmounts,\\n        uint256 minLpTokens,\\n        bytes calldata vaultOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/libraries/external/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // diff: original uint256 twos = -denominator & denominator;\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n\\n    function mulDivFloor(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0, \\\"0 denom\\\");\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1, \\\"denom <= prod1\\\");\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivCeiling(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDivFloor(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/libraries/ExceptionsLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Exceptions stores project`s smart-contracts exceptions\\nlibrary ExceptionsLibrary {\\n    string constant ADDRESS_ZERO = \\\"AZ\\\";\\n    string constant VALUE_ZERO = \\\"VZ\\\";\\n    string constant EMPTY_LIST = \\\"EMPL\\\";\\n    string constant NOT_FOUND = \\\"NF\\\";\\n    string constant INIT = \\\"INIT\\\";\\n    string constant DUPLICATE = \\\"DUP\\\";\\n    string constant NULL = \\\"NULL\\\";\\n    string constant TIMESTAMP = \\\"TS\\\";\\n    string constant FORBIDDEN = \\\"FRB\\\";\\n    string constant ALLOWLIST = \\\"ALL\\\";\\n    string constant LIMIT_OVERFLOW = \\\"LIMO\\\";\\n    string constant LIMIT_UNDERFLOW = \\\"LIMU\\\";\\n    string constant INVALID_VALUE = \\\"INV\\\";\\n    string constant INVARIANT = \\\"INVA\\\";\\n    string constant INVALID_TARGET = \\\"INVTR\\\";\\n    string constant INVALID_TOKEN = \\\"INVTO\\\";\\n    string constant INVALID_INTERFACE = \\\"INVI\\\";\\n    string constant INVALID_SELECTOR = \\\"INVS\\\";\\n    string constant INVALID_STATE = \\\"INVST\\\";\\n    string constant INVALID_LENGTH = \\\"INVL\\\";\\n    string constant LOCK = \\\"LCKD\\\";\\n    string constant DISABLED = \\\"DIS\\\";\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IERC20RootVaultGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracles/IOracle.sol\\\";\\nimport \\\"./IERC20RootVault.sol\\\";\\nimport \\\"./IVaultGovernance.sol\\\";\\n\\ninterface IERC20RootVaultGovernance is IVaultGovernance {\\n    /// @notice Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\\n    /// @param strategyTreasury Reference to address that will collect strategy management fees\\n    /// @param strategyPerformanceTreasury Reference to address that will collect strategy performance fees\\n    /// @param privateVault If true, only whitlisted depositors can deposit into the vault\\n    /// @param managementFee Management fee for Strategist denominated in 10 ** 9\\n    /// @param performanceFee Performance fee for Strategist denominated in 10 ** 9\\n    /// @param depositCallbackAddress Address of callback function after deposit\\n    /// @param withdrawCallbackAddress Address of callback function after withdraw\\n    struct DelayedStrategyParams {\\n        address strategyTreasury;\\n        address strategyPerformanceTreasury;\\n        bool privateVault;\\n        uint256 managementFee;\\n        uint256 performanceFee;\\n        address depositCallbackAddress;\\n        address withdrawCallbackAddress;\\n    }\\n\\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param managementFeeChargeDelay The minimal interval between management fee charges\\n    /// @param oracle Oracle for getting token prices\\n    struct DelayedProtocolParams {\\n        uint256 managementFeeChargeDelay;\\n        IOracle oracle;\\n    }\\n\\n    /// @notice Params that could be changed by Strategy or Protocol Governance.\\n    /// @param tokenLimitPerAddress Max LP token limit per address\\n    /// @param tokenLimit Max LP token for the vault\\n    struct StrategyParams {\\n        uint256 tokenLimitPerAddress;\\n        uint256 tokenLimit;\\n    }\\n\\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param protocolFee Management fee for Protocol denominated in 10 ** 9\\n    struct DelayedProtocolPerVaultParams {\\n        uint256 protocolFee;\\n    }\\n\\n    /// @notice Params that could be changed by Operator role of Protocol Governance.\\n    /// @param disableDeposit Disable deposit for all ERC20 vaults\\n    struct OperatorParams {\\n        bool disableDeposit;\\n    }\\n\\n    /// @notice Number of maximum protocol fee\\n    function MAX_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /// @notice Number of maximum management fee\\n    function MAX_MANAGEMENT_FEE() external view returns (uint256);\\n\\n    /// @notice Number of maximum performance fee\\n    function MAX_PERFORMANCE_FEE() external view returns (uint256);\\n\\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\\n\\n    /// @notice Delayed Protocol Params staged for commit after delay.\\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\\n\\n    /// @notice Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory);\\n\\n    /// @notice Delayed Protocol Per Vault Params staged for commit after delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\\n        external\\n        view\\n        returns (DelayedProtocolPerVaultParams memory);\\n\\n    /// @notice Strategy Params.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory);\\n\\n    /// @notice Operator Params.\\n    function operatorParams() external view returns (OperatorParams memory);\\n\\n    /// @notice Delayed Strategy Params\\n    /// @param nft VaultRegistry NFT of the vault\\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\\n\\n    /// @notice Delayed Strategy Params staged for commit after delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\\n\\n    /// @notice Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately.\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external;\\n\\n    /// @notice Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately.\\n    /// @param params New params\\n    function setOperatorParams(OperatorParams calldata params) external;\\n\\n    /// @notice Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params\\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external;\\n\\n    /// @notice Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @dev Can only be called after delayedProtocolPerVaultParamsTimestamp\\n    /// @param nft VaultRegistry NFT of the vault\\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external;\\n\\n    /// @notice Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params\\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external;\\n\\n    /// @notice Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\\n    /// @dev Can only be called after delayedStrategyParamsTimestamp\\n    /// @param nft VaultRegistry NFT of the vault\\n    function commitDelayedStrategyParams(uint256 nft) external;\\n\\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\\n    /// @param params New params\\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\\n\\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    function commitDelayedProtocolParams() external;\\n\\n    /// @notice Deploys a new vault.\\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\\n    /// @param strategy_ The address that will have approvals for subvaultNfts\\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\\n    /// @param owner_ Owner of the vault NFT\\n    function createVault(\\n        address[] memory vaultTokens_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_,\\n        address owner_\\n    ) external returns (IERC20RootVault vault, uint256 nft);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IERC20RootVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAggregateVault.sol\\\";\\nimport \\\"../utils/IERC20RootVaultHelper.sol\\\";\\n\\ninterface IERC20RootVault is IAggregateVault, IERC20 {\\n    /// @notice Initialized a new contract.\\n    /// @dev Can only be initialized by vault governance\\n    /// @param nft_ NFT of the vault in the VaultRegistry\\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\\n    /// @param strategy_ The address that will have approvals for subvaultNfts\\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\\n    function initialize(\\n        uint256 nft_,\\n        address[] memory vaultTokens_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_,\\n        IERC20RootVaultHelper helper_\\n    ) external;\\n\\n    /// @notice The timestamp of last charging of fees\\n    function lastFeeCharge() external view returns (uint64);\\n\\n    /// @notice The timestamp of last updating totalWithdrawnAmounts array\\n    function totalWithdrawnAmountsTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns value from totalWithdrawnAmounts array by _index\\n    /// @param _index The index at which the value will be returned\\n    function totalWithdrawnAmounts(uint256 _index) external view returns (uint256);\\n\\n    /// @notice LP parameter that controls the charge in performance fees\\n    function lpPriceHighWaterMarkD18() external view returns (uint256);\\n\\n    /// @notice List of addresses of depositors from which interaction with private vaults is allowed\\n    function depositorsAllowlist() external view returns (address[] memory);\\n\\n    /// @notice Add new depositors in the depositorsAllowlist\\n    /// @param depositors Array of new depositors\\n    /// @dev The action can be done only by user with admins, owners or by approved rights\\n    function addDepositorsToAllowlist(address[] calldata depositors) external;\\n\\n    /// @notice Remove depositors from the depositorsAllowlist\\n    /// @param depositors Array of depositors for remove\\n    /// @dev The action can be done only by user with admins, owners or by approved rights\\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external;\\n\\n    /// @notice The function of depositing the amount of tokens in exchange\\n    /// @param tokenAmounts Array of amounts of tokens for deposit\\n    /// @param minLpTokens Minimal value of LP tokens\\n    /// @param vaultOptions Options of vaults\\n    /// @return actualTokenAmounts Arrays of actual token amounts after deposit\\n    function deposit(\\n        uint256[] memory tokenAmounts,\\n        uint256 minLpTokens,\\n        bytes memory vaultOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice The function of withdrawing the amount of tokens in exchange\\n    /// @param to Address to which the withdrawal will be sent\\n    /// @param lpTokenAmount LP token amount, that requested for withdraw\\n    /// @param minTokenAmounts Array of minmal remining wtoken amounts after withdrawal\\n    /// @param vaultsOptions Options of vaults\\n    /// @return actualTokenAmounts Arrays of actual token amounts after withdrawal\\n    function withdraw(\\n        address to,\\n        uint256 lpTokenAmount,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/utils/ILpCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILpCallback {\\n    /// @notice Function, that ERC20RootVault calling after deposit\\n    function depositCallback() external;\\n\\n    /// @notice Function, that ERC20RootVault calling after withdraw\\n    function withdrawCallback() external;\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/utils/ERC20Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\n\\ncontract ERC20Token is IERC20 {\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    uint8 public constant decimals = 18;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    uint256 public totalSupply;\\n    string public name;\\n    string public symbol;\\n\\n    uint256 private immutable _chainId;\\n    bytes32 private _cachedDomainSeparator;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        _chainId = block.chainid;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == _chainId ? _cachedDomainSeparator : calculateDomainSeparator();\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender];\\n\\n        if (allowed != type(uint256).max) {\\n            allowance[from][msg.sender] = allowed - amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, ExceptionsLibrary.TIMESTAMP);\\n\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner], deadline))\\n                )\\n            );\\n            nonces[owner] += 1;\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, ExceptionsLibrary.FORBIDDEN);\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function calculateDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    // -------------------  INTERNAL, MUTATING  -------------------\\n\\n    function _initERC20(string memory _name, string memory _symbol) internal {\\n        name = _name;\\n        symbol = _symbol;\\n        _cachedDomainSeparator = calculateDomainSeparator();\\n    }\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/vaults/AggregateVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/vaults/IIntegrationVault.sol\\\";\\nimport \\\"../interfaces/vaults/IVaultRoot.sol\\\";\\nimport \\\"../interfaces/vaults/IAggregateVault.sol\\\";\\nimport \\\"./Vault.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\n\\n/// @notice Vault that combines several integration layer Vaults into one Vault.\\ncontract AggregateVault is IAggregateVault, Vault {\\n    using SafeERC20 for IERC20;\\n    uint256[] private _subvaultNfts;\\n    mapping(uint256 => uint256) private _subvaultNftsIndex;\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IVaultRoot\\n    function subvaultNfts() external view returns (uint256[] memory) {\\n        return _subvaultNfts;\\n    }\\n\\n    /// @inheritdoc IVaultRoot\\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256) {\\n        return _subvaultNftsIndex[nft_];\\n    }\\n\\n    /// @inheritdoc IVaultRoot\\n    function hasSubvault(uint256 nft_) external view returns (bool) {\\n        return (_subvaultNftsIndex[nft_] > 0);\\n    }\\n\\n    /// @inheritdoc IVaultRoot\\n    function subvaultAt(uint256 index) external view returns (address) {\\n        uint256 subvaultNft = _subvaultNfts[index];\\n        return _vaultGovernance.internalParams().registry.vaultForNft(subvaultNft);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function tvl()\\n        public\\n        view\\n        override(IVault, Vault)\\n        returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts)\\n    {\\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\\n        address[] memory vaultTokens = _vaultTokens;\\n        minTokenAmounts = new uint256[](vaultTokens.length);\\n        maxTokenAmounts = new uint256[](vaultTokens.length);\\n        for (uint256 i = 0; i < _subvaultNfts.length; ++i) {\\n            IIntegrationVault vault = IIntegrationVault(registry.vaultForNft(_subvaultNfts[i]));\\n            (uint256[] memory sMinTokenAmounts, uint256[] memory sMaxTokenAmounts) = vault.tvl();\\n            address[] memory subvaultTokens = vault.vaultTokens();\\n            uint256 subvaultTokenId = 0;\\n            for (\\n                uint256 tokenId = 0;\\n                tokenId < vaultTokens.length && subvaultTokenId < subvaultTokens.length;\\n                ++tokenId\\n            ) {\\n                if (subvaultTokens[subvaultTokenId] == vaultTokens[tokenId]) {\\n                    minTokenAmounts[tokenId] += sMinTokenAmounts[subvaultTokenId];\\n                    maxTokenAmounts[tokenId] += sMaxTokenAmounts[subvaultTokenId];\\n                    ++subvaultTokenId;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Vault) returns (bool) {\\n        return super.supportsInterface(interfaceId) || type(IAggregateVault).interfaceId == interfaceId;\\n    }\\n\\n    // -------------------  INTERNAL, MUTATING  -------------------\\n\\n    function _initialize(\\n        address[] memory vaultTokens_,\\n        uint256 nft_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_\\n    ) internal virtual {\\n        IVaultRegistry vaultRegistry = IVaultGovernance(msg.sender).internalParams().registry;\\n        for (uint256 i = 0; i < subvaultNfts_.length; i++) {\\n            // Significant amount of checks has been done in ERC20RootVaultGovernance in the createVault function to reduce contract size\\n            uint256 subvaultNft = subvaultNfts_[i];\\n            require(vaultRegistry.ownerOf(subvaultNft) == address(this), ExceptionsLibrary.FORBIDDEN);\\n            require(_subvaultNftsIndex[subvaultNft] == 0, ExceptionsLibrary.DUPLICATE);\\n            vaultRegistry.approve(strategy_, subvaultNft);\\n            vaultRegistry.lockNft(subvaultNft);\\n            _subvaultNftsIndex[subvaultNft] = i + 1;\\n        }\\n        _subvaultNfts = subvaultNfts_;\\n        _initialize(vaultTokens_, nft_);\\n    }\\n\\n    function _push(uint256[] memory tokenAmounts, bytes memory vaultOptions)\\n        internal\\n        returns (uint256[] memory actualTokenAmounts)\\n    {\\n        require(_nft != 0, ExceptionsLibrary.INIT);\\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\\n        uint256 destNft = _subvaultNfts[0];\\n        IVaultRegistry registry = params.registry;\\n        IIntegrationVault destVault = IIntegrationVault(registry.vaultForNft(destNft));\\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\\n            if (tokenAmounts[i] > 0) {\\n                IERC20(_vaultTokens[i]).safeIncreaseAllowance(address(destVault), tokenAmounts[i]);\\n            }\\n        }\\n\\n        actualTokenAmounts = destVault.transferAndPush(address(this), _vaultTokens, tokenAmounts, vaultOptions);\\n\\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\\n            if (tokenAmounts[i] > 0) {\\n                IERC20(_vaultTokens[i]).safeApprove(address(destVault), 0);\\n            }\\n        }\\n    }\\n\\n    function _pull(\\n        address to,\\n        uint256[] memory tokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) internal returns (uint256[] memory actualTokenAmounts) {\\n        require(_nft != 0, ExceptionsLibrary.INIT);\\n        require(vaultsOptions.length == _subvaultNfts.length, ExceptionsLibrary.INVALID_LENGTH);\\n        IVaultRegistry vaultRegistry = _vaultGovernance.internalParams().registry;\\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\\n        address[] memory tokens = _vaultTokens;\\n        uint256[] memory existentials = _pullExistentials;\\n        uint256[] memory leftToPull = new uint256[](tokenAmounts.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            leftToPull[i] = tokenAmounts[i];\\n        }\\n        for (uint256 i = 0; i < _subvaultNfts.length; i++) {\\n            uint256 subvaultNft = _subvaultNfts[i];\\n            IIntegrationVault subvault = IIntegrationVault(vaultRegistry.vaultForNft(subvaultNft));\\n            uint256[] memory pulledAmounts = subvault.pull(address(this), tokens, leftToPull, vaultsOptions[i]);\\n            bool shouldStop = true;\\n            for (uint256 j = 0; j < tokens.length; j++) {\\n                if (leftToPull[j] > pulledAmounts[j] + existentials[j]) {\\n                    shouldStop = false;\\n                    leftToPull[j] -= pulledAmounts[j];\\n                } else {\\n                    leftToPull[j] = 0;\\n                }\\n            }\\n            if (shouldStop) {\\n                break;\\n            }\\n        }\\n        address subvault0 = vaultRegistry.vaultForNft(_subvaultNfts[0]);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\\n            if (tokenAmounts[i] < balance) {\\n                actualTokenAmounts[i] = tokenAmounts[i];\\n                IERC20(tokens[i]).safeTransfer(to, tokenAmounts[i]);\\n                IERC20(tokens[i]).safeTransfer(subvault0, balance - tokenAmounts[i]);\\n            } else {\\n                actualTokenAmounts[i] = balance;\\n                IERC20(tokens[i]).safeTransfer(to, balance);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/utils/IERC20RootVaultHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracles/IOracle.sol\\\";\\n\\ninterface IERC20RootVaultHelper {\\n    function getTvlToken0(\\n        uint256[] calldata tvls,\\n        address[] calldata tokens,\\n        IOracle oracle\\n    ) external view returns (uint256 tvl0);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/univ3/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/univ3/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/univ3/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolPerformanceFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(\\n        int24 tick\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(\\n        bytes32 key\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/univ3/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(\\n        uint32[] calldata secondsAgos\\n    ) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/oracles/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /// @notice Oracle price for tokens as a Q64.96 value.\\n    /// @notice Returns pricing information based on the indexes of non-zero bits in safetyIndicesSet.\\n    /// @notice It is possible that not all indices will have their respective prices returned.\\n    /// @dev The price is token1 / token0 i.e. how many weis of token1 required for 1 wei of token0.\\n    /// The safety indexes are:\\n    ///\\n    /// 1 - unsafe, this is typically a spot price that can be easily manipulated,\\n    ///\\n    /// 2 - 4 - more or less safe, this is typically a uniV3 oracle, where the safety is defined by the timespan of the average price\\n    ///\\n    /// 5 - safe - this is typically a chailink oracle\\n    /// @param token0 Reference to token0\\n    /// @param token1 Reference to token1\\n    /// @param safetyIndicesSet Bitmask of safety indices that are allowed for the return prices. For set of safety indexes = { 1 }, safetyIndicesSet = 0x2\\n    /// @return pricesX96 Prices that satisfy safetyIndex and tokens\\n    /// @return safetyIndices Safety indices for those prices\\n    function priceX96(\\n        address token0,\\n        address token1,\\n        uint256 safetyIndicesSet\\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IVaultGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IProtocolGovernance.sol\\\";\\nimport \\\"../IVaultRegistry.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IVaultGovernance {\\n    /// @notice Internal references of the contract.\\n    /// @param protocolGovernance Reference to Protocol Governance\\n    /// @param registry Reference to Vault Registry\\n    struct InternalParams {\\n        IProtocolGovernance protocolGovernance;\\n        IVaultRegistry registry;\\n        IVault singleton;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\\n    /// @param nft Nft of the vault\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256);\\n\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\\n    function delayedProtocolParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\\n    /// @param nft Nft of the vault\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256);\\n\\n    /// @notice Timestamp in unix time seconds after which staged Internal Params could be committed.\\n    function internalParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Internal Params of the contract.\\n    function internalParams() external view returns (InternalParams memory);\\n\\n    /// @notice Staged new Internal Params.\\n    /// @dev The Internal Params could be committed after internalParamsTimestamp\\n    function stagedInternalParams() external view returns (InternalParams memory);\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @notice Stage new Internal Params.\\n    /// @param newParams New Internal Params\\n    function stageInternalParams(InternalParams memory newParams) external;\\n\\n    /// @notice Commit staged Internal Params.\\n    function commitInternalParams() external;\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IAggregateVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IVaultRoot.sol\\\";\\n\\ninterface IAggregateVault is IVault, IVaultRoot {}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IIntegrationVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../external/erc/IERC1271.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IIntegrationVault is IVault, IERC1271 {\\n    /// @notice Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from\\n    /// the contract balance and convert it to yUSDC.\\n    /// @dev Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\\n    ///\\n    /// Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\\n    /// @param tokens Tokens to push\\n    /// @param tokenAmounts Amounts of tokens to push\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\\n    function push(\\n        address[] memory tokens,\\n        uint256[] memory tokenAmounts,\\n        bytes memory options\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice The same as `push` method above but transfers tokens to vault balance prior to calling push.\\n    /// After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\\n    /// @param tokens Tokens to push\\n    /// @param tokenAmounts Amounts of tokens to push\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\\n    function transferAndPush(\\n        address from,\\n        address[] memory tokens,\\n        uint256[] memory tokenAmounts,\\n        bytes memory options\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice Pulls tokens from the underlying protocol to the `to` address.\\n    /// @dev Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\\n    /// Strategy is approved address for the vault NFT.\\n    /// When called by vault owner this method just pulls the tokens from the protocol to the `to` address\\n    /// When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault)\\n    /// When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left.\\n    /// Thus any vault other than zero vault cannot have any tokens on it\\n    ///\\n    /// Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\\n    ///\\n    /// Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\\n    /// @param to Address to receive the tokens\\n    /// @param tokens Tokens to pull\\n    /// @param tokenAmounts Amounts of tokens to pull\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\n    /// @return actualTokenAmounts The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\\n    function pull(\\n        address to,\\n        address[] memory tokens,\\n        uint256[] memory tokenAmounts,\\n        bytes memory options\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice Claim ERC20 tokens from vault balance to zero vault.\\n    /// @dev Cannot be called from zero vault.\\n    /// @param tokens Tokens to claim\\n    /// @return actualTokenAmounts Amounts reclaimed\\n    function reclaimTokens(address[] memory tokens) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice Execute one of whitelisted calls.\\n    /// @dev Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\\n    /// Strategy is approved address for the vault NFT.\\n    ///\\n    /// Since this method allows sending arbitrary transactions, the destinations of the calls\\n    /// are whitelisted by Protocol Governance.\\n    /// @param to Address of the reward pool\\n    /// @param selector Selector of the call\\n    /// @param data Abi encoded parameters to `to::selector`\\n    /// @return result Result of execution of the call\\n    function externalCall(\\n        address to,\\n        bytes4 selector,\\n        bytes memory data\\n    ) external payable returns (bytes memory result);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IVaultRoot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVaultRoot {\\n    /// @notice Checks if subvault is present\\n    /// @param nft_ index of subvault for check\\n    /// @return `true` if subvault present, `false` otherwise\\n    function hasSubvault(uint256 nft_) external view returns (bool);\\n\\n    /// @notice Get subvault by index\\n    /// @param index Index of subvault\\n    /// @return address Address of the contract\\n    function subvaultAt(uint256 index) external view returns (address);\\n\\n    /// @notice Get index of subvault by nft\\n    /// @param nft_ Nft for getting subvault\\n    /// @return index Index of subvault\\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256);\\n\\n    /// @notice Get all subvalutNfts in the current Vault\\n    /// @return subvaultNfts Subvaults of NTFs\\n    function subvaultNfts() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/vaults/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../libraries/CommonLibrary.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../interfaces/vaults/IVault.sol\\\";\\nimport \\\"./VaultGovernance.sol\\\";\\n\\n/// @notice Abstract contract that has logic common for every Vault.\\n/// @dev Notes:\\n/// ### ERC-721\\n///\\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\\n///\\n/// ### Access control\\n///\\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\\n///\\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\\n///\\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\\n///\\n/// `reclaimTokens` for mistakenly transfered tokens (not included into vaultTokens) additionally can be withdrawn by\\n/// the protocol admin\\nabstract contract Vault is IVault, ERC165 {\\n    using SafeERC20 for IERC20;\\n\\n    IVaultGovernance internal _vaultGovernance;\\n    address[] internal _vaultTokens;\\n    mapping(address => int256) internal _vaultTokensIndex;\\n    uint256 internal _nft;\\n    uint256[] internal _pullExistentials;\\n\\n    constructor() {\\n        // lock initialization and thus all mutations for any deployed Vault\\n        _nft = type(uint256).max;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IVault\\n    function initialized() external view returns (bool) {\\n        return _nft != 0;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function isVaultToken(address token) public view returns (bool) {\\n        return _vaultTokensIndex[token] != 0;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function vaultGovernance() external view returns (IVaultGovernance) {\\n        return _vaultGovernance;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function vaultTokens() external view returns (address[] memory) {\\n        return _vaultTokens;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function nft() external view returns (uint256) {\\n        return _nft;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function tvl() public view virtual returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\\n\\n    /// @inheritdoc IVault\\n    function pullExistentials() external view returns (uint256[] memory) {\\n        return _pullExistentials;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IVault).interfaceId);\\n    }\\n\\n    // -------------------  INTERNAL, MUTATING  -------------------\\n\\n    function _initialize(address[] memory vaultTokens_, uint256 nft_) internal virtual {\\n        require(_nft == 0, ExceptionsLibrary.INIT);\\n        require(CommonLibrary.isSortedAndUnique(vaultTokens_), ExceptionsLibrary.INVARIANT);\\n        require(nft_ != 0, ExceptionsLibrary.VALUE_ZERO); // guarantees that this method can only be called once\\n        IProtocolGovernance governance = IVaultGovernance(msg.sender).internalParams().protocolGovernance;\\n        require(\\n            vaultTokens_.length > 0 && vaultTokens_.length <= governance.maxTokensPerVault(),\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n        for (uint256 i = 0; i < vaultTokens_.length; i++) {\\n            require(\\n                governance.hasPermission(vaultTokens_[i], PermissionIdsLibrary.ERC20_VAULT_TOKEN),\\n                ExceptionsLibrary.FORBIDDEN\\n            );\\n        }\\n        _vaultGovernance = IVaultGovernance(msg.sender);\\n        _vaultTokens = vaultTokens_;\\n        _nft = nft_;\\n        uint256 len = _vaultTokens.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            _vaultTokensIndex[vaultTokens_[i]] = int256(i + 1);\\n\\n            IERC20Metadata token = IERC20Metadata(vaultTokens_[i]);\\n            _pullExistentials.push(10**(token.decimals() / 2));\\n        }\\n        emit Initialized(tx.origin, msg.sender, vaultTokens_, nft_);\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice Emitted when Vault is intialized\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param vaultTokens_ ERC20 tokens under the vault management\\n    /// @param nft_ VaultRegistry NFT assigned to the vault\\n    event Initialized(address indexed origin, address indexed sender, address[] vaultTokens_, uint256 nft_);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/IProtocolGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\nimport \\\"./IUnitPricesGovernance.sol\\\";\\n\\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\\n    /// @notice CommonLibrary protocol params.\\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\\n    struct Params {\\n        uint256 maxTokensPerVault;\\n        uint256 governanceDelay;\\n        address protocolTreasury;\\n        uint256 forceAllowMask;\\n        uint256 withdrawLimit;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\n    /// @param target The given address\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\\n\\n    /// @notice Staged granted permission bitmask for the given address.\\n    /// @param target The given address\\n    /// @return Bitmask\\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\\n\\n    /// @notice Permission bitmask for the given address.\\n    /// @param target The given address\\n    /// @return Bitmask\\n    function permissionMasks(address target) external view returns (uint256);\\n\\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\\n    function stagedParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Staged pending protocol parameters.\\n    function stagedParams() external view returns (Params memory);\\n\\n    /// @notice Current protocol parameters.\\n    function params() external view returns (Params memory);\\n\\n    /// @notice Addresses for which non-zero permissions are set.\\n    function permissionAddresses() external view returns (address[] memory);\\n\\n    /// @notice Permission addresses staged for commit.\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\\n    /// @param permissionId Id of the permission to check.\\n    /// @return A list of dirty addresses.\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\\n\\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\\n    /// @param addr Address to check\\n    /// @param permissionId Permission to check\\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\\n\\n    /// @notice Checks if address has all permissions.\\n    /// @param target Address to check\\n    /// @param permissionIds A list of permissions to check\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\\n\\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\\n    function maxTokensPerVault() external view returns (uint256);\\n\\n    /// @notice The delay for committing any governance params.\\n    function governanceDelay() external view returns (uint256);\\n\\n    /// @notice The address of the protocol treasury.\\n    function protocolTreasury() external view returns (address);\\n\\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\\n    /// This bitmask is xored with ordinary mask.\\n    function forceAllowMask() external view returns (uint256);\\n\\n    /// @notice Withdraw limit per token per block.\\n    /// @param token Address of the token\\n    /// @return Withdraw limit per token per block\\n    function withdrawLimit(address token) external view returns (uint256);\\n\\n    /// @notice Addresses that has staged validators.\\n    function stagedValidatorsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\n    /// @param target The given address\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\\n\\n    /// @notice Staged validator for the given address.\\n    /// @param target The given address\\n    /// @return Validator\\n    function stagedValidators(address target) external view returns (address);\\n\\n    /// @notice Addresses that has validators.\\n    function validatorsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Address that has validators.\\n    /// @param i The number of address\\n    /// @return Validator address\\n    function validatorsAddress(uint256 i) external view returns (address);\\n\\n    /// @notice Validator for the given address.\\n    /// @param target The given address\\n    /// @return Validator\\n    function validators(address target) external view returns (address);\\n\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\\n\\n    /// @notice Rollback all staged validators.\\n    function rollbackStagedValidators() external;\\n\\n    /// @notice Revoke validator instantly from the given address.\\n    /// @param target The given address\\n    function revokeValidator(address target) external;\\n\\n    /// @notice Stages a new validator for the given address\\n    /// @param target The given address\\n    /// @param validator The validator for the given address\\n    function stageValidator(address target, address validator) external;\\n\\n    /// @notice Commits validator for the given address.\\n    /// @dev Reverts if governance delay has not passed yet.\\n    /// @param target The given address.\\n    function commitValidator(address target) external;\\n\\n    /// @notice Commites all staged validators for which governance delay passed\\n    /// @return Addresses for which validators were committed\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\\n\\n    /// @notice Rollback all staged granted permission grant.\\n    function rollbackStagedPermissionGrants() external;\\n\\n    /// @notice Commits permission grants for the given address.\\n    /// @dev Reverts if governance delay has not passed yet.\\n    /// @param target The given address.\\n    function commitPermissionGrants(address target) external;\\n\\n    /// @notice Commites all staged permission grants for which governance delay passed.\\n    /// @return An array of addresses for which permission grants were committed.\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\\n\\n    /// @notice Revoke permission instantly from the given address.\\n    /// @param target The given address.\\n    /// @param permissionIds A list of permission ids to revoke.\\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\\n\\n    /// @notice Commits staged protocol params.\\n    /// Reverts if governance delay has not passed yet.\\n    function commitParams() external;\\n\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\\n\\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\\n    /// @param newParams New protocol parameters to set.\\n    function stageParams(Params memory newParams) external;\\n\\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\\n    /// @param target Target address\\n    /// @param permissionIds A list of permission ids to grant\\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/IVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IProtocolGovernance.sol\\\";\\n\\ninterface IVaultRegistry is IERC721 {\\n    /// @notice Get Vault for the giver NFT ID.\\n    /// @param nftId NFT ID\\n    /// @return vault Address of the Vault contract\\n    function vaultForNft(uint256 nftId) external view returns (address vault);\\n\\n    /// @notice Get NFT ID for given Vault contract address.\\n    /// @param vault Address of the Vault contract\\n    /// @return nftId NFT ID\\n    function nftForVault(address vault) external view returns (uint256 nftId);\\n\\n    /// @notice Checks if the nft is locked for all transfers\\n    /// @param nft NFT to check for lock\\n    /// @return `true` if locked, false otherwise\\n    function isLocked(uint256 nft) external view returns (bool);\\n\\n    /// @notice Register new Vault and mint NFT.\\n    /// @param vault address of the vault\\n    /// @param owner owner of the NFT\\n    /// @return nft Nft minted for the given Vault\\n    function registerVault(address vault, address owner) external returns (uint256 nft);\\n\\n    /// @notice Number of Vaults registered.\\n    function vaultsCount() external view returns (uint256);\\n\\n    /// @notice All Vaults registered.\\n    function vaults() external view returns (address[] memory);\\n\\n    /// @notice Address of the ProtocolGovernance.\\n    function protocolGovernance() external view returns (IProtocolGovernance);\\n\\n    /// @notice Address of the staged ProtocolGovernance.\\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance);\\n\\n    /// @notice Minimal timestamp when staged ProtocolGovernance can be applied.\\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256);\\n\\n    /// @notice Stage new ProtocolGovernance.\\n    /// @param newProtocolGovernance new ProtocolGovernance\\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external;\\n\\n    /// @notice Commit new ProtocolGovernance.\\n    function commitStagedProtocolGovernance() external;\\n\\n    /// @notice Lock NFT for transfers\\n    /// @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\\n    /// @param nft - NFT to lock\\n    function lockNft(uint256 nft) external;\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/vaults/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVaultGovernance.sol\\\";\\n\\ninterface IVault is IERC165 {\\n    /// @notice Checks if the vault is initialized\\n\\n    function initialized() external view returns (bool);\\n\\n    /// @notice VaultRegistry NFT for this vault\\n    function nft() external view returns (uint256);\\n\\n    /// @notice Address of the Vault Governance for this contract.\\n    function vaultGovernance() external view returns (IVaultGovernance);\\n\\n    /// @notice ERC20 tokens under Vault management.\\n    function vaultTokens() external view returns (address[] memory);\\n\\n    /// @notice Checks if a token is vault token\\n    /// @param token Address of the token to check\\n    /// @return `true` if this token is managed by Vault\\n    function isVaultToken(address token) external view returns (bool);\\n\\n    /// @notice Total value locked for this contract.\\n    /// @dev Generally it is the underlying token value of this contract in some\\n    /// other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract.\\n    /// The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\\n    /// @return minTokenAmounts Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\n    /// @return maxTokenAmounts Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\n    function tvl() external view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\\n\\n    /// @notice Existential amounts for each token\\n    function pullExistentials() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/external/erc/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC1271 {\\n    /// @notice Verifies offchain signature.\\n    /// @dev Should return whether the signature provided is valid for the provided hash\\n    ///\\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    ///\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    ///\\n    /// MUST allow external calls\\n    /// @param _hash Hash of the data to be signed\\n    /// @param _signature Signature byte array associated with _hash\\n    /// @return magicValue 0x1626ba7e if valid, 0xffffffff otherwise\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/libraries/CommonLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./external/FullMath.sol\\\";\\nimport \\\"./ExceptionsLibrary.sol\\\";\\n\\n/// @notice CommonLibrary shared utilities\\nlibrary CommonLibrary {\\n    uint256 constant DENOMINATOR = 10**9;\\n    uint256 constant D18 = 10**18;\\n    uint256 constant YEAR = 365 * 24 * 3600;\\n    uint256 constant Q128 = 2**128;\\n    uint256 constant Q96 = 2**96;\\n    uint256 constant Q48 = 2**48;\\n    uint256 constant Q160 = 2**160;\\n    uint256 constant UNI_FEE_DENOMINATOR = 10**6;\\n\\n    /// @notice Sort uint256 using bubble sort. The sorting is done in-place.\\n    /// @param arr Array of uint256\\n    function sortUint(uint256[] memory arr) internal pure {\\n        uint256 l = arr.length;\\n        for (uint256 i = 0; i < l; ++i) {\\n            for (uint256 j = i + 1; j < l; ++j) {\\n                if (arr[i] > arr[j]) {\\n                    uint256 temp = arr[i];\\n                    arr[i] = arr[j];\\n                    arr[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if array of addresses is sorted and all adresses are unique\\n    /// @param tokens A set of addresses to check\\n    /// @return `true` if all addresses are sorted and unique, `false` otherwise\\n    function isSortedAndUnique(address[] memory tokens) internal pure returns (bool) {\\n        if (tokens.length < 2) {\\n            return true;\\n        }\\n        for (uint256 i = 0; i < tokens.length - 1; ++i) {\\n            if (tokens[i] >= tokens[i + 1]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Projects tokenAmounts onto subset or superset of tokens\\n    /// @dev\\n    /// Requires both sets of tokens to be sorted. When tokens are not sorted, it's undefined behavior.\\n    /// If there is a token in tokensToProject that is not part of tokens and corresponding tokenAmountsToProject > 0, reverts.\\n    /// Zero token amount is eqiuvalent to missing token\\n    function projectTokenAmounts(\\n        address[] memory tokens,\\n        address[] memory tokensToProject,\\n        uint256[] memory tokenAmountsToProject\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory res = new uint256[](tokens.length);\\n        uint256 t = 0;\\n        uint256 tp = 0;\\n        while ((t < tokens.length) && (tp < tokensToProject.length)) {\\n            if (tokens[t] < tokensToProject[tp]) {\\n                res[t] = 0;\\n                t++;\\n            } else if (tokens[t] > tokensToProject[tp]) {\\n                if (tokenAmountsToProject[tp] == 0) {\\n                    tp++;\\n                } else {\\n                    revert(\\\"TPS\\\");\\n                }\\n            } else {\\n                res[t] = tokenAmountsToProject[tp];\\n                t++;\\n                tp++;\\n            }\\n        }\\n        while (t < tokens.length) {\\n            res[t] = 0;\\n            t++;\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Calculated sqrt of uint in X96 format\\n    /// @param xX96 input number in X96 format\\n    /// @return sqrt of xX96 in X96 format\\n    function sqrtX96(uint256 xX96) internal pure returns (uint256) {\\n        uint256 sqX96 = sqrt(xX96);\\n        return sqX96 << 48;\\n    }\\n\\n    /// @notice Calculated sqrt of uint\\n    /// @param x input number\\n    /// @return sqrt of x\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    /// @notice Recovers signer address from signed message hash\\n    /// @param _ethSignedMessageHash signed message\\n    /// @param _signature contatenated ECDSA r, s, v (65 bytes)\\n    /// @return Recovered address if the signature is valid, address(0) otherwise\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    /// @notice Get ECDSA r, s, v from signature\\n    /// @param sig signature (65 bytes)\\n    /// @return r ECDSA r\\n    /// @return s ECDSA s\\n    /// @return v ECDSA v\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, ExceptionsLibrary.INVALID_LENGTH);\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/vaults/VaultGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../interfaces/IProtocolGovernance.sol\\\";\\nimport \\\"../interfaces/vaults/IVaultGovernance.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../libraries/PermissionIdsLibrary.sol\\\";\\n\\n/// @notice Internal contract for managing different params.\\n/// @dev The contract should be overriden by the concrete VaultGovernance,\\n/// define different params structs and use abi.decode / abi.encode to serialize\\n/// to bytes in this contract. It also should emit events on params change.\\nabstract contract VaultGovernance is IVaultGovernance, ERC165 {\\n    InternalParams internal _internalParams;\\n    InternalParams private _stagedInternalParams;\\n    uint256 internal _internalParamsTimestamp;\\n\\n    mapping(uint256 => bytes) internal _delayedStrategyParams;\\n    mapping(uint256 => bytes) internal _stagedDelayedStrategyParams;\\n    mapping(uint256 => uint256) internal _delayedStrategyParamsTimestamp;\\n\\n    mapping(uint256 => bytes) internal _delayedProtocolPerVaultParams;\\n    mapping(uint256 => bytes) internal _stagedDelayedProtocolPerVaultParams;\\n    mapping(uint256 => uint256) internal _delayedProtocolPerVaultParamsTimestamp;\\n\\n    bytes internal _delayedProtocolParams;\\n    bytes internal _stagedDelayedProtocolParams;\\n    uint256 internal _delayedProtocolParamsTimestamp;\\n\\n    mapping(uint256 => bytes) internal _strategyParams;\\n    bytes internal _protocolParams;\\n    bytes internal _operatorParams;\\n\\n    /// @notice Creates a new contract.\\n    /// @param internalParams_ Initial Internal Params\\n    constructor(InternalParams memory internalParams_) {\\n        require(address(internalParams_.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(internalParams_.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(internalParams_.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        _internalParams = internalParams_;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IVaultGovernance\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256) {\\n        return _delayedStrategyParamsTimestamp[nft];\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256) {\\n        return _delayedProtocolPerVaultParamsTimestamp[nft];\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function delayedProtocolParamsTimestamp() external view returns (uint256) {\\n        return _delayedProtocolParamsTimestamp;\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function internalParamsTimestamp() external view returns (uint256) {\\n        return _internalParamsTimestamp;\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function internalParams() external view returns (InternalParams memory) {\\n        return _internalParams;\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function stagedInternalParams() external view returns (InternalParams memory) {\\n        return _stagedInternalParams;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return super.supportsInterface(interfaceID) || interfaceID == type(IVaultGovernance).interfaceId;\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @inheritdoc IVaultGovernance\\n    function stageInternalParams(InternalParams memory newParams) external {\\n        _requireProtocolAdmin();\\n        require(address(newParams.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(newParams.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(newParams.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        _stagedInternalParams = newParams;\\n        _internalParamsTimestamp = block.timestamp + _internalParams.protocolGovernance.governanceDelay();\\n        emit StagedInternalParams(tx.origin, msg.sender, newParams, _internalParamsTimestamp);\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function commitInternalParams() external {\\n        _requireProtocolAdmin();\\n        require(_internalParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= _internalParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _internalParams = _stagedInternalParams;\\n        delete _internalParamsTimestamp;\\n        delete _stagedInternalParams;\\n        emit CommitedInternalParams(tx.origin, msg.sender, _internalParams);\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function _requireAtLeastStrategy(uint256 nft) internal view {\\n        require(\\n            (_internalParams.protocolGovernance.isAdmin(msg.sender) ||\\n                _internalParams.registry.getApproved(nft) == msg.sender ||\\n                (_internalParams.registry.ownerOf(nft) == msg.sender)),\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n    }\\n\\n    function _requireProtocolAdmin() internal view {\\n        require(_internalParams.protocolGovernance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\n    }\\n\\n    function _requireAtLeastOperator() internal view {\\n        IProtocolGovernance governance = _internalParams.protocolGovernance;\\n        require(governance.isAdmin(msg.sender) || governance.isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\\n    }\\n\\n    // -------------------  INTERNAL, MUTATING  -------------------\\n\\n    function _createVault(address owner) internal returns (address vault, uint256 nft) {\\n        IProtocolGovernance protocolGovernance = IProtocolGovernance(_internalParams.protocolGovernance);\\n        require(\\n            protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.CREATE_VAULT),\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n        IVaultRegistry vaultRegistry = _internalParams.registry;\\n        nft = vaultRegistry.vaultsCount() + 1;\\n        vault = Clones.cloneDeterministic(address(_internalParams.singleton), bytes32(nft));\\n        vaultRegistry.registerVault(address(vault), owner);\\n    }\\n\\n    /// @notice Set Delayed Strategy Params\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function _stageDelayedStrategyParams(uint256 nft, bytes memory params) internal {\\n        _requireAtLeastStrategy(nft);\\n        _stagedDelayedStrategyParams[nft] = params;\\n        uint256 delayFactor = _delayedStrategyParams[nft].length == 0 ? 0 : 1;\\n        _delayedStrategyParamsTimestamp[nft] =\\n            block.timestamp +\\n            _internalParams.protocolGovernance.governanceDelay() *\\n            delayFactor;\\n    }\\n\\n    /// @notice Commit Delayed Strategy Params\\n    function _commitDelayedStrategyParams(uint256 nft) internal {\\n        _requireAtLeastStrategy(nft);\\n        uint256 thisDelayedStrategyParamsTimestamp = _delayedStrategyParamsTimestamp[nft];\\n        require(thisDelayedStrategyParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= thisDelayedStrategyParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _delayedStrategyParams[nft] = _stagedDelayedStrategyParams[nft];\\n        delete _stagedDelayedStrategyParams[nft];\\n        delete _delayedStrategyParamsTimestamp[nft];\\n    }\\n\\n    /// @notice Set Delayed Protocol Per Vault Params\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function _stageDelayedProtocolPerVaultParams(uint256 nft, bytes memory params) internal {\\n        _requireProtocolAdmin();\\n        _stagedDelayedProtocolPerVaultParams[nft] = params;\\n        uint256 delayFactor = _delayedProtocolPerVaultParams[nft].length == 0 ? 0 : 1;\\n        _delayedProtocolPerVaultParamsTimestamp[nft] =\\n            block.timestamp +\\n            _internalParams.protocolGovernance.governanceDelay() *\\n            delayFactor;\\n    }\\n\\n    /// @notice Commit Delayed Protocol Per Vault Params\\n    function _commitDelayedProtocolPerVaultParams(uint256 nft) internal {\\n        _requireProtocolAdmin();\\n        uint256 thisDelayedProtocolPerVaultParamsTimestamp = _delayedProtocolPerVaultParamsTimestamp[nft];\\n        require(thisDelayedProtocolPerVaultParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= thisDelayedProtocolPerVaultParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _delayedProtocolPerVaultParams[nft] = _stagedDelayedProtocolPerVaultParams[nft];\\n        delete _stagedDelayedProtocolPerVaultParams[nft];\\n        delete _delayedProtocolPerVaultParamsTimestamp[nft];\\n    }\\n\\n    /// @notice Set Delayed Protocol Params\\n    /// @param params New params\\n    function _stageDelayedProtocolParams(bytes memory params) internal {\\n        _requireProtocolAdmin();\\n        uint256 delayFactor = _delayedProtocolParams.length == 0 ? 0 : 1;\\n        _stagedDelayedProtocolParams = params;\\n        _delayedProtocolParamsTimestamp =\\n            block.timestamp +\\n            _internalParams.protocolGovernance.governanceDelay() *\\n            delayFactor;\\n    }\\n\\n    /// @notice Commit Delayed Protocol Params\\n    function _commitDelayedProtocolParams() internal {\\n        _requireProtocolAdmin();\\n        require(_delayedProtocolParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= _delayedProtocolParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _delayedProtocolParams = _stagedDelayedProtocolParams;\\n        delete _stagedDelayedProtocolParams;\\n        delete _delayedProtocolParamsTimestamp;\\n    }\\n\\n    /// @notice Set immediate strategy params\\n    /// @dev Should require nft > 0\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function _setStrategyParams(uint256 nft, bytes memory params) internal {\\n        _requireAtLeastStrategy(nft);\\n        _strategyParams[nft] = params;\\n    }\\n\\n    /// @notice Set immediate operator params\\n    /// @param params New params\\n    function _setOperatorParams(bytes memory params) internal {\\n        _requireAtLeastOperator();\\n        _operatorParams = params;\\n    }\\n\\n    /// @notice Set immediate protocol params\\n    /// @param params New params\\n    function _setProtocolParams(bytes memory params) internal {\\n        _requireProtocolAdmin();\\n        _protocolParams = params;\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice Emitted when InternalParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that were staged for commit\\n    /// @param when When the params could be committed\\n    event StagedInternalParams(address indexed origin, address indexed sender, InternalParams params, uint256 when);\\n\\n    /// @notice Emitted when InternalParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that were staged for commit\\n    event CommitedInternalParams(address indexed origin, address indexed sender, InternalParams params);\\n\\n    /// @notice Emitted when New Vault is deployed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param vaultTokens Vault tokens for this vault\\n    /// @param options Options for deploy. The details of the options structure are specified in subcontracts\\n    /// @param owner Owner of the VaultRegistry NFT for this vault\\n    /// @param vaultAddress Address of the new Vault\\n    /// @param vaultNft VaultRegistry NFT for the new Vault\\n    event DeployedVault(\\n        address indexed origin,\\n        address indexed sender,\\n        address[] vaultTokens,\\n        bytes options,\\n        address owner,\\n        address vaultAddress,\\n        uint256 vaultNft\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/utils/IDefaultAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is admin, `false` otherwise\\n    function isAdmin(address who) external view returns (bool);\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is operator, `false` otherwise\\n    function isOperator(address who) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/interfaces/IUnitPricesGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\n\\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\\n    /// @param token Address of the token\\n    /// @return The amount of token\\n    function stagedUnitPrices(address token) external view returns (uint256);\\n\\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\\n    /// @param token Address of the token\\n    /// @return Timestamp\\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\\n\\n    /// @notice Estimated amount of token worth 1 USD.\\n    /// @param token Address of the token\\n    /// @return The amount of token\\n    function unitPrices(address token) external view returns (uint256);\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\\n    /// @param token Address of the token\\n    /// @param value The amount of token\\n    function stageUnitPrice(address token, uint256 value) external;\\n\\n    /// @notice Reset staged value\\n    /// @param token Address of the token\\n    function rollbackUnitPrice(address token) external;\\n\\n    /// @notice Commit staged unit price\\n    /// @param token Address of the token\\n    function commitUnitPrice(address token) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mellow-vaults/contracts/libraries/PermissionIdsLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Stores permission ids for addresses\\nlibrary PermissionIdsLibrary {\\n    // The msg.sender is allowed to register vault\\n    uint8 constant REGISTER_VAULT = 0;\\n    // The msg.sender is allowed to create vaults\\n    uint8 constant CREATE_VAULT = 1;\\n    // The token is allowed to be transfered by vault\\n    uint8 constant ERC20_TRANSFER = 2;\\n    // The token is allowed to be added to vault\\n    uint8 constant ERC20_VAULT_TOKEN = 3;\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by any strategy\\n    uint8 constant ERC20_APPROVE = 4;\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by trusted strategy\\n    uint8 constant ERC20_APPROVE_RESTRICTED = 5;\\n    // Strategy allowed using restricted API\\n    uint8 constant TRUSTED_STRATEGY = 6;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@diamond-3-hardhat/=lib/diamond-3-hardhat/contracts/\",\r\n      \"@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\r\n      \"@mellow-vaults/=lib/mellow-vaults/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@solmate/=lib/solmate/\",\r\n      \"@zodiac/=lib/zodiac/contracts/\",\r\n      \"diamond-3-hardhat/=lib/diamond-3-hardhat/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"mellow-vaults/=lib/mellow-vaults/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"safe-contracts/=lib/safe-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"zodiac/=lib/zodiac/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/helpers/OracleHelperLibrary.sol\": {\r\n        \"OracleHelperLibrary\": \"0xB3E71C0f377d28D2Ad8d016b3D94C62B6AacE171\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitUnderflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"D6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV3Pool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCoefficientX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20RootVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCoefficientX96\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20RootVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IDepositV1Wrapper\",\"name\":\"depositWrapper\",\"type\":\"address\"}],\"name\":\"depositUsingWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniV3Pools\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MellowV1Depositor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000de2008e293722dcea18a00a096c3540c95c7e0d1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}