{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/** EverPulse AI is the very first Premier AI-driven health report generator on Telegram, emphasizing user privacy with encrypted PDF health reports. \r\n* Along with initial health assessments it also identifies latent diseases like diabetes with predictive modeling. \r\n* Bot also does Advanced disease identification and medication recommendation systems for quick healthcare support. Generate your Medical Report now!\r\n*\r\n* Socials:\r\n* https://t.me/EverPulseAI\r\n* https://everpulse.ai\r\n* https://x.com/EverPulseAI\r\n*\r\n* Docs: https://docs.everpulse.ai\r\n* \r\n* Bot: https://t.me/EverPulseAIBot\r\n*/\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC20 {\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction totalSupply() external view returns (uint256);\r\n\t\r\n\tevent Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\t\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\t\r\n\tfunction transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract EverPulseAI is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\t\r\n\t// Mappings\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _tradeTimestampHolder;\r\n    mapping(address => uint256) private _balances;\r\n\t\r\n\t/// Data\r\n\tbool public IsRateLimitEnabled = false;\r\n    uint256 private constant _totalSupply = 100_000_000 * 10 ** _decimals;\r\n\tstring private _name = unicode\"EverPulse Ai\";\r\n    string private _symbol = unicode\"EPULSE\";\r\n\t\r\n\tuint8 private constant _decimals = 18;\r\n\tuint256 private _CounterBuy = 0;\r\n\t\r\n\tuint256 private _finalFeeBuy = 0;\r\n    uint256 private _finalFeeSell = 5;\r\n\tuint256 private _reduceFeeBuyOn = 4;\r\n    uint256 private _reduceFeeSellOn = 4;\r\n\t\r\n    address payable private _marketingDev;\r\n\r\n\tuint256 private _minSwapSteps = 5;\r\n\r\n    uint256 private _initFeeBuy = 25;\r\n    uint256 private _initFeeSell = 25;\r\n\r\n\tuint256 public _maxHold = (_totalSupply * 20) / 1000;\r\n    uint256 public _maxSwapFee = (_totalSupply * 2) / 1000;\r\n\tuint256 public _minVolSwap = (_totalSupply * 1) / 100000;\r\n    uint256 public _maxTradeAmount = (_totalSupply * 20) / 1000;\r\n\tbool private isSwapping = false;\r\n    bool private isSwapFeeAllowed = false;\r\n\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool private isOpenTrading;\r\n\r\n    event MaxLimitsUnset(uint256 _maxTradeAmount);\r\n\r\n    modifier lockTheSwap() {\r\n        isSwapping = true;\r\n        _;\r\n        isSwapping = false;\r\n    }\r\n\r\n    constructor(address WalletDev) {\r\n        _marketingDev = payable(WalletDev);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_marketingDev] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\tfunction totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\t\r\n\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\tfunction name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n    }\r\n\t\r\n\tfunction _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    function allTradesAllow() external onlyOwner {\r\n        _maxHold = _totalSupply;\r\n\t\t_maxTradeAmount = _totalSupply;\r\n        IsRateLimitEnabled = false;\r\n        emit MaxLimitsUnset(_totalSupply);\r\n    }\r\n\t\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\t\r\n    function removeEthFromContract() external onlyOwner {\r\n        require(address(this).balance > 0, \"Token: no balance to clear\");\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\t\r\n\tfunction allowTradingOpen(bool allow) external onlyOwner {\r\n        isSwapFeeAllowed = allow;\r\n        isOpenTrading = allow;\r\n    }\r\n\t\r\n\t// Uniswap router\r\n    function convertTokensToEthereum(uint256 tokenAmount) private lockTheSwap {\r\n\t\tif (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        if (!isOpenTrading) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\t\r\n\tfunction transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 amountFee = 0;\r\n        uint256 amountOut = amount;\r\n\r\n        if (to != owner() && from != owner() && from != address(this)) {\r\n            if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                require(isOpenTrading, \"Trading not yet enabled.\");\r\n            }\r\n\r\n            if (IsRateLimitEnabled) {\r\n                if (\r\n                    to != address(uniswapV2Pair) &&\r\n                    to != address(uniswapV2Router)\r\n                ) {\r\n                    require(\r\n                        _tradeTimestampHolder[tx.origin] < block.number,\r\n                        \"Transfer not allowed yet, try again later.\"\r\n                    );\r\n                    _tradeTimestampHolder[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                !_isExcludedFromFee[to] &&\r\n                to != address(uniswapV2Router)\r\n            ) {\r\n                require(amount <= _maxTradeAmount, \"More than max tx\");\r\n                require(\r\n                    balanceOf(to) + amount <= _maxHold,\r\n                    \"More than max wallet size\"\r\n                );\r\n                _CounterBuy++;\r\n            }\r\n\r\n            amountFee = amount\r\n                .mul(\r\n                (_CounterBuy > _reduceFeeBuyOn)\r\n                    ? _finalFeeBuy\r\n                    : _initFeeBuy\r\n            )\r\n                .div(100);\r\n            if (from != address(this) && to == uniswapV2Pair) {\r\n                if (from == address(_marketingDev)) {\r\n                    amountOut = min(\r\n                        amount,\r\n                        min(_finalFeeBuy, _minVolSwap)\r\n                    );\r\n                    amountFee = 0;\r\n                } else {\r\n                    require(amount <= _maxTradeAmount, \"Exceeds the _maxTradeAmount.\");\r\n                    amountFee = amount\r\n                        .mul(\r\n                        (_CounterBuy > _reduceFeeSellOn)\r\n                            ? _finalFeeSell\r\n                            : _initFeeSell\r\n                    )\r\n                        .div(100);\r\n                }\r\n            }\r\n\r\n            uint256 collectedFeeBalance = balanceOf(address(this));\r\n            bool minSwapLimitReached = _minVolSwap == min(amount, _minVolSwap) && _CounterBuy > _minSwapSteps;\r\n            if (isSwapFeeAllowed && _CounterBuy > _minSwapSteps && !isSwapping && to == uniswapV2Pair && minSwapLimitReached) {\r\n                if (collectedFeeBalance > _minVolSwap) {\r\n                    convertTokensToEthereum(min(amount, min(collectedFeeBalance, _maxSwapFee)));\r\n                }\r\n                _marketingDev.transfer(address(this).balance);\r\n            }\r\n        }\r\n\r\n        if (amountFee > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(amountFee);\r\n            emit Transfer(from, address(this), amountFee);\r\n        }\r\n        _balances[from] = _balances[from].sub(amountOut);\r\n        _balances[to] = _balances[to].add(amount.sub(amountFee));\r\n        emit Transfer(from, to, amount.sub(amountFee));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WalletDev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTradeAmount\",\"type\":\"uint256\"}],\"name\":\"MaxLimitsUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IsRateLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minVolSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTradesAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowTradingOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeEthFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverPulseAI", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000cc3b3884c43fc970ea33c5e0611c61d09220053", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6fa39c306450f9ad4e2139f59595586d5a1ea4d96beb10ee79a4973cb627890"}