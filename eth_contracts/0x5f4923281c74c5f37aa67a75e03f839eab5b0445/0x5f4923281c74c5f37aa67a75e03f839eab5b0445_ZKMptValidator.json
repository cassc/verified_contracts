{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IZKMptValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IZKMptValidator {\\r\\n    struct Receipt {\\r\\n        bytes32 receiptHash;\\r\\n        bytes32 logsHash;\\r\\n    }\\r\\n\\r\\n    function validateMPT(bytes calldata _proof) external view returns (Receipt memory receipt);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mpt/ZKMptValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../interface/IZKMptValidator.sol\\\";\\r\\nimport \\\"./ZKMptVerifier.sol\\\";\\r\\n\\r\\ncontract ZKMptValidator is ZKMptVerifier, IZKMptValidator, Initializable {\\r\\n\\r\\n    struct ParsedInput {\\r\\n        bytes32 receiptHash;\\r\\n        bytes32 logHash;\\r\\n    }\\r\\n\\r\\n    struct ZkProof {\\r\\n        uint256[2] a;\\r\\n        uint256[2][2] b;\\r\\n        uint256[2] c;\\r\\n        uint256[4] inputs;\\r\\n    }\\r\\n\\r\\n    function initialize() public initializer {\\r\\n    }\\r\\n\\r\\n    function validateMPT(bytes calldata _proof) external view returns (Receipt memory receipt){\\r\\n        ZkProof memory proofData;\\r\\n        (proofData.a, proofData.b, proofData.c, proofData.inputs)\\r\\n        = abi.decode(_proof, (uint256[2], uint256[2][2], uint256[2], uint256[4]));\\r\\n        uint256[1] memory compressInput;\\r\\n        compressInput[0] = _hashInput(proofData.inputs);\\r\\n        require(verifyProof(proofData.a, proofData.b, proofData.c, compressInput), \\\"invalid zkProof\\\");\\r\\n        ParsedInput memory parsedInput = _parseInput(proofData.inputs);\\r\\n        receipt = Receipt(parsedInput.receiptHash, parsedInput.logHash);\\r\\n    }\\r\\n\\r\\n    function _parseInput(uint256[4] memory _inputs) internal pure returns (ParsedInput memory){\\r\\n        ParsedInput memory result;\\r\\n        result.receiptHash = bytes32((_inputs[1] << 128) | _inputs[0]);\\r\\n        result.logHash = bytes32((_inputs[3] << 128) | _inputs[2]);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function _hashInput(uint256[4] memory _inputs) internal pure returns (uint256) {\\r\\n        uint256 computedHash = uint256(keccak256(abi.encodePacked(_inputs[0], _inputs[1], _inputs[2], _inputs[3])));\\r\\n        return computedHash / 256;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mpt/ZKMptVerifier.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: AML\\r\\n// \\r\\n// Copyright 2017 Christian Reitwiessner\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\r\\n// deal in the Software without restriction, including without limitation the\\r\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\r\\n// sell copies of the Software, and to permit persons to whom the Software is\\r\\n// furnished to do so, subject to the following conditions:\\r\\n// The above copyright notice and this permission notice shall be included in\\r\\n// all copies or substantial portions of the Software.\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\r\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\r\\n// IN THE SOFTWARE.\\r\\n\\r\\n// 2019 OKIMS\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Pairing {\\r\\n\\r\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\r\\n\\r\\n    struct G1Point {\\r\\n        uint256 X;\\r\\n        uint256 Y;\\r\\n    }\\r\\n\\r\\n    // Encoding of field elements is: X[0] * z + X[1]\\r\\n    struct G2Point {\\r\\n        uint256[2] X;\\r\\n        uint256[2] Y;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero. \\r\\n     */\\r\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\r\\n\\r\\n        // The prime q in the base field F_q for G1\\r\\n        if (p.X == 0 && p.Y == 0) {\\r\\n            return G1Point(0, 0);\\r\\n        } else {\\r\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @return The sum of two points of G1\\r\\n     */\\r\\n    function plus(\\r\\n        G1Point memory p1,\\r\\n        G1Point memory p2\\r\\n    ) internal view returns (G1Point memory r) {\\r\\n\\r\\n        uint256[4] memory input;\\r\\n        input[0] = p1.X;\\r\\n        input[1] = p1.Y;\\r\\n        input[2] = p2.X;\\r\\n        input[3] = p2.Y;\\r\\n        bool success;\\r\\n\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\r\\n        // Use \\\"invalid\\\" to make gas estimation work\\r\\n            switch success case 0 { invalid() }\\r\\n        }\\r\\n\\r\\n        require(success,\\\"pairing-add-failed\\\");\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @return The product of a point on G1 and a scalar, i.e.\\r\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\r\\n     *         points p.\\r\\n     */\\r\\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\r\\n\\r\\n        uint256[3] memory input;\\r\\n        input[0] = p.X;\\r\\n        input[1] = p.Y;\\r\\n        input[2] = s;\\r\\n        bool success;\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\r\\n        // Use \\\"invalid\\\" to make gas estimation work\\r\\n            switch success case 0 { invalid() }\\r\\n        }\\r\\n        require (success,\\\"pairing-mul-failed\\\");\\r\\n    }\\r\\n\\r\\n    /* @return The result of computing the pairing check\\r\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\r\\n     *         For example,\\r\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\r\\n     */\\r\\n    function pairing(\\r\\n        G1Point memory a1,\\r\\n        G2Point memory a2,\\r\\n        G1Point memory b1,\\r\\n        G2Point memory b2,\\r\\n        G1Point memory c1,\\r\\n        G2Point memory c2,\\r\\n        G1Point memory d1,\\r\\n        G2Point memory d2\\r\\n    ) internal view returns (bool) {\\r\\n\\r\\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\\r\\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\\r\\n        uint256 inputSize = 24;\\r\\n        uint256[] memory input = new uint256[](inputSize);\\r\\n\\r\\n        for (uint256 i = 0; i < 4; i++) {\\r\\n            uint256 j = i * 6;\\r\\n            input[j + 0] = p1[i].X;\\r\\n            input[j + 1] = p1[i].Y;\\r\\n            input[j + 2] = p2[i].X[0];\\r\\n            input[j + 3] = p2[i].X[1];\\r\\n            input[j + 4] = p2[i].Y[0];\\r\\n            input[j + 5] = p2[i].Y[1];\\r\\n        }\\r\\n\\r\\n        uint256[1] memory out;\\r\\n        bool success;\\r\\n\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\r\\n        // Use \\\"invalid\\\" to make gas estimation work\\r\\n            switch success case 0 { invalid() }\\r\\n        }\\r\\n\\r\\n        require(success,\\\"pairing-opcode-failed\\\");\\r\\n\\r\\n        return out[0] != 0;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZKMptVerifier {\\r\\n\\r\\n    using Pairing for *;\\r\\n\\r\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\r\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\r\\n\\r\\n    struct VerifyingKey {\\r\\n        Pairing.G1Point alfa1;\\r\\n        Pairing.G2Point beta2;\\r\\n        Pairing.G2Point gamma2;\\r\\n        Pairing.G2Point delta2;\\r\\n        Pairing.G1Point[2] IC;\\r\\n    }\\r\\n\\r\\n    struct Proof {\\r\\n        Pairing.G1Point A;\\r\\n        Pairing.G2Point B;\\r\\n        Pairing.G1Point C;\\r\\n    }\\r\\n\\r\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\r\\n        vk.alfa1 = Pairing.G1Point(uint256(2678600260555495616753815368476186838356348758339950899331204177355351665650), uint256(18695704648399853341383334171981070401059789537169583891477431355930317254211));\\r\\n        vk.beta2 = Pairing.G2Point([uint256(17364746540401716807360877470835138388995558999455528907210437766233832293718), uint256(7469171900258652344832254712884027722557370604317136014182255160189931794994)], [uint256(15741898557801836118682642964587202955664190708773685177763635276470485465972), uint256(20445230717186921639498379990709868967002310261340856532839671258406432530972)]);\\r\\n        vk.gamma2 = Pairing.G2Point([uint256(3961588080992602039769306720570295296633534912416593215821646499723615525831), uint256(8898038057106326560437272449792325349489422803589192069429023173882039415902)], [uint256(17637200423407438320252224845802153882037412947006266128028865901950806416244), uint256(21496593751705824480232167215361606187950254278483701945917507742960891239288)]);\\r\\n        vk.delta2 = Pairing.G2Point([uint256(5383617415456433463231935077871355546631170540713408408606186815306277751633), uint256(6765937569339433789794058407235622519965792325199446102544440989169116597125)], [uint256(1820612112354795435991732275028094784293302832454312652021763996142652374595), uint256(825466534512603757172784478886114766162841041009036022526085482288633493422)]);\\r\\n        vk.IC[0] = Pairing.G1Point(uint256(8931159439728414380385993045503195868581591348390388165937405742300133373635), uint256(14827189442322873939282305747725974603006812425265098350951140518602403771656));\\r\\n        vk.IC[1] = Pairing.G1Point(uint256(1022789490768641092621404978702621914191368813759376820039897212965167708169), uint256(18360418502139285932008505622254933612154820710174613990059821607771169341721));\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\r\\n     *          above and the public inputs\\r\\n     */\\r\\n    function verifyProof(\\r\\n        uint256[2] memory a,\\r\\n        uint256[2][2] memory b,\\r\\n        uint256[2] memory c,\\r\\n        uint256[1] memory input\\r\\n    ) public view returns (bool r) {\\r\\n\\r\\n        Proof memory proof;\\r\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\r\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\r\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\r\\n\\r\\n        VerifyingKey memory vk = verifyingKey();\\r\\n\\r\\n        // Compute the linear combination vk_x\\r\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\r\\n\\r\\n        // Make sure that proof.A, B, and C are each less than the prime q\\r\\n        require(proof.A.X < PRIME_Q, \\\"verifier-aX-gte-prime-q\\\");\\r\\n        require(proof.A.Y < PRIME_Q, \\\"verifier-aY-gte-prime-q\\\");\\r\\n\\r\\n        require(proof.B.X[0] < PRIME_Q, \\\"verifier-bX0-gte-prime-q\\\");\\r\\n        require(proof.B.Y[0] < PRIME_Q, \\\"verifier-bY0-gte-prime-q\\\");\\r\\n\\r\\n        require(proof.B.X[1] < PRIME_Q, \\\"verifier-bX1-gte-prime-q\\\");\\r\\n        require(proof.B.Y[1] < PRIME_Q, \\\"verifier-bY1-gte-prime-q\\\");\\r\\n\\r\\n        require(proof.C.X < PRIME_Q, \\\"verifier-cX-gte-prime-q\\\");\\r\\n        require(proof.C.Y < PRIME_Q, \\\"verifier-cY-gte-prime-q\\\");\\r\\n\\r\\n        // Make sure that every input is less than the snark scalar field\\r\\n        for (uint256 i = 0; i < input.length; i++) {\\r\\n            require(input[i] < SNARK_SCALAR_FIELD,\\\"verifier-gte-snark-scalar-field\\\");\\r\\n            vk_x = Pairing.plus(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\r\\n        }\\r\\n\\r\\n        vk_x = Pairing.plus(vk_x, vk.IC[0]);\\r\\n\\r\\n        return Pairing.pairing(\\r\\n            Pairing.negate(proof.A),\\r\\n            proof.B,\\r\\n            vk.alfa1,\\r\\n            vk.beta2,\\r\\n            vk_x,\\r\\n            vk.gamma2,\\r\\n            proof.C,\\r\\n            vk.delta2\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"validateMPT\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"logsHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IZKMptValidator.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZKMptValidator", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}