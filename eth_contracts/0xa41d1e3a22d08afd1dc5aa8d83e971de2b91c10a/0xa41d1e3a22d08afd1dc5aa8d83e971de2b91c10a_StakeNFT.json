{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract StakeNFT {\\r\\n    //State variabble\\r\\n    uint private _stakingId = 0;\\r\\n    uint private _totalStaked = 0;\\r\\n    address private constant NFTToken = 0x0FCBD68251819928C8f6D182fC04bE733fA94170;\\r\\n    address private constant REWARDToken = 0x6982508145454Ce325dDbE47a25d4ec3d2311933;\\r\\n\\r\\n    address private admin;\\r\\n    uint private constant rate = 36_000_000e18; // per staking for 90 days\\r\\n    \\r\\n    uint private constant startTimestamp = 1694332800; // September 10th 2023, 00:00 PST\\r\\n    uint private endTimestamp = startTimestamp + 90 days; // December 9th 2023, 00:00 PST (default of 90 days staking period)\\r\\n\\r\\n    bool private _started;\\r\\n\\r\\n    //constructor\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    //enumerator\\r\\n    enum StakingStatus {\\r\\n        InActive,\\r\\n        Active,\\r\\n        Cancelled\\r\\n    }\\r\\n\\r\\n    //structs\\r\\n    struct Staking {\\r\\n        address staker;\\r\\n        address token;\\r\\n        uint256 tokenId;\\r\\n        uint256 stakeTime;\\r\\n        uint256 releaseTime;\\r\\n        uint256 claimedAmount;\\r\\n        StakingStatus status;\\r\\n        uint256 StakingId;\\r\\n    }\\r\\n\\r\\n    //mapping\\r\\n    mapping(address => uint256) private stakedCount;\\r\\n    mapping(uint256 => Staking) private _StakedItem;\\r\\n\\r\\n    //event\\r\\n    event tokenStaked(\\r\\n        address indexed staker,\\r\\n        address indexed token,\\r\\n        uint256 token_id,\\r\\n        StakingStatus status,\\r\\n        uint256 StakingId\\r\\n    );\\r\\n    event tokenClaimStatus(\\r\\n        address indexed token,\\r\\n        uint256 indexed token_id,\\r\\n        StakingStatus indexed status,\\r\\n        uint256 StakingId\\r\\n    );\\r\\n    event tokenClaimComplete(\\r\\n        address indexed token,\\r\\n        uint256 indexed token_id,\\r\\n        StakingStatus indexed status,\\r\\n        uint256 StakingId\\r\\n    );\\r\\n    event tokenCancelComplete(\\r\\n        address indexed token,\\r\\n        uint256 indexed token_id,\\r\\n        StakingStatus indexed status,\\r\\n        uint256 StakingId\\r\\n    );\\r\\n\\r\\n    //function to call another function\\r\\n    function callStakeToken(address token, uint256[] memory _tokenID) public {\\r\\n        require(_started == true, \\\"Staking is paused\\\");\\r\\n\\r\\n        require(block.timestamp >= startTimestamp, \\\"Staking period not started\\\");\\r\\n        require(block.timestamp < endTimestamp, \\\"Staking period is over\\\");\\r\\n\\r\\n        require(token == NFTToken, \\\"incorrect NFT to stake\\\"); // hardcode the NFT smart contract to allow only specific NFT into staking, assume 0xd2...d005 as NFT contract address\\r\\n        \\r\\n        require(_tokenID.length > 0, \\\"You have to select tokens to be staked\\\");\\r\\n\\r\\n        require(\\r\\n            stakedCount[msg.sender] + _tokenID.length <= 20,\\r\\n            \\\"you can stake up to 20 tokens\\\"\\r\\n        );\\r\\n\\r\\n        stakeToken(_tokenID);\\r\\n    }\\r\\n\\r\\n    //function to transfer NFT from user to contract\\r\\n    function stakeToken(uint256[] memory tokenId) private {\\r\\n        uint256 releaseTime = block.timestamp;\\r\\n\\r\\n        require(_totalStaked + tokenId.length <= 500, \\\"max stake amount reached\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < tokenId.length; i++) {\\r\\n            IERC721(NFTToken).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                tokenId[i]\\r\\n            ); // User must approve() this contract address via the NFT ERC721 contract before NFT can be transfered\\r\\n\\r\\n            uint256 currentStakingId = _stakingId;\\r\\n\\r\\n            Staking memory staking = Staking(\\r\\n                msg.sender,\\r\\n                NFTToken,\\r\\n                tokenId[i],\\r\\n                releaseTime,\\r\\n                releaseTime,\\r\\n                0,\\r\\n                StakingStatus.Active,\\r\\n                currentStakingId\\r\\n            );\\r\\n\\r\\n            _StakedItem[_stakingId] = staking;\\r\\n            _stakingId++;\\r\\n            _totalStaked++;\\r\\n\\r\\n            emit tokenStaked(\\r\\n                msg.sender,\\r\\n                staking.token,\\r\\n                staking.tokenId,\\r\\n                staking.status,\\r\\n                currentStakingId\\r\\n            );\\r\\n        }\\r\\n\\r\\n        stakedCount[msg.sender] += tokenId.length;\\r\\n    }\\r\\n\\r\\n    //function to view staked NFT\\r\\n    function viewStake(uint256 stakingId) public view returns (Staking memory) {\\r\\n        return _StakedItem[stakingId];\\r\\n    }\\r\\n\\r\\n    // function to get list of staked tokens\\r\\n    function viewMyStakedNfts(address user) external view returns (Staking[] memory) {\\r\\n        Staking[] memory list = new Staking[](stakedCount[user]);\\r\\n        uint256 cnt = 0;\\r\\n        for (uint256 index = 0; index < _stakingId; index++){\\r\\n            if(_StakedItem[index].staker == user && _StakedItem[index].status == StakingStatus.Active) {\\r\\n                list[cnt++] = _StakedItem[index];\\r\\n            }\\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    //function to check NFT stake duration status\\r\\n    function checkStake(\\r\\n        uint256 stakingId,\\r\\n        address staker\\r\\n    ) public returns (Staking memory) {\\r\\n        Staking storage staking = _StakedItem[stakingId];\\r\\n\\r\\n        require(\\r\\n            staker == msg.sender,\\r\\n            \\\"You cannot check this staking as it is not listed under this address\\\"\\r\\n        );\\r\\n        require(\\r\\n            staking.status == StakingStatus.Active,\\r\\n            \\\"Staking is not active or claimed\\\"\\r\\n        );\\r\\n\\r\\n        emit tokenClaimStatus(\\r\\n            staking.token,\\r\\n            staking.tokenId,\\r\\n            staking.status,\\r\\n            staking.StakingId\\r\\n        );\\r\\n        return _StakedItem[stakingId];\\r\\n    }\\r\\n\\r\\n    //function to claim reward token if NFT stake duration is completed\\r\\n    function claimReward(uint256 stakingId) public {\\r\\n        uint256 amount;\\r\\n\\r\\n        Staking storage staking = _StakedItem[stakingId];\\r\\n\\r\\n        require(\\r\\n            staking.staker == msg.sender,\\r\\n            \\\"You cannot cancel this staking as it is not listed under this address\\\"\\r\\n        );\\r\\n        require(\\r\\n            staking.status == StakingStatus.Active,\\r\\n            \\\"Your reward is either not claimable yet or has been claimed\\\"\\r\\n        );\\r\\n\\r\\n        uint256 maxTimestamp = endTimestamp;\\r\\n        uint256 curTimestamp = block.timestamp;\\r\\n\\r\\n        uint256 releaseTime = curTimestamp < maxTimestamp\\r\\n            ? curTimestamp\\r\\n            : maxTimestamp;\\r\\n\\r\\n        if (releaseTime <= staking.releaseTime) return;\\r\\n\\r\\n        amount = (rate / 90 days) * (releaseTime - staking.releaseTime);\\r\\n\\r\\n        uint256 balance = IERC20(REWARDToken).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            amount = balance;\\r\\n        }\\r\\n\\r\\n        staking.releaseTime = releaseTime;\\r\\n        staking.claimedAmount += amount;\\r\\n\\r\\n        emit tokenClaimComplete(\\r\\n            staking.token,\\r\\n            staking.tokenId,\\r\\n            staking.status,\\r\\n            staking.StakingId\\r\\n        );\\r\\n\\r\\n        if (amount != 0) {\\r\\n            IERC20(REWARDToken).transfer(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //function to cancel NFT stake\\r\\n    function unStake(uint256[] memory stakingId) public {\\r\\n        require(\\r\\n            stakingId.length > 0,\\r\\n            \\\"You have to select tokens to be unstaked\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < stakingId.length; i++) {\\r\\n            Staking storage staking = _StakedItem[stakingId[i]];\\r\\n\\r\\n            claimReward(stakingId[i]);\\r\\n\\r\\n            staking.status = StakingStatus.Cancelled;\\r\\n            IERC721(staking.token).transferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                staking.tokenId\\r\\n            );\\r\\n            _totalStaked--;\\r\\n            \\r\\n            emit tokenCancelComplete(\\r\\n                staking.token,\\r\\n                staking.tokenId,\\r\\n                staking.status,\\r\\n                staking.StakingId\\r\\n            );\\r\\n        }\\r\\n\\r\\n        stakedCount[msg.sender] -= stakingId.length;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public onlyAdmin {\\r\\n        IERC20(REWARDToken).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function toggleStake(bool newStat) public onlyAdmin {\\r\\n        _started = newStat;\\r\\n    }\\r\\n\\r\\n    function setEnd(uint256 newEndTimestamp) public onlyAdmin {\\r\\n        require(newEndTimestamp > block.timestamp, \\\"Cannot set end in the past\\\");\\r\\n        require(newEndTimestamp > startTimestamp, \\\"Cannot set end before start\\\");\\r\\n        require(newEndTimestamp < endTimestamp, \\\"Cannot extend staking period\\\");\\r\\n        endTimestamp = newEndTimestamp;\\r\\n    }\\r\\n\\r\\n    function getRewardRate() external pure returns (uint256) {\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n    function getNFTAddress() external pure returns (address) {\\r\\n        return NFTToken;\\r\\n    }\\r\\n\\r\\n    function getRewardToken() external pure returns (address) {\\r\\n        return REWARDToken;\\r\\n    }\\r\\n\\r\\n    function getStakingIndex() external view returns (uint256) {\\r\\n        return _stakingId;\\r\\n    }\\r\\n\\r\\n    function getTotalStaked() external view returns (uint256) {\\r\\n        return _totalStaked;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(admin == msg.sender, \\\"OA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setNewAdmin(address newAdd) external onlyAdmin {\\r\\n        admin = newAdd;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"name\":\"tokenCancelComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"name\":\"tokenClaimComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"name\":\"tokenClaimStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"name\":\"tokenStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenID\",\"type\":\"uint256[]\"}],\"name\":\"callStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"checkStake\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeNFT.Staking\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdd\",\"type\":\"address\"}],\"name\":\"setNewAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStat\",\"type\":\"bool\"}],\"name\":\"toggleStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingId\",\"type\":\"uint256[]\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewMyStakedNfts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeNFT.Staking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"viewStake\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum StakeNFT.StakingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeNFT.Staking\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakeNFT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f547a0e94d7a4999b79e34818dd8294b4fe27f7cc548c0fdffbbe0caae76acd"}