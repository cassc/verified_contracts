{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/interfaces/IERC20.sol\\\";\\n\\nerror NotStaked();\\nerror NoStakers();\\nerror CannotStakeZeroTokens();\\n\\ncontract Staking {\\n    event UserStaked(address indexed who, uint256 amount);\\n    event UserUnstaked(address indexed who, uint256 amount);\\n\\n    event RewardsPayout(address indexed to, uint256 amount);\\n    event CapturedRewards(address indexed from, uint256 amount);\\n\\n    event RewardsToTreasury(uint256 amount);\\n\\n    struct StakingRecord {\\n        uint256 stakedAmount;\\n        uint256 rewardsPerStakedTokenSnapshot; // Scaled by a WAD\\n    }\\n\\n    uint256 private constant WAD = 1e18;\\n\\n    /// @notice Address of the treasury where 50% of the profits\\n    /// will be sent.\\n    address public immutable treasury;\\n\\n    IERC20 public immutable weth;\\n    IERC20 public immutable prtc;\\n\\n    /// @notice Amount of `WETH` rewards per staked token.\\n    /// @dev Scaled by a WAD.\\n    uint256 public rewardsPerStakedToken;\\n    /// @notice Total amount of `prtc` staked.\\n    uint256 public totalStaked;\\n\\n    mapping(address => StakingRecord) public stakingRecords;\\n\\n    constructor(IERC20 _prtc, IERC20 _weth, address _treasury) {\\n        prtc = _prtc;\\n        weth = _weth;\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice Method to claim `WETH` rewards accumulated in the\\n    /// contract.\\n    function claimRewards() public {\\n        StakingRecord storage userRecord = stakingRecords[msg.sender];\\n\\n        if (userRecord.stakedAmount == 0) revert NotStaked();\\n\\n        uint256 userReward = userRecord.stakedAmount\\n            * (rewardsPerStakedToken - userRecord.rewardsPerStakedTokenSnapshot) / WAD;\\n\\n        userRecord.rewardsPerStakedTokenSnapshot = rewardsPerStakedToken;\\n\\n        if (userReward != 0) {\\n            weth.transfer(msg.sender, userReward);\\n            emit RewardsPayout(msg.sender, userReward);\\n        }\\n    }\\n\\n    /// @notice Retrieve any users' `WETH` rewards.\\n    function previewRewards(address user) public view returns (uint256) {\\n        StakingRecord storage userRecord = stakingRecords[user];\\n\\n        uint256 totalStake = userRecord.stakedAmount;\\n\\n        if (totalStake == 0) return 0;\\n\\n        uint256 userReward =\\n            totalStake * (rewardsPerStakedToken - userRecord.rewardsPerStakedTokenSnapshot) / WAD;\\n\\n        return userReward;\\n    }\\n\\n    /// @notice Retrieve users' staked amount.\\n    function balanceOf(address user) public view returns (uint256) {\\n        return stakingRecords[user].stakedAmount;\\n    }\\n\\n    /// @notice Staking method that accepts `prtc`. Profits from the\\n    /// vault will be distributed to this contract and staking users\\n    /// will be rewarded with `WETH`.\\n    /// @param amount Amount of `prtc` to be staked.\\n    function stake(uint256 amount) external {\\n        if (amount == 0) revert CannotStakeZeroTokens();\\n\\n        StakingRecord storage userPosition = stakingRecords[msg.sender];\\n\\n        if (userPosition.stakedAmount != 0) claimRewards();\\n\\n        prtc.transferFrom(msg.sender, address(this), amount);\\n\\n        totalStaked += amount;\\n\\n        userPosition.stakedAmount += amount;\\n        userPosition.rewardsPerStakedTokenSnapshot = rewardsPerStakedToken;\\n\\n        emit UserStaked(msg.sender, amount);\\n    }\\n\\n    /// @notice Method to unstake all `prtc`.\\n    function unstake() external {\\n        unstake(type(uint256).max);\\n    }\\n\\n    /// @notice Method to unstake `prtc`. It will calculate the portion\\n    /// of `WETH` rewards for the user and send them.\\n    function unstake(uint256 _amount) public {\\n        if (_amount == 0) _amount = type(uint256).max;\\n\\n        StakingRecord storage userRecord = stakingRecords[msg.sender];\\n\\n        uint256 userStakedAmount = userRecord.stakedAmount;\\n\\n        if (userStakedAmount == 0) revert NotStaked();\\n\\n        uint256 userReward = previewRewards(msg.sender);\\n\\n        if (_amount >= userStakedAmount) {\\n            totalStaked -= userStakedAmount;\\n            delete stakingRecords[msg.sender];\\n\\n            prtc.transfer(msg.sender, userStakedAmount);\\n            emit UserUnstaked(msg.sender, userStakedAmount);\\n        } else {\\n            totalStaked -= _amount;\\n            userRecord.stakedAmount -= _amount;\\n            userRecord.rewardsPerStakedTokenSnapshot = rewardsPerStakedToken;\\n\\n            prtc.transfer(msg.sender, _amount);\\n            emit UserUnstaked(msg.sender, _amount);\\n        }\\n\\n        if (userReward != 0) {\\n            weth.transfer(msg.sender, userReward);\\n            emit RewardsPayout(msg.sender, userReward);\\n        }\\n    }\\n\\n    /// @notice Method to distribute `WETH` rewards.\\n    /// @dev Anyone that wants to distribute `WETH` can call this.\\n    /// @param amount The amount of `WETH` to be distributed to the contract.\\n    function distribute(uint256 amount) external {\\n        if (totalStaked == 0) revert NoStakers();\\n\\n        uint256 amountForTreasury = amount / 2;\\n        uint256 amountForStakers = amount - amountForTreasury;\\n\\n        weth.transferFrom(msg.sender, treasury, amountForTreasury);\\n        weth.transferFrom(msg.sender, address(this), amountForStakers);\\n\\n        // Distribute the other 50% to the stakers.\\n        rewardsPerStakedToken += amountForStakers * WAD / totalStaked;\\n\\n        emit RewardsToTreasury(amountForTreasury);\\n        emit CapturedRewards(msg.sender, amountForStakers);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_prtc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotStakeZeroTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CapturedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"previewRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prtc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerStakedTokenSnapshot\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b9098d3669a78e9afe8b94a97290407400d9da31000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002a1aa732fe04494be2a24e90b120ba1864da3b17", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}