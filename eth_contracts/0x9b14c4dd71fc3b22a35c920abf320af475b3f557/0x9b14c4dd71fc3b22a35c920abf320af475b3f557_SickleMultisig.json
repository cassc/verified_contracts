{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/SickleMultisig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from\\n    \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract SickleMultisig {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Data structures\\n\\n    struct Proposal {\\n        address[] targets;\\n        bytes[] calldatas;\\n        string description;\\n    }\\n\\n    struct Transaction {\\n        // Calls to be executed in the transaction\\n        Proposal proposal;\\n        // Transaction state\\n        bool exists;\\n        bool executed;\\n        bool cancelled;\\n        // Settings nonce that the transaction was created with\\n        uint256 settingsNonce;\\n        // Signing state\\n        uint256 signatures;\\n        mapping(address => bool) signed;\\n    }\\n\\n    // Errors\\n\\n    error NotASigner();\\n    error NotMultisig();\\n\\n    error InvalidProposal();\\n    error InvalidThreshold();\\n\\n    error TransactionDoesNotExist();\\n    error TransactionNotReadyToExecute();\\n    error TransactionNoLongerValid();\\n    error TransactionAlreadyExists();\\n    error TransactionAlreadySigned();\\n    error TransactionAlreadyExecuted();\\n    error TransactionAlreadyCancelled();\\n\\n    error SignerAlreadyAdded();\\n    error SignerAlreadyRemoved();\\n    error SignerCannotBeRemoved();\\n\\n    // Events\\n\\n    event SignerAdded(address signer);\\n    event SignerRemoved(address signer);\\n\\n    event ThresholdChanged(uint256 newThreshold);\\n\\n    event TransactionProposed(uint256 proposalId, address signer);\\n    event TransactionSigned(uint256 proposalId, address signer);\\n    event TransactionExecuted(uint256 proposalId, address signer);\\n    event TransactionCancelled(uint256 proposalId, address signer);\\n\\n    // Public storage\\n\\n    uint256 public threshold;\\n    uint256 public settingsNonce;\\n    mapping(uint256 => Transaction) public transactions;\\n\\n    // Initialization\\n\\n    constructor(address initialSigner) {\\n        // Initialize with only a single signer and a threshold of 1. The signer\\n        // can add more signers and update the threshold using a proposal.\\n        _addSigner(initialSigner);\\n        _setThreshold(1);\\n    }\\n\\n    // Signer-only actions\\n\\n    /// @notice Propose a new transaction to be executed from the multisig\\n    /// @custom:access Restricted to multisig signers.\\n    function propose(Proposal memory proposal)\\n        public\\n        onlySigner\\n        returns (uint256)\\n    {\\n        return _propose(proposal);\\n    }\\n\\n    /// @notice Sign a transaction\\n    /// @custom:access Restricted to multisig signers.\\n    function sign(uint256 proposalId) public onlySigner {\\n        _sign(proposalId);\\n    }\\n\\n    /// @notice Cancel a transaction that hasn't been executed or invalidated\\n    /// @custom:access Restricted to multisig signers.\\n    function cancel(uint256 proposalId) public onlySigner {\\n        _cancel(proposalId);\\n    }\\n\\n    /// @notice Execute a transaction that has passed the signatures threshold\\n    /// @custom:access Restricted to multisig signers.\\n    function execute(uint256 proposalId) public onlySigner {\\n        _execute(proposalId);\\n    }\\n\\n    // Multisig-only actions\\n\\n    /// @notice Add a signer to the multisig\\n    /// @custom:access Restricted to multisig transactions.\\n    function addSigner(address signer) public onlyMultisig {\\n        _addSigner(signer);\\n    }\\n\\n    /// @notice Remove a signer from the multisig\\n    /// @custom:access Restricted to multisig transactions.\\n    function removeSigner(address signer) public onlyMultisig {\\n        _removeSigner(signer);\\n    }\\n\\n    /// @notice Remove a signer from the multisig\\n    /// @custom:access Restricted to multisig transactions.\\n    function replaceSigner(\\n        address oldSigner,\\n        address newSigner\\n    ) public onlyMultisig {\\n        _addSigner(newSigner);\\n        _removeSigner(oldSigner);\\n    }\\n\\n    /// @notice Set a new signatures threshold for the multisig\\n    /// @custom:access Restricted to multisig transactions.\\n    function setThreshold(uint256 newThreshold) public onlyMultisig {\\n        _setThreshold(newThreshold);\\n    }\\n\\n    // Public functions\\n\\n    function signerCount() public view returns (uint256) {\\n        return _signers.length();\\n    }\\n\\n    function signerAddresses() public view returns (address[] memory) {\\n        return _signers.values();\\n    }\\n\\n    function isSigner(address signer) public view returns (bool) {\\n        return _signers.contains(signer);\\n    }\\n\\n    function hashProposal(Proposal memory proposal)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(\\n            keccak256(\\n                abi.encode(\\n                    block.chainid,\\n                    proposal.targets,\\n                    proposal.calldatas,\\n                    proposal.description\\n                )\\n            )\\n        );\\n    }\\n\\n    function getProposal(uint256 proposalId)\\n        public\\n        view\\n        returns (Proposal memory)\\n    {\\n        return transactions[proposalId].proposal;\\n    }\\n\\n    function exists(uint256 proposalId) public view returns (bool) {\\n        return transactions[proposalId].exists;\\n    }\\n\\n    function executed(uint256 proposalId) public view returns (bool) {\\n        return transactions[proposalId].executed;\\n    }\\n\\n    function cancelled(uint256 proposalId) public view returns (bool) {\\n        return transactions[proposalId].cancelled;\\n    }\\n\\n    function signatures(uint256 proposalId) public view returns (uint256) {\\n        return transactions[proposalId].signatures;\\n    }\\n\\n    function signed(\\n        uint256 proposalId,\\n        address signer\\n    ) public view returns (bool) {\\n        return transactions[proposalId].signed[signer];\\n    }\\n\\n    // Modifiers\\n\\n    modifier onlySigner() {\\n        if (!isSigner(msg.sender)) {\\n            revert NotASigner();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier onlyMultisig() {\\n        if (msg.sender != address(this)) {\\n            revert NotMultisig();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier changesSettings() {\\n        _;\\n        settingsNonce += 1;\\n    }\\n\\n    // Internals\\n\\n    EnumerableSet.AddressSet private _signers;\\n\\n    function _propose(Proposal memory proposal) internal returns (uint256) {\\n        // Check that the proposal is valid\\n        if (proposal.targets.length != proposal.calldatas.length) {\\n            revert InvalidProposal();\\n        }\\n\\n        // Retrieve transaction details\\n        uint256 proposalId = hashProposal(proposal);\\n        Transaction storage transaction = transactions[proposalId];\\n\\n        // Validate transaction state\\n        if (transaction.exists) revert TransactionAlreadyExists();\\n\\n        // Initialize transaction statue\\n        transaction.exists = true;\\n        transaction.proposal = proposal;\\n        transaction.settingsNonce = settingsNonce;\\n\\n        // Emit event\\n        emit TransactionProposed(proposalId, msg.sender);\\n\\n        // Add a signature from the current signer\\n        _sign(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    function _validateTransaction(Transaction storage transaction)\\n        internal\\n        view\\n    {\\n        if (!transaction.exists) revert TransactionDoesNotExist();\\n        if (transaction.executed) revert TransactionAlreadyExecuted();\\n        if (transaction.cancelled) revert TransactionAlreadyCancelled();\\n        if (transaction.settingsNonce != settingsNonce) {\\n            revert TransactionNoLongerValid();\\n        }\\n    }\\n\\n    function _sign(uint256 proposalId) internal {\\n        // Retrieve transaction details\\n        Transaction storage transaction = transactions[proposalId];\\n\\n        // Validate transaction state\\n        _validateTransaction(transaction);\\n        if (transaction.signed[msg.sender]) revert TransactionAlreadySigned();\\n\\n        // Update transaction state\\n        transaction.signatures += 1;\\n        transaction.signed[msg.sender] = true;\\n\\n        // Emit event\\n        emit TransactionSigned(proposalId, msg.sender);\\n    }\\n\\n    function _cancel(uint256 proposalId) internal {\\n        // Retrieve transaction details\\n        Transaction storage transaction = transactions[proposalId];\\n\\n        // Validate transaction state\\n        _validateTransaction(transaction);\\n\\n        // Update transaction state\\n        transaction.cancelled = true;\\n\\n        // Emit event\\n        emit TransactionCancelled(proposalId, msg.sender);\\n    }\\n\\n    function _execute(uint256 proposalId) internal {\\n        // Retrieve transaction details\\n        Transaction storage transaction = transactions[proposalId];\\n\\n        // Validate transaction state\\n        _validateTransaction(transaction);\\n\\n        // Check if the transaction has enough signatures\\n        if (transaction.signatures < threshold) {\\n            revert TransactionNotReadyToExecute();\\n        }\\n\\n        // Update transaction state\\n        transaction.executed = true;\\n\\n        // Execute calls\\n        uint256 length = transaction.proposal.targets.length;\\n        for (uint256 i; i < length;) {\\n            _call(\\n                transaction.proposal.targets[i],\\n                transaction.proposal.calldatas[i]\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // And finally emit event\\n        emit TransactionExecuted(proposalId, msg.sender);\\n    }\\n\\n    function _call(address target, bytes memory data) internal {\\n        (bool success, bytes memory result) = target.call(data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(32, result), mload(result))\\n            }\\n        }\\n    }\\n\\n    function _addSigner(address signer) internal changesSettings {\\n        if (isSigner(signer)) revert SignerAlreadyAdded();\\n\\n        _signers.add(signer);\\n\\n        emit SignerAdded(signer);\\n    }\\n\\n    function _removeSigner(address signer) internal changesSettings {\\n        if (!isSigner(signer)) revert SignerAlreadyRemoved();\\n        if (signerCount() == 1) revert SignerCannotBeRemoved();\\n\\n        _signers.remove(signer);\\n\\n        emit SignerRemoved(signer);\\n\\n        if (threshold > signerCount()) {\\n            _setThreshold(signerCount());\\n        }\\n    }\\n\\n    function _setThreshold(uint256 newThreshold) internal changesSettings {\\n        if (newThreshold > signerCount() || newThreshold == 0) {\\n            revert InvalidThreshold();\\n        }\\n\\n        threshold = newThreshold;\\n\\n        emit ThresholdChanged(newThreshold);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@morpho-blue/=lib/morpho-blue/src/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"morpho-blue/=lib/morpho-blue/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotASigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMultisig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerAlreadyRemoved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerCannotBeRemoved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionAlreadyCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionAlreadySigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionNoLongerValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionNotReadyToExecute\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"TransactionProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"TransactionSigned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct SickleMultisig.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct SickleMultisig.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct SickleMultisig.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"replaceSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settingsNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"signed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct SickleMultisig.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"settingsNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatures\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SickleMultisig", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d4627ecb405b64448ee6b07dcf860bf55590c83d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}