{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0 ;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    function _disableInitializers() internal {\r\n        _initialized = true;\r\n    }\r\n}\r\n\r\ncontract FinanceToken is Initializable{\r\n    using SafeERC20 for IERC20;\r\n    uint256 constant public day = 1 days;\r\n    bool private reentrancyLock;\r\n    address public nmtToken;\r\n    uint256 public financingId;\r\n    mapping(uint256 => FinanceMsg) public financeMsg;\r\n    uint256 public purchaseNumber;\r\n    mapping(uint256 => UserMsg) public userMsg;\r\n    mapping(address => uint256[]) private userInfo; \r\n\r\n    event Launch(uint256 indexed financingId, address indexed sponsor);\r\n    event PurchaseNMTWithToken(uint256 _purchaseNumber, address _sender, uint256 _purchaseNMTQuantity, address _paymentToken, uint256 _paymentTokenAmount);\r\n    event WithdrawNMTToken(uint256 _purchaseNumber, uint256 withdrawAmount);\r\n    event Refund(uint256 _financingId, uint256 amount);\r\n    \r\n    struct FinanceMsg {\r\n        address sponsor;\r\n        uint256 endTime;\r\n        uint256 unlockIntervalDays;\r\n        uint256 unlockPercentage;\r\n        uint256 sellNMTQuantity;\r\n        address tokenReceiveAddress;\r\n        address paymentToken;\r\n        uint256 paymentPrice;\r\n        uint256 soldNMTQuantity;\r\n    }\r\n\r\n    struct UserMsg{\r\n        address user;\r\n        uint256 startTime;\r\n        uint256 unlockIntervalDays;\r\n        uint256 unlockPercentage;\r\n        uint256 withdrawnAmount;\r\n        uint256 purchaseNMTQuantity;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!reentrancyLock);\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n    constructor(){_disableInitializers();}\r\n\r\n    function initialize(address _nmtToken) external initializer{\r\n        __FinanceToken_init_unchained(_nmtToken);\r\n    }\r\n\r\n    function __FinanceToken_init_unchained(address _nmtToken) internal initializer{\r\n        nmtToken = _nmtToken;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n    function launch(\r\n        uint256 investmentPeriod,\r\n        uint256 unlockIntervalDays,\r\n        uint256 unlockPercentage,\r\n        uint256 sellNMTQuantity,\r\n        address tokenReceiveAddress,\r\n        address paymentToken,\r\n        uint256 paymentPrice\r\n    ) external{\r\n        require(unlockPercentage > 0 && unlockPercentage < 100, \"percentage error\");\r\n        require(tokenReceiveAddress != address(0), \"tokenReceiveAddress error\");\r\n        require(investmentPeriod < 30, \"investmentPeriod error\");\r\n        SafeERC20.safeTransferFrom(IERC20(nmtToken), msg.sender, address(this),sellNMTQuantity);\r\n        uint256 _financingId  = ++financingId;\r\n        financeMsg[_financingId] = FinanceMsg(\r\n                                                msg.sender, \r\n                                                block.timestamp + investmentPeriod * day,\r\n                                                unlockIntervalDays * day,\r\n                                                unlockPercentage,\r\n                                                sellNMTQuantity,\r\n                                                tokenReceiveAddress,\r\n                                                paymentToken,\r\n                                                paymentPrice,\r\n                                                0\r\n                                            );\r\n        emit Launch(_financingId, msg.sender);\r\n    }\r\n      \r\n    function purchaseNMTWithETH(uint256 _financingId) payable external nonReentrant(){\r\n        address _sender = msg.sender;\r\n        FinanceMsg storage finance = financeMsg[_financingId];\r\n        require(finance.endTime >= block.timestamp, \"time error\");\r\n        require(finance.paymentToken == address(0), \"token error\");\r\n        payable(finance.tokenReceiveAddress).transfer(msg.value);\r\n        uint256 _purchaseNMTQuantity = msg.value * finance.paymentPrice / 10**18;\r\n        uint256 _purchaseNumber = ++purchaseNumber;\r\n        userMsg[_purchaseNumber] = UserMsg(_sender, finance.endTime, finance.unlockIntervalDays, finance.unlockPercentage, 0, _purchaseNMTQuantity);\r\n        userInfo[_sender].push(_purchaseNumber);\r\n        finance.soldNMTQuantity += _purchaseNMTQuantity;\r\n        require(finance.soldNMTQuantity <= finance.sellNMTQuantity, \"Limit Exceeded\");\r\n        emit PurchaseNMTWithToken(_purchaseNumber, _sender, _purchaseNMTQuantity, address(0), msg.value);\r\n    }\r\n\r\n    function purchaseNMTWithToken(uint256 _financingId, address _paymentToken, uint256 _paymentAmount) external nonReentrant(){\r\n        address _sender = msg.sender;\r\n        FinanceMsg storage finance = financeMsg[_financingId];\r\n        require(finance.endTime >= block.timestamp, \"time error\");\r\n        require(_paymentToken != address(0) && finance.paymentToken == _paymentToken, \"token error\");\r\n        SafeERC20.safeTransferFrom(IERC20(_paymentToken), _sender,finance.tokenReceiveAddress,_paymentAmount);\r\n        uint256 decimals = IERC20(_paymentToken).decimals();\r\n        uint256 _purchaseNMTQuantity = _paymentAmount * finance.paymentPrice / 10**decimals;\r\n        uint256 _purchaseNumber = ++purchaseNumber;\r\n        userMsg[_purchaseNumber] = UserMsg(_sender, finance.endTime, finance.unlockIntervalDays, finance.unlockPercentage, 0, _purchaseNMTQuantity);\r\n        userInfo[_sender].push(_purchaseNumber);\r\n        finance.soldNMTQuantity += _purchaseNMTQuantity;\r\n        require(finance.soldNMTQuantity <= finance.sellNMTQuantity, \"Limit Exceeded\");\r\n        emit PurchaseNMTWithToken(_purchaseNumber, _sender, _purchaseNMTQuantity, _paymentToken, _paymentAmount);\r\n    }\r\n\r\n    function withdrawNMTToken(uint256[] memory _purchaseNumbers) external nonReentrant(){\r\n        UserMsg storage _userMsg;\r\n        uint256 withdraw;\r\n        for (uint256 i = 0; i< _purchaseNumbers.length; i++){\r\n            _userMsg = userMsg[_purchaseNumbers[i]];\r\n            require(_userMsg.user == msg.sender, \"user error\");\r\n            uint256 amount = calcToken(_userMsg);\r\n            _userMsg.withdrawnAmount += amount;\r\n            withdraw += amount;\r\n            emit WithdrawNMTToken(_purchaseNumbers[i], amount);\r\n        }\r\n        require(withdraw > 0, \"withdraw error\");\r\n        SafeERC20.safeTransfer(IERC20(nmtToken), msg.sender,withdraw);\r\n    }\r\n\r\n    function refund(uint256 _financingId) external nonReentrant(){\r\n        FinanceMsg storage finance = financeMsg[_financingId];\r\n        require(finance.sellNMTQuantity > 0, \"wrong quantity\");\r\n        require(finance.endTime < block.timestamp, \"time error\");\r\n        uint256 _amount = finance.sellNMTQuantity - finance.soldNMTQuantity;\r\n        require(_amount > 0, \"refund error\");\r\n        finance.soldNMTQuantity = finance.sellNMTQuantity;\r\n        SafeERC20.safeTransfer(IERC20(nmtToken), finance.sponsor,_amount);\r\n        emit Refund(_financingId, _amount);\r\n    }\r\n    \r\n    function queryUserMsg(address _userAddr) external view returns (uint256[] memory, uint256[] memory, UserMsg[] memory){\r\n        uint256[] memory userInfos = userInfo[_userAddr];\r\n        uint256[] memory withdraws = new uint256[](userInfos.length);\r\n        UserMsg[] memory userMsgs = new UserMsg[](userInfos.length);\r\n        for (uint256 i = 0; i< userInfos.length; i++){\r\n            userMsgs[i] = userMsg[userInfos[i]];\r\n            withdraws[i] = calcToken(userMsgs[i]);\r\n        }\r\n        return (userInfos, withdraws, userMsgs);\r\n    }\r\n\r\n    function calcToken(UserMsg memory _userMsg) internal view returns (uint256){\r\n        if(block.timestamp < _userMsg.startTime){\r\n            return 0;\r\n        }else {\r\n            uint256 amount = ((block.timestamp - _userMsg.startTime) / _userMsg.unlockIntervalDays) * _userMsg.unlockPercentage *  _userMsg.purchaseNMTQuantity /100;\r\n            if(amount > _userMsg.purchaseNMTQuantity){\r\n                return _userMsg.purchaseNMTQuantity - _userMsg.withdrawnAmount;\r\n            }else {\r\n                return amount - _userMsg.withdrawnAmount;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"financingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseNMTQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PurchaseNMTWithToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_financingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawNMTToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"financeMsg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockIntervalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNMTQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenReceiveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldNMTQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"financingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nmtToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockIntervalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNMTQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenReceiveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentPrice\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nmtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_financingId\",\"type\":\"uint256\"}],\"name\":\"purchaseNMTWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_financingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseNMTWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"queryUserMsg\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockIntervalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseNMTQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct FinanceToken.UserMsg[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_financingId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMsg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockIntervalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseNMTQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purchaseNumbers\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNMTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FinanceToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b011b3b15865c6a9c6316135201d1b42c85d7e132a1691fc5465e56672ca1bd6"}