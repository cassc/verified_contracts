{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n// Sources flattened with hardhat v2.19.4 https://hardhat.org\r\n\r\n\r\n// File contracts/Common/Context.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Math/SafeMath.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Curve/IFraxGaugeController.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n// https://github.com/swervefi/swerve/edit/master/packages/swerve-contracts/interfaces/IGaugeController.sol\r\n\r\ninterface IFraxGaugeController {\r\n    struct Point {\r\n        uint256 bias;\r\n        uint256 slope;\r\n    }\r\n\r\n    struct VotedSlope {\r\n        uint256 slope;\r\n        uint256 power;\r\n        uint256 end;\r\n    }\r\n\r\n    // Public variables\r\n    function admin() external view returns (address);\r\n    function future_admin() external view returns (address);\r\n    function token() external view returns (address);\r\n    function voting_escrow() external view returns (address);\r\n    function n_gauge_types() external view returns (int128);\r\n    function n_gauges() external view returns (int128);\r\n    function gauge_type_names(int128) external view returns (string memory);\r\n    function gauges(uint256) external view returns (address);\r\n    function vote_user_slopes(address, address)\r\n        external\r\n        view\r\n        returns (VotedSlope memory);\r\n    function vote_user_power(address) external view returns (uint256);\r\n    function last_user_vote(address, address) external view returns (uint256);\r\n    function points_weight(address, uint256)\r\n        external\r\n        view\r\n        returns (Point memory);\r\n    function time_weight(address) external view returns (uint256);\r\n    function points_sum(int128, uint256) external view returns (Point memory);\r\n    function time_sum(uint256) external view returns (uint256);\r\n    function points_total(uint256) external view returns (uint256);\r\n    function time_total() external view returns (uint256);\r\n    function points_type_weight(int128, uint256)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function time_type_weight(uint256) external view returns (uint256);\r\n\r\n    // Getter functions\r\n    function gauge_types(address) external view returns (int128);\r\n    function gauge_relative_weight(address) external view returns (uint256);\r\n    function gauge_relative_weight(address, uint256) external view returns (uint256);\r\n    function get_gauge_weight(address) external view returns (uint256);\r\n    function get_type_weight(int128) external view returns (uint256);\r\n    function get_total_weight() external view returns (uint256);\r\n    function get_weights_sum_per_type(int128) external view returns (uint256);\r\n\r\n    // External functions\r\n    function commit_transfer_ownership(address) external;\r\n    function apply_transfer_ownership() external;\r\n    function add_gauge(\r\n        address,\r\n        int128,\r\n        uint256\r\n    ) external;\r\n    function checkpoint() external;\r\n    function checkpoint_gauge(address) external;\r\n    function global_emission_rate() external view returns (uint256);\r\n    function gauge_relative_weight_write(address)\r\n        external\r\n        returns (uint256);\r\n    function gauge_relative_weight_write(address, uint256)\r\n        external\r\n        returns (uint256);\r\n    function add_type(string memory, uint256) external;\r\n    function change_type_weight(int128, uint256) external;\r\n    function change_gauge_weight(address, uint256) external;\r\n    function change_global_emission_rate(uint256) external;\r\n    function vote_for_gauge_weights(address, uint256) external;\r\n}\r\n\r\n\r\n// File contracts/Curve/IFraxGaugeFXSRewardsDistributor.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\ninterface IFraxGaugeFXSRewardsDistributor {\r\n  function acceptOwnership() external;\r\n  function curator_address() external view returns(address);\r\n  function currentReward(address gauge_address) external view returns(uint256 reward_amount);\r\n  function distributeReward(address gauge_address) external returns(uint256 weeks_elapsed, uint256 reward_tally);\r\n  function distributionsOn() external view returns(bool);\r\n  function gauge_whitelist(address) external view returns(bool);\r\n  function is_middleman(address) external view returns(bool);\r\n  function last_time_gauge_paid(address) external view returns(uint256);\r\n  function nominateNewOwner(address _owner) external;\r\n  function nominatedOwner() external view returns(address);\r\n  function owner() external view returns(address);\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\r\n  function setCurator(address _new_curator_address) external;\r\n  function setGaugeController(address _gauge_controller_address) external;\r\n  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external;\r\n  function setTimelock(address _new_timelock) external;\r\n  function timelock_address() external view returns(address);\r\n  function toggleDistributions() external;\r\n}\r\n\r\n\r\n// File contracts/Curve/IveFXS.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\ninterface IveFXS {\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    function commit_transfer_ownership(address addr) external;\r\n    function apply_transfer_ownership() external;\r\n    function commit_smart_wallet_checker(address addr) external;\r\n    function apply_smart_wallet_checker() external;\r\n    function toggleEmergencyUnlock() external;\r\n    function recoverERC20(address token_addr, uint256 amount) external;\r\n    function get_last_user_slope(address addr) external view returns (int128);\r\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256);\r\n    function locked__end(address _addr) external view returns (uint256);\r\n    function checkpoint() external;\r\n    function deposit_for(address _addr, uint256 _value) external;\r\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\r\n    function increase_amount(uint256 _value) external;\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n    function withdraw() external;\r\n    function balanceOf(address addr) external view returns (uint256);\r\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\r\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function totalSupply(uint256 t) external view returns (uint256);\r\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\r\n    function totalFXSSupply() external view returns (uint256);\r\n    function totalFXSSupplyAt(uint256 _block) external view returns (uint256);\r\n    function changeController(address _newController) external;\r\n    function token() external view returns (address);\r\n    function supply() external view returns (uint256);\r\n    function locked(address addr) external view returns (LockedBalance memory);\r\n    function epoch() external view returns (uint256);\r\n    function point_history(uint256 arg0) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_history(address arg0, uint256 arg1) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_epoch(address arg0) external view returns (uint256);\r\n    function slope_changes(uint256 arg0) external view returns (int128);\r\n    function controller() external view returns (address);\r\n    function transfersEnabled() external view returns (bool);\r\n    function emergencyUnlockActive() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function future_smart_wallet_checker() external view returns (address);\r\n    function smart_wallet_checker() external view returns (address);\r\n    function admin() external view returns (address);\r\n    function future_admin() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/Math/Math.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/balancer/IAuraDepositVault.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\ninterface IAuraDepositVault {\r\n  function addExtraReward ( address _reward ) external returns ( bool );\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 );\r\n  function approve ( address spender, uint256 amount ) external returns ( bool );\r\n  function asset (  ) external view returns ( address );\r\n  function balanceOf ( address account ) external view returns ( uint256 );\r\n  function clearExtraRewards (  ) external;\r\n  function convertToAssets ( uint256 shares ) external view returns ( uint256 );\r\n  function convertToShares ( uint256 assets ) external view returns ( uint256 );\r\n  function currentRewards (  ) external view returns ( uint256 );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function deposit ( uint256 assets, address receiver ) external returns ( uint256 );\r\n  function duration (  ) external view returns ( uint256 );\r\n  function earned ( address account ) external view returns ( uint256 );\r\n  function extraRewards ( uint256 ) external view returns ( address );\r\n  function extraRewardsLength (  ) external view returns ( uint256 );\r\n  function getReward (  ) external returns ( bool );\r\n  function getReward ( address _account, bool _claimExtras ) external returns ( bool );\r\n  function historicalRewards (  ) external view returns ( uint256 );\r\n  function lastTimeRewardApplicable (  ) external view returns ( uint256 );\r\n  function lastUpdateTime (  ) external view returns ( uint256 );\r\n  function maxDeposit ( address ) external view returns ( uint256 );\r\n  function maxMint ( address owner ) external view returns ( uint256 );\r\n  function maxRedeem ( address owner ) external view returns ( uint256 );\r\n  function maxWithdraw ( address owner ) external view returns ( uint256 );\r\n  function mint ( uint256 shares, address receiver ) external returns ( uint256 );\r\n  function name (  ) external view returns ( string memory );\r\n  function newRewardRatio (  ) external view returns ( uint256 );\r\n  function operator (  ) external view returns ( address );\r\n  function periodFinish (  ) external view returns ( uint256 );\r\n  function pid (  ) external view returns ( uint256 );\r\n  function previewDeposit ( uint256 assets ) external view returns ( uint256 );\r\n  function previewMint ( uint256 shares ) external view returns ( uint256 );\r\n  function previewRedeem ( uint256 shares ) external view returns ( uint256 );\r\n  function previewWithdraw ( uint256 assets ) external view returns ( uint256 shares );\r\n  function processIdleRewards (  ) external;\r\n  function queueNewRewards ( uint256 _rewards ) external returns ( bool );\r\n  function queuedRewards (  ) external view returns ( uint256 );\r\n  function redeem ( uint256 shares, address receiver, address owner ) external returns ( uint256 );\r\n  function rewardManager (  ) external view returns ( address );\r\n  function rewardPerToken (  ) external view returns ( uint256 );\r\n  function rewardPerTokenStored (  ) external view returns ( uint256 );\r\n  function rewardRate (  ) external view returns ( uint256 );\r\n  function rewardToken (  ) external view returns ( address );\r\n  function rewards ( address ) external view returns ( uint256 );\r\n  function stake ( uint256 _amount ) external returns ( bool );\r\n  function stakeAll (  ) external returns ( bool );\r\n  function stakeFor ( address _for, uint256 _amount ) external returns ( bool );\r\n  function stakingToken (  ) external view returns ( address );\r\n  function symbol (  ) external view returns ( string memory );\r\n  function totalAssets (  ) external view returns ( uint256 );\r\n  function totalSupply (  ) external view returns ( uint256 );\r\n  function transfer ( address, uint256 ) external returns ( bool );\r\n  function transferFrom ( address, address, uint256 ) external returns ( bool );\r\n  function userRewardPerTokenPaid ( address ) external view returns ( uint256 );\r\n  function withdraw ( uint256 amount, bool claim ) external returns ( bool );\r\n  function withdraw ( uint256 assets, address receiver, address owner ) external returns ( uint256 );\r\n  function withdrawAll ( bool claim ) external;\r\n  function withdrawAllAndUnwrap ( bool claim ) external;\r\n  function withdrawAndUnwrap ( uint256 amount, bool claim ) external returns ( bool );\r\n}\r\n\r\n\r\n// File contracts/Staking/Owned.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// File contracts/Uniswap/TransferHelper.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Utils/ReentrancyGuard.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Staking/FraxUnifiedFarmTemplate.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ====================== FraxUnifiedFarmTemplate =====================\r\n// ====================================================================\r\n// Farming contract that accounts for veFXS\r\n// Overrideable for UniV3, ERC20s, etc\r\n// New for V2\r\n//      - Multiple reward tokens possible\r\n//      - Can add to existing locked stakes\r\n//      - Contract is aware of proxied veFXS\r\n//      - veFXS multiplier formula changed\r\n// Apes together strong\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Jason Huan: https://github.com/jasonhuan\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Dennis: github.com/denett\r\n\r\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team\r\n// (Locked, veFXS, and UniV3 portions are new)\r\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Extra rewards\r\n// Balancer\r\n// ====================\r\n\r\n// BUNNI\r\n// ====================\r\n// import \"../Misc_AMOs/bunni/IBunniGauge.sol\";\r\n// import \"../Misc_AMOs/bunni/IBunniLens.sol\";\r\n// import \"../Misc_AMOs/bunni/IBunniMinter.sol\";\r\n\r\n// CONVEX\r\n// ====================\r\n// import \"../Misc_AMOs/convex/IConvexBaseRewardPool.sol\";\r\n\r\ncontract FraxUnifiedFarmTemplate is Owned, ReentrancyGuard {\r\n\r\n\r\n    // -------------------- VARIES --------------------\r\n\r\n    // Balancer\r\n    IAuraDepositVault public stakingToken;\r\n\r\n    // Bunni\r\n    // IBunniGauge public stakingToken;\r\n    // IBunniLens public lens = IBunniLens(0xb73F303472C4fD4FF3B9f59ce0F9b13E47fbfD19);\r\n    // IBunniMinter public minter = IBunniMinter(0xF087521Ffca0Fa8A43F5C445773aB37C5f574DA0);\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Instances\r\n    IveFXS private constant veFXS = IveFXS(0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0);\r\n    \r\n    // Frax related\r\n    address internal constant frax_address = 0x853d955aCEf822Db058eb8505911ED77F175b99e;\r\n    /// @notice fraxPerLPToken is a public view function, although doesn't show the stored value\r\n    uint256 public fraxPerLPStored;\r\n\r\n    // Constant for various precisions\r\n    uint256 internal constant MULTIPLIER_PRECISION = 1e18;\r\n\r\n    // Time tracking\r\n    /// @notice Ending timestamp for the current period\r\n    uint256 public periodFinish;\r\n    /// @notice Timestamp of the last update - when this period started\r\n    uint256 public lastUpdateTime;\r\n\r\n    // Lock time and multiplier settings\r\n    uint256 public lock_max_multiplier = uint256(2e18); // E18. 1x = e18\r\n    uint256 public lock_time_for_max_multiplier = 1 * 1095 * 86400; // 3 years\r\n    // uint256 public lock_time_for_max_multiplier = 2 * 86400; // 2 days\r\n    uint256 public lock_time_min = 1; // 1 seconds. If 0, calcCurrLockMultiplier could div by 0\r\n\r\n    // veFXS related\r\n    uint256 public vefxs_boost_scale_factor = uint256(4e18); // E18. 4x = 4e18; 100 / scale_factor = % vefxs supply needed for max boost\r\n    uint256 public vefxs_max_multiplier = uint256(2e18); // E18. 1x = 1e18\r\n    uint256 public vefxs_per_frax_for_max_boost = uint256(4e18); // E18. 2e18 means 2 veFXS must be held by the staker per 1 FRAX\r\n    mapping(address => uint256) internal _vefxsMultiplierStored;\r\n    mapping(address => bool) internal valid_vefxs_proxies;\r\n    mapping(address => mapping(address => bool)) internal proxy_allowed_stakers;\r\n\r\n    // Reward addresses, gauge addresses, reward rates, and reward managers\r\n    /// @notice token addr -> manager addr\r\n    mapping(address => address) public rewardManagers; \r\n    address[] internal rewardTokens;\r\n    address[] internal gaugeControllers;\r\n    address[] internal rewardDistributors;\r\n    uint256[] internal rewardRatesManual;\r\n    mapping(address => bool) internal isRewardToken;\r\n    /// @notice token addr -> token index\r\n    mapping(address => uint256) public rewardTokenAddrToIdx;\r\n    \r\n    // Reward period\r\n    uint256 public constant rewardsDuration = 604800; // 7 * 86400  (7 days)\r\n\r\n    // Reward tracking\r\n    uint256[] private rewardsPerTokenStored;\r\n    mapping(address => mapping(uint256 => uint256)) private userRewardsPerTokenPaid; // staker addr -> token id -> paid amount\r\n    mapping(address => mapping(uint256 => uint256)) private rewards; // staker addr -> token id -> reward amount\r\n    mapping(address => uint256) public lastRewardClaimTime; // staker addr -> timestamp\r\n    \r\n    // Gauge tracking\r\n    uint256[] private last_gauge_relative_weights;\r\n    uint256[] private last_gauge_time_totals;\r\n\r\n    // Balance tracking\r\n    uint256 internal _total_liquidity_locked;\r\n    uint256 internal _total_combined_weight;\r\n    mapping(address => uint256) internal _locked_liquidity;\r\n    mapping(address => uint256) internal _combined_weights;\r\n    /// @notice Keeps track of LP balances proxy-wide. Needed to make sure the proxy boost is kept in line\r\n    mapping(address => uint256) public proxy_lp_balances; \r\n\r\n\r\n    /// @notice Stakers set which proxy(s) they want to use\r\n    /// @dev Keep public so users can see on the frontend if they have a proxy\r\n    mapping(address => address) public staker_designated_proxies;\r\n\r\n    // Admin booleans for emergencies and overrides\r\n    bool public stakesUnlocked; // Release locked stakes in case of emergency\r\n    bool internal withdrawalsPaused; // For emergencies\r\n    bool internal rewardsCollectionPaused; // For emergencies\r\n    bool internal stakingPaused; // For emergencies\r\n\r\n    // For emergencies if a token is overemitted or something else. Only callable once.\r\n    // Bypasses certain logic, which will cause reward calculations to be off\r\n    // But the goal is for the users to recover LP, and they couldn't claim the erroneous rewards anyways.\r\n    // Reward reimbursement claims would be handled with pre-issue earned() snapshots and a claim contract, or similar.\r\n    bool public withdrawalOnlyShutdown; \r\n\r\n    // Version\r\n    string public version = \"1.0.6\";\r\n\r\n    /* ========== STRUCTS ========== */\r\n    // In children...\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == owner || msg.sender == 0x8412ebf45bAC1B340BbE8F318b928C466c4E39CA, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTknMgrs(address reward_token_address) {\r\n        require(msg.sender == owner || isTokenManagerFor(msg.sender, reward_token_address), \"Not owner or tkn mgr\");\r\n        _;\r\n    }\r\n\r\n    modifier updateRewardAndBalanceMdf(address account, bool sync_too) {\r\n        _updateRewardAndBalance(account, sync_too, false);\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner,\r\n        address[] memory _rewardTokens,\r\n        address[] memory _rewardManagers,\r\n        uint256[] memory _rewardRatesManual,\r\n        address[] memory _gaugeControllers,\r\n        address[] memory _rewardDistributors\r\n    ) Owned(_owner) {\r\n\r\n        // Address arrays\r\n        rewardTokens = _rewardTokens;\r\n        gaugeControllers = _gaugeControllers;\r\n        rewardDistributors = _rewardDistributors;\r\n        rewardRatesManual = _rewardRatesManual;\r\n\r\n        for (uint256 i = 0; i < _rewardTokens.length; i++){ \r\n            // For fast token address -> token ID lookups later\r\n            rewardTokenAddrToIdx[_rewardTokens[i]] = i;\r\n\r\n            // Add to the mapping\r\n            isRewardToken[_rewardTokens[i]] = true;\r\n\r\n            // Initialize the stored rewards\r\n            rewardsPerTokenStored.push(0);\r\n\r\n            // Initialize the reward managers\r\n            rewardManagers[_rewardTokens[i]] = _rewardManagers[i];\r\n\r\n            // Push in empty relative weights to initialize the array\r\n            last_gauge_relative_weights.push(0);\r\n\r\n            // Push in empty time totals to initialize the array\r\n            last_gauge_time_totals.push(0);\r\n        }\r\n\r\n        // Other booleans\r\n        stakesUnlocked = false;\r\n\r\n        // Initialization\r\n        lastUpdateTime = block.timestamp;\r\n\r\n        // Sync the first period finish here with the gauge's \r\n        // periodFinish = IFraxGaugeController(gaugeControllers[0]).time_total();\r\n        periodFinish = IFraxGaugeController(0x3669C421b77340B2979d1A00a792CC2ee0FcE737).time_total();\r\n        \r\n    }\r\n\r\n    /* ============= VIEWS ============= */\r\n\r\n    // ------ REWARD RELATED ------\r\n\r\n    /// @notice Checks if the caller is a manager for the reward token\r\n    /// @param caller_addr The address of the caller\r\n    /// @param reward_token_addr The address of the reward token\r\n    /// @return bool True if the caller is a manager for the reward token\r\n    function isTokenManagerFor(address caller_addr, address reward_token_addr) public view returns (bool){\r\n        if (!isRewardToken[reward_token_addr]) return false;\r\n        else if (caller_addr == address(0) || reward_token_addr == address(0)) return false;\r\n        else if (caller_addr == owner) return true; // Contract owner\r\n        else if (rewardManagers[reward_token_addr] == caller_addr) return true; // Reward manager\r\n        return false; \r\n    }\r\n\r\n    /// @notice Gets all the reward tokens this contract handles\r\n    /// @return rewardTokens_ The reward tokens array\r\n    function getAllRewardTokens() external view returns (address[] memory) {\r\n        return rewardTokens;\r\n    }\r\n\r\n    // Last time the reward was applicable\r\n    function lastTimeRewardApplicable() internal view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    /// @notice The amount of reward tokens being paid out per second this period\r\n    /// @param token_idx The index of the reward token\r\n    /// @return rwd_rate The reward rate\r\n    function rewardRates(uint256 token_idx) public view returns (uint256 rwd_rate) {\r\n        address gauge_controller_address = gaugeControllers[token_idx];\r\n        if (gauge_controller_address != address(0)) {\r\n            rwd_rate = (IFraxGaugeController(gauge_controller_address).global_emission_rate() * last_gauge_relative_weights[token_idx]) / 1e18;\r\n        }\r\n        else {\r\n            rwd_rate = rewardRatesManual[token_idx];\r\n        }\r\n    }\r\n\r\n    // Amount of reward tokens per LP token / liquidity unit\r\n    function rewardsPerToken() public view returns (uint256[] memory newRewardsPerTokenStored) {\r\n        if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\r\n            return rewardsPerTokenStored;\r\n        }\r\n        else {\r\n            newRewardsPerTokenStored = new uint256[](rewardTokens.length);\r\n            for (uint256 i = 0; i < rewardsPerTokenStored.length; i++){ \r\n                newRewardsPerTokenStored[i] = rewardsPerTokenStored[i] + (\r\n                    ((lastTimeRewardApplicable() - lastUpdateTime) * rewardRates(i) * 1e18) / _total_combined_weight\r\n                );\r\n            }\r\n            return newRewardsPerTokenStored;\r\n        }\r\n    }\r\n\r\n    /// @notice The amount of reward tokens an account has earned / accrued\r\n    /// @dev In the edge-case of one of the account's stake expiring since the last claim, this will\r\n    /// @param account The account to check\r\n    /// @return new_earned Array of reward token amounts earned by the account\r\n    function earned(address account) public view returns (uint256[] memory new_earned) {\r\n        uint256[] memory reward_arr = rewardsPerToken();\r\n        new_earned = new uint256[](rewardTokens.length);\r\n\r\n        if (_combined_weights[account] > 0){\r\n            for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n                new_earned[i] = ((_combined_weights[account] * (reward_arr[i] - userRewardsPerTokenPaid[account][i])) / 1e18)\r\n                                + rewards[account][i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice The total reward tokens emitted in the given period\r\n    /// @return rewards_per_duration_arr Array of reward token amounts emitted in the current period\r\n    function getRewardForDuration() external view returns (uint256[] memory rewards_per_duration_arr) {\r\n        rewards_per_duration_arr = new uint256[](rewardRatesManual.length);\r\n\r\n        for (uint256 i = 0; i < rewardRatesManual.length; i++){ \r\n            rewards_per_duration_arr[i] = rewardRates(i) * rewardsDuration;\r\n        }\r\n    }\r\n\r\n\r\n    // ------ LIQUIDITY AND WEIGHTS ------\r\n\r\n    /// @notice The farm's total locked liquidity / LP tokens\r\n    /// @return The total locked liquidity\r\n    function totalLiquidityLocked() external view returns (uint256) {\r\n        return _total_liquidity_locked;\r\n    }\r\n\r\n    /// @notice A user's locked liquidity / LP tokens\r\n    /// @param account The address of the account\r\n    /// @return The locked liquidity\r\n    function lockedLiquidityOf(address account) external view returns (uint256) {\r\n        return _locked_liquidity[account];\r\n    }\r\n\r\n    /// @notice The farm's total combined weight of all users\r\n    /// @return The total combined weight\r\n    function totalCombinedWeight() external view returns (uint256) {\r\n        return _total_combined_weight;\r\n    }\r\n\r\n    /// @notice Total 'balance' used for calculating the percent of the pool the account owns\r\n    /// @notice Takes into account the locked stake time multiplier and veFXS multiplier\r\n    /// @param account The address of the account\r\n    /// @return The combined weight\r\n    function combinedWeightOf(address account) external view returns (uint256) {\r\n        return _combined_weights[account];\r\n    }\r\n\r\n    /// @notice Calculates the combined weight for an account\r\n    /// @notice Must be overriden by the child contract\r\n    /// @dev account The address of the account\r\n    function calcCurCombinedWeight(address account) public virtual view \r\n        returns (\r\n            uint256 old_combined_weight,\r\n            uint256 new_vefxs_multiplier,\r\n            uint256 new_combined_weight\r\n        )\r\n    {\r\n        revert(\"Need cCCW logic\");\r\n    }\r\n\r\n    // ------ LOCK RELATED ------\r\n\r\n    /// @notice Reads the lock boost multiplier for a given duration\r\n    /// @param secs The duration of the lock in seconds\r\n    /// @return The multiplier amount\r\n    function lockMultiplier(uint256 secs) public view returns (uint256) {\r\n        return Math.min(\r\n            lock_max_multiplier,\r\n            (secs * lock_max_multiplier) / lock_time_for_max_multiplier\r\n        ) ;\r\n    }\r\n\r\n    // ------ FRAX RELATED ------\r\n\r\n    /// @notice The amount of FRAX denominated value being boosted that an address has staked\r\n    /// @param account The address to check\r\n    /// @return The amount of FRAX value boosted\r\n    function userStakedFrax(address account) public view returns (uint256) {\r\n        return (fraxPerLPStored * _locked_liquidity[account]) / MULTIPLIER_PRECISION;\r\n    }\r\n\r\n    /// @notice The amount of FRAX denominated value being boosted that a proxy address has staked\r\n    /// @param proxy_address The address to check\r\n    /// @return The amount of FRAX value boosted\r\n    function proxyStakedFrax(address proxy_address) public view returns (uint256) {\r\n        return (fraxPerLPStored * proxy_lp_balances[proxy_address]) / MULTIPLIER_PRECISION;\r\n    }\r\n\r\n    /// @notice The maximum LP that can get max veFXS boosted for a given address at its current veFXS balance\r\n    /// @param account The address to check\r\n    /// @return The maximum LP that can get max veFXS boosted for a given address at its current veFXS balance\r\n    function maxLPForMaxBoost(address account) external view returns (uint256) {\r\n        return (veFXS.balanceOf(account) * MULTIPLIER_PRECISION * MULTIPLIER_PRECISION) / (vefxs_per_frax_for_max_boost * fraxPerLPStored);\r\n    }\r\n\r\n    /// @notice Must be overriden to return the current FRAX per LP token\r\n    /// @return The current number of FRAX per LP token\r\n    function fraxPerLPToken() public virtual view returns (uint256) {\r\n        revert(\"Need fPLPT logic\");\r\n    }\r\n\r\n    // ------ veFXS RELATED ------\r\n\r\n    /// @notice The minimum veFXS required to get max boost for a given address\r\n    /// @param account The address to check\r\n    /// @return The minimum veFXS required to get max boost\r\n    function minVeFXSForMaxBoost(address account) public view returns (uint256) {\r\n        return (userStakedFrax(account) * vefxs_per_frax_for_max_boost) / MULTIPLIER_PRECISION;\r\n    }\r\n\r\n    /// @notice The minimum veFXS required to get max boost for a given proxy\r\n    /// @param proxy_address The proxy address\r\n    /// @return The minimum veFXS required to get max boost\r\n    function minVeFXSForMaxBoostProxy(address proxy_address) public view returns (uint256) {\r\n        return (proxyStakedFrax(proxy_address) * vefxs_per_frax_for_max_boost) / MULTIPLIER_PRECISION;\r\n    }\r\n\r\n    /// @notice Looks up a staker's proxy\r\n    /// @param addr The address to check\r\n    /// @return the_proxy The proxy address, or address(0)\r\n    function getProxyFor(address addr) public view returns (address){\r\n        if (valid_vefxs_proxies[addr]) {\r\n            // If addr itself is a proxy, return that.\r\n            // If it farms itself directly, it should use the shared LP tally in proxyStakedFrax\r\n            return addr;\r\n        }\r\n        else {\r\n            // Otherwise, return the proxy, or address(0)\r\n            return staker_designated_proxies[addr];\r\n        }\r\n    }\r\n\r\n    /// @notice The multiplier for a given account, based on veFXS\r\n    /// @param account The account to check\r\n    /// @return vefxs_multiplier The multiplier boost for the account\r\n    function veFXSMultiplier(address account) public view returns (uint256 vefxs_multiplier) {\r\n        // Use either the user's or their proxy's veFXS balance\r\n        uint256 vefxs_bal_to_use = 0;\r\n        address the_proxy = getProxyFor(account);\r\n        vefxs_bal_to_use = (the_proxy == address(0)) ? veFXS.balanceOf(account) : veFXS.balanceOf(the_proxy);\r\n\r\n        // First option based on fraction of total veFXS supply, with an added scale factor\r\n        uint256 mult_optn_1 = (vefxs_bal_to_use * vefxs_max_multiplier * vefxs_boost_scale_factor) \r\n                            / (veFXS.totalSupply() * MULTIPLIER_PRECISION);\r\n        \r\n        // Second based on old method, where the amount of FRAX staked comes into play\r\n        uint256 mult_optn_2;\r\n        {\r\n            uint256 veFXS_needed_for_max_boost;\r\n\r\n            // Need to use proxy-wide FRAX balance if applicable, to prevent exploiting\r\n            veFXS_needed_for_max_boost = (the_proxy == address(0)) ? minVeFXSForMaxBoost(account) : minVeFXSForMaxBoostProxy(the_proxy);\r\n\r\n            if (veFXS_needed_for_max_boost > 0){ \r\n                uint256 user_vefxs_fraction = (vefxs_bal_to_use * MULTIPLIER_PRECISION) / veFXS_needed_for_max_boost;\r\n                \r\n                mult_optn_2 = (user_vefxs_fraction * vefxs_max_multiplier) / MULTIPLIER_PRECISION;\r\n            }\r\n            else mult_optn_2 = 0; // This will happen with the first stake, when user_staked_frax is 0\r\n        }\r\n\r\n        // Select the higher of the two\r\n        vefxs_multiplier = (mult_optn_1 > mult_optn_2 ? mult_optn_1 : mult_optn_2);\r\n\r\n        // Cap the boost to the vefxs_max_multiplier\r\n        if (vefxs_multiplier > vefxs_max_multiplier) vefxs_multiplier = vefxs_max_multiplier;\r\n    }\r\n\r\n    /* =============== MUTATIVE FUNCTIONS =============== */\r\n\r\n    /// @notice Toggle whether a staker can use the proxy's veFXS balance to boost yields\r\n    /// @notice Proxy must call this first, then the staker must call stakerSetVeFXSProxy\r\n    function proxyToggleStaker(address staker_address) external {\r\n        require(valid_vefxs_proxies[msg.sender], \"Invalid proxy\");\r\n        proxy_allowed_stakers[msg.sender][staker_address] = !proxy_allowed_stakers[msg.sender][staker_address]; \r\n\r\n        // Disable the staker's set proxy if it was the toggler and is currently on\r\n        if (staker_designated_proxies[staker_address] == msg.sender){\r\n            staker_designated_proxies[staker_address] = address(0); \r\n\r\n            // Remove the LP as well\r\n            proxy_lp_balances[msg.sender] -= _locked_liquidity[staker_address];\r\n        }\r\n    }\r\n\r\n    /// @notice After proxy toggles staker to true, staker must call and confirm this\r\n    /// @param proxy_address The address of the veFXS proxy\r\n    function stakerSetVeFXSProxy(address proxy_address) external {\r\n        require(valid_vefxs_proxies[proxy_address], \"Invalid proxy\");\r\n        require(proxy_allowed_stakers[proxy_address][msg.sender], \"Proxy has not allowed you yet\");\r\n        \r\n        // Corner case sanity check to make sure LP isn't double counted\r\n        address old_proxy_addr = staker_designated_proxies[msg.sender];\r\n        if (old_proxy_addr != address(0)) {\r\n            // Remove the LP count from the old proxy\r\n            proxy_lp_balances[old_proxy_addr] -= _locked_liquidity[msg.sender];\r\n        }\r\n\r\n        // Set the new proxy\r\n        staker_designated_proxies[msg.sender] = proxy_address; \r\n\r\n        // Add the the LP as well\r\n        proxy_lp_balances[proxy_address] += _locked_liquidity[msg.sender];\r\n    }\r\n\r\n    // ------ STAKING ------\r\n    // In children...\r\n\r\n\r\n    // ------ WITHDRAWING ------\r\n    // In children...\r\n\r\n\r\n    // ------ REWARDS SYNCING ------\r\n\r\n    function _updateRewardAndBalance(address account, bool sync_too) internal {\r\n        _updateRewardAndBalance(account, sync_too, false);\r\n    }\r\n\r\n    function _updateRewardAndBalance(address account, bool sync_too, bool pre_sync_vemxstored) internal {\r\n        // Skip certain functions if we are in an emergency shutdown\r\n        if (!withdrawalOnlyShutdown) {\r\n            // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\r\n            if (sync_too){\r\n                sync();\r\n            }\r\n        }\r\n        \r\n        // Used to make sure the veFXS multiplier is correct if a stake is increased, before calcCurCombinedWeight\r\n        if (pre_sync_vemxstored){\r\n            _vefxsMultiplierStored[account] = veFXSMultiplier(account);\r\n        }\r\n        \r\n        if (account != address(0)) {\r\n            // To keep the math correct, the user's combined weight must be recomputed to account for their\r\n            // ever-changing veFXS balance.\r\n            (   \r\n                uint256 old_combined_weight,\r\n                uint256 new_vefxs_multiplier,\r\n                uint256 new_combined_weight\r\n            ) = calcCurCombinedWeight(account);\r\n\r\n            // Calculate the earnings first\r\n            if (!withdrawalOnlyShutdown) _syncEarned(account);\r\n\r\n            // Update the user's stored veFXS multipliers\r\n            _vefxsMultiplierStored[account] = new_vefxs_multiplier;\r\n\r\n            // Update the user's and the global combined weights\r\n            if (new_combined_weight >= old_combined_weight) {\r\n                uint256 weight_diff = new_combined_weight - old_combined_weight;\r\n                _total_combined_weight = _total_combined_weight + weight_diff;\r\n                _combined_weights[account] = old_combined_weight + weight_diff;\r\n            } else {\r\n                uint256 weight_diff = old_combined_weight - new_combined_weight;\r\n                _total_combined_weight = _total_combined_weight - weight_diff;\r\n                _combined_weights[account] = old_combined_weight - weight_diff;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function _syncEarned(address account) internal {\r\n        if (account != address(0)) {\r\n            // Calculate the earnings\r\n            uint256[] memory earned_arr = earned(account);\r\n\r\n            // Update the rewards array\r\n            for (uint256 i = 0; i < earned_arr.length; i++){ \r\n                rewards[account][i] = earned_arr[i];\r\n            }\r\n\r\n            // Update the rewards paid array\r\n            for (uint256 i = 0; i < earned_arr.length; i++){ \r\n                userRewardsPerTokenPaid[account][i] = rewardsPerTokenStored[i];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // ------ REWARDS CLAIMING ------\r\n\r\n    /// @notice A function that can be overridden to add extra logic to the getReward function\r\n    /// @param destination_address The address to send the rewards to\r\n    function getRewardExtraLogic(address destination_address) public nonReentrant {\r\n        require(!withdrawalOnlyShutdown, \"Only withdrawals allowed\");\r\n        require(rewardsCollectionPaused == false, \"Rewards collection paused\");\r\n        return _getRewardExtraLogic(msg.sender, destination_address);\r\n    }\r\n\r\n    function _getRewardExtraLogic(address rewardee, address destination_address) internal virtual {\r\n        revert(\"Need gREL logic\");\r\n    }\r\n\r\n    // Two different getReward functions are needed because of delegateCall and msg.sender issues\r\n    // For backwards-compatibility\r\n    /// @notice Claims rewards to destination address\r\n    /// @param destination_address The address to send the rewards to\r\n    /// @return rewards_before The rewards available before the claim\r\n    function getReward(address destination_address) external nonReentrant returns (uint256[] memory) {\r\n        return _getReward(msg.sender, destination_address, true);\r\n    }\r\n\r\n    /// @notice Claims rewards to destination address & wether to do extra logic\r\n    /// @param destination_address The address to send the rewards to\r\n    /// @param claim_extra_too Whether to do extra logic\r\n    /// @return rewards_before The rewards available before the claim\r\n    function getReward2(address destination_address, bool claim_extra_too) external nonReentrant returns (uint256[] memory) {\r\n        return _getReward(msg.sender, destination_address, claim_extra_too);\r\n    }\r\n\r\n    // No withdrawer == msg.sender check needed since this is only internally callable\r\n    function _getReward(address rewardee, address destination_address, bool do_extra_logic) internal updateRewardAndBalanceMdf(rewardee, true) returns (uint256[] memory rewards_before) {\r\n        // Make sure you are not in shutdown\r\n        require(!withdrawalOnlyShutdown, \"Only withdrawals allowed\");\r\n        \r\n        // Make sure rewards collection isn't paused\r\n        require(rewardsCollectionPaused == false, \"Rewards collection paused\");\r\n\r\n        // Update the last reward claim time first, as an extra reentrancy safeguard\r\n        lastRewardClaimTime[rewardee] = block.timestamp;\r\n        \r\n        // Update the rewards array and distribute rewards\r\n        rewards_before = new uint256[](rewardTokens.length);\r\n\r\n        for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n            rewards_before[i] = rewards[rewardee][i];\r\n            rewards[rewardee][i] = 0;\r\n            if (rewards_before[i] > 0) {\r\n                TransferHelper.safeTransfer(rewardTokens[i], destination_address, rewards_before[i]);\r\n\r\n                emit RewardPaid(rewardee, rewards_before[i], rewardTokens[i], destination_address);\r\n            }\r\n        }\r\n\r\n        // Handle additional reward logic\r\n        if (do_extra_logic) {\r\n            _getRewardExtraLogic(rewardee, destination_address);\r\n        }\r\n    }\r\n\r\n\r\n    // ------ FARM SYNCING ------\r\n\r\n    // If the period expired, renew it\r\n    function retroCatchUp() internal {\r\n        // Catch up the old rewards first\r\n        _updateStoredRewardsAndTime();\r\n\r\n        // Pull in rewards from the rewards distributor, if applicable\r\n        for (uint256 i = 0; i < rewardDistributors.length; i++){ \r\n            address reward_distributor_address = rewardDistributors[i];\r\n            if (reward_distributor_address != address(0)) {\r\n                IFraxGaugeFXSRewardsDistributor(reward_distributor_address).distributeReward(address(this));\r\n            }\r\n        }\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint256 num_periods_elapsed = uint256(block.timestamp - periodFinish) / rewardsDuration; // Floor division to the nearest period\r\n        \r\n        // Make sure there are enough tokens to renew the reward period\r\n        for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n            require((rewardRates(i) * rewardsDuration * (num_periods_elapsed + 1)) <= IERC20(rewardTokens[i]).balanceOf(address(this)), string(abi.encodePacked(\"Not enough reward tokens available: \", rewardTokens[i])) );\r\n        }\r\n        \r\n        // uint256 old_lastUpdateTime = lastUpdateTime;\r\n        // uint256 new_lastUpdateTime = block.timestamp;\r\n\r\n        // lastUpdateTime = periodFinish;\r\n        periodFinish = periodFinish + ((num_periods_elapsed + 1) * rewardsDuration);\r\n\r\n        // Aura & Balancer Gauge Rewards\r\n        // ==========================================\r\n        // Pull in rewards and set the reward rate for one week, based off of that\r\n        // If the rewards get messed up for some reason, set this to 0 and it will skip\r\n        // Should only be called once per week max\r\n        if (rewardRatesManual[1] != 0) {\r\n            // AURA & BAL\r\n            // ====================================\r\n            uint256 aura_before = IERC20(rewardTokens[1]).balanceOf(address(this));\r\n            uint256 bal_before = IERC20(rewardTokens[2]).balanceOf(address(this));\r\n            stakingToken.getReward(address(this), true);\r\n            uint256 aura_after = IERC20(rewardTokens[1]).balanceOf(address(this));\r\n            uint256 bal_after = IERC20(rewardTokens[2]).balanceOf(address(this));\r\n\r\n            // Set the new reward rates\r\n            rewardRatesManual[1] = (aura_after - aura_before) / rewardsDuration; // AURA\r\n            rewardRatesManual[2] = (bal_after - bal_before) / rewardsDuration; // BAL\r\n        }\r\n\r\n        // Bunni oLIT rewards\r\n        // ==========================================\r\n        // Pull in rewards and set the reward rate for one week, based off of that\r\n        // If the rewards get messed up for some reason, set this to 0 and it will skip\r\n        // Should only be called once per week max\r\n        // if (rewardRatesManual[1] != 0) {\r\n        //     // oLIT\r\n        //     // ====================================\r\n        //     uint256 olit_before = IERC20(rewardTokens[1]).balanceOf(address(this));\r\n        //     minter.mint(address(stakingToken));\r\n        //     uint256 olit_after = IERC20(rewardTokens[1]).balanceOf(address(this));\r\n\r\n        //     // Set the new reward rate\r\n        //     rewardRatesManual[1] = (olit_after - olit_before) / rewardsDuration;\r\n        // }\r\n\r\n        // CONVEX EXTRA REWARDS (OLD METHOD)\r\n        // ==========================================\r\n        // Pull in rewards and set the reward rate for one week, based off of that\r\n        // If the rewards get messed up for some reason, set this to 0 and it will skip\r\n        // if (rewardRatesManual[1] != 0 && rewardRatesManual[2] != 0) {\r\n        //     // CRV & CVX\r\n        //     // ====================================\r\n        //     uint256 crv_before = ERC20(rewardTokens[1]).balanceOf(address(this));\r\n        //     uint256 cvx_before = ERC20(rewardTokens[2]).balanceOf(address(this));\r\n        //     IConvexBaseRewardPool(0x329cb014b562d5d42927cfF0dEdF4c13ab0442EF).getReward(\r\n        //         address(this),\r\n        //         true\r\n        //     );\r\n        //     uint256 crv_after = ERC20(rewardTokens[1]).balanceOf(address(this));\r\n        //     uint256 cvx_after = ERC20(rewardTokens[2]).balanceOf(address(this));\r\n\r\n        //     // Set the new reward rate\r\n        //     rewardRatesManual[1] = (crv_after - crv_before) / rewardsDuration;\r\n        //     rewardRatesManual[2] = (cvx_after - cvx_before) / rewardsDuration;\r\n        // }\r\n\r\n        // Make sure everything is caught up again\r\n        _updateStoredRewardsAndTime();\r\n    }\r\n\r\n    function _updateStoredRewardsAndTime() internal {\r\n        // Get the rewards\r\n        uint256[] memory rewards_per_token = rewardsPerToken();\r\n\r\n        // Update the rewardsPerTokenStored\r\n        for (uint256 i = 0; i < rewardsPerTokenStored.length; i++){ \r\n            rewardsPerTokenStored[i] = rewards_per_token[i];\r\n        }\r\n\r\n        // Update the last stored time\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n    }\r\n\r\n    /// @notice Updates the gauge weights, if applicable\r\n    /// @param force_update If true, will update the weights even if the time hasn't elapsed\r\n    function sync_gauge_weights(bool force_update) public {\r\n        // Loop through the gauge controllers\r\n        for (uint256 i = 0; i < gaugeControllers.length; i++){ \r\n            address gauge_controller_address = gaugeControllers[i];\r\n            if (gauge_controller_address != address(0)) {\r\n                if (force_update || (block.timestamp > last_gauge_time_totals[i])){\r\n                    // Update the gauge_relative_weight\r\n                    last_gauge_relative_weights[i] = IFraxGaugeController(gauge_controller_address).gauge_relative_weight_write(address(this), block.timestamp);\r\n                    last_gauge_time_totals[i] = IFraxGaugeController(gauge_controller_address).time_total();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Updates gauge weights, fraxPerLP, pulls in new rewards or updates rewards\r\n    function sync() public {\r\n        // Make sure you are not in shutdown\r\n        require(!withdrawalOnlyShutdown, \"Only withdrawals allowed\");\r\n\r\n        // Sync the gauge weight, if applicable\r\n        sync_gauge_weights(false);\r\n\r\n        // Update the fraxPerLPStored\r\n        fraxPerLPStored = fraxPerLPToken();\r\n\r\n        if (block.timestamp >= periodFinish) {\r\n            retroCatchUp();\r\n        }\r\n        else {\r\n            _updateStoredRewardsAndTime();\r\n        }\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS - Curator callable ========== */\r\n    \r\n    // ------ FARM SYNCING ------\r\n    // In children...\r\n\r\n    // ------ PAUSES ------\r\n\r\n    /// @notice Owner or governance can pause/unpause staking, withdrawals, rewards collection, and collectRewardsOnWithdrawal\r\n    /// @param _stakingPaused Whether staking is paused\r\n    /// @param _withdrawalsPaused Whether withdrawals are paused\r\n    /// @param _rewardsCollectionPaused Whether rewards collection is paused\r\n    /// @param _withdrawalOnlyShutdown Whether you can only withdraw. Only settable once\r\n    function setPauses(\r\n        bool _stakingPaused,\r\n        bool _withdrawalsPaused,\r\n        bool _rewardsCollectionPaused,\r\n        bool _withdrawalOnlyShutdown\r\n    ) external onlyByOwnGov {\r\n        stakingPaused = _stakingPaused;\r\n        withdrawalsPaused = _withdrawalsPaused;\r\n        rewardsCollectionPaused = _rewardsCollectionPaused;\r\n\r\n        // Only settable once. Rewards math will be permanently wrong afterwards, so only use\r\n        // for recovering LP\r\n        if(_withdrawalOnlyShutdown && !withdrawalOnlyShutdown) withdrawalOnlyShutdown = true;\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS - Owner or timelock only ========== */\r\n    \r\n    /// @notice Owner or governance can unlock stakes - irreversible!\r\n    function unlockStakes() external onlyByOwnGov {\r\n        stakesUnlocked = !stakesUnlocked;\r\n    }\r\n\r\n    /// @notice Owner or governance sets whether an address is a valid veFXS proxy\r\n    /// @param _proxy_addr The address to set\r\n    function toggleValidVeFXSProxy(address _proxy_addr) external onlyByOwnGov {\r\n        valid_vefxs_proxies[_proxy_addr] = !valid_vefxs_proxies[_proxy_addr];\r\n    }\r\n\r\n    /// @notice Allows owner to recover any ERC20 or token manager to recover their reward token.\r\n    /// @param tokenAddress The address of the token to recover\r\n    /// @param tokenAmount The amount of the token to recover\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyTknMgrs(tokenAddress) {\r\n        // Check if the desired token is a reward token\r\n        bool isRewTkn = isRewardToken[tokenAddress];\r\n\r\n        // Only the reward managers can take back their reward tokens\r\n        // Also, other tokens, like the staking token, airdrops, or accidental deposits, can be withdrawn by the owner\r\n        if (\r\n                (isRewTkn && rewardManagers[tokenAddress] == msg.sender)\r\n                || (!isRewTkn && (msg.sender == owner))\r\n            ) {\r\n            TransferHelper.safeTransfer(tokenAddress, msg.sender, tokenAmount);\r\n            return;\r\n        }\r\n        // If none of the above conditions are true\r\n        else {\r\n            revert(\"No valid tokens to recover\");\r\n        }\r\n    }\r\n\r\n    /// @notice Sets multiple variables at once\r\n    /// @param _misc_vars The variables to set:\r\n    /// [0]: uint256 _lock_max_multiplier,\r\n    /// [1] uint256 _vefxs_max_multiplier,\r\n    /// [2] uint256 _vefxs_per_frax_for_max_boost,\r\n    /// [3] uint256 _vefxs_boost_scale_factor,\r\n    /// [4] uint256 _lock_time_for_max_multiplier,\r\n    /// [5] uint256 _lock_time_min\r\n    /// [6] uint256 _max_stake_limit (must be at greater or equal to old value)\r\n    function setMiscVariables(\r\n        uint256[6] memory _misc_vars\r\n        // [0]: uint256 _lock_max_multiplier, \r\n        // [1] uint256 _vefxs_max_multiplier, \r\n        // [2] uint256 _vefxs_per_frax_for_max_boost,\r\n        // [3] uint256 _vefxs_boost_scale_factor,\r\n        // [4] uint256 _lock_time_for_max_multiplier,\r\n        // [5] uint256 _lock_time_min\r\n    ) external onlyByOwnGov {\r\n        require(_misc_vars[0] >= MULTIPLIER_PRECISION, \"Must be >= MUL PREC\");\r\n        require((_misc_vars[1] >= 0) && (_misc_vars[2] >= 0) && (_misc_vars[3] >= 0), \"Must be >= 0\");\r\n        require((_misc_vars[4] >= 1) && (_misc_vars[5] >= 1), \"Must be >= 1\");\r\n\r\n        lock_max_multiplier = _misc_vars[0];\r\n        vefxs_max_multiplier = _misc_vars[1];\r\n        vefxs_per_frax_for_max_boost = _misc_vars[2];\r\n        vefxs_boost_scale_factor = _misc_vars[3];\r\n        lock_time_for_max_multiplier = _misc_vars[4];\r\n        lock_time_min = _misc_vars[5];\r\n    }\r\n\r\n    // The owner or the reward token managers can set reward rates \r\n        /// @notice Allows owner or reward token managers to set the reward rate for a given reward token\r\n    /// @param reward_token_address The address of the reward token\r\n    /// @param _new_rate The new reward rate (token amount divided by reward period duration)\r\n    /// @param _gauge_controller_address The address of the gauge controller for this reward token\r\n    /// @param _rewards_distributor_address The address of the rewards distributor for this reward token\r\n    function setRewardVars(address reward_token_address, uint256 _new_rate, address _gauge_controller_address, address _rewards_distributor_address) external onlyTknMgrs(reward_token_address) {\r\n        rewardRatesManual[rewardTokenAddrToIdx[reward_token_address]] = _new_rate;\r\n        gaugeControllers[rewardTokenAddrToIdx[reward_token_address]] = _gauge_controller_address;\r\n        rewardDistributors[rewardTokenAddrToIdx[reward_token_address]] = _rewards_distributor_address;\r\n    }\r\n\r\n    // The owner or the reward token managers can change managers\r\n    /// @notice Allows owner or reward token managers to change the reward manager for a given reward token\r\n    /// @param reward_token_address The address of the reward token\r\n    /// @param new_manager_address The new reward manager address\r\n    function changeTokenManager(address reward_token_address, address new_manager_address) external onlyTknMgrs(reward_token_address) {\r\n        rewardManagers[reward_token_address] = new_manager_address;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event RewardPaid(address indexed user, uint256 amount, address token_address, address destination_address);\r\n\r\n    /* ========== A CHICKEN ========== */\r\n    //\r\n    //         ,~.\r\n    //      ,-'__ `-,\r\n    //     {,-'  `. }              ,')\r\n    //    ,( a )   `-.__         ,',')~,\r\n    //   <=.) (         `-.__,==' ' ' '}\r\n    //     (   )                      /)\r\n    //      `-'\\   ,                    )\r\n    //          |  \\        `~.        /\r\n    //          \\   `._        \\      /\r\n    //           \\     `._____,'    ,'\r\n    //            `-.             ,'\r\n    //               `-._     _,-'\r\n    //                   77jj'\r\n    //                  //_||\r\n    //               __//--'/`\r\n    //             ,--'/`  '\r\n    //\r\n    // [hjw] https://textart.io/art/vw6Sa3iwqIRGkZsN1BC2vweF/chicken\r\n}\r\n\r\n\r\n// File contracts/Staking/FraxUnifiedFarm_ERC20.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ======================= FraxUnifiedFarm_ERC20 ======================\r\n// ====================================================================\r\n// For ERC20 Tokens\r\n// Uses FraxUnifiedFarmTemplate.sol\r\n\r\n// -------------------- VARIES --------------------\r\n\r\n// Balancer\r\n// import \"../Misc_AMOs/balancer/IBalancerGauge.sol\";\r\n\r\n// Bunni\r\n// import \"../Misc_AMOs/bunni/IBunniGauge.sol\";\r\n\r\n// Convex wrappers\r\n// import \"../Curve/ICurvefrxETHETHPool.sol\";\r\n// import \"../Misc_AMOs/convex/IConvexStakingWrapperFrax.sol\";\r\n// import \"../Misc_AMOs/convex/IDepositToken.sol\";\r\n// import \"../Misc_AMOs/curve/I2pool.sol\";\r\n// import \"../Misc_AMOs/curve/I2poolToken.sol\";\r\n// import \"../Misc_AMOs/curve/I2poolTokenNoLending.sol\";\r\n// import \"../Misc_AMOs/curve/ICurveStableSwapNG.sol\";\r\n// import \"../Misc_AMOs/curve/ICurveTricryptoOptimizedWETH.sol\";\r\n\r\n// Convex FXB\r\n// import \"../Misc_AMOs/curve/ICurveStableSwapNG.sol\";\r\n// import '../FXB/IFXB.sol';\r\n\r\n// Fraxlend\r\n// import '../Fraxlend/IFraxlendPair.sol';\r\n\r\n// Fraxswap\r\n// import '../Fraxswap/core/interfaces/IFraxswapPair.sol';\r\n\r\n// G-UNI\r\n// import \"../Misc_AMOs/gelato/IGUniPool.sol\";\r\n\r\n// KyberSwap Elastic KyberSwapFarmingToken (KS-FT)\r\n// import \"../Misc_AMOs/kyberswap/elastic/IKyberSwapFarmingToken.sol\";\r\n\r\n// mStable\r\n// import '../Misc_AMOs/mstable/IFeederPool.sol';\r\n\r\n// StakeDAO sdETH-FraxPut\r\n// import '../Misc_AMOs/stakedao/IOpynPerpVault.sol';\r\n\r\n// StakeDAO Vault\r\n// import '../Misc_AMOs/stakedao/IStakeDaoVault.sol';\r\n\r\n// Uniswap V2\r\n// import '../Uniswap/Interfaces/IUniswapV2Pair.sol';\r\n\r\n// Vesper\r\n// import '../Misc_AMOs/vesper/IVPool.sol';\r\n\r\n// ------------------------------------------------\r\n\r\ncontract FraxUnifiedFarm_ERC20 is FraxUnifiedFarmTemplate {\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // -------------------- COMMON -------------------- \r\n    bool internal frax_is_token0;\r\n\r\n    // -------------------- VARIES --------------------\r\n\r\n    // Bunni\r\n    // Declared in FraxUnifiedFarmTemplate.sol\r\n\r\n    // Balancer\r\n    // Declared in FraxUnifiedFarmTemplate.sol\r\n\r\n    // Convex crvUSD/FRAX\r\n    // IConvexStakingWrapperFrax public stakingToken;\r\n    // I2poolTokenNoLending public curveToken;\r\n    // ICurvefrxETHETHPool public curvePool;\r\n\r\n    // Convex stkcvxFPIFRAX, stkcvxFRAXBP, etc\r\n    // IConvexStakingWrapperFrax public stakingToken;\r\n    // I2poolToken public curveToken;\r\n    // ICurveStableSwapNG public curveToken;\r\n    // ICurveTricryptoOptimizedWETH public curveToken;\r\n    // I2pool public curvePool;\r\n    // ICurvefrxETHETHPool public curvePool;\r\n    // ICurveStableSwapNG public curvePool;\r\n    // ICurveTricryptoOptimizedWETH public curvePool;\r\n\r\n    // Fraxswap\r\n    // IFraxswapPair public stakingToken;\r\n\r\n    // Fraxlend\r\n    // IFraxlendPair public stakingToken;\r\n\r\n    // G-UNI\r\n    // IGUniPool public stakingToken;\r\n\r\n    // KyberSwap Elastic KyberSwapFarmingToken (KS-FT)\r\n    // IKyberSwapFarmingToken public stakingToken;\r\n    \r\n    // mStable\r\n    // IFeederPool public stakingToken;\r\n\r\n    // sdETH-FraxPut Vault\r\n    // IOpynPerpVault public stakingToken;\r\n\r\n    // StakeDAO Vault\r\n    // IStakeDaoVault public stakingToken;\r\n\r\n    // Uniswap V2\r\n    // IUniswapV2Pair public stakingToken;\r\n\r\n    // Vesper\r\n    // IVPool public stakingToken;\r\n\r\n    // ------------------------------------------------\r\n\r\n    // Stake tracking\r\n    mapping(address => LockedStake[]) public lockedStakes;\r\n\r\n    /* ========== STRUCTS ========== */\r\n\r\n    // Struct for the stake\r\n    struct LockedStake {\r\n        bytes32 kek_id;\r\n        uint256 start_timestamp;\r\n        uint256 liquidity;\r\n        uint256 ending_timestamp;\r\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\r\n    }\r\n    \r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner,\r\n        address[] memory _rewardTokens,\r\n        address[] memory _rewardManagers,\r\n        uint256[] memory _rewardRatesManual,\r\n        address[] memory _gaugeControllers,\r\n        address[] memory _rewardDistributors,\r\n        address _stakingToken\r\n    ) \r\n    FraxUnifiedFarmTemplate(_owner, _rewardTokens, _rewardManagers, _rewardRatesManual, _gaugeControllers, _rewardDistributors)\r\n    {\r\n\r\n        // -------------------- VARIES (USE CHILD FOR LOGIC) --------------------\r\n\r\n        // Bunni\r\n        // USE CHILD\r\n\r\n        // Convex stkcvxFPIFRAX, stkcvxFRAXBP, etc\r\n        // USE CHILD\r\n\r\n        // Fraxlend\r\n        // USE CHILD\r\n\r\n        // Fraxswap\r\n        // USE CHILD\r\n\r\n        // G-UNI\r\n        // stakingToken = IGUniPool(_stakingToken);\r\n        // address token0 = address(stakingToken.token0());\r\n        // frax_is_token0 = (token0 == frax_address);\r\n\r\n        // KyberSwap Elastic KyberSwapFarmingToken (KS-FT)\r\n        // stakingToken = IKyberSwapFarmingToken(_stakingToken);\r\n\r\n        // mStable\r\n        // stakingToken = IFeederPool(_stakingToken);\r\n\r\n        // StakeDAO sdETH-FraxPut Vault\r\n        // stakingToken = IOpynPerpVault(_stakingToken);\r\n\r\n        // StakeDAO Vault\r\n        // stakingToken = IStakeDaoVault(_stakingToken);\r\n\r\n        // Uniswap V2\r\n        // stakingToken = IUniswapV2Pair(_stakingToken);\r\n        // address token0 = stakingToken.token0();\r\n        // if (token0 == frax_address) frax_is_token0 = true;\r\n        // else frax_is_token0 = false;\r\n\r\n        // Vesper\r\n        // stakingToken = IVPool(_stakingToken);\r\n    }\r\n\r\n    /* ============= VIEWS ============= */\r\n\r\n    // ------ FRAX RELATED ------\r\n\r\n    function fraxPerLPToken() public virtual view override returns (uint256) {\r\n        // Get the amount of FRAX 'inside' of the lp tokens\r\n        uint256 frax_per_lp_token;\r\n\r\n        // Balancer\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // Bunni\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // Convex stkcvxFPIFRAX and stkcvxFRAXBP only\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // Convex Stable/FRAXBP\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // Convex Volatile/FRAXBP\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // Fraxlend\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // Fraxswap\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // G-UNI\r\n        // ============================================\r\n        // {\r\n        //     (uint256 reserve0, uint256 reserve1) = stakingToken.getUnderlyingBalances();\r\n        //     uint256 total_frax_reserves = frax_is_token0 ? reserve0 : reserve1;\r\n\r\n        //     frax_per_lp_token = (total_frax_reserves * 1e18) / stakingToken.totalSupply();\r\n        // }\r\n\r\n        // KyberSwap Elastic KyberSwapFarmingToken (KS-FT)\r\n        // ============================================\r\n        // USE CHILD\r\n\r\n        // mStable\r\n        // ============================================\r\n        // {\r\n        //     uint256 total_frax_reserves;\r\n        //     (, IFeederPool.BassetData memory vaultData) = (stakingToken.getBasset(frax_address));\r\n        //     total_frax_reserves = uint256(vaultData.vaultBalance);\r\n        //     frax_per_lp_token = (total_frax_reserves * 1e18) / stakingToken.totalSupply();\r\n        // }\r\n\r\n        // StakeDAO sdETH-FraxPut Vault\r\n        // ============================================\r\n        // {\r\n        //    uint256 frax3crv_held = stakingToken.totalUnderlyingControlled();\r\n        \r\n        //    // Optimistically assume 50/50 FRAX/3CRV ratio in the metapool to save gas\r\n        //    frax_per_lp_token = ((frax3crv_held * 1e18) / stakingToken.totalSupply()) / 2;\r\n        // }\r\n\r\n        // StakeDAO Vault\r\n        // ============================================\r\n        // {\r\n        //    uint256 frax3crv_held = stakingToken.balance();\r\n        \r\n        //    // Optimistically assume 50/50 FRAX/3CRV ratio in the metapool to save gas\r\n        //    frax_per_lp_token = ((frax3crv_held * 1e18) / stakingToken.totalSupply()) / 2;\r\n        // }\r\n\r\n        // Uniswap V2\r\n        // ============================================\r\n        // {\r\n        //     uint256 total_frax_reserves;\r\n        //     (uint256 reserve0, uint256 reserve1, ) = (stakingToken.getReserves());\r\n        //     if (frax_is_token0) total_frax_reserves = reserve0;\r\n        //     else total_frax_reserves = reserve1;\r\n\r\n        //     frax_per_lp_token = (total_frax_reserves * 1e18) / stakingToken.totalSupply();\r\n        // }\r\n\r\n        // Vesper\r\n        // ============================================\r\n        // frax_per_lp_token = stakingToken.pricePerShare();\r\n\r\n        return frax_per_lp_token;\r\n    }\r\n\r\n    // ------ LIQUIDITY AND WEIGHTS ------\r\n    function calcCurrLockMultiplier(address account, uint256 stake_idx) public view returns (uint256 midpoint_lock_multiplier) {\r\n        // Get the stake\r\n        LockedStake memory thisStake = lockedStakes[account][stake_idx];\r\n\r\n        // Handles corner case where user never claims for a new stake\r\n        // Don't want the multiplier going above the max\r\n        uint256 accrue_start_time;\r\n        if (lastRewardClaimTime[account] < thisStake.start_timestamp) {\r\n            accrue_start_time = thisStake.start_timestamp;\r\n        }\r\n        else {\r\n            accrue_start_time = lastRewardClaimTime[account];\r\n        }\r\n        \r\n        // If the lock is expired\r\n        if (thisStake.ending_timestamp <= block.timestamp) {\r\n            // If the lock expired in the time since the last claim, the weight needs to be proportionately averaged this time\r\n            if (lastRewardClaimTime[account] < thisStake.ending_timestamp){\r\n                uint256 time_before_expiry = thisStake.ending_timestamp - accrue_start_time;\r\n                uint256 time_after_expiry = block.timestamp - thisStake.ending_timestamp;\r\n\r\n                // Average the pre-expiry lock multiplier\r\n                uint256 pre_expiry_avg_multiplier = lockMultiplier(time_before_expiry / 2);\r\n\r\n                // Get the weighted-average lock_multiplier\r\n                // uint256 numerator = (pre_expiry_avg_multiplier * time_before_expiry) + (MULTIPLIER_PRECISION * time_after_expiry);\r\n                uint256 numerator = (pre_expiry_avg_multiplier * time_before_expiry) + (0 * time_after_expiry);\r\n                midpoint_lock_multiplier = numerator / (time_before_expiry + time_after_expiry);\r\n            }\r\n            else {\r\n                // Otherwise, it needs to just be 1x\r\n                // midpoint_lock_multiplier = MULTIPLIER_PRECISION;\r\n\r\n                // Otherwise, it needs to just be 0x\r\n                midpoint_lock_multiplier = 0;\r\n            }\r\n        }\r\n        // If the lock is not expired\r\n        else {\r\n            // Decay the lock multiplier based on the time left\r\n            uint256 avg_time_left;\r\n            {\r\n                uint256 time_left_p1 = thisStake.ending_timestamp - accrue_start_time;\r\n                uint256 time_left_p2 = thisStake.ending_timestamp - block.timestamp;\r\n                avg_time_left = (time_left_p1 + time_left_p2) / 2;\r\n            }\r\n            midpoint_lock_multiplier = lockMultiplier(avg_time_left);\r\n        }\r\n\r\n        // Sanity check: make sure it never goes above the initial multiplier\r\n        if (midpoint_lock_multiplier > thisStake.lock_multiplier) midpoint_lock_multiplier = thisStake.lock_multiplier;\r\n    }\r\n\r\n    // Calculate the combined weight for an account\r\n    function calcCurCombinedWeight(address account) public override view\r\n        returns (\r\n            uint256 old_combined_weight,\r\n            uint256 new_vefxs_multiplier,\r\n            uint256 new_combined_weight\r\n        )\r\n    {\r\n        // Get the old combined weight\r\n        old_combined_weight = _combined_weights[account];\r\n\r\n        // Get the veFXS multipliers\r\n        // For the calculations, use the midpoint (analogous to midpoint Riemann sum)\r\n        new_vefxs_multiplier = veFXSMultiplier(account);\r\n\r\n        uint256 midpoint_vefxs_multiplier;\r\n        if (\r\n            (_locked_liquidity[account] == 0 && _combined_weights[account] == 0) || \r\n            (new_vefxs_multiplier >= _vefxsMultiplierStored[account])\r\n        ) {\r\n            // This is only called for the first stake to make sure the veFXS multiplier is not cut in half\r\n            // Also used if the user increased or maintained their position\r\n            midpoint_vefxs_multiplier = new_vefxs_multiplier;\r\n        }\r\n        else {\r\n            // Handles natural decay with a non-increased veFXS position\r\n            midpoint_vefxs_multiplier = (new_vefxs_multiplier + _vefxsMultiplierStored[account]) / 2;\r\n        }\r\n\r\n        // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\r\n        new_combined_weight = 0;\r\n        for (uint256 i = 0; i < lockedStakes[account].length; i++) {\r\n            LockedStake memory thisStake = lockedStakes[account][i];\r\n\r\n            // Calculate the midpoint lock multiplier\r\n            uint256 midpoint_lock_multiplier = calcCurrLockMultiplier(account, i);\r\n\r\n            // Calculate the combined boost\r\n            uint256 liquidity = thisStake.liquidity;\r\n            uint256 combined_boosted_amount = liquidity + ((liquidity * (midpoint_lock_multiplier + midpoint_vefxs_multiplier)) / MULTIPLIER_PRECISION);\r\n            new_combined_weight += combined_boosted_amount;\r\n        }\r\n    }\r\n\r\n    // ------ LOCK RELATED ------\r\n\r\n    // All the locked stakes for a given account\r\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\r\n        return lockedStakes[account];\r\n    }\r\n\r\n    // Returns the length of the locked stakes for a given account\r\n    function lockedStakesOfLength(address account) external view returns (uint256) {\r\n        return lockedStakes[account].length;\r\n    }\r\n\r\n    // // All the locked stakes for a given account [old-school method]\r\n    // function lockedStakesOfMultiArr(address account) external view returns (\r\n    //     bytes32[] memory kek_ids,\r\n    //     uint256[] memory start_timestamps,\r\n    //     uint256[] memory liquidities,\r\n    //     uint256[] memory ending_timestamps,\r\n    //     uint256[] memory lock_multipliers\r\n    // ) {\r\n    //     for (uint256 i = 0; i < lockedStakes[account].length; i++){ \r\n    //         LockedStake memory thisStake = lockedStakes[account][i];\r\n    //         kek_ids[i] = thisStake.kek_id;\r\n    //         start_timestamps[i] = thisStake.start_timestamp;\r\n    //         liquidities[i] = thisStake.liquidity;\r\n    //         ending_timestamps[i] = thisStake.ending_timestamp;\r\n    //         lock_multipliers[i] = thisStake.lock_multiplier;\r\n    //     }\r\n    // }\r\n\r\n    /* =============== MUTATIVE FUNCTIONS =============== */\r\n\r\n    // ------ STAKING ------\r\n\r\n    function _updateLiqAmts(address staker_address, uint256 amt, bool is_add) internal {\r\n        // Get the proxy address\r\n        address the_proxy = getProxyFor(staker_address);\r\n\r\n        if (is_add) {\r\n            // Update total liquidities\r\n            _total_liquidity_locked += amt;\r\n            _locked_liquidity[staker_address] += amt;\r\n\r\n            // Update the proxy\r\n            if (the_proxy != address(0)) proxy_lp_balances[the_proxy] += amt;\r\n        }\r\n        else {\r\n            // Update total liquidities\r\n            _total_liquidity_locked -= amt;\r\n            _locked_liquidity[staker_address] -= amt;\r\n\r\n            // Update the proxy\r\n            if (the_proxy != address(0)) proxy_lp_balances[the_proxy] -= amt;\r\n        }\r\n\r\n        // Need to call to update the combined weights\r\n        _updateRewardAndBalance(staker_address, false, true);\r\n    }\r\n\r\n    function _getStake(address staker_address, bytes32 kek_id) internal view returns (LockedStake memory locked_stake, uint256 arr_idx) {\r\n        if (kek_id != 0) {\r\n            for (uint256 i = 0; i < lockedStakes[staker_address].length; i++){ \r\n                if (kek_id == lockedStakes[staker_address][i].kek_id){\r\n                    locked_stake = lockedStakes[staker_address][i];\r\n                    arr_idx = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        require(kek_id != 0 && locked_stake.kek_id == kek_id, \"Stake not found\");\r\n        \r\n    }\r\n\r\n    // Add additional LPs to an existing locked stake\r\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) nonReentrant public {\r\n        // Make sure staking isn't paused\r\n        require(!stakingPaused, \"Staking paused\");\r\n\r\n        // Make sure you are not in shutdown\r\n        require(!withdrawalOnlyShutdown, \"Only withdrawals allowed\");\r\n\r\n        // Claim rewards at the old balance first\r\n        _getReward(msg.sender, msg.sender, true);\r\n        \r\n        // Get the stake and its index\r\n        (LockedStake memory thisStake, uint256 theArrayIndex) = _getStake(msg.sender, kek_id);\r\n\r\n        // Calculate the new amount\r\n        uint256 new_amt = thisStake.liquidity + addl_liq;\r\n\r\n        // Checks\r\n        require(addl_liq >= 0, \"Must be positive\");\r\n\r\n        // Pull the tokens from the sender\r\n        TransferHelper.safeTransferFrom(address(stakingToken), msg.sender, address(this), addl_liq);\r\n\r\n        // Update the stake\r\n        lockedStakes[msg.sender][theArrayIndex] = LockedStake(\r\n            kek_id,\r\n            thisStake.start_timestamp,\r\n            new_amt,\r\n            thisStake.ending_timestamp,\r\n            thisStake.lock_multiplier\r\n        );\r\n\r\n        // Update liquidities\r\n        _updateLiqAmts(msg.sender, addl_liq, true);\r\n\r\n        emit LockedAdditional(msg.sender, kek_id, addl_liq);\r\n    }\r\n\r\n    // Extends the lock of an existing stake\r\n    function lockLonger(bytes32 kek_id, uint256 new_ending_ts) nonReentrant public {\r\n        // Make sure staking isn't paused\r\n        require(!stakingPaused, \"Staking paused\");\r\n\r\n        // Make sure you are not in shutdown\r\n        require(!withdrawalOnlyShutdown, \"Only withdrawals allowed\");\r\n\r\n        // Claim rewards at the old balance first\r\n        _getReward(msg.sender, msg.sender, true);\r\n        \r\n        // Get the stake and its index\r\n        (LockedStake memory thisStake, uint256 theArrayIndex) = _getStake(msg.sender, kek_id);\r\n\r\n        // Check\r\n        require(new_ending_ts > block.timestamp, \"Must be in the future\");\r\n\r\n        // Calculate some times\r\n        uint256 time_left = (thisStake.ending_timestamp > block.timestamp) ? thisStake.ending_timestamp - block.timestamp : 0;\r\n        uint256 new_secs = new_ending_ts - block.timestamp;\r\n\r\n        // Checks\r\n        // require(time_left > 0, \"Already expired\");\r\n        require(new_secs > time_left, \"Cannot shorten lock time\");\r\n        require(new_secs >= lock_time_min, \"Minimum stake time not met\");\r\n        require(new_secs <= lock_time_for_max_multiplier, \"Trying to lock for too long\");\r\n\r\n        // Update the stake\r\n        lockedStakes[msg.sender][theArrayIndex] = LockedStake(\r\n            kek_id,\r\n            block.timestamp,\r\n            thisStake.liquidity,\r\n            new_ending_ts,\r\n            lockMultiplier(new_secs)\r\n        );\r\n\r\n        // Need to call to update the combined weights\r\n        _updateRewardAndBalance(msg.sender, false, true);\r\n\r\n        emit LockedLonger(msg.sender, kek_id, new_secs, block.timestamp, new_ending_ts);\r\n    }\r\n\r\n    \r\n\r\n    // Two different stake functions are needed because of delegateCall and msg.sender issues (important for proxies)\r\n    function stakeLocked(uint256 liquidity, uint256 secs) nonReentrant external returns (bytes32) {\r\n        return _stakeLocked(msg.sender, msg.sender, liquidity, secs, block.timestamp);\r\n    }\r\n\r\n    // If this were not internal, and source_address had an infinite approve, this could be exploitable\r\n    // (pull funds from source_address and stake for an arbitrary staker_address)\r\n    function _stakeLocked(\r\n        address staker_address,\r\n        address source_address,\r\n        uint256 liquidity,\r\n        uint256 secs,\r\n        uint256 start_timestamp\r\n    ) internal updateRewardAndBalanceMdf(staker_address, true) returns (bytes32) {\r\n        require(!withdrawalOnlyShutdown, \"Only withdrawals allowed\");\r\n        require(!stakingPaused, \"Staking paused\");\r\n        require(secs >= lock_time_min, \"Minimum stake time not met\");\r\n        require(secs <= lock_time_for_max_multiplier,\"Trying to lock for too long\");\r\n\r\n        // Pull in the required token(s)\r\n        // Varies per farm\r\n        TransferHelper.safeTransferFrom(address(stakingToken), source_address, address(this), liquidity);\r\n\r\n        // Get the lock multiplier and kek_id\r\n        uint256 lock_multiplier = lockMultiplier(secs);\r\n        bytes32 kek_id = keccak256(abi.encodePacked(staker_address, start_timestamp, liquidity, _locked_liquidity[staker_address]));\r\n        \r\n        // Create the locked stake\r\n        lockedStakes[staker_address].push(LockedStake(\r\n            kek_id,\r\n            start_timestamp,\r\n            liquidity,\r\n            start_timestamp + secs,\r\n            lock_multiplier\r\n        ));\r\n\r\n        // Update liquidities\r\n        _updateLiqAmts(staker_address, liquidity, true);\r\n\r\n        emit StakeLocked(staker_address, liquidity, secs, kek_id, source_address);\r\n\r\n        return kek_id;\r\n    }\r\n\r\n    // ------ WITHDRAWING ------\r\n\r\n    /// @notice Withdraw a stake. \r\n    /// @param kek_id The id for the stake\r\n    /// @param claim_rewards_deprecated DEPRECATED, has no effect (always claims rewards regardless)\r\n    /// @dev Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues (important for migration)\r\n    function withdrawLocked(bytes32 kek_id, address destination_address, bool claim_rewards_deprecated) nonReentrant external returns (uint256) {\r\n        require(withdrawalsPaused == false, \"Withdrawals paused\");\r\n        return _withdrawLocked(msg.sender, destination_address, kek_id, claim_rewards_deprecated);\r\n    }\r\n\r\n    /// @notice No withdrawer == msg.sender check needed since this is only internally callable and the checks are done in the wrapper functions like withdraw(), migrator_withdraw_unlocked() and migrator_withdraw_locked()\r\n    /// @param staker_address The address of the staker\r\n    /// @param destination_address Destination address for the withdrawn LP\r\n    /// @param kek_id The id for the stake\r\n    /// @param claim_rewards_deprecated DEPRECATED, has no effect (always claims rewards regardless)\r\n    function _withdrawLocked(\r\n        address staker_address,\r\n        address destination_address,\r\n        bytes32 kek_id,\r\n        bool claim_rewards_deprecated\r\n    ) internal returns (uint256) {\r\n        // Collect rewards first and then update the balances\r\n        // withdrawalOnlyShutdown to be used in an emergency situation if reward is overemitted or not available\r\n        // and the user can forfeit rewards to get their principal back. \r\n        if (withdrawalOnlyShutdown) {\r\n            // Do nothing.\r\n        }\r\n        else {\r\n            // Get the reward\r\n            _getReward(staker_address, destination_address, true);\r\n        }\r\n\r\n        // Get the stake and its index\r\n        (LockedStake memory thisStake, uint256 theArrayIndex) = _getStake(staker_address, kek_id);\r\n        require(block.timestamp >= thisStake.ending_timestamp || stakesUnlocked == true, \"Stake is still locked!\");\r\n        uint256 liquidity = thisStake.liquidity;\r\n\r\n        if (liquidity > 0) {\r\n\r\n            // Give the tokens to the destination_address\r\n            // Should throw if insufficient balance\r\n            TransferHelper.safeTransfer(address(stakingToken), destination_address, liquidity);\r\n\r\n            // Remove the stake from the array\r\n            delete lockedStakes[staker_address][theArrayIndex];\r\n\r\n            // Update liquidities\r\n            _updateLiqAmts(staker_address, liquidity, false);\r\n\r\n            emit WithdrawLocked(staker_address, liquidity, kek_id, destination_address);\r\n        }\r\n\r\n        return liquidity;\r\n    }\r\n\r\n\r\n    function _getRewardExtraLogic(address rewardee, address destination_address) internal override {\r\n        // Do nothing\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS - Owner or timelock only ========== */\r\n\r\n    // Inherited...\r\n\r\n    /* ========== EVENTS ========== */\r\n    event LockedAdditional(address indexed user, bytes32 kek_id, uint256 amount);\r\n    event LockedLonger(address indexed user, bytes32 kek_id, uint256 new_secs, uint256 new_start_ts, uint256 new_end_ts);\r\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\r\n    event WithdrawLocked(address indexed user, uint256 liquidity, bytes32 kek_id, address destination_address);\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/balancer/IAuraDeposit.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\ninterface IAuraDeposit {\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 );\r\n  function approve ( address spender, uint256 amount ) external returns ( bool );\r\n  function balanceOf ( address account ) external view returns ( uint256 );\r\n  function burn ( address _from, uint256 _amount ) external;\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function decreaseAllowance ( address spender, uint256 subtractedValue ) external returns ( bool );\r\n  function increaseAllowance ( address spender, uint256 addedValue ) external returns ( bool );\r\n  function mint ( address _to, uint256 _amount ) external;\r\n  function name (  ) external view returns ( string memory );\r\n  function operator (  ) external view returns ( address );\r\n  function symbol (  ) external view returns ( string memory );\r\n  function totalSupply (  ) external view returns ( uint256 );\r\n  function transfer ( address recipient, uint256 amount ) external returns ( bool );\r\n  function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/balancer/IBalancerVault.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n\r\n\r\ninterface IBalancerVault {\r\n  function WETH () external view returns (address);\r\n//   function batchSwap (uint8 kind, tuple[] swaps, address[] assets, tuple funds, int256[] limits, uint256 deadline) external returns (int256[] assetDeltas);\r\n  function deregisterTokens (bytes32 poolId, address[] memory tokens) external;\r\n//   function exitPool (bytes32 poolId, address sender, address recipient, tuple request) external;\r\n  function flashLoan (address recipient, address[] memory tokens, uint256[] memory amounts, bytes memory userData) external;\r\n  function getActionId (bytes4 selector) external view returns (bytes32);\r\n  function getAuthorizer () external view returns (address);\r\n  function getDomainSeparator () external view returns (bytes32);\r\n  function getInternalBalance (address user, address[] memory tokens) external view returns (uint256[] memory balances);\r\n  function getNextNonce (address user) external view returns (uint256);\r\n  function getPausedState () external view returns (bool paused, uint256 pauseWindowEndTime, uint256 bufferPeriodEndTime);\r\n  function getPool (bytes32 poolId) external view returns (address, uint8);\r\n  function getPoolTokenInfo (bytes32 poolId, address token) external view returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\r\n  function getPoolTokens (bytes32 poolId) external view returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\r\n  function getProtocolFeesCollector () external view returns (address);\r\n  function hasApprovedRelayer (address user, address relayer) external view returns (bool);\r\n//   function joinPool (bytes32 poolId, address sender, address recipient, tuple request) external;\r\n//   function managePoolBalance (tuple[] ops) external;\r\n//   function manageUserBalance (tuple[] ops) external;\r\n//   function queryBatchSwap (uint8 kind, tuple[] swaps, address[] assets, tuple funds) external returns (int256[]);\r\n  function registerPool (uint8 specialization) external returns (bytes32);\r\n  function registerTokens (bytes32 poolId, address[] memory tokens, address[] memory assetManagers) external;\r\n  function setAuthorizer (address newAuthorizer) external;\r\n  function setPaused (bool paused) external;\r\n  function setRelayerApproval (address sender, address relayer, bool approved) external;\r\n//   function swap (tuple singleSwap, tuple funds, uint256 limit, uint256 deadline) external returns (uint256 amountCalculated);\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/balancer/IComposableStablePool.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n\r\ninterface IComposableStablePool {\r\n  function DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL (  ) external view returns ( uint256 );\r\n  function DOMAIN_SEPARATOR (  ) external view returns ( bytes32 );\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 );\r\n  function approve ( address spender, uint256 amount ) external returns ( bool );\r\n  function balanceOf ( address account ) external view returns ( uint256 );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function decreaseAllowance ( address spender, uint256 amount ) external returns ( bool );\r\n  function disableRecoveryMode (  ) external;\r\n  function enableRecoveryMode (  ) external;\r\n  function getActionId ( bytes4 selector ) external view returns ( bytes32 );\r\n  function getActualSupply (  ) external view returns ( uint256 );\r\n  function getAmplificationParameter (  ) external view returns ( uint256 value, bool isUpdating, uint256 precision );\r\n  function getAuthorizer (  ) external view returns ( address );\r\n  function getBptIndex (  ) external view returns ( uint256 );\r\n  function getDomainSeparator (  ) external view returns ( bytes32 );\r\n  function getLastJoinExitData (  ) external view returns ( uint256 lastJoinExitAmplification, uint256 lastPostJoinExitInvariant );\r\n  function getMinimumBpt (  ) external pure returns ( uint256 );\r\n  function getNextNonce ( address account ) external view returns ( uint256 );\r\n  function getOwner (  ) external view returns ( address );\r\n  function getPausedState (  ) external view returns ( bool paused, uint256 pauseWindowEndTime, uint256 bufferPeriodEndTime );\r\n  function getPoolId (  ) external view returns ( bytes32 );\r\n  function getProtocolFeePercentageCache ( uint256 feeType ) external view returns ( uint256 );\r\n  function getProtocolFeesCollector (  ) external view returns ( address );\r\n  function getProtocolSwapFeeDelegation (  ) external view returns ( bool );\r\n  function getRate (  ) external view returns ( uint256 );\r\n  function getRateProviders (  ) external view returns ( address[] memory );\r\n  function getScalingFactors (  ) external view returns ( uint256[] memory );\r\n  function getSwapFeePercentage (  ) external view returns ( uint256 );\r\n  function getTokenRate ( address token ) external view returns ( uint256 );\r\n  function getTokenRateCache ( address token ) external view returns ( uint256 rate, uint256 oldRate, uint256 duration, uint256 expires );\r\n  function getVault (  ) external view returns ( address );\r\n  function inRecoveryMode (  ) external view returns ( bool );\r\n  function increaseAllowance ( address spender, uint256 addedValue ) external returns ( bool );\r\n  function isExemptFromYieldProtocolFee (  ) external view returns ( bool );\r\n  function isTokenExemptFromYieldProtocolFee ( address token ) external view returns ( bool );\r\n  function name (  ) external view returns ( string memory );\r\n  function nonces ( address owner ) external view returns ( uint256 );\r\n  function onExitPool ( bytes32 poolId, address sender, address recipient, uint256[] memory balances, uint256 lastChangeBlock, uint256 protocolSwapFeePercentage, bytes memory userData ) external returns ( uint256[] memory, uint256[] memory );\r\n  function onJoinPool ( bytes32 poolId, address sender, address recipient, uint256[] memory balances, uint256 lastChangeBlock, uint256 protocolSwapFeePercentage, bytes memory userData ) external returns ( uint256[] memory, uint256[] memory );\r\n  function pause (  ) external;\r\n  function permit ( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;\r\n  function queryExit ( bytes32 poolId, address sender, address recipient, uint256[] memory balances, uint256 lastChangeBlock, uint256 protocolSwapFeePercentage, bytes memory userData ) external returns ( uint256 bptIn, uint256[] memory amountsOut );\r\n  function queryJoin ( bytes32 poolId, address sender, address recipient, uint256[] memory balances, uint256 lastChangeBlock, uint256 protocolSwapFeePercentage, bytes memory userData ) external returns ( uint256 bptOut, uint256[] memory amountsIn );\r\n  function setAssetManagerPoolConfig ( address token, bytes memory poolConfig ) external;\r\n  function setSwapFeePercentage ( uint256 swapFeePercentage ) external;\r\n  function setTokenRateCacheDuration ( address token, uint256 duration ) external;\r\n  function startAmplificationParameterUpdate ( uint256 rawEndValue, uint256 endTime ) external;\r\n  function stopAmplificationParameterUpdate (  ) external;\r\n  function symbol (  ) external view returns ( string memory );\r\n  function totalSupply (  ) external view returns ( uint256 );\r\n  function transfer ( address recipient, uint256 amount ) external returns ( bool );\r\n  function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );\r\n  function unpause (  ) external;\r\n  function updateProtocolFeePercentageCache (  ) external;\r\n  function updateTokenRateCache ( address token ) external;\r\n  function version (  ) external view returns ( string memory );\r\n}\r\n\r\n\r\n// File contracts/Oracle/AggregatorV3Interface.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n// File contracts/Staking/Variants/FraxUnifiedFarm_ERC20_Other.sol\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\n\r\n\r\n// Balancer\r\n// =========================\r\n\r\n\r\n\r\n\r\n// Bunni\r\n// =========================\r\n// import \"../../Misc_AMOs/bunni/IBunniTokenLP.sol\";\r\n// import \"../../Misc_AMOs/bunni/IBunniGauge.sol\";\r\n// import \"../../Misc_AMOs/bunni/IBunniLens.sol\";\r\n// import \"../../Misc_AMOs/bunni/IBunniMinter.sol\";\r\n// import \"../../Uniswap_V3/IUniswapV3Pool.sol\";\r\n\r\n\r\ncontract FraxUnifiedFarm_ERC20_Other is FraxUnifiedFarm_ERC20 {\r\n\r\n    // frxETH Pricing\r\n    AggregatorV3Interface internal priceFeedETHUSD = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n\r\n    // Aura / Balancer\r\n    IAuraDeposit public aura_deposit;\r\n    IComposableStablePool public bal_vanilla_lp_tkn;\r\n    IBalancerVault public bal_vanilla_vault;\r\n\r\n    // Bunni\r\n    // IBunniTokenLP public lp_tkn;\r\n    // IUniswapV3Pool public univ3_pool;\r\n\r\n    string public farm_type = \"ERC20_Convex_Other\";\r\n\r\n    constructor (\r\n        address _owner,\r\n        address[] memory _rewardTokens,\r\n        address[] memory _rewardManagers,\r\n        uint256[] memory _rewardRates,\r\n        address[] memory _gaugeControllers,\r\n        address[] memory _rewardDistributors,\r\n        address _stakingToken \r\n    ) \r\n    FraxUnifiedFarm_ERC20(_owner , _rewardTokens, _rewardManagers, _rewardRates, _gaugeControllers, _rewardDistributors, _stakingToken)\r\n    {\r\n        // COMMENTED OUT SO COMPILER DOESNT COMPLAIN. UNCOMMENT WHEN DEPLOYING\r\n        \r\n        // Balancer\r\n        stakingToken = IAuraDepositVault(_stakingToken);\r\n        bal_vanilla_lp_tkn = IComposableStablePool(0xB06bFBD7b50F80c8d9dA57Fc4cF5CBD5B3E2f148);\r\n        bal_vanilla_vault = IBalancerVault(bal_vanilla_lp_tkn.getVault());\r\n\r\n        // Bunni\r\n        // stakingToken = IBunniGauge(_stakingToken);\r\n        // lp_tkn = IBunniTokenLP(stakingToken.lp_token());\r\n        // univ3_pool = IUniswapV3Pool(lp_tkn.pool());\r\n        // address token0 = univ3_pool.token0();\r\n        // frax_is_token0 = (token0 == frax_address);\r\n    }\r\n\r\n    // Aura & Balancer\r\n    // ----------------------------------------\r\n    // Nothing\r\n\r\n    // Bunni\r\n    // ----------------------------------------\r\n    // function setBunniAddrs(address _lens, address _minter) public onlyByOwnGov {\r\n    //     lens = IBunniLens(_lens);\r\n    //     minter = IBunniMinter(_minter);\r\n    // }\r\n\r\n    // // In case the rewards get screwed up\r\n    // function toggleBunni3rdPartyOLITClaimer(address _claimer) public onlyByOwnGov {\r\n    //     minter.toggle_approve_mint(_claimer);\r\n    // }\r\n\r\n\r\n    // frxETH pricing\r\n    // ----------------------------------------\r\n    function getLatestETHPriceE8() public view returns (int) {\r\n        // Returns in E8\r\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedETHUSD.latestRoundData();\r\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \"Invalid chainlink price\");\r\n        \r\n        return price;\r\n    }\r\n\r\n    function setETHUSDOracle(address _eth_usd_oracle_address) public onlyByOwnGov {\r\n        require(_eth_usd_oracle_address != address(0), \"Zero address detected\");\r\n\r\n        priceFeedETHUSD = AggregatorV3Interface(_eth_usd_oracle_address);\r\n    }\r\n\r\n    function fraxPerLPToken() public view override returns (uint256 frax_per_lp_token) {\r\n        // COMMENTED OUT SO COMPILER DOESNT COMPLAIN. UNCOMMENT WHEN DEPLOYING\r\n\r\n        // Aura / Balancer frxETH-pxETH\r\n        // ============================================\r\n        {\r\n            // Get the pool ID\r\n            bytes32 _poolId = bal_vanilla_lp_tkn.getPoolId();\r\n\r\n            // Get the balances of each token in the pool\r\n            ( , uint256[] memory balances, ) = bal_vanilla_vault.getPoolTokens(_poolId);\r\n            uint256 frxETH_in_pool = balances[1];\r\n            uint256 frxETH_usd_value_e36 = (1e10) * (frxETH_in_pool * uint256(getLatestETHPriceE8()));\r\n\r\n            // Calculate the frxETH value per \"actual\" LP\r\n            // Balancer vault to Aura deposit vault is 1:1\r\n            frax_per_lp_token = (frxETH_usd_value_e36) / bal_vanilla_lp_tkn.getActualSupply();\r\n        }\r\n\r\n        // Bunni FRAX/USDC Gauge\r\n        // ============================================\r\n        // {\r\n        //     // Get the BunniKey so you can query the lens\r\n        //     IBunniLens.BunniKey memory bkey = IBunniLens.BunniKey({\r\n        //         pool: univ3_pool,\r\n        //         tickLower: lp_tkn.tickLower(),\r\n        //         tickUpper: lp_tkn.tickUpper()\r\n        //     });\r\n        //     (, uint256 amt0, uint256 amt1) = lens.pricePerFullShare(bkey);\r\n\r\n        //     // Calc FRAX per LP\r\n        //     if (frax_is_token0) frax_per_lp_token = amt0;\r\n        //     else frax_per_lp_token = amt1;\r\n        // }\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardManagers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardRates\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_gaugeControllers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardDistributors\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedAdditional\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_secs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_start_ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_end_ts\",\"type\":\"uint256\"}],\"name\":\"LockedLonger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source_address\",\"type\":\"address\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"WithdrawLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aura_deposit\",\"outputs\":[{\"internalType\":\"contract IAuraDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal_vanilla_lp_tkn\",\"outputs\":[{\"internalType\":\"contract IComposableStablePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal_vanilla_vault\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcCurCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"old_combined_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_vefxs_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_combined_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake_idx\",\"type\":\"uint256\"}],\"name\":\"calcCurrLockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"midpoint_lock_multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"new_manager_address\",\"type\":\"address\"}],\"name\":\"changeTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"combinedWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"new_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm_type\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxPerLPStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxPerLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_per_lp_token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHPriceE8\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getProxyFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claim_extra_too\",\"type\":\"bool\"}],\"name\":\"getReward2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"getRewardExtraLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_per_duration_arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token_addr\",\"type\":\"address\"}],\"name\":\"isTokenManagerFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditional\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"new_ending_ts\",\"type\":\"uint256\"}],\"name\":\"lockLonger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"lockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_for_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedLiquidityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedStakes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ending_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lock_multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedStakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ending_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lock_multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct FraxUnifiedFarm_ERC20.LockedStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedStakesOfLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxLPForMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minVeFXSForMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_address\",\"type\":\"address\"}],\"name\":\"minVeFXSForMaxBoostProxy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_address\",\"type\":\"address\"}],\"name\":\"proxyStakedFrax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"}],\"name\":\"proxyToggleStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxy_lp_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_idx\",\"type\":\"uint256\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rwd_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenAddrToIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newRewardsPerTokenStored\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eth_usd_oracle_address\",\"type\":\"address\"}],\"name\":\"setETHUSDOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_misc_vars\",\"type\":\"uint256[6]\"}],\"name\":\"setMiscVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withdrawalsPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_rewardsCollectionPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withdrawalOnlyShutdown\",\"type\":\"bool\"}],\"name\":\"setPauses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_new_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards_distributor_address\",\"type\":\"address\"}],\"name\":\"setRewardVars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_address\",\"type\":\"address\"}],\"name\":\"stakerSetVeFXSProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staker_designated_proxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IAuraDepositVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"force_update\",\"type\":\"bool\"}],\"name\":\"sync_gauge_weights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy_addr\",\"type\":\"address\"}],\"name\":\"toggleValidVeFXSProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userStakedFrax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"veFXSMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vefxs_multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxs_boost_scale_factor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxs_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxs_per_frax_for_max_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claim_rewards_deprecated\",\"type\":\"bool\"}],\"name\":\"withdrawLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalOnlyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FraxUnifiedFarm_ERC20_Other", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000b1748c79709f4ba2dd82834b8c82d4a505003f2700000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000e557658e3d13d074961265756dc2efb6c903a76300000000000000000000000000000000000000000000000000000000000000030000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d0000000000000000000000000c0c293ce456ff0ed870add98a0828dd4d2903dbf000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000b1748c79709f4ba2dd82834b8c82d4a505003f270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000001af2af8c84000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000000000000000000000000000002e90edd00000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000278dc748eda1d8efef1adfb518542612b49fcd3400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://592b44fc0f7050f01f07051a367cd7050af002f179f3eeb4ce7a48c23e2fab23"}