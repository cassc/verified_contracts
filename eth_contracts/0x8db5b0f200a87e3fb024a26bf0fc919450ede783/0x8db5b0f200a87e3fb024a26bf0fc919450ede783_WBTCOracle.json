{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/WBTCOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport { IAlternateFeed } from 'src/Oracle.sol';\\n\\ninterface IAaveFeed {\\n    function latestAnswer() external view returns (int256); \\n}\\n\\ncontract WBTCOracle is IAlternateFeed {\\n\\n    IAaveFeed internal constant aaveFeed = IAaveFeed(0x230E0321Cf38F09e247e50Afc7801EA2351fe56F);\\n\\n    function price(address token) external override view returns (uint256) {\\n\\n        int256 answer = aaveFeed.latestAnswer();\\n        // return by converting it into 1e18\\n        return uint256(answer) * 1e10;\\n    }\\n\\n}\"\r\n    },\r\n    \"src/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { IOracle } from \\\"src/interfaces/IOracle.sol\\\";\\n\\n\\ninterface IAggregator {\\n    function latestRoundData() external view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );    \\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IAlternateFeed {\\n    function price(address token) external view returns (uint256);\\n}\\n\\nstruct ChainlinkFeedInfo {\\n    IAggregator aggregator;\\n    uint96 stalenessCheck;\\n}\\n\\ncontract Oracle is IOracle, Ownable {\\n    // Chainlink aggregator feeds mapping for token prices in USD\\n    mapping(address => ChainlinkFeedInfo) chainkLinkFeeds;\\n    // Alternate aggregator feeds mapping for token prices in USD\\n    mapping(address => IAlternateFeed) alternateFeeds;\\n\\n    error Oracle__tokenFeedNotPresent();\\n    error Oracle__priceFeedStale();\\n\\n    uint256 public constant DECIMALS = 18;\\n\\n    uint256 public constant STALENESS_CHECK = 6 hours;\\n\\n    function setChainlinkSource(address token, address aggregator, uint96 stalenessCheck) external onlyOwner  {\\n        chainkLinkFeeds[token] = ChainlinkFeedInfo(IAggregator(aggregator), stalenessCheck);\\n    }\\n\\n    function setAlternateSource(address token, address source) external onlyOwner {\\n        alternateFeeds[token] = IAlternateFeed(source);\\n    }\\n\\n    // Get all prices in USD in 18 decimals\\n    function price(address token) external override view returns(uint256 _price) {\\n\\n        if(address(chainkLinkFeeds[token].aggregator) != address(0)){\\n            int256 answer; uint256 lastUpdatedAt;\\n\\n            ChainlinkFeedInfo memory feedInfo = chainkLinkFeeds[token];\\n\\n            (, answer,, lastUpdatedAt,) = feedInfo.aggregator.latestRoundData();\\n\\n            if(block.timestamp - lastUpdatedAt > feedInfo.stalenessCheck){\\n                revert Oracle__priceFeedStale();\\n            }\\n\\n            _price = uint256(answer) * (10 ** (DECIMALS - (uint256(feedInfo.aggregator.decimals()))));\\n\\n        }else if(address(alternateFeeds[token]) != address(0)){\\n            \\n            _price = alternateFeeds[token].price(token);\\n\\n        }else {\\n\\n            revert Oracle__tokenFeedNotPresent();\\n\\n        }\\n\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IOracle {\\n    function price(address token) external view returns (uint256);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WBTCOracle", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}